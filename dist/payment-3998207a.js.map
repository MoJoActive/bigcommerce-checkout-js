{"version":3,"file":"payment-3998207a.js","mappings":"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","sources":["webpack://checkout/./packages/paypal-express-integration/src/PaypalExpressPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreePaypalPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getIdealValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectIdealPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/constants.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchValidation.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchFormFields.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchMandateText.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchPaymentForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/BraintreeAchPaymentMethod.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/bolt-integration/src/BoltClientPaymentMethod.tsx","webpack://checkout/./packages/clearpay-integration/src/ClearpayPaymentMethod.tsx","webpack://checkout/./packages/apple-pay-integration/src/ApplePayPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx","webpack://checkout/./packages/barclay-integration/src/BarclaycardPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/hooks/useBraintreeFastlaneInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneCreditCardForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/index.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/BraintreeFastlanePaymentMethod.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2Form.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2PaymentMethod.tsx","webpack://checkout/./packages/affirm-integration/src/AffirmPaymentMethod.tsx","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2PaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/VisaCheckout/VisaCheckoutPaymentMethod.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3PaymentMethod.tsx","webpack://checkout/./packages/hosted-payment-integration/src/HostedPaymentMethod.tsx","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/core/src/app/coupon/AppliedCoupon.tsx","webpack://checkout/./packages/core/src/app/giftCertificate/AppliedGiftCertificate.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconRemove.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemable.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemables.tsx","webpack://checkout/./packages/core/src/app/cart/Redeemable.tsx","webpack://checkout/./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentContext.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodProviderType.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectAlternativePaymentMethod.tsx","webpack://checkout/./packages/moneris-integration/src/MonerisPaymentMethod.tsx","webpack://checkout/./packages/offline-payment-integration/src/OfflinePaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapV2PaymentMethod.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectTextField.tsx","webpack://checkout/./packages/mollie-integration/src/MollieAPMCustomForm.tsx","webpack://checkout/./packages/mollie-integration/src/MollieCustomCardForm.tsx","webpack://checkout/./packages/mollie-integration/src/MolliePaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarna/KlarnaPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectInitializationData.ts","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas.tsx","webpack://checkout/./packages/core/src/app/ui/form/withForm.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useSepaInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getSepaValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectSepaPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/cart/mapToRedeemableProps.ts","webpack://checkout/./packages/core/src/app/payment/withPayment.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeLocalPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltCustomForm.tsx","webpack://checkout/./packages/bolt-integration/src/BoltEmbeddedPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getPayByBankValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectPayByBankPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/constants.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectNumberField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectEcpFieldset.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useEcpInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getEcpValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectEcpPaymentMethod.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/form/TextArea.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalLink.tsx","webpack://checkout/./packages/core/src/app/ui/text/MultiLineText.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditionsField.tsx","webpack://checkout/./packages/core/src/app/payment/mapSubmitOrderErrorMessage.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getUniquePaymentMethodId.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardFieldsetValues.ts","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditions.tsx","webpack://checkout/./packages/core/src/app/payment/getPaymentValidationSchema.ts","webpack://checkout/./packages/core/src/app/termsConditions/getTermsConditionsValidationSchema.ts","webpack://checkout/./packages/core/src/app/ui/form/CustomChecklistItem.tsx","webpack://checkout/./packages/bigcommerce-payments-utils/src/BigCommercePaymentsPayLaterBanner.tsx","webpack://checkout/./packages/paypal-utils/src/BraintreePaypalCreditBanner.tsx","webpack://checkout/./packages/paypal-utils/src/PaypalCommerceCreditBanner.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIconList.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodTitle.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodDisplayName.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardFieldsetValues.ts","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormProvider.tsx","webpack://checkout/./packages/core/src/app/generated/paymentIntegrations/lazy.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodV2.tsx","webpack://checkout/./packages/core/src/app/payment/resolvePaymentMethod.ts","webpack://checkout/./packages/core/src/app/payment/createPaymentFormService.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodList.tsx","webpack://checkout/./packages/core/src/app/common/utility/isMobile.ts","webpack://checkout/./packages/core/src/app/payment/PaymentRedeemables.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentSubmitButton.tsx","webpack://checkout/./packages/core/src/app/payment/SpamProtectionField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditOverlay.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentForm.tsx","webpack://checkout/./packages/core/src/app/payment/Payment.tsx","webpack://checkout/./packages/core/src/app/payment/mapToOrderRequestBody.ts","webpack://checkout/./packages/core/src/app/common/error/isCartChangedError.ts","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2PaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectSelectField.tsx","webpack://checkout/./packages/klarna-integration/src/klarnav2/KlarnaV2PaymentMethod.tsx","webpack://checkout/./packages/afterpay-integration/src/AfterpayPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodName.ts","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/TextFieldForm.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomFormFields.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomPaymentMethod.tsx","webpack://checkout/./packages/worldpay-access-integration/src/WorldpayCreditCardPaymentMethod.tsx"],"sourcesContent":["import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaypalExpressPaymentMethodProps {\n    isEmbedded?: boolean;\n}\n\nconst PaypalExpressPaymentMethod: FunctionComponent<\n    PaymentMethodProps & PaypalExpressPaymentMethodProps\n> = ({ checkoutService, isEmbedded = false, ...rest }) => {\n    const initializePaypalExpressPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                paypalexpress: {\n                    useRedirectFlow: isEmbedded,\n                },\n            }),\n        [checkoutService, isEmbedded],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePaypalExpressPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalExpressPaymentMethod,\n    [{ id: 'paypalexpress' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const initializeBraintreePaypalPaymentMethod = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const { onUnhandledError, language, method, paymentForm } = rest;\n\n            return checkoutService.initializePayment({\n                ...defaultOptions,\n                braintree: {\n                    containerId: '#checkout-payment-continue',\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError?.(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError?.(error);\n                        }\n                    },\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                },\n            });\n        },\n        [rest, checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBraintreePaypalPaymentMethod}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreePaypalPaymentMethod,\n    [{ id: 'braintreepaypal' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltClientPaymentMethod from './BoltClientPaymentMethod';\nimport BoltEmbeddedPaymentMethod from './BoltEmbeddedPaymentMethod';\n\nconst BoltPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const useBoltEmbedded = method.initializationData?.embeddedOneClickEnabled;\n\n    if (useBoltEmbedded) {\n        return (\n            <BoltEmbeddedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                method={method}\n                paymentForm={paymentForm}\n                {...rest}\n            />\n        );\n    }\n\n    return (\n        <BoltClientPaymentMethod\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            method={method}\n            paymentForm={paymentForm}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BoltPaymentMethod,\n    [{ id: 'bolt' }],\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getIdealValidationSchema(language: LanguageService): ObjectSchema {\n    return object({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    });\n});\n","import React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectSelectField from './fields/BlueSnapDirectSelectField';\nimport getIdealValidationSchema from './validation-schemas/getIdealValidationSchema';\n\nconst BlueSnapDirectIdealPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment },\n    paymentForm: { setValidationSchema },\n    language,\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const { idealIssuers } = method.initializationData;\n\n    const idealIssuersSelectOptions = idealIssuers.map((issuer) => ({\n        value: issuer.issuerId,\n        label: issuer.issuerName,\n    }));\n\n    const initializeIdeal = useCallback(async () => {\n        setValidationSchema(method, getIdealValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method, setValidationSchema, language]);\n\n    const deinitializeIdeal = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeIdeal();\n\n        return () => {\n            void deinitializeIdeal();\n        };\n    }, [deinitializeIdeal, initializeIdeal]);\n\n    return (\n        <Fieldset\n            legend={<Legend hidden>{language.translate('payment.ideal.label')}</Legend>}\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.ideal.label')}\n                name=\"bic\"\n                options={{\n                    helperLabel: language.translate('payment.select_your_bank'),\n                    items: idealIssuersSelectOptions,\n                }}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectIdealPaymentMethod,\n    [{ id: 'ideal', gateway: 'bluesnapdirect' }],\n);\n","import { FormField } from '@bigcommerce/checkout-sdk';\n\nimport { DynamicFormFieldType } from '@bigcommerce/checkout/ui';\n\nexport enum BraintreeAchFieldType {\n    BusinessName = 'businessName',\n    AccountType = 'accountType',\n    AccountNumber = 'accountNumber',\n    RoutingNumber = 'routingNumber',\n    OwnershipType = 'ownershipType',\n    FirstName = 'firstName',\n    LastName = 'lastName',\n}\n\nexport enum OwnershipTypes {\n    Personal = 'Personal',\n    Business = 'Business',\n}\n\nexport enum AccountTypes {\n    Savings = 'Savings',\n    Checking = 'Checking',\n}\n\nconst accountTypeOptions = [\n    {\n        value: AccountTypes.Savings,\n        label: AccountTypes.Savings,\n    },\n    {\n        value: AccountTypes.Checking,\n        label: AccountTypes.Checking,\n    },\n];\n\nexport const ownershipTypeOptions = [\n    {\n        value: OwnershipTypes.Personal,\n        label: OwnershipTypes.Personal,\n    },\n    {\n        value: OwnershipTypes.Business,\n        label: OwnershipTypes.Business,\n    },\n];\n\nexport const defaultBraintreeAchFormFields: FormField[] = [\n    {\n        name: BraintreeAchFieldType.AccountType,\n        custom: false,\n        id: BraintreeAchFieldType.AccountType,\n        label: 'Account Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: accountTypeOptions,\n        },\n    },\n    {\n        name: BraintreeAchFieldType.AccountNumber,\n        custom: false,\n        id: BraintreeAchFieldType.AccountNumber,\n        label: 'Account Number',\n        required: true,\n        max: 9,\n        min: 8,\n    },\n    {\n        name: BraintreeAchFieldType.RoutingNumber,\n        custom: false,\n        id: BraintreeAchFieldType.RoutingNumber,\n        label: 'Routing Number',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.OwnershipType,\n        custom: false,\n        id: BraintreeAchFieldType.OwnershipType,\n        label: 'Ownership Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: ownershipTypeOptions,\n        },\n    },\n];\n\nexport const personalBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.FirstName,\n        custom: false,\n        id: BraintreeAchFieldType.FirstName,\n        label: 'First Name',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.LastName,\n        custom: false,\n        id: BraintreeAchFieldType.LastName,\n        label: 'Last Name',\n        required: true,\n    },\n];\n\nexport const businessBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.BusinessName,\n        custom: false,\n        id: BraintreeAchFieldType.BusinessName,\n        label: 'Business Name',\n        required: true,\n    },\n];\n","import { AchInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBraintreeAchInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => instruments.filter(isAchInstrument), [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset &&\n        !!currentInstrument &&\n        !currentInstrument.trustedShippingAddress;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBraintreeAchInstruments;\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { useCallback } from 'react';\nimport { object, string, StringSchema } from 'yup';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormValues,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst useBraintreeAchValidation = (method: PaymentMethod) => {\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const getValidationSchema = () => {\n        const ownershipType = paymentForm.getFieldValue('ownershipType');\n        const formFields =\n            ownershipType === OwnershipTypes.Business\n                ? businessBraintreeAchFormFields\n                : personalBraintreeAchFormFields;\n\n        const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n            [BraintreeAchFieldType.FirstName]: 'address.first_name',\n            [BraintreeAchFieldType.LastName]: 'address.last_name',\n            [BraintreeAchFieldType.AccountNumber]: 'payment.errors.account_number',\n            [BraintreeAchFieldType.RoutingNumber]: 'payment.errors.routing_number',\n            [BraintreeAchFieldType.BusinessName]: 'payment.errors.business_name',\n        };\n\n        return object(\n            formFields.reduce(\n                (schema, { id, required }) => {\n                    if (required) {\n                        if (requiredFieldErrorTranslationIds[id]) {\n                            schema[id] = string().required(\n                                language.translate(\n                                    `${requiredFieldErrorTranslationIds[id]}_required_error`,\n                                ),\n                            );\n\n                            if (id === BraintreeAchFieldType.AccountNumber) {\n                                schema[id] = schema[id].matches(\n                                    /^\\d+$/,\n                                    language.translate('payment.errors.only_numbers_error', {\n                                        label: language.translate('payment.account_number_label'),\n                                    }),\n                                );\n                            }\n\n                            if (id === BraintreeAchFieldType.RoutingNumber) {\n                                schema[id] = schema[id]\n                                    .matches(\n                                        /^\\d+$/,\n                                        language.translate('payment.errors.only_numbers_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                        }),\n                                    )\n                                    .min(\n                                        8,\n                                        language.translate('customer.min_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            min: 8,\n                                        }),\n                                    )\n                                    .max(\n                                        9,\n                                        language.translate('customer.max_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            max: 9,\n                                        }),\n                                    );\n                            }\n                        }\n                    }\n\n                    return schema;\n                },\n                // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n                {} as { [key: string]: StringSchema },\n            ),\n        );\n    };\n\n    const validateBraintreeAchForm = useCallback(\n        async (braintreeAchFormValues: PaymentFormValues): Promise<boolean> => {\n            const {\n                accountNumber,\n                businessName,\n                routingNumber,\n                ownershipType,\n                firstName,\n                lastName,\n            } = braintreeAchFormValues;\n\n            const validationSchema = getValidationSchema();\n\n            paymentForm.setValidationSchema(method, validationSchema);\n\n            const [\n                isValidAccountNumber,\n                isValidRoutingNumber,\n                isValidFirstName,\n                isValidLastName,\n                isValidBusinessName,\n            ] = await Promise.all([\n                await validationSchema.fields.accountNumber?.isValid(accountNumber),\n                await validationSchema.fields.routingNumber?.isValid(routingNumber),\n                await validationSchema.fields.firstName?.isValid(firstName),\n                await validationSchema.fields.lastName?.isValid(lastName),\n                await validationSchema.fields.businessName?.isValid(businessName),\n            ]);\n\n            const isValidDepositoryName =\n                ownershipType === OwnershipTypes.Business\n                    ? isValidBusinessName\n                    : isValidFirstName && isValidLastName;\n\n            return isValidRoutingNumber && isValidAccountNumber && isValidDepositoryName;\n        },\n        [getValidationSchema],\n    );\n\n    const resetFormValidation = useCallback(() => {\n        paymentForm.setValidationSchema(method, null);\n    }, [paymentForm, method]);\n\n    return {\n        validateBraintreeAchForm,\n        resetFormValidation,\n    };\n};\n\nexport default useBraintreeAchValidation;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField } from '@bigcommerce/checkout/ui';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst isBraintreeAchFormFieldName = (fieldName: string): fieldName is BraintreeAchFieldType => {\n    return Object.values(BraintreeAchFieldType).includes(fieldName as BraintreeAchFieldType);\n};\n\nconst getTranslatedLabelByFieldName = (fieldName: string, language: LanguageService) => {\n    const braintreeAchFormLabelsMap = {\n        firstName: language.translate('address.first_name_label'),\n        lastName: language.translate('address.last_name_label'),\n        accountNumber: language.translate('payment.account_number_label'),\n        routingNumber: language.translate('payment.account_routing_label'),\n        businessName: language.translate('payment.business_name_label'),\n        ownershipType: language.translate('payment.ownership_type_label'),\n        accountType: language.translate('payment.account_type_label'),\n    };\n\n    return isBraintreeAchFormFieldName(fieldName)\n        ? braintreeAchFormLabelsMap[fieldName]\n        : fieldName;\n};\n\nconst BraintreeAchFormFields: FunctionComponent = () => {\n    const { language } = useLocale();\n    const { paymentForm } = usePaymentFormContext();\n    const { getFieldValue, setFieldValue } = paymentForm;\n\n    const ownershipTypeValue = getFieldValue(BraintreeAchFieldType.OwnershipType);\n    const fieldValues =\n        ownershipTypeValue === OwnershipTypes.Business\n            ? businessBraintreeAchFormFields\n            : personalBraintreeAchFormFields;\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n        },\n        [setFieldValue],\n    );\n\n    return (\n        <>\n            {fieldValues.map((field) => (\n                <DynamicFormField\n                    extraClass={`dynamic-form-field--${field.id}`}\n                    field={field}\n                    key={field.id}\n                    label={getTranslatedLabelByFieldName(field.name, language)}\n                    onChange={handleChange(field.id)}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default BraintreeAchFormFields;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nimport { OwnershipTypes } from '../constants';\n\nexport interface BraintreeAchMandateTextProps {\n    isInstrumentFeatureAvailable?: boolean;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchMandateText: FunctionComponent<BraintreeAchMandateTextProps> = ({\n    isInstrumentFeatureAvailable,\n    updateMandateText,\n}) => {\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const {\n        businessName,\n        accountType,\n        accountNumber,\n        routingNumber,\n        ownershipType,\n        firstName,\n        lastName,\n    } = paymentForm.getFormValues();\n\n    const fullName = `${String(firstName)} ${String(lastName)}`;\n\n    const depositoryName = ownershipType === OwnershipTypes.Business ? businessName : fullName;\n    const outstandingBalance = checkoutState.data.getCheckout()?.outstandingBalance;\n    const storeName = checkoutState.data.getConfig()?.storeProfile.storeName;\n    const symbol = checkoutState.data.getCart()?.currency.symbol;\n\n    const mandateTextTranslationKey = isInstrumentFeatureAvailable\n        ? 'payment.braintreeach_vaulting_mandate_text'\n        : 'payment.braintreeach_mandate_text';\n\n    const currentDate = new Date(Date.now()).toJSON().slice(0, 10); // yyyy-mm-dd\n    const formattedDate = currentDate.split('-').reverse().join('.'); // dd.mm.yyyy\n\n    const mandateTextTranslationProps = {\n        accountType: String(accountType).toLowerCase(),\n        accountNumber: String(accountNumber),\n        currentDate: formattedDate,\n        depositoryName: String(depositoryName),\n        routingNumber: String(routingNumber),\n        outstandingBalance: `${symbol || ''}${outstandingBalance || ''}`,\n        storeName: String(storeName),\n    };\n\n    const mandateText = language.translate(mandateTextTranslationKey, mandateTextTranslationProps);\n\n    useEffect(() => {\n        updateMandateText(mandateText);\n    }, [mandateText, updateMandateText]);\n\n    const handleChange = (value: boolean) => {\n        paymentForm.setFieldValue('orderConsent', value);\n    };\n\n    return (\n        <div className=\"mandate-text\" data-test=\"mandate-text\">\n            <CheckboxFormField\n                labelContent={mandateText}\n                name=\"orderConsent\"\n                onChange={handleChange}\n            />\n        </div>\n    );\n};\n\nexport default BraintreeAchMandateText;\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { AccountTypes, OwnershipTypes } from '../constants';\nimport useBraintreeAchInstruments from '../hooks/useBraintreeAchInstruments';\nimport useBraintreeAchValidation from '../hooks/useBraintreeAchValidation';\n\nimport BraintreeAchFormFields from './BraintreeAchFormFields';\nimport BraintreeAchMandateText from './BraintreeAchMandateText';\n\nexport interface BraintreeAchPaymentFormProps {\n    method: PaymentMethod;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchPaymentForm: FunctionComponent<BraintreeAchPaymentFormProps> = ({\n    method,\n    updateMandateText,\n}) => {\n    const [isValidForm, setIsValidForm] = useState(false);\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { disableSubmit, getFieldValue, getFormValues, setFieldValue } = paymentForm;\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    } = useBraintreeAchInstruments(method);\n    const { validateBraintreeAchForm, resetFormValidation } = useBraintreeAchValidation(method);\n\n    const resetFormValues = () => {\n        const { firstName, lastName } = checkoutState.data.getBillingAddress() || {};\n\n        const defaultFormValues = {\n            ownershipType: OwnershipTypes.Personal,\n            accountType: AccountTypes.Savings,\n            accountNumber: '',\n            routingNumber: '',\n            businessName: '',\n            firstName: firstName || '',\n            lastName: lastName || '',\n            shouldSaveInstrument: false,\n            shouldSetAsDefaultInstrument: false,\n            instrumentId: currentInstrument?.bigpayToken || '',\n            orderConsent: false,\n        };\n\n        for (const [key, value] of Object.entries(defaultFormValues)) {\n            setFieldValue(key, value);\n        }\n    };\n\n    useEffect(() => {\n        resetFormValues();\n    }, [currentInstrument?.bigpayToken]);\n\n    const shouldShowForm =\n        !shouldShowInstrumentFieldset || shouldCreateNewInstrument || shouldConfirmInstrument;\n    const shouldShowMandateTextCheckbox = shouldShowForm && isValidForm && !shouldConfirmInstrument;\n\n    useEffect(() => {\n        if (shouldShowForm) {\n            const validate = async () => {\n                const braintreeAchFormValues = getFormValues();\n                const isValid = await validateBraintreeAchForm(braintreeAchFormValues);\n\n                if (!isValid && getFieldValue('orderConsent')) {\n                    setFieldValue('orderConsent', false);\n                }\n\n                setIsValidForm(isValid);\n            };\n\n            void validate();\n        } else {\n            resetFormValidation();\n        }\n    }, [\n        getFormValues,\n        setFieldValue,\n        setIsValidForm,\n        shouldShowForm,\n        validateBraintreeAchForm,\n        resetFormValidation,\n    ]);\n\n    useEffect(() => {\n        const mandateTextConfirmationCheckboxValue = getFieldValue('orderConsent');\n\n        const inValidForInstrumentConfirmation = shouldConfirmInstrument && !isValidForm;\n        const inValidForDefaultTransactions =\n            shouldShowMandateTextCheckbox && !mandateTextConfirmationCheckboxValue;\n\n        const shouldDisableSubmit = shouldShowForm\n            ? inValidForInstrumentConfirmation || inValidForDefaultTransactions\n            : false;\n\n        disableSubmit(method, shouldDisableSubmit);\n    }, [disableSubmit, getFieldValue, isValidForm, method, shouldShowMandateTextCheckbox]);\n\n    return (\n        <div className=\"checkout-ach-form\" data-test=\"checkout-ach-form\">\n            {shouldShowInstrumentFieldset && (\n                <div className=\"checkout-ach-form__instrument\">\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                </div>\n            )}\n\n            {shouldConfirmInstrument && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            {shouldShowForm && <BraintreeAchFormFields />}\n\n            {isInstrumentFeatureAvailable && (\n                <StoreInstrumentFieldset\n                    instrumentId={currentInstrument?.bigpayToken}\n                    instruments={accountInstruments}\n                    isAccountInstrument\n                />\n            )}\n\n            {shouldShowMandateTextCheckbox && (\n                <BraintreeAchMandateText\n                    isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                    updateMandateText={updateMandateText}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeAchPaymentForm;\n","import React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeAchPaymentForm from './components/BraintreeAchPaymentForm';\n\nconst BraintreeAchPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const currentMandateTextRef = useRef('');\n    const updateMandateText = (currentMandateText: string) => {\n        currentMandateTextRef.current = currentMandateText;\n    };\n\n    useEffect(() => {\n        const initializePaymentOrThrow = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    braintreeach: {\n                        getMandateText: () => currentMandateTextRef.current,\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePaymentOrThrow();\n\n        return () => {\n            const deinitializePaymentOrThrow = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePaymentOrThrow();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = checkoutState.data.getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeAchPaymentForm\n                                method={method}\n                                updateMandateText={updateMandateText}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeAchPaymentMethod,\n    [{ id: 'braintreeach' }],\n);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node: Node, done: () => void) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children ? (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div aria-live=\"polite\" className={bodyClassName}>\n                        {children}\n                    </div>\n                </CSSTransition>\n            ) : null}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { Placement } from '@popperjs/core';\nimport React, { ReactEventHandler, ReactNode, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children: ReactNode;\n}\n\nconst TooltipTrigger: React.FC<TooltipTriggerProps> = ({\n    placement = 'bottom',\n    tooltip,\n    children,\n}) => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const handleShow: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(true);\n    };\n\n    const handleHide: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(false);\n    };\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <span\n                        onBlur={handleHide}\n                        onFocus={handleShow}\n                        onMouseEnter={handleShow}\n                        onMouseLeave={handleHide}\n                        ref={ref}\n                    >\n                        {children}\n                    </span>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    shouldShow && (\n                        <div ref={ref} style={style}>\n                            {tooltip}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default TooltipTrigger;\n","import { CheckoutService, PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BoltClientPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    ...rest\n}) => {\n    const initializeBoltPayment: CheckoutService['initializePayment'] = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    useBigCommerceCheckout: true,\n                },\n            }),\n        [checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBoltPayment}\n            method={method}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltClientPaymentMethod;\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ClearpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ClearpayPaymentMethod,\n    [{ gateway: 'clearpay' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ApplePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    language,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    applepay: {\n                        shippingLabel: language.translate('cart.shipping_text'),\n                        subtotalLabel: language.translate('cart.subtotal_text'),\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, language, method, onUnhandledError]);\n\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ApplePaymentMethod,\n    [{ id: 'applepay' }],\n);\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { number } from 'card-validator';\n\nimport { WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","import {\n    CheckoutSelectors,\n    CustomerRequestOptions,\n    LanguageService,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    getPaymentMethodName,\n    PaymentFormService,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\n\nexport interface WalletButtonPaymentMethodProps {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WalletButtonPaymentMethodDerivedProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentDataRequired: boolean;\n    isPaymentSelected: boolean;\n}\n\nclass WalletButtonPaymentMethodComponent extends Component<WalletButtonPaymentMethodProps> {\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            paymentForm: { disableSubmit },\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<WalletButtonPaymentMethodProps & WalletButtonPaymentMethodDerivedProps>,\n    ): void {\n        const { method } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n        const { method: prevMethod, isPaymentDataRequired: prevIsPaymentDataRequired } = prevProps;\n\n        if (\n            method.initializationData !== prevMethod.initializationData ||\n            isPaymentDataRequired !== prevIsPaymentDataRequired\n        ) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const { isInitializing = false } = this.props;\n        const { isPaymentSelected } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    {isPaymentSelected ? this.renderPaymentView() : this.renderSignInView()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const { buttonId, signInButtonClassName, signInButtonLabel, method, language } = this.props;\n\n        return (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n                {signInButtonLabel || (\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_in_action\"\n                    />\n                )}\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const { buttonId, editButtonClassName, editButtonLabel, shouldShowEditButton, method } =\n            this.props;\n        const { accountMask, cardName, cardType, expiryMonth, expiryYear } =\n            this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <>\n                {!!cardName && (\n                    <p data-test=\"payment-method-wallet-card-name\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_name_label\" />:\n                        </strong>{' '}\n                        {cardName}\n                    </p>\n                )}\n\n                {!!accountMask && !!cardType && (\n                    <p data-test=\"payment-method-wallet-card-type\">\n                        <strong>{`${cardType}:`}</strong> {accountMask}\n                    </p>\n                )}\n\n                {!!expiryMonth && !!expiryYear && (\n                    <p data-test=\"payment-method-wallet-card-expiry\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                        </strong>{' '}\n                        {`${expiryMonth}/${expiryYear}`}\n                    </p>\n                )}\n\n                {!!shouldShowEditButton && (\n                    <p>\n                        {\n                            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                            <a\n                                className={editButtonClassName}\n                                href=\"#\"\n                                id={buttonId}\n                                onClick={preventDefault()}\n                            >\n                                {editButtonLabel || (\n                                    <TranslatedString id=\"remote.select_different_card_action\" />\n                                )}\n                            </a>\n                        }\n                    </p>\n                )}\n\n                <SignOutLink method={method} onSignOut={this.handleSignOut} />\n            </>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const {\n            paymentForm: { disableSubmit },\n            method,\n        } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        if (normalizeWalletPaymentData(method.initializationData) || !isPaymentDataRequired) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const { signOutCustomer, method, onSignOut = noop, onSignOutError = noop } = this.props;\n\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n\n    private getWalletButtonPaymentMethodDerivedProps(): WalletButtonPaymentMethodDerivedProps {\n        const { checkoutState, method } = this.props;\n        const {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        } = checkoutState;\n        const billingAddress = getBillingAddress();\n        const checkout = getCheckout();\n\n        if (!billingAddress || !checkout) {\n            throw new Error('Unable to get checkout');\n        }\n\n        const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n        return {\n            ...walletPaymentData,\n            // FIXME: I'm not sure how this would work for non-English names.\n            cardName:\n                walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        };\n    }\n}\n\nexport default WalletButtonPaymentMethodComponent;\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BarclaycardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BarclaycardPaymentMethod,\n    [{ gateway: 'barclaycard' }],\n);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBraintreeFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneCreditCardForm.scss';\n\ninterface BraintreeFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n}\n\nconst BraintreeFastlaneCreditCardForm: FunctionComponent<BraintreeFastlaneCreditCardFormProps> = ({\n    renderPayPalCardComponent,\n}) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#braintree-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"braintree-fastlane-cc-form-container\"\n            data-test=\"braintree-fastlane-cc-form-container\"\n            id=\"braintree-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BraintreeFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BraintreeFastlaneInstrumentsFormProps {\n    onChange: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n    selectedInstrument: CardInstrument;\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BraintreeFastlaneInstrumentsForm: FunctionComponent<\n    BraintreeFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"braintree-fastlane-instrument\"\n            data-test=\"braintree-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"braintree-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"braintree-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"braintree-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"braintree-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"braintree-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\nimport { useBraintreeFastlaneInstruments } from '../hooks/useBraintreeFastlaneInstruments';\n\nimport BraintreFastlaneCreditCardForm from './BraintreeFastlaneCreditCardForm';\nimport BraintreeFastlaneInstrumentsForm from './BraintreeFastlaneInstrumentsForm';\n\ninterface BraintreeFastlaneFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n}\n\nconst BraintreeFastlaneForm: FunctionComponent<BraintreeFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBraintreeFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\" id=\"braintree-fastlane\">\n            {shouldShowInstrumentsForm && (\n                <BraintreeFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BraintreFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneForm;\n","import BraintreeFastlanePaymentMethod from './BraintreeFastlanePaymentMethod';\n\nexport default BraintreeFastlanePaymentMethod;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeFastlaneForm from './components/BraintreeFastlaneForm';\n\nimport './BraintreeFastlanePaymentMethod.scss';\n\nexport interface BraintreeFastlaneComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BraintreeFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const paypalFastlaneComponentRef = useRef<BraintreeFastlaneComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                braintreefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalFastlaneComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalFastlaneComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: Error) => {\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalFastlaneComponentRef?.current?.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalFastlaneComponentRef.current?.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeFastlanePaymentMethod,\n    [{ id: 'braintreeacceleratedcheckout' }],\n);\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    CheckoutService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport {\n    CardInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface SquareV2FormProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    containerId: string;\n    deinitializePayment: () => Promise<void>;\n    initializePayment: () => Promise<void>;\n    method: PaymentMethod;\n}\n\nconst SquareV2Form: FunctionComponent<SquareV2FormProps> = ({\n    checkoutService,\n    checkoutState,\n    containerId,\n    deinitializePayment,\n    initializePayment,\n    method,\n}) => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n\n    const { getCustomer, getInstruments } = checkoutState.data;\n    const isSignedIn = getCustomer()?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n\n    useEffect(() => {\n        if (isInstrumentFeatureAvailable) {\n            void checkoutService.loadInstruments();\n        }\n    }, [checkoutService, isInstrumentFeatureAvailable]);\n\n    const instruments = useMemo(() => getInstruments(method) || [], [getInstruments, method]);\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n\n    const getDefaultInstrumentId = useCallback(() => {\n        if (isAddingNewCard) {\n            return;\n        }\n\n        if (instruments.length > 0) {\n            const defaultInstrument =\n                instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n            return defaultInstrument.bigpayToken;\n        }\n    }, [instruments, isAddingNewCard]);\n\n    useEffect(() => {\n        const defaultInstrumentId = getDefaultInstrumentId() || undefined;\n\n        setSelectedInstrumentId(defaultInstrumentId);\n    }, [getDefaultInstrumentId, instruments]);\n\n    const { setFieldValue } = usePaymentFormContext().paymentForm;\n\n    const handleSelectInstrument: (id: string) => void = (id) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    };\n\n    const handleDeleteInstrument: (id: string) => void = (id) => {\n        if (instruments.length === 0) {\n            setIsAddingNewCard(true);\n            setSelectedInstrumentId(undefined);\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            setSelectedInstrumentId(getDefaultInstrumentId());\n\n            setFieldValue('instrumentId', getDefaultInstrumentId());\n        }\n    };\n\n    const handleUseNewCard: () => void = () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        void deinitializePayment();\n\n        void initializePayment();\n    };\n\n    const renderPlaceholderFields = () => {\n        return (\n            <div data-test=\"squarev2_placeholder_form\" style={{ display: 'none' }}>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-label optimizedCheckout-form-label\"\n                        id=\"messageIsDefault\"\n                    />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsDefault\" />\n                </div>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-input optimizedCheckout-form-input form-input--focus optimizedCheckout-form-input--focus\"\n                        id=\"inputIsFocus\"\n                    />\n                </div>\n                <div className=\"form-field form-field--error\">\n                    <div className=\"form-inlineMessage\" id=\"messageIsError\" />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsError\" />\n                </div>\n            </div>\n        );\n    };\n\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    return (\n        <LoadingOverlay\n            data-test=\"squarev2_loading_overlay\"\n            hideContentWhenLoading\n            isLoading={isLoadingInstruments()}\n        >\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                        instruments={instruments as CardInstrument[]}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={selectedInstrumentId || getDefaultInstrumentId()}\n                    />\n                )}\n                <div\n                    className={classNames('widget', `widget--${method.id}`, 'payment-widget')}\n                    data-test={containerId}\n                    style={{\n                        display: !shouldShowCreditCardFieldset ? 'none' : undefined,\n                    }}\n                    tabIndex={-1}\n                >\n                    {renderPlaceholderFields()}\n                    <div id={containerId} />\n                </div>\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={selectedInstrumentId}\n                        instruments={instruments}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default SquareV2Form;\n","import { difference } from 'lodash';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport SquareV2Form from './SquareV2Form';\n\nconst SquareV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n}) => {\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const container = document.querySelector<HTMLDivElement>(`#${id}`);\n\n        if (!container) {\n            throw new Error(\n                `Unable to retrieve input styles as the provided container ID \"${id}\" is not valid.`,\n            );\n        }\n\n        return getAppliedStyles(container, properties);\n    };\n\n    const copyStylesFromDummyFormFields = useCallback(() => {\n        const styleProps = [\n            'backgroundColor',\n            'borderColor',\n            'borderRadius',\n            'borderWidth',\n            'color',\n            'fontSize',\n            'fontWeight',\n        ];\n\n        return {\n            default: {\n                message: getStylesFromElement('messageIsDefault', ['color']),\n                input: getStylesFromElement('inputIsDefault', styleProps),\n            },\n            focus: {\n                input: getStylesFromElement(\n                    'inputIsFocus',\n                    difference(styleProps, ['borderRadius']),\n                ),\n            },\n            error: {\n                message: getStylesFromElement('messageIsError', ['color']),\n                input: getStylesFromElement('inputIsError', [\n                    'borderColor',\n                    'borderWidth',\n                    'color',\n                ]),\n            },\n        };\n    }, []);\n\n    const mapToSquareStyles = useCallback(\n        (styles: ReturnType<typeof copyStylesFromDummyFormFields>) => {\n            const { borderColor, borderRadius, borderWidth, ...input } = styles.default.input;\n            const {\n                borderColor: borderColorIsFocus,\n                borderWidth: borderWidthIsFocus,\n                ...inputIsFocus\n            } = styles.focus.input;\n            const {\n                borderColor: borderColorIsError,\n                borderWidth: borderWidthIsError,\n                color: colorIsError,\n            } = styles.error.input;\n\n            return {\n                input,\n                'input.is-focus': {\n                    ...inputIsFocus,\n                },\n                'input.is-error': {\n                    color: colorIsError,\n                },\n                '.input-container': {\n                    borderColor,\n                    borderRadius,\n                    borderWidth,\n                },\n                '.input-container.is-focus': {\n                    borderColor: borderColorIsFocus,\n                    borderWidth: borderWidthIsFocus,\n                },\n                '.input-container.is-error': {\n                    borderColor: borderColorIsError,\n                    borderWidth: borderWidthIsError,\n                },\n                '.message-text': {\n                    color: styles.default.message.color,\n                },\n                '.message-icon': {\n                    color: styles.default.message.color,\n                },\n                '.message-text.is-error': {\n                    color: styles.error.message.color,\n                },\n                '.message-icon.is-error': {\n                    color: styles.error.message.color,\n                },\n            };\n        },\n        [],\n    );\n\n    const containerId = 'squarev2_payment_element_container';\n\n    const initializePayment = useCallback(async () => {\n        let style;\n\n        try {\n            style = mapToSquareStyles(copyStylesFromDummyFormFields());\n        } catch {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        await checkoutService.initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n            squarev2: {\n                containerId,\n                style,\n            },\n        });\n    }, [\n        checkoutService,\n        copyStylesFromDummyFormFields,\n        mapToSquareStyles,\n        method.gateway,\n        method.id,\n    ]);\n\n    const deinitializePayment = useCallback(async () => {\n        await checkoutService.deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [checkoutService, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, [deinitializePayment, initializePayment]);\n\n    return (\n        <SquareV2Form\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            containerId={containerId}\n            deinitializePayment={deinitializePayment}\n            initializePayment={initializePayment}\n            method={method}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    SquareV2PaymentMethod,\n    [{ id: 'squarev2' }],\n);\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AffirmPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const description = useMemo(() => <TranslatedString id=\"payment.affirm_body_text\" />, []);\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            description={description}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AffirmPaymentMethod,\n    [{ id: 'affirm' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AmazonPayV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    method: {\n        initializationData: { paymentDescriptor, paymentToken },\n    },\n    ...rest\n}) => {\n    const initializeAmazonPayV2Payment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                amazonpay: {\n                    editButtonId: 'editButtonId',\n                },\n            }),\n        [checkoutService],\n    );\n\n    const reload = useCallback(() => window.location.reload(), []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...rest}\n            buttonId=\"editButtonId\"\n            containerId=\"paymentWidget\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            hideWidget\n            initializePayment={initializeAmazonPayV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignInRequired={false}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            onSignOut={reload}\n            paymentDescriptor={paymentDescriptor}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldShow={!!paymentToken}\n            shouldShowDescriptor={!!paymentToken}\n            shouldShowEditButton={!!paymentToken}\n            signOut={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AmazonPayV2PaymentMethod,\n    [{ id: 'amazonpay' }],\n);\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from './components';\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n    const {\n        config: { cardCode, showCardHolderName },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId = '';\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: isCardHolderNameRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_name_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccName'),\n                                }\n                              : undefined,\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const hostedFieldset = (\n        <HostedCreditCardFieldset\n            additionalFields={\n                method.config.requireCustomerCode && (\n                    <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                )\n            }\n            cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n            cardExpiryId={getHostedFieldId('ccExpiry')}\n            cardNameId={isCardHolderNameRequired ? getHostedFieldId('ccName') : undefined}\n            cardNumberId={getHostedFieldId('ccNumber')}\n            focusedFieldType={focusedFieldType}\n        />\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: {\n                        form: await getHostedFormOptions(selectedInstrument),\n                        bigpayToken: selectedInstrument?.bigpayToken,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const props = {\n        checkoutService,\n        checkoutState,\n        paymentForm,\n        language,\n        method,\n        onUnhandledError,\n    };\n\n    return (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedCreditCardPaymentMethod,\n    [\n        {\n            id: 'hosted-credit-card',\n        },\n        { id: 'credit_card', gateway: 'bluesnapdirect' },\n        { id: 'tdonlinemart' },\n    ],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    CheckoutButtonResolveId,\n    PaymentMethodId,\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst VisaCheckoutPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeVisaCheckoutPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const mergedOptions = {\n                ...defaultOptions,\n                braintreevisacheckout: {\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"visaCheckoutWalletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            editButtonClassName=\"v-button\"\n            initializePayment={initializeVisaCheckoutPayment}\n            method={method}\n            shouldShowEditButton\n            signInButtonClassName=\"v-button\"\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    VisaCheckoutPaymentMethod,\n    [{ id: PaymentMethodId.BraintreeVisaCheckout }],\n);\n","import { AdyenValidationState, CardInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV3CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV3CardValidation: FunctionComponent<AdyenV3CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            <TranslatedString id=\"payment.credit_card_number_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV3CardValidation;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\nimport { Omit } from 'utility-types';\n\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport type AdyenV3FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    shouldRenderAdditionalActionContentModal: boolean;\n    isModalVisible: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV3Form: FunctionComponent<AdyenV3FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    shouldRenderAdditionalActionContentModal,\n    isModalVisible,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    checkoutState,\n    checkoutService,\n    onUnhandledError,\n    ...rest\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={shouldRenderAdditionalActionContentModal}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n                style={\n                    !isModalVisible && method.id === 'scheme'\n                        ? {\n                              overlay: {\n                                  display: 'none',\n                              },\n                          }\n                        : {}\n                }\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!shouldRenderAdditionalActionContentModal && <div id={additionalActionContainerId} />}\n        </>\n    );\n};\n\nexport default AdyenV3Form;\n","import {\n    AdyenCreditCardComponentOptions,\n    AdyenValidationState,\n    CardInstrument,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV3CardValidation from './AdyenV3CardValidation';\nimport AdyenV3Form from './AdyenV3Form';\n\nexport interface AdyenOptions {\n    [key: string]: AdyenCreditCardComponentOptions;\n}\n\nexport enum AdyenV3PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    onUnhandledError,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n\n    const [shouldRenderAdditionalActionContentModal, setShouldRenderAdditionalActionContentModal] =\n        useState<boolean>(false);\n    const [isAdditionalActionContentModalVisible, setIsAdditionalActionContentModalVisible] =\n        useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const component = method.id;\n    const shouldHideInstrumentExpiryDate = component === AdyenV3PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShouldRenderAdditionalActionContentModal(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onActionHandled = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(true);\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            const adyenOptions: AdyenOptions = {\n                [AdyenV3PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv3: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                        onActionHandled,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            onActionHandled,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV3CardValidation\n                cardValidationState={cardValidationState}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV3Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                hideContentWhenSignedOut\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                isModalVisible={isAdditionalActionContentModalVisible}\n                                language={language}\n                                method={method}\n                                onUnhandledError={onUnhandledError}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                shouldRenderAdditionalActionContentModal={\n                                    shouldRenderAdditionalActionContentModal\n                                }\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV3PaymentMethod,\n    [{ gateway: 'adyenv3' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedPaymentComponent } from './components';\n\nconst HostedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    onUnhandledError,\n    language,\n    paymentForm,\n}) => {\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            onUnhandledError={onUnhandledError}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedPaymentMethod,\n    [{ id: 'quadpay' }],\n);\n","import {\n    AccountInstrument,\n    CheckoutSelectors,\n    CheckoutService,\n    LanguageService,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await derivedProps.loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n    }, [\n        initializePayment,\n        method.gateway,\n        method.id,\n        isInstrumentFeatureAvailableProp,\n        derivedProps,\n        onUnhandledError,\n    ]);\n\n    useEffect(() => {\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n    }, [deinitializePayment, method.gateway, method.id, onUnhandledError]);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import { Coupon } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface AppliedCouponProps {\n    coupon: Coupon;\n}\n\nconst AppliedCoupon: FunctionComponent<AppliedCouponProps> = ({ coupon }) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--coupon\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"coupon-amount\">\n                {coupon.displayName}\n            </span>{' '}\n            <TranslatedString id=\"redeemable.coupon_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\" data-test=\"coupon-code\">\n            {coupon.code}\n        </span>\n    </div>\n);\n\nexport default memo(AppliedCoupon);\n","import { GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { ShopperCurrency } from '../currency';\n\nexport interface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n}\n\nconst AppliedGiftCertificate: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n}) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--giftCertificate\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"giftCertificate-amount\">\n                <ShopperCurrency amount={giftCertificate.used} />\n            </span>{' '}\n            <TranslatedString id=\"redeemable.gift_certificate_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\">\n            {giftCertificate.remaining > 0 && (\n                <span className=\"redeemable-info-subHeader--remaining\">\n                    <TranslatedString id=\"redeemable.gift_certificate_remaining_text\" />{' '}\n                    <span data-test=\"giftCertificate-remaining\">\n                        <ShopperCurrency amount={giftCertificate.remaining} />\n                    </span>\n                </span>\n            )}\n\n            <span data-test=\"giftCertificate-code\">{giftCertificate.code}</span>\n        </span>\n    </div>\n);\n\nexport default memo(AppliedGiftCertificate);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconRemove: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconRemove);\n","import classNames from 'classnames';\nimport React, {FunctionComponent, ReactNode} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconRemove } from '../ui/icon';\n\nimport './AppliedRedeemable.scss';\n\nexport interface AppliedRedeemableProps {\n    children: ReactNode;\n    isRemoving: boolean;\n    onRemove(): void;\n}\n\nconst AppliedRedeemable: FunctionComponent<AppliedRedeemableProps> = ({\n    children,\n    isRemoving,\n    onRemove,\n}) => (\n    <div className=\"form-checklist-header\">\n        <div className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\">\n            <span className=\"is-srOnly\">\n                <TranslatedString id=\"redeemable.applied_text\" />\n            </span>\n        </div>\n\n        <div className=\"form-label form-label-redeemable\">\n            <div className=\"redeemable\">\n                {children}\n                <div className=\"redeemable-column redeemable-actions\">\n                    <button\n                        className={classNames('redeemable-remove', { 'is-loading': isRemoving })}\n                        data-test=\"redeemable-remove\"\n                        disabled={isRemoving}\n                        onClick={onRemove}\n                        type=\"button\"\n                    >\n                        <IconRemove />\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default AppliedRedeemable;\n","import { Coupon, GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AppliedCoupon } from '../coupon';\nimport { AppliedGiftCertificate } from '../giftCertificate';\n\nimport AppliedRedeemable from './AppliedRedeemable';\n\ninterface AppliedCouponProps {\n    coupon: Coupon;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedCouponChecklistItem: FunctionComponent<AppliedCouponProps> = ({\n    coupon,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(coupon.code);\n    }, [coupon, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedCoupon coupon={coupon} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\ninterface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedGiftCertificateChecklistItem: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(giftCertificate.code);\n    }, [giftCertificate, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedGiftCertificate giftCertificate={giftCertificate} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\nexport interface AppliedRedeemablesProps {\n    coupons?: Coupon[];\n    giftCertificates?: GiftCertificate[];\n    isRemovingGiftCertificate?: boolean;\n    isRemovingCoupon?: boolean;\n    onRemovedCoupon(code: string): void;\n    onRemovedGiftCertificate(code: string): void;\n}\n\nconst AppliedRedeemables: FunctionComponent<AppliedRedeemablesProps> = ({\n    coupons = [],\n    giftCertificates = [],\n    isRemovingCoupon = false,\n    isRemovingGiftCertificate = false,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n}) => {\n    if (!coupons.length && !giftCertificates.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"form-checklist optimizedCheckout-form-checklist\"\n            data-test=\"redeemables-list\"\n        >\n            {coupons.map((coupon) => (\n                <AppliedCouponChecklistItem\n                    coupon={coupon}\n                    isRemoving={isRemovingCoupon}\n                    key={coupon.code}\n                    onRemoved={onRemovedCoupon}\n                />\n            ))}\n\n            {giftCertificates.map((giftCertificate) => (\n                <AppliedGiftCertificateChecklistItem\n                    giftCertificate={giftCertificate}\n                    isRemoving={isRemovingGiftCertificate}\n                    key={giftCertificate.code}\n                    onRemoved={onRemovedGiftCertificate}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(AppliedRedeemables);\n","import { CheckoutSelectors, RequestError } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport classNames from 'classnames';\nimport { FieldProps, FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, {FunctionComponent, KeyboardEvent, memo, ReactNode, useCallback} from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContextType, FormProvider, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { FormField, Label, TextInput } from '../ui/form';\nimport { Toggle } from '../ui/toggle';\n\nimport AppliedRedeemables, { AppliedRedeemablesProps } from './AppliedRedeemables';\n\nexport interface RedeemableFormValues {\n    redeemableCode: string;\n}\n\nexport type ReedemableChildrenProps = Pick<\n    RedeemableProps,\n    | 'onRemovedCoupon'\n    | 'onRemovedGiftCertificate'\n    | 'isRemovingGiftCertificate'\n    | 'isRemovingCoupon'\n    | 'coupons'\n    | 'giftCertificates'\n>;\n\nexport type RedeemableProps = {\n    appliedRedeemableError?: RequestError;\n    isApplyingRedeemable?: boolean;\n    isRemovingRedeemable?: boolean;\n    removedRedeemableError?: RequestError;\n    showAppliedRedeemables?: boolean;\n    shouldCollapseCouponCode?: boolean;\n    applyCoupon(code: string): Promise<CheckoutSelectors>;\n    applyGiftCertificate(code: string): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n} & AppliedRedeemablesProps;\n\nconst Redeemable: FunctionComponent<\n    RedeemableProps & WithLanguageProps & FormikProps<RedeemableFormValues>\n    > = ({ shouldCollapseCouponCode, showAppliedRedeemables, ...formProps }) => {\n        const { themeV2 } = useThemeContext();\n\n        return (\n            <Toggle openByDefault={!shouldCollapseCouponCode}>\n                {({ toggle, isOpen }): ReactNode => (\n                    <>\n                        {shouldCollapseCouponCode && (\n                            <a\n                                aria-controls=\"redeemable-collapsable\"\n                                aria-expanded={isOpen}\n                                className={classNames('redeemable-label', { 'body-cta': themeV2 })}\n                                data-test=\"redeemable-label\"\n                                href=\"#\"\n                                onClick={preventDefault(toggle)}\n                            >\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </a>\n                        )}\n                        {!shouldCollapseCouponCode && (\n                            <div className={classNames('redeemable-label', { 'body-cta': themeV2 })}>\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </div>\n                        )}\n                        {(isOpen || !shouldCollapseCouponCode) && (\n                            <div data-test=\"redeemable-collapsable\" id=\"redeemable-collapsable\">\n                                <RedeemableForm {...formProps} />\n                                {showAppliedRedeemables && <AppliedRedeemables {...formProps} />}\n                            </div>\n                        )}\n                    </>\n                )}\n            </Toggle>\n        );\n    }\n\nconst RedeemableForm: FunctionComponent<\n    Partial<RedeemableProps> & FormikProps<RedeemableFormValues> & WithLanguageProps\n> = ({ appliedRedeemableError, isApplyingRedeemable, clearError = noop, submitForm, language }) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const handleSubmitForm = (setSubmitted: FormContextType['setSubmitted']) => {\n        if (isSubmittingOrder()) {\n            return;\n        }\n\n        setSubmitted(true);\n        submitForm();\n    }\n\n    const handleKeyDown = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => (event: KeyboardEvent) => {\n            if (appliedRedeemableError) {\n                clearError(appliedRedeemableError);\n            }\n\n            // note: to prevent submitting main form, we manually intercept\n            // the enter key event and submit the \"subform\".\n            if (event.keyCode === 13 || event.key === 'Enter') {\n                handleSubmitForm(setSubmitted);\n                event.preventDefault();\n            }\n        }),\n        [appliedRedeemableError, clearError, submitForm],\n    );\n\n    const handleSubmit = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => () => {\n            handleSubmitForm(setSubmitted);\n        }),\n        [],\n    );\n\n    const renderLabel = useCallback(\n        (name: string) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"redeemable.code_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderErrorMessage = useCallback((errorCode: string, errorMessage?: string) => {\n        switch (errorCode) {\n            case 'min_purchase':\n                return <TranslatedString id=\"redeemable.coupon_min_order_total\" />;\n\n            case 'not_applicable':\n                return <TranslatedString id=\"redeemable.coupon_location_error\" />;\n\n            default:\n                return errorMessage || <TranslatedString id=\"redeemable.code_invalid_error\" />;\n        }\n    }, []);\n\n    const renderInput = useCallback(\n        (setSubmitted: FormContextType['setSubmitted']) =>\n            ({ field }: FieldProps) =>\n                (\n                    <>\n                        {appliedRedeemableError &&\n                            appliedRedeemableError.errors &&\n                            appliedRedeemableError.errors[0] && (\n                                <Alert type={AlertType.Error}>\n                                    {renderErrorMessage(appliedRedeemableError.errors[0].code, appliedRedeemableError.errors[0].message)}\n                                </Alert>\n                            )}\n\n                        <div className=\"form-prefixPostfix\">\n                            <TextInput\n                                {...field}\n                                aria-label={language.translate('redeemable.code_label')}\n                                className=\"form-input optimizedCheckout-form-input\"\n                                onKeyDown={handleKeyDown(setSubmitted)}\n                                testId=\"redeemableEntry-input\"\n                                themeV2={themeV2}\n                            />\n\n                            <Button\n                                className={classNames('form-prefixPostfix-button--postfix', {\n                                    'body-bold': themeV2,\n                                })}\n                                disabled={isSubmittingOrder()}\n                                id=\"applyRedeemableButton\"\n                                isLoading={isApplyingRedeemable}\n                                onClick={handleSubmit(setSubmitted)}\n                                testId=\"redeemableEntry-submit\"\n                                variant={ButtonVariant.Secondary}\n                            >\n                                <TranslatedString id=\"redeemable.apply_action\" />\n                            </Button>\n                        </div>\n                    </>\n                ),\n        [\n            appliedRedeemableError,\n            handleKeyDown,\n            handleSubmit,\n            isApplyingRedeemable,\n            language,\n            isSubmittingOrder,\n            renderErrorMessage,\n        ],\n    );\n\n    const renderContent = useCallback(\n        memoizeOne(({ setSubmitted }: FormContextType) => (\n            <FormField\n                input={renderInput(setSubmitted)}\n                label={renderLabel}\n                name=\"redeemableCode\"\n            />\n        )),\n        [renderLabel, renderInput],\n    );\n\n    return (\n        <fieldset className=\"form-fieldset redeemable-entry\">\n            <FormProvider>{renderContent}</FormProvider>\n        </fieldset>\n    );\n};\n\nexport default withLanguage(\n    withFormik<RedeemableProps & WithLanguageProps, RedeemableFormValues>({\n        mapPropsToValues() {\n            return {\n                redeemableCode: '',\n            };\n        },\n\n        async handleSubmit(\n            { redeemableCode },\n            { props: { applyCoupon, applyGiftCertificate, clearError } },\n        ) {\n            const code = redeemableCode.trim();\n\n            try {\n                await applyGiftCertificate(code);\n            } catch (error) {\n                if (error instanceof Error) {\n                    clearError(error);\n                }\n\n                applyCoupon(code);\n            }\n        },\n\n        validationSchema({ language }: RedeemableProps & WithLanguageProps) {\n            return object({\n                redeemableCode: string().required(\n                    language.translate('redeemable.code_required_error'),\n                ),\n            });\n        },\n    })(memo(Redeemable)),\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    CheckoutButtonResolveId,\n    PaymentMethodId,\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst GooglePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeGooglePayPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const loadingContainerId = 'checkout-app';\n            const mergedOptions = {\n                ...defaultOptions,\n                [PaymentMethodId.AdyenV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AdyenV3GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AuthorizeNetGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BNZGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BigCommercePaymentsGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BraintreeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.PayPalCommerceGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeUPEGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CybersourceV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.OrbitalGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CheckoutcomGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.WorldpayAccessGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.TdOnlineMartGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeOCSGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"walletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeGooglePayPayment}\n            method={method}\n            shouldShowEditButton\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    GooglePayPaymentMethod,\n    [\n        { id: PaymentMethodId.AdyenV2GooglePay },\n        { id: PaymentMethodId.AdyenV3GooglePay },\n        { id: PaymentMethodId.AuthorizeNetGooglePay },\n        { id: PaymentMethodId.BNZGooglePay },\n        { id: PaymentMethodId.BraintreeGooglePay },\n        { id: PaymentMethodId.PayPalCommerceGooglePay },\n        { id: PaymentMethodId.BigCommercePaymentsGooglePay },\n        { id: PaymentMethodId.CheckoutcomGooglePay },\n        { id: PaymentMethodId.CybersourceV2GooglePay },\n        { id: PaymentMethodId.OrbitalGooglePay },\n        { id: PaymentMethodId.StripeGooglePay },\n        { id: PaymentMethodId.StripeUPEGooglePay },\n        { id: PaymentMethodId.WorldpayAccessGooglePay },\n        { id: PaymentMethodId.TdOnlineMartGooglePay },\n        { id: PaymentMethodId.StripeOCSGooglePay },\n    ],\n);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createContext } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nconst PaymentContext = createContext<PaymentContextProps | undefined>(undefined);\n\nexport default PaymentContext;\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","enum PaymentMethodProviderType {\n    Api = 'PAYMENT_TYPE_API',\n    Hosted = 'PAYMENT_TYPE_HOSTED',\n    Offline = 'PAYMENT_TYPE_OFFLINE',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n}\n\nexport default PaymentMethodProviderType;\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BlueSnapDirectAlternativePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectAlternativePaymentMethod,\n    [{ gateway: 'bluesnapdirect' }],\n);\n","import { CardInstrument, PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst MonerisPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const containerId = `moneris-iframe-container`;\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const initializeMonerisPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const paymentConfig = {\n                ...options,\n                moneris: {\n                    containerId,\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            };\n\n            return checkoutService.initializePayment(paymentConfig);\n        },\n        [containerId, getHostedFormOptions, checkoutService],\n    );\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMonerisPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n            validateInstrument={validateInstrument}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MonerisPaymentMethod,\n    [{ id: 'moneris' }],\n);\n","import { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst OfflinePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    return null;\n};\n\nexport default toResolvableComponent(OfflinePaymentMethod, [\n    {\n        type: 'PAYMENT_TYPE_OFFLINE',\n    },\n]);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport {\n    HostedPaymentComponent,\n    type HostedPaymentComponentProps,\n} from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay, Modal } from '@bigcommerce/checkout/ui';\n\nexport type BlueSnapV2PaymentMethodProps = HostedPaymentComponentProps;\n\ninterface BlueSnapV2PaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelBlueSnapV2Payment?(): void;\n}\n\nconst BlueSnapV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [isLoadingIframe, setisLoadingIframe] = useState<boolean>(false);\n    const [paymentPageContent, setPaymentPageContent] = useState<HTMLElement>();\n    const ref = useRef<BlueSnapV2PaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n\n    const cancelBlueSnapV2ModalFlow = useCallback(() => {\n        setPaymentPageContent(undefined);\n\n        if (ref.current.cancelBlueSnapV2Payment) {\n            ref.current.cancelBlueSnapV2Payment();\n            ref.current.cancelBlueSnapV2Payment = undefined;\n        }\n    }, []);\n\n    const initializeBlueSnapV2Payment = useCallback(\n        (options: PaymentInitializeOptions) => {\n            return checkoutService.initializePayment({\n                ...options,\n                bluesnapv2: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setPaymentPageContent(content);\n                        setisLoadingIframe(true);\n                        ref.current.cancelBlueSnapV2Payment = cancel;\n                    },\n                    style: {\n                        border: '1px solid lightgray',\n                        height: '60vh',\n                        width: '100%',\n                    },\n                },\n            });\n        },\n        [checkoutService],\n    );\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (ref.current.paymentPageContentRef.current && paymentPageContent) {\n            paymentPageContent.addEventListener('load', () => {\n                setisLoadingIframe(false);\n            });\n            ref.current.paymentPageContentRef.current.appendChild(paymentPageContent);\n        }\n    }, [paymentPageContent]);\n\n    return (\n        <>\n            <HostedPaymentComponent\n                {...rest}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                initializePayment={initializeBlueSnapV2Payment}\n                method={method}\n                paymentForm={paymentForm}\n            />\n            <Modal\n                additionalModalClassName=\"modal--bluesnap\"\n                isOpen={!!paymentPageContent}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelBlueSnapV2ModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <LoadingOverlay isLoading={isLoadingIframe}>\n                    <div ref={ref.current.paymentPageContentRef} />\n                </LoadingOverlay>\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapV2PaymentMethod,\n    [{ gateway: 'bluesnapv2' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    children: React.ReactNode;\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\n        {children}\n    </span>\n);\n\nexport default Tooltip;\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectTextFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    autoComplete?: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectTextField: FunctionComponent<BlueSnapDirectTextFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    autoComplete,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete={autoComplete}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel, autoComplete],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectTextField);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FieldProps, useField } from 'formik';\nimport React, { FunctionComponent, SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface MollieCustomCardFormProps {\n    method: PaymentMethod;\n}\n\nexport interface Issuer {\n    name: string;\n    image: {\n        size1x: string;\n    };\n    id: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface SelecteIssuerProp {\n    selectedIssuer: Issuer;\n}\n\ninterface OptionButtonProps {\n    issuer: Issuer;\n    className?: string;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\nconst MollieAPMCustomForm: FunctionComponent<MollieCustomCardFormProps & WithLanguageProps> = ({\n    method,\n    language,\n}) => {\n    const issuers: Issuer[] = method.initializationData?.paymentMethodsResponse;\n\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer>({\n        name: language.translate('payment.select_your_bank'),\n        id: '',\n        image: { size1x: '' },\n    });\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={selectedIssuer} />,\n        [selectedIssuer],\n    );\n\n    if (!issuers || issuers.length === 0) {\n        return <></>;\n    }\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        const _selectedIssuer = issuers.find(({ id }) => id === currentTarget.dataset.id);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n    };\n\n    const issuersList = (\n        <ul\n            className=\"dropdown-menu instrumentSelect-dropdownMenu mollie-instrument-card\"\n            id=\"issuersDropdown\"\n        >\n            {issuers.map((issuer) => (\n                <li className=\"dropdown-menu-item dropdown-menu-item--select\" key={issuer.id}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <IssuerSelectButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"issuer\" />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    selectedIssuer,\n}) => {\n    const [field, _, helpers] = useField(restField.name);\n    const Input = useCallback(() => <input {...field} type=\"hidden\" />, [field]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void helpers.setValue(selectedIssuer?.id);\n    }, [value, selectedIssuer, helpers]);\n\n    return <Input />;\n};\n\nexport const IssuerSelectButton: FunctionComponent<SelecteIssuerProp> = ({ selectedIssuer }) => (\n    <a\n        className=\"instrumentSelect instrumentSelect-card button dropdown-button dropdown-toogle--select\"\n        href=\"#\"\n        id=\"issuerToggle\"\n        onClick={preventDefault()}\n    >\n        {selectedIssuer.name}\n    </a>\n);\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...props }) => {\n    const { name, image, id } = issuer;\n\n    return (\n        <a className=\"instrumentSelect-details mollie-instrument-list\" {...props} data-id={id}>\n            <label className=\"mollie-instrument-left\">{name}</label>\n            <img alt={name} data-test=\"cart-item-image\" src={image.size1x} />\n        </a>\n    );\n};\n\nexport default withLanguage(MollieAPMCustomForm);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport MollieAPMCustomForm from './MollieAPMCustomForm';\n\nexport interface MollieCustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n        cardHolderElementOptions: {\n            containerId: string;\n        };\n    };\n    isCreditCard: boolean;\n    method: PaymentMethod;\n}\n\nconst MollieCustomCardForm: React.FunctionComponent<MollieCustomCardFormProps> = ({\n    options,\n    isCreditCard,\n    method,\n}) =>\n    !isCreditCard ? (\n        <MollieAPMCustomForm method={method} />\n    ) : (\n        <div className=\"form-ccFields\">\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardNumberElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_number_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input', 'has-icon')}\n                    data-cse=\"CardNumber\"\n                    id={options.cardNumberElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardHolderElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_name_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"CardHolder\"\n                    id={options.cardHolderElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside', 'mollie-paddingRight')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardCvcElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                    <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                        <span className=\"has-tip\">\n                            <IconHelp />\n                        </span>\n                    </TooltipTrigger>\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"SecurityCode\"\n                    id={options.cardCvcElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardExpiryElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"ExpiryDate\"\n                    id={options.cardExpiryElementOptions.containerId}\n                />\n            </div>\n        </div>\n    );\n\nexport default MollieCustomCardForm;\n","import {\n    CardInstrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn, some } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useContext, useState } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport MollieCustomCardForm from './MollieCustomCardForm';\n\nexport enum MolliePaymentMethodType {\n    creditcard = 'credit_card',\n}\n\nconst MolliePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutState,\n    checkoutService,\n    language,\n    paymentForm,\n    ...props\n}) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const localeContext = useContext(LocaleContext);\n    const containerId = `mollie-${method.method}`;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const {\n        setFieldTouched,\n        setFieldValue,\n        setSubmitted,\n        submitForm,\n        setSubmit,\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n    const initializeMolliePayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const mollieElements = getMolliesElementOptions();\n\n            return checkoutService.initializePayment({\n                ...options,\n                mollie: {\n                    containerId,\n                    cardNumberId: mollieElements.cardNumberElementOptions.containerId,\n                    cardCvcId: mollieElements.cardCvcElementOptions.containerId,\n                    cardHolderId: mollieElements.cardHolderElementOptions.containerId,\n                    cardExpiryId: mollieElements.cardExpiryElementOptions.containerId,\n                    styles: {\n                        base: {\n                            color: '#333333',\n                            '::placeholder': {\n                                color: '#999999',\n                            },\n                        },\n                        valid: {\n                            color: '#090',\n                        },\n                        invalid: {\n                            color: '#D14343',\n                        },\n                    },\n                    unsupportedMethodMessage: localeContext?.language.translate(\n                        'payment.mollie_unsupported_method_error',\n                    ),\n                    disableButton: (disabled: boolean) => {\n                        if (paymentContext) {\n                            disableSubmit(method, disabled);\n                        }\n                    },\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            disableSubmit,\n            localeContext?.language,\n            getHostedFormOptions,\n            paymentContext,\n            method,\n        ],\n    );\n\n    const getMolliesElementOptions = () => {\n        return {\n            cardNumberElementOptions: {\n                containerId: 'mollie-card-number-component-field',\n            },\n            cardExpiryElementOptions: {\n                containerId: 'mollie-card-expiry-component-field',\n            },\n            cardCvcElementOptions: {\n                containerId: 'mollie-card-cvc-component-field',\n            },\n            cardHolderElementOptions: {\n                containerId: 'mollie-card-holder-component-field',\n            },\n        };\n    };\n\n    function renderCustomPaymentForm() {\n        const options = getMolliesElementOptions();\n\n        return (\n            <MollieCustomCardForm isCreditCard={isCreditCard()} method={method} options={options} />\n        );\n    }\n\n    function isCreditCard(): boolean {\n        return method.method === MolliePaymentMethodType.creditcard;\n    }\n\n    function validateInstrument(_shouldShowNumber: boolean, selectedInstrument: CardInstrument) {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    }\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...props}\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hideContentWhenSignedOut\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMolliePayment}\n            instruments={instruments}\n            isAccountInstrument={!isCreditCard()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument={true}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n            validateInstrument={validateInstrument}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MolliePaymentMethod,\n    [{ gateway: 'mollie' }, { gateway: 'mollie', id: 'applepay' }],\n);\n","import { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaPayment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarna: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaPaymentMethod,\n    [{ id: 'klarna' }],\n);\n","export interface BlueSnapDirectInitializationData {\n    sepaCreditorCompanyName: string;\n    idealIssuers: IdealIssuer[];\n}\n\ninterface IdealIssuer {\n    issuerId: string;\n    issuerName: string;\n}\n\nexport const isBlueSnapDirectIdealIssuerList = (array: unknown): array is IdealIssuer[] => {\n    if (\n        !(\n            Array.isArray(array) &&\n            array.length &&\n            'issuerId' in array[0] &&\n            'issuerName' in array[0]\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const isBlueSnapDirectInitializationData = (\n    object: unknown,\n): object is BlueSnapDirectInitializationData => {\n    if (\n        !(\n            typeof object === 'object' &&\n            object !== null &&\n            (('sepaCreditorCompanyName' in object &&\n                typeof object.sepaCreditorCompanyName === 'string') ||\n                ('idealIssuers' in object && isBlueSnapDirectIdealIssuerList(object.idealIssuers)))\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { boolean, object, ObjectSchema, string } from 'yup';\n\nimport {\n    DocumentOnlyCustomFormFieldsetValues,\n    FawryCustomFormFieldsetValues,\n    IdealCustomFormFieldsetValues,\n    SepaCustomFormFieldsetValues,\n} from './CheckoutcomFormValues';\n\nexport type checkoutcomCustomPaymentMethods = 'fawry' | 'sepa';\nexport type documentPaymentMethods = 'oxxo' | 'qpay' | 'boleto' | 'ideal';\nexport type checkoutcomPaymentMethods = documentPaymentMethods | checkoutcomCustomPaymentMethods;\nexport const checkoutcomPaymentMethodsArray = ['fawry', 'sepa', 'oxxo', 'qpay', 'boleto', 'ideal'];\nexport interface CustomValidationSchemaOptions {\n    paymentMethod: checkoutcomPaymentMethods;\n    language: LanguageService;\n}\n\nconst checkoutComShemas: {\n    [key in checkoutcomPaymentMethods]: (language: LanguageService) => any;\n} = {\n    oxxo: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_oxxo'))\n            .length(18, language.translate('payment.checkoutcom_document_invalid_error_oxxo')),\n    }),\n    qpay: (language: LanguageService) => ({\n        ccDocument: string()\n            .notRequired()\n            .max(32, language.translate('payment.checkoutcom_document_invalid_error_qpay')),\n    }),\n    boleto: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .min(11, language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .max(14, language.translate('payment.checkoutcom_document_invalid_error_boleto')),\n    }),\n    sepa: (language: LanguageService) => ({\n        iban: string().required(language.translate('payment.sepa_account_number_required')),\n        sepaMandate: boolean().required(language.translate('payment.sepa_mandate_required')),\n    }),\n    ideal: (language: LanguageService) => ({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    }),\n    fawry: (language: LanguageService) => ({\n        customerMobile: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'))\n            .matches(\n                new RegExp(`^\\\\d{11}$`),\n                language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'),\n            ),\n        customerEmail: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error'))\n            .email(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error')),\n    }),\n};\n\nexport default memoize(function getCheckoutcomValidationSchemas({\n    paymentMethod,\n    language,\n}: CustomValidationSchemaOptions): ObjectSchema<\n    | DocumentOnlyCustomFormFieldsetValues\n    | FawryCustomFormFieldsetValues\n    | IdealCustomFormFieldsetValues\n    | SepaCustomFormFieldsetValues\n> {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return object(checkoutComShemas[paymentMethod](language));\n});\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\nimport { FormContext, FormContextType } from '@bigcommerce/checkout/ui';\n\nexport type WithFormProps = FormContextType;\n\nconst withForm = createInjectHoc(FormContext, { displayNamePrefix: 'WithForm' });\n\nexport default withForm;\n","import { BankInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isSepaInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useSepaInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<BankInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isSepaInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): BankInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useSepaInstruments;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getSepaValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  iban: string()\n                      .matches(\n                          /^[a-zA-Z0-9]+$/i,\n                          language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n                      )\n                      .required(language.translate('payment.sepa_account_number_required')),\n                  firstName: string().required(\n                      language.translate('address.first_name_required_error'),\n                  ),\n                  lastName: string().required(\n                      language.translate('address.last_name_required_error'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport useSepaInstruments from './hooks/useSepaInstruments';\nimport getSepaValidationSchema from './validation-schemas/getSepaValidationSchema';\n\nconst BlueSnapDirectSepaPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        method,\n        checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n        checkoutState: {\n            data: { isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        },\n        paymentForm: { disableSubmit, setValidationSchema },\n        language,\n        onUnhandledError,\n    } = props;\n\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const [disabled, setDisabled] = useState(true);\n    const toggleSubmitButton = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeSepa = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeSepa = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeSepa();\n\n        return () => {\n            void deinitializeSepa();\n        };\n    }, [deinitializeSepa, initializeSepa]);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useSepaInstruments(method);\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n\n    useEffect(() => {\n        setValidationSchema(method, getSepaValidationSchema(language, shouldShowForm));\n    }, [language, shouldShowForm, setValidationSchema, method]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (isInstrumentFeatureAvailable) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const isLoading = isLoadingInstruments();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_sepa_direct_debit')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <>\n                        <BlueSnapDirectTextField\n                            autoComplete=\"iban\"\n                            labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                            name=\"iban\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.first_name_label')}\n                            name=\"firstName\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.last_name_label')}\n                            name=\"lastName\"\n                            useFloatingLabel={true}\n                        />\n                    </>\n                )}\n\n                <CheckboxFormField\n                    labelContent={language.translate(\n                        'payment.bluesnap_direct_sepa_mandate_disclaimer',\n                        {\n                            creditorName: method.initializationData.sepaCreditorCompanyName,\n                        },\n                    )}\n                    name=\"shopperPermission\"\n                    onChange={toggleSubmitButton}\n                />\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectSepaPaymentMethod,\n    [{ id: 'sepa_direct_debit', gateway: 'bluesnapdirect' }],\n);\n","import { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { EMPTY_ARRAY } from '../common/utility';\n\nimport { RedeemableProps } from './Redeemable';\n\nexport default function mapToRedeemableProps(\n    context: CheckoutContextProps,\n): RedeemableProps | null {\n    const {\n        checkoutService,\n        checkoutState: {\n            data: { getConfig, getCoupons, getGiftCertificates },\n            statuses: {\n                isApplyingCoupon,\n                isApplyingGiftCertificate,\n                isRemovingCoupon,\n                isRemovingGiftCertificate,\n            },\n            errors: {\n                getApplyCouponError,\n                getApplyGiftCertificateError,\n                getRemoveCouponError,\n                getRemoveGiftCertificateError,\n            },\n        },\n    } = context;\n\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        appliedRedeemableError: getApplyCouponError() || getApplyGiftCertificateError(),\n        applyCoupon: checkoutService.applyCoupon,\n        applyGiftCertificate: checkoutService.applyGiftCertificate,\n        clearError: checkoutService.clearError,\n        coupons: getCoupons() || EMPTY_ARRAY,\n        giftCertificates: getGiftCertificates() || EMPTY_ARRAY,\n        isApplyingRedeemable: isApplyingCoupon() || isApplyingGiftCertificate(),\n        isRemovingCoupon: isRemovingCoupon(),\n        isRemovingGiftCertificate: isRemovingGiftCertificate(),\n        onRemovedCoupon: checkoutService.removeCoupon,\n        onRemovedGiftCertificate: checkoutService.removeGiftCertificate,\n        removedRedeemableError: getRemoveCouponError() || getRemoveGiftCertificateError(),\n        shouldCollapseCouponCode: config.checkoutSettings.isCouponCodeCollapsed,\n    };\n}\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\n\nimport PaymentContext, { PaymentContextProps } from './PaymentContext';\n\nexport type WithPaymentProps = PaymentContextProps;\n\nconst withPayment = createInjectHoc(PaymentContext, { displayNamePrefix: 'WithPayment' });\n\nexport default withPayment;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreeLocalPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const methodId = method.id;\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                braintreelocalmethods: {\n                    container: '#checkout-payment-continue',\n                    buttonText: language.translate('payment.continue_with_brand', {\n                        brandName: methodId,\n                    }),\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeLocalPaymentMethod,\n    [{ gateway: 'braintreelocalmethods' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nexport interface BoltCustomFormProps {\n    containerId: string;\n    showCreateAccountCheckbox: boolean;\n}\n\nconst agreementTranslationOptions = {\n    privacyPolicyUrl: 'https://www.bolt.com/privacy/',\n    termsUrl: 'https://www.bolt.com/end-user-terms/',\n};\n\nconst benefitsList = [\n    { id: 'payment.bolt_benefit_1' },\n    { id: 'payment.bolt_benefit_2' },\n    { id: 'payment.bolt_benefit_3' },\n];\n\nconst BoltCreateAccountCheckbox: FunctionComponent = () => {\n    const labelContent = (\n        <>\n            <TranslatedHtml\n                data={agreementTranslationOptions}\n                id=\"payment.bolt_checkbox_agreement\"\n            />\n            <ul>\n                {benefitsList.map(({ id }, key) => (\n                    <li key={key}>\n                        <TranslatedString id={id} />\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-checkbox form-field--createAccount\"\n            labelContent={labelContent}\n            name=\"shouldCreateAccount\"\n        />\n    );\n};\n\nconst BoltCustomForm: FunctionComponent<BoltCustomFormProps> = ({\n    containerId,\n    showCreateAccountCheckbox,\n}) => {\n    return (\n        <div className=\"form-ccFields\">\n            <div className=\"form-field form-field--bolt-embed\" id={containerId} />\n            {showCreateAccountCheckbox ? <BoltCreateAccountCheckbox /> : null}\n        </div>\n    );\n};\n\nexport default BoltCustomForm;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltCustomForm from './BoltCustomForm';\n\nconst BoltEmbeddedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [showCreateAccountCheckbox, setShowCreateAccountCheckbox] = useState(false);\n\n    const boltEmbeddedContainerId = 'bolt-embedded';\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const initializeBoltPayment = useCallback(\n        (options: any) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    containerId: boltEmbeddedContainerId,\n                    useBigCommerceCheckout: true,\n                    onPaymentSelect: (hasBoltAccount: boolean) => {\n                        setShowCreateAccountCheckbox(!hasBoltAccount);\n\n                        if (hasBoltAccount) {\n                            setFieldValue('shouldCreateAccount', false);\n                        }\n                    },\n                },\n            }),\n        [checkoutService, boltEmbeddedContainerId, setFieldValue],\n    );\n\n    const renderCustomPaymentForm = useCallback(\n        () => (\n            <BoltCustomForm\n                containerId={boltEmbeddedContainerId}\n                showCreateAccountCheckbox={showCreateAccountCheckbox}\n            />\n        ),\n        [boltEmbeddedContainerId, showCreateAccountCheckbox],\n    );\n\n    const { getInstruments, isPaymentDataRequired } = checkoutState.data;\n    const { isInitializingPayment, isLoadingInstruments } = checkoutState.statuses;\n    const instruments = getInstruments(method) || [];\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId=\"boltEmbeddedOneClick\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeBoltPayment}\n            instruments={instruments}\n            isInitializing={isInitializingPayment()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={!isGuestCustomer}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltEmbeddedPaymentMethod;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getPayByBankValidationSchema(\n    language: LanguageService,\n): ObjectSchema {\n    return object({\n        iban: string()\n            .matches(\n                /^[a-zA-Z0-9]+$/i,\n                language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n            )\n            .required(language.translate('payment.pay_by_bank_iban_required')),\n    });\n});\n","import React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport getPayByBankValidationSchema from './validation-schemas/getPayByBankValidationSchema';\n\nconst BlueSnapDirectPayByBankPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    language,\n    paymentForm: { setValidationSchema },\n    checkoutService: { initializePayment, deinitializePayment },\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const initializePayByBank = useCallback(async () => {\n        setValidationSchema(method, getPayByBankValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, language, method, setValidationSchema]);\n\n    const deinitializePayByBank = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayByBank();\n\n        return () => {\n            void deinitializePayByBank();\n        };\n    }, [deinitializePayByBank, initializePayByBank]);\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>{language.translate('payment.bluesnap_direct_iban.label')}</Legend>\n            }\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectTextField\n                autoComplete=\"iban\"\n                labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                name=\"iban\"\n                useFloatingLabel={true}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectPayByBankPaymentMethod,\n    [{ id: 'pay_by_bank', gateway: 'bluesnapdirect' }],\n);\n","export enum BluesnapECPAccountType {\n    ConsumerChecking = 'CONSUMER_CHECKING',\n    ConsumerSavings = 'CONSUMER_SAVINGS',\n    CorporateChecking = 'CORPORATE_CHECKING',\n    CorporateSavings = 'CORPORATE_SAVINGS',\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectNumberFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectNumberField: FunctionComponent<BlueSnapDirectNumberFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete=\"cc-number\"\n                fieldType={DynamicFormFieldType.TELEPHONE}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectNumberField);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { BluesnapECPAccountType } from '../constants';\n\nimport BlueSnapDirectNumberField from './BlueSnapDirectNumberField';\nimport BlueSnapDirectSelectField from './BlueSnapDirectSelectField';\nimport BlueSnapDirectTextField from './BlueSnapDirectTextField';\n\nexport interface BlueSnapDirectEcpFieldsetProps {\n    language: LanguageService;\n    useFloatingLabel?: boolean;\n    shouldRenderCompanyName: boolean;\n}\n\nconst BlueSnapDirectEcpFieldset: FunctionComponent<BlueSnapDirectEcpFieldsetProps> = ({\n    language,\n    useFloatingLabel,\n    shouldRenderCompanyName,\n}) => {\n    const options = {\n        helperLabel: language.translate('payment.bluesnap_direct_account_type_select.label'),\n        items: [\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_checking',\n                ),\n                value: BluesnapECPAccountType.ConsumerChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_savings',\n                ),\n                value: BluesnapECPAccountType.ConsumerSavings,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_checking',\n                ),\n                value: BluesnapECPAccountType.CorporateChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_savings',\n                ),\n                value: BluesnapECPAccountType.CorporateSavings,\n            },\n        ],\n    };\n\n    return (\n        <>\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_account_number.label')}\n                maxLength={17}\n                name=\"accountNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_routing_number.label')}\n                maxLength={9}\n                name=\"routingNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.bluesnap_direct_account_type.label')}\n                name=\"accountType\"\n                options={options}\n                useFloatingLabel={useFloatingLabel}\n            />\n            {shouldRenderCompanyName && (\n                <BlueSnapDirectTextField\n                    labelContent={language.translate('address.company_name_label')}\n                    name=\"companyName\"\n                    useFloatingLabel={useFloatingLabel}\n                />\n            )}\n        </>\n    );\n};\n\nexport default memo(BlueSnapDirectEcpFieldset);\n","import { AchInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useEcpInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isAchInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useEcpInstruments;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getEcpValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n    shouldRenderCompanyName: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  accountNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_account_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_account_number.only_numbers'),\n                      )\n                      .min(4, language.translate('payment.bluesnap_direct_account_number.length'))\n                      .max(\n                          17,\n                          language.translate('payment.bluesnap_direct_account_number.length_max'),\n                      ),\n                  routingNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_routing_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_routing_number.only_numbers'),\n                      )\n                      .length(\n                          9,\n                          language.translate('payment.bluesnap_direct_routing_number.length'),\n                      ),\n                  ...(shouldRenderCompanyName\n                      ? {\n                            companyName: string()\n                                .required(language.translate('address.company_name_required_error'))\n                                .max(\n                                    50,\n                                    language.translate(\n                                        'payment.bluesnap_direct_company_name.length_max',\n                                    ),\n                                ),\n                        }\n                      : {}),\n                  accountType: string().required(\n                      language.translate('payment.bluesnap_direct_account_type.is_required'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { BluesnapECPAccountType } from './constants';\nimport BlueSnapDirectEcpFieldset from './fields/BlueSnapDirectEcpFieldset';\nimport useEcpInstruments from './hooks/useEcpInstruments';\nimport getEcpValidationSchema from './validation-schemas/getEcpValidationSchema';\n\nconst BlueSnapDirectEcpPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n    checkoutState: {\n        data: { isPaymentDataRequired, getCustomer, getBillingAddress },\n        statuses: { isLoadingInstruments },\n    },\n    paymentForm: { disableSubmit, setValidationSchema, setFieldValue, getFormValues },\n    language,\n    onUnhandledError,\n}) => {\n    const [disabled, setDisabled] = useState(true);\n    const onChange = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeEcp = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeEcp = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeEcp();\n\n        return () => {\n            void deinitializeEcp();\n        };\n    }, [deinitializeEcp, initializeEcp]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useEcpInstruments(method);\n\n    const isLoading = isLoadingInstruments();\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n    const accountType = getFormValues().accountType;\n    const shouldRenderCompanyName =\n        accountType === BluesnapECPAccountType.CorporateChecking ||\n        accountType === BluesnapECPAccountType.CorporateSavings;\n\n    useEffect(() => {\n        if (shouldRenderCompanyName) {\n            setFieldValue('companyName', getBillingAddress()?.company);\n        } else {\n            setFieldValue('companyName', undefined);\n        }\n    }, [shouldRenderCompanyName, setFieldValue, getBillingAddress]);\n\n    useEffect(() => {\n        setValidationSchema(\n            method,\n            getEcpValidationSchema(language, shouldShowForm, shouldRenderCompanyName),\n        );\n    }, [language, shouldShowForm, shouldRenderCompanyName, setValidationSchema, method]);\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_electronic_check_label')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <BlueSnapDirectEcpFieldset\n                        language={language}\n                        shouldRenderCompanyName={shouldRenderCompanyName}\n                    />\n                )}\n                <CheckboxFormField\n                    labelContent={language.translate('payment.bluesnap_direct_permission')}\n                    name=\"shopperPermission\"\n                    onChange={onChange}\n                />\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectEcpPaymentMethod,\n    [{ id: 'ecp', gateway: 'bluesnapdirect' }],\n);\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { ReactNode, useState } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children?: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nconst Accordion = ({\n    children,\n    className = 'accordion',\n    defaultSelectedItemId,\n    isDisabled,\n    onSelect = noop,\n}: AccordionProps) => {\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\n\n    const handleToggleItem: (id: string) => void = (id) => {\n        if (isDisabled) {\n            return;\n        }\n\n        setSelectedItemId(id);\n        onSelect(id);\n    };\n\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\n        return {\n            onToggle: handleToggleItem,\n            selectedItemId: newSelectedItemId,\n        };\n    });\n\n    return (\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\n            <ul className={className}>{children}</ul>\n        </AccordionContext.Provider>\n    );\n};\n\nexport default Accordion;\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useEffect,\n    useMemo,\n} from 'react';\n\nimport { Accordion } from '@bigcommerce/checkout/ui';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\n\nexport interface ChecklistProps {\n    children?: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    useEffect(() => {\n        return () => {\n            setFieldValue(name, '');\n        };\n    }, []);\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n    isFloatingLabelEnabled?: boolean;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, isFloatingLabelEnabled, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => {\n        return (\n            <textarea\n                {...rest}\n                className={\n                    className ||\n                    classNames(\n                        { 'floating-textarea': isFloatingLabelEnabled },\n                        'form-input',\n                        'optimizedCheckout-form-input',\n                        additionalClassName,\n                    )\n                }\n                data-test={testId}\n                ref={ref}\n            />\n        );\n    },\n);\n\nexport default TextArea;\n","import React, { FunctionComponent, ReactNode, useCallback } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize } from '../button';\n\nimport Modal from './Modal';\nimport './ModalLink.scss';\nimport ModalTrigger, { ModalTriggerModalProps } from './ModalTrigger';\n\nexport interface ModalLinkProps {\n    header: ReactNode;\n    body: ReactNode;\n    children?: ReactNode;\n}\n\nconst ModalLink: FunctionComponent<ModalLinkProps> = ({ children, body, header }) => {\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <Modal\n                {...props}\n                additionalBodyClassName=\"modal--withText\"\n                footer={\n                    <Button onClick={props.onRequestClose} size={ButtonSize.Small}>\n                        <TranslatedString id=\"common.ok_action\" />\n                    </Button>\n                }\n                header={header}\n                shouldShowCloseButton={true}\n            >\n                {body}\n            </Modal>\n        ),\n        [header, body],\n    );\n\n    return (\n        <ModalTrigger modal={renderModal}>\n            { }\n            {({ onClick }) => <a onClick={preventDefault(onClick)}>{children}</a>}\n        </ModalTrigger>\n    );\n};\n\nexport default ModalLink;\n","import React, { Fragment, FunctionComponent } from 'react';\n\nconst MultiLineText: FunctionComponent<{ children: string }> = ({ children }) => (\n    <>\n        {children.split('\\n').map((line, key) => (\n            <Fragment key={key}>\n                {line}\n                <br />\n            </Fragment>\n        ))}\n    </>\n);\n\nexport default MultiLineText;\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { parseAnchor } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedHtml, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField, Fieldset, FormField, Legend, TextArea } from '../ui/form';\nimport { ModalHeader, ModalLink } from '../ui/modal';\nimport { MultiLineText } from '../ui/text';\n\nexport enum TermsConditionsType {\n    Link = 'link',\n    TextArea = 'textarea',\n    Modal = 'modal',\n}\n\nexport type TermsConditionsFieldProps =\n    | TermsConditionsLinkFieldProps\n    | TermsConditionsTextAreaFieldProps;\n\ninterface TermsConditionsLinkFieldProps {\n    name: string;\n    type: TermsConditionsType.Link;\n    url: string;\n}\n\ninterface TermsConditionsTextAreaFieldProps {\n    name: string;\n    terms: string;\n    type: TermsConditionsType.TextArea | TermsConditionsType.Modal;\n}\n\ninterface TermsConditionsTextFieldProps {\n    name: string;\n    terms: string;\n}\n\nconst BaseTermsConditionsModalCheckboxField: FunctionComponent<\n    TermsConditionsTextFieldProps & WithLanguageProps\n> = ({ language, name, terms }) => {\n    const translatedLabel = language.translate('terms_and_conditions.agreement_with_link_text', {\n        url: '',\n    });\n    const parsedLabel = parseAnchor(translatedLabel);\n\n    const labelContent = parsedLabel ? (\n        <>\n            {parsedLabel[0]}\n            <ModalLink\n                body={<MultiLineText>{terms}</MultiLineText>}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"terms_and_conditions.heading\" />\n                    </ModalHeader>\n                }\n            >\n                {parsedLabel[1]}\n            </ModalLink>\n            {parsedLabel[2]}\n        </>\n    ) : (\n        translatedLabel\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsModalCheckboxField = withLanguage(BaseTermsConditionsModalCheckboxField);\n\ninterface TermsConditionsCheckboxFieldProps {\n    name: string;\n    type: TermsConditionsType;\n    url?: string;\n}\n\nconst TermsConditionsCheckboxField: FunctionComponent<TermsConditionsCheckboxFieldProps> = ({\n    name,\n    url,\n}) => {\n    const labelContent = useMemo(\n        () =>\n            url ? (\n                <TranslatedHtml data={{ url }} id=\"terms_and_conditions.agreement_with_link_text\" />\n            ) : (\n                <TranslatedString id=\"terms_and_conditions.agreement_text\" />\n            ),\n        [url],\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsTextField: FunctionComponent<TermsConditionsTextFieldProps> = ({\n    name,\n    terms,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextArea defaultValue={terms} name={field.name} readOnly />,\n        [terms],\n    );\n\n    return <FormField input={renderInput} name={`${name}Text`} />;\n};\n\nconst TermsConditionsFieldset: FunctionComponent<TermsConditionsFieldProps> = (props) => {\n    const { type } = props;\n\n    return (\n        <Fieldset\n            additionalClassName=\"checkout-terms\"\n            legend={\n                <Legend>\n                    <TranslatedString id=\"terms_and_conditions.terms_and_conditions_heading\" />\n                </Legend>\n            }\n        >\n            {isTermsConditionsTextArea(props) && <TermsConditionsTextField {...props} />}\n            {isTermsConditionModal(props) && type === TermsConditionsType.Modal ? (\n                <TermsConditionsModalCheckboxField {...props} />\n            ) : (\n                <TermsConditionsCheckboxField {...props} />\n            )}\n        </Fieldset>\n    );\n};\n\nfunction isTermsConditionsTextArea(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.TextArea;\n}\n\nfunction isTermsConditionModal(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.Modal;\n}\n\nexport default memo(TermsConditionsFieldset);\n","import { TranslationData } from '@bigcommerce/checkout-sdk';\nimport { includes } from 'lodash';\n\nexport default function mapSubmitOrderErrorMessage(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n    shouldLocalise: boolean,\n): string {\n    switch (error.type) {\n        case 'not_initialized':\n            return translate('payment.payment_error');\n\n        case 'custom_provider_execute_error':\n            return translate(error.subtype);\n\n        case 'payment_cancelled':\n            return translate('payment.payment_cancelled');\n\n        case 'payment_method_invalid':\n            return translate('payment.payment_method_disabled_error');\n\n        case 'tax_provider_unavailable':\n            return translate('payment.tax_provider_unavailable');\n\n        case 'cart_changed':\n            return translate('shipping.cart_change_error');\n\n        case 'cart_consistency':\n            return translate('cart.consistency_error');\n\n        default:\n            if (\n                includes(\n                    [\n                        'order_could_not_be_finalized_error',\n                        'provider_fatal_error',\n                        'payment_invalid',\n                        'provider_error',\n                        'provider_widget_error',\n                        'user_payment_error',\n                    ],\n                    error.body && error.body.type,\n                )\n            ) {\n                return translate('payment.payment_method_error', { message: error.message });\n            }\n\n            if (shouldLocalise && error.body && error.body.errors && error.body.errors.length) {\n                const messages = error.body.errors.map((err: { code: any }) =>\n                    translate(`payment.errors.${err.code}`),\n                );\n\n                return messages.join(' ');\n            }\n\n            if (error.message) {\n                return error.message;\n            }\n\n            return error.type === 'unrecoverable'\n                ? translate('common.unavailable_error')\n                : translate('payment.place_order_error');\n    }\n}\n\nexport function mapSubmitOrderErrorTitle(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n): string {\n    if (error.type === 'unrecoverable') {\n        return translate('common.unavailable_heading');\n    }\n\n    if (error.type === 'missing_shipping_method') {\n        return translate('common.missing_shipping_method_heading');\n    }\n\n    if (error.type === 'invalid_shipping_address') {\n        return translate('common.invalid_shipping_address');\n    }\n\n    return translate('common.error_heading');\n}\n","export interface ExpiryDate {\n    month: string;\n    year: string;\n}\n\nexport default function unformatCreditCardExpiryDate(value: string): ExpiryDate {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n\n    if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n        return { month: '', year: '' };\n    }\n\n    return {\n        month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n        year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n    };\n}\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n\nexport function parseUniquePaymentMethodId(value: string): {\n    methodId: string;\n    gatewayId?: string;\n} {\n    const [gatewayId, methodId] = value.includes('-') ? value.split('-') : [undefined, value];\n\n    return { gatewayId, methodId };\n}\n","import { CardInstrumentFieldsetValues } from '../storedInstrument';\n\nexport default interface CreditCardFieldsetValues {\n    ccCustomerCode?: string;\n    ccCvv?: string;\n    ccExpiry: string;\n    ccName: string;\n    ccNumber: string;\n    shouldSaveInstrument?: boolean;\n}\n\nexport interface CreditCardValidationValues extends CardInstrumentFieldsetValues {\n    ccCvv?: string;\n    ccNumber?: string;\n}\n\nexport function hasCreditCardNumber(values: unknown): values is { ccNumber: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccNumber' in values;\n}\n\nexport function hasCreditCardExpiry(values: unknown): values is { ccExpiry: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccExpiry' in values;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport TermsConditionsField, { TermsConditionsType } from './TermsConditionsField';\n\nexport interface TermsConditionsProps {\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n}\n\nexport const TermsConditions: FunctionComponent<TermsConditionsProps> = ({\n    termsConditionsUrl,\n    termsConditionsText = '',\n}) => (\n    <>\n        {termsConditionsUrl ? (\n            <TermsConditionsField\n                name=\"terms\"\n                type={TermsConditionsType.Link}\n                url={termsConditionsUrl}\n            />\n        ) : (\n            <TermsConditionsField\n                name=\"terms\"\n                terms={termsConditionsText}\n                type={TermsConditionsType.TextArea}\n            />\n        )}\n    </>\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { getTermsConditionsValidationSchema } from '../termsConditions';\n\nexport interface PaymentValidationSchemaOptions {\n    additionalValidation?: ObjectSchema<Partial<PaymentFormValues>>;\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPaymentValidationSchema({\n    additionalValidation,\n    isTermsConditionsRequired,\n    language,\n}: PaymentValidationSchemaOptions): ObjectSchema<PaymentFormValues> {\n    const schemaFields: {\n        paymentProviderRadio: StringSchema;\n    } = {\n        paymentProviderRadio: string().required(),\n    };\n\n    const schemaFieldsWithTerms = object(schemaFields).concat(\n        getTermsConditionsValidationSchema({ isTermsConditionsRequired, language }),\n    );\n\n    return additionalValidation\n        ? schemaFieldsWithTerms.concat(additionalValidation as any)\n        : schemaFieldsWithTerms;\n}\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, BooleanSchema, object, ObjectSchema } from 'yup';\n\nexport interface TermsConditionValidationSchemaOptions {\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getTermsConditionsValidationSchema({\n    isTermsConditionsRequired,\n    language,\n}: TermsConditionValidationSchemaOptions): ObjectSchema<{ terms?: boolean }> {\n    const schemaFields: {\n        terms?: BooleanSchema;\n    } = {};\n\n    if (isTermsConditionsRequired) {\n        schemaFields.terms = boolean().oneOf(\n            [true],\n            language.translate('terms_and_conditions.agreement_required_error'),\n        );\n    }\n\n    return object(schemaFields);\n}\n","import React, { FunctionComponent, memo, ReactNode } from 'react';\n\nexport interface CustomChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n}\n\nconst CustomChecklistItem: FunctionComponent<CustomChecklistItemProps> = ({\n    content,\n    htmlId,\n}) => {\n    return (\n        <li\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item custom-checklist-item\"\n            id={htmlId}\n        >\n            {content}\n        </li>\n    );\n};\n\nexport default memo(CustomChecklistItem);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsPayLaterBanner: FunctionComponent<{\n    onUnhandledError?(error: Error): void\n}> = ({ onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n                bigcommerce_payments_paylater: {\n                    bannerContainerId: 'bigcommerce-payments-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n    }, []);\n\n    return (\n        <div\n            data-test='bigcommerce-payments-banner-container'\n            id='bigcommerce-payments-banner-container'\n        />\n    );\n};\n\nexport default BigCommercePaymentsPayLaterBanner;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalCreditBanner: FunctionComponent<{ onUnhandledError?(error: Error): void }> = ({\n    onUnhandledError,\n}) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BraintreePaypalCredit,\n                braintree: {\n                    bannerContainerId: 'braintree-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BraintreePaypalCredit,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n\n        return () => {\n            try {\n                void checkoutService.deinitializePayment({\n                    methodId: PaymentMethodId.BraintreePaypalCredit,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError?.(error);\n                }\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test=\"braintree-banner-container\" id=\"braintree-banner-container\" />;\n};\n\nexport default BraintreePaypalCreditBanner;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst PaypalCommerceCreditBanner: FunctionComponent<{\n    methodId: string;\n    containerId: string;\n    onUnhandledError?(error: Error): void;\n}> = ({ methodId, containerId, onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId,\n                [methodId]: {\n                    bannerContainerId: containerId,\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default PaypalCommerceCreditBanner;\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { CreditCardIcon, filterInstrumentTypes } from './';\n\nexport interface CreditCardIconListProps {\n    selectedCardType?: string;\n    cardTypes: string[];\n}\n\nconst CreditCardIconList: FunctionComponent<CreditCardIconListProps> = ({\n    selectedCardType,\n    cardTypes,\n}) => {\n    const filteredCardTypes = filterInstrumentTypes(cardTypes);\n\n    if (!filteredCardTypes.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"creditCardTypes-list\">\n            {filteredCardTypes.map((type) => (\n                <li\n                    className={classNames(\n                        'creditCardTypes-list-item',\n                        { 'is-active': selectedCardType === type },\n                        { 'not-active': selectedCardType && selectedCardType !== type },\n                    )}\n                    data-test={`${type}-icon`}\n                    key={type}\n                >\n                    <span className=\"cardIcon\">\n                        <CreditCardIcon cardType={type} />\n                    </span>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(CreditCardIconList);\n","import { CardInstrument, CheckoutSettings, LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport classNames from 'classnames';\nimport { compact } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { BigCommercePaymentsPayLaterBanner } from '@bigcommerce/checkout/bigcommerce-payments-utils'\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps , PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { BraintreePaypalCreditBanner, PaypalCommerceCreditBanner } from '@bigcommerce/checkout/paypal-utils';\nimport { CreditCardIconList, mapFromPaymentMethodCardType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { isExperimentEnabled } from '../../common/utility';\n\nimport { hasCreditCardNumber } from './CreditCardFieldsetValues';\nimport getPaymentMethodDisplayName from './getPaymentMethodDisplayName';\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { isHostedCreditCardFieldsetValues } from './HostedCreditCardFieldsetValues';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodTitleProps {\n    method: PaymentMethod;\n    isSelected?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithPaymentTitleProps {\n    instruments: CardInstrument[];\n    checkoutSettings: CheckoutSettings;\n    storeCountryCode: string;\n    cdnBasePath: string;\n}\n\ninterface PaymentMethodSubtitleProps {\n    onUnhandledError?(error: Error): void;\n    methodId: string;\n}\n\ntype SubtitleType = ReactNode | ((subtitleProps?: PaymentMethodSubtitleProps) => ReactNode);\n\nexport function getPaymentMethodTitle(\n    language: LanguageService,\n    basePath: string,\n    checkoutSettings: CheckoutSettings,\n    storeCountryCode: string,\n): (method: PaymentMethod) => {\n    logoUrl: string;\n    titleText: string,\n    subtitle?: SubtitleType\n} {\n    const cdnPath = (path: string) => `${basePath}${path}`;\n\n    return (method) => {\n        const paymentWithLogo = method.initializationData?.methodsWithLogo\n            ? method.initializationData.methodsWithLogo\n            : [];\n        const methodName = getPaymentMethodName(language)(method);\n        const methodDisplayName = getPaymentMethodDisplayName(language)(method);\n        // TODO: API could provide the data below so UI can read simply read it.\n        // However, I'm not sure how we deal with translation yet. TBC.\n        const customTitles: { [key: string]: { logoUrl: string; titleText: string, subtitle?: ReactNode | ((props: any) => ReactNode) } } = {\n            [PaymentMethodType.CreditCard]: {\n                logoUrl: '',\n                titleText: methodName,\n            },\n            [PaymentMethodId.BraintreeVenmo]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.BraintreePaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: { onUnhandledError?(error: Error): void }): ReactNode => <BraintreePaypalCreditBanner {...props} />\n            },\n            [PaymentMethodType.PaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeAch]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeLocalPaymentMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BigCommercePaymentsPayPal]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsPayLater]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.PaypalCommerce]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-credit-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodType.VisaCheckout]: {\n                logoUrl: cdnPath('/img/payment-providers/visa-checkout.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.Affirm]: {\n                logoUrl: cdnPath('/img/payment-providers/affirm-checkout-header.png'),\n                titleText: language.translate('payment.affirm_display_name_text'),\n            },\n            [PaymentMethodId.Afterpay]: {\n                logoUrl: isExperimentEnabled(checkoutSettings, 'PROJECT-6993.change_afterpay_logo_for_us_stores') && storeCountryCode === 'US' ? cdnPath('/img/payment-providers/afterpay-new-us.svg') : cdnPath('/img/payment-providers/afterpay-badge-blackonmint.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.AmazonPay]: {\n                logoUrl: cdnPath('/img/payment-providers/amazon-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.ApplePay]: {\n                logoUrl: cdnPath('/modules/checkout/applepay/images/applepay-header@2x.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Bolt]: {\n                logoUrl: '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Clearpay]: {\n                logoUrl: cdnPath('/img/payment-providers/clearpay-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.GooglePay]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.PayWithGoogle]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Humm]: {\n                logoUrl: cdnPath('/img/payment-providers/humm-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Klarna]: {\n                logoUrl: method.initializationData?.enableBillie\n                        ? cdnPath('/img/payment-providers/klarna-billie-header.png')\n                        : cdnPath('/img/payment-providers/klarna-header.png'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Laybuy]: {\n                logoUrl: cdnPath('/img/payment-providers/laybuy-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Masterpass]: {\n                logoUrl: 'https://masterpass.com/dyn/img/acc/global/mp_mark_hor_blk.svg',\n                titleText: '',\n            },\n            [PaymentMethodType.Paypal]: {\n                // TODO: method.id === PaymentMethodId.BraintreeVenmo should be removed after the PAYPAL-1380.checkout_button_strategies_update experiment removal\n                logoUrl:\n                    method.id === PaymentMethodId.BraintreeVenmo && method.logoUrl\n                        ? method.logoUrl\n                        : cdnPath('/img/payment-providers/paypalpaymentsprouk.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Quadpay]: {\n                logoUrl: cdnPath('/img/payment-providers/quadpay.png'),\n                titleText: language.translate('payment.quadpay_display_name_text'),\n            },\n            [PaymentMethodId.Sezzle]: {\n                logoUrl: cdnPath('/img/payment-providers/sezzle-checkout-header.png'),\n                titleText: language.translate('payment.sezzle_display_name_text'),\n            },\n            [PaymentMethodId.Zip]: {\n                logoUrl: cdnPath('/img/payment-providers/zip.png'),\n                titleText: language.translate('payment.zip_display_name_text'),\n            },\n            [PaymentMethodType.Barclaycard]: {\n                logoUrl: cdnPath(\n                    `/img/payment-providers/barclaycard_${method.id.toLowerCase()}.png`,\n                ),\n                titleText: '',\n            },\n            [PaymentMethodId.AdyenV2]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.AdyenV3]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Mollie]: {\n                logoUrl:\n                    method.method === 'credit_card'\n                        ? ''\n                        : cdnPath(`/img/payment-providers/mollie_${method.method}.svg`),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Checkoutcom]: {\n                logoUrl: ['credit_card', 'card', 'checkoutcom'].includes(method.id)\n                    ? ''\n                    : cdnPath(`/img/payment-providers/checkoutcom_${method.id.toLowerCase()}.svg`),\n                titleText: methodName,\n            },\n            [PaymentMethodId.StripeV3]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.StripeUPE]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.WorldpayAccess]: {\n                logoUrl: '',\n                titleText: language.translate('payment.credit_debit_card_text'),\n            },\n        };\n\n        if (method.gateway === PaymentMethodId.BlueSnapDirect) {\n            if (method.id === 'credit_card') {\n                return { logoUrl: '', titleText: language.translate('payment.credit_card_text') };\n            }\n\n            if (method.id === 'ecp') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_electronic_check_label') };\n            }\n\n            if (method.id === 'banktransfer') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_local_bank_transfer_label') };\n            }\n        }\n\n        if (method.id === PaymentMethodId.PaypalCommerceVenmo) {\n            return customTitles[PaymentMethodId.PaypalCommerceAlternativeMethod];\n        }\n\n        if (method.id === PaymentMethodId.BigCommercePaymentsVenmo) {\n            return customTitles[PaymentMethodId.BigCommercePaymentsAlternativeMethod];\n        }\n\n        // KLUDGE: 'paypal' is actually a credit card method. It is the only\n        // exception to the rule below. We should probably fix it on API level,\n        // but apparently it would break LCO if we are not careful.\n        if (\n            method.id === PaymentMethodId.PaypalPaymentsPro &&\n            method.method === PaymentMethodType.CreditCard\n        ) {\n            return customTitles[PaymentMethodType.CreditCard];\n        }\n\n        if (method.id === PaymentMethodId.Ratepay) {\n            return { logoUrl: method.logoUrl || '', titleText: language.translate('payment.ratepay.payment_method_title')};\n        }\n\n        return (\n            customTitles[method.gateway || ''] ||\n            customTitles[method.id] ||\n            customTitles[method.method] ||\n            customTitles[PaymentMethodType.CreditCard]\n        );\n    };\n}\n\nfunction getInstrumentForMethod(\n    instruments: CardInstrument[],\n    method: PaymentMethod,\n    values: PaymentFormValues\n): CardInstrument | undefined {\n    const instrumentsForMethod = instruments.filter(instrument => instrument.provider === method.id);\n    const selectedInstrument = instrumentsForMethod.find(instrument => instrument.bigpayToken === values.instrumentId);\n\n    return selectedInstrument;\n}\n\nconst PaymentMethodTitle: FunctionComponent<\n    PaymentMethodTitleProps &\n        WithLanguageProps &\n        WithPaymentTitleProps &\n        ConnectFormikProps<PaymentFormValues>\n> = ({ cdnBasePath, checkoutSettings, storeCountryCode, onUnhandledError, formik: { values }, instruments, isSelected, language, method }) => {\n    const methodName = getPaymentMethodName(language)(method);\n    const { logoUrl, titleText, subtitle } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(method);\n    const { themeV2 } = useThemeContext();\n\n    const getSelectedCardType = () => {\n        if (!isSelected) {\n            return;\n        }\n\n        const instrumentSelected = getInstrumentForMethod(instruments, method, values);\n\n        if (isHostedCreditCardFieldsetValues(values) && values.hostedForm.cardType) {\n            return values.hostedForm.cardType;\n        }\n\n        if (hasCreditCardNumber(values) && values.ccNumber) {\n            const { card } = number(values.ccNumber);\n\n            if (!card) {\n                return;\n            }\n\n            return card.type;\n        }\n\n        if (instrumentSelected) {\n            return instrumentSelected.brand;\n        }\n    };\n\n    const getSubtitle = () => {\n        const node = subtitle instanceof Function ? subtitle({ onUnhandledError, methodId: method.id }) : subtitle;\n\n        return node ? <div className=\"paymentProviderHeader-subtitleContainer\">\n            {node}\n        </div> : null\n    }\n\n    return (\n        <div className={\n            classNames(\n                'paymentProviderHeader-container',\n                {'paymentProviderHeader-container-googlePay': method.id.includes('googlepay')},\n            )\n        }>\n            <div\n                className=\"paymentProviderHeader-nameContainer\"\n                data-test={`payment-method-${method.id}`}\n            >\n                {logoUrl && (\n                    <img\n                        alt={`${methodName} icon`}\n                        className={classNames(\n                            'paymentProviderHeader-img',\n                            {'paymentProviderHeader-img-applePay': method.id === 'applepay'},\n                            {'paymentProviderHeader-img-googlePay': method.id.includes('googlepay')},\n                        )}\n                        data-test=\"payment-method-logo\"\n                        src={logoUrl}\n                    />\n                )}\n\n                {titleText && (\n                    <div className={classNames('paymentProviderHeader-name',\n                        { 'sub-header': themeV2 })}\n                        data-test=\"payment-method-name\">\n                        {titleText}\n                    </div>\n                )}\n                {getSubtitle()}\n            </div>\n            <div className=\"paymentProviderHeader-cc\">\n                <CreditCardIconList\n                    cardTypes={compact(method.supportedCards.map(mapFromPaymentMethodCardType))}\n                    selectedCardType={getSelectedCardType()}\n                />\n            </div>\n        </div>\n    );\n};\n\nfunction mapToCheckoutProps({ checkoutState }: CheckoutContextProps): WithPaymentTitleProps | null {\n    const {\n        data: { getConfig, getInstruments },\n    } = checkoutState;\n    const config = getConfig();\n\n    const instruments = getInstruments() || [];\n\n    if (!config) {\n        return null;\n    }\n\n    const storeCountryCode = config.storeProfile.storeCountryCode\n\n    return {\n        instruments,\n        checkoutSettings: config.checkoutSettings,\n        storeCountryCode,\n        cdnBasePath: config.cdnPath,\n    };\n}\n\nexport default connectFormik(\n    withLanguage(withCheckout(mapToCheckoutProps)(memo(PaymentMethodTitle))),\n);\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport PaymentMethodId from './PaymentMethodId';\n\nexport default function getPaymentMethodDisplayName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        const { displayName } = method.config;\n\n        const isCreditCard = displayName?.toLowerCase() === 'credit card';\n\n        if (\n            method.id === PaymentMethodId.PaypalCommerceCredit ||\n            method.id === PaymentMethodId.BigCommercePaymentsPayLater ||\n            method.id === PaymentMethodId.BraintreePaypalCredit\n        ) {\n            const { payPalCreditProductBrandName } = method.initializationData;\n\n            if (payPalCreditProductBrandName) {\n                return payPalCreditProductBrandName.credit || payPalCreditProductBrandName;\n            }\n\n            return 'Pay Later';\n        }\n\n        if (\n            (isCreditCard && method.id === PaymentMethodId.AdyenV2) ||\n            method.id === PaymentMethodId.AdyenV3\n        ) {\n            return language.translate('payment.credit_debit_card_text');\n        }\n\n        if (isCreditCard) {\n            return language.translate('payment.credit_card_text');\n        }\n\n        return displayName || '';\n    };\n}\n","interface HostedCreditCardFieldsetValues {\n    hostedForm: {\n        cardType?: string;\n        errors?: {\n            cardCode?: string;\n            cardExpiry?: string;\n            cardName?: string;\n            cardNumber?: string;\n        };\n    };\n}\n\nexport function isHostedCreditCardFieldsetValues(\n    value: unknown,\n): value is HostedCreditCardFieldsetValues {\n    if (!(value instanceof Object)) {\n        return false;\n    }\n\n    if (!('hostedForm' in value)) {\n        return false;\n    }\n\n    return true;\n}\n","import React, { ReactNode } from 'react';\n\nimport PaymentFormService from '../../PaymentFormService';\n\nimport { PaymentFormContext } from './PaymentFormContext';\n\ninterface PaymentFormProviderProps {\n    children?: ReactNode;\n    paymentForm: PaymentFormService;\n}\n\nexport const PaymentFormProvider = ({ children, paymentForm }: PaymentFormProviderProps) => {\n    return (\n        <PaymentFormContext.Provider value={{ paymentForm }}>\n            {children}\n        </PaymentFormContext.Provider>\n    );\n};\n","import { lazy } from 'react';\n\nconst AdyenV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"adyen-v2-payment-method\" */'@bigcommerce/checkout/adyen-integration').then(module => ({ default: module.AdyenV2PaymentMethod })));\nconst AdyenV3PaymentMethod = lazy(() => import(/* webpackChunkName: \"adyen-v3-payment-method\" */'@bigcommerce/checkout/adyen-integration').then(module => ({ default: module.AdyenV3PaymentMethod })));\nconst AffirmPaymentMethod = lazy(() => import(/* webpackChunkName: \"affirm-payment-method\" */'@bigcommerce/checkout/affirm-integration').then(module => ({ default: module.AffirmPaymentMethod })));\nconst AfterpayPaymentMethod = lazy(() => import(/* webpackChunkName: \"afterpay-payment-method\" */'@bigcommerce/checkout/afterpay-integration').then(module => ({ default: module.AfterpayPaymentMethod })));\nconst AmazonPayV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"amazon-pay-v2-payment-method\" */'@bigcommerce/checkout/amazon-pay-v2-integration').then(module => ({ default: module.AmazonPayV2PaymentMethod })));\nconst ApplePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"apple-pay-payment-method\" */'@bigcommerce/checkout/apple-pay-integration').then(module => ({ default: module.ApplePayPaymentMethod })));\nconst BarclaycardPaymentMethod = lazy(() => import(/* webpackChunkName: \"barclaycard-payment-method\" */'@bigcommerce/checkout/barclay-integration').then(module => ({ default: module.BarclaycardPaymentMethod })));\nconst BigCommercePaymentsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsPaymentMethod })));\nconst BigCommercePaymentsAPMsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-apms-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsAPMsPaymentMethod })));\nconst BigCommercePaymentsCreditCardsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-credit-cards-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsCreditCardsPaymentMethod })));\nconst BigCommercePaymentsFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-fastlane-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsFastlanePaymentMethod })));\nconst BigCommercePaymentsPayLaterPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-pay-later-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsPayLaterPaymentMethod })));\nconst BigCommercePaymentsVenmoPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-venmo-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsVenmoPaymentMethod })));\nconst BigCommercePaymentsRatePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-rate-pay-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsRatePayPaymentMethod })));\nconst BlueSnapDirectEcpPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-ecp-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectEcpPaymentMethod })));\nconst BlueSnapDirectAlternativePaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-alternative-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectAlternativePaymentMethod })));\nconst BlueSnapDirectSepaPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-sepa-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectSepaPaymentMethod })));\nconst BlueSnapDirectIdealPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-ideal-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectIdealPaymentMethod })));\nconst BlueSnapV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-v2-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapV2PaymentMethod })));\nconst BlueSnapDirectPayByBankPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-pay-by-bank-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectPayByBankPaymentMethod })));\nconst BoltClientPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-client-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltClientPaymentMethod })));\nconst BoltEmbeddedPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-embedded-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltEmbeddedPaymentMethod })));\nconst BoltPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltPaymentMethod })));\nconst BraintreeAchPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-ach-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeAchPaymentMethod })));\nconst BraintreeFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-fastlane-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeFastlanePaymentMethod })));\nconst BraintreeLocalPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-local-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeLocalPaymentMethod })));\nconst BraintreePaypalPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-paypal-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreePaypalPaymentMethod })));\nconst VisaCheckoutPaymentMethod = lazy(() => import(/* webpackChunkName: \"visa-checkout-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.VisaCheckoutPaymentMethod })));\nconst CheckoutcomCustomPaymentMethod = lazy(() => import(/* webpackChunkName: \"checkoutcom-custom-payment-method\" */'@bigcommerce/checkout/checkoutcom-integration').then(module => ({ default: module.CheckoutcomCustomPaymentMethod })));\nconst ClearpayPaymentMethod = lazy(() => import(/* webpackChunkName: \"clearpay-payment-method\" */'@bigcommerce/checkout/clearpay-integration').then(module => ({ default: module.ClearpayPaymentMethod })));\nconst GooglePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"google-pay-payment-method\" */'@bigcommerce/checkout/google-pay-integration').then(module => ({ default: module.GooglePayPaymentMethod })));\nconst HostedCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-credit-card-payment-method\" */'@bigcommerce/checkout/hosted-credit-card-integration').then(module => ({ default: module.HostedCreditCardPaymentMethod })));\nconst HostedPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-payment-method\" */'@bigcommerce/checkout/hosted-payment-integration').then(module => ({ default: module.HostedPaymentMethod })));\nconst KlarnaPaymentMethod = lazy(() => import(/* webpackChunkName: \"klarna-payment-method\" */'@bigcommerce/checkout/klarna-integration').then(module => ({ default: module.KlarnaPaymentMethod })));\nconst KlarnaV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"klarna-v2-payment-method\" */'@bigcommerce/checkout/klarna-integration').then(module => ({ default: module.KlarnaV2PaymentMethod })));\nconst MolliePaymentMethod = lazy(() => import(/* webpackChunkName: \"mollie-payment-method\" */'@bigcommerce/checkout/mollie-integration').then(module => ({ default: module.MolliePaymentMethod })));\nconst MonerisPaymentMethod = lazy(() => import(/* webpackChunkName: \"moneris-payment-method\" */'@bigcommerce/checkout/moneris-integration').then(module => ({ default: module.MonerisPaymentMethod })));\nconst OfflinePaymentMethod = lazy(() => import(/* webpackChunkName: \"offline-payment-method\" */'@bigcommerce/checkout/offline-payment-integration').then(module => ({ default: module.OfflinePaymentMethod })));\nconst PayPalCommerceAPMsPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-apms-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceAPMsPaymentMethod })));\nconst PayPalCommerceCreditPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-credit-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceCreditPaymentMethod })));\nconst PayPalCommerceCreditCardsPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-credit-cards-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceCreditCardsPaymentMethod })));\nconst PayPalCommerceFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-fastlane-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceFastlanePaymentMethod })));\nconst PayPalCommercePaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommercePaymentMethod })));\nconst PayPalCommerceVenmoPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-venmo-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceVenmoPaymentMethod })));\nconst PaypalCommerceRatePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"paypal-commerce-rate-pay-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PaypalCommerceRatePayPaymentMethod })));\nconst PaypalExpressPaymentMethod = lazy(() => import(/* webpackChunkName: \"paypal-express-payment-method\" */'@bigcommerce/checkout/paypal-express-integration').then(module => ({ default: module.PaypalExpressPaymentMethod })));\nconst SquareV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"square-v2-payment-method\" */'@bigcommerce/checkout/squarev2-integration').then(module => ({ default: module.SquareV2PaymentMethod })));\nconst StripeOCSPaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-ocspayment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeOCSPaymentMethod })));\nconst StripeUPEPaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-upepayment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeUPEPaymentMethod })));\nconst StripeV3PaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-v3-payment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeV3PaymentMethod })));\nconst WorldpayCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"worldpay-credit-card-payment-method\" */'@bigcommerce/checkout/worldpay-access-integration').then(module => ({ default: module.WorldpayCreditCardPaymentMethod })));\n\nexport {\n  AdyenV2PaymentMethod,\n  AdyenV3PaymentMethod,\n  AffirmPaymentMethod,\n  AfterpayPaymentMethod,\n  AmazonPayV2PaymentMethod,\n  ApplePayPaymentMethod,\n  BarclaycardPaymentMethod,\n  BigCommercePaymentsPaymentMethod,\n  BigCommercePaymentsAPMsPaymentMethod,\n  BigCommercePaymentsCreditCardsPaymentMethod,\n  BigCommercePaymentsFastlanePaymentMethod,\n  BigCommercePaymentsPayLaterPaymentMethod,\n  BigCommercePaymentsVenmoPaymentMethod,\n  BigCommercePaymentsRatePayPaymentMethod,\n  BlueSnapDirectEcpPaymentMethod,\n  BlueSnapDirectAlternativePaymentMethod,\n  BlueSnapDirectSepaPaymentMethod,\n  BlueSnapDirectIdealPaymentMethod,\n  BlueSnapV2PaymentMethod,\n  BlueSnapDirectPayByBankPaymentMethod,\n  BoltClientPaymentMethod,\n  BoltEmbeddedPaymentMethod,\n  BoltPaymentMethod,\n  BraintreeAchPaymentMethod,\n  BraintreeFastlanePaymentMethod,\n  BraintreeLocalPaymentMethod,\n  BraintreePaypalPaymentMethod,\n  VisaCheckoutPaymentMethod,\n  CheckoutcomCustomPaymentMethod,\n  ClearpayPaymentMethod,\n  GooglePayPaymentMethod,\n  HostedCreditCardPaymentMethod,\n  HostedPaymentMethod,\n  KlarnaPaymentMethod,\n  KlarnaV2PaymentMethod,\n  MolliePaymentMethod,\n  MonerisPaymentMethod,\n  OfflinePaymentMethod,\n  PayPalCommerceAPMsPaymentMethod,\n  PayPalCommerceCreditPaymentMethod,\n  PayPalCommerceCreditCardsPaymentMethod,\n  PayPalCommerceFastlanePaymentMethod,\n  PayPalCommercePaymentMethod,\n  PayPalCommerceVenmoPaymentMethod,\n  PaypalCommerceRatePayPaymentMethod,\n  PaypalExpressPaymentMethod,\n  SquareV2PaymentMethod,\n  StripeOCSPaymentMethod,\n  StripeUPEPaymentMethod,\n  StripeV3PaymentMethod,\n  WorldpayCreditCardPaymentMethod,\n};\n\nimport { PaymentMethodId } from '@bigcommerce/checkout/payment-integration-api';\n\nexport const ComponentRegistry = {\n  'AdyenV2PaymentMethod': [\n    { \"gateway\": \"adyenv2\" }\n  ],\n  'AdyenV3PaymentMethod': [\n    { \"gateway\": \"adyenv3\" }\n  ],\n  'AffirmPaymentMethod': [\n    { \"id\": \"affirm\" }\n  ],\n  'AfterpayPaymentMethod': [\n    { \"gateway\": \"afterpay\" }\n  ],\n  'AmazonPayV2PaymentMethod': [\n    { \"id\": \"amazonpay\" }\n  ],\n  'ApplePaymentMethod': [\n    { \"id\": \"applepay\" }\n  ],\n  'BarclaycardPaymentMethod': [\n    { \"gateway\": \"barclaycard\" }\n  ],\n  'BigCommercePaymentsAPMsPaymentMethod': [\n    { \"gateway\": \"bigcommerce_payments_apms\" }\n  ],\n  'BigCommercePaymentsCreditCardPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_creditcards\" }\n  ],\n  'BigCommercePaymentsFastlanePaymentMethod': [\n    { \"id\": \"bigcommerce_payments_fastlane\" }\n  ],\n  'BigCommercePaymentsPayLaterPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_paylater\" }\n  ],\n  'BigCommercePaymentsPaymentMethod': [\n    { \"id\": \"bigcommerce_payments\" }\n  ],\n  'BigCommercePaymentsRatePayPaymentMethod': [\n    { \"gateway\": \"bigcommerce_payments_apms\", \"id\": \"ratepay\" }\n  ],\n  'BigCommercePaymentsVenmoPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_venmo\" }\n  ],\n  'BlueSnapDirectAlternativePaymentMethod': [\n    { \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectEcpPaymentMethod': [\n    { \"id\": \"ecp\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectIdealPaymentMethod': [\n    { \"id\": \"ideal\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectPayByBankPaymentMethod': [\n    { \"id\": \"pay_by_bank\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectSepaPaymentMethod': [\n    { \"id\": \"sepa_direct_debit\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapV2PaymentMethod': [\n    { \"gateway\": \"bluesnapv2\" }\n  ],\n  'BoltPaymentMethod': [\n    { \"id\": \"bolt\" }\n  ],\n  'BraintreeAchPaymentMethod': [\n    { \"id\": \"braintreeach\" }\n  ],\n  'BraintreeFastlanePaymentMethod': [\n    { \"id\": \"braintreeacceleratedcheckout\" }\n  ],\n  'BraintreeLocalPaymentMethod': [\n    { \"gateway\": \"braintreelocalmethods\" }\n  ],\n  'BraintreePaypalPaymentMethod': [\n    { \"id\": \"braintreepaypal\" }\n  ],\n  'CheckoutcomCustomPaymentMethod': [\n    { \"gateway\": \"checkoutcom\", \"id\": \"ideal\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"fawry\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"oxxo\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"boleto\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"sepa\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"qpay\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"p24\" }\n  ],\n  'ClearpayPaymentMethod': [\n    { \"gateway\": \"clearpay\" }\n  ],\n  'GooglePayPaymentMethod': [\n    { \"id\": PaymentMethodId.AdyenV2GooglePay },\n    { \"id\": PaymentMethodId.AdyenV3GooglePay },\n    { \"id\": PaymentMethodId.AuthorizeNetGooglePay },\n    { \"id\": PaymentMethodId.BNZGooglePay },\n    { \"id\": PaymentMethodId.BraintreeGooglePay },\n    { \"id\": PaymentMethodId.PayPalCommerceGooglePay },\n    { \"id\": PaymentMethodId.BigCommercePaymentsGooglePay },\n    { \"id\": PaymentMethodId.CheckoutcomGooglePay },\n    { \"id\": PaymentMethodId.CybersourceV2GooglePay },\n    { \"id\": PaymentMethodId.OrbitalGooglePay },\n    { \"id\": PaymentMethodId.StripeGooglePay },\n    { \"id\": PaymentMethodId.StripeUPEGooglePay },\n    { \"id\": PaymentMethodId.WorldpayAccessGooglePay },\n    { \"id\": PaymentMethodId.TdOnlineMartGooglePay },\n    { \"id\": PaymentMethodId.StripeOCSGooglePay }\n  ],\n  'HostedCreditCardPaymentMethod': [\n    { \"id\": \"hosted-credit-card\" },\n    { \"id\": \"credit_card\", \"gateway\": \"bluesnapdirect\" },\n    { \"id\": \"tdonlinemart\" }\n  ],\n  'HostedPaymentMethod': [\n    { \"id\": \"quadpay\" }\n  ],\n  'KlarnaPaymentMethod': [\n    { \"id\": \"klarna\" }\n  ],\n  'KlarnaV2PaymentMethod': [\n    { \"gateway\": \"klarna\" }\n  ],\n  'MolliePaymentMethod': [\n    { \"gateway\": \"mollie\" },\n    { \"gateway\": \"mollie\", \"id\": \"applepay\" }\n  ],\n  'MonerisPaymentMethod': [\n    { \"id\": \"moneris\" }\n  ],\n  'OfflinePaymentMethod': [\n    { \"type\": \"PAYMENT_TYPE_OFFLINE\" }\n  ],\n  'PayPalCommerceAPMsPaymentMethod': [\n    { \"gateway\": \"paypalcommercealternativemethods\" }\n  ],\n  'PayPalCommerceCreditCardPaymentMethod': [\n    { \"id\": \"paypalcommercecreditcards\" }\n  ],\n  'PayPalCommerceCreditPaymentMethod': [\n    { \"id\": \"paypalcommercecredit\" }\n  ],\n  'PayPalCommerceFastlanePaymentMethod': [\n    { \"id\": \"paypalcommerceacceleratedcheckout\" }\n  ],\n  'PayPalCommercePaymentMethod': [\n    { \"id\": \"paypalcommerce\" }\n  ],\n  'PaypalCommerceRatePayPaymentMethod': [\n    { \"gateway\": \"paypalcommercealternativemethods\", \"id\": \"ratepay\" }\n  ],\n  'PayPalCommerceVenmoPaymentMethod': [\n    { \"id\": \"paypalcommercevenmo\" }\n  ],\n  'PaypalExpressPaymentMethod': [\n    { \"id\": \"paypalexpress\" }\n  ],\n  'SquareV2PaymentMethod': [\n    { \"id\": \"squarev2\" }\n  ],\n  'StripeOCSPaymentMethod': [\n    { \"gateway\": \"stripeocs\", \"id\": \"optimized_checkout\" }\n  ],\n  'StripeUPEPaymentMethod': [\n    { \"gateway\": \"stripeupe\" },\n    { \"gateway\": \"stripeupe\", \"id\": \"klarna\" }\n  ],\n  'StripeV3PaymentMethod': [\n    { \"gateway\": \"stripev3\" }\n  ],\n  'VisaCheckoutPaymentMethod': [\n    { \"id\": PaymentMethodId.BraintreeVisaCheckout }\n  ],\n  'WorldpayCreditCardPaymentMethod': [\n    { \"id\": \"worldpayaccess\" }\n  ]\n} as const;\n\n","import {\n    CheckoutSelectors,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, lazy, memo, Suspense } from 'react';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nconst BraintreeCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-credit-card-payment-method\" */'./BraintreeCreditCardPaymentMethod'));\nconst HostedCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-credit-card-payment-method\" */'./HostedCreditCardPaymentMethod'));\nconst HostedPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-payment-method\" */'./HostedPaymentMethod'));\nconst MasterpassPaymentMethod = lazy(() => import(/* webpackChunkName: \"masterpass-payment-method\" */'./MasterpassPaymentMethod'));\nconst PaypalPaymentsProPaymentMethod = lazy(() => import(/* webpackChunkName: \"paypal-payments-pro-payment-method\" */'./PaypalPaymentsProPaymentMethod'));\nconst PPSDKPaymentMethod = lazy(() => import(/* webpackChunkName: \"ppsdk-payment-method\" */'./PPSDKPaymentMethod'));\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError?(error: Error): void;\n    submitForm?(): void;\n}\n\nexport interface WithCheckoutPaymentMethodProps {\n    isInitializing: boolean;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n}\n\n/**\n * If possible, try to avoid having components that are specific to a specific\n * payment provider or method. Instead, try to generalise the requirements and\n * use components that can are reusable for multiple payment methods. i.e.:\n * CreditCardPaymentMethod, HostedPaymentMethod etc... If it is really necessary\n * for a particular payment method, you may write a method-specific component for\n * the purpose of configuring a general-purpose component in order to fulfill\n * its specific product or technical requirements.\n */\nconst PaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & WithCheckoutPaymentMethodProps\n> = (props) => {\n    const { method } = props;\n\n    if (method.type === PaymentMethodProviderType.PPSDK) {\n        return <Suspense><PPSDKPaymentMethod {...props} /></Suspense>;\n    }\n\n    if (method.id === PaymentMethodId.Masterpass) {\n        return <Suspense><MasterpassPaymentMethod {...props} /></Suspense>;\n    }\n\n    if (method.id === PaymentMethodId.Braintree) {\n        return <Suspense><BraintreeCreditCardPaymentMethod {...props} /></Suspense>;\n    }\n\n    if (\n        method.type !== PaymentMethodProviderType.Hosted &&\n        method.id === PaymentMethodId.PaypalPaymentsPro\n    ) {\n        return <Suspense><PaypalPaymentsProPaymentMethod {...props} /></Suspense>;\n    }\n\n\n    if (\n        method.id === PaymentMethodId.BraintreeVenmo ||\n        method.id === PaymentMethodId.Humm ||\n        method.id === PaymentMethodId.Laybuy ||\n        method.id === PaymentMethodId.Sezzle ||\n        method.id === PaymentMethodId.Zip ||\n        method.method === PaymentMethodType.Paypal ||\n        method.method === PaymentMethodType.PaypalCredit ||\n        method.type === PaymentMethodProviderType.Hosted\n    ) {\n        return <Suspense><HostedPaymentMethod {...props} /></Suspense>;\n    }\n\n    // NOTE: Some payment methods have `method` as `credit-card` but they are\n    // actually not. Therefore, as a workaround, we are doing the following\n    // check last.\n    if (\n        method.method === PaymentMethodType.CreditCard ||\n        method.type === PaymentMethodProviderType.Api\n    ) {\n        return <Suspense><HostedCreditCardPaymentMethod {...props} /></Suspense>;\n    }\n\n    return null;\n};\n\nfunction mapToWithCheckoutPaymentMethodProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaymentMethodProps {\n    const {\n        statuses: { isInitializingPayment },\n    } = checkoutState;\n\n    return {\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        deinitializePayment: checkoutService.deinitializePayment,\n        initializeCustomer: checkoutService.initializeCustomer,\n        initializePayment: checkoutService.initializePayment,\n        isInitializing: isInitializingPayment(method.id),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutPaymentMethodProps)(memo(PaymentMethodComponent));\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { ComponentType, Suspense } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { PaymentFormProvider, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout, WithCheckoutProps } from '../../checkout';\nimport { connectFormik, WithFormikProps } from '../../common/form';\nimport { isExperimentEnabled } from '../../common/utility';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport createPaymentFormService from '../createPaymentFormService';\nimport resolvePaymentMethod from '../resolvePaymentMethod';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport { default as PaymentMethodV1 } from './PaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError(error: Error): void;\n}\n\nconst PaymentMethodContainer: ComponentType<\n    PaymentMethodProps &\n        WithCheckoutProps &\n        WithLanguageProps &\n        WithPaymentProps &\n        WithFormProps &\n        WithFormikProps<PaymentFormValues>\n> = ({\n    formik: formikContext,\n    checkoutService,\n    checkoutState,\n    disableSubmit,\n    hidePaymentSubmitButton,\n    isEmbedded,\n    isSubmitted,\n    isUsingMultiShipping,\n    language,\n    method,\n    onUnhandledError,\n    setSubmit,\n    setSubmitted,\n    setValidationSchema,\n}) => {\n    const formContext = {\n        isSubmitted,\n        setSubmitted,\n    };\n\n    const paymentContext = {\n        disableSubmit,\n        hidePaymentSubmitButton,\n        setSubmit,\n        setValidationSchema,\n    };\n\n    const { getConfig } = checkoutState.data;\n\n    const ResolvedPaymentMethod = resolvePaymentMethod(\n        {\n            id: method.id,\n            gateway: method.gateway,\n            type: method.type,\n        },\n        isExperimentEnabled(getConfig()?.checkoutSettings, 'CHECKOUT-9432.lazy_load_payment_components', false)\n    );\n\n    if (!ResolvedPaymentMethod) {\n        return (\n            <PaymentMethodV1\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    const paymentForm = createPaymentFormService(formikContext, formContext, paymentContext);\n\n    return (\n        <PaymentFormProvider paymentForm={paymentForm}>\n            <Suspense>\n                <ResolvedPaymentMethod\n                    checkoutService={checkoutService}\n                    checkoutState={checkoutState}\n                    language={language}\n                    method={method}\n                    onUnhandledError={onUnhandledError}\n                    paymentForm={paymentForm}\n                />\n            </Suspense>\n        </PaymentFormProvider>\n    );\n};\n\nexport default withCheckout((props) => props)(\n    withLanguage(withPayment(withForm(connectFormik(PaymentMethodContainer)))),\n) as ComponentType<PaymentMethodProps>;\n","import { ComponentType } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { resolveComponent , resolveLazyComponent } from '../common/resolver';\nimport * as paymentMethods from '../generated/paymentIntegrations';\nimport * as lazyPaymentMethods from '../generated/paymentIntegrations/lazy';\n\nexport default function resolvePaymentMethod(\n    query: PaymentMethodResolveId,\n    useLazyLoad: boolean,\n): ComponentType<PaymentMethodProps> | undefined {\n    if (useLazyLoad) {\n        const { ComponentRegistry, ...components } = lazyPaymentMethods;\n\n        return resolveLazyComponent<PaymentMethodResolveId, PaymentMethodProps>(\n            query, \n            components, \n            ComponentRegistry,\n        );\n    }\n\n    return resolveComponent<PaymentMethodResolveId, PaymentMethodProps>(query, paymentMethods);\n}\n","import { FormikContextType } from 'formik';\n\nimport {\n    PaymentFormService,\n    PaymentFormValues,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContextType } from '@bigcommerce/checkout/ui';\n\nimport { PaymentContextProps } from './PaymentContext';\n\nexport default function createPaymentFormService(\n    formikContext: FormikContextType<PaymentFormValues>,\n    formContext: FormContextType,\n    paymentContext: PaymentContextProps,\n): PaymentFormService {\n    const {\n        setFieldTouched,\n        setFieldValue,\n        submitForm,\n        validateForm,\n        values,\n    } = formikContext;\n\n    const { isSubmitted, setSubmitted } = formContext;\n\n    const { disableSubmit, setSubmit, setValidationSchema, hidePaymentSubmitButton } =\n        paymentContext;\n\n    const getFieldValue = <T>(key: string): T | unknown => values[key];\n\n    return {\n        disableSubmit,\n        getFieldValue,\n        getFormValues: () => values,\n        hidePaymentSubmitButton,\n        isSubmitted: () => isSubmitted,\n        setFieldTouched: setFieldTouched as PaymentFormService['setFieldTouched'],\n        setFieldValue: setFieldValue as PaymentFormService['setFieldValue'],\n        setSubmit,\n        setSubmitted,\n        setValidationSchema,\n        submitForm,\n        validateForm,\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find, get, noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { isMobile } from '../../common/utility';\nimport { Checklist, ChecklistItem, CustomChecklistItem } from '../../ui/form';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport getUniquePaymentMethodId, { parseUniquePaymentMethodId } from './getUniquePaymentMethodId';\nimport PaymentMethodTitle, { getPaymentMethodTitle } from './PaymentMethodTitle';\nimport PaymentMethodV2 from './PaymentMethodV2';\n\nexport interface PaymentMethodListProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    onSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n}\n\nfunction getPaymentMethodFromListValue(methods: PaymentMethod[], value: string): PaymentMethod {\n    const { gatewayId: gateway, methodId: id } = parseUniquePaymentMethodId(value);\n    const method = gateway ? find(methods, { gateway, id }) : find(methods, { id });\n\n    if (!method) {\n        throw new Error(`Unable to find payment method with id: ${id}`);\n    }\n\n    return method;\n}\n\nconst PaymentMethodList: FunctionComponent<\n    PaymentMethodListProps & ConnectFormikProps<{ paymentProviderRadio?: string }>\n> = ({\n    formik: { values },\n    isEmbedded,\n    isInitializingPayment,\n    isUsingMultiShipping,\n    methods,\n    onSelect = noop,\n    onUnhandledError,\n}) => {\n    const { language } = useLocale();\n    const {\n        checkoutState: {\n            data: { getConfig }\n        }\n    } = useCheckout();\n\n    const config = getConfig();\n\n    const titleText = useMemo(() => {\n        if (config && values.paymentProviderRadio) {\n            const checkoutSettings = config.checkoutSettings;\n            const cdnBasePath = config.cdnPath;\n            const storeCountryCode = config.storeProfile.storeCountryCode;\n            const paymentMethod = getPaymentMethodFromListValue(methods, values.paymentProviderRadio);\n            const methodName = getPaymentMethodName(language)(paymentMethod);\n            const { titleText } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(paymentMethod);\n\n            return titleText || methodName;\n        }\n\n        return '';\n    }, [config, values.paymentProviderRadio])\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelect(getPaymentMethodFromListValue(methods, value));\n        },\n        [methods, onSelect],\n    );\n\n    return (\n        <>\n            <div aria-live=\"assertive\" className='is-srOnly' role=\"status\">{titleText}</div>\n            <Checklist\n                defaultSelectedItemId={values.paymentProviderRadio}\n                isDisabled={isInitializingPayment}\n                name=\"paymentProviderRadio\"\n                onSelect={handleSelect}\n            >\n                {methods.map((method) => {\n                    const value = getUniquePaymentMethodId(method.id, method.gateway);\n                    const showOnlyOnMobileDevices = get(\n                        method,\n                        'initializationData.showOnlyOnMobileDevices',\n                        false,\n                    );\n\n                    if (showOnlyOnMobileDevices && !isMobile()) {\n                        return;\n                    }\n\n                    return (\n                        <PaymentMethodListItem\n                            isDisabled={isInitializingPayment}\n                            isEmbedded={isEmbedded}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            key={value}\n                            method={method}\n                            onUnhandledError={onUnhandledError}\n                            value={value}\n                        />\n                    );\n                })}\n            </Checklist>\n        </>\n    );\n};\n\ninterface PaymentMethodListItemProps {\n    isDisabled?: boolean;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    value: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentMethodListItem: FunctionComponent<PaymentMethodListItemProps> = ({\n    isDisabled,\n    isEmbedded,\n    isUsingMultiShipping,\n    method,\n    onUnhandledError,\n    value,\n}) => {\n    const renderPaymentMethod = useMemo(() => {\n        return (\n            <PaymentMethodV2\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError || noop}\n            />\n        );\n    }, [isEmbedded, isUsingMultiShipping, method, onUnhandledError]);\n\n    const renderPaymentMethodTitle = useCallback(\n        (isSelected: boolean) => <PaymentMethodTitle isSelected={isSelected} method={method} onUnhandledError={onUnhandledError} />,\n        [method],\n    );\n\n    if (method.initializationData?.isCustomChecklistItem) {\n        return (\n            <CustomChecklistItem\n                content={renderPaymentMethod}\n                htmlId={`radio-${value}`}\n            />\n        );\n    }\n\n    return (\n        <ChecklistItem\n            content={renderPaymentMethod}\n            htmlId={`radio-${value}`}\n            isDisabled={isDisabled}\n            label={renderPaymentMethodTitle}\n            value={value}\n        />\n    );\n};\n\nexport default connectFormik(memo(PaymentMethodList));\n","export default function isMobile(): boolean {\n    return /Android|iPhone|iPad|iPod/i.test(window.navigator.userAgent);\n}\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { mapToRedeemableProps, Redeemable, RedeemableProps } from '../cart';\nimport { withCheckout } from '../checkout';\nimport { Fieldset, Legend } from '../ui/form';\n\nconst PaymentRedeemables: FunctionComponent<RedeemableProps> = (redeemableProps) => (\n    <Fieldset \n        additionalClassName=\"redeemable-payments\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.redeemable_payments_text\" />\n            </Legend>\n        }\n    >\n        <Redeemable {...redeemableProps} showAppliedRedeemables={true} />\n    </Fieldset>\n);\n\nexport default withCheckout(mapToRedeemableProps)(memo(PaymentRedeemables));\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { withCheckout } from '../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { IconBolt } from '../ui/icon';\n\nimport { PaymentMethodId, PaymentMethodType } from './paymentMethod';\n\ninterface PaymentSubmitButtonTextProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodType?: string;\n    methodName?: string;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\nconst providersWithCustomClasses = [PaymentMethodId.Bolt];\n\nconst PaymentSubmitButtonText: FunctionComponent<PaymentSubmitButtonTextProps> = memo(\n    ({\n        methodId,\n        methodName,\n        methodType,\n        methodGateway,\n        initialisationStrategyType,\n        brandName,\n        isComplete,\n        isPaymentDataRequired,\n    }) => {\n        if (!isPaymentDataRequired) {\n            return <TranslatedString id=\"payment.place_order_action\" />;\n        }\n\n        if (methodName && initialisationStrategyType === 'none') {\n            return <TranslatedString data={{ methodName }} id=\"payment.ppsdk_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.AmazonPay) {\n            return <TranslatedString id=\"payment.amazonpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Bolt) {\n            return (\n                <>\n                    <IconBolt additionalClassName=\"payment-submit-button-bolt-icon\" />\n                    <TranslatedString id=\"payment.place_order_action\" />\n                </>\n            );\n        }\n\n        if (methodGateway === PaymentMethodId.Barclaycard) {\n            return <TranslatedString id=\"payment.barclaycard_continue_action\" />;\n        }\n\n        if (methodGateway === PaymentMethodId.BlueSnapV2) {\n            return <TranslatedString id=\"payment.bluesnap_v2_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.VisaCheckout) {\n            return <TranslatedString id=\"payment.visa_checkout_continue_action\" />;\n        }\n\n        if (\n            methodType === PaymentMethodType.PaypalVenmo ||\n            methodId === PaymentMethodId.BraintreeVenmo\n        ) {\n            return <TranslatedString id=\"payment.paypal_venmo_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.Paypal) {\n            const continueActionId = methodId === PaymentMethodId.PaypalCommerce\n                ? 'payment.place_order_action'\n                : 'payment.paypal_continue_action';\n\n            return <TranslatedString\n                data={{ isComplete }}\n                id={isComplete ? 'payment.paypal_complete_action' : continueActionId}\n            />;\n        }\n\n        if (methodType === PaymentMethodType.PaypalCredit) {\n            const continueTranslationId = brandName\n                ? 'payment.continue_with_brand'\n                : 'payment.paypal_pay_later_continue_action'\n            const completeTranslationId = brandName\n                ? 'payment.complete_with_brand'\n                : 'payment.paypal_pay_later_complete_action'\n\n            return (\n                <TranslatedString\n                    data={{ brandName, isComplete, continueTranslationId, completeTranslationId }}\n                    id={\n                        isComplete\n                            ? completeTranslationId\n                            : continueTranslationId\n                    }\n                />\n            );\n        }\n\n        if (methodId === PaymentMethodId.Quadpay) {\n            return <TranslatedString id=\"payment.quadpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Zip) {\n            return <TranslatedString id=\"payment.zip_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Klarna) {\n            return <TranslatedString id=\"payment.klarna_continue_action\" />;\n        }\n\n        return <TranslatedString id=\"payment.place_order_action\" />;\n    },\n);\n\nexport interface PaymentSubmitButtonProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodName?: string;\n    methodType?: string;\n    isDisabled?: boolean;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\ninterface WithCheckoutPaymentSubmitButtonProps {\n    isInitializing?: boolean;\n    isSubmitting?: boolean;\n}\n\nconst PaymentSubmitButton: FunctionComponent<\n    PaymentSubmitButtonProps & WithCheckoutPaymentSubmitButtonProps\n> = ({\n    isDisabled,\n    isInitializing,\n    isSubmitting,\n    isPaymentDataRequired,\n    methodGateway,\n    methodId,\n    methodName,\n    methodType,\n    initialisationStrategyType,\n    brandName,\n    isComplete,\n}) => (\n    <Button\n        className={\n            providersWithCustomClasses.includes(methodId as PaymentMethodId)\n                ? `payment-submit-button-${methodId}`\n                : undefined\n        }\n        data-test=\"payment-submit-button\"\n        disabled={isInitializing || isSubmitting || isDisabled}\n        id=\"checkout-payment-continue\"\n        isFullWidth\n        isLoading={isSubmitting}\n        size={ButtonSize.Large}\n        type=\"submit\"\n        variant={ButtonVariant.Action}\n    >\n        <PaymentSubmitButtonText\n            brandName={brandName}\n            initialisationStrategyType={initialisationStrategyType}\n            isComplete={isComplete}\n            isPaymentDataRequired={isPaymentDataRequired}\n            methodGateway={methodGateway}\n            methodId={methodId}\n            methodName={methodName}\n            methodType={methodType}\n        />\n    </Button>\n);\n\nexport default withCheckout(({ checkoutState }) => {\n    const {\n        data: { isPaymentDataRequired },\n        statuses: { isInitializingCustomer, isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    return {\n        isInitializing: isInitializingCustomer() || isInitializingPayment(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isSubmitting: isSubmittingOrder(),\n    };\n})(memo(PaymentSubmitButton));\n","import { CheckoutSelectors } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, MouseEvent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../checkout';\nimport { isErrorWithType } from '../common/error';\n\nexport interface SpamProtectionProps {\n    didExceedSpamLimit?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface SpamProtectionState {\n    shouldShowRetryButton: boolean;\n}\n\ninterface WithCheckoutSpamProtectionProps {\n    isExecutingSpamCheck: boolean;\n    executeSpamCheck(): Promise<CheckoutSelectors>;\n}\n\nfunction mapToSpamProtectionProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutSpamProtectionProps {\n    return {\n        isExecutingSpamCheck: checkoutState.statuses.isExecutingSpamCheck(),\n        executeSpamCheck: checkoutService.executeSpamCheck,\n    };\n}\n\nclass SpamProtectionField extends Component<\n    SpamProtectionProps & WithCheckoutSpamProtectionProps,\n    SpamProtectionState\n> {\n    state = {\n        shouldShowRetryButton: false,\n    };\n\n    async componentDidMount() {\n        const { didExceedSpamLimit } = this.props;\n\n        if (didExceedSpamLimit) {\n            return;\n        }\n\n        this.verify();\n    }\n\n    render() {\n        const { isExecutingSpamCheck } = this.props;\n\n        return (\n            <div className=\"spamProtection-container\">\n                <LoadingOverlay isLoading={isExecutingSpamCheck}>\n                    {this.renderContent()}\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { didExceedSpamLimit } = this.props;\n        const { shouldShowRetryButton } = this.state;\n\n        if (!didExceedSpamLimit && !shouldShowRetryButton) {\n            return;\n        }\n\n        return (\n            <div className=\"spamProtection-panel optimizedCheckout-overlay\">\n                <a\n                    className=\"spamProtection-panel-message optimizedCheckout-primaryContent\"\n                    data-test=\"spam-protection-verify-button\"\n                    onClick={this.handleRetry}\n                >\n                    <TranslatedString id=\"spam_protection.verify_action\" />\n                </a>\n            </div>\n        );\n    }\n\n    private async verify(): Promise<void> {\n        const { executeSpamCheck, onUnhandledError = noop } = this.props;\n\n        try {\n            await executeSpamCheck();\n        } catch (error) {\n            this.setState({ shouldShowRetryButton: true });\n\n            // Notify the parent component if the user experiences a problem other than cancelling the reCaptcha challenge.\n            if (\n                isErrorWithType(error) &&\n                error.type !== 'spam_protection_challenge_not_completed'\n            ) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    private handleRetry: (event: MouseEvent) => void = (event) => {\n        event.preventDefault();\n\n        this.verify();\n    };\n}\n\nexport default withCheckout(mapToSpamProtectionProps)(SpamProtectionField);\n","import { noop } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withCurrency, WithCurrencyProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { CheckboxInput } from '../../ui/form';\nimport { Tooltip, TooltipTrigger } from '../../ui/tooltip';\n\nexport interface StoreCreditFieldProps {\n    availableStoreCredit: number;\n    name: string;\n    usableStoreCredit: number;\n    isStoreCreditApplied: boolean;\n    onChange?(value: boolean): void;\n}\n\nconst StoreCreditField: FunctionComponent<StoreCreditFieldProps & WithCurrencyProps> = ({\n    availableStoreCredit,\n    currency,\n    name,\n    onChange = noop,\n    usableStoreCredit,\n    isStoreCreditApplied,\n}) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n\n    const handleChange = useCallback((event: any) => onChange(event.target.checked), [onChange]);\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"redeemable.apply_store_credit_before_action\" />{' '}\n                <TooltipTrigger\n                    placement=\"top-start\"\n                    tooltip={\n                        <Tooltip testId=\"payment-store-credit-tooltip\">\n                            <TranslatedString\n                                data={{\n                                    storeCredit: currency.toCustomerCurrency(availableStoreCredit),\n                                }}\n                                id=\"redeemable.store_credit_available_text\"\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <a href=\"#\" onClick={preventDefault()}>\n                        {currency.toCustomerCurrency(usableStoreCredit)}\n                    </a>\n                </TooltipTrigger>{' '}\n                <TranslatedString id=\"redeemable.apply_store_credit_after_action\" />\n            </>\n        ),\n        [availableStoreCredit, currency, usableStoreCredit],\n    );\n\n    return (\n        <CheckboxInput\n            checked={isStoreCreditApplied}\n            disabled={isSubmittingOrder()}\n            id={name}\n            label={labelContent}\n            name={name}\n            onChange={handleChange}\n            value={name}\n        />\n    );\n};\n\nexport default withCurrency(StoreCreditField);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst StoreCreditOverlay: FunctionComponent = () => (\n    <div className=\"storeCreditOverlay\" data-test=\"payment-store-credit-overlay\">\n        <p className=\"storeCreditOverlay-text\">\n            <TranslatedString id=\"payment.payment_not_required_text\" />\n        </p>\n    </div>\n);\n\nexport default StoreCreditOverlay;\n","import { ExtensionRegion, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, FormikState, withFormik, WithFormikConfig } from 'formik';\nimport { isNil, noop, omitBy } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useContext, useMemo } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { TermsConditions } from '../termsConditions';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getPaymentValidationSchema from './getPaymentValidationSchema';\nimport {\n    getPaymentMethodName,\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodList,\n} from './paymentMethod';\nimport PaymentRedeemables from './PaymentRedeemables';\nimport PaymentSubmitButton from './PaymentSubmitButton';\nimport SpamProtectionField from './SpamProtectionField';\nimport { StoreCreditField, StoreCreditOverlay } from './storeCredit';\n\nexport interface PaymentFormProps {\n    availableStoreCredit?: number;\n    defaultGatewayId?: string;\n    defaultMethodId: string;\n    didExceedSpamLimit?: boolean;\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isTermsConditionsRequired?: boolean;\n    isUsingMultiShipping?: boolean;\n    isStoreCreditApplied: boolean;\n    methods: PaymentMethod[];\n    selectedMethod?: PaymentMethod;\n    shouldShowStoreCredit?: boolean;\n    shouldDisableSubmit?: boolean;\n    shouldHidePaymentSubmitButton?: boolean;\n    shouldExecuteSpamCheck?: boolean;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit?: number;\n    validationSchema?: ObjectSchema<Partial<PaymentFormValues>>;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onStoreCreditChange?(useStoreCredit?: boolean): void;\n    onSubmit?(values: PaymentFormValues): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentForm: FunctionComponent<\n    PaymentFormProps & FormikProps<PaymentFormValues> & WithLanguageProps\n> = ({\n    availableStoreCredit = 0,\n    didExceedSpamLimit,\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isTermsConditionsRequired,\n    isStoreCreditApplied,\n    isUsingMultiShipping,\n    language,\n    methods,\n    onMethodSelect,\n    onStoreCreditChange,\n    onUnhandledError,\n    resetForm,\n    selectedMethod,\n    shouldDisableSubmit,\n    shouldHidePaymentSubmitButton,\n    shouldExecuteSpamCheck,\n    termsConditionsText = '',\n    termsConditionsUrl,\n    usableStoreCredit = 0,\n    values,\n}) => {\n    const selectedMethodId = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        switch (selectedMethod.id) {\n            case PaymentMethodId.AmazonPay:\n                if (selectedMethod.initializationData.paymentToken) {\n                    return;\n                }\n\n                return selectedMethod.id;\n\n            default:\n                return selectedMethod.id;\n        }\n    }, [selectedMethod]);\n\n    const brandName = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        return (\n            selectedMethod.initializationData?.payPalCreditProductBrandName?.credit ||\n            selectedMethod.initializationData?.payPalCreditProductBrandName\n        );\n    }, [selectedMethod]);\n\n    if (shouldExecuteSpamCheck) {\n        return (\n            <SpamProtectionField\n                didExceedSpamLimit={didExceedSpamLimit}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    return (\n        <Form className=\"checkout-form\" testId=\"payment-form\">\n            {usableStoreCredit > 0 && (\n                <StoreCreditField\n                    availableStoreCredit={availableStoreCredit}\n                    isStoreCreditApplied={isStoreCreditApplied}\n                    name=\"useStoreCredit\"\n                    onChange={onStoreCreditChange}\n                    usableStoreCredit={usableStoreCredit}\n                />\n            )}\n\n            <PaymentMethodListFieldset\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isPaymentDataRequired={isPaymentDataRequired}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onMethodSelect={onMethodSelect}\n                onUnhandledError={onUnhandledError}\n                resetForm={resetForm}\n                values={values}\n            />\n\n            <PaymentRedeemables />\n\n            {isTermsConditionsRequired && (\n                <TermsConditions\n                    termsConditionsText={termsConditionsText}\n                    termsConditionsUrl={termsConditionsUrl}\n                />\n            )}\n\n            <div className=\"form-actions\">\n                {shouldHidePaymentSubmitButton ? (\n                    <PaymentMethodSubmitButtonContainer />\n                ) : (\n                    <PaymentSubmitButton\n                        brandName={brandName}\n                        initialisationStrategyType={\n                            selectedMethod && selectedMethod.initializationStrategy?.type\n                        }\n                        isComplete={!!selectedMethod?.initializationData?.isComplete}\n                        isDisabled={shouldDisableSubmit}\n                        methodGateway={selectedMethod && selectedMethod.gateway}\n                        methodId={selectedMethodId}\n                        methodName={\n                            selectedMethod && getPaymentMethodName(language)(selectedMethod)\n                        }\n                        methodType={selectedMethod && selectedMethod.method}\n                    />\n                )}\n            </div>\n        </Form>\n    );\n};\n\nconst PaymentMethodSubmitButtonContainer: FunctionComponent = () => {\n    return <div className=\"submitButtonContainer\" id=\"checkout-payment-continue\" />;\n};\n\ninterface PaymentMethodListFieldsetProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    values: PaymentFormValues;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n    resetForm(nextValues?: Partial<FormikState<PaymentFormValues>>): void;\n}\n\nconst PaymentMethodListFieldset: FunctionComponent<PaymentMethodListFieldsetProps> = ({\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isUsingMultiShipping,\n    methods,\n    onMethodSelect = noop,\n    onUnhandledError,\n    resetForm,\n    values,\n}) => {\n    const { setSubmitted } = useContext(FormContext);\n\n    const handlePaymentMethodSelect = useCallback(\n        (method: PaymentMethod) => {\n            const updatedValues = {\n                ...values,\n                ccCustomerCode: '',\n                ccCvv: '',\n                ccDocument: '',\n                customerEmail: '',\n                customerMobile: '',\n                ccExpiry: '',\n                ccName: '',\n                ccNumber: '',\n                instrumentId: '',\n                paymentProviderRadio: getUniquePaymentMethodId(method.id, method.gateway),\n                shouldCreateAccount: true,\n                shouldSaveInstrument: false,\n            };\n\n            resetForm({ values: updatedValues });\n            setSubmitted(false);\n            onMethodSelect(method);\n        },\n        [values, onMethodSelect, resetForm, setSubmitted],\n    );\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.payment_methods_text\" />\n                </Legend>\n            }\n        >\n            {!isPaymentDataRequired() && <StoreCreditOverlay />}\n\n            <Extension region={ExtensionRegion.PaymentPaymentMethodListBefore}/>\n\n            <PaymentMethodList\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onSelect={handlePaymentMethodSelect}\n                onUnhandledError={onUnhandledError}\n            />\n        </Fieldset>\n    );\n};\n\nconst paymentFormConfig: WithFormikConfig<PaymentFormProps & WithLanguageProps, PaymentFormValues> =\n    {\n        mapPropsToValues: ({ defaultGatewayId, defaultMethodId }) => ({\n            ccCustomerCode: '',\n            ccCvv: '',\n            ccDocument: '',\n            customerEmail: '',\n            customerMobile: '',\n            ccExpiry: '',\n            ccName: '',\n            ccNumber: '',\n            paymentProviderRadio: getUniquePaymentMethodId(defaultMethodId, defaultGatewayId),\n            instrumentId: '',\n            shouldCreateAccount: true,\n            shouldSaveInstrument: false,\n            terms: false,\n            hostedForm: {\n                cardType: '',\n                errors: {\n                    cardCode: '',\n                    cardCodeVerification: '',\n                    cardExpiry: '',\n                    cardName: '',\n                    cardNumber: '',\n                    cardNumberVerification: '',\n                },\n            },\n            accountNumber: '',\n            routingNumber: '',\n        }),\n\n        handleSubmit: (values, { props: { onSubmit = noop } }) => {\n            onSubmit(\n                omitBy(\n                    values,\n                    (value, key) => isNil(value) || value === '' || key === 'hostedForm',\n                ),\n            );\n        },\n\n        validationSchema: ({\n            language,\n            isTermsConditionsRequired = false,\n            validationSchema,\n        }: PaymentFormProps & WithLanguageProps) =>\n            getPaymentValidationSchema({\n                additionalValidation: validationSchema,\n                isTermsConditionsRequired,\n                language,\n            }),\n    };\n\nexport default withLanguage(withFormik(paymentFormConfig)(memo(PaymentForm)));\n","import {\n    CartChangedError,\n    CheckoutSelectors,\n    CheckoutService,\n    CheckoutSettings,\n    OrderRequestBody,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { compact, find, isEmpty, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { ErrorLogger } from '@bigcommerce/checkout/error-handling-utils';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { withAnalytics } from '../analytics';\nimport { withCheckout } from '../checkout';\nimport {\n    ErrorModal,\n    ErrorModalOnCloseProps,\n    isCartChangedError,\n    isErrorWithType,\n} from '../common/error';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TermsConditionsType } from '../termsConditions';\n\nimport mapSubmitOrderErrorMessage, { mapSubmitOrderErrorTitle } from './mapSubmitOrderErrorMessage';\nimport mapToOrderRequestBody from './mapToOrderRequestBody';\nimport PaymentContext from './PaymentContext';\nimport PaymentForm from './PaymentForm';\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodProviderType,\n} from './paymentMethod';\n\nexport interface PaymentProps {\n    errorLogger: ErrorLogger;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void; // TODO: We're currently doing this check in multiple places, perhaps we should move it up so this check get be done in a single place instead.\n    onCartChangedError?(error: CartChangedError): void;\n    onFinalize?(): void;\n    onFinalizeError?(error: Error): void;\n    onReady?(): void;\n    onSubmit?(): void;\n    onSubmitError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutPaymentProps {\n    availableStoreCredit: number;\n    cartUrl: string;\n    defaultMethod?: PaymentMethod;\n    finalizeOrderError?: Error;\n    isInitializingPayment: boolean;\n    isSubmittingOrder: boolean;\n    isStoreCreditApplied: boolean;\n    isTermsConditionsRequired: boolean;\n    methods: PaymentMethod[];\n    shouldExecuteSpamCheck: boolean;\n    shouldLocaliseErrorMessages: boolean;\n    submitOrderError?: Error;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit: number;\n    applyStoreCredit(useStoreCredit: boolean): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n    finalizeOrderIfNeeded(): Promise<CheckoutSelectors>;\n    isPaymentDataRequired(): boolean;\n    loadCheckout(): Promise<CheckoutSelectors>;\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\n    submitOrder(values: OrderRequestBody): Promise<CheckoutSelectors>;\n    checkoutServiceSubscribe: CheckoutService['subscribe'];\n}\n\ninterface PaymentState {\n    didExceedSpamLimit: boolean;\n    isReady: boolean;\n    selectedMethod?: PaymentMethod;\n    shouldDisableSubmit: { [key: string]: boolean };\n    shouldHidePaymentSubmitButton: { [key: string]: boolean };\n    submitFunctions: { [key: string]: ((values: PaymentFormValues) => void) | null };\n    validationSchemas: { [key: string]: ObjectSchema<Partial<PaymentFormValues>> | null };\n}\n\nclass Payment extends Component<\n    PaymentProps & WithCheckoutPaymentProps & WithLanguageProps & AnalyticsContextProps,\n    PaymentState\n> {\n    state: PaymentState = {\n        didExceedSpamLimit: false,\n        isReady: false,\n        shouldDisableSubmit: {},\n        shouldHidePaymentSubmitButton: {},\n        validationSchemas: {},\n        submitFunctions: {},\n    };\n\n    private grandTotalChangeUnsubscribe?: () => void;\n\n    private getContextValue = memoizeOne(() => {\n        return {\n            disableSubmit: this.disableSubmit,\n            setSubmit: this.setSubmit,\n            setValidationSchema: this.setValidationSchema,\n            hidePaymentSubmitButton: this.hidePaymentSubmitButton,\n        };\n    });\n\n    async componentDidMount(): Promise<void> {\n        const {\n            finalizeOrderIfNeeded,\n            onFinalize = noop,\n            onFinalizeError = noop,\n            onReady = noop,\n            usableStoreCredit,\n            checkoutServiceSubscribe,\n        } = this.props;\n\n        if (usableStoreCredit) {\n            this.handleStoreCreditChange(true);\n        }\n\n        await this.loadPaymentMethodsOrThrow();\n\n        try {\n            const state = await finalizeOrderIfNeeded();\n            const order = state.data.getOrder();\n\n            onFinalize(order?.orderId);\n        } catch (error) {\n            if (isErrorWithType(error) && error.type !== 'order_finalization_not_required') {\n                onFinalizeError(error);\n            }\n        }\n\n        this.grandTotalChangeUnsubscribe = checkoutServiceSubscribe(\n            () => this.handleCartTotalChange(),\n            ({ data }) => data.getCheckout()?.grandTotal,\n            ({ data }) => data.getCheckout()?.outstandingBalance,\n        );\n\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        this.setState({ isReady: true });\n        onReady();\n    }\n\n    componentDidUpdate(): void {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        checkEmbeddedSupport(methods.map(({ id }) => id));\n    }\n\n    componentWillUnmount(): void {\n        if (this.grandTotalChangeUnsubscribe) {\n            this.grandTotalChangeUnsubscribe();\n            this.grandTotalChangeUnsubscribe = undefined;\n        }\n\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n    }\n\n    render(): ReactNode {\n        const {\n            defaultMethod,\n            finalizeOrderError,\n            isInitializingPayment,\n            isUsingMultiShipping,\n            methods,\n            applyStoreCredit,\n            ...rest\n        } = this.props;\n\n        const {\n            didExceedSpamLimit,\n            isReady,\n            selectedMethod = defaultMethod,\n            shouldDisableSubmit,\n            validationSchemas,\n            shouldHidePaymentSubmitButton,\n        } = this.state;\n\n        const uniqueSelectedMethodId =\n            selectedMethod && getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway);\n\n        return (\n            <PaymentContext.Provider value={this.getContextValue()}>\n                <ChecklistSkeleton isLoading={!isReady}>\n                    {!isEmpty(methods) && defaultMethod && (\n                        <PaymentForm\n                            {...rest}\n                            defaultGatewayId={defaultMethod.gateway}\n                            defaultMethodId={defaultMethod.id}\n                            didExceedSpamLimit={didExceedSpamLimit}\n                            isInitializingPayment={isInitializingPayment}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            methods={methods}\n                            onMethodSelect={this.setSelectedMethod}\n                            onStoreCreditChange={this.handleStoreCreditChange}\n                            onSubmit={this.handleSubmit}\n                            onUnhandledError={this.handleError}\n                            selectedMethod={selectedMethod}\n                            shouldDisableSubmit={\n                                (uniqueSelectedMethodId &&\n                                    shouldDisableSubmit[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            shouldHidePaymentSubmitButton={\n                                (uniqueSelectedMethodId &&\n                                    rest.isPaymentDataRequired() &&\n                                    shouldHidePaymentSubmitButton[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            validationSchema={\n                                (uniqueSelectedMethodId &&\n                                    validationSchemas[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                        />\n                    )}\n                </ChecklistSkeleton>\n\n                {this.renderOrderErrorModal()}\n                {this.renderEmbeddedSupportErrorModal()}\n            </PaymentContext.Provider>\n        );\n    }\n\n    private renderOrderErrorModal(): ReactNode {\n        const { finalizeOrderError, language, shouldLocaliseErrorMessages, submitOrderError } =\n            this.props;\n\n        // FIXME: Export correct TS interface\n        const error: any = submitOrderError || finalizeOrderError;\n\n        if (\n            !error ||\n            error.type === 'order_finalization_not_required' ||\n            error.type === 'payment_cancelled' ||\n            error.type === 'payment_invalid_form' ||\n            error.type === 'spam_protection_not_completed' ||\n            error.type === 'invalid_hosted_form_value'\n        ) {\n            return null;\n        }\n\n        return (\n            <ErrorModal\n                error={error}\n                message={mapSubmitOrderErrorMessage(\n                    error,\n                    language.translate.bind(language),\n                    shouldLocaliseErrorMessages,\n                )}\n                onClose={this.handleCloseModal}\n                title={mapSubmitOrderErrorTitle(error, language.translate.bind(language))}\n            />\n        );\n    }\n\n    private renderEmbeddedSupportErrorModal(): ReactNode {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        try {\n            checkEmbeddedSupport(methods.map(({ id }) => id));\n        } catch (error) {\n            if (error instanceof Error) {\n                return <ErrorModal error={error} onClose={this.handleCloseModal} />;\n            }\n        }\n\n        return null;\n    }\n\n    private disableSubmit: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldDisableSubmit } = this.state;\n\n        if (shouldDisableSubmit[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldDisableSubmit: {\n                ...shouldDisableSubmit,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private hidePaymentSubmitButton: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldHidePaymentSubmitButton } = this.state;\n\n        if (shouldHidePaymentSubmitButton[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldHidePaymentSubmitButton: {\n                ...shouldHidePaymentSubmitButton,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private handleBeforeUnload: (event: BeforeUnloadEvent) => string | undefined = (event) => {\n        const { defaultMethod, isSubmittingOrder, language } = this.props;\n        const { selectedMethod = defaultMethod } = this.state;\n\n        if (\n            !isSubmittingOrder ||\n            !selectedMethod ||\n            selectedMethod.type === PaymentMethodProviderType.Hosted ||\n            selectedMethod.type === PaymentMethodProviderType.PPSDK ||\n            selectedMethod.skipRedirectConfirmationAlert\n        ) {\n            return;\n        }\n\n        const message = language.translate('common.leave_warning');\n\n        event.returnValue = message;\n\n        return message;\n    };\n\n    private handleCloseModal: (event: Event, props: ErrorModalOnCloseProps) => Promise<void> =\n        async (_, { error }) => {\n            if (!error) {\n                return;\n            }\n\n            const { cartUrl, clearError, loadCheckout } = this.props;\n            const { type: errorType } = error as any; // FIXME: Export correct TS interface\n\n            if (\n                errorType === 'provider_fatal_error' ||\n                errorType === 'order_could_not_be_finalized_error'\n            ) {\n                window.location.replace(cartUrl || '/');\n            }\n\n            if (errorType === 'tax_provider_unavailable') {\n                window.location.reload();\n            }\n\n            if (errorType === 'cart_consistency') {\n                await loadCheckout();\n            }\n\n            if (isErrorWithType(error) && error.body) {\n                const { body, headers, status } = error;\n\n                if (body.type === 'provider_error' && headers.location) {\n                    window.top?.location.assign(headers.location);\n                }\n\n                // Reload the checkout object to get the latest `shouldExecuteSpamCheck` value,\n                // which will in turn make `SpamProtectionField` visible again.\n                // NOTE: As a temporary fix, we're checking the status code instead of the error\n                // type because of an issue with Nginx config, which causes the server to return\n                // HTML page instead of JSON response when there is a 429 error.\n                if (\n                    status === 429 ||\n                    body.type === 'spam_protection_expired' ||\n                    body.type === 'spam_protection_failed'\n                ) {\n                    this.setState({ didExceedSpamLimit: true });\n\n                    await loadCheckout();\n                }\n            }\n\n            clearError(error);\n        };\n\n    private handleStoreCreditChange: (useStoreCredit: boolean) => void = async (useStoreCredit) => {\n        const { applyStoreCredit, onUnhandledError = noop } = this.props;\n\n        try {\n            await applyStoreCredit(useStoreCredit);\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    };\n\n    private handleError: (error: Error) => void = (error: Error) => {\n        const { onUnhandledError = noop, errorLogger } = this.props;\n\n        const { type } = error as any;\n\n        if (type === 'unexpected_detachment') {\n            errorLogger.log(error);\n\n            return;\n        }\n\n        return onUnhandledError(error);\n    };\n\n    private handleSubmit: (values: PaymentFormValues) => void = async (values) => {\n        const {\n            defaultMethod,\n            loadPaymentMethods,\n            isPaymentDataRequired,\n            onCartChangedError = noop,\n            onSubmit = noop,\n            onSubmitError = noop,\n            submitOrder,\n            analyticsTracker\n        } = this.props;\n\n        const { selectedMethod = defaultMethod, submitFunctions } = this.state;\n\n        analyticsTracker.clickPayButton({shouldCreateAccount: values.shouldCreateAccount});\n\n        const customSubmit =\n            selectedMethod &&\n            submitFunctions[getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway)];\n\n        if (customSubmit) {\n            return customSubmit(values);\n        }\n\n        try {\n            const state = await submitOrder(mapToOrderRequestBody(values, isPaymentDataRequired()));\n            const order = state.data.getOrder();\n\n            analyticsTracker.paymentComplete();\n\n            onSubmit(order?.orderId);\n        } catch (error) {\n            analyticsTracker.paymentRejected();\n\n            if (isErrorWithType(error) && error.type === 'payment_method_invalid') {\n                return loadPaymentMethods();\n            }\n\n            if (isCartChangedError(error)) {\n                return onCartChangedError(error);\n            }\n\n            onSubmitError(error);\n        }\n    };\n\n    private setSelectedMethod: (method?: PaymentMethod) => void = (method) => {\n        const { selectedMethod } = this.state;\n\n        if (selectedMethod === method) {\n            return;\n        }\n\n        if (method) {\n            this.trackSelectedPaymentMethod(method);\n        }\n\n        this.setState({ selectedMethod: method });\n    };\n\n    private setSubmit: (\n        method: PaymentMethod,\n        fn: (values: PaymentFormValues) => void | null,\n    ) => void = (method, fn) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { submitFunctions } = this.state;\n\n        if (submitFunctions[uniqueId] === fn) {\n            return;\n        }\n\n        this.setState({\n            submitFunctions: {\n                ...submitFunctions,\n                [uniqueId]: fn,\n            },\n        });\n    };\n\n    private setValidationSchema: (\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ) => void = (method, schema) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { validationSchemas } = this.state;\n\n        if (validationSchemas[uniqueId] === schema) {\n            return;\n        }\n\n        this.setState({\n            validationSchemas: {\n                ...validationSchemas,\n                [uniqueId]: schema,\n            },\n        });\n    };\n\n    private trackSelectedPaymentMethod(method: PaymentMethod) {\n        const { analyticsTracker } = this.props;\n\n        const methodName = method.config.displayName || method.id;\n        const methodId = method.id;\n\n        analyticsTracker.selectedPaymentMethod(methodName, methodId);\n    }\n\n    private async loadPaymentMethodsOrThrow(): Promise<void> {\n        const {\n            loadPaymentMethods,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await loadPaymentMethods();\n\n            const selectedMethod = this.state.selectedMethod || this.props.defaultMethod;\n\n            if (selectedMethod) {\n                this.trackSelectedPaymentMethod(selectedMethod);\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    private async handleCartTotalChange(): Promise<void> {\n        const { isReady } = this.state;\n\n        if (!isReady) {\n            return;\n        }\n\n        this.setState({ isReady: false });\n\n        await this.loadPaymentMethodsOrThrow();\n\n        this.setState({ isReady: true });\n    }\n}\n\nexport function mapToPaymentProps({\n        checkoutService,\n        checkoutState,\n}: CheckoutContextProps): WithCheckoutPaymentProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getOrder,\n            getPaymentMethod,\n            getPaymentMethods,\n            isPaymentDataRequired,\n            getPaymentProviderCustomer,\n        },\n        errors: { getFinalizeOrderError, getSubmitOrderError },\n        statuses: { isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const customer = getCustomer();\n    const consignments = getConsignments();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n\n    const { isComplete = false } = getOrder() || {};\n    let methods = getPaymentMethods() || EMPTY_ARRAY;\n\n    // TODO: In accordance with the checkout team, this functionality is temporary and will be implemented in the backend instead.\n    if (paymentProviderCustomer?.stripeLinkAuthenticationState) {\n        const stripeUpePaymentMethod = methods.filter(method =>\n            method.id === 'card' && method.gateway === PaymentMethodId.StripeUPE\n        );\n\n        methods = stripeUpePaymentMethod.length ? stripeUpePaymentMethod : methods;\n    }\n\n    if (!checkout || !config || !customer || isComplete) {\n        return null;\n    }\n\n    const {\n        enableTermsAndConditions: isTermsConditionsEnabled,\n        features,\n        orderTermsAndConditionsType: termsConditionsType,\n        orderTermsAndConditions: termsCondtitionsText,\n        orderTermsAndConditionsLink: termsCondtitionsUrl,\n    } = config.checkoutSettings as CheckoutSettings & { orderTermsAndConditionsLocation: string };\n\n    const isTermsConditionsRequired = isTermsConditionsEnabled;\n    const selectedPayment = find(checkout.payments, {\n        providerType: PaymentMethodProviderType.Hosted,\n    });\n\n    const { isStoreCreditApplied } = checkout;\n\n    let selectedPaymentMethod;\n    let filteredMethods;\n\n    filteredMethods = methods.filter((method: PaymentMethod) => {\n        if (method.id === PaymentMethodId.Bolt && method.initializationData) {\n            return !!method.initializationData.showInCheckout;\n        }\n\n        if (method.id === PaymentMethodId.BraintreeLocalPaymentMethod) {\n            return false;\n        }\n\n        return true;\n    });\n\n    if (consignments && consignments.length > 1) {\n        const multiShippingIncompatibleMethodIds: string[] = [\n            PaymentMethodId.AmazonPay,\n        ];\n\n        filteredMethods = methods.filter((method: PaymentMethod) => {\n            return !multiShippingIncompatibleMethodIds.includes(method.id);\n        });\n    }\n\n    if (selectedPayment) {\n        selectedPaymentMethod = getPaymentMethod(\n            selectedPayment.providerId,\n            selectedPayment.gatewayId,\n        );\n        filteredMethods = selectedPaymentMethod\n            ? compact([selectedPaymentMethod])\n            : filteredMethods;\n    } else {\n        selectedPaymentMethod = find(filteredMethods, {\n            config: { hasDefaultStoredInstrument: true },\n        });\n        // eslint-disable-next-line no-self-assign\n        filteredMethods = filteredMethods;\n    }\n\n    return {\n        applyStoreCredit: checkoutService.applyStoreCredit,\n        availableStoreCredit: customer.storeCredit,\n        cartUrl: config.links.cartLink,\n        clearError: checkoutService.clearError,\n        defaultMethod: selectedPaymentMethod || filteredMethods[0],\n        finalizeOrderError: getFinalizeOrderError(),\n        finalizeOrderIfNeeded: checkoutService.finalizeOrderIfNeeded,\n        loadCheckout: checkoutService.loadCheckout,\n        isInitializingPayment: isInitializingPayment(),\n        isPaymentDataRequired,\n        isStoreCreditApplied,\n        isSubmittingOrder: isSubmittingOrder(),\n        isTermsConditionsRequired,\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\n        methods: filteredMethods,\n        shouldExecuteSpamCheck: checkout.shouldExecuteSpamCheck,\n        shouldLocaliseErrorMessages:\n            features['PAYMENTS-6799.localise_checkout_payment_error_messages'],\n        submitOrder: checkoutService.submitOrder,\n        submitOrderError: getSubmitOrderError(),\n        checkoutServiceSubscribe: checkoutService.subscribe,\n        termsConditionsText:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.TextArea\n                ? termsCondtitionsText\n                : undefined,\n        termsConditionsUrl:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.Link\n                ? termsCondtitionsUrl\n                : undefined,\n        usableStoreCredit:\n            checkout.grandTotal > 0 ? Math.min(checkout.grandTotal, customer.storeCredit || 0) : 0,\n    };\n}\n\nexport default withAnalytics(withLanguage(withCheckout(mapToPaymentProps)(Payment)));\n","import { OrderPaymentRequestBody, OrderRequestBody } from '@bigcommerce/checkout-sdk';\nimport { isEmpty, isNil, omitBy } from 'lodash';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { unformatCreditCardExpiryDate, unformatCreditCardNumber } from './creditCard';\nimport {\n    hasCreditCardExpiry,\n    hasCreditCardNumber,\n    parseUniquePaymentMethodId,\n} from './paymentMethod';\n\nexport default function mapToOrderRequestBody(\n    values: PaymentFormValues,\n    isPaymentDataRequired: boolean,\n): OrderRequestBody {\n    if (!isPaymentDataRequired) {\n        return {};\n    }\n\n    const { paymentProviderRadio, ...rest } = values;\n    const { methodId, gatewayId } = parseUniquePaymentMethodId(paymentProviderRadio);\n    const payload: OrderRequestBody = {\n        payment: { gatewayId, methodId },\n    };\n    const paymentData = omitBy(\n        {\n            ...rest,\n            ccExpiry: hasCreditCardExpiry(values)\n                ? unformatCreditCardExpiryDate(values.ccExpiry)\n                : null,\n            ccNumber: hasCreditCardNumber(values)\n                ? unformatCreditCardNumber(values.ccNumber)\n                : null,\n        },\n        isNil,\n    ) as OrderPaymentRequestBody['paymentData'];\n\n    if (payload.payment && !isEmpty(paymentData)) {\n        payload.payment.paymentData = paymentData;\n    }\n\n    return payload;\n}\n","import { CartChangedError } from '@bigcommerce/checkout-sdk';\n\nexport default function isCartChangedError(error: unknown): error is CartChangedError {\n    const requestError = error as CartChangedError;\n\n    return requestError.type === 'cart_changed';\n}\n","import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import React, {\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactElement,\n    ReactNode,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler<HTMLDivElement> }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nconst ModalTrigger = ({ children, modal }: ModalTriggerProps): ReactElement => {\n    const [isOpen, setIsOpen] = useState(false);\n    const canHandleEventRef = useRef(false);\n\n    useEffect(() => {\n        canHandleEventRef.current = true;\n\n        return () => {\n            canHandleEventRef.current = false;\n        };\n    }, []);\n\n    const handleOpen = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(true);\n    };\n\n    const handleClose = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(false);\n    };\n\n    const handleKeyOpen = (keyboardEvent: KeyboardEvent<HTMLElement>): void => {\n        if (keyboardEvent.key === 'Enter') {\n            handleOpen();\n        }\n    };\n\n    return (\n        <>\n            {children({\n                onClick: handleOpen,\n                onKeyPress: handleKeyOpen,\n            })}\n\n            {modal({\n                isOpen,\n                onRequestClose: handleClose,\n            })}\n        </>\n    );\n};\n\nexport default ModalTrigger;\n","import {\n    AdyenValidationState,\n    CardInstrument,\n    LanguageService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV2CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n    language?: LanguageService;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV2CardValidation: FunctionComponent<AdyenV2CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n    language,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        {language?.translate(\n                            'payment.instrument_trusted_shipping_address_title_text',\n                        )}\n                    </strong>\n\n                    <br />\n\n                    {language?.translate('payment.instrument_trusted_shipping_address_text')}\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            {language?.translate('payment.credit_card_number_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            {language?.translate('payment.credit_card_cvv_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            {language?.translate('payment.credit_card_expiration_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV2CardValidation;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentMethodProps, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport type AdyenV2FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    showAdditionalActionContent: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV2Form: FunctionComponent<AdyenV2FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    showAdditionalActionContent,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    onUnhandledError,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    ...rest\n}) => {\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired },\n        },\n    } = useCheckout();\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={showAdditionalActionContent}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!showAdditionalActionContent && (\n                <div id={additionalActionContainerId} style={{ display: 'none' }} />\n            )}\n        </>\n    );\n};\n\nexport default AdyenV2Form;\n","import {\n    AdyenCreditCardComponentOptions,\n    AdyenIdealComponentOptions,\n    AdyenValidationState,\n    CardInstrument,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV2CardValidation from './AdyenV2CardValidation';\nimport AdyenV2Form from './AdyenV2Form';\n\nexport interface AdyenOptions {\n    scheme: AdyenCreditCardComponentOptions;\n    bcmc: AdyenCreditCardComponentOptions;\n    ideal: AdyenIdealComponentOptions;\n}\n\nexport enum AdyenV2PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    ideal = 'ideal',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n    const [showAdditionalActionContent, setShowAdditionalActionContent] = useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const threeDS2ContainerId = `adyen-${method.id}-additional-action-component-field`;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const component = method.id as AdyenV2PaymentMethodType;\n    const shouldHideInstrumentExpiryDate = component === AdyenV2PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShowAdditionalActionContent(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setShowAdditionalActionContent(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setShowAdditionalActionContent(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n            const adyenOptions: AdyenOptions = {\n                [AdyenV2PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n                [AdyenV2PaymentMethodType.bcmc]: {\n                    hasHolderName: false,\n                },\n                [AdyenV2PaymentMethodType.ideal]: {\n                    showImage: true,\n                },\n            };\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv2: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    threeDS2ContainerId,\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            threeDS2ContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV2CardValidation\n                cardValidationState={cardValidationState}\n                language={language}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV2Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                language={language}\n                                method={method}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                showAdditionalActionContent={showAdditionalActionContent}\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV2PaymentMethod,\n    [{ gateway: 'adyenv2' }],\n);\n","import { FormFieldOptions } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectSelectFieldProps {\n    labelContent: string;\n    name: string;\n    options: FormFieldOptions;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectSelectField: FunctionComponent<BlueSnapDirectSelectFieldProps> = ({\n    options: { helperLabel, items, rows },\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderSelect = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                fieldType={DynamicFormFieldType.DROPDOWM}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                options={items}\n                placeholder={helperLabel}\n                rows={rows}\n            />\n        ),\n        [helperLabel, items, rows, useFloatingLabel],\n    );\n\n    return <FormField {...rest} input={renderSelect} />;\n};\n\nexport default memo(BlueSnapDirectSelectField);\n","import { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaV2Payment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarnav2: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaV2PaymentMethod,\n    [{ gateway: 'klarna' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AfterpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AfterpayPaymentMethod,\n    [{ gateway: 'afterpay' }],\n);\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config && method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface TextFieldProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nexport interface TextFieldFormProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nconst TextField: FunctionComponent<TextFieldProps> = (props) => {\n    const { additionalClassName, autoComplete, labelId, name } = props;\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <TextInput {...field} autoComplete={autoComplete} id={field.name} />\n        ),\n        [autoComplete],\n    );\n\n    const labelContent = useMemo(() => <TranslatedString id={labelId} />, [labelId]);\n\n    return (\n        <FormField\n            additionalClassName={additionalClassName}\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nconst TextFieldForm: FunctionComponent<TextFieldFormProps> = ({\n    additionalClassName,\n    autoComplete,\n    labelId,\n    name,\n}) => (\n    <Fieldset>\n        <div className=\"form-ccFields\">\n            <TextField\n                additionalClassName={additionalClassName}\n                autoComplete={autoComplete}\n                labelId={labelId}\n                name={name}\n            />\n        </div>\n    </Fieldset>\n);\n\nexport default memo(TextFieldForm);\n","import { BillingAddress, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, {\n    FunctionComponent,\n    SyntheticEvent,\n    useCallback,\n    useContext,\n    useEffect,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nimport TextFieldForm from './checkoutcomFieldsets/TextFieldForm';\n\ninterface CheckoutcomAPMFormProps {\n    method: PaymentMethod;\n    debtor: BillingAddress;\n}\n\ninterface Issuer {\n    bic: string;\n    name: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: string;\n}\n\ninterface DropdownButtonProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface OptionButtonProps {\n    className?: string;\n    issuer: Issuer;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\ninterface SepaCreditor {\n    sepaCreditorAddress: string;\n    sepaCreditorCity: string;\n    sepaCreditorCompanyName: string;\n    sepaCreditorCountry: string;\n    sepaCreditorIdentifier: string;\n    sepaCreditorPostalCode: string;\n}\n\nconst Sepa: FunctionComponent<CheckoutcomAPMFormProps> = ({ method, debtor }) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const creditor: SepaCreditor = method.initializationData.sepaCreditor;\n\n    useEffect(() => {\n        paymentContext?.paymentForm.disableSubmit(method, true);\n\n        return () => paymentContext?.paymentForm.disableSubmit(method, false);\n    }, [paymentContext, method]);\n\n    function toggleSubmitButton(isChecked: boolean) {\n        paymentContext?.paymentForm.disableSubmit(method, !isChecked);\n    }\n\n    return (\n        <>\n            <div className=\"checkoutcom-sepa-column-container\">\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_creditor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{creditor.sepaCreditorCompanyName}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorAddress}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${creditor.sepaCreditorPostalCode} ${creditor.sepaCreditorCity}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorCountry}</p>\n                    <br />\n                    <p className=\"checkoutcom-sepa-line\">\n                        <TranslatedString\n                            data={{ creditorId: creditor.sepaCreditorIdentifier }}\n                            id=\"payment.checkoutcom_sepa_creditor_id\"\n                        />\n                    </p>\n                </div>\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_debtor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{`${debtor.firstName} ${debtor.lastName}`}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.address1}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${debtor.postalCode} ${debtor.city}, ${debtor.stateOrProvinceCode}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.countryCode}</p>\n                </div>\n            </div>\n            <p className=\"checkoutcom-sepa-line\">\n                <TranslatedString id=\"payment.checkoutcom_sepa_payment_type\" />\n            </p>\n            <br />\n\n            <TextFieldForm\n                additionalClassName=\"form-field--iban\"\n                autoComplete=\"iban\"\n                labelId=\"payment.sepa_account_number\"\n                name=\"iban\"\n            />\n            <CheckboxFormField\n                labelContent={\n                    <TranslatedString\n                        data={{ creditorName: creditor.sepaCreditorCompanyName }}\n                        id=\"payment.checkoutcom_sepa_mandate_disclaimer\"\n                    />\n                }\n                name=\"sepaMandate\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onChange={toggleSubmitButton}\n            />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    form,\n    selectedIssuer,\n}) => {\n    const Input = useCallback(() => <input {...restField} type=\"hidden\" />, [restField]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void form.setFieldValue(restField.name, selectedIssuer);\n    }, [value, form, selectedIssuer, restField.name]);\n\n    return <Input />;\n};\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...restProps }) => {\n    const { bic, name } = issuer;\n\n    return (\n        <button data-bic={bic} type=\"button\" {...restProps}>\n            <div className=\"instrumentSelect-details\">{`${bic} / ${name}`}</div>\n        </button>\n    );\n};\n\nconst DropdownButton: FunctionComponent<DropdownButtonProps> = ({ selectedIssuer }) => {\n    if (!selectedIssuer) {\n        return (\n            <button\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                type=\"button\"\n            >\n                <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n                    <div className=\"instrumentSelect-card\">Your bank</div>\n                </div>\n            </button>\n        );\n    }\n\n    return (\n        <OptionButton\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            issuer={selectedIssuer}\n        />\n    );\n};\n\nconst Fawry: FunctionComponent<CheckoutcomAPMFormProps> = () => {\n    return (\n        <>\n            <TextFieldForm\n                additionalClassName=\"form-field--customerMobile\"\n                autoComplete=\"tel\"\n                labelId=\"payment.checkoutcom_fawry_customer_mobile_label\"\n                name=\"customerMobile\"\n            />\n            <TextFieldForm\n                additionalClassName=\"form-field--customerEmail\"\n                autoComplete=\"email\"\n                labelId=\"payment.checkoutcom_fawry_customer_email_label\"\n                name=\"customerEmail\"\n            />\n        </>\n    );\n};\n\nconst Ideal: FunctionComponent<CheckoutcomAPMFormProps> = ({ method }) => {\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer | undefined>();\n    const [bicValue, setBicValue] = useState<string>('');\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={bicValue} />,\n        [bicValue],\n    );\n\n    const issuers: Issuer[] = method.initializationData.idealIssuers;\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        // eslint-disable-next-line no-underscore-dangle\n        const _selectedIssuer = issuers.find(({ bic }) => bic === currentTarget.dataset.bic);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n        setBicValue(_selectedIssuer.bic);\n    };\n\n    const issuersList = (\n        <ul className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\">\n            {issuers.map((issuer) => (\n                <li className=\"instrumentSelect-option dropdown-menu-item\" key={issuer.bic}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <DropdownButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"bic\" />\n        </>\n    );\n};\n\nconst checkoutcomCustomFormFields: CheckoutcomCustomFormFields = {\n    fawry: Fawry,\n    sepa: Sepa,\n    ideal: Ideal,\n};\n\ninterface CheckoutcomCustomFormFields {\n    [key: string]: React.FunctionComponent<CheckoutcomAPMFormProps>;\n}\n\nexport const ccDocumentField = ({ method }: CheckoutcomAPMFormProps) => (\n    <TextFieldForm\n        additionalClassName=\"form-field--ccDocument\"\n        autoComplete=\"cc-document\"\n        labelId={`payment.checkoutcom_document_label_${method.id}`}\n        name=\"ccDocument\"\n    />\n);\n\nexport default checkoutcomCustomFormFields;\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport checkoutcomCustomFormFields, { ccDocumentField } from './CheckoutcomCustomFormFields';\nimport { checkoutcomPaymentMethods, getCheckoutcomValidationSchemas } from './checkoutcomFieldsets';\nimport { checkoutcomPaymentMethodsArray } from './checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas';\n\nexport interface CheckoutcomCustomPaymentMethodProps\n    extends Omit<CreditCardPaymentMethodProps, 'cardFieldset' | 'cardValidationSchema'> {\n    checkoutCustomMethod: string;\n}\n\nconst isCheckoutcomPaymentMethod = (methodId: string): methodId is checkoutcomPaymentMethods => {\n    return Object.values(checkoutcomPaymentMethodsArray).includes(methodId);\n};\nconst CheckoutcomCustomPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    method,\n    checkoutService,\n    checkoutState,\n    ...rest\n}) => {\n    const { getConfig } = checkoutState.data;\n    const isIdealHostedPageExperimentOn =\n        getConfig()?.checkoutSettings.features['PI-2979.checkoutcom_enable_ideal_hosted_page'];\n\n    const checkoutCustomMethod = method.id;\n    const CheckoutcomCustomFieldset =\n        checkoutCustomMethod in checkoutcomCustomFormFields\n            ? checkoutcomCustomFormFields[checkoutCustomMethod]\n            : ccDocumentField;\n\n    const billingAddress = checkoutState.data.getBillingAddress();\n\n    if (\n        !isCheckoutcomPaymentMethod(checkoutCustomMethod) ||\n        (checkoutCustomMethod === 'ideal' && isIdealHostedPageExperimentOn)\n    ) {\n        return null;\n    }\n\n    return (\n        <CreditCardPaymentMethodComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            {...rest}\n            cardFieldset={<CheckoutcomCustomFieldset debtor={billingAddress!} method={method} />}\n            cardValidationSchema={getCheckoutcomValidationSchemas({\n                paymentMethod: checkoutCustomMethod,\n                language,\n            })}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    CheckoutcomCustomPaymentMethod,\n    [\n        { gateway: 'checkoutcom', id: 'ideal' },\n        { gateway: 'checkoutcom', id: 'fawry' },\n        { gateway: 'checkoutcom', id: 'oxxo' },\n        { gateway: 'checkoutcom', id: 'boleto' },\n        { gateway: 'checkoutcom', id: 'sepa' },\n        { gateway: 'checkoutcom', id: 'qpay' },\n        { gateway: 'checkoutcom', id: 'p24' },\n    ],\n);\n","import {\n    CardInstrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { CreditCardPaymentMethodComponent } from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\ninterface WorldpayPaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst WorldpayCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const [threeDSecureVerification, setThreeDSecureVerification] = useState<HTMLElement>();\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const { getHostedStoredCardValidationFieldset } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const ref = useRef<WorldpayPaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const cancelWorldpayModalFlow = useCallback(() => {\n        setThreeDSecureVerification(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n    const initializeWorldpayPayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                creditCard: {\n                    form: getHostedFormOptions && (await getHostedFormOptions(selectedInstrument)),\n                },\n                worldpay: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setThreeDSecureVerification(content);\n                        ref.current.cancelThreeDSecureVerification = cancel;\n                    },\n                },\n            });\n        },\n        [checkoutService, getHostedFormOptions],\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (threeDSecureVerification) {\n            ref.current.paymentPageContentRef.current?.appendChild(threeDSecureVerification);\n        }\n    }, [threeDSecureVerification]);\n\n    return (\n        <>\n            <CreditCardPaymentMethodComponent\n                {...rest}\n                cardFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                cardValidationSchema={hostedValidationSchema}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeWorldpayPayment}\n                language={language}\n                method={method}\n                paymentForm={paymentForm}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n            <Modal\n                isOpen={!!threeDSecureVerification}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelWorldpayModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div ref={ref.current.paymentPageContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    WorldpayCreditCardPaymentMethod,\n    [{ id: 'worldpayaccess' }],\n);\n"],"names":["checkoutService","isEmbedded","rest","initializePaypalExpressPayment","useCallback","options","initializePayment","paypalexpress","useRedirectFlow","deinitializePayment","id","initializeBraintreePaypalPaymentMethod","defaultOptions","onUnhandledError","language","method","paymentForm","braintree","containerId","submitForm","setSubmitted","onError","error","message","Error","translate","onRenderButton","hidePaymentSubmitButton","checkoutState","initializationData","embeddedOneClickEnabled","memoize","bic","required","toResolvableComponent","setValidationSchema","idealIssuers","idealIssuersSelectOptions","map","issuer","value","issuerId","label","issuerName","initializeIdeal","getIdealValidationSchema","gatewayId","gateway","methodId","deinitializeIdeal","useEffect","Fieldset","legend","Legend","hidden","style","paddingBottom","BlueSnapDirectSelectField","labelContent","name","helperLabel","items","BraintreeAchFieldType","OwnershipTypes","AccountTypes","accountTypeOptions","Savings","Checking","ownershipTypeOptions","Personal","Business","defaultBraintreeAchFormFields","AccountType","custom","fieldType","DynamicFormFieldType","DROPDOWM","AccountNumber","max","min","RoutingNumber","OwnershipType","personalBraintreeAchFormFields","FirstName","LastName","businessBraintreeAchFormFields","BusinessName","currentInstrument","setCurrentInstrument","useState","customer","data","getCustomer","instruments","getInstruments","setFieldValue","accountInstruments","useMemo","filter","isAchInstrument","isInstrumentFeatureAvailable","isGuest","Boolean","config","isVaultingEnabled","shouldShowInstrumentFieldset","length","shouldCreateNewInstrument","shouldConfirmInstrument","trustedShippingAddress","getDefaultInstrument","defaultInstrument","undefined","handleSelectInstrument","find","bigpayToken","handleUseNewInstrument","getValidationSchema","formFields","getFieldValue","requiredFieldErrorTranslationIds","reduce","schema","matches","validateBraintreeAchForm","braintreeAchFormValues","accountNumber","businessName","routingNumber","ownershipType","firstName","lastName","validationSchema","isValidAccountNumber","isValidRoutingNumber","isValidFirstName","isValidLastName","isValidBusinessName","Promise","all","fields","isValid","isValidDepositoryName","resetFormValidation","getTranslatedLabelByFieldName","fieldName","braintreeAchFormLabelsMap","accountType","Object","values","includes","isBraintreeAchFormFieldName","fieldValues","handleChange","fieldId","field","DynamicFormField","extraClass","key","onChange","updateMandateText","getFormValues","fullName","String","depositoryName","outstandingBalance","getCheckout","storeName","getConfig","storeProfile","symbol","getCart","currency","mandateTextTranslationKey","formattedDate","Date","now","toJSON","slice","split","reverse","join","mandateTextTranslationProps","toLowerCase","currentDate","mandateText","className","CheckboxFormField","isValidForm","setIsValidForm","disableSubmit","getBillingAddress","defaultFormValues","shouldSaveInstrument","shouldSetAsDefaultInstrument","instrumentId","orderConsent","entries","resetFormValues","shouldShowForm","shouldShowMandateTextCheckbox","validate","mandateTextConfirmationCheckboxValue","AccountInstrumentFieldset","A","onSelectInstrument","onUseNewInstrument","selectedInstrument","TranslatedString","StoreInstrumentFieldset","isAccountInstrument","currentMandateTextRef","useRef","braintreeach","getMandateText","current","loadInstruments","isLoading","statuses","isLoadingInstruments","isLoadingPaymentMethod","formContextProps","isSubmitted","FormContext","Provider","CheckoutContext","LocaleProvider","PaymentFormContext","LoadingOverlay","hideContentWhenLoading","currentMandateText","memo","bodyClassName","children","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","onToggle","selectedItemId","useContext","AccordionContext","isSelected","transitionEndListener","node","done","addEventListener","target","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","props","Input","checked","type","Label","htmlFor","isDisabled","content","htmlId","kebabCase","Checklist","C","renderInput","memoizeOne","disabled","Function","selectedValue","renderHeaderContent","BasicFormField","render","placement","tooltip","shouldShow","setShouldShow","handleShow","handleHide","ref","onBlur","onFocus","onMouseEnter","onMouseLeave","modifiers","enabled","initializeBoltPayment","bolt","useBigCommerceCheckout","applepay","shippingLabel","subtotalLabel","PaymentMethodType","getPaymentMethodName","translations","PaymentMethodId","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","displayName","capitalize","get","onSignOut","href","onClick","preventDefault","providerName","formatAccountMask","accountMask","padding","object","card_information","cardData","isWalletButtonInitializationData","number","cardType","expiryMonth","expMonth","expiryYear","expYear","accountNum","card","expDate","substr","niceType","WalletButtonPaymentMethodComponent","Component","handleSignOut","signOutCustomer","noop","onSignOutError","this","window","location","reload","componentDidMount","toggleSubmit","componentWillUnmount","componentDidUpdate","prevProps","isPaymentDataRequired","getWalletButtonPaymentMethodDerivedProps","prevMethod","prevIsPaymentDataRequired","isInitializing","isPaymentSelected","renderPaymentView","renderSignInView","buttonId","signInButtonClassName","signInButtonLabel","editButtonClassName","editButtonLabel","shouldShowEditButton","cardName","billingAddress","checkout","walletPaymentData","some","payments","providerId","renderPayPalCardComponent","mapFromInstrumentCardType","brand","CreditCardIcon","last4","PoweredByPayPalFastlaneLabel","Button","result","size","Tiny","testId","variant","Secondary","showPayPalCardSelector","setSelectedInstrument","getPaymentProviderCustomer","paymentProviderCustomer","paypalFastlaneCustomer","instrument","useBraintreeFastlaneInstruments","shouldShowInstrumentsForm","paypalFastlaneComponentRef","isInitializingPayment","braintreefastlane","onInit","isAddingNewCard","setIsAddingNewCard","selectedInstrumentId","setSelectedInstrumentId","shouldShowCreditCardFieldset","getDefaultInstrumentId","defaultInstrumentId","CardInstrumentFieldset","onDeleteInstrument","display","tabIndex","getStylesFromElement","properties","container","document","querySelector","getAppliedStyles","copyStylesFromDummyFormFields","styleProps","default","input","focus","difference","mapToSquareStyles","styles","borderColor","borderRadius","borderWidth","borderColorIsFocus","borderWidthIsFocus","inputIsFocus","borderColorIsError","borderWidthIsError","color","colorIsError","squarev2","description","paymentDescriptor","paymentToken","initializeAmazonPayV2Payment","amazonpay","editButtonId","setSubmit","hideWidget","isInstrumentCardCodeRequired","isInstrumentCardNumberRequired","isSignInRequired","isSignedIn","shouldShowDescriptor","signOut","focusedFieldType","setFocusedFieldType","setFieldTouched","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","cardCode","showCardHolderName","isCardCodeRequired","isCardHolderNameRequired","getHostedFieldId","compact","getHostedFormOptions","styleContainerId","cardCodeVerification","accessibilityLabel","cardNumberVerification","cardExpiry","placeholder","cardNumber","Focus","onCardTypeChange","onEnter","onValidate","errors","forIn","fieldErrors","errorKey","hostedFieldset","additionalFields","requireCustomerCode","cardCodeId","cardExpiryId","cardNameId","cardNumberId","hostedValidationSchema","getHostedStoredCardValidationFieldset","initializeHostedCreditCardPayment","creditCard","form","hostedStoredCardValidationSchema","cardFieldset","cardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema","initializeVisaCheckoutPayment","mergedOptions","braintreevisacheckout","onPaymentSelect","reinitializePayment","BraintreeVisaCheckout","AdyenCardFields","getInitialValidationState","shouldShowNumberField","validationState","CardNumber","valid","SecurityCode","ExpiryDate","isFieldInvalid","fieldKey","fieldsValidation","verificationFieldsContainerId","paymentMethod","cardValidationState","setFieldsValidation","endDigits","showValidationIcon","transform","right","alt","src","UntrustedShippingCardVerificationType","shouldHideInstrumentExpiryDate","validateInstrument","shouldRenderAdditionalActionContentModal","isModalVisible","cancelAdditionalActionModalFlow","additionalActionContainerId","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","HostedWidgetPaymentComponent","hideContentWhenSignedOut","shouldRenderCustomInstrument","Modal","additionalBodyClassName","closeButtonLabel","isOpen","onRequestClose","shouldShowCloseButton","overlay","width","AdyenV3PaymentMethodType","shouldShowModal","setShouldRenderAdditionalActionContentModal","isAdditionalActionContentModalVisible","setIsAdditionalActionContentModalVisible","setCardValidationState","cardVerificationContainerId","component","bcmc","onBeforeLoad","shopperInteraction","onComplete","cancelAdditionalAction","onActionHandled","onLoad","cancel","initializeAdyenPayment","adyenOptions","scheme","hasHolderName","holderNameRequired","adyenv3","hasVaultedInstruments","additionalActionOptions","widgetSize","validateCardFields","state","isAddingNewInstrument","setIsAddingNewInstrument","derivedProps","filterAccountInstruments","filterTrustedInstruments","isUsingMultiShipping","isPaymentDataSubmitted","cart","currentMethodInstruments","trustedInstruments","isNewAddress","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","currentSelectedInstrument","coupon","code","giftCertificate","ShopperCurrency","amount","used","remaining","height","viewBox","xmlns","d","isRemoving","onRemove","AppliedCouponChecklistItem","onRemoved","handleRemove","AppliedGiftCertificateChecklistItem","coupons","giftCertificates","isRemovingCoupon","isRemovingGiftCertificate","onRemovedCoupon","onRemovedGiftCertificate","RedeemableForm","appliedRedeemableError","isApplyingRedeemable","clearError","isSubmittingOrder","themeV2","handleSubmitForm","handleKeyDown","event","keyCode","handleSubmit","renderLabel","renderErrorMessage","errorCode","errorMessage","Alert","TextInput","onKeyDown","renderContent","FormField","withLanguage","mapPropsToValues","redeemableCode","applyCoupon","applyGiftCertificate","trim","shouldCollapseCouponCode","showAppliedRedeemables","formProps","Toggle","openByDefault","toggle","initializeGooglePayPayment","loadingContainerId","AdyenV2GooglePay","walletButton","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BigCommercePaymentsGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","StripeGooglePay","StripeUPEGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","CheckoutcomGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay","createContext","unformatCreditCardNumber","separator","replace","RegExp","PaymentMethodProviderType","initializeMonerisPayment","paymentConfig","moneris","_shouldShowNumber","isLoadingIframe","setisLoadingIframe","paymentPageContent","setPaymentPageContent","paymentPageContentRef","createRef","cancelBlueSnapV2ModalFlow","cancelBlueSnapV2Payment","initializeBlueSnapV2Payment","bluesnapv2","border","appendPaymentPageContent","appendChild","additionalModalClassName","onAfterOpen","maxLength","useFloatingLabel","autoComplete","isFloatingLabelEnabled","HiddenInput","restField","selectedIssuer","_","helpers","setValue","IssuerSelectButton","OptionButton","image","size1x","issuers","paymentMethodsResponse","setSelectedIssuer","handleClick","currentTarget","_selectedIssuer","dataset","issuersList","DropdownTrigger","dropdown","isCreditCard","cardNumberElementOptions","cardHolderElementOptions","cardCvcElementOptions","TooltipTrigger","CreditCardCodeTooltip","IconHelp","cardExpiryElementOptions","MolliePaymentMethodType","paymentContext","localeContext","LocaleContext","getCreditCardInputStyles","HostedCreditCardValidation","initializeMolliePayment","mollieElements","getMolliesElementOptions","mollie","cardCvcId","cardHolderId","base","invalid","unsupportedMethodMessage","disableButton","creditcard","renderCustomPaymentForm","getHostedInstrumentValidationSchema","initializeKlarnaPayment","klarna","isBlueSnapDirectInitializationData","sepaCreditorCompanyName","array","Array","isArray","checkoutcomPaymentMethodsArray","checkoutComShemas","oxxo","ccDocument","qpay","notRequired","boleto","sepa","iban","sepaMandate","ideal","fawry","customerMobile","customerEmail","email","displayNamePrefix","isSepaInstrument","shouldRenderFields","setDisabled","toggleSubmitButton","shopperPermission","initializeSepa","deinitializeSepa","getSepaValidationSchema","BlueSnapDirectTextField","creditorName","mapToRedeemableProps","context","getCoupons","getGiftCertificates","isApplyingCoupon","isApplyingGiftCertificate","getApplyCouponError","getApplyGiftCertificateError","getRemoveCouponError","getRemoveGiftCertificateError","removeCoupon","removeGiftCertificate","removedRedeemableError","checkoutSettings","isCouponCodeCollapsed","braintreelocalmethods","buttonText","brandName","agreementTranslationOptions","privacyPolicyUrl","termsUrl","benefitsList","BoltCreateAccountCheckbox","TranslatedHtml","additionalClassName","showCreateAccountCheckbox","setShowCreateAccountCheckbox","boltEmbeddedContainerId","hasBoltAccount","isGuestCustomer","initializePayByBank","getPayByBankValidationSchema","deinitializePayByBank","BluesnapECPAccountType","DynamicInput","TELEPHONE","shouldRenderCompanyName","ConsumerChecking","ConsumerSavings","CorporateChecking","CorporateSavings","companyName","initializeEcp","deinitializeEcp","company","getEcpValidationSchema","defaultSelectedItemId","onSelect","setSelectedItemId","handleToggleItem","getContextValue","newSelectedItemId","ChecklistContext","connectFormik","formik","handleSelect","contextValue","forwardRef","body","header","renderModal","footer","Small","ModalTrigger","modal","line","Fragment","TermsConditionsType","TermsConditionsModalCheckboxField","terms","translatedLabel","url","parsedLabel","parseAnchor","ModalHeader","TermsConditionsCheckboxField","TermsConditionsTextField","defaultValue","readOnly","TextArea","isTermsConditionsTextArea","isTermsConditionModal","mapSubmitOrderErrorMessage","shouldLocalise","subtype","err","mapSubmitOrderErrorTitle","unformatCreditCardExpiryDate","month","year","test","getUniquePaymentMethodId","parseUniquePaymentMethodId","hasCreditCardNumber","hasCreditCardExpiry","TermsConditions","termsConditionsUrl","termsConditionsText","TermsConditionsField","Link","getPaymentValidationSchema","additionalValidation","isTermsConditionsRequired","schemaFields","paymentProviderRadio","schemaFieldsWithTerms","concat","oneOf","getTermsConditionsValidationSchema","BigCommercePaymentsPayLater","bigcommerce_payments_paylater","bannerContainerId","BraintreePaypalCredit","selectedCardType","cardTypes","filteredCardTypes","getPaymentMethodTitle","basePath","storeCountryCode","cdnPath","path","paymentWithLogo","methodsWithLogo","methodName","methodDisplayName","PaypalCommerceCredit","payPalCreditProductBrandName","credit","AdyenV2","AdyenV3","getPaymentMethodDisplayName","customTitles","CreditCard","logoUrl","titleText","BraintreeVenmo","subtitle","BraintreeAch","BraintreeLocalPaymentMethod","BigCommercePaymentsPayPal","BigCommercePaymentsAlternativeMethod","PaypalCommerce","PaypalCommerceAlternativeMethod","isExperimentEnabled","ApplePay","PayWithGoogle","Humm","enableBillie","Laybuy","Masterpass","Quadpay","Sezzle","Zip","Barclaycard","Mollie","Checkoutcom","StripeV3","StripeUPE","WorldpayAccess","BlueSnapDirect","PaypalCommerceVenmo","BigCommercePaymentsVenmo","PaypalPaymentsPro","Ratepay","withCheckout","cdnBasePath","getSubtitle","supportedCards","mapFromPaymentMethodCardType","instrumentSelected","provider","getInstrumentForMethod","hostedForm","ccNumber","getSelectedCardType","PaymentFormProvider","lazy","then","module","AdyenV2PaymentMethod","AdyenV3PaymentMethod","AffirmPaymentMethod","AfterpayPaymentMethod","AmazonPayV2PaymentMethod","ApplePayPaymentMethod","BarclaycardPaymentMethod","BigCommercePaymentsPaymentMethod","BigCommercePaymentsAPMsPaymentMethod","BigCommercePaymentsCreditCardsPaymentMethod","BigCommercePaymentsFastlanePaymentMethod","BigCommercePaymentsPayLaterPaymentMethod","BigCommercePaymentsVenmoPaymentMethod","BigCommercePaymentsRatePayPaymentMethod","BlueSnapDirectEcpPaymentMethod","BlueSnapDirectAlternativePaymentMethod","BlueSnapDirectSepaPaymentMethod","BlueSnapDirectIdealPaymentMethod","BlueSnapV2PaymentMethod","BlueSnapDirectPayByBankPaymentMethod","BoltClientPaymentMethod","BoltEmbeddedPaymentMethod","BoltPaymentMethod","BraintreeAchPaymentMethod","BraintreeFastlanePaymentMethod","BraintreePaypalPaymentMethod","VisaCheckoutPaymentMethod","CheckoutcomCustomPaymentMethod","ClearpayPaymentMethod","GooglePayPaymentMethod","HostedCreditCardPaymentMethod","HostedPaymentMethod","KlarnaPaymentMethod","KlarnaV2PaymentMethod","MolliePaymentMethod","MonerisPaymentMethod","OfflinePaymentMethod","PayPalCommerceAPMsPaymentMethod","PayPalCommerceCreditPaymentMethod","PayPalCommerceCreditCardsPaymentMethod","PayPalCommerceFastlanePaymentMethod","PayPalCommercePaymentMethod","PayPalCommerceVenmoPaymentMethod","PaypalCommerceRatePayPaymentMethod","PaypalExpressPaymentMethod","SquareV2PaymentMethod","StripeOCSPaymentMethod","StripeUPEPaymentMethod","StripeV3PaymentMethod","WorldpayCreditCardPaymentMethod","ComponentRegistry","BraintreeCreditCardPaymentMethod","MasterpassPaymentMethod","PaypalPaymentsProPaymentMethod","PPSDKPaymentMethod","deinitializeCustomer","initializeCustomer","PPSDK","Suspense","Braintree","Hosted","Api","withPayment","withForm","formikContext","formContext","ResolvedPaymentMethod","query","useLazyLoad","components","resolveLazyComponent","resolveComponent","resolvePaymentMethod","PaymentMethod","validateForm","createPaymentFormService","getPaymentMethodFromListValue","methods","PaymentMethodListItem","renderPaymentMethod","PaymentMethodV2","renderPaymentMethodTitle","isCustomChecklistItem","ChecklistItem","role","navigator","userAgent","redeemableProps","Redeemable","providersWithCustomClasses","PaymentSubmitButtonText","methodType","methodGateway","initialisationStrategyType","isComplete","IconBolt","BlueSnapV2","PaypalVenmo","continueActionId","continueTranslationId","completeTranslationId","isInitializingCustomer","isSubmitting","isFullWidth","Large","Action","SpamProtectionField","shouldShowRetryButton","handleRetry","verify","didExceedSpamLimit","isExecutingSpamCheck","executeSpamCheck","setState","isErrorWithType","withCurrency","availableStoreCredit","usableStoreCredit","isStoreCreditApplied","Tooltip","storeCredit","toCustomerCurrency","CheckboxInput","PaymentMethodSubmitButtonContainer","PaymentMethodListFieldset","onMethodSelect","resetForm","handlePaymentMethodSelect","updatedValues","ccCustomerCode","ccCvv","ccExpiry","ccName","shouldCreateAccount","Extension","region","paymentFormConfig","defaultGatewayId","defaultMethodId","onSubmit","omitBy","isNil","onStoreCreditChange","selectedMethod","shouldDisableSubmit","shouldHidePaymentSubmitButton","shouldExecuteSpamCheck","selectedMethodId","Form","initializationStrategy","Payment","isReady","validationSchemas","submitFunctions","uniqueId","handleBeforeUnload","defaultMethod","skipRedirectConfirmationAlert","returnValue","handleCloseModal","cartUrl","loadCheckout","errorType","headers","status","top","assign","handleStoreCreditChange","useStoreCredit","applyStoreCredit","e","handleError","errorLogger","log","loadPaymentMethods","onCartChangedError","onSubmitError","submitOrder","analyticsTracker","clickPayButton","customSubmit","payload","payment","paymentData","isEmpty","mapToOrderRequestBody","order","getOrder","paymentComplete","orderId","paymentRejected","isCartChangedError","setSelectedMethod","trackSelectedPaymentMethod","fn","finalizeOrderIfNeeded","onFinalize","onFinalizeError","onReady","checkoutServiceSubscribe","loadPaymentMethodsOrThrow","grandTotalChangeUnsubscribe","handleCartTotalChange","grandTotal","checkEmbeddedSupport","removeEventListener","finalizeOrderError","uniqueSelectedMethodId","PaymentContext","ChecklistSkeleton","renderOrderErrorModal","renderEmbeddedSupportErrorModal","shouldLocaliseErrorMessages","submitOrderError","ErrorModal","bind","onClose","title","selectedPaymentMethod","mapToPaymentProps","getConsignments","getPaymentMethod","getPaymentMethods","getFinalizeOrderError","getSubmitOrderError","consignments","stripeLinkAuthenticationState","stripeUpePaymentMethod","enableTermsAndConditions","isTermsConditionsEnabled","features","orderTermsAndConditionsType","termsConditionsType","orderTermsAndConditions","termsCondtitionsText","orderTermsAndConditionsLink","termsCondtitionsUrl","selectedPayment","providerType","filteredMethods","showInCheckout","multiShippingIncompatibleMethodIds","hasDefaultStoredInstrument","links","cartLink","subscribe","Math","withAnalytics","OriginalComponent","InnerComponent","prevFormik","nextFormik","nextProps","DecoratedComponent","setIsOpen","canHandleEventRef","handleOpen","onKeyPress","keyboardEvent","showAdditionalActionContent","AdyenV2PaymentMethodType","setShowAdditionalActionContent","threeDS2ContainerId","showImage","adyenv2","rows","renderSelect","initializeKlarnaV2Payment","klarnav2","TextField","labelId","restProps","DropdownButton","ccDocumentField","debtor","creditor","sepaCreditor","sepaCreditorAddress","sepaCreditorPostalCode","sepaCreditorCity","sepaCreditorCountry","creditorId","sepaCreditorIdentifier","address1","postalCode","city","stateOrProvinceCode","countryCode","isChecked","bicValue","setBicValue","isIdealHostedPageExperimentOn","checkoutCustomMethod","CheckoutcomCustomFieldset","CreditCardPaymentMethodComponent","threeDSecureVerification","setThreeDSecureVerification","cancelWorldpayModalFlow","cancelThreeDSecureVerification","initializeWorldpayPayment","worldpay"],"sourceRoot":""}