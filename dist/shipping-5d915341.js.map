{"version":3,"file":"shipping-5d915341.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/icon/IconHelp.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/shipping/hasPromotionalItems.tsx","webpack://checkout/./packages/core/src/app/common/form/withFormikExtended.tsx","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/ui/src/icon/IconEdit.tsx","webpack://checkout/./packages/core/src/app/shipping/GuestCustomerAddressSelector.tsx","webpack://checkout/./packages/core/src/app/shipping/utils/setRecommendedOrMissingShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentAddressSelector.tsx","webpack://checkout/./packages/core/src/app/shipping/ItemSplitTooltip.tsx","webpack://checkout/./packages/core/src/app/shipping/AllocatedItemsList.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItem.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItemsTable.tsx","webpack://checkout/./packages/core/src/app/shipping/MultishippingType.ts","webpack://checkout/./packages/core/src/app/shipping/AllocateItemsModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/hooks/useDeallocateItem.ts","webpack://checkout/./packages/core/src/app/shipping/utils/generateItemHash.tsx","webpack://checkout/./packages/core/src/app/shipping/hooks/useMultishippingConsignmentItems.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentLineItem.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsListItem.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ConsignmentListItem.tsx","webpack://checkout/./packages/core/src/app/shipping/isSelectedShippingOptionValid.ts","webpack://checkout/./packages/core/src/app/shipping/MultiShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/NewConsignment.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/ui/src/modal/ConfirmationModal.tsx","webpack://checkout/./packages/ui/src/icon/IconClose.tsx","webpack://checkout/./packages/ui/src/modal/Modal.tsx","webpack://checkout/./packages/ui/src/form/Fieldset/Fieldset.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronDown.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/ui/src/icon/IconError.tsx","webpack://checkout/./packages/ui/src/icon/IconSuccess.tsx","webpack://checkout/./packages/ui/src/icon/IconInfo.tsx","webpack://checkout/./packages/ui/src/alert/Alert.tsx","webpack://checkout/./packages/ui/src/modal/ModalHeader.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronUp.tsx","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/ui/src/tooltip/TooltipTrigger.tsx"],"sourcesContent":["import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","import { type Checkout, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.includes(preselectedPayment.providerId)) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.includes(providerWithCustomCheckout)\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { type Cart } from '@bigcommerce/checkout-sdk';\n\nexport default function hasPromotionalItems(cart: Cart): boolean {\n    const { digitalItems = [], physicalItems } = cart.lineItems;\n    \n    return [...digitalItems, ...physicalItems].filter((item) => item.addedByPromotion)?.length > 0;\n}\n","import {\n    type FormikProps,\n    type FormikValues,\n    withFormik,\n    type WithFormikConfig,\n} from 'formik';\nimport React, {\n    type ComponentType,\n    useEffect,\n    useRef,\n} from 'react';\n\nexport interface WithFormikExtendedProps {\n    isInitialValueLoaded?: boolean;\n}\n\n/**\n * This HOC extends the behavior of the default `withFormik` HOC. It can reset a form to its initial state when\n * the `isInitialValueLoaded` prop is set to true. This is useful when a form needs to be rendered before its\n * initial value is fully loaded.\n */\nexport default function withFormikExtended<\n    TOuterProps extends object,\n    TValues extends FormikValues = FormikValues,\n    TPayload = TValues\n>(\n    config: WithFormikConfig<TOuterProps, TValues, TPayload>\n) {\n    return (\n        OriginalComponent: ComponentType<TOuterProps & FormikProps<TValues>>\n    ) => {\n        const DecoratedComponent: ComponentType<\n            TOuterProps & FormikProps<TValues> & WithFormikExtendedProps\n        > = (props) => {\n            const { resetForm, isInitialValueLoaded, initialValues } = props;\n            const previousIsInitialValueLoadedRef = useRef(isInitialValueLoaded);\n\n            useEffect(() => {\n                if (\n                    previousIsInitialValueLoadedRef.current === false &&\n                    isInitialValueLoaded === true\n                ) {\n                    resetForm({ values: initialValues ?? {} });\n                }\n\n                previousIsInitialValueLoadedRef.current = isInitialValueLoaded;\n            }, [isInitialValueLoaded, initialValues, resetForm]);\n\n            return <OriginalComponent {...props} />;\n        };\n\n        DecoratedComponent.displayName = `WithFormikExtended(${\n            OriginalComponent.displayName || OriginalComponent.name\n        })`;\n\n        return withFormik(config)(DecoratedComponent);\n    };\n}\n","import { type Address, type Country, type FormField } from '@bigcommerce/checkout-sdk';\nimport { type FormikProps, withFormik } from 'formik';\nimport React, { type FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport mapAddressToFormValues, { type AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n    selectedAddress?: Address;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <Button\n                    onClick={onRequestClose}\n                    variant={ButtonVariant.Secondary}>\n                    <TranslatedString id=\"common.cancel_action\" />\n                </Button>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ getFields, selectedAddress }) => {\n            return mapAddressToFormValues(\n                getFields(selectedAddress && selectedAddress.countryCode),\n                selectedAddress,\n            )\n        },\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEdit: FunctionComponent = () => (\n    <svg fill=\"none\" height=\"20\" viewBox=\"0 0 20 20\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M2.49902 14.5511V17.0844C2.49902 17.3178 2.68236 17.5011 2.91569 17.5011H5.44902C5.55736 17.5011 5.66569 17.4594 5.74069 17.3761L14.8407 8.28444L11.7157 5.15944L2.62402 14.2511C2.54069 14.3344 2.49902 14.4344 2.49902 14.5511ZM17.2574 5.86777C17.5824 5.54277 17.5824 5.01777 17.2574 4.69277L15.3074 2.74277C14.9824 2.41777 14.4574 2.41777 14.1324 2.74277L12.6074 4.26777L15.7324 7.39277L17.2574 5.86777Z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEdit);\n","import { type Address } from '@bigcommerce/checkout-sdk';\nimport React from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconEdit, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport SingleLineStaticAddress from '../address/SingleLineStaticAddress';\n\ninterface GuestCustomerAddressSelectorProps {\n    onUseNewAddress(): void;\n    selectedAddress?: Address;\n}\n\nconst GuestCustomerAddressSelector = ({ onUseNewAddress, selectedAddress }: GuestCustomerAddressSelectorProps) => {\n    const { themeV2 } = useThemeContext();\n\n    return <div className='guest-consignment-line-item-header'>\n        {\n            !selectedAddress\n                ? <>\n                    <h3 className={themeV2 ? 'body-bold' : ''}>\n                        <TranslatedString id=\"shipping.guest_multishipping_no_shipping_address_message\" />\n                    </h3>\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"enter-shipping-address\"\n                        href=\"#\"\n                        onClick={preventDefault(onUseNewAddress)}\n                    >\n                        <TranslatedString id=\"shipping.guest_multishipping_enter_shipping_address_action\" />\n                    </a>\n                </>\n                : <>\n                    <SingleLineStaticAddress address={selectedAddress} />\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"edit-shipping-address\"\n                        href=\"#\"\n                        onClick={preventDefault(onUseNewAddress)}\n                    >\n                        <IconEdit />\n                    </a>\n                </>\n        }\n    </div>;\n}\n\nexport default GuestCustomerAddressSelector;\n","import { type CheckoutSelectors, type Consignment, type ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\n\nconst createShippingOptionsMap = (consignments: Consignment[]): Map<string, string | undefined> => {\n    return new Map(\n        consignments.map((consignment) => [consignment.id, consignment.selectedShippingOption?.id]),\n    );\n};\n\nexport const setRecommendedOrMissingShippingOption = async (\n    previousConsignment: Consignment[],\n    currentConsignments: Consignment[],\n    selectConsignmentShippingOption: (\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions<object>,\n    ) => Promise<CheckoutSelectors>,\n): Promise<void> => {\n    const previousShippingOptions = createShippingOptionsMap(previousConsignment);\n\n    for (const consignment of currentConsignments) {\n        if (!consignment.selectedShippingOption) {\n            const previousShippingOptionId = previousShippingOptions.get(consignment.id);\n\n            if (previousShippingOptionId) {\n                // eslint-disable-next-line no-await-in-loop\n                await selectConsignmentShippingOption(consignment.id, previousShippingOptionId);\n\n                continue;\n            }\n\n            const recommendedOption = consignment.availableShippingOptions?.find(\n                (option) => option.isRecommended,\n            );\n\n            if (recommendedOption) {\n                // eslint-disable-next-line no-await-in-loop\n                await selectConsignmentShippingOption(consignment.id, recommendedOption.id);\n            }\n        }\n    }\n};\n","import { type Address, type ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\nimport React, { useState } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { AddressFormModal, type AddressFormValues, AddressSelect, AddressType, isValidAddress, mapAddressFromFormValues } from \"../address\";\nimport { ErrorModal } from \"../common/error\";\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from \"../common/utility\";\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from \"./errors\";\nimport GuestCustomerAddressSelector from \"./GuestCustomerAddressSelector\";\nimport { type MultiShippingConsignmentData } from \"./MultishippingType\";\nimport { setRecommendedOrMissingShippingOption } from './utils';\n\ninterface ConsignmentAddressSelectorProps {\n    consignment?: MultiShippingConsignmentData;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    setConsignmentRequest?(consignmentRequest: ConsignmentCreateRequestBody): void;\n    selectedAddress?: Address;\n}\n\nconst ConsignmentAddressSelector = ({\n    consignment,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    selectedAddress,\n    setConsignmentRequest,\n}: ConsignmentAddressSelectorProps) => {\n    const [isOpenNewAddressModal, setIsOpenNewAddressModal] = useState(false);\n    const [createCustomerAddressError, setCreateCustomerAddressError] = useState<Error>();\n\n    const {\n        checkoutState: {\n            data: {\n                getShippingCountries,\n                getCustomer,\n                getConfig,\n                getConsignments: getPreviousConsignments,\n                getShippingAddressFields: getFields,\n            },\n        },\n        checkoutService: {\n            updateConsignment,\n            createCustomerAddress,\n            selectConsignmentShippingOption,\n        },\n    } = useCheckout();\n\n    const countries = getShippingCountries() || EMPTY_ARRAY;\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!config || !customer) {\n        return null;\n    }\n\n    const isFloatingLabelEnabledFlag = isFloatingLabelEnabled(config.checkoutSettings);\n    // TODO: add filter for addresses\n    const addresses = customer.addresses || EMPTY_ARRAY;\n    const {\n        checkoutSettings: {\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const isGuest = customer.isGuest;\n\n    const handleSelectAddress = async (address: Address) => {\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        if (!consignment) {\n            setConsignmentRequest?.({\n                address,\n                shippingAddress: address,\n                lineItems: [],\n            });\n\n            return;\n        }\n\n        try {\n            const {\n                data: { getConsignments },\n            } = await updateConsignment({\n                id: consignment.id,\n                address,\n                shippingAddress: address,\n                lineItems: consignment.lineItems.map(({ id, quantity }) => ({ itemId: id, quantity })),\n            });\n\n            const currentConsignments = getConsignments();\n\n            if (currentConsignments && currentConsignments.length > 0) {\n                await setRecommendedOrMissingShippingOption(\n                    getPreviousConsignments() ?? [],\n                    currentConsignments,\n                    selectConsignmentShippingOption,\n                );\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    }\n\n    const handleUseNewAddress = () => {\n        setIsOpenNewAddressModal(true);\n    }\n\n    const handleCloseAddAddressForm = () => {\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleSaveAddress = async (addressFormValues: AddressFormValues) => {\n        const address = mapAddressFromFormValues(addressFormValues);\n\n        await handleSelectAddress(address);\n\n        if (!isGuest) {\n            try {\n                await createCustomerAddress(address);\n            } catch (error) {\n                if (error instanceof Error) {\n                    setCreateCustomerAddressError(error);\n                }\n            }\n        }\n\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleCloseErrorModal = () => {\n        setCreateCustomerAddressError(undefined);\n    }\n\n    return (\n        <>\n            <ErrorModal\n                error={createCustomerAddressError}\n                message={\n                    <>\n                        <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                        <TranslatedString id=\"customer.create_address_error\" />\n                    </>\n                }\n                onClose={handleCloseErrorModal}\n                shouldShowErrorCode={false}\n            />\n            <AddressFormModal\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabledFlag}\n                isLoading={isLoading}\n                isOpen={isOpenNewAddressModal}\n                onRequestClose={handleCloseAddAddressForm}\n                onSaveAddress={handleSaveAddress}\n                selectedAddress={isGuest ? selectedAddress : undefined}\n            />\n            {isGuest\n                ? <GuestCustomerAddressSelector\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={selectedAddress}\n                />\n                : <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    placeholderText={<TranslatedString id=\"shipping.choose_shipping_address\" />}\n                    selectedAddress={selectedAddress}\n                    showSingleLineAddress\n                    type={AddressType.Shipping}\n                />\n            }\n        </>\n    )\n}\n\nexport default ConsignmentAddressSelector;\n","import React, { type FunctionComponent } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { IconHelp, TooltipTrigger } from \"@bigcommerce/checkout/ui\";\n\nimport { Tooltip } from \"../ui/tooltip\";\nimport \"./ItemSplitTooltip.scss\";\n\nexport const ItemSplitTooltip: FunctionComponent = () => {\n    return (\n        <TooltipTrigger\n            placement=\"right-start\"\n            tooltip={\n                <Tooltip>\n                    <TranslatedString\n                        id=\"shipping.multishipping_item_split_tooltip_message\"\n                    />\n                </Tooltip>\n            }\n        >\n            <span className=\"item-split-tooltip\" data-test=\"split-item-tooltip\">\n                <IconHelp />\n            </span>\n        </TooltipTrigger>\n    )\n};\n","import React from \"react\";\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { IconClose } from \"../ui/icon\";\n\nimport { renderItemContent } from \"./ConsignmentLineItemDetail\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport { type MultiShippingTableData, type MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface AllocatedItemsListProps {\n    assignedItems: MultiShippingTableData;\n    onUnassignItem(itemToDelete: MultiShippingTableItemWithType): void;\n}\n\nconst AllocatedItemsList = ({ assignedItems, onUnassignItem }: AllocatedItemsListProps) => {\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <div className=\"allocated-line-items\">\n            <h3 className={themeV2 ? 'body-bold' : ''}>\n                <TranslatedString data={{ count: assignedItems.shippableItemsCount }} id=\"shipping.multishipping_item_allocated_message\" />\n                {assignedItems.hasSplitItems && (\n                    <ItemSplitTooltip />\n                )}\n            </h3>\n            <ul className=\"allocated-line-items-list\">\n                {assignedItems.lineItems.map(item => (\n                    <li key={item.id}>\n                        {renderItemContent(item, themeV2)}\n                        <span data-test={`remove-${item.id.toString()}-button`} onClick={() => onUnassignItem(item)}>\n                            <IconClose />\n                        </span>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default AllocatedItemsList;\n","import classNames from \"classnames\";\nimport React, { type FunctionComponent } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { FormField, TextInput } from \"../ui/form\";\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport { type MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface LeftToAllocateItemProps {\n    item: MultiShippingTableItemWithType;\n    error?: string;\n}\n\nconst LeftToAllocateItem: FunctionComponent<LeftToAllocateItemProps> = ({ item, error }: LeftToAllocateItemProps) => {\n    const isMobileView = isMobileViewUI();\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <tr>\n            <td className=\"left-to-allocate-item-name-container\">\n                <figure className=\"left-to-allocate-item-figure\">\n                    {item.imageUrl && <img alt={item.name} src={item.imageUrl} />}\n                </figure>\n                <div>\n                    <p className={classNames('left-to-allocate-item-name',\n                        { 'body-regular': themeV2 })}>\n                        {item.name}\n                    </p>\n                    {item.options?.map(option => (\n                        <p className={classNames('left-to-allocate-item-option',\n                            { 'sub-text-medium': themeV2 })}\n                            key={option.nameId}>\n                            {option.name}: {option.value}\n                        </p>\n                    ))}\n                </div>\n            </td>\n            {!isMobileView && <td className={themeV2 ? 'body-regular' : ''}>{item.quantity}</td>}\n            <td className={themeV2 ? 'body-regular' : ''}>\n                {isMobileView && <TranslatedString data={{ count: item.quantity }} id=\"shipping.multishipping_left_to_allocate_message\" />}\n                <FormField\n                    additionalClassName={error ? \"form-field--error\" : \"\"}\n                    input={({ field }) => <TextInput\n                        {...field}\n                        aria-label={`Quantity of ${item.name}`}\n                        disabled={item.quantity === 0}\n                        id={field.name}\n                        min={0}\n                        themeV2={themeV2}\n                        type=\"number\"\n                    />}\n                    name={item.id.toString()}\n                />\n            </td>\n        </tr>\n    );\n}\n\nexport default LeftToAllocateItem;\n","import { type FormikErrors } from \"formik\";\nimport React, { type FunctionComponent } from \"react\";\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport { type AllocateItemsModalFormValues } from \"./AllocateItemsModal\";\nimport LeftToAllocateItem from \"./LeftToAllocateItem\";\nimport { type MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface LeftToAllocateItemsTableProps {\n    items: MultiShippingTableItemWithType[];\n    formErrors: FormikErrors<AllocateItemsModalFormValues>;\n}\n\nconst LeftToAllocateItemsTable: FunctionComponent<LeftToAllocateItemsTableProps> = ({ items, formErrors }: LeftToAllocateItemsTableProps) => {\n    const isMobileView = isMobileViewUI();\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <table className=\"table left-to-allocate-items-table\">\n            <thead>\n                <tr>\n                    <th className={themeV2 ? 'body-medium' : ''}><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_item\" /></th>\n                    {!isMobileView && <th className={themeV2 ? 'body-medium' : ''}><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_left_to_allocate\" /></th>}\n                    <th className={themeV2 ? 'body-medium' : ''}><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_quantity\" /></th>\n                </tr>\n            </thead>\n            <tbody>\n                {items.map(item => (\n                    <LeftToAllocateItem\n                        error={formErrors[item.id.toString()]}\n                        item={item}\n                        key={item.id}\n                    />\n                ))}\n            </tbody>\n        </table>\n    );\n}\n\nexport default LeftToAllocateItemsTable;\n","import { type Consignment, type LineItemOption, type PhysicalItem } from \"@bigcommerce/checkout-sdk\";\n\nexport enum LineItemType {\n    Physical,\n    Digital,\n    GiftCertificate,\n    Custom,\n}\n\nexport interface MultiShippingTableItem {\n    name: string;\n    options?: LineItemOption[];\n    giftWrapping?: PhysicalItem['giftWrapping'];\n    sku: string;\n    quantity: number;\n    id: string | number;\n    imageUrl?: string;\n}\n\nexport interface MultiShippingTableItemWithType extends MultiShippingTableItem {\n    type: LineItemType;\n}\n\nexport interface MultiShippingTableData {\n    lineItems: MultiShippingTableItemWithType[];\n    hasDigitalItems: boolean;\n    hasSplitItems: boolean;\n    shippableItemsCount: number;\n};\n\nexport interface MultiShippingConsignmentData extends Consignment, MultiShippingTableData {\n    consignmentNumber: number;\n}\n","import { type Address, type ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport { type FormikProps } from \"formik\";\nimport React, { type FunctionComponent, useMemo } from \"react\";\nimport { number, object } from \"yup\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString, withLanguage, type WithLanguageProps } from \"@bigcommerce/checkout/locale\";\nimport { Alert, AlertType, ButtonVariant, useThemeContext } from \"@bigcommerce/checkout/ui\";\n\nimport { getAddressContent } from \"../address/SingleLineStaticAddress\";\nimport { withFormikExtended } from \"../common/form\";\nimport { Button } from \"../ui/button\";\nimport { Form } from \"../ui/form\";\nimport { Modal, ModalHeader } from \"../ui/modal\";\n\nimport AllocatedItemsList from \"./AllocatedItemsList\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport LeftToAllocateItemsTable from \"./LeftToAllocateItemsTable\";\nimport { LineItemType, type MultiShippingTableData, type MultiShippingTableItemWithType } from \"./MultishippingType\";\n\nexport interface AllocateItemsModalFormValues {\n    [key: string]: number;\n}\n\ninterface AllocateItemsModalProps {\n    consignmentNumber: number;\n    isOpen: boolean;\n    onRequestClose?(): void;\n    address: Address;\n    unassignedItems: MultiShippingTableData;\n    assignedItems?: MultiShippingTableData;\n    onAllocateItems(consignmentLineItems: ConsignmentLineItem[]): void;\n    onUnassignItem?(itemToDelete: MultiShippingTableItemWithType): void;\n    isLoading: boolean;\n}\n\nconst AllocateItemsModal: FunctionComponent<AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>> = ({\n    consignmentNumber,\n    isOpen,\n    onRequestClose,\n    address,\n    assignedItems,\n    unassignedItems,\n    setValues,\n    values,\n    dirty,\n    submitForm,\n    errors,\n    onUnassignItem,\n    isLoading,\n}: AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>) => {\n\n    const { themeV2 } = useThemeContext();\n\n    const allocatedOrSelectedItemsMessage = useMemo(() => {\n        const leftItemsTotal = unassignedItems.shippableItemsCount;\n\n        if (values && dirty) {\n            const selectedItems = Object.keys(values).reduce((acc, key) => {\n                if (values[key] > 0) {\n                    acc += values[key];\n                }\n\n                return acc;\n            }, 0);\n\n            return <TranslatedString data={{ count: `${selectedItems}/${leftItemsTotal}` }} id=\"shipping.multishipping_items_selected_message\" />;\n        }\n\n        return <TranslatedString data={{ count: leftItemsTotal }} id=\"shipping.multishipping_item_to_allocate_message\" />;\n    }, [values]);\n\n    const handleSelectAll = () => {\n        const values: AllocateItemsModalFormValues = {};\n\n        unassignedItems.lineItems.forEach(item => {\n            values[item.id.toString()] = item.quantity;\n        });\n        setValues(values);\n    };\n\n    const handleClearAll = () => {\n        const values: AllocateItemsModalFormValues = {};\n\n        unassignedItems.lineItems.forEach(item => {\n            values[item.id.toString()] = 0;\n        });\n        setValues(values);\n    }\n\n    const formErrors = useMemo(() => {\n        const errorKeys = Object.keys(errors);\n\n        return errorKeys.reduce((acc: string[], key: string) => {\n            const error = errors[key];\n\n            if (error) {\n                acc.push(error);\n            }\n\n            return Array.from(new Set(acc));\n        }, []);\n    }, [errors]);\n\n    const hasItemsAssigned = !!assignedItems && assignedItems.lineItems.length > 0 && !!onUnassignItem;\n    const hasUnassignedItems = !!unassignedItems && unassignedItems.lineItems.length > 0;\n\n    const modalFooter = (\n        <>\n            <Button\n                className={themeV2 ? 'body-medium' : ''}\n                disabled={isLoading}\n                onClick={onRequestClose}\n                variant={ButtonVariant.Secondary}\n            >\n                <TranslatedString id=\"shipping.multishipping_items_allocate_cancel\" />\n            </Button>\n            <Button\n                className={themeV2 ? 'body-medium' : ''}\n                disabled={!hasItemsAssigned && !dirty}\n                isLoading={isLoading}\n                onClick={submitForm}\n                type=\"submit\"\n                variant={ButtonVariant.Primary}\n            >\n                {hasItemsAssigned\n                    ? <TranslatedString id=\"shipping.multishipping_items_allocate_save\" />\n                    : <TranslatedString id=\"shipping.multishipping_items_allocate_allocate\" />\n                }\n            </Button>\n        </>\n    );\n\n    return (\n        <Modal\n            additionalModalClassName=\"allocate-items-modal\"\n            footer={modalFooter}\n            header={\n                <>\n                    <ModalHeader additionalClassName={themeV2 ? 'header' : ''}>\n                        <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                    </ModalHeader>\n                    <h4 className={themeV2 ? 'body-medium' : ''}>{getAddressContent(address)}</h4>\n                </>\n            }\n            isOpen={isOpen}\n            onRequestClose={onRequestClose}\n        >\n            <Form>\n                {formErrors.length > 0 && (\n                    <div className=\"form-errors\">\n                        {formErrors.map((error, index) => (\n                            <Alert key={index} type={AlertType.Error}>{error}</Alert>\n                        ))}\n                    </div>\n                )}\n                {unassignedItems.hasDigitalItems && (\n                    <Alert type={AlertType.Info}>\n                        <TranslatedString id=\"shipping.multishipping_digital_item_no_shipping_banner\" />\n                    </Alert>\n                )}\n                {hasItemsAssigned && (\n                    <AllocatedItemsList assignedItems={assignedItems} onUnassignItem={onUnassignItem} />\n                )}\n                {hasUnassignedItems\n                    ? <>\n                        <div className=\"left-to-allocate-items-table-actions\">\n                            <p className={themeV2 ? 'body-regular' : ''}>\n                                {allocatedOrSelectedItemsMessage}\n                                {unassignedItems.hasSplitItems && (\n                                    <ItemSplitTooltip />\n                                )}\n                            </p>\n\n                            <div className=\"button-group\">\n                                <a\n                                    className={themeV2 ? 'body-cta' : ''}\n                                    data-test=\"clear-all-items-button\"\n                                    href=\"#\"\n                                    onClick={preventDefault(handleClearAll)}\n                                >\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_clear_all\" />\n                                </a>\n                                <a\n                                    className={themeV2 ? 'body-cta' : ''}\n                                    data-test=\"allocate-all-items-button\"\n                                    href=\"#\"\n                                    onClick={preventDefault(handleSelectAll)}\n                                >\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_select_all_items_left\" />\n                                </a>\n                            </div>\n                        </div>\n                        <LeftToAllocateItemsTable\n                            formErrors={errors}\n                            items={unassignedItems.lineItems}\n                        />\n                    </>\n                    : null\n                }\n            </Form>\n        </Modal>\n    )\n}\n\nexport default withLanguage(\n    withFormikExtended<AllocateItemsModalProps & WithLanguageProps, AllocateItemsModalFormValues>({\n        handleSubmit: (values, { props: { onAllocateItems } }) => {\n            const consignmentLineItems = Object.keys(values).filter(key => values[key] > 0).map((lineItemId: string) => ({\n                itemId: lineItemId,\n                quantity: values[lineItemId],\n            }));\n\n            onAllocateItems(consignmentLineItems);\n        },\n        mapPropsToValues: ({ unassignedItems }) => {\n            const values: AllocateItemsModalFormValues = {};\n\n            unassignedItems.lineItems.forEach(item => {\n                values[item.id.toString()] = 0;\n            });\n\n            return values;\n        },\n        enableReinitialize: true,\n        validationSchema: ({ language, unassignedItems }: AllocateItemsModalProps & WithLanguageProps) => {\n            const createItemSchema = (item: MultiShippingTableItemWithType) => {\n                const baseSchema = number()\n                    .required(language.translate('shipping.quantity_required_error'))\n                    .integer(language.translate('shipping.quantity_invalid_error'))\n                    .min(0, language.translate('shipping.quantity_min_error'))\n                    .max(item.quantity, language.translate('shipping.quantity_max_error'))\n\n                if (item.type === LineItemType.Custom) {\n                    return baseSchema\n                        .oneOf([0, item.quantity], language.translate('shipping.custom_item_quantity_error'))\n                }\n\n                return baseSchema;\n            };\n\n            const schemaObject = Object.fromEntries(\n                unassignedItems.lineItems.map((item) => [item.id.toString(), createItemSchema(item)]),\n            );\n\n            return object().shape(schemaObject);\n        },\n        validateOnBlur: true,\n        validateOnChange: false,\n    })(AllocateItemsModal),\n);\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { type Consignment, type ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\n\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nexport const useDeallocateItem = () => {\n    const {\n        checkoutService: { createConsignments, deleteConsignment },\n    } = useCheckout();\n\n    // this is a workaround to handle removing an item from a consignment\n    // current consignment API does not support removing an item directly - Oct 2024\n\n    const deleteItem = async (consignmentRequest: ConsignmentCreateRequestBody, itemId: string, consignment: Consignment) => {\n        let consignmentIdToBeDeleted: string | undefined = consignment.id;\n\n        if (consignment.lineItemIds.length > 1) {\n            const checkoutResponse = await createConsignments([consignmentRequest]);\n\n            const consignmentsReponse = checkoutResponse.data.getConsignments();\n\n            consignmentIdToBeDeleted = consignmentsReponse?.find((c) =>\n                c.lineItemIds.find((lineItemId) => lineItemId === itemId),\n            )?.id;\n        }\n\n        if (!consignmentIdToBeDeleted) {\n            throw new Error('Unable to find consignment to delete');\n        }\n\n        deleteConsignment(consignmentIdToBeDeleted);\n    }\n\n    return deleteItem;\n}\n","import { type LineItem, type LineItemOption } from \"@bigcommerce/checkout-sdk\";\n\nconst generateHash = (values: string[]): string => {\n  return btoa(encodeURIComponent(values.join('-')));\n};\n\nconst generateProductOptionsHash = (options: LineItemOption[] | undefined): string => {\n  if (!options) {\n    return '';\n  }\n\n  return generateHash(\n    options.map((option) =>\n      generateHash([\n        option.name,\n        option.nameId.toString(),\n        option.value,\n        option.valueId ? option.valueId.toString() : '',\n      ]),\n    ),\n  );\n};\n\nexport const generateItemHash = (item: LineItem): string => {\n  return generateHash([\n    item.productId.toString(),\n    item.variantId.toString(),\n    item.sku,\n    generateProductOptionsHash(item.options),\n  ]);\n};\n","import { type Consignment, type LineItemMap } from \"@bigcommerce/checkout-sdk\";\n\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { LineItemType, type MultiShippingConsignmentData, type MultiShippingTableData, type MultiShippingTableItemWithType } from \"../MultishippingType\";\nimport { generateItemHash } from \"../utils\";\n\ninterface MultiShippingConsignmentItemsHook {\n    unassignedItems: MultiShippingTableData;\n    consignmentList: MultiShippingConsignmentData[];\n}\n\n// TODO: consolidate this from /app/order/removeBundledItems\nfunction removeBundledItems(lineItems: LineItemMap): LineItemMap {\n    return {\n        ...lineItems,\n        physicalItems: lineItems.physicalItems.filter((item) => typeof item.parentId !== 'string'),\n        digitalItems: lineItems.digitalItems.filter((item) => typeof item.parentId !== 'string'),\n    };\n}\n\nconst calculateShippableItemsCount = (items: MultiShippingTableItemWithType[]): number => {\n    return items.reduce((total, item) => total + item.quantity, 0);\n};\n\nconst hasSplitItem = (\n    items: MultiShippingTableItemWithType[],\n    itemHashMap: Map<string, string>,\n  ): boolean => {\n    const processedHashes = new Set<string>();\n  \n    for (const item of items) {\n      const hash = itemHashMap.get(item.id.toString());\n\n      if (!hash) continue;\n  \n      if (processedHashes.has(hash)) {\n        return true;\n      }\n  \n      processedHashes.add(hash);\n    }\n  \n    return false;\n  };\n\nfunction mapConsignmentsItems(\n    lineItems: LineItemMap,\n    consignments: Consignment[],\n): {\n        consignmentList: MultiShippingConsignmentData[];\n        unassignedItems: MultiShippingTableData;\n    } {\n    const unassignedItemsMap = new Map<string, MultiShippingTableItemWithType>();\n    const digitalItemsMap = new Map<string, MultiShippingTableItemWithType>();\n\n    const itemHashMap = new Map<string, string>();\n\n    const consignmentList: MultiShippingConsignmentData[] = [];\n\n    lineItems.physicalItems.forEach((item) => {\n        unassignedItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Physical });\n        itemHashMap.set(item.id.toString(), generateItemHash(item));\n    });\n    lineItems.customItems?.forEach((item) =>\n        unassignedItemsMap.set(item.id, { ...item, type: LineItemType.Custom }),\n    );\n    lineItems.digitalItems.forEach((item) =>\n        digitalItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Digital }),\n    );\n\n    consignments.forEach((consignment, index) => {\n        const consignmentLineItems: MultiShippingTableItemWithType[] = [];\n\n        consignment.lineItemIds.forEach((itemId) => {\n            const item = unassignedItemsMap.get(itemId);\n\n            if (item) {\n                consignmentLineItems.push(item);\n                unassignedItemsMap.delete(itemId);\n            }\n        });\n\n        consignmentList.push({\n            ...consignment,\n            consignmentNumber: index + 1,\n            hasDigitalItems: false,\n            hasSplitItems: hasSplitItem(consignmentLineItems, itemHashMap),\n            shippableItemsCount: calculateShippableItemsCount(consignmentLineItems),\n            lineItems: consignmentLineItems,\n        });\n    });\n\n    const unassignedItemsList = Array.from(unassignedItemsMap.values());\n\n    const unassignedItems: MultiShippingTableData = {\n        lineItems: unassignedItemsList,\n        hasDigitalItems: digitalItemsMap.size > 0,\n        hasSplitItems: hasSplitItem(unassignedItemsList, itemHashMap),\n        shippableItemsCount: calculateShippableItemsCount(unassignedItemsList),\n    };\n\n    return { consignmentList, unassignedItems };\n}\n\nconst defaultMultiShippingConsignmentItems: MultiShippingConsignmentItemsHook = {\n    unassignedItems: {\n        lineItems: [],\n        hasDigitalItems: false,\n        hasSplitItems: false,\n        shippableItemsCount: 0,\n    },\n    consignmentList: [],\n};\n\nexport const useMultiShippingConsignmentItems = (): MultiShippingConsignmentItemsHook => {\n    const { checkoutState: {\n        data: { getCheckout },\n    },\n    } = useCheckout();\n\n    const checkout = getCheckout();\n\n    if (!checkout) {\n        return defaultMultiShippingConsignmentItems;\n    }\n\n    const {\n        cart: { lineItems },\n        consignments,\n    } = checkout;\n\n    const nonBundledLineItems = removeBundledItems(lineItems);\n\n    const { consignmentList, unassignedItems } =\n        mapConsignmentsItems(nonBundledLineItems, consignments);\n\n    return {\n        unassignedItems,\n        consignmentList,\n    };\n};\n","import { ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport classNames from \"classnames\";\nimport React, { type FunctionComponent, useState } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { IconChevronDown, IconChevronUp } from \"../ui/icon\";\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport AllocateItemsModal from \"./AllocateItemsModal\";\nimport ConsignmentLineItemDetail from \"./ConsignmentLineItemDetail\";\nimport { AssignItemFailedError, UnassignItemError } from \"./errors\";\nimport { useDeallocateItem } from \"./hooks/useDeallocateItem\";\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport { type MultiShippingConsignmentData, type MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface ConsignmentLineItemProps {\n    consignmentNumber: number;\n    consignment: MultiShippingConsignmentData;\n    onUnhandledError(error: Error): void;\n    isLoading: boolean;\n}\n\nconst ConsignmentLineItem: FunctionComponent<ConsignmentLineItemProps> = ({ consignmentNumber, consignment, onUnhandledError, isLoading }: ConsignmentLineItemProps) => {\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\n    const [showItems, setShowItems] = useState(true);\n\n    const { unassignedItems } = useMultiShippingConsignmentItems();\n    const { checkoutService: { assignItemsToAddress: assignItem } } = useCheckout();\n    const deleteItem = useDeallocateItem();\n    const { themeV2 } = useThemeContext();\n\n    const toggleAllocateItemsModal = () => {\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\n    }\n\n    const handleAssignItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\n        try {\n            await assignItem({\n                address: consignment.address,\n                lineItems: consignmentLineItems,\n            });\n\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        } finally {\n            toggleAllocateItemsModal();\n        }\n    }\n\n    const handleUnassignItems = async (itemToDelete: MultiShippingTableItemWithType) => {\n        try {\n            const consignmentRequest = {\n                address: consignment.address,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: [\n                    {\n                        quantity: itemToDelete.quantity,\n                        itemId: itemToDelete.id,\n                    },\n                ],\n            }\n\n            await deleteItem(consignmentRequest, itemToDelete.id.toString(), consignment);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    }\n\n    const toggleShowItems = () => {\n        setShowItems(!showItems);\n    }\n\n    const isMobileView = isMobileViewUI();\n\n    const itemsCount = consignment.shippableItemsCount;\n\n    return (\n        <div>\n            <AllocateItemsModal\n                address={consignment.shippingAddress}\n                assignedItems={consignment}\n                consignmentNumber={consignmentNumber}\n                isLoading={isLoading}\n                isOpen={isOpenAllocateItemsModal}\n                onAllocateItems={handleAssignItems}\n                onRequestClose={toggleAllocateItemsModal}\n                onUnassignItem={handleUnassignItems}\n                unassignedItems={unassignedItems}\n            />\n            <div className=\"consignment-line-item-header\">\n                <div>\n                    <h3 className={themeV2 ? 'body-bold' : ''}>\n                        <TranslatedString data={{ count: itemsCount }} id=\"shipping.multishipping_item_allocated_message\" />\n                    </h3>\n\n                    {consignment.hasSplitItems && (\n                        <ItemSplitTooltip />\n                    )}\n\n                    <a\n                        className={classNames('expand-items-button',\n                            { 'body-cta': themeV2 }\n                        )}\n                        data-test=\"expand-items-button\"\n                        href=\"#\"\n                        onClick={preventDefault(toggleShowItems)}\n                    >\n                        {showItems ? (\n                            <>\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_hide_items_message\" />}\n                                <IconChevronUp />\n                            </>\n                        ) : (\n                            <>\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_show_items_message\" />}\n                                <IconChevronDown />\n                            </>\n                        )}\n                    </a>\n                </div>\n                <a\n                    className={themeV2 ? 'body-cta' : ''}\n                    data-test=\"reallocate-items-button\"\n                    href=\"#\"\n                    onClick={preventDefault(toggleAllocateItemsModal)}\n                >\n                    <TranslatedString id=\"shipping.multishipping_item_reallocated_message\" />\n                </a>\n            </div>\n            {showItems\n                ? <ConsignmentLineItemDetail lineItems={consignment.lineItems} />\n                : null\n            }\n        </div>\n    )\n}\n\nexport default ConsignmentLineItem;\n","import { type ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { RadioInput, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { ShopperCurrency } from '../../currency';\n\ninterface MultiShippingOptionsListItemProps {\n    consignmentId: string;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n    handleSelect: (consignmentId: string, shippingOptionId: string) => void;\n}\n\nexport const MultiShippingOptionsListItem: FunctionComponent<\n    MultiShippingOptionsListItemProps\n> = ({ consignmentId, selectedShippingOptionId, shippingOption, handleSelect }) => {\n    const { themeV2 } = useThemeContext();\n\n    const label = (\n        <span className={themeV2 ? 'body-regular' : ''}>\n            {`${shippingOption.description} - `}\n            <ShopperCurrency amount={shippingOption.cost} />\n        </span>\n    );\n\n    const selectThisOption = () => {\n        handleSelect(consignmentId, shippingOption.id);\n    };\n\n    return (\n        <ul className=\"shipping-option-item\">\n            <RadioInput\n                checked={selectedShippingOptionId === shippingOption.id}\n                id={`shippingOption-${consignmentId}-${shippingOption.id}`}\n                key={`key-${consignmentId}-${shippingOption.id}`}\n                label={label}\n                name={`${consignmentId}-shippingMethod`}\n                onClick={selectThisOption}\n                readOnly\n                value={shippingOption.id}\n            />\n        </ul>\n    );\n};\n","import { type ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { MultiShippingOptionsListItem } from './MultiShippingOptionsListItem';\n\ninterface MultiShippingOptionsListV2Props {\n    consignmentId: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst MultiShippingOptionsListV2: FunctionComponent<MultiShippingOptionsListV2Props> = ({\n    consignmentId,\n    isLoading,\n    shippingOptions,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            {shippingOptions.map((shippingOption) => (\n                <MultiShippingOptionsListItem\n                    consignmentId={consignmentId}\n                    handleSelect={onSelectedOption}\n                    key={shippingOption.id}\n                    selectedShippingOptionId={selectedShippingOptionId}\n                    shippingOption={shippingOption}\n                />\n            ))}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(MultiShippingOptionsListV2);\n","import { type Cart, type Consignment, type PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport type ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { type Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { type ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ExtensionRegion, type ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    isMultiShippingMode,\n    selectedShippingOptionId,\n    shippingOption,\n}) => {\n    const isSelected = selectedShippingOptionId === shippingOption.id;\n\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n                {(isSelected && !isMultiShippingMode) && (\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\n                )}\n            </div>\n        ),\n        [isSelected, isMultiShippingMode, shippingOption],\n    );\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    isMultiShippingMode,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        isMultiShippingMode={isMultiShippingMode}\n                        key={shippingOption.id}\n                        selectedShippingOptionId={selectedShippingOptionId}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { type CheckoutSelectors, type Consignment } from '@bigcommerce/checkout-sdk';\nimport { type FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, type ReactNode } from 'react';\n\nimport { type AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport { withFormikExtended } from '../../common/form';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { type ShippingOptionsProps, type WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps &\n    WithCheckoutShippingOptionsProps &\n    AnalyticsContextProps;\n\nconst getShippingOptionIds = ({ consignments }: ShippingOptionsFormProps) => {\n    const shippingOptionIds: { [id: string]: string } = {};\n\n    (consignments || []).forEach((consignment) => {\n        shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n            ? consignment.selectedShippingOption.id\n            : '';\n    });\n\n    return { shippingOptionIds };\n};\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate({ shippingFormRenderTimestamp }: ShippingOptionsFormProps): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions,\n            shippingFormRenderTimestamp: newShippingFormRenderTimestamp,\n            setValues,\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n\n        if (newShippingFormRenderTimestamp !== shippingFormRenderTimestamp) {\n            setValues(getShippingOptionIds(this.props));\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            isMultiShippingMode={isMultiShippingMode}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(\n    withFormikExtended<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n        handleSubmit: noop,\n        mapPropsToValues: getShippingOptionIds,\n    })(ShippingOptionsForm),\n);\n","import { type Cart, type CheckoutSelectors, type Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { type CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isInitialValueLoaded: boolean;\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n    shippingFormRenderTimestamp?: number;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nexport const isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, isUpdatingAddress?: boolean) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout, config);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props.isUpdatingAddress),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { type Consignment } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Alert, AlertType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport MultiShippingOptionsListV2 from './MultiShippingOptionsList';\nimport { isLoadingSelector } from './ShippingOptions';\n\ninterface MultiShippingOptionsV2Props {\n    consignment: Consignment;\n    isLoading: boolean;\n    shippingQuoteFailedMessage: string;\n    resetErrorConsignmentNumber(): void;\n}\n\nexport const MultiShippingOptions = ({\n    consignment,\n    isLoading,\n    resetErrorConsignmentNumber,\n    shippingQuoteFailedMessage,\n}: MultiShippingOptionsV2Props) => {\n    const { checkoutService, checkoutState } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const selectShippingOption = async (consignmentId: string, shippingOptionId: string) => {\n        await checkoutService.selectConsignmentShippingOption(consignmentId, shippingOptionId);\n        resetErrorConsignmentNumber();\n    };\n    const isLoadingOptions = isLoadingSelector(checkoutState, isLoading)(consignment.id);\n\n    return (\n        <div>\n            <h3 className={classNames('shipping-option-header',\n                { 'body-bold': themeV2 })}\n            >\n                <TranslatedString id=\"shipping.shipping_method_label\" />\n            </h3>\n            {(!consignment.availableShippingOptions ||\n                !consignment.availableShippingOptions.length) && (\n                    <Alert type={AlertType.Error}>{shippingQuoteFailedMessage}</Alert>\n                )}\n            {Boolean(consignment.availableShippingOptions) &&\n                consignment.availableShippingOptions && (\n                    <MultiShippingOptionsListV2\n                        consignmentId={consignment.id}\n                        isLoading={isLoadingOptions}\n                        onSelectedOption={selectShippingOption}\n                        selectedShippingOptionId={\n                            consignment.selectedShippingOption &&\n                            consignment.selectedShippingOption.id\n                        }\n                        shippingOptions={consignment.availableShippingOptions}\n                    />\n                )}\n        </div>\n    );\n};\n","import classNames from 'classnames';\nimport React, { type FunctionComponent } from 'react';\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { IconClose, IconSize } from \"../ui/icon\";\n\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\nimport ConsignmentLineItem from './ConsignmentLineItem';\nimport { type MultiShippingConsignmentData } from './MultishippingType';\nimport { MultiShippingOptions } from './shippingOption/MultiShippingOptions';\n\nexport interface ConsignmentListItemProps {\n    consignment: MultiShippingConsignmentData;\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    shippingQuoteFailedMessage: string;\n    onUnhandledError(error: Error): void;\n    resetErrorConsignmentNumber(): void;\n}\n\nconst ConsignmentListItem: FunctionComponent<ConsignmentListItemProps> = ({\n    consignment,\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    shippingQuoteFailedMessage,\n    onUnhandledError,\n    resetErrorConsignmentNumber,\n}: ConsignmentListItemProps) => {\n\n    const { checkoutService: { deleteConsignment } } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const handleClose = async () => {\n        await deleteConsignment(consignment.id);\n        resetErrorConsignmentNumber();\n    };\n\n    return (\n        <div className='consignment-container'>\n            <div className={classNames('consignment-header', { 'sub-header': themeV2 })}>\n                <h3>\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                </h3>\n                <a\n                    className=\"delete-consignment\"\n                    data-test=\"delete-consignment-button\"\n                    href=\"#\"\n                    onClick={preventDefault(handleClose)}\n                >\n                    <IconClose size={IconSize.Small} />\n                </a>\n            </div>\n            <ConsignmentAddressSelector\n                consignment={consignment}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={consignment.shippingAddress}\n            />\n            <ConsignmentLineItem\n                consignment={consignment}\n                consignmentNumber={consignmentNumber}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n            />\n            <MultiShippingOptions\n                consignment={consignment}\n                isLoading={isLoading}\n                resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                shippingQuoteFailedMessage={shippingQuoteFailedMessage}\n            />\n        </div>\n    );\n};\n\nexport default ConsignmentListItem;\n","import { type Consignment } from '@bigcommerce/checkout-sdk';\nimport { every } from 'lodash';\n\nexport default function isSelectedShippingOptionValid(consignments: Consignment[]): boolean {\n    if (!consignments.length) {\n        return false;\n    }\n\n    return every(\n        consignments,\n        consignment => {\n            if (consignment.selectedShippingOption?.type === 'custom') {\n                return true;\n            }\n\n            return consignment.availableShippingOptions &&\n                consignment.availableShippingOptions.find(\n                    ({ id }) => id === consignment.selectedShippingOption?.id\n                );\n        }\n    );\n}\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\n\nexport interface ShippingFormFooterProps {\n    shouldShowOrderComments: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n    cartHasChanged: boolean;\n}\n\nconst MultiShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    shouldShowOrderComments,\n    shouldDisableSubmit,\n    isLoading,\n    cartHasChanged,\n}) => {\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <Form>\n            {cartHasChanged && (\n                <Alert type={AlertType.Error}>\n                    <strong>\n                        <TranslatedString id=\"shipping.cart_change_error\" />\n                    </strong>\n                </Alert>\n            )}\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    className={themeV2 ? 'body-bold' : ''}\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default MultiShippingFormFooter;\n","import { type Consignment, type ConsignmentCreateRequestBody, type ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport classNames from \"classnames\";\nimport { find } from \"lodash\";\nimport React, { useMemo, useState } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\nimport { useThemeContext } from \"@bigcommerce/checkout/ui\";\n\nimport { EMPTY_ARRAY } from \"../common/utility\";\n\nimport AllocateItemsModal from \"./AllocateItemsModal\";\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\nimport { AssignItemFailedError } from \"./errors\";\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\nimport { setRecommendedOrMissingShippingOption } from './utils';\n\ninterface NewConsignmentProps {\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    setIsAddShippingDestination: React.Dispatch<React.SetStateAction<boolean>>;\n    onUnhandledError(error: Error): void;\n    resetErrorConsignmentNumber(): void;\n}\n\nconst NewConsignment = ({\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    resetErrorConsignmentNumber,\n    setIsAddShippingDestination,\n}: NewConsignmentProps) => {\n    const [consignmentRequest, setConsignmentRequest] = useState<ConsignmentCreateRequestBody | undefined>();\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\n    const { unassignedItems } = useMultiShippingConsignmentItems();\n    const { themeV2 } = useThemeContext();\n    const {\n        checkoutState: {\n            data: { getShippingCountries, getConsignments: getPreviousConsignments },\n        },\n        checkoutService: { assignItemsToAddress: assignItem, selectConsignmentShippingOption },\n    } = useCheckout();\n\n    const selectedAddress = useMemo(() => {\n        if (!consignmentRequest?.address) {\n            return undefined;\n        }\n\n        const countries = getShippingCountries() || EMPTY_ARRAY;\n        const country = find(countries, { code: consignmentRequest.address.countryCode });\n\n        return {\n            ...consignmentRequest.address,\n            country: country ? country.name : consignmentRequest.address.countryCode,\n        };\n    }, [consignmentRequest]);\n\n    const toggleAllocateItemsModal = () => {\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\n    }\n\n    const handleAllocateItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\n        let currentConsignments: Consignment[] | undefined;\n\n        if (!selectedAddress) {\n            return;\n        }\n\n        try {\n            const {\n                data: { getConsignments },\n            } = await assignItem({\n                address: selectedAddress,\n                lineItems: consignmentLineItems,\n            });\n\n            currentConsignments = getConsignments();\n        } catch (error) {\n            if (error instanceof AssignItemFailedError) {\n                onUnhandledError(error);\n            }\n        } finally {\n            toggleAllocateItemsModal();\n            setIsAddShippingDestination(false);\n            resetErrorConsignmentNumber();\n\n            if (currentConsignments && currentConsignments.length > 0) {\n                await setRecommendedOrMissingShippingOption(\n                    getPreviousConsignments() ?? [],\n                    currentConsignments,\n                    selectConsignmentShippingOption,\n                );\n            }\n        }\n    };\n\n    return (\n        <div className='consignment-container'>\n            <div className={classNames('consignment-header', { 'sub-header': themeV2 })}>\n                <h3>\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                </h3>\n            </div>\n            <ConsignmentAddressSelector\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={selectedAddress}\n                setConsignmentRequest={setConsignmentRequest}\n            />\n            {selectedAddress && (<>\n                <AllocateItemsModal\n                    address={selectedAddress}\n                    consignmentNumber={consignmentNumber}\n                    isLoading={isLoading}\n                    isOpen={isOpenAllocateItemsModal}\n                    onAllocateItems={handleAllocateItems}\n                    onRequestClose={toggleAllocateItemsModal}\n                    unassignedItems={unassignedItems}\n                />\n                <div className=\"new-consignment-line-item-header\">\n                    <h3 className={themeV2 ? 'body-bold' : ''}>\n                        <TranslatedString id=\"shipping.multishipping_no_item_allocated_message\" />\n                    </h3>\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"allocate-items-button\"\n                        href=\"#\"\n                        onClick={preventDefault(toggleAllocateItemsModal)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_allocate_items\" />\n                    </a>\n                </div>\n            </>\n            )}\n        </div>\n    )\n}\n\nexport default NewConsignment;\n","import classNames from 'classnames';\nimport React, {type FunctionComponent, type ReactNode, useMemo, useState} from 'react';\n\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Alert, AlertType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { withFormikExtended } from '../common/form';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { Button, ButtonVariant } from '../ui/button';\n\nimport ConsignmentListItem from './ConsignmentListItem';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport { useMultiShippingConsignmentItems } from './hooks/useMultishippingConsignmentItems';\nimport isSelectedShippingOptionValid from './isSelectedShippingOptionValid';\nimport MultiShippingFormFooter from './MultiShippingFormFooter';\nimport { type MultiShippingConsignmentData } from './MultishippingType';\nimport './MultiShippingForm.scss';\nimport NewConsignment from './NewConsignment';\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport interface MultiShippingFormProps {\n    cartHasChanged: boolean;\n    customerMessage: string;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: MultiShippingFormValues): void;\n}\n\nconst MultiShippingForm: FunctionComponent<MultiShippingFormProps> = ({\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    cartHasChanged,\n}: MultiShippingFormProps) => {\n    const [errorConsignmentNumber, setErrorConsignmentNumber] = useState<number | undefined>();\n\n    const { themeV2 } = useThemeContext();\n    const {\n        checkoutState: {\n            data: { getConsignments, getConfig },\n        },\n    } = useCheckout();\n    const { unassignedItems: { lineItems: unassignedLineItems, shippableItemsCount }, consignmentList } = useMultiShippingConsignmentItems();\n\n    const consignments = getConsignments() || EMPTY_ARRAY;\n    const config = getConfig();\n\n    const [isAddShippingDestination, setIsAddShippingDestination] = useState(\n        consignments.length === 0,\n    );\n\n    const isEveryConsignmentHasShippingOption = hasSelectedShippingOptions(consignments);\n    const shouldDisableSubmit = useMemo(() => {\n        return isLoading || !!unassignedLineItems.length || !isEveryConsignmentHasShippingOption || !isSelectedShippingOptionValid(consignments);\n    }, [isLoading, consignments]);\n\n    if (!config) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments: shouldShowOrderComments,\n            shippingQuoteFailedMessage,\n        },\n    } = config;\n\n    const handleAddShippingDestination = () => {\n        if (!isAddShippingDestination && !isEveryConsignmentHasShippingOption) {\n            const errorConsignmentIndex = consignments.findIndex(\n                (consignment) => !consignment.selectedShippingOption,\n            );\n\n            if (errorConsignmentIndex === -1) {\n                setIsAddShippingDestination(true);\n\n                return;\n            }\n\n            setErrorConsignmentNumber(errorConsignmentIndex + 1);\n        } else if (isAddShippingDestination) {\n            setErrorConsignmentNumber(consignments.length + 1);\n        } else {\n            setErrorConsignmentNumber(undefined);\n            setIsAddShippingDestination(true);\n        }\n    };\n\n    const hasUnassignedItems = shippableItemsCount > 0;\n\n    const renderAllocatedBanner = (shippableItemsCount: number): ReactNode => {\n        if (shippableItemsCount > 0) {\n            return <Alert additionalClassName={themeV2 ? 'body-regular' : ''} type={AlertType.Info}>\n                <TranslatedString data={{ count: shippableItemsCount }} id=\"shipping.multishipping_item_to_allocate_message\" />\n            </Alert>;\n        }\n\n        return <Alert additionalClassName={themeV2 ? 'body-regular' : ''} type={AlertType.Success}>\n            <TranslatedString id=\"shipping.multishipping_all_items_allocated_message\" />\n        </Alert>;\n    }\n    const resetErrorConsignmentNumber = () => {\n        setErrorConsignmentNumber(undefined);\n    };\n\n    return (\n        <>\n            {renderAllocatedBanner(shippableItemsCount)}\n            {consignmentList.map((consignment: MultiShippingConsignmentData) => (\n                <ConsignmentListItem\n                    consignment={consignment}\n                    consignmentNumber={consignment.consignmentNumber}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    key={consignment.id}\n                    onUnhandledError={onUnhandledError}\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                    shippingQuoteFailedMessage={shippingQuoteFailedMessage}\n                />\n            ))}\n            {isAddShippingDestination && (\n                <NewConsignment\n                    consignmentNumber={consignments.length === 0 ? 1 : (consignments.length + 1)}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    onUnhandledError={onUnhandledError}\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                    setIsAddShippingDestination={setIsAddShippingDestination}\n                />)\n            }\n            {hasUnassignedItems &&\n                <Button\n                    className={classNames({ 'body-regular': themeV2 }, 'add-consignment-button')}\n                    onClick={handleAddShippingDestination}\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"shipping.multishipping_add_new_destination\" />\n                </Button>\n            }\n            {Boolean(errorConsignmentNumber) && (\n                <div className=\"form-field--error\">\n                    <span className=\"form-inlineMessage\">\n                        <TranslatedString\n                            data={{ consignmentNumber: errorConsignmentNumber }}\n                            id=\"shipping.multishipping_incomplete_consignment_error\"\n                        />\n                    </span>\n                </div>\n            )}\n            <MultiShippingFormFooter\n                cartHasChanged={cartHasChanged}\n                isLoading={isLoading}\n                shouldDisableSubmit={shouldDisableSubmit}\n                shouldShowOrderComments={shouldShowOrderComments}\n            />\n        </>\n    );\n}\n\nexport default withLanguage(\n    withFormikExtended<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import React, { type FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const { themeV2 } = useThemeContext();\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n            testId=\"billingSameAsShipping\"\n            themeV2={themeV2}\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    type Address,\n    type CheckoutSelectors,\n    type FormField,\n    type ShippingInitializeOptions,\n    type ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { type ReactElement, useEffect } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { DynamicFormField, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { Fieldset } from '../ui/form';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: unknown): void;\n}\n\nconst StaticAddressEditable = ({\n    address,\n    buttonId,\n    formFields,\n    isLoading,\n    methodId,\n    deinitialize,\n    initialize,\n    onFieldChange,\n    onUnhandledError = noop,\n}: StaticAddressEditableProps): ReactElement => {\n    const handleFieldValueChange = (name: string) => (value: string) => {\n        onFieldChange(name, value);\n    };\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const initialization = async () => {\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n    const deinitialization = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    useEffect(() => {\n        void initialization();\n\n        return () => {\n            void deinitialization();\n        };\n    }, []);\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <StaticAddress address={address} />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        id={buttonId}\n                        onClick={preventDefault()}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default StaticAddressEditable;\n","import { type Address, type ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { type FC, useCallback } from 'react';\n\nimport { type ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import {\n    type Address,\n    type CheckoutSelectors,\n    type Country,\n    type CustomerAddress,\n    type FormField,\n    type ShippingInitializeOptions,\n    type ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { memo, type MutableRefObject } from 'react';\n\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    countries?: Country[];\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    paypalFastlaneShippingComponentRef: MutableRefObject<PayPalFastlaneAddressComponentRef>;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        formFields,\n        isLoading,\n        onAddressSelect,\n        onFieldChange,\n        countries,\n        paypalFastlaneShippingComponentRef,\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\n        onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponentRef.current.showAddressSelector === 'function') {\n            const selectedAddress =\n                await paypalFastlaneShippingComponentRef.current.showAddressSelector();\n\n            if (selectedAddress) {\n                const customFields = shouldShowCustomFormFields ? address.customFields : {};\n\n                onAddressSelect({\n                    ...selectedAddress,\n                    ...customFields,\n                });\n            }\n        }\n    };\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {!!(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {!!(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {!!address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {!!address.city && (\n                                    <span className=\"locality\">{`${address.city}, `}</span>\n                                )}\n                                {!!address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {!!address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {!!address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(PayPalFastlaneShippingAddressForm);\n","import {\n    type Address,\n    type Consignment,\n    type FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { type ReactElement } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { AddressForm, AddressSelect, AddressType, isValidCustomerAddress } from '../address';\nimport { connectFormik, type ConnectFormikProps } from '../common/form';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { Fieldset } from '../ui/form';\n\nimport { type SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    address?: Address;\n    consignments: Consignment[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nconst ShippingAddressForm = (\n    {\n        address: shippingAddress,\n        onAddressSelect,\n        onUseNewAddress,\n        countriesWithAutocomplete,\n        formFields,\n        isLoading,\n        googleMapsApiKey,\n        isFloatingLabelEnabled,\n        formik: {\n            values: { shippingAddress: formAddress },\n            setFieldValue: formikSetFieldValue,\n        },\n        onFieldChange,\n    }: ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>,\n): ReactElement => {\n    const {\n        checkoutState:{\n            data:{\n                getCustomer,\n                getShippingCountries,\n            },\n        },\n    } = useCheckout();\n\n    const customer = getCustomer();\n    const addresses = customer?.addresses || [];\n    const countries = getShippingCountries() || EMPTY_ARRAY;\n    const shouldShowSaveAddress = !(customer?.isGuest);\n\n    const setFieldValue = (fieldName: string, fieldValue: string) => {\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        void formikSetFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    const handleChange = (fieldName: string, value: string) => {\n        onFieldChange(fieldName, value);\n    };\n\n    const handleAutocompleteToggle = ({\n        isOpen,\n        inputValue,\n    }: {\n        inputValue: string;\n        isOpen: boolean;\n    }) => {\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n\n    const hasAddresses = addresses && addresses.length > 0;\n    const hasValidCustomerAddress = isValidCustomerAddress(\n        shippingAddress,\n        addresses,\n        formFields,\n    );\n\n    return (\n        <Fieldset id=\"checkoutShippingAddress\">\n            {hasAddresses && (\n                <Fieldset id=\"shippingAddresses\">\n                    <LoadingOverlay isLoading={isLoading}>\n                        <AddressSelect\n                            addresses={addresses}\n                            onSelectAddress={onAddressSelect}\n                            onUseNewAddress={onUseNewAddress}\n                            selectedAddress={\n                                hasValidCustomerAddress ? shippingAddress : undefined\n                            }\n                            type={AddressType.Shipping}\n                        />\n                    </LoadingOverlay>\n                </Fieldset>\n            )}\n\n            {!hasValidCustomerAddress && (\n                <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                    <AddressForm\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        countryCode={formAddress && formAddress.countryCode}\n                        fieldName={addressFieldName}\n                        formFields={formFields}\n                        googleMapsApiKey={googleMapsApiKey}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        onAutocompleteToggle={handleAutocompleteToggle}\n                        onChange={handleChange}\n                        setFieldValue={setFieldValue}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                </LoadingOverlay>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    type Address,\n    type Consignment,\n    type Country,\n    type CustomerAddress,\n    type FormField\n} from '@bigcommerce/checkout-sdk';\nimport React, { type FC, useEffect, useRef, useState } from 'react';\n\nimport {\n    isBigCommercePaymentsFastlaneMethod,\n    isBraintreeFastlaneMethod,\n    isPayPalCommerceFastlaneMethod,\n    isPayPalFastlaneMethod,\n    PayPalFastlaneShippingAddressForm,\n    usePayPalFastlaneAddress,\n} from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { type ShippingAddressProps } from './ShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId?: string,\n    shippingAddress?:  Address,\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[],\n    googleMapsApiKey?: string;\n    handleFieldChange(fieldName: string, value: string): void,\n    onAddressSelect(address: Address): void;\n}\n\ninterface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        handleFieldChange,\n        isLoading\n    } = props;\n    const [isLoadingStrategy, setIsLoadingStrategyStrategy] = useState<boolean>(true);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n    const fastlaneOptions = (provider: string) => {\n        return {\n            [provider]: {\n                onPayPalFastlaneAddressChange: (\n                    showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n                ) => {\n                    paypalFastlaneShippingComponent.current.showAddressSelector =\n                        showPayPalFastlaneAddressSelector;\n                },\n            },\n        };\n    }\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...(isBigCommercePaymentsFastlaneMethod(methodId) ? fastlaneOptions('bigcommerce_payments_fastlane') : {}),\n                ...(isBraintreeFastlaneMethod(methodId) ? fastlaneOptions('braintreefastlane') : {}),\n                ...(isPayPalCommerceFastlaneMethod(methodId) ? fastlaneOptions('paypalcommercefastlane') : {})\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n\n        setIsLoadingStrategyStrategy(false);\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n    const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoadingStrategy || isLoading}>\n            {methodId && isPayPalFastlaneMethod(methodId) && shippingAddress && shouldShowPayPalFastlaneShippingForm ? (\n                <PayPalFastlaneShippingAddressForm\n                    address={shippingAddress}\n                    countries={countries}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initialize}\n                    isLoading={isLoadingStrategy}\n                    methodId={methodId}\n                    onAddressSelect={onAddressSelect}\n                    onFieldChange={onFieldChange}\n                    onUnhandledError={onUnhandledError}\n                    paypalFastlaneShippingComponentRef={paypalFastlaneShippingComponent}\n                />\n            ) : (\n                <ShippingAddressForm\n                    address={shippingAddress}\n                    consignments={props.consignments}\n                    countriesWithAutocomplete={props.countriesWithAutocomplete}\n                    formFields={formFields}\n                    googleMapsApiKey={props.googleMapsApiKey}\n                    isFloatingLabelEnabled={props.isFloatingLabelEnabled}\n                    isLoading={isLoadingStrategy}\n                    onAddressSelect={onAddressSelect}\n                    onFieldChange={handleFieldChange}\n                    onUseNewAddress={props.onUseNewAddress}\n                />\n            )}\n        </LoadingOverlay>\n    );\n};\n","import {\n    type Address,\n    type CheckoutSelectors,\n    type Consignment,\n    type FormField,\n    type ShippingInitializeOptions,\n    type ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo, useContext } from 'react';\n\nimport { isPayPalFastlaneMethod } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface ShippingAddressProps {\n    consignments: Consignment[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId && isPayPalFastlaneMethod(methodId) && shippingAddress) {\n        return (\n            <PayPalFastlaneShippingAddress\n                {...props}\n                handleFieldChange={handleFieldChange}\n                methodId={methodId}\n                shippingAddress={shippingAddress}\n            />\n        )\n    }\n\n    if (methodId === 'amazonpay' && shippingAddress) {\n        return (\n            <AmazonPayShippingAddress\n                {...props}\n                shippingAddress={shippingAddress}\n            />\n        );\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            consignments={consignments}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    shippingFormRenderTimestamp?: number;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isInitialValueLoaded,\n    isLoading,\n    shippingFormRenderTimestamp,\n}) => {\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend themeV2={themeV2}>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    className={themeV2 ? 'body-bold' : ''}\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default ShippingFormFooter;\n","import {\n    type Address,\n    type CheckoutParams,\n    type CheckoutSelectors,\n    type Consignment,\n    type CustomerRequestOptions,\n    type FormField,\n    type RequestOptions,\n    type ShippingInitializeOptions,\n    type ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { type FormikProps } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, type ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    type AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { withFormikExtended } from '../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport isSelectedShippingOptionValid from './isSelectedShippingOptionValid';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shippingAutosaveDelay?: number;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    shippingFormRenderTimestamp?: number;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n    const methodIdsWithoutCustomValidation: string[] = [\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n\n    return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    componentDidUpdate({ shippingFormRenderTimestamp }: SingleShippingFormProps) {\n        const {\n            shippingFormRenderTimestamp: newShippingFormRenderTimestamp,\n            setValues,\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n            values,\n            setFieldValue,\n        } = this.props;\n\n        const stateOrProvinceCodeFormField = getFields(values && values.shippingAddress?.countryCode).find(\n            ({ name }) => name === 'stateOrProvinceCode',\n        );\n\n        // Workaround for a bug found during manual testing:\n        // When the shipping step first loads, the `stateOrProvinceCode` field may not be there.\n        // It later appears with an empty value if the selected country has states/provinces.\n        // To address this, we manually set `stateOrProvinceCode` in Formik.\n        if (\n            stateOrProvinceCodeFormField &&\n            shippingAddress?.stateOrProvinceCode &&\n            !values.shippingAddress?.stateOrProvinceCode\n        ) {\n            setFieldValue('shippingAddress.stateOrProvinceCode', shippingAddress.stateOrProvinceCode);\n        }\n\n        // This is for executing extension command, `ReRenderShippingForm`.\n        if (newShippingFormRenderTimestamp !== shippingFormRenderTimestamp) {\n            setValues({\n                billingSameAsShipping: isBillingSameAsShipping,\n                orderComment: customerMessage,\n                shippingAddress: mapAddressToFormValues(\n                    getFields(shippingAddress && shippingAddress.countryCode),\n                    shippingAddress,\n                ),\n            });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isFloatingLabelEnabled,\n            shippingFormRenderTimestamp,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        consignments={consignments}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments) || !isSelectedShippingOptionValid(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            shouldHaveCustomValidation(methodId)\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false, // This is false due to the concern that a shopper may lose typed details if somehow checkout state changes in the middle.\n    })(SingleShippingForm),\n);\n","import {\n    type Address,\n    type Cart,\n    type CheckoutParams,\n    type CheckoutSelectors,\n    type Consignment,\n    type CustomerRequestOptions,\n    type FormField,\n    type RequestOptions,\n    type ShippingInitializeOptions,\n    type ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { useEffect } from 'react';\n\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport isUsingMultiShipping from './isUsingMultiShipping';\nimport MultiShippingForm, { type MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { type SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n    shippingFormRenderTimestamp?: number;\n    setIsMultishippingMode(isMultiShippingMode: boolean): void;\n}\n\nconst ShippingForm = ({\n    cart,\n    cartHasChanged,\n      consignments,\n      countriesWithAutocomplete,\n      customerMessage,\n      deinitialize,\n      deleteConsignments,\n      getFields,\n      googleMapsApiKey,\n      initialize,\n      isBillingSameAsShipping,\n      isLoading,\n      isMultiShippingMode,\n      methodId,\n      onMultiShippingSubmit,\n      onSingleShippingSubmit,\n    onUnhandledError,\n      shippingAddress,\n      shouldShowOrderComments,\n      signOut,\n      updateAddress,\n      isShippingStepPending,\n      isFloatingLabelEnabled,\n    isInitialValueLoaded,\n    shippingFormRenderTimestamp,\n    setIsMultishippingMode,\n}: ShippingFormProps & WithLanguageProps) => {\n    const {\n        checkoutState: {\n            data: { getConfig },\n        },\n    } = useCheckout();\n    const config = getConfig();\n\n    useEffect(() => {\n        if (shippingFormRenderTimestamp) {\n            const hasMultiShippingEnabled = config?.checkoutSettings?.hasMultiShippingEnabled ?? false;\n            const isMultiShippingMode =\n                !!cart &&\n                !!consignments &&\n                hasMultiShippingEnabled &&\n                isUsingMultiShipping(consignments, cart.lineItems);\n\n            setIsMultishippingMode(isMultiShippingMode);\n        }\n    }, [shippingFormRenderTimestamp]);\n\n    const getMultiShippingForm = () => {\n        return <MultiShippingForm\n            cartHasChanged={cartHasChanged}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            isLoading={isLoading}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n        />;\n    };\n\n    return isMultiShippingMode ? (\n        getMultiShippingForm()\n    ) : (\n        <SingleShippingForm\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n            shouldShowOrderComments={shouldShowOrderComments}\n            signOut={signOut}\n            updateAddress={updateAddress}\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, memo, useState } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ConfirmationModal , useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Legend } from '../ui/form';\n\nimport './ShippingHeader.scss';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n    cartHasPromotionalItems?: boolean;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n    cartHasPromotionalItems,\n}) => {\n    const [isSingleShippingConfirmationModalOpen, setIsSingleShippingConfirmationModalOpen] = useState(false);\n    const [isMultiShippingUnavailableModalOpen, setIsMultiShippingUnavailableModalOpen] = useState(false);\n\n    const { themeV2 } = useThemeContext();\n\n    const handleShipToSingleConfirmation = () => {\n        setIsSingleShippingConfirmationModalOpen(false);\n        onMultiShippingChange();\n    }\n\n    const showConfirmationModal = shouldShowMultiShipping && isMultiShippingMode;\n    const showMultiShippingUnavailableModal = shouldShowMultiShipping && !isMultiShippingMode && cartHasPromotionalItems;\n\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\n            <div className={classNames(['form-legend-container', 'shipping-header'])}>\n                <Legend testId=\"shipping-address-heading\" themeV2={themeV2}>\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {showConfirmationModal && (\n                    <>\n                        <ConfirmationModal\n                            action={handleShipToSingleConfirmation}\n                            actionButtonLabel={<TranslatedString id=\"common.proceed_action\" />}\n                            headerId=\"shipping.ship_to_single_action\"\n                            isModalOpen={isSingleShippingConfirmationModalOpen}\n                            messageId=\"shipping.ship_to_single_message\"\n                            onRequestClose={() => setIsSingleShippingConfirmationModalOpen(false)}\n                        />\n                        <a\n                            className={themeV2 ? 'body-cta' : ''}\n                            data-test=\"shipping-mode-toggle\"\n                            href=\"#\"\n                            onClick={preventDefault(() => setIsSingleShippingConfirmationModalOpen(true))}\n                        >\n                            <TranslatedString id=\"shipping.ship_to_single\" />\n                        </a>\n                    </>\n                )}\n                {showMultiShippingUnavailableModal && (\n                    <>\n                        <ConfirmationModal\n                            action={() => setIsMultiShippingUnavailableModalOpen(false)}\n                            actionButtonLabel={<TranslatedString id=\"common.back_action\" />}\n                            headerId=\"shipping.multishipping_unavailable_action\"\n                            isModalOpen={isMultiShippingUnavailableModalOpen}\n                            messageId=\"shipping.multishipping_unavailable_message\"\n                            onRequestClose={() => setIsMultiShippingUnavailableModalOpen(false)}\n                        />\n                        <a\n                            className={themeV2 ? 'body-cta' : ''}\n                            data-test=\"shipping-mode-toggle\"\n                            href=\"#\"\n                            onClick={preventDefault(() => setIsMultiShippingUnavailableModalOpen(true))}\n                        >\n                            <TranslatedString id=\"shipping.ship_to_multi\" />\n                        </a>\n                    </>\n                )}\n                {!showConfirmationModal && !showMultiShippingUnavailableModal && shouldShowMultiShipping && (\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import { type CheckoutSelectors, type ShippingInitializeOptions, type ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, type ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(\n    country: string,\n    state: string,\n): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'JP': {\n            'Aichi': '23',\n            'Akita': '05',\n            'Aomori': '02',\n            'Chiba': '12',\n            'Ehime': '38',\n            'Fukui': '18',\n            'Fukuoka': '40',\n            'Fukushima': '07',\n            'Gifu': '21',\n            'Gunma': '10',\n            'Hiroshima': '34',\n            'Hokkaido': '01',\n            'Hyogo': '28',\n            'Ibaraki': '08',\n            'Ishikawa': '17',\n            'Iwate': '03',\n            'Kagawa': '37',\n            'Kagoshima': '46',\n            'Kanagawa': '14',\n            'Kochi': '39',\n            'Kumamoto': '43',\n            'Kyoto': '26',\n            'Mie': '24',\n            'Miyagi': '04',\n            'Miyazaki': '45',\n            'Nagano': '20',\n            'Nagasaki': '42',\n            'Nara': '29',\n            'Niigata': '15',\n            'Oita': '44',\n            'Okayama': '33',\n            'Okinawa': '47',\n            'Osaka': '27',\n            'Saga': '41',\n            'Saitama': '11',\n            'Shiga': '25',\n            'Shimane': '32',\n            'Shizuoka': '22',\n            'Tochigi': '09',\n            'Tokushima': '36',\n            'Tokyo': '13',\n            'Tottori': '31',\n            'Toyama': '16',\n            'Wakayama': '30',\n            'Yamagata': '06',\n            'Yamaguchi': '35',\n            'Yamanashi': '19'\n        },\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    type Address,\n    type CheckoutSelectors,\n    type Consignment,\n    type Country,\n    type ShippingInitializeOptions,\n    type ShippingRequestOptions,\n    type StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { type FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport type CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { type SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n            const country = availableShippingList?.find(country => country.code === address.country)?.name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    type Address,\n    type CheckoutParams,\n    type CheckoutSelectors,\n    type Consignment,\n    type Country,\n    type FormField,\n    type RequestOptions,\n    type ShippingInitializeOptions,\n    type ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { type FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, type ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    type AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport type CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { withFormikExtended } from '../../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isInitialValueLoaded: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import {\n  type Address,\n  type CheckoutSelectors,\n} from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode, useState } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport type CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { type SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n  isBillingSameAsShipping: boolean;\n  cartHasChanged: boolean;\n  isMultiShippingMode: boolean;\n  step: CheckoutStepStatus;\n  isInitializing: boolean;\n  isInitialValueLoaded: boolean;\n  isLoading: boolean;\n  isShippingMethodLoading: boolean;\n  isShippingStepPending: boolean;\n  methodId?: string;\n  shippingAddress?: Address;\n  shouldShowMultiShipping: boolean;\n  shouldShowOrderComments: boolean;\n  onReady?(): void;\n  onUnhandledError(error: Error): void;\n  onSubmit(values: SingleShippingFormValues): void;\n  onMultiShippingChange(): void;\n  loadShippingAddressFields(): Promise<CheckoutSelectors>;\n  loadShippingOptions(): Promise<CheckoutSelectors>;\n  updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\nconst StripeShipping = ({\n  isBillingSameAsShipping,\n  shouldShowMultiShipping,\n  updateAddress,\n  isMultiShippingMode,\n  step,\n  onSubmit,\n  onMultiShippingChange,\n  isLoading,\n  isShippingMethodLoading,\n  ...shippingFormProps\n}: StripeShippingProps): ReactNode => {\n  const { checkoutService, checkoutState } = useCheckout();\n\n  const {\n    data: {\n      getCheckout,\n      getCustomer,\n      getConsignments,\n      getShippingAddressFields,\n      getShippingCountries,\n    },\n  } = checkoutState;\n  const checkout = getCheckout();\n  const consignments = getConsignments() || [];\n  const customer = getCustomer();\n\n  const initialize = checkoutService.initializeShipping;\n  const deinitialize = checkoutService.deinitializeShipping;\n\n  const countries = getShippingCountries() || EMPTY_ARRAY;\n  const getFields = getShippingAddressFields;\n\n  const [isStripeLoading, setIsStripeLoading] = useState(true);\n  const [isStripeAutoStep, setIsStripeAutoStep] = useState(false);\n\n  const stripeLoadedCallback = () => {\n    setIsStripeLoading(false);\n  };\n\n  const handleIsAutoStep = () => {\n    setIsStripeAutoStep(true);\n  };\n\n  if (!checkout || !customer) {\n    return null;\n  }\n\n  const customerMessage = checkout.customerMessage;\n  const isGuest = customer.isGuest;\n\n  return (\n    <>\n      <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading} />\n      <div\n        className=\"checkout-form\"\n        style={{ display: isStripeAutoStep || isStripeLoading ? 'none' : undefined }}\n      >\n        <ShippingHeader\n          isGuest={isGuest}\n          isMultiShippingMode={isMultiShippingMode}\n          onMultiShippingChange={onMultiShippingChange}\n          shouldShowMultiShipping={shouldShowMultiShipping}\n        />\n        <StripeShippingForm\n          consignments={consignments}\n          countries={countries}\n          customerMessage={customerMessage}\n          getFields={getFields}\n          {...shippingFormProps}\n          deinitialize={deinitialize}\n          initialize={initialize}\n          isBillingSameAsShipping={isBillingSameAsShipping}\n          isLoading={isLoading}\n          isMultiShippingMode={isMultiShippingMode}\n          isShippingMethodLoading={isShippingMethodLoading}\n          isStripeAutoStep={handleIsAutoStep}\n          isStripeLoading={stripeLoadedCallback}\n          onSubmit={onSubmit}\n          step={step}\n          updateAddress={updateAddress}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default StripeShipping;\n","import {\n    type Address,\n    type AddressRequestBody,\n    type Cart,\n    type CheckoutRequestBody,\n    type CheckoutSelectors,\n    type Consignment,\n    type ConsignmentAssignmentRequestBody,\n    type Country,\n    type Customer,\n    type CustomerRequestOptions,\n    type FormField,\n    type ShippingInitializeOptions,\n    type ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { type ExtensionContextProps, withExtension } from '@bigcommerce/checkout/checkout-extension';\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton, ConfirmationModal } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport type CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport hasPromotionalItems from './hasPromotionalItems';\nimport { type MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { type SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n    setIsMultishippingMode(isMultiShippingMode: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    cartHasPromotionalItems: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadBillingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n    isMultiShippingUnavailableModalOpen: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps & ExtensionContextProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps & ExtensionContextProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n            isMultiShippingUnavailableModalOpen: false,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadBillingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n            cartHasPromotionalItems,\n            isMultiShippingMode,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions(), loadBillingAddressFields()]);\n\n            if (cartHasPromotionalItems && isMultiShippingMode) {\n                this.setState({ isMultiShippingUnavailableModalOpen: true });\n            }\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            step,\n            isFloatingLabelEnabled,\n            shouldRenderStripeForm,\n            cartHasPromotionalItems,\n            extensionState: { shippingFormRenderTimestamp } = {},\n            setIsMultishippingMode,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n            isMultiShippingUnavailableModalOpen,\n        } = this.state;\n\n        const handleSwitchToSingleShipping = async () => {\n            this.setState({ isMultiShippingUnavailableModalOpen: false });\n            await this.handleMultiShippingModeSwitch();\n        }\n\n        if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isInitialValueLoaded={!isInitializing}\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingMethodLoading={ this.props.isLoading }\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing} renderWhileLoading={true}>\n                <div className=\"checkout-form\">\n                    <ConfirmationModal\n                        action={handleSwitchToSingleShipping}\n                        actionButtonLabel={<TranslatedString id=\"common.ok_action\" />}\n                        headerId=\"shipping.multishipping_unavailable_action\"\n                        isModalOpen={isMultiShippingUnavailableModalOpen}\n                        messageId=\"shipping.checkout_switched_to_single_shipping\"\n                        shouldShowCloseButton={false}\n                    />\n                    <ShippingHeader\n                        cartHasPromotionalItems={cartHasPromotionalItems}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isInitialValueLoaded={!isInitializing}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        setIsMultishippingMode={setIsMultishippingMode}\n                        shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n                        updateAddress={updateShippingAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n            deleteConsignments,\n        } = this.props;\n\n        try {\n            this.setState({ isInitializing: true });\n\n            if (isMultiShippingMode && consignments.length) {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            }\n            else {\n                await deleteConsignments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n            isDeletingConsignment,\n            isLoadingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout, config);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress() ||\n        isDeletingConsignment() ||\n        isLoadingCheckout();\n\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings.providerWithCustomCheckout,\n    );\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        cartHasPromotionalItems: hasPromotionalItems(cart),\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n        shouldRenderStripeForm: providerWithCustomCheckout === PaymentMethodId.StripeUPE && shouldUseStripeLinkByMinimumAmount(cart),\n    };\n}\n\nexport default withExtension(withCheckout(mapToShippingProps)(Shipping));\n","import classNames from 'classnames';\nimport React, {\n    type FunctionComponent,\n    memo,\n    type ReactNode,\n    useCallback,\n    useContext,\n} from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node: Node, done: () => void) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children ? (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div aria-live=\"polite\" className={bodyClassName}>\n                        {children}\n                    </div>\n                </CSSTransition>\n            ) : null}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { type FunctionComponent, type InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { type FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, type AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { noop } from 'lodash';\nimport React, { type ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize, ButtonVariant } from '../button';\n\nimport Modal from './Modal';\nimport ModalHeader from './ModalHeader';\n\ninterface ConfirmationModalProps {\n    headerId: string;\n    messageId: string;\n    isModalOpen: boolean;\n    onRequestClose?: () => void;\n    action: () => void;\n    actionButtonLabel?: ReactNode;\n    shouldShowCloseButton?: boolean;\n}\n\nconst ConfirmationModal = ({\n    headerId,\n    messageId,\n    isModalOpen,\n    action,\n    actionButtonLabel,\n    onRequestClose = noop,\n    shouldShowCloseButton = true,\n}: ConfirmationModalProps) => {\n    return (\n        <Modal\n            additionalModalClassName=\"modal--confirm\"\n            footer={\n                <Button onClick={action} size={ButtonSize.Small} variant={ButtonVariant.Primary}>\n                    {actionButtonLabel ?? <TranslatedString id=\"common.confirm_action\" />}\n                </Button>\n            }\n            header={\n                <ModalHeader>\n                    <span aria-live=\"assertive\" role=\"alert\">\n                        <TranslatedString id={headerId} />\n                    </span>\n                </ModalHeader>\n            }\n            isOpen={isModalOpen}\n            onRequestClose={onRequestClose}\n            shouldShowCloseButton={shouldShowCloseButton}\n        >\n            <p aria-live=\"assertive\" role=\"alert\">\n                <TranslatedString id={messageId} />\n            </p>\n        </Modal>\n    );\n};\n\nexport default ConfirmationModal;\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconClose: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconClose);\n","import classNames from 'classnames';\nimport { noop } from 'lodash';\nimport React, {\n    type FunctionComponent,\n    type KeyboardEvent,\n    type MouseEvent,\n    type ReactNode,\n    useCallback,\n} from 'react';\nimport ReactModal from 'react-modal';\nimport { type Omit } from 'utility-types';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\n\nimport { IconClose } from '../icon';\n\nexport type ModalProps = Omit<\n    ReactModal.Props,\n    'bodyOpenClassName' | 'className' | 'closeTimeoutMS' | 'overlayClassName'\n> & {\n    children?: ReactNode;\n    closeButtonLabel?: string | ReactNode;\n    footer?: ReactNode;\n    header?: ReactNode;\n    additionalHeaderClassName?: string;\n    additionalBodyClassName?: string;\n    additionalModalClassName?: string;\n    shouldShowCloseButton?: boolean;\n};\n\nconst Modal: FunctionComponent<ModalProps> = ({\n    children,\n    closeButtonLabel = 'Close',\n    footer,\n    header,\n    additionalHeaderClassName,\n    additionalBodyClassName,\n    additionalModalClassName,\n    onRequestClose = noop,\n    shouldShowCloseButton = false,\n    ...rest\n}) => {\n    const handleClose = useCallback(\n        (event: MouseEvent | KeyboardEvent) => {\n            onRequestClose(event);\n        },\n        [onRequestClose],\n    );\n\n    return (\n        <ReactModal\n            {...rest}\n            ariaHideApp={process.env.NODE_ENV !== 'test'}\n            bodyOpenClassName=\"has-activeModal\"\n            className={{\n                base: classNames(\n                    'modal optimizedCheckout-contentPrimary',\n                    additionalModalClassName,\n                ),\n                afterOpen: 'modal--afterOpen',\n                beforeClose: 'modal--beforeClose',\n            }}\n            closeTimeoutMS={200}\n            onRequestClose={onRequestClose}\n            overlayClassName={{\n                base: 'modalOverlay',\n                afterOpen: 'modalOverlay--afterOpen',\n                beforeClose: 'modalOverlay--beforeClose',\n            }}\n            shouldCloseOnEsc={true}\n            shouldCloseOnOverlayClick={false}\n        >\n            <div className={classNames('modal-header', additionalHeaderClassName)}>\n                {header}\n\n                {shouldShowCloseButton && (\n                    <a\n                        className=\"modal-close\"\n                        data-test=\"modal-close-button\"\n                        href=\"#\"\n                        onClick={preventDefault(handleClose)}\n                    >\n                        {Boolean(closeButtonLabel) && (\n                            <span className=\"is-srOnly\">{closeButtonLabel}</span>\n                        )}\n\n                        <IconClose />\n                    </a>\n                )}\n            </div>\n\n            <div\n                className={classNames('modal-body', additionalBodyClassName)}\n                data-test=\"modal-body\"\n            >\n                {children}\n            </div>\n\n            {Boolean(footer) && (\n                <div className=\"modal-footer\" data-test=\"modal-footer\">\n                    {footer}\n                </div>\n            )}\n        </ReactModal>\n    );\n};\n\nexport default Modal;\n","import classNames from 'classnames';\nimport React, { type FieldsetHTMLAttributes, forwardRef, type ReactNode, type Ref } from 'react';\n\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\n    additionalClassName?: string;\n    testId?: string;\n    legend?: ReactNode;\n}\n\nconst Fieldset = forwardRef(\n    (\n        { additionalClassName, children, className, legend, testId, ...rest }: FieldsetProps,\n        ref: Ref<HTMLFieldSetElement>,\n    ) => (\n        <fieldset\n            {...rest}\n            className={className || classNames('form-fieldset', additionalClassName)}\n            data-test={testId}\n            ref={ref}\n        >\n            {legend}\n\n            <div className=\"form-body\">{children}</div>\n        </fieldset>\n    ),\n);\n\nexport default Fieldset;\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronDown: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronDown);\n","import React, { type FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    children: React.ReactNode;\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\n        {children}\n    </span>\n);\n\nexport default Tooltip;\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconError: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconError);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSuccess: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconSuccess);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconInfo: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconInfo);\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type ReactNode, useId } from 'react';\n\nimport { IconError, IconInfo, IconSuccess } from '../icon';\n\nexport interface AlertProps {\n    additionalClassName?: string;\n    icon?: ReactNode;\n    testId?: string;\n    type?: AlertType;\n    children?: ReactNode;\n}\n\nexport enum AlertType {\n    Error = 'error',\n    Info = 'info',\n    Success = 'success',\n    Warning = 'warning',\n}\n\nfunction renderDefaultIcon(type?: AlertType): ReactNode {\n    switch (type) {\n        case AlertType.Error:\n        case AlertType.Warning:\n            return <IconError />;\n\n        case AlertType.Success:\n            return <IconSuccess />;\n\n        case AlertType.Info:\n        default:\n            return <IconInfo />;\n    }\n}\n\nconst Alert: FunctionComponent<AlertProps> = ({\n    additionalClassName,\n    children,\n    icon,\n    testId,\n    type,\n}) => {\n    const describedBy = useId();\n\n    return (\n        <div\n            aria-describedby={describedBy}\n            className={classNames(\n                'alertBox',\n                additionalClassName,\n                { 'alertBox--info': type === AlertType.Info || !type },\n                { 'alertBox--error': type === AlertType.Error },\n                { 'alertBox--success': type === AlertType.Success },\n                { 'alertBox--warning': type === AlertType.Warning },\n            )}\n            data-test={testId}\n        >\n            <div className=\"alertBox-column alertBox-icon\">{icon || renderDefaultIcon(type)}</div>\n\n            <div\n                aria-live={type === AlertType.Error ? 'assertive' : 'polite'}\n                className=\"alertBox-column alertBox-message\"\n                id={describedBy}\n                role={type === AlertType.Error ? 'alert' : 'status'}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default Alert;\n","import classNames from 'classnames';\nimport React, { type FunctionComponent } from 'react';\n\ninterface ModalHeaderProps {\n    children: React.ReactNode;\n    additionalClassName?: string;\n}\n\nconst ModalHeader: FunctionComponent<ModalHeaderProps> = ({ children, additionalClassName }) => (\n    <h2\n        className={classNames(\n            'modal-header-title optimizedCheckout-headingSecondary',\n            additionalClassName,\n        )}\n        data-test=\"modal-heading\"\n    >\n        {children}\n    </h2>\n);\n\nexport default ModalHeader;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { type ReactNode, useState } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children?: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nconst Accordion = ({\n    children,\n    className = 'accordion',\n    defaultSelectedItemId,\n    isDisabled,\n    onSelect = noop,\n}: AccordionProps) => {\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\n\n    const handleToggleItem: (id: string) => void = (id) => {\n        if (isDisabled) {\n            return;\n        }\n\n        setSelectedItemId(id);\n        onSelect(id);\n    };\n\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\n        return {\n            onToggle: handleToggleItem,\n            selectedItemId: newSelectedItemId,\n        };\n    });\n\n    return (\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\n            <ul className={className}>{children}</ul>\n        </AccordionContext.Provider>\n    );\n};\n\nexport default Accordion;\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    type FunctionComponent,\n    memo,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useMemo,\n} from 'react';\n\nimport { Accordion } from '@bigcommerce/checkout/ui';\n\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\n\nexport interface ChecklistProps {\n    children?: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    useEffect(() => {\n        return () => {\n            setFieldValue(name, '');\n        };\n    }, []);\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronUp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronUp);\n","import { connect } from 'formik';\nimport React, { type ComponentType, type FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport type ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import { type Placement } from '@popperjs/core';\nimport React, { type ReactElement, type ReactEventHandler, type ReactNode, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children?: ReactNode;\n}\n\nconst TooltipTrigger = ({\n    children,\n    placement = 'bottom',\n    tooltip,\n}: TooltipTriggerProps): ReactElement => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const handleShow: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(true);\n    };\n\n    const handleHide: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(false);\n    };\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <span\n                        onBlur={handleHide}\n                        onFocus={handleShow}\n                        onMouseEnter={handleShow}\n                        onMouseLeave={handleHide}\n                        ref={ref}\n                    >\n                        {children}\n                    </span>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    shouldShow && (\n                        <div ref={ref} style={style}>\n                            {tooltip}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default TooltipTrigger;\n"],"names":["height","viewBox","width","xmlns","d","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","AmazonPay","BraintreeAcceleratedCheckout","PayPalCommerceAcceleratedCheckout","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","includes","providerId","undefined","hasPromotionalItems","cart","digitalItems","physicalItems","lineItems","filter","item","addedByPromotion","length","withFormikExtended","OriginalComponent","DecoratedComponent","props","resetForm","isInitialValueLoaded","initialValues","previousIsInitialValueLoadedRef","useRef","useEffect","current","values","displayName","name","SaveAddressForm","withLanguage","handleSubmit","onSaveAddress","mapPropsToValues","getFields","selectedAddress","mapAddressToFormValues","countryCode","validationSchema","language","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","A","shouldShowSaveAddress","className","Button","onClick","variant","Secondary","TranslatedString","id","disabled","type","Primary","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","AssignItemInvalidAddressError","CustomError","constructor","data","super","message","getLanguageService","translate","title","this","prototype","AssignItemFailedError","fill","onUseNewAddress","themeV2","SingleLineStaticAddress","address","href","preventDefault","setRecommendedOrMissingShippingOption","previousConsignment","currentConsignments","selectConsignmentShippingOption","previousShippingOptions","Map","map","consignment","selectedShippingOption","previousShippingOptionId","get","recommendedOption","availableShippingOptions","find","option","isRecommended","defaultCountryCode","onUnhandledError","setConsignmentRequest","isOpenNewAddressModal","setIsOpenNewAddressModal","useState","createCustomerAddressError","setCreateCustomerAddressError","checkoutState","getShippingCountries","getCustomer","getConfig","getConsignments","getPreviousConsignments","getShippingAddressFields","checkoutService","updateConsignment","createCustomerAddress","customer","isFloatingLabelEnabledFlag","addresses","isGuest","handleSelectAddress","isValidAddress","shippingAddress","quantity","itemId","error","Error","handleUseNewAddress","ErrorModal","onClose","shouldShowErrorCode","addressFormValues","mapAddressFromFormValues","AddressSelect","onSelectAddress","placeholderText","showSingleLineAddress","AddressType","Shipping","ItemSplitTooltip","TooltipTrigger","placement","tooltip","Tooltip","IconHelp","assignedItems","onUnassignItem","count","shippableItemsCount","hasSplitItems","key","toString","IconClose","isMobileView","imageUrl","alt","src","options","nameId","value","FormField","additionalClassName","input","field","TextInput","min","items","formErrors","LineItemType","onAllocateItems","Object","keys","lineItemId","unassignedItems","forEach","enableReinitialize","createItemSchema","baseSchema","required","integer","max","Custom","oneOf","schemaObject","fromEntries","shape","validateOnBlur","validateOnChange","consignmentNumber","setValues","dirty","submitForm","errors","allocatedOrSelectedItemsMessage","useMemo","leftItemsTotal","selectedItems","reduce","acc","push","Array","from","Set","hasItemsAssigned","hasUnassignedItems","modalFooter","footer","index","Alert","hasDigitalItems","Info","UnassignItemError","generateHash","btoa","encodeURIComponent","join","calculateShippableItemsCount","total","hasSplitItem","itemHashMap","processedHashes","hash","has","add","mapConsignmentsItems","consignments","unassignedItemsMap","digitalItemsMap","consignmentList","set","Physical","productId","variantId","sku","valueId","generateItemHash","customItems","Digital","consignmentLineItems","lineItemIds","delete","unassignedItemsList","size","defaultMultiShippingConsignmentItems","useMultiShippingConsignmentItems","getCheckout","nonBundledLineItems","parentId","removeBundledItems","isOpenAllocateItemsModal","setIsOpenAllocateItemsModal","showItems","setShowItems","assignItemsToAddress","assignItem","deleteItem","createConsignments","deleteConsignment","consignmentRequest","consignmentIdToBeDeleted","consignmentsReponse","c","useDeallocateItem","toggleAllocateItemsModal","itemsCount","itemToDelete","IconChevronUp","IconChevronDown","ConsignmentLineItemDetail","MultiShippingOptionsListItem","consignmentId","selectedShippingOptionId","shippingOption","handleSelect","label","description","ShopperCurrency","amount","cost","RadioInput","checked","readOnly","memo","shippingOptions","onSelectedOption","getShippableLineItems","result","i","isNil","concat","lineItemIndex","splitItems","findConsignment","splitItem","getRecommendedShippingOption","ShippingOptionListItem","isMultiShippingMode","isSelected","renderLabel","useCallback","StaticShippingOption","displayAdditionalInformation","method","Extension","region","ChecklistItem","htmlId","inputName","Checklist","defaultSelectedItemId","onSelect","getShippingOptionIds","shippingOptionIds","ShippingOptionsForm","PureComponent","selectDefaultShippingOptions","selectShippingOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","shippingFormRenderTimestamp","analyticsTracker","shouldShowShippingOptions","newShippingFormRenderTimestamp","showShippingMethods","componentWillUnmount","render","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","withAnalytics","noop","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isUpdatingAddress","statuses","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","withCheckout","getCart","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","indexOf","sortConsignments","shippingQuoteFailedMessage","MultiShippingOptions","resetErrorConsignmentNumber","isLoadingOptions","Boolean","MultiShippingOptionsList","shippingOptionId","Small","isSelectedShippingOptionValid","every","shouldShowOrderComments","shouldDisableSubmit","cartHasChanged","OrderComments","setIsAddShippingDestination","country","code","onSubmit","customerMessage","orderComment","errorConsignmentNumber","setErrorConsignmentNumber","unassignedLineItems","isAddShippingDestination","isEveryConsignmentHasShippingOption","hasSelectedShippingOptions","enableOrderComments","Success","renderAllocatedBanner","errorConsignmentIndex","findIndex","onChange","labelContent","CheckboxFormField","testId","buttonId","deinitialize","initialize","onFieldChange","customFormFields","custom","shouldShowCustomFormFields","style","padding","Tiny","Fieldset","DynamicFormField","parentFieldName","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","onAddressSelect","paypalFastlaneShippingComponentRef","localizeAddress","hideContentWhenLoading","firstName","lastName","phone","company","address1","address2","city","localizedProvince","postalCode","localizedCountry","PoweredByPayPalFastlaneLabel","showAddressSelector","customFields","addressFieldName","connectFormik","formik","formAddress","formikSetFieldValue","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","fieldName","onAutocompleteToggle","inputValue","fieldValue","formFieldName","PayPalFastlaneShippingAddress","handleFieldChange","isLoadingStrategy","setIsLoadingStrategyStrategy","paypalFastlaneShippingComponent","fastlaneOptions","provider","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","shouldShowPayPalFastlaneShippingForm","usePayPalFastlaneAddress","hasRequestedShippingOptions","setSubmitted","useContext","FormContext","SHIPPING_ADDRESS_FIELDS","legend","Legend","ShippingOptions","SingleShippingForm","state","isResettingAddress","isUpdatingShippingData","isValid","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setState","deleteConsignments","e","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","shippingAutosaveDelay","isBillingSameAsShipping","stateOrProvinceCode","billingSameAsShipping","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","isArray","isEqual","isEqualAddress","contextType","isInitialValid","isValidSync","methodIdsWithoutCustomValidation","shouldHaveCustomValidation","formValues","getCustomFormFieldsValidationSchema","onMultiShippingSubmit","onSingleShippingSubmit","signOut","setIsMultishippingMode","hasMultiShippingEnabled","isUsingMultiShipping","onMultiShippingChange","shouldShowMultiShipping","cartHasPromotionalItems","isSingleShippingConfirmationModalOpen","setIsSingleShippingConfirmationModalOpen","isMultiShippingUnavailableModalOpen","setIsMultiShippingUnavailableModalOpen","showConfirmationModal","showMultiShippingUnavailableModal","ConfirmationModal","action","actionButtonLabel","headerId","isModalOpen","messageId","StripeShippingAddressDisplay","StripeStateMapper","stateList","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","stateOrProvince","shouldSaveAddress","handleLoading","availableShippingList","allowedCountries","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","stripeupe","container","onChangeShipping","availableCountries","getStyles","containerId","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","gatewayId","renderCheckoutThemeStylesForStripeUPE","StripeShippingForm","shippingFormProps","deinitializeShipping","setIsStripeLoading","setIsStripeAutoStep","AddressFormSkeleton","display","Component","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","all","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","extensionState","email","renderWhileLoading","deleteConsignmentsSelector","getShippingAddress","mapToShippingProps","getBillingAddress","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","isDeletingConsignment","isLoadingCheckout","getShippableItemsCount","signOutCustomer","unassignItem","unassignItemsToAddress","StripeUPE","shouldUseStripeLinkByMinimumAmount","withExtension","bodyClassName","children","classNameSelected","headerClassName","headerClassNameSelected","headerContent","onToggle","selectedItemId","AccordionContext","transitionEndListener","node","done","addEventListener","target","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","Label","htmlFor","isDisabled","content","kebabCase","rest","C","renderInput","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","closeButtonLabel","additionalHeaderClassName","additionalBodyClassName","handleClose","event","ariaHideApp","bodyOpenClassName","base","afterOpen","beforeClose","closeTimeoutMS","overlayClassName","shouldCloseOnEsc","shouldCloseOnOverlayClick","forwardRef","ref","createContext","withIconContainer","AlertType","icon","describedBy","useId","Warning","renderDefaultIcon","setSelectedItemId","handleToggleItem","getContextValue","newSelectedItemId","Provider","ChecklistContext","contextValue","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","shouldShow","setShouldShow","handleShow","handleHide","onBlur","onFocus","onMouseEnter","onMouseLeave","modifiers","enabled"],"sourceRoot":""}