{"version":3,"file":"vendor-async-868a6ce6.js","mappings":"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A,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,M,2SCnMW,MAAMC,GAUjB,WAAAp+E,CACY8U,EACAqE,EACAigE,EACA/wD,GAHA,KAAAvT,0B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","sources":["webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/hosted-field-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-3ds.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-hosted-card-field-options-map.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-hosted-stored-card-field-options-map.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-constants.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-hosted-form.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-bluesnap-direct-input-validation-error-description.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-hosted-input-validator.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-name-on-card-input.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-array-of-allowed-props.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/bluesnap-direct-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-credit-card/create-bluesnap-direct-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-apm/bluesnap-direct-apm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-bluesnap-direct-provider-data.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/utils/is-bluesnap-direct-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnap-direct-apm/create-bluesnap-direct-apm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnapv2/bluesnapv2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bluesnap-direct-integration/src/bluesnapv2/create-bluesnapv2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/ui/src/loading-indicator/loading-indicator.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/cart/cart-source.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-integration-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/create-paypal-commerce-integration-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-constants.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/utility/src/is-base-instrument/is-base-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-redirect-action-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-paypal-commerce-provider-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/create-paypal-commerce-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/timeout-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/storage/src/cookie-storage.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-fastlane-utils.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/create-paypal-commerce-fastlane-utils.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/is-credit-card-form-fields.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/hosted-form/is-credit-card-vaulted-form-fields.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit-card/paypal-commerce-credit-cards-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-paypal-commerce-accelerated-checkout-customer.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit-card/create-paypal-commerce-credit-cards-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-ratepay/paypal-commerce-ratepay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-ratepay/create-paypal-commerce-ratepay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/get-fastlane-styles.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-paypal-fastlane-customer.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/paypal-commerce-fastlane-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/utils/is-paypal-fastlane-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/create-paypal-commerce-fastlane-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/checkout-buttons/default-checkout-button-height.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/paypal-commerce-fastlane-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-fastlane/create-paypal-commerce-fastlane-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-constants.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-integration-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/create-bigcommerce-payments-integration-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-payments-provider-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/bigcommerce-payments-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/paypal-sdk-helper.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/create-bigcommerce-payments-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/bigcommerce-payments-fastlane-utils.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/create-bigcommerce-payments-fastlane-utils.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/get-fastlane-styles.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-paypal-fastlane-customer.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/bigcommerce-payments-fastlane-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-fastlane-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/create-bigcommerce-payments-fastlane-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/get-paypal-messages-styles-from-bnpl-config.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-ratepay/bigcommerce-payments-ratepay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-ratepay/create-bigcommerce-payments-ratepay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-credit-cards/bigcommerce-payments-credit-cards-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/utils/is-bigcommerce-payments-fastlane-customer.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-credit-cards/create-bigcommerce-payments-credit-cards-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/bigcommerce-payments-alternative-methods-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/create-bigcommerce-payments-alternative-methods-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/bigcommerce-payments-fastlane-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-fastlane/create-bigcommerce-payments-fastlane-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/bigcommerce-payments-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments/create-bigcommerce-payments-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/bigcommerce-payments-paylater-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-paylater/create-bigcommerce-payments-paylater-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-alternative-methods/create-bigcommerce-payments-alternative-methods-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/bigcommerce-payments-venmo-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-integration/src/bigcommerce-payments-venmo/create-bigcommerce-payments-venmo-button-strategy.ts","webpack://checkout/./node_modules/react-popper/node_modules/react-fast-compare/index.js","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getShippableItemsCount.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getLineItemsCount.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isInternalCheckoutSelectors.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/create-amazon-pay-v2-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isAmazonPayAdditionalActionError.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/errors/amazon-pay-v2-config-creation-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/isWithBuyNowFeatures.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-us-bank-account-instrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-ach/braintree-ach-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-ach/create-braintree-ach-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/create-braintree-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/paypal.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-integration-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-credit-card-instrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-messages.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/ui/src/overlay/overlay.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/ui/src/overlay/overlay-style.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-constants.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-braintree-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/map-to-braintree-shipping-address-override.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/is-braintree-paypal-provider-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-local-payment-methods/braintree-local-methods-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-local-payment-methods/create-braintree-local-methods-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/get-fastlane-styles.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-accelerated-checkout-customer.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-utils.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/create-braintree-fastlane-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/braintree-venmo-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/create-braintree-venmo-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-credit-card/braintree-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-payment-request-3ds-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-form-fields-map.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-hosted-form-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-hosted-form/braintree-hosted-form.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-supported-card-brand.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-credit-card/create-braintree-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/braintree-paypal-credit-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/create-braintree-paypal-credit-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/braintree-fastlane-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-fastlane/create-braintree-fastlane-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/get-valid-button-style.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/braintree-paypal-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal/create-braintree-paypal-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/braintree-paypal-credit-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-paypal-credit/create-braintree-paypal-credit-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/braintree-visa-checkout-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-visa-checkout/create-braintree-visa-checkout-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-billing-address.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/map-to-legacy-shipping-address.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/braintree-venmo-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/isUnsupportedBrowserError.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-integration/src/braintree-venmo/create-braintree-venmo-button-strategy.ts","webpack://checkout/./node_modules/react-popper/lib/esm/Reference.js","webpack://checkout/./node_modules/downshift/dist/downshift.esm.js","webpack://checkout/./node_modules/react-is/index.js","webpack://checkout/./node_modules/react-popper/lib/esm/utils.js","webpack://checkout/./node_modules/react-is/cjs/react-is.production.min.js","webpack://checkout/@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/create-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/is-individual-card-element-options.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/billing/is-billing-address-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/stripev3-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripev3/create-stripev3-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-utils/src/stripe.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-utils/src/stripe-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-utils/src/stripe-integration-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-utils/src/is-stripe-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-utils/src/is-stripe-payment-method-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-utils/src/stripe-supported-locales.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-utils/src/format-locale.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-utils/src/stripe-upe/stripe-upe-constants.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/is-stripe-accelerated-checkout-customer.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/stripe-upe-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/create-stripe-upe-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/stripe-ocs-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-utils/src/is-stripe-payment-event.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/create-stripe-ocs-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/stripe-upe-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-upe/create-stripe-upe-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/utility/amount-transformer.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/constants.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/stripe-link-v2-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/stripe-integration/src/stripe-ocs/create-stripe-link-v2-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getWindow.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/math.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/userAgent.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js","webpack://checkout/./node_modules/@popperjs/core/lib/enums.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/orderModifiers.js","webpack://checkout/./node_modules/@popperjs/core/lib/createPopper.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/debounce.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/mergeByName.js","webpack://checkout/./node_modules/@popperjs/core/lib/modifiers/eventListeners.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/getBasePlacement.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/getVariation.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/computeOffsets.js","webpack://checkout/./node_modules/@popperjs/core/lib/modifiers/computeStyles.js","webpack://checkout/./node_modules/@popperjs/core/lib/modifiers/offset.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/contains.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/rectToClientRect.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js","webpack://checkout/./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/expandToHashMap.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/detectOverflow.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/within.js","webpack://checkout/./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/getAltAxis.js","webpack://checkout/./node_modules/@popperjs/core/lib/modifiers/arrow.js","webpack://checkout/./node_modules/@popperjs/core/lib/modifiers/hide.js","webpack://checkout/./node_modules/@popperjs/core/lib/popper.js","webpack://checkout/./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js","webpack://checkout/./node_modules/@popperjs/core/lib/modifiers/applyStyles.js","webpack://checkout/./node_modules/@popperjs/core/lib/modifiers/flip.js","webpack://checkout/./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js","webpack://checkout/./node_modules/react-popper/lib/esm/usePopper.js","webpack://checkout/./node_modules/react-popper/lib/esm/Popper.js","webpack://checkout/./node_modules/react-popper/lib/esm/Manager.js","webpack://checkout/@bigcommerce/checkout-sdk/./packages/legacy-integration/src/legacy-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/legacy-integration/src/create-legacy-payment-strategy.ts"],"sourcesContent":["import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","// copied from packages/core/src/hosted-form/hosted-field-type.ts\n\nenum HostedFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n    CardExpiryVerification = 'cardExpiryVerification',\n}\n\nexport default HostedFieldType;\n","// The require scope\nvar __webpack_require__ = {};\n\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import {\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectPreviouslyUsedCard, BlueSnapDirectSdk } from '../types';\n\nexport default class BlueSnapDirect3ds {\n    private _blueSnapSdk?: BlueSnapDirectSdk;\n\n    initialize(blueSnapSdk: BlueSnapDirectSdk) {\n        this._blueSnapSdk = blueSnapSdk;\n    }\n\n    async initialize3ds(\n        token: string,\n        cardData: BlueSnapDirectPreviouslyUsedCard,\n    ): Promise<string> {\n        const blueSnapSdk = this._getBlueSnapSdk();\n\n        return new Promise((resolve, reject) => {\n            blueSnapSdk.threeDsPaymentsSetup(token, (sdkResponse) => {\n                const code = sdkResponse.code;\n\n                if (code === '1') {\n                    return resolve(sdkResponse.threeDSecure.threeDSecureReferenceId);\n                }\n\n                return reject(new PaymentMethodFailedError());\n            });\n\n            blueSnapSdk.threeDsPaymentsSubmitData(cardData);\n        });\n    }\n\n    private _getBlueSnapSdk(): BlueSnapDirectSdk {\n        return guard(\n            this._blueSnapSdk,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import {\n    HostedCardFieldOptionsMap,\n    HostedFieldOptionsMap,\n    HostedFieldType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isHostedCardFieldOptionsMap(\n    fields: HostedFieldOptionsMap,\n): fields is HostedCardFieldOptionsMap {\n    return HostedFieldType.CardNumber in fields;\n}\n","import {\n    HostedFieldOptionsMap,\n    HostedFieldType,\n    HostedStoredCardFieldOptionsMap,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isHostedStoredCardFieldOptionsMap(\n    fields: HostedFieldOptionsMap,\n): fields is HostedStoredCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardCodeVerification in fields ||\n        HostedFieldType.CardNumberVerification in fields\n    );\n}\n","export type BluesnapDirectNocInputAllowedStyle = Pick<\n    CSSStyleDeclaration,\n    'color' | 'fontFamily' | 'fontSize' | 'fontWeight'\n>;\n\nexport interface BlueSnapDirectStyleDeclaration {\n    [k: string]: string;\n}\n\nexport interface BlueSnapDirectStyle {\n    '.invalid'?: BlueSnapDirectStyleDeclaration;\n    ':focus'?: BlueSnapDirectStyleDeclaration;\n    input?: BlueSnapDirectStyleDeclaration;\n}\n\nexport enum BlueSnapDirectCardType {\n    AMEX = 'american-express',\n    CHINA_UNION_PAY = 'unionpay',\n    DINERS = 'diners-club',\n    DISCOVER = 'discover',\n    JCB = 'jcb',\n    MASTERCARD = 'mastercard',\n    UNKNOWN = 'unknown',\n    VISA = 'visa',\n}\n\nexport type BlueSnapDirectCardTypeValues = keyof typeof BlueSnapDirectCardType;\n\nexport enum BlueSnapDirectEventOrigin {\n    ON_BLUR = 'onBlur',\n    ON_SUBMIT = 'onSubmit',\n}\n\nexport enum BlueSnapDirectErrorDescription {\n    EMPTY = 'empty',\n    INVALID = 'invalid',\n    THREE_DS_NOT_ENABLED = '3D Secure is not enabled',\n}\n\nexport type BlueSnapDirectInputValidationErrorDescription = Extract<\n    BlueSnapDirectErrorDescription,\n    BlueSnapDirectErrorDescription.EMPTY | BlueSnapDirectErrorDescription.INVALID\n>;\n\nexport enum BlueSnapDirectErrorCode {\n    CC_NOT_SUPORTED = '22013',\n    ERROR_403 = '403',\n    ERROR_404 = '404',\n    ERROR_500 = '500',\n    INVALID_OR_EMPTY = '10',\n    SESSION_EXPIRED = '400',\n    THREE_DS_AUTH_FAILED = '14101',\n    THREE_DS_CLIENT_ERROR = '14103',\n    THREE_DS_MISSING_FIELDS = '14102',\n    THREE_DS_NOT_ENABLED = '14100',\n    TOKEN_EXPIRED = '14040',\n    TOKEN_NOT_ASSOCIATED = '14042',\n    TOKEN_NOT_FOUND = '14041',\n}\n\nexport enum BlueSnapDirectHostedFieldTagId {\n    CardCode = 'cvv',\n    CardExpiry = 'exp',\n    CardName = 'noc',\n    CardNumber = 'ccn',\n}\n\nexport interface BlueSnapDirectHostedPaymentFieldsOptions {\n    token: string;\n    onFieldEventHandler?: {\n        setupComplete?: () => void;\n        threeDsChallengeExecuted?: () => void;\n        onFocus?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n        onBlur?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n        onError?: (\n            tagId: BlueSnapDirectHostedFieldTagId | undefined,\n            errorCode: BlueSnapDirectErrorCode,\n            errorDescription: BlueSnapDirectErrorDescription | undefined,\n            eventOrigin: BlueSnapDirectEventOrigin | undefined,\n        ) => void;\n        onType?: (\n            tagId: BlueSnapDirectHostedFieldTagId,\n            cardType: BlueSnapDirectCardTypeValues,\n            cardData: BlueSnapDirectCardData | undefined,\n        ) => void;\n        onEnter?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n        onValid?: (tagId: BlueSnapDirectHostedFieldTagId) => void;\n    };\n    ccnPlaceHolder?: string;\n    cvvPlaceHolder?: string;\n    expPlaceHolder?: string;\n    style?: BlueSnapDirectStyle;\n    '3DS'?: boolean;\n}\n\ninterface BlueSnapDirectCallback {\n    statusCode: string;\n    transactionFraudInfo: {\n        fraudSessionId: string;\n    };\n}\n\ninterface BlueSnapDirectCardData {\n    binCategory: string;\n    cardSubType: string;\n    ccBin: string;\n    ccType: string;\n    isRegulatedCard: string;\n    issuingCountry: string;\n    last4Digits: string;\n}\n\nexport interface BlueSnapDirectCallbackCardData extends BlueSnapDirectCardData {\n    cardCategory: string;\n    exp: string;\n}\n\ninterface BlueSnapDirectCallbackData extends BlueSnapDirectCallback {\n    cardData: BlueSnapDirectCallbackCardData;\n}\n\nexport interface WithBlueSnapDirectCardHolderName {\n    cardHolderName?: string;\n}\n\ninterface BlueSnapDirectSubmitError {\n    errorCode: string;\n    errorDescription: string;\n    eventType: string;\n    tagId: string;\n}\n\nexport interface BlueSnapDirectCallbackError extends BlueSnapDirectCallback {\n    error: BlueSnapDirectSubmitError[];\n}\n\nexport type BlueSnapDirectCallbackResults =\n    | BlueSnapDirectCallbackData\n    | BlueSnapDirectCallbackError;\n\nexport interface BlueSnapDirectThreeDSecureData {\n    amount: number;\n    currency: string;\n    billingFirstName?: string;\n    billingLastName?: string;\n    billingCountry?: string;\n    billingState?: string;\n    billingCity?: string;\n    billingAddress?: string;\n    billingZip?: string;\n    shippingFirstName?: string;\n    shippingLastName?: string;\n    shippingCountry?: string;\n    shippingState?: string;\n    shippingCity?: string;\n    shippingAddress?: string;\n    shippingZip?: string;\n    email?: string;\n    phone?: string;\n}\n\nexport interface BlueSnapDirectSdk {\n    hostedPaymentFieldsCreate(options: BlueSnapDirectHostedPaymentFieldsOptions): void;\n    hostedPaymentFieldsSubmitData(\n        callback: (results: BlueSnapDirectCallbackResults) => void,\n        threeDSecureData?: BlueSnapDirectThreeDSecureData,\n    ): void;\n    threeDsPaymentsSetup(\n        token: string,\n        callback: (reponse: BlueSnapDirect3dsCallbackResponse) => void,\n    ): void;\n    threeDsPaymentsSubmitData(cardData: BlueSnapDirectPreviouslyUsedCard): void;\n}\n\nexport interface BlueSnapDirectPreviouslyUsedCard {\n    last4Digits?: string;\n    ccType?: string;\n    amount: number;\n    currency: string;\n    billingFirstName?: string;\n    billingLastName?: string;\n    billingCountry?: string;\n    billingState?: string;\n    billingCity?: string;\n    billingAddress?: string;\n    billingZip?: string;\n    shippingFirstName?: string;\n    shippingLastName?: string;\n    shippingCountry?: string;\n    shippingState?: string;\n    shippingCity?: string;\n    shippingAddress?: string;\n    shippingZip?: string;\n    email?: string;\n    phone?: string;\n}\n\nexport interface BlueSnapDirect3dsCallbackResponse {\n    code: string;\n    cardData: BlueSnapDirectCallbackCardData;\n    threeDSecure: {\n        authResult: string;\n        threeDSecureReferenceId: string;\n    };\n}\n\nexport interface BlueSnapDirectHostWindow extends Window {\n    bluesnap?: BlueSnapDirectSdk;\n}\n\nexport interface BlueSnapDirectStyleProps {\n    border?: string;\n    height?: string;\n    width?: string;\n}\n\nexport interface BlueSnapDirectRedirectResponseProviderData {\n    [key: string]: string;\n    merchantid: string;\n}\n\nexport interface BlueSnapDirectRedirectResponse {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n        status: string;\n        provider_data?: string;\n    };\n}\n\n/**\n * A set of options that are required to initialize the BlueSnap V2 payment\n * method.\n *\n * The payment step is done through a web page via an iframe provided by the\n * strategy.\n *\n * ```html\n * <!-- This is where the BlueSnap iframe will be inserted. It can be an in-page container or a modal -->\n * <div id=\"container\"></div>\n *\n * <!-- This is a cancellation button -->\n * <button type=\"button\" id=\"cancel-button\"></button>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'bluesnapDirect',\n *     bluesnapDirect: {\n *         onLoad: (iframe) => {\n *             document.getElementById('container')\n *                 .appendChild(iframe);\n *\n *             document.getElementById('cancel-button')\n *                 .addEventListener('click', () => {\n *                     document.getElementById('container').innerHTML = '';\n *                 });\n *         },\n *     },\n * });\n * ```\n */\nexport interface BlueSnapDirectAPMInitializeOptions {\n    /**\n     * A set of CSS properties to apply to the iframe.\n     */\n    style?: BlueSnapDirectStyleProps;\n\n    /**\n     * A callback that gets called when the iframe is ready to be added to the\n     * current page. It is responsible for determining where the iframe should\n     * be inserted in the DOM.\n     *\n     * @param iframe - The iframe element containing the payment web page\n     * provided by the strategy.\n     * @param cancel - A function, when called, will cancel the payment\n     * process and remove the iframe.\n     */\n    onLoad(iframe: HTMLIFrameElement, cancel: () => void): void;\n}\n\nexport interface WithBlueSnapDirectAPMPaymentInitializeOptions {\n    /**\n     * The options that are required to initialize the Apple Pay payment\n     * method. They can be omitted unless you need to support Apple Pay.\n     */\n    bluesnapdirect?: BlueSnapDirectAPMInitializeOptions;\n}\n","import { WithCreditCardPaymentInitializeOptions } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    guard,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectSdk, BlueSnapDirectThreeDSecureData } from '../types';\nimport isHostedCardFieldOptionsMap from '../utils/is-hosted-card-field-options-map';\nimport isHostedStoredCardFieldOptionsMap from '../utils/is-hosted-stored-card-field-options-map';\n\nimport BlueSnapDirect3ds from './bluesnap-direct-3ds';\nimport BlueSnapDirectHostedForm from './bluesnap-direct-hosted-form';\nimport BlueSnapDirectScriptLoader from './bluesnap-direct-script-loader';\n\nexport default class BlueSnapDirectCreditCardPaymentStrategy implements PaymentStrategy {\n    private _paymentFieldsToken?: string;\n    private _shouldUseHostedFields?: boolean;\n    private _blueSnapSdk?: BlueSnapDirectSdk;\n\n    constructor(\n        private _scriptLoader: BlueSnapDirectScriptLoader,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _blueSnapDirectHostedForm: BlueSnapDirectHostedForm,\n        private _blueSnapDirect3ds: BlueSnapDirect3ds,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, gatewayId, creditCard } = options;\n\n        if (!gatewayId || !creditCard) {\n            throw new InvalidArgumentError();\n        }\n\n        const state = await this._paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId, bigpayToken: creditCard.bigpayToken },\n        });\n\n        const {\n            config: { testMode, is3dsEnabled },\n            clientToken,\n        } = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        this._blueSnapSdk = await this._scriptLoader.load(testMode);\n\n        this._paymentFieldsToken = clientToken;\n        this._shouldUseHostedFields =\n            isHostedCardFieldOptionsMap(creditCard.form.fields) ||\n            (isHostedStoredCardFieldOptionsMap(creditCard.form.fields) &&\n                !!creditCard.form.fields.cardNumberVerification);\n\n        if (this._shouldUseHostedFields) {\n            this._blueSnapDirectHostedForm.initialize(this._blueSnapSdk, creditCard.form.fields);\n            await this._blueSnapDirectHostedForm.attach(\n                this._getPaymentFieldsToken(),\n                creditCard,\n                is3dsEnabled,\n            );\n        }\n    }\n\n    async execute(payload: OrderRequestBody): Promise<void> {\n        if (!payload.payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._blueSnapSdk) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData } = payload.payment;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const pfToken = this._getPaymentFieldsToken();\n        let threeDSecureReferenceId;\n\n        const { is3dsEnabled } = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(payload.payment.methodId, payload.payment.gatewayId).config;\n\n        const bluesnapSubmitedForm = this._shouldUseHostedFields\n            ? await this._blueSnapDirectHostedForm\n                  .validate()\n                  .submit(\n                      is3dsEnabled ? this._getBlueSnapDirectThreeDSecureData() : undefined,\n                      !(isHostedInstrumentLike(paymentData) && isVaultedInstrument(paymentData)),\n                  )\n            : undefined;\n\n        await this._paymentIntegrationService.submitOrder();\n\n        if (\n            isHostedInstrumentLike(paymentData) &&\n            isVaultedInstrument(paymentData) &&\n            this._paymentFieldsToken &&\n            paymentData.instrumentId\n        ) {\n            if (is3dsEnabled) {\n                this._blueSnapDirect3ds.initialize(this._blueSnapSdk);\n\n                const { last4, brand } = this._paymentIntegrationService\n                    .getState()\n                    .getCardInstrumentOrThrow(paymentData.instrumentId);\n\n                const previouslyUsedCard = {\n                    last4Digits: last4,\n                    ccType: brand.toUpperCase(),\n                    ...this._getBlueSnapDirectThreeDSecureData(),\n                };\n\n                threeDSecureReferenceId = await this._blueSnapDirect3ds.initialize3ds(\n                    this._paymentFieldsToken,\n                    previouslyUsedCard,\n                );\n            }\n\n            await this._paymentIntegrationService.submitPayment({\n                ...payload.payment,\n                paymentData: {\n                    instrumentId: paymentData.instrumentId,\n                    ...(this._shouldUseHostedFields ? { nonce: pfToken } : {}),\n                    ...(threeDSecureReferenceId\n                        ? { deviceSessionId: threeDSecureReferenceId }\n                        : {}),\n                    shouldSetAsDefaultInstrument: !!shouldSetAsDefaultInstrument,\n                },\n            });\n\n            return;\n        }\n\n        await this._paymentIntegrationService.submitPayment({\n            ...payload.payment,\n            paymentData: {\n                formattedPayload: {\n                    credit_card_token: {\n                        token: JSON.stringify({\n                            pfToken,\n                            cardHolderName:\n                                bluesnapSubmitedForm && bluesnapSubmitedForm.cardHolderName,\n                        }),\n                    },\n                    vault_payment_instrument: shouldSaveInstrument,\n                    set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                },\n            },\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._shouldUseHostedFields) {\n            this._blueSnapDirectHostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getBlueSnapDirectThreeDSecureData(): BlueSnapDirectThreeDSecureData {\n        const {\n            getBillingAddress,\n            getShippingAddress,\n            getCustomer,\n            getCheckoutOrThrow,\n            getCartOrThrow,\n        } = this._paymentIntegrationService.getState();\n        const billingAddress = getBillingAddress();\n        const shippingAddress = getShippingAddress();\n        const email = getCustomer()?.email || billingAddress?.email;\n        const phone = billingAddress?.phone || shippingAddress?.phone;\n\n        return {\n            amount: getCheckoutOrThrow().outstandingBalance,\n            currency: getCartOrThrow().currency.code,\n            ...(email && { email }),\n            ...(phone && { phone }),\n            ...(billingAddress && {\n                billingFirstName: billingAddress.firstName,\n                billingLastName: billingAddress.lastName,\n                billingCountry: billingAddress.countryCode,\n                billingCity: billingAddress.city,\n                billingAddress: `${billingAddress.address1} ${billingAddress.address2}`.trim(),\n                billingZip: billingAddress.postalCode,\n            }),\n            ...(shippingAddress && {\n                shippingFirstName: shippingAddress.firstName,\n                shippingLastName: shippingAddress.lastName,\n                shippingCountry: shippingAddress.countryCode,\n                shippingCity: shippingAddress.city,\n                shippingAddress: `${shippingAddress.address1} ${shippingAddress.address2}`.trim(),\n                shippingZip: shippingAddress.postalCode,\n            }),\n        };\n    }\n\n    private _getPaymentFieldsToken(): string {\n        return guard(\n            this._paymentFieldsToken,\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\n        );\n    }\n}\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import { HostedFieldType } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectHostedFieldTagId as HostedFieldTagId } from './types';\n\nexport const BlueSnapHostedFieldType: {\n    [HostedFieldTagId.CardNumber]: HostedFieldType.CardNumber;\n    [HostedFieldTagId.CardExpiry]: HostedFieldType.CardExpiry;\n    [HostedFieldTagId.CardName]: HostedFieldType.CardName;\n    [HostedFieldTagId.CardCode]: HostedFieldType.CardCode;\n} = {\n    [HostedFieldTagId.CardNumber]: HostedFieldType.CardNumber,\n    [HostedFieldTagId.CardExpiry]: HostedFieldType.CardExpiry,\n    [HostedFieldTagId.CardName]: HostedFieldType.CardName,\n    [HostedFieldTagId.CardCode]: HostedFieldType.CardCode,\n};\n\nexport const CREDIT_CARD_ERRORS = {\n    empty: {\n        [HostedFieldType.CardNumber]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardNumberVerification]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardExpiry]: {\n            fieldType: 'cardExpiry',\n            message: 'Expiration date is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardCode]: {\n            fieldType: 'cardCode',\n            message: 'CVV is required',\n            type: 'required',\n        },\n        [HostedFieldType.CardName]: {\n            fieldType: 'cardName',\n            message: 'Full name is required',\n            type: 'required',\n        },\n    },\n    invalid: {\n        [HostedFieldType.CardNumber]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number must be valid',\n            type: 'invalid_card_number',\n        },\n        [HostedFieldType.CardNumberVerification]: {\n            fieldType: 'cardNumber',\n            message: 'Credit card number must be valid',\n            type: 'invalid_card_number',\n        },\n        [HostedFieldType.CardExpiry]: {\n            fieldType: 'cardExpiry',\n            message: 'Expiration date must be a valid future date in MM / YY format',\n            type: 'invalid_card_expiry',\n        },\n        [HostedFieldType.CardCode]: {\n            fieldType: 'cardCode',\n            message: 'CVV must be valid',\n            type: 'invalid_card_code',\n        },\n        [HostedFieldType.CardName]: {\n            fieldType: 'cardName',\n            message: 'Full name is required',\n            type: 'required',\n        },\n    },\n};\n","import { kebabCase } from 'lodash';\n\nimport { CreditCardPaymentInitializeOptions } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    guard,\n    HostedCardFieldOptionsMap,\n    HostedFieldBlurEventData,\n    HostedFieldEnterEventData,\n    HostedFieldFocusEventData,\n    HostedFieldOptionsMap,\n    HostedFieldStylesMap,\n    HostedFormOptions,\n    HostedInputValidateErrorData,\n    HostedStoredCardFieldOptionsMap,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapHostedFieldType } from '../bluesnap-direct-constants';\nimport {\n    BlueSnapDirectSdk,\n    BlueSnapDirectStyle,\n    BlueSnapDirectCallbackCardData as CallbackCardData,\n    BlueSnapDirectCallbackError as CallbackError,\n    BlueSnapDirectCallbackResults as CallbackResults,\n    WithBlueSnapDirectCardHolderName as CardHolderName,\n    BlueSnapDirectCardType as CardType,\n    BlueSnapDirectCardTypeValues as CardTypeValues,\n    BlueSnapDirectErrorCode as ErrorCode,\n    BlueSnapDirectErrorDescription as ErrorDescription,\n    BlueSnapDirectEventOrigin as EventOrigin,\n    BlueSnapDirectHostedFieldTagId as HostedFieldTagId,\n    BlueSnapDirectHostedPaymentFieldsOptions as HostedPaymentFieldsOptions,\n    BlueSnapDirectThreeDSecureData as ThreeDSecureData,\n} from '../types';\nimport isValidationErrorDescription from '../utils/is-bluesnap-direct-input-validation-error-description';\nimport isHostedCardFieldOptionsMap from '../utils/is-hosted-card-field-options-map';\nimport isHostedStoredCardFieldOptionsMap from '../utils/is-hosted-stored-card-field-options-map';\n\nimport BlueSnapHostedInputValidator from './bluesnap-direct-hosted-input-validator';\nimport BluesnapDirectNameOnCardInput from './bluesnap-direct-name-on-card-input';\n\nexport default class BlueSnapDirectHostedForm {\n    private _blueSnapSdk?: BlueSnapDirectSdk;\n    private _onValidate: HostedFormOptions['onValidate'];\n\n    constructor(\n        private _nameOnCardInput: BluesnapDirectNameOnCardInput,\n        private _hostedInputValidator: BlueSnapHostedInputValidator,\n    ) {}\n\n    initialize(blueSnapSdk: BlueSnapDirectSdk, fields?: HostedFieldOptionsMap) {\n        this._blueSnapSdk = blueSnapSdk;\n\n        if (!fields) {\n            return;\n        }\n\n        if (isHostedCardFieldOptionsMap(fields)) {\n            this._hostedInputValidator.initialize();\n\n            return;\n        }\n\n        if (isHostedStoredCardFieldOptionsMap(fields) && !!fields.cardNumberVerification) {\n            this._hostedInputValidator.initializeValidationFields();\n        }\n    }\n\n    async attach(\n        paymentFieldsToken: string,\n        { form: { fields, ...callbacksAndStyles } }: CreditCardPaymentInitializeOptions,\n        enable3DS = false,\n    ): Promise<void> {\n        const blueSnapSdk = this._getBlueSnapSdk();\n\n        if (!isHostedCardFieldOptionsMap(fields) && !isHostedStoredCardFieldOptionsMap(fields)) {\n            throw new InvalidArgumentError(\n                'Field options must be of type HostedCardFieldOptionsMap',\n            );\n        }\n\n        this._onValidate = callbacksAndStyles.onValidate;\n\n        if (isHostedCardFieldOptionsMap(fields)) {\n            this._setCustomBlueSnapAttributes(fields);\n        }\n\n        if (isHostedStoredCardFieldOptionsMap(fields)) {\n            this._setCustomStoredCardsBlueSnapAttributes(fields);\n        }\n\n        return new Promise<void>((resolve) => {\n            const options = this._getHostedPaymentFieldsOptions(\n                paymentFieldsToken,\n                fields,\n                callbacksAndStyles,\n                resolve,\n                enable3DS,\n            );\n\n            blueSnapSdk.hostedPaymentFieldsCreate(options);\n\n            if (isHostedCardFieldOptionsMap(fields)) {\n                this._nameOnCardInput.attach(\n                    options,\n                    fields.cardName.accessibilityLabel,\n                    fields.cardName.placeholder,\n                );\n            }\n        });\n    }\n\n    validate(): this {\n        const results = this._hostedInputValidator.validate();\n\n        this._onValidate?.(results);\n\n        if (!results.isValid) {\n            const details = Object.entries(results.errors).reduce<PaymentInvalidFormErrorDetails>(\n                (result, [key, value]: [string, HostedInputValidateErrorData[]]) => ({\n                    ...result,\n                    [key]: value.map(({ message, type }) => ({ message, type })),\n                }),\n                {},\n            );\n\n            throw new PaymentInvalidFormError(details);\n        }\n\n        return this;\n    }\n\n    submit(\n        threeDSecureData?: ThreeDSecureData,\n        shouldSendName = false,\n    ): Promise<CallbackCardData & CardHolderName> {\n        return new Promise((resolve, reject) =>\n            this._getBlueSnapSdk().hostedPaymentFieldsSubmitData(\n                (data: CallbackResults) =>\n                    this._isBlueSnapDirectCallbackError(data)\n                        ? reject(\n                              new PaymentMethodFailedError(\n                                  data.statusCode === ErrorCode.THREE_DS_AUTH_FAILED\n                                      ? data.error[0].errorDescription\n                                      : `Submission failed with status: ${\n                                            data.statusCode\n                                        } and errors: ${JSON.stringify(data.error)}`,\n                              ),\n                          )\n                        : resolve({\n                              ...data.cardData,\n                              ...(shouldSendName\n                                  ? { cardHolderName: this._nameOnCardInput.getValue() }\n                                  : {}),\n                          }),\n                threeDSecureData,\n            ),\n        );\n    }\n\n    detach(): void {\n        this._nameOnCardInput.detach();\n    }\n\n    private _isBlueSnapDirectCallbackError(data: CallbackResults): data is CallbackError {\n        return 'error' in data;\n    }\n\n    private _getHostedPaymentFieldsOptions(\n        token: string,\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n        {\n            onFocus,\n            onBlur,\n            onValidate,\n            onCardTypeChange,\n            onEnter,\n            styles,\n        }: Omit<HostedFormOptions, 'fields'>,\n        resolve: () => void,\n        enable3DS: boolean,\n    ): HostedPaymentFieldsOptions {\n        return {\n            token,\n            onFieldEventHandler: {\n                setupComplete: () => resolve(),\n                onFocus: this._usetUiEventCallback(onFocus),\n                onBlur: this._usetUiEventCallback(onBlur),\n                onError: this._handleError(onValidate),\n                onType: (_tagId: HostedFieldTagId, cardType: CardTypeValues) =>\n                    onCardTypeChange?.({ cardType: CardType[cardType] }),\n                onEnter: this._usetUiEventCallback(onEnter),\n                onValid: (tagId: HostedFieldTagId) =>\n                    onValidate?.(this._hostedInputValidator.validate({ tagId })),\n            },\n            ...(isHostedCardFieldOptionsMap(fields) && {\n                ccnPlaceHolder: fields.cardNumber.placeholder || '',\n                cvvPlaceHolder: fields.cardCode?.placeholder || '',\n                expPlaceHolder: fields.cardExpiry.placeholder || 'MM / YY',\n            }),\n            ...(styles && { style: this._mapStyles(styles) }),\n            '3DS': enable3DS,\n        };\n    }\n\n    private _mapStyles({\n        default: input,\n        error,\n        focus,\n    }: HostedFieldStylesMap): BlueSnapDirectStyle {\n        return Object.entries({\n            ...(input && { input }),\n            ...(error && { '.invalid': error }),\n            ...(focus && { ':focus': focus }),\n        }).reduce((result, [selector, declaration]) => {\n            return {\n                ...result,\n                [selector]: Object.entries(declaration).reduce(\n                    (declarationBlock, [property, value]) => ({\n                        ...declarationBlock,\n                        [kebabCase(property)]: value,\n                    }),\n                    {},\n                ),\n            };\n        }, {});\n    }\n\n    private _handleError(\n        onValidate: HostedFormOptions['onValidate'],\n    ): (\n        tagId: HostedFieldTagId | undefined,\n        errorCode: ErrorCode,\n        errorDescription: ErrorDescription | undefined,\n        eventOrigin: EventOrigin | undefined,\n    ) => void {\n        return (tagId, errorCode, errorDescription, eventOrigin) => {\n            if (errorCode === ErrorCode.INVALID_OR_EMPTY) {\n                if (tagId && isValidationErrorDescription(errorDescription)) {\n                    return onValidate?.(\n                        this._hostedInputValidator.validate({ tagId, errorDescription }),\n                    );\n                }\n            }\n\n            throw new PaymentMethodFailedError(\n                `An unexpected error has occurred: ${JSON.stringify({\n                    tagId,\n                    errorCode,\n                    errorDescription,\n                    eventOrigin,\n                })}`,\n            );\n        };\n    }\n\n    private _usetUiEventCallback(\n        callback?: (\n            data: HostedFieldBlurEventData | HostedFieldEnterEventData | HostedFieldFocusEventData,\n        ) => void,\n    ): (tagId: HostedFieldTagId) => void {\n        return (tagId) => {\n            if (callback) {\n                callback({ fieldType: BlueSnapHostedFieldType[tagId] });\n            }\n        };\n    }\n\n    private _getBlueSnapSdk(): BlueSnapDirectSdk {\n        return guard(\n            this._blueSnapSdk,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _setCustomBlueSnapAttributes(fields: HostedCardFieldOptionsMap): void {\n        const { cardNumber, cardExpiry, cardCode, cardName } = fields;\n\n        const cardNumberContainer = document.getElementById(cardNumber.containerId);\n        const cardExpiryContainer = document.getElementById(cardExpiry.containerId);\n        const cardCodeContainer = cardCode && document.getElementById(cardCode.containerId);\n        const cardNameContainer = document.getElementById(cardName.containerId);\n\n        if (\n            !cardNumberContainer ||\n            !cardExpiryContainer ||\n            !cardCodeContainer ||\n            !cardNameContainer\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to create hosted payment fields to invalid HTML container elements.',\n            );\n        }\n\n        cardNumberContainer.dataset.bluesnap = HostedFieldTagId.CardNumber;\n        cardExpiryContainer.dataset.bluesnap = HostedFieldTagId.CardExpiry;\n        cardCodeContainer.dataset.bluesnap = HostedFieldTagId.CardCode;\n        cardNameContainer.dataset.bluesnap = HostedFieldTagId.CardName;\n    }\n\n    private _setCustomStoredCardsBlueSnapAttributes(fields: HostedStoredCardFieldOptionsMap): void {\n        const { cardNumberVerification, cardCodeVerification } = fields;\n\n        const cardNumberContainer =\n            cardNumberVerification && document.getElementById(cardNumberVerification.containerId);\n        const cardCodeContainer =\n            cardCodeVerification && document.getElementById(cardCodeVerification.containerId);\n\n        if (!cardNumberContainer && !cardCodeContainer) {\n            return;\n        }\n\n        if (cardNumberContainer) {\n            cardNumberContainer.dataset.bluesnap = HostedFieldTagId.CardNumber;\n        }\n\n        if (cardCodeContainer) {\n            cardCodeContainer.dataset.bluesnap = HostedFieldTagId.CardCode;\n        }\n    }\n}\n","import {\n    BlueSnapDirectErrorDescription,\n    BlueSnapDirectInputValidationErrorDescription,\n} from '../types';\n\nexport default function isBlueSnapDirectInputValidationErrorDescription(\n    errorDescription?: BlueSnapDirectErrorDescription,\n): errorDescription is BlueSnapDirectInputValidationErrorDescription {\n    if (errorDescription === undefined) {\n        return false;\n    }\n\n    return [BlueSnapDirectErrorDescription.EMPTY, BlueSnapDirectErrorDescription.INVALID].includes(\n        errorDescription,\n    );\n}\n","import {\n    HostedFieldType,\n    HostedInputValidateErrorData,\n    HostedInputValidateErrorDataMap,\n    HostedInputValidateResults,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapHostedFieldType, CREDIT_CARD_ERRORS } from '../bluesnap-direct-constants';\nimport {\n    BlueSnapDirectInputValidationErrorDescription as ErrorDescription,\n    BlueSnapDirectHostedFieldTagId as HostedFieldTagId,\n} from '../types';\n\nexport default class BlueSnapHostedInputValidator {\n    private _errors: HostedInputValidateErrorDataMap = {};\n\n    initialize(): void {\n        this._errors = {\n            cardNumber: [CREDIT_CARD_ERRORS.empty.cardNumber],\n            cardExpiry: [CREDIT_CARD_ERRORS.empty.cardExpiry],\n            cardCode: [CREDIT_CARD_ERRORS.empty.cardCode],\n            cardName: [CREDIT_CARD_ERRORS.empty.cardName],\n        };\n    }\n\n    initializeValidationFields(): void {\n        this._errors = {\n            cardNumberVerification: [CREDIT_CARD_ERRORS.empty.cardNumber],\n        };\n    }\n\n    validate(error?: {\n        tagId: HostedFieldTagId;\n        errorDescription?: ErrorDescription;\n    }): HostedInputValidateResults {\n        if (error) {\n            this._updateErrors(error.tagId, error.errorDescription);\n        }\n\n        return {\n            isValid: Object.values(this._errors).every(\n                (errorData: HostedInputValidateErrorData[]) => errorData.length === 0,\n            ),\n            errors: this._errors,\n        };\n    }\n\n    private _updateErrors(tagId: HostedFieldTagId, errorDescription?: ErrorDescription): void {\n        const fieldType = this._errors.cardNumberVerification\n            ? HostedFieldType.CardNumberVerification\n            : BlueSnapHostedFieldType[tagId];\n\n        this._errors[fieldType] = errorDescription\n            ? [CREDIT_CARD_ERRORS[errorDescription][fieldType]]\n            : [];\n    }\n}\n","import {\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BluesnapDirectNocInputAllowedStyle as AllowedStyle,\n    BlueSnapDirectStyle,\n    BlueSnapDirectErrorCode as ErrorCode,\n    BlueSnapDirectErrorDescription as ErrorDescription,\n    BlueSnapDirectEventOrigin as EventOrigin,\n    BlueSnapDirectHostedFieldTagId as HostedFieldTagId,\n    BlueSnapDirectHostedPaymentFieldsOptions as HostedPaymentFieldsOptions,\n    BlueSnapDirectStyleDeclaration as StyleDeclaration,\n} from '../types';\nimport isArrayOfAllowedProps from '../utils/is-array-of-allowed-props';\n\nexport default class BluesnapDirectNameOnCardInput {\n    private _input?: HTMLInputElement;\n    private _style?: BlueSnapDirectStyle;\n\n    attach(\n        {\n            style,\n            onFieldEventHandler: { onFocus, onBlur, onValid, onError, onEnter } = {},\n        }: HostedPaymentFieldsOptions,\n        accessibilityLabel?: string,\n        placeholder?: string,\n    ): void {\n        this._style = style;\n\n        this._create();\n\n        this._getInput().addEventListener('focus', this._handleFocus(onFocus));\n        this._getInput().addEventListener('blur', this._handleBlur(onBlur, onValid, onError));\n        this._getInput().addEventListener('enter', this._handleEnter(onEnter));\n\n        if (accessibilityLabel) {\n            this._getInput().setAttribute('aria-label', accessibilityLabel);\n        }\n\n        if (placeholder) {\n            this._getInput().placeholder = placeholder;\n        }\n\n        document.querySelector('[data-bluesnap=\"noc\"]')?.appendChild(this._getInput());\n    }\n\n    getValue(): string {\n        return this._getInput().value;\n    }\n\n    detach(): void {\n        if (this._input) {\n            this._input.remove();\n            this._input = undefined;\n        }\n    }\n\n    private _handleFocus(\n        onFocus: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onFocus'],\n    ): (event: Event) => void {\n        return () => {\n            this._applyStyles(this._style?.[':focus']);\n\n            onFocus?.(HostedFieldTagId.CardName);\n        };\n    }\n\n    private _handleBlur(\n        onBlur: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onBlur'],\n        onValid: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onValid'],\n        onError: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onError'],\n    ): (event: Event) => void {\n        return ({ target }) => {\n            onBlur?.(HostedFieldTagId.CardName);\n\n            if (target instanceof HTMLInputElement) {\n                if (/\\w{1,200}/.test(target.value)) {\n                    this._applyStyles(this._style?.input);\n\n                    onValid?.(HostedFieldTagId.CardName);\n                } else {\n                    this._applyStyles(this._style?.['.invalid']);\n\n                    onError?.(\n                        HostedFieldTagId.CardName,\n                        ErrorCode.INVALID_OR_EMPTY,\n                        ErrorDescription.EMPTY,\n                        EventOrigin.ON_BLUR,\n                    );\n                }\n            }\n        };\n    }\n\n    private _handleEnter(\n        onEnter: Required<HostedPaymentFieldsOptions>['onFieldEventHandler']['onEnter'],\n    ): (event: Event) => void {\n        return () => onEnter?.(HostedFieldTagId.CardName);\n    }\n\n    private _applyStyles(styles: StyleDeclaration = {}): void {\n        const allowedStyle: AllowedStyle = {\n            color: styles.color,\n            fontFamily: styles['font-family'],\n            fontSize: styles['font-size'],\n            fontWeight: styles['font-weight'],\n        };\n        const styleKeys = Object.keys(allowedStyle);\n\n        if (isArrayOfAllowedProps(styleKeys)) {\n            styleKeys.forEach((key) => {\n                if (!allowedStyle[key]) {\n                    return;\n                }\n\n                this._getInput().style[key] = allowedStyle[key] || '';\n            });\n        }\n    }\n\n    private _configureInput(): void {\n        this._getInput().autocomplete = 'cc-name';\n        this._getInput().id = HostedFieldTagId.CardName;\n        this._getInput().inputMode = 'text';\n        this._getInput().maxLength = 200;\n        this._getInput().style.backgroundColor = 'transparent';\n        this._getInput().style.border = '0';\n        this._getInput().style.height = '100%';\n        this._getInput().style.margin = '0';\n        this._getInput().style.outline = 'none';\n        this._getInput().style.padding = '0';\n        this._getInput().style.width = '100%';\n        this._getInput().type = 'text';\n    }\n\n    private _getInput(): HTMLInputElement {\n        return guard(\n            this._input,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _create(): void {\n        this._input = document.createElement('input');\n        this._configureInput();\n        this._applyStyles(this._style?.input);\n    }\n}\n","import { BluesnapDirectNocInputAllowedStyle } from '../types';\n\nexport default function isArrayOfAllowedProps(\n    fields: string[],\n): fields is Array<keyof BluesnapDirectNocInputAllowedStyle> {\n    return fields.every((field) =>\n        ['color', 'fontFamily', 'fontSize', 'fontWeight'].includes(field),\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectHostWindow, BlueSnapDirectSdk } from '../types';\n\nexport enum BlueSnapDirectSdkEnv {\n    PRODUCTION = 'https://pay.bluesnap.com/web-sdk/5/bluesnap.js',\n    SANDBOX = 'https://sandpay.bluesnap.com/web-sdk/5/bluesnap.js',\n}\n\nexport default class BlueSnapDirectScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BlueSnapDirectHostWindow = window,\n    ) {}\n\n    async load(testMode = false): Promise<BlueSnapDirectSdk> {\n        if (this._window.bluesnap) {\n            return this._window.bluesnap;\n        }\n\n        await this._scriptLoader.loadScript(\n            testMode ? BlueSnapDirectSdkEnv.SANDBOX : BlueSnapDirectSdkEnv.PRODUCTION,\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!this._window.bluesnap) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.bluesnap;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BlueSnapDirect3ds from './bluesnap-direct-3ds';\nimport BlueSnapDirectCreditCardPaymentStrategy from './bluesnap-direct-credit-card-payment-strategy';\nimport BlueSnapDirectHostedForm from './bluesnap-direct-hosted-form';\nimport BlueSnapHostedInputValidator from './bluesnap-direct-hosted-input-validator';\nimport BluesnapDirectNameOnCardInput from './bluesnap-direct-name-on-card-input';\nimport BlueSnapDirectScriptLoader from './bluesnap-direct-script-loader';\n\nconst createBlueSnapDirectCreditCardPaymentStrategy: PaymentStrategyFactory<\n    BlueSnapDirectCreditCardPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BlueSnapDirectCreditCardPaymentStrategy(\n        new BlueSnapDirectScriptLoader(getScriptLoader()),\n        paymentIntegrationService,\n        new BlueSnapDirectHostedForm(\n            new BluesnapDirectNameOnCardInput(),\n            new BlueSnapHostedInputValidator(),\n        ),\n        new BlueSnapDirect3ds(),\n    );\n\nexport default toResolvableModule(createBlueSnapDirectCreditCardPaymentStrategy, [\n    { id: 'credit_card', gateway: 'bluesnapdirect' },\n]);\n","import {\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapDirectRedirectResponse } from '../types';\nimport {\n    isEcpInstrument,\n    isIdealInstrument,\n    isPayByBankInstrument,\n    isSepaInstrument,\n} from '../utils/is-bluesnap-direct-instrument';\nimport isBlueSnapDirectRedirectResponseProviderData from '../utils/is-bluesnap-direct-provider-data';\n\nexport default class BlueSnapDirectAPMPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody): Promise<void> {\n        const paymentPayload = this._formatePaymentPayload(payload);\n\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            if (this._isBlueSnapDirectRedirectResponse(error)) {\n                const providerData: unknown =\n                    error.body.provider_data && JSON.parse(error.body.provider_data);\n\n                let frameUrl = error.body.additional_action_required.data.redirect_url;\n\n                if (isBlueSnapDirectRedirectResponseProviderData(providerData)) {\n                    const providerDataQuery = new URLSearchParams(providerData).toString();\n\n                    frameUrl = `${frameUrl}&${providerDataQuery}`;\n                }\n\n                return new Promise(() => window.location.replace(frameUrl));\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _formatePaymentPayload({ payment }: OrderRequestBody) {\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (\n            payment.paymentData &&\n            isVaultedInstrument(payment.paymentData) &&\n            isHostedInstrumentLike(payment.paymentData)\n        ) {\n            return {\n                ...payment,\n                paymentData: {\n                    instrumentId: payment.paymentData.instrumentId,\n                    shouldSetAsDefaultInstrument:\n                        !!payment.paymentData.shouldSetAsDefaultInstrument,\n                },\n            };\n        }\n\n        if (isEcpInstrument(payment.paymentData)) {\n            return {\n                ...payment,\n                paymentData: {\n                    formattedPayload: {\n                        ecp: {\n                            account_number: payment.paymentData.accountNumber,\n                            account_type: payment.paymentData.accountType,\n                            shopper_permission: payment.paymentData.shopperPermission,\n                            routing_number: payment.paymentData.routingNumber,\n                            ...(payment.paymentData.companyName\n                                ? { company_name: payment.paymentData.companyName }\n                                : {}),\n                        },\n                        vault_payment_instrument: payment.paymentData.shouldSaveInstrument,\n                        set_as_default_stored_instrument:\n                            payment.paymentData.shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n        }\n\n        if (isSepaInstrument(payment.paymentData)) {\n            return {\n                ...payment,\n                paymentData: {\n                    formattedPayload: {\n                        sepa_direct_debit: {\n                            iban: payment.paymentData.iban,\n                            first_name: payment.paymentData.firstName,\n                            last_name: payment.paymentData.lastName,\n                            shopper_permission: payment.paymentData.shopperPermission,\n                        },\n                        vault_payment_instrument: payment.paymentData.shouldSaveInstrument,\n                        set_as_default_stored_instrument:\n                            payment.paymentData.shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n        }\n\n        if (isIdealInstrument(payment.paymentData)) {\n            return {\n                ...payment,\n                paymentData: {\n                    formattedPayload: {\n                        ideal: {\n                            bic: payment.paymentData.bic,\n                        },\n                    },\n                },\n            };\n        }\n\n        if (isPayByBankInstrument(payment.paymentData)) {\n            return {\n                ...payment,\n                paymentData: {\n                    formattedPayload: {\n                        pay_by_bank: {\n                            iban: payment.paymentData.iban,\n                        },\n                    },\n                },\n            };\n        }\n\n        return {\n            methodId: payment.methodId,\n        };\n    }\n\n    private _isBlueSnapDirectRedirectResponse(\n        response: unknown,\n    ): response is BlueSnapDirectRedirectResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const partialResponse: Partial<BlueSnapDirectRedirectResponse> = response;\n\n        if (!partialResponse.body) {\n            return false;\n        }\n\n        const partialBody: Partial<BlueSnapDirectRedirectResponse['body']> = partialResponse.body;\n\n        return (\n            partialBody.status === 'additional_action_required' &&\n            !!partialBody.additional_action_required?.data.redirect_url\n        );\n    }\n}\n","import { BlueSnapDirectRedirectResponseProviderData } from '../types';\n\nexport default function isBlueSnapDirectRedirectResponseProviderData(\n    value: unknown,\n): value is BlueSnapDirectRedirectResponseProviderData {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n\n    const partialValue: Partial<BlueSnapDirectRedirectResponseProviderData> = value;\n\n    if (!partialValue.merchantid) {\n        return false;\n    }\n\n    return typeof partialValue.merchantid === 'string';\n}\n","import {\n    WithEcpInstrument,\n    WithIdealInstrument,\n    WithPayByBankInstrument,\n    WithSepaInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport function isEcpInstrument(data: unknown): data is WithEcpInstrument {\n    return Boolean(\n        typeof data === 'object' &&\n            data !== null &&\n            'accountNumber' in data &&\n            'accountType' in data &&\n            'shopperPermission' in data &&\n            'routingNumber' in data,\n    );\n}\n\nexport function isIdealInstrument(paymentData: unknown): paymentData is WithIdealInstrument {\n    return Boolean(typeof paymentData === 'object' && paymentData !== null && 'bic' in paymentData);\n}\n\nexport function isSepaInstrument(paymentData: unknown): paymentData is WithSepaInstrument {\n    return Boolean(\n        typeof paymentData === 'object' &&\n            paymentData !== null &&\n            'iban' in paymentData &&\n            'firstName' in paymentData &&\n            'lastName' in paymentData &&\n            'shopperPermission' in paymentData,\n    );\n}\n\nexport function isPayByBankInstrument(\n    paymentData: unknown,\n): paymentData is WithPayByBankInstrument {\n    return Boolean(\n        typeof paymentData === 'object' &&\n            paymentData !== null &&\n            'iban' in paymentData &&\n            !('firstName' in paymentData) &&\n            !('lastName' in paymentData) &&\n            !('shopperPermission' in paymentData),\n    );\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BlueSnapDirectAPMPaymentStrategy from './bluesnap-direct-apm-payment-strategy';\n\nconst createBlueSnapDirectAPMPaymentStrategy: PaymentStrategyFactory<\n    BlueSnapDirectAPMPaymentStrategy\n> = (paymentIntegrationService) => new BlueSnapDirectAPMPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createBlueSnapDirectAPMPaymentStrategy, [\n    { gateway: 'bluesnapdirect' },\n]);\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","import { noop } from 'lodash';\n\nimport {\n    CancellablePromise,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BlueSnapV2StyleProps } from './bluesnapv2';\nimport {\n    BlueSnapV2PaymentInitializeOptions,\n    WithBlueSnapV2PaymentInitializeOptions,\n} from './bluesnapv2-payment-options';\n\nconst IFRAME_NAME = 'bluesnapv2_hosted_payment_page';\n\nexport default class BlueSnapV2PaymentStrategy implements PaymentStrategy {\n    private _initializeOptions?: BlueSnapV2PaymentInitializeOptions;\n\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentInitializeOptions & WithBlueSnapV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { payment } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { onLoad, style } = this._initializeOptions;\n        const frame = this._createIframe(IFRAME_NAME, style);\n        const promise = new CancellablePromise<undefined>(new Promise(noop));\n\n        onLoad(frame, () => promise.cancel(new PaymentMethodCancelledError()));\n\n        await this._paymentIntegrationService.submitOrder(orderRequest, options);\n\n        await this._paymentIntegrationService.initializeOffsitePayment({\n            methodId: payment.methodId,\n            gatewayId: payment.gatewayId,\n            shouldSaveInstrument: false,\n            target: frame.name,\n            promise: promise.promise,\n        });\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const order = state.getOrder();\n        const status = state.getPaymentStatus();\n\n        if (\n            order &&\n            (status === PaymentStatusTypes.ACKNOWLEDGE || status === PaymentStatusTypes.FINALIZE)\n        ) {\n            await this._paymentIntegrationService.finalizeOrder(options);\n\n            return;\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithBlueSnapV2PaymentInitializeOptions,\n    ): Promise<void> {\n        this._initializeOptions = options && options.bluesnapv2;\n\n        await Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createIframe(name: string, style?: BlueSnapV2StyleProps): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        iframe.setAttribute(\n            'sandbox',\n            'allow-top-navigation allow-scripts allow-forms allow-same-origin',\n        );\n\n        iframe.name = name;\n\n        if (style) {\n            const { border, height, width } = style;\n\n            iframe.style.border = border ?? '';\n            iframe.style.height = height ?? '';\n            iframe.style.width = width ?? '';\n        }\n\n        return iframe;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BlueSnapV2PaymentStrategy from './bluesnapv2-payment-strategy';\n\nconst createBluesnapV2PaymentStrategy: PaymentStrategyFactory<BlueSnapV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BlueSnapV2PaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createBluesnapV2PaymentStrategy, [{ gateway: 'bluesnapv2' }]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceSdk {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: [\n                    'fastlane',\n                    'buttons',\n                    'payment-fields',\n                    'hosted-fields',\n                    'three-domain-secure',\n                ],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nexport const DEFAULT_CONTAINER_STYLES = {\n    position: 'fixed',\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","export enum CartSource {\n    BuyNow = 'BUY_NOW',\n}\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\nexport interface PayPalCommerceSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\n\nexport interface PayPalCommerceCardFieldsConfig {\n    inputEvents: {\n        onChange(data: PayPalCommerceCardFieldsState): void;\n        onFocus(data: PayPalCommerceCardFieldsState): void;\n        onBlur(data: PayPalCommerceCardFieldsState): void;\n        onInputSubmitRequest(data: PayPalCommerceCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: PayPalCommerceCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: PayPalCommerceHostedFieldsRenderOptions['styles'];\n    onApprove(data: PayPalCommerceCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface PayPalCommerceCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface PayPalCommerceCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype PayPalCommerceCardFieldsCard = PayPalCommerceHostedFieldsCard;\n\nexport interface PayPalCommerceCardFieldsState {\n    cards: PayPalCommerceCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: PayPalCommerceCardFieldsFieldData;\n        cardNumberField: PayPalCommerceCardFieldsFieldData;\n        cardNameField?: PayPalCommerceCardFieldsFieldData;\n        cardExpiryField: PayPalCommerceCardFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface PayPalCommerceFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceCardFields {\n    isEligible(): boolean;\n    CVVField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    ExpiryField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NameField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    NumberField(config?: PayPalCommerceFieldsInitializationData): PayPalCommerceFields;\n    submit(config?: PayPalCommerceCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<PayPalCommerceCardFieldsState>;\n}\n\nexport interface PayPalCommerceCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (data: PayPalCommerceCardFieldsConfig) => Promise<PayPalCommerceCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: PayPalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    isAppSwitchEnabled?: boolean;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Commerce BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * PayPal Commerce Hosted Fields\n *\n */\nexport interface PayPalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PayPalCommerceHostedFieldOption;\n        cvv?: PayPalCommerceHostedFieldOption;\n        expirationDate?: PayPalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PayPalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PayPalCommerceHostedFields {\n    submit(\n        options?: PayPalCommerceHostedFieldsSubmitOptions,\n    ): Promise<PayPalCommerceHostedFieldsApprove>;\n    getState(): PayPalCommerceHostedFieldsState;\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface PayPalCommerceHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface PayPalCommerceHostedFieldsState {\n    cards: PayPalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PayPalCommerceHostedFieldsFieldData;\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\n        cvv?: PayPalCommerceHostedFieldsFieldData;\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface PayPalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n    hasReturned?(): boolean;\n    resume?(): void;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayPalCommerce Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: PayPalCommerceMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface PayPalCommerceMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n    fastlaneToken?: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceRequestSender from './paypal-commerce-request-sender';\nimport PayPalCommerceScriptLoader from './paypal-commerce-script-loader';\nimport {\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceInitializationData,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.paypalCommerceRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.paypalCommerceRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.paypalCommerceRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/paypalcommerce`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'paypalcommerce',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    ComponentsScriptType,\n    FundingType,\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalCommerceScriptParams,\n    PayPalSDK,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceScriptLoader {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<PayPalCommerceScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<PayPalCommerceScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalCommerceScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType = [\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ];\n        const enableFunding: FundingType = [\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ];\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceIntegrationService,\n    PayPalCommerceRequestSender,\n    PayPalCommerceScriptLoader,\n} from './index';\n\nconst createPayPalCommerceIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        new PayPalCommerceScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createPayPalCommerceIntegrationService;\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../paypal-commerce-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","export interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport function isBaseInstrument(instrument: unknown): instrument is BaseInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    return (\n        'bigpayToken' in instrument &&\n        'defaultInstrument' in instrument &&\n        'provider' in instrument &&\n        'trustedShippingAddress' in instrument &&\n        'method' in instrument &&\n        'type' in instrument\n    );\n}\n","import {\n    HostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentPayload,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getPaypalMessagesStylesFromBNPLConfig,\n    isPaypalCommerceProviderError,\n    isRedirectActionError,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isBaseInstrument } from '@bigcommerce/checkout-sdk/utility';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommercePaymentInitializeOptions, {\n    WithPayPalCommercePaymentInitializeOptions,\n} from './paypal-commerce-payment-initialize-options';\n\nexport default class PayPalCommercePaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n    private paypalcommerce?: PayPalCommercePaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommercePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce } = options || {};\n\n        this.paypalcommerce = paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const { container, bannerContainerId } = paypalcommerce;\n\n        const {\n            orderId,\n            paypalBNPLConfiguration = [],\n            isPayPalCreditAvailable,\n        } = paymentMethod.initializationData || {};\n\n        if (bannerContainerId !== undefined) {\n            if (!document.getElementById(bannerContainerId)) {\n                // eslint-disable-next-line no-console\n                console.error('Unable to create banner without valid banner container ID.');\n\n                return;\n            }\n\n            const bannerConfiguration = paypalBNPLConfiguration?.find(\n                ({ id }) => id === 'checkout',\n            );\n\n            if (isPayPalCreditAvailable || !bannerConfiguration?.status) {\n                return;\n            }\n\n            const paypalMessages = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                state.getCartOrThrow().currency.code,\n            );\n\n            if (!paypalMessages || typeof paypalMessages?.Messages !== 'function') {\n                console.error(\n                    '[BC PayPalCommerce PayLater]: banner could not be rendered, due to issues with loading PayPal SDK',\n                );\n\n                return;\n            }\n\n            return this.renderMessages(paypalMessages, bannerContainerId, bannerConfiguration);\n        }\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        this.loadingIndicatorContainer = container?.split('#')[1];\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (paypalcommerce.onInit && typeof paypalcommerce.onInit === 'function') {\n            paypalcommerce.onInit(() => this.renderButton(methodId, paypalcommerce));\n        }\n\n        if (\n            paypalcommerce.shouldRenderPayPalButtonOnInitialization === undefined ||\n            paypalcommerce.shouldRenderPayPalButtonOnInitialization\n        ) {\n            this.renderButton(methodId, paypalcommerce);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { onError } = this.paypalcommerce || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n\n        if (this.isPayPalVaultedInstrumentPaymentData(paymentData) && !this.orderId) {\n            this.orderId = await this.createOrder();\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        const paymentPayload = this.isPayPalVaultedInstrumentPaymentData(paymentData)\n            ? this.prepareVaultedInstrumentPaymentPayload(methodId, this.orderId, paymentData)\n            : this.preparePaymentPayload(methodId, this.orderId, paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            if (isRedirectActionError(error)) {\n                const redirectUrl = error.body.additional_action_required?.data?.redirect_url;\n\n                return new Promise(() => window.location.replace(redirectUrl));\n            }\n\n            if (this.isProviderError(error)) {\n                await this.paypalCommerceIntegrationService.loadPayPalSdk(payment.methodId);\n\n                await new Promise((_resolve, reject) => {\n                    if (this.paypalcommerce) {\n                        this.paypalButton?.close();\n                        this.renderButton(payment.methodId, this.paypalcommerce);\n                        this.handleError(new Error('INSTRUMENT_DECLINED'), onError);\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error, onError);\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    private prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: VaultedInstrument & HostedInstrument,\n    ): Payment {\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        const shouldConfirmInstrument = !this.isTrustedVaultingFlow(paymentData);\n\n        if (shouldConfirmInstrument) {\n            return {\n                methodId,\n                paymentData: {\n                    shouldSaveInstrument: shouldConfirmInstrument,\n                    shouldSetAsDefaultInstrument,\n                    formattedPayload: {\n                        paypal_account: {\n                            order_id: paypalOrderId,\n                        },\n                    },\n                },\n            };\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                    bigpay_token: {\n                        token: instrumentId,\n                    },\n                },\n            },\n        };\n    }\n\n    private preparePaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalcommerce: PayPalCommercePaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalcommerce;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            ...(this.isPaypalCommerceAppSwitchEnabled(methodId) && {\n                appSwitchWhenAvailable: true,\n            }),\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () => this.createOrder(),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onError: (error) => this.handleError(error, onError),\n            onCancel: () => this.toggleLoadingIndicator(false),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        if (this.paypalButton.hasReturned?.() && this.isPaypalCommerceAppSwitchEnabled(methodId)) {\n            this.paypalButton.resume?.();\n        } else {\n            this.paypalButton.render(container);\n        }\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommercePaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        return onValidate?.(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommercePaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm?.();\n    }\n\n    private handleError(\n        error: unknown,\n        onError: PayPalCommercePaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private async createOrder(): Promise<string> {\n        const fieldsValues = this.getFieldsValues();\n\n        return this.paypalCommerceIntegrationService.createOrder('paypalcommercecheckout', {\n            shouldSaveInstrument: fieldsValues?.shouldSaveInstrument || false,\n        });\n    }\n\n    /**\n     *\n     * Vaulting flow methods\n     *\n     * */\n    private getFieldsValues(): HostedInstrument | undefined {\n        const { getFieldsValues } = this.paypalcommerce || {};\n\n        return typeof getFieldsValues === 'function' ? getFieldsValues() : undefined;\n    }\n\n    private isTrustedVaultingFlow(paymentData?: PaymentInstrumentPayload): boolean {\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            const state = this.paymentIntegrationService.getState();\n\n            const instruments = state.getInstruments();\n            const findInstrument = instruments?.find(\n                (instrument) =>\n                    isBaseInstrument(instrument) &&\n                    instrument.bigpayToken === paymentData.instrumentId,\n            );\n            const trustedShippingAddress = isBaseInstrument(findInstrument)\n                ? findInstrument.trustedShippingAddress\n                : {};\n\n            return !!trustedShippingAddress;\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Guards\n     *\n     */\n    private isPayPalVaultedInstrumentPaymentData(\n        paymentData?: PaymentInstrumentPayload,\n    ): paymentData is VaultedInstrument & HostedInstrument {\n        return (\n            !!paymentData && isVaultedInstrument(paymentData) && isHostedInstrumentLike(paymentData)\n        );\n    }\n\n    /**\n     *\n     * Render Pay Later Messages\n     *\n     * */\n    private renderMessages(\n        paypalMessages: PayPalMessagesSdk,\n        bannerContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'payment',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        paypalMessages.Messages(paypalMessagesOptions).render(`#${bannerContainerId}`);\n    }\n\n    /**\n     *\n     * Error handling\n     *\n     */\n    private isProviderError(error: unknown): boolean {\n        if (isPaypalCommerceProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e) => e.provider_error) || [];\n\n            return paypalProviderError[0]?.provider_error?.code === 'INSTRUMENT_DECLINED';\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * PayPal AppSwitch enabling handling\n     *\n     */\n    private isPaypalCommerceAppSwitchEnabled(methodId: string): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        return paymentMethod.initializationData?.isAppSwitchEnabled || false;\n    }\n}\n","import { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ProviderError } from './is-paypal-commerce-provider-error';\n\nexport interface RedirectActionError extends ProviderError {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default function isRedirectActionError(error: unknown): error is RedirectActionError {\n    return (\n        isRequestError(error) && error.body.additional_action_required?.type === 'offsite_redirect'\n    );\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isPaypalCommerceProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommercePaymentStrategy from './paypal-commerce-payment-strategy';\n\nconst createPayPalCommercePaymentStrategy: PaymentStrategyFactory<PayPalCommercePaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new PayPalCommercePaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new PayPalCommerceSdk(getScriptLoader()),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createPayPalCommercePaymentStrategy, [{ id: 'paypalcommerce' }]);\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalCommerceSdk from './paypal-commerce-sdk';\n\nexport default function createPayPalCommerceSdk(): PayPalCommerceSdk {\n    return new PayPalCommerceSdk(createScriptLoader());\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditPaymentInitializeOptions, {\n    WithPayPalCommerceCreditPaymentInitializeOptions,\n} from './paypal-commerce-credit-payment-initialize-options';\n\nexport default class PayPalCommerceCreditPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommerceCreditPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce, paypalcommercecredit } = options || {};\n\n        const paypalOptions = paypalcommercecredit || paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const { paypalBNPLConfiguration = [], orderId } = paymentMethod.initializationData || {};\n        const { bannerContainerId, container } = paypalOptions;\n\n        if (bannerContainerId !== undefined) {\n            if (!document.getElementById(bannerContainerId)) {\n                // eslint-disable-next-line no-console\n                console.error('Unable to create banner without valid banner container ID.');\n\n                return;\n            }\n\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === 'checkout');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            const paypalMessages = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                state.getCartOrThrow().currency.code,\n            );\n\n            return this.renderMessages(paypalMessages, bannerContainerId, bannerConfiguration);\n        }\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = container?.split('#')[1];\n\n        this.renderButton(methodId, paypalOptions);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paypalCommerceIntegrationService.submitPayment(payment.methodId, this.orderId);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalOptions: PayPalCommerceCreditPaymentInitializeOptions,\n    ): void {\n        if (!paypalOptions?.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalOptions;\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (hasRenderedSmartButton) {\n                return;\n            }\n\n            const buttonOptions: PayPalCommerceButtonsOptions = {\n                fundingSource,\n                style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                    checkoutPaymentButtonStyles,\n                ),\n                createOrder: () =>\n                    this.paypalCommerceIntegrationService.createOrder(\n                        'paypalcommercecreditcheckout',\n                    ),\n                onClick: (_, actions) => this.handleClick(actions, onValidate),\n                onApprove: (data) => this.handleApprove(data, submitForm),\n                onCancel: () => this.toggleLoadingIndicator(false),\n                onError: (error) => this.handleError(error, onError),\n            };\n\n            this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n            if (!this.paypalButton.isEligible() && fundingSource === paypalSdk.FUNDING.PAYLATER) {\n                return;\n            }\n\n            if (!this.paypalButton.isEligible() && fundingSource === paypalSdk.FUNDING.CREDIT) {\n                throw new NotImplementedError(\n                    `PayPal ${fundingSource} is not available for your region. Please use PayPal Checkout instead.`,\n                );\n            }\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            this.paypalButton.render(container);\n            hasRenderedSmartButton = true;\n        });\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommerceCreditPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        if (onValidate && typeof onValidate === 'function') {\n            return onValidate(onValidationPassed, reject);\n        }\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceCreditPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        if (submitForm && typeof submitForm === 'function') {\n            submitForm();\n        }\n    }\n\n    private handleError(\n        error: Error,\n        onError: PayPalCommerceCreditPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Render Pay Later Messages\n     *\n     * */\n    private renderMessages(\n        paypalMessages: PayPalMessagesSdk,\n        bannerContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'payment',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        paypalMessages.Messages(paypalMessagesOptions).render(`#${bannerContainerId}`);\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommerceCreditPaymentStrategy from './paypal-commerce-credit-payment-strategy';\n\nconst createPayPalCommerceCreditPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceCreditPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n        createPayPalCommerceSdk(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditPaymentStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    ClickCallbackActions,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoPaymentInitializeOptions, {\n    WithPayPalCommerceVenmoPaymentInitializeOptions,\n} from './paypal-commerce-venmo-payment-initialize-options';\n\nexport default class PayPalCommerceVenmoPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithPayPalCommerceVenmoPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommerce, paypalcommercevenmo } = options || {};\n\n        const paypalOptions = paypalcommercevenmo || paypalcommerce;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = paypalOptions.container.split('#')[1];\n\n        this.renderButton(methodId, paypalOptions);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paypalCommerceIntegrationService.submitPayment(payment.methodId, this.orderId);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } = paypalcommercevenmo;\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmocheckout'),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => this.toggleLoadingIndicator(false),\n            onError: (error) => this.handleError(error, onError),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            throw new NotImplementedError(\n                `PayPal Venmo is not available for your region. Please use PayPal Checkout instead.`,\n            );\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: PayPalCommerceVenmoPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        return onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceVenmoPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n        this.toggleLoadingIndicator(false);\n    }\n\n    private handleError(\n        error: Error,\n        onError: PayPalCommerceVenmoPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoPaymentStrategy from './paypal-commerce-venmo-payment-strategy';\n\nconst createPayPalCommerceVenmoPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceVenmoPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoPaymentStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalApmSdk, PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    NonInstantAlternativePaymentMethods,\n    PayPalCommerceButtons,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    PayPalOrderStatus,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsPaymentOptions, {\n    WithPayPalCommerceAlternativeMethodsPaymentInitializeOptions,\n} from './paypal-commerce-alternative-methods-payment-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class PayPalCommerceAlternativeMethodsPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: PayPalCommerceButtons;\n    private paypalApms?: PayPalApmSdk;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n    private isPollingEnabled = false;\n    private paypalcommercealternativemethods?: PayPalCommerceAlternativeMethodsPaymentOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const {\n            gatewayId,\n            methodId,\n            paypalcommerce, // FIXME: this option is deprecated\n            paypalcommercealternativemethods,\n        } = options;\n        const paypalOptions = paypalcommercealternativemethods || paypalcommerce;\n\n        this.paypalcommercealternativemethods = paypalcommercealternativemethods;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { orderId, shouldRenderFields } = paymentMethod.initializationData || {};\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        this.isPollingEnabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5192.paypal_commerce_ideal_polling',\n        );\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        this.paypalApms = await this.paypalCommerceSdk.getPayPalApmsSdk(\n            paymentMethod,\n            state.getCartOrThrow().currency.code,\n        );\n\n        this.loadingIndicatorContainer = paypalOptions.container.split('#')[1];\n\n        this.renderButton(methodId, gatewayId, paypalOptions);\n\n        if (shouldRenderFields) {\n            this.renderFields(methodId, paypalOptions);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        if (this.isPollingEnabled && methodId === 'ideal') {\n            await new Promise((resolve, reject) => {\n                void this.initializePollingMechanism(methodId, resolve, reject, gatewayId);\n            });\n        }\n\n        if (!this.isNonInstantPaymentMethod(methodId)) {\n            await this.paymentIntegrationService.submitOrder(order, options);\n        }\n\n        await this.paypalCommerceIntegrationService.submitPayment(\n            methodId,\n            this.orderId,\n            gatewayId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: (value?: unknown) => void,\n        rejectPromise: (value?: unknown) => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.paypalCommerceIntegrationService.getOrderStatus(\n                gatewayId,\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.Approved;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                paypalcommercealternativemethods: this.paypalcommercealternativemethods,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsPaymentInitializeOptions,\n    ) {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.paypalcommercealternativemethods || {};\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        gatewayId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { buttonStyle } = paymentMethod.initializationData || {};\n\n        const { container, onError, onRenderButton, submitForm } = paypalOptions;\n\n        const buttonOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: methodId,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(buttonStyle),\n            onInit: (_, actions) => paypalOptions.onInitButton(actions),\n            createOrder: () => this.onCreateOrder(methodId, gatewayId, paypalOptions),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => {\n                this.toggleLoadingIndicator(false);\n                this.deinitializePollingMechanism();\n            },\n            onError: (error) => {\n                this.deinitializePollingMechanism();\n                this.handleFailure(error, onError);\n            },\n            onClick: async (_, actions) =>\n                paypalOptions.onValidate(actions.resolve, actions.reject),\n        };\n\n        this.paypalButton = paypalAmpsSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async onCreateOrder(\n        methodId: string,\n        gatewayId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): Promise<string> {\n        const { onValidate } = paypalOptions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return () => Promise.resolve();\n        };\n\n        await onValidate(onValidationPassed, noop);\n\n        const orderId = await this.paypalCommerceIntegrationService.createOrder(\n            'paypalcommercealternativemethodscheckout',\n        );\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            const order = { useStoreCredit: false };\n            const options = {\n                params: {\n                    methodId,\n                    gatewayId,\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, orderId, gatewayId);\n        }\n\n        return orderId;\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: PayPalCommerceAlternativeMethodsPaymentOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleFailure(\n        error: Error,\n        onError: PayPalCommerceAlternativeMethodsPaymentOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Fields methods\n     *\n     * */\n    private renderFields(\n        methodId: string,\n        paypalOptions: PayPalCommerceAlternativeMethodsPaymentOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const { firstName, lastName, email } = state.getBillingAddressOrThrow();\n\n        const { apmFieldsContainer, apmFieldsStyles } = paypalOptions;\n\n        if (!apmFieldsContainer) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument should contain \"apmFieldsContainer\".',\n            );\n        }\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        const fieldsOptions = {\n            fundingSource: methodId,\n            style: apmFieldsStyles || {},\n            fields: {\n                name: {\n                    value: `${firstName} ${lastName}`,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        const paypalPaymentFields = paypalAmpsSdk.PaymentFields(fieldsOptions);\n\n        paypalPaymentFields.render(apmFieldsContainer);\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantAlternativePaymentMethods;\n    }\n\n    private getPaypalAmpsSdkOrThrow() {\n        if (!this.paypalApms) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalApms;\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PayPalCommerceAlternativeMethodsPaymentStrategy from './paypal-commerce-alternative-methods-payment-strategy';\n\nconst createPayPalCommerceAlternativeMethodsPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceAlternativeMethodsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsPaymentStrategy, [\n    { gateway: 'paypalcommercealternativemethods' },\n]);\n","import { HostedInstrument, NonceInstrument } from './payment';\n\ntype PaymentInstrument = CardInstrument | AccountInstrument | HostedInstrument | NonceInstrument;\n\nexport default PaymentInstrument;\n\nexport interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport interface CardInstrument extends BaseInstrument {\n    brand: string;\n    expiryMonth: string;\n    expiryYear: string;\n    iin: string;\n    last4: string;\n    type: 'card';\n    untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType;\n}\n\ninterface BaseAccountInstrument extends BaseInstrument {\n    method: string;\n    type: 'account' | 'bank';\n}\n\nexport interface PayPalInstrument extends BaseAccountInstrument {\n    externalId: string;\n    method: 'paypal';\n}\n\nexport interface AchInstrument extends BaseAccountInstrument {\n    issuer: string;\n    accountNumber: string;\n    type: 'bank';\n    method: 'ach' | 'ecp';\n}\n\nexport interface BankInstrument extends BaseAccountInstrument {\n    accountNumber: string;\n    issuer: string;\n    iban: string;\n    method: string;\n    type: 'bank';\n}\n\nexport type AccountInstrument = PayPalInstrument | BankInstrument | AchInstrument;\n\nexport interface VaultAccessToken {\n    vaultAccessToken: string;\n    vaultAccessExpiry: number;\n}\n\nexport interface SessionContext {\n    customerId: number;\n    storeId: string;\n    currencyCode?: string;\n}\n\nexport interface InstrumentRequestContext extends SessionContext {\n    authToken: string;\n}\n","import { CardInstrument, CustomerAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * PayPal Commerce Funding sources\n *\n */\nexport type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * PayPal Commerce Initialization Data\n *\n */\nexport interface PayPalCommerceInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    fastlaneStyles?: FastlaneStylesSettings;\n    connectClientToken?: string; // TODO: remove when PPCP Fastlane A/B test will be finished\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isAcceleratedCheckoutEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneStylingEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCommerceAnalyticsV2Enabled?: boolean; // PayPal Fastlane related\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: remove when PPCP Fastlane A/B test will be finished\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    threeDSVerificationMethod?: string;\n    isAppSwitchEnabled?: boolean;\n}\n\n/**\n *\n * PayPalCommerceHostWindow contains different\n * PayPal Sdk instances for different purposes\n *\n */\nexport interface PayPalCommerceHostWindow extends Window {\n    paypalFastlane?: PayPalFastlane;\n    paypalFastlaneSdk?: PayPalFastlaneSdk;\n    paypalMessages?: PayPalMessagesSdk;\n    paypalApms?: PayPalApmSdk;\n    paypalGooglePay?: PayPalGooglePaySdk;\n}\n\n/**\n *\n * PayPal SDK config\n *\n */\nexport interface PayPalSdkConfig {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'enable-funding'?: EnableFundingType;\n        'disable-funding'?: FundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: PayPalSdkComponents;\n    };\n    attributes: {\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-sdk-client-token'?: string;\n        'data-namespace'?: string;\n        'data-client-token'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type PayPalSdkComponents = Array<\n    | 'fastlane'\n    | 'messages'\n    | 'buttons'\n    | 'payment-fields'\n    | 'three-domain-secure'\n    | 'hosted-fields'\n    | 'googlepay'\n>;\n\n/**\n *\n * PayPal Sdk instances\n *\n */\nexport interface PayPalFastlaneSdk {\n    ThreeDomainSecureClient: {\n        isEligible(params: threeDSecureParameters): Promise<boolean>;\n        show(): Promise<ThreeDomainSecureClientShowResponse>;\n    };\n    Fastlane(options?: PayPalFastlaneOptions): Promise<PayPalFastlane>;\n}\n\ninterface ThreeDomainSecureClientShowResponse {\n    liabilityShift: LiabilityShiftEnum;\n    authenticationState: TDSecureAuthenticationState;\n    nonce: string; // Enriched nonce or the original nonce\n}\n\nexport enum TDSecureAuthenticationState {\n    Succeeded = 'succeeded',\n    Cancelled = 'cancelled',\n    Errored = 'errored',\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\nexport interface threeDSecureParameters {\n    amount: string;\n    currency: string;\n    nonce: string;\n    threeDSRequested: boolean;\n    transactionContext: {\n        experience_context: {\n            brand_name?: string;\n            locale: string;\n            return_url: string;\n            cancel_url: string;\n        };\n    };\n}\n\nexport interface PayPalMessagesSdk {\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PayPalApmSdk {\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\n}\n\nexport interface PayPalGooglePaySdk {\n    Googlepay(): GooglePay;\n}\n\n/**\n *\n * Google Pay related types\n *\n */\n\ninterface GooglePay {\n    config: () => Promise<GooglePayConfig>;\n    confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n    initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\n/**\n *\n * PayPal Commerce Buttons\n *\n */\nexport interface PayPalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PayPalCommerceButtonsOptions {\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: PayPalButtonApproveCallbackPayload,\n        actions: PayPalButtonApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(\n        data: PayPalButtonInitCallbackPayload,\n        actions: PayPalButtonInitCallbackActions,\n    ): Promise<void>;\n    onClick?(\n        data: PayPalButtonClickCallbackPayload,\n        actions: PayPalButtonClickCallbackActions,\n    ): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n}\n\nexport interface PayPalButtonClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface PayPalButtonClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface PayPalButtonInitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface PayPalButtonInitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalButtonApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface PayPalButtonApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * PayPal Commerce Payment fields\n *\n */\nexport interface PayPalCommercePaymentFields {\n    render(id: string): void;\n}\n\nexport interface PayPalCommercePaymentFieldsOptions {\n    style?: PayPalCommerceFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface PayPalCommerceFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayLater Messages related types\n * doc: https://developer.paypal.com/docs/checkout/pay-later/us/integrate/reference\n */\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Fastlane related types\n *\n */\nexport interface PayPalFastlane {\n    identity: PayPalFastlaneIdentity;\n    events: PayPalFastlaneEvents;\n    profile: PayPalFastlaneProfile;\n    FastlaneCardComponent(\n        options: PayPalFastlaneCardComponentOptions,\n    ): Promise<PayPalFastlaneCardComponentMethods>;\n}\n\nexport interface PayPalFastlaneOptions {\n    styles?: PayPalFastlaneStylesOption;\n}\n\nexport interface PayPalFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerContextId: string,\n    ): Promise<PayPalFastlaneAuthenticationResult>;\n}\n\nexport interface PayPalFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface PayPalFastlaneAuthenticationResult {\n    authenticationState?: PayPalFastlaneAuthenticationState;\n    profileData?: PayPalFastlaneProfileData;\n}\n\nexport enum PayPalFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'canceled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface PayPalFastlaneProfileData {\n    name: PayPalFastlaneProfileName;\n    shippingAddress: PayPalFastlaneShippingAddress;\n    card: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface PayPalFastlaneProfilePhone {\n    countryCode: string;\n    nationalNumber: string;\n}\n\nexport interface PayPalFastlaneShippingAddress {\n    name: PayPalFastlaneProfileName;\n    phoneNumber: PayPalFastlaneProfilePhone;\n    address: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneProfileCard {\n    id: string; // nonce / token\n    paymentSource: PayPalFastlanePaymentSource;\n}\n\nexport interface PayPalFastlanePaymentSource {\n    card: PayPalFastlaneCardSource;\n}\n\nexport interface PayPalFastlaneCardSource {\n    brand: string;\n    expiry: string; // \"YYYY-MM\"\n    lastDigits: string; // \"1111\"\n    name: string;\n    billingAddress: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneAddress {\n    company?: string;\n    addressLine1: string;\n    addressLine2?: string;\n    adminArea1: string; // State\n    adminArea2: string; // City\n    postalCode: string;\n    countryCode?: string;\n}\n\nexport interface PayPalFastlaneProfileToBcCustomerDataMappingResult {\n    authenticationState: PayPalFastlaneAuthenticationState;\n    addresses: CustomerAddress[];\n    billingAddress?: CustomerAddress;\n    shippingAddress?: CustomerAddress;\n    instruments: CardInstrument[];\n}\n\nexport interface PayPalFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport interface PayPalFastlaneProfile {\n    showCardSelector(): Promise<PayPalFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<PayPalFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface PayPalFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: PayPalFastlaneShippingAddress;\n}\n\nexport interface PayPalFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneCardComponentMethods {\n    getPaymentToken(\n        options: PayPalFastlaneGetPaymentTokenOptions,\n    ): Promise<PayPalFastlaneProfileCard>;\n    render(element: string): void;\n}\n\nexport interface PayPalFastlaneGetPaymentTokenOptions {\n    name?: PayPalFastlaneProfileName;\n    billingAddress?: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneCardComponentOptions {\n    fields?: PayPalFastlaneCardComponentFields;\n}\n\nexport interface PayPalFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface PayPalFastlaneEvents {\n    apmSelected: (options: PayPalFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: PayPalFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: PayPalFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface PayPalFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface PayPalFastlaneApmSelectedEventOptions extends PayPalFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface PayPalFastlaneEmailEnteredEventOptions extends PayPalFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface PayPalFastlaneOrderPlacedEventOptions extends PayPalFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface PayPalFastlanePaymentFormattedPayload {\n    paypal_connect_token?: {\n        order_id?: string;\n        token: string;\n    };\n    paypal_fastlane_token?: {\n        order_id?: string;\n        token: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n","interface CookieOptions {\n    expires?: Date;\n    path?: string;\n    domain?: string;\n    secure?: boolean;\n}\n\nexport default class CookieStorage {\n    static get(name: string): string | null {\n        const cookieKey = `${encodeURIComponent(`${name}`)}=`;\n        const cookie = document.cookie;\n\n        let value = null;\n\n        const firstIndex = cookie.indexOf(cookieKey);\n\n        if (firstIndex > -1) {\n            let lastIndex = cookie.indexOf(';', firstIndex);\n\n            if (lastIndex === -1) {\n                lastIndex = cookie.length;\n            }\n\n            value = decodeURIComponent(cookie.substring(firstIndex + cookieKey.length, lastIndex));\n        }\n\n        return value;\n    }\n\n    static set(name: string, value: string, options: CookieOptions = { secure: true }) {\n        let cookieText = `${encodeURIComponent(name)}=${encodeURIComponent(value)}`;\n\n        const { expires, path, domain, secure } = options;\n\n        if (expires) {\n            cookieText += `; expires=${expires.toUTCString()}`;\n        } else {\n            const now = new Date();\n            // info: default cookie expiration time after setup\n            const minutes = 60;\n\n            now.setTime(now.getTime() + minutes * 60 * 1000);\n\n            cookieText += `; expires=${now.toUTCString()}`;\n        }\n\n        if (path) {\n            cookieText += `; path=${path}`;\n        }\n\n        if (domain) {\n            cookieText += `; domain=${domain}`;\n        }\n\n        if (secure) {\n            cookieText += '; secure';\n        }\n\n        document.cookie = cookieText;\n    }\n\n    static remove(name: string, options?: CookieOptions) {\n        CookieStorage.set(name, '', { expires: new Date(0), ...options });\n    }\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    Address,\n    CardInstrument,\n    CustomerAddress,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalFastlane,\n    PayPalFastlaneAddress,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneLookupCustomerByEmailResult,\n    PayPalFastlaneProfileCard,\n    PayPalFastlaneProfileName,\n    PayPalFastlaneProfilePhone,\n    PayPalFastlaneProfileToBcCustomerDataMappingResult,\n    PayPalFastlaneSdk,\n    PayPalFastlaneStylesOption,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceFastlaneUtils {\n    private window: PayPalCommerceHostWindow;\n\n    constructor() {\n        this.window = window;\n    }\n\n    async initializePayPalFastlane(\n        paypalFastlaneSdk: PayPalFastlaneSdk,\n        isTestModeEnabled: boolean,\n        styles?: PayPalFastlaneStylesOption,\n    ): Promise<PayPalFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n            window.localStorage.setItem('axoEnv', 'sandbox'); // TODO: remove if this key does not use on PayPal side\n        }\n\n        if (!this.window.paypalFastlane) {\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.window.paypalFastlane = await paypalFastlaneSdk.Fastlane({\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    getPayPalFastlaneOrThrow(): PayPalFastlane {\n        if (!this.window.paypalFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    /**\n     *\n     * Detects the customer to PayPal Fastlane relation and\n     * returns customerContextId to use it for authentication\n     *\n     */\n    async lookupCustomerOrThrow(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult> {\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.lookupCustomerByEmail(email);\n    }\n\n    /**\n     *\n     * Triggers authentication flow (shows OTP popup) if the customer recognised as PayPal Fastlane user\n     * and returns PayPal Fastlane Profile data to use it in BC checkout\n     *\n     */\n    async triggerAuthenticationFlowOrThrow(\n        customerContextId?: string,\n    ): Promise<PayPalFastlaneAuthenticationResult> {\n        if (!customerContextId) {\n            return {};\n        }\n\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.triggerAuthenticationFlow(customerContextId);\n    }\n\n    /**\n     *\n     * 'updateStorageSessionId' method is used to:\n     * - set session id after user was authenticated (or unrecognised) to trigger authentication after page refresh\n     *\n     * Flow info:\n     * If user unrecognised then the lookup method will be working but the OTP will not be shown\n     * If user recognised and not canceled then the lookup method will be working and the OTP will be shown only if needed\n     * If user cancels the OPT then OTP will not be triggered after page refresh\n     *\n     */\n    updateStorageSessionId(sessionId: string): void {\n        const expires = new Date();\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        const cookiesOption = {\n            expires,\n            secure: true,\n        };\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, cookiesOption);\n    }\n\n    removeStorageSessionId(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    getStorageSessionId(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    /**\n     *\n     * 'mapPayPalFastlaneProfileToBcCustomerData' method is responsible for:\n     * - mapping PayPal Fastlane Profile data to BC data shape\n     * - returning mapped data to use for updating PaymentProviderCustomer state and\n     * update shipping and billing addresses\n     *\n     */\n    mapPayPalFastlaneProfileToBcCustomerData(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): PayPalFastlaneProfileToBcCustomerDataMappingResult {\n        const { authenticationState, profileData } = authenticationResult;\n\n        const paypalBillingAddress = profileData?.card?.paymentSource?.card?.billingAddress;\n        const paypalShippingAddress = profileData?.shippingAddress;\n        const paypalProfileName = profileData?.name;\n        const paypalInstrument = profileData?.card;\n\n        const shippingAddress = paypalShippingAddress\n            ? this.mapPayPalToBcAddress(\n                  paypalShippingAddress.address,\n                  paypalShippingAddress.name,\n                  paypalShippingAddress.phoneNumber,\n              )\n            : undefined;\n        const billingAddress =\n            paypalBillingAddress && paypalProfileName\n                ? this.mapPayPalToBcAddress(\n                      paypalBillingAddress,\n                      paypalProfileName,\n                      paypalShippingAddress?.phoneNumber,\n                  )\n                : undefined;\n        const instruments = paypalInstrument\n            ? this.mapPayPalToBcInstrument(methodId, paypalInstrument)\n            : [];\n\n        const addresses = this.filterAddresses([shippingAddress, billingAddress]);\n\n        return {\n            authenticationState:\n                authenticationState || PayPalFastlaneAuthenticationState.UNRECOGNIZED,\n            addresses,\n            billingAddress,\n            shippingAddress,\n            instruments,\n        };\n    }\n\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instrument: PayPalFastlaneProfileCard,\n    ): CardInstrument[] {\n        const { id, paymentSource } = instrument;\n        const { brand, expiry, lastDigits } = paymentSource.card;\n\n        const [expiryYear, expiryMonth] = expiry.split('-');\n\n        return [\n            {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n                type: 'card',\n            },\n        ];\n    }\n\n    mapBcToPayPalAddress(address?: Address): PayPalFastlaneAddress {\n        return {\n            company: address?.company || '',\n            addressLine1: address?.address1 || '',\n            addressLine2: address?.address2 || '',\n            adminArea1: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            adminArea2: address?.city || '',\n            postalCode: address?.postalCode || '',\n            countryCode: address?.countryCode || '',\n        };\n    }\n\n    mapPayPalToBcAddress(\n        address: PayPalFastlaneAddress,\n        profileName: PayPalFastlaneProfileName,\n        phone?: PayPalFastlaneProfilePhone,\n        customFields?: CustomerAddress['customFields'],\n    ): CustomerAddress {\n        const [firstName, lastName] = profileName.fullName.split(' ');\n\n        const phoneData = {\n            nationalNumber: phone?.nationalNumber || '',\n            countryCode: phone?.countryCode || '',\n        };\n\n        return {\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: profileName.firstName || firstName || '',\n            lastName: profileName.lastName || lastName || '',\n            company: address.company || '',\n            address1: address.addressLine1,\n            address2: address.addressLine2 || '',\n            city: address.adminArea2,\n            stateOrProvince: address.adminArea1,\n            stateOrProvinceCode: address.adminArea1,\n            country: address.countryCode || '', // TODO: update country with valid naming\n            countryCode: address.countryCode || '',\n            postalCode: address.postalCode,\n            phone: phoneData.countryCode + phoneData.nationalNumber,\n            customFields: customFields || [],\n        };\n    }\n\n    /**\n     *\n     * This method is responsible for filtering PayPal Fastlane addresses if they are the same\n     * and returns an array of addresses to use them for shipping and/or billing address selections\n     * so the customer will be able to use addresses from PayPal Fastlane in checkout flow\n     *\n     */\n    filterAddresses(addresses: Array<CustomerAddress | undefined>): CustomerAddress[] {\n        return addresses.reduce(\n            (customerAddresses: CustomerAddress[], currentAddress: CustomerAddress | undefined) => {\n                if (!currentAddress) {\n                    return customerAddresses;\n                }\n\n                const sameAddressInTheArray = customerAddresses.some((customerAddress) =>\n                    this.isEqualAddresses(customerAddress, currentAddress),\n                );\n\n                return sameAddressInTheArray\n                    ? customerAddresses\n                    : [...customerAddresses, currentAddress];\n            },\n            [],\n        );\n    }\n\n    private isEqualAddresses(\n        firstAddress: CustomerAddress,\n        secondAddress: CustomerAddress,\n    ): boolean {\n        return isEqual(this.normalizeAddress(firstAddress), this.normalizeAddress(secondAddress));\n    }\n\n    private normalizeAddress(address: CustomerAddress) {\n        return omit(address, ['id', 'phone']);\n    }\n}\n","import PayPalCommerceFastlaneUtils from './paypal-commerce-fastlane-utils';\n\nexport default function createPayPalCommerceFastlaneUtils(): PayPalCommerceFastlaneUtils {\n    return new PayPalCommerceFastlaneUtils();\n}\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumber in fields &&\n        HostedFieldType.CardName in fields &&\n        HostedFieldType.CardExpiry in fields\n    );\n}\n","import HostedFieldType from './hosted-field-type';\nimport { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\n\nexport default function isCreditCardVaultedFormFields(\n    fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n): fields is HostedStoredCardFieldOptionsMap {\n    return (\n        HostedFieldType.CardNumberVerification in fields &&\n        HostedFieldType.CardCodeVerification in fields &&\n        HostedFieldType.CardExpiryVerification in fields\n    );\n}\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    HostedCardFieldOptions,\n    HostedCardFieldOptionsMap,\n    HostedFieldBlurEventData,\n    HostedFieldEnterEventData,\n    HostedFieldFocusEventData,\n    HostedFieldStylesMap,\n    HostedFieldType,\n    HostedFieldValidateEventData,\n    HostedFormOptions,\n    HostedInputValidateErrorData,\n    HostedInputValidateErrorDataMap,\n    HostedInstrument,\n    HostedStoredCardFieldOptionsMap,\n    InvalidArgumentError,\n    isCreditCardFormFields,\n    isCreditCardVaultedFormFields,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    isPayPalCommerceAcceleratedCheckoutCustomer,\n    PayPalCommerceFastlaneUtils,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    LiabilityShiftEnum,\n    PayPalCommerceCardFields,\n    PayPalCommerceCardFieldsConfig,\n    PayPalCommerceCardFieldsOnApproveData,\n    PayPalCommerceCardFieldsState,\n    PayPalCommerceFields,\n    PayPalCommerceHostedFieldsRenderOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditCardsPaymentInitializeOptions, {\n    WithPayPalCommerceCreditCardsPaymentInitializeOptions,\n} from './paypal-commerce-credit-cards-payment-initialize-options';\n\nexport default class PayPalCommerceCreditCardsPaymentStrategy implements PaymentStrategy {\n    private executionPaymentData?: OrderPaymentRequestBody['paymentData'];\n    private isCreditCardForm?: boolean;\n    private isCreditCardVaultedForm?: boolean;\n\n    private cardFields?: PayPalCommerceCardFields;\n    private cvvField?: PayPalCommerceFields;\n    private expiryField?: PayPalCommerceFields;\n    private numberField?: PayPalCommerceFields;\n    private nameField?: PayPalCommerceFields;\n\n    private hostedFormOptions?: HostedFormOptions;\n    private returnedOrderId?: string;\n    private returnedVaultedToken?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private paypalCommerceFastlaneUtils: PayPalCommerceFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceCreditCardsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommercecreditcards, paypalcommerce } = options;\n        const paypalCommerceInitializationOptions = paypalcommercecreditcards || paypalcommerce;\n\n        const { form, onCreditCardFieldsRenderingError } =\n            paypalCommerceInitializationOptions || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!form) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.paypalcommercecreditcards.form\" argument is not provided.',\n            );\n        }\n\n        this.hostedFormOptions = form;\n\n        this.isCreditCardForm = isCreditCardFormFields(form.fields);\n        this.isCreditCardVaultedForm =\n            isCreditCardVaultedFormFields(form.fields) && !this.hasUndefinedValues();\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, undefined, true, true);\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.initializeFields(form, onCreditCardFieldsRenderingError);\n        }\n\n        if (this.shouldInitializePayPalFastlane(methodId)) {\n            await this.initializePayPalFastlaneOrThrow(methodId);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { methodId, paymentData } = payment || {};\n\n        if (!payment || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        this.executionPaymentData = paymentData;\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.validateHostedFormOrThrow();\n            await this.submitHostedForm();\n        } else {\n            // This condition is triggered when we pay with vaulted instrument and shipping address is truste\n            const { orderId } = await this.paypalCommerceIntegrationService.createOrderCardFields(\n                'paypalcommercecreditcardscheckout',\n                this.getInstrumentParams(),\n            );\n\n            this.returnedOrderId = orderId;\n        }\n\n        const submitPaymentPayload = this.preparePaymentPayload(\n            methodId,\n            paymentData,\n            this.returnedOrderId,\n            this.returnedVaultedToken,\n        );\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.cvvField?.close();\n        await this.expiryField?.close();\n        await this.numberField?.close();\n        await this.nameField?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Submit Payment Payload preparing method\n     *\n     * `vaultedToken` is used when we pay with vaulted instrument (with trusted shipping address and untrusted)\n     * `setupToken` is used when we pay with vaulted instrument (untrusted shipping address)\n     * `orderId` is used in every case (basic card payment, trusted shipping address and untrusted)\n     */\n    private preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n        orderId?: string,\n        nonce?: string,\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const instrumentId =\n            paymentData && isVaultedInstrument(paymentData) ? paymentData.instrumentId : undefined;\n\n        const bigpay_token = omitBy(\n            {\n                verification_nonce: nonce,\n                token: instrumentId,\n            },\n            isNil,\n        );\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                instrumentId,\n                formattedPayload: {\n                    ...(nonce || instrumentId ? { bigpay_token } : {}),\n                    ...(orderId ? { card_with_order: { order_id: orderId } } : {}),\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Card fields initialize\n     *\n     */\n    private async initializeFields(\n        formOptions: HostedFormOptions,\n        onCreditCardFieldsRenderingError?: PayPalCommerceCreditCardsPaymentInitializeOptions['onCreditCardFieldsRenderingError'],\n    ): Promise<void> {\n        const { fields, styles } = formOptions;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const executeCallback = this.getExecuteCallback(fields);\n\n        const cardFieldsConfig: PayPalCommerceCardFieldsConfig = {\n            style: this.getInputStyles(styles),\n            onApprove: ({\n                orderID,\n                vaultSetupToken,\n                liabilityShift,\n            }: PayPalCommerceCardFieldsOnApproveData) => {\n                if (\n                    liabilityShift === LiabilityShiftEnum.No ||\n                    liabilityShift === LiabilityShiftEnum.Unknown\n                ) {\n                    throw new Error();\n                }\n\n                return this.handleApprove({ orderID, vaultSetupToken });\n            },\n            onError: () => {\n                throw new PaymentMethodFailedError();\n            },\n            inputEvents: {\n                onChange: (event) => this.onChangeHandler(formOptions, event),\n                onFocus: (event) => this.onFocusHandler(formOptions, event),\n                onBlur: (event) => this.onBlurHandler(formOptions, event),\n                onInputSubmitRequest: (event) => this.onInputSubmitRequest(formOptions, event),\n            },\n            ...executeCallback,\n        };\n\n        this.cardFields = await paypalSdk.CardFields(cardFieldsConfig);\n\n        if (!this.cardFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            this.stylizeInputContainers(fields);\n\n            if (isCreditCardFormFields(fields)) {\n                await this.renderFields(fields);\n            }\n\n            if (isCreditCardVaultedFormFields(fields)) {\n                await this.renderVaultedFields(fields);\n            }\n        } catch (error: unknown) {\n            if (typeof onCreditCardFieldsRenderingError === 'function') {\n                onCreditCardFieldsRenderingError(error);\n            }\n        }\n    }\n\n    /**\n     *\n     * Get execute callback method\n     * Depends on shipping address is trusted or not we should pass to PP\n     * `createVaultSetupToken` callback if address is untrusted or\n     * `createOrder` if address is trusted\n     *\n     */\n    private getExecuteCallback(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ) {\n        const isVaultedForm = isCreditCardVaultedFormFields(fields);\n\n        return isVaultedForm ? this.createVaultSetupTokenCallback() : this.createOrderCallback();\n    }\n\n    private createVaultSetupTokenCallback() {\n        return {\n            createVaultSetupToken: async () => {\n                const { setupToken } =\n                    (await this.paypalCommerceIntegrationService.createOrderCardFields(\n                        'paypalcommercecreditcardscheckout',\n                        {\n                            ...this.getInstrumentParams(),\n                            setupToken: true,\n                        },\n                    )) || {};\n\n                return setupToken;\n            },\n        };\n    }\n\n    private createOrderCallback() {\n        return {\n            createOrder: async () => {\n                const { orderId } =\n                    (await this.paypalCommerceIntegrationService.createOrderCardFields(\n                        'paypalcommercecreditcardscheckout',\n                        this.getInstrumentParams(),\n                    )) || {};\n\n                return orderId;\n            },\n        };\n    }\n\n    /**\n     *\n     * onApprove method\n     * When submitting a form with a `submitHostedForm` method if there is no error\n     * then onApprove callback is triggered and depends on the flow\n     * we will receive an `orderID` if it's basic paying and `vaultSetupToken` if we are paying\n     * with vaulted instrument and shipping address is untrusted\n     *\n     */\n    private handleApprove({ orderID, vaultSetupToken }: PayPalCommerceCardFieldsOnApproveData) {\n        if (orderID) {\n            this.returnedOrderId = orderID;\n        }\n\n        if (vaultSetupToken) {\n            this.returnedVaultedToken = vaultSetupToken;\n        }\n    }\n\n    /**\n     *\n     * Rendering Card Fields methods\n     *\n     */\n    private async renderFields(fieldsOptions: HostedCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCode?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCode.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiry?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiry.containerId}`);\n        }\n\n        if (fieldsOptions.cardName?.containerId) {\n            this.nameField = cardFields.NameField({\n                placeholder: '',\n            });\n            await this.nameField.render(`#${fieldsOptions.cardName.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumber?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumber.containerId}`);\n        }\n    }\n\n    private async renderVaultedFields(fieldsOptions: HostedStoredCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCodeVerification?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCodeVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiryVerification?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiryVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumberVerification?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumberVerification.containerId}`);\n        }\n    }\n\n    /**\n     *\n     * Instrument params method\n     *\n     */\n    private getInstrumentParams(): HostedInstrument | VaultedInstrument {\n        if (!this.executionPaymentData) {\n            return {};\n        }\n\n        if (isHostedInstrumentLike(this.executionPaymentData)) {\n            const { shouldSaveInstrument, shouldSetAsDefaultInstrument } =\n                this.executionPaymentData;\n\n            return {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            };\n        }\n\n        if (isVaultedInstrument(this.executionPaymentData)) {\n            const { instrumentId } = this.executionPaymentData;\n\n            return {\n                instrumentId,\n            };\n        }\n\n        return {};\n    }\n\n    private getFieldTypeByEmittedField({\n        emittedBy,\n    }: PayPalCommerceCardFieldsState):\n        | HostedFieldBlurEventData\n        | HostedFieldEnterEventData\n        | HostedFieldFocusEventData {\n        return {\n            fieldType: this.mapFieldType(emittedBy),\n        };\n    }\n\n    /**\n     *\n     * Form submit method\n     * Triggers a form submit\n     * */\n    private async submitHostedForm() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const submitConfig = {\n            billingAddress: {\n                company: billingAddress.company,\n                addressLine1: billingAddress.address1,\n                addressLine2: billingAddress.address2,\n                adminArea1: billingAddress.stateOrProvinceCode,\n                adminArea2: billingAddress.city,\n                postalCode: billingAddress.postalCode,\n                countryCode: billingAddress.countryCode,\n            },\n        };\n\n        try {\n            if (this.isCreditCardVaultedForm) {\n                await cardFields.submit();\n            } else {\n                await cardFields.submit(submitConfig);\n            }\n        } catch (_) {\n            throw new PaymentMethodFailedError(\n                'Failed authentication. Please try to authorize again.',\n            );\n        }\n    }\n\n    /**\n     *\n     * Validation and errors\n     *\n     */\n    private async validateHostedFormOrThrow() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const cardFieldsState = await cardFields.getState().then((data) => data);\n        const validationData = this.getValidityData(cardFieldsState);\n\n        if (validationData.isValid) {\n            return;\n        }\n\n        this.hostedFormOptions?.onValidate?.(validationData);\n\n        throw new PaymentInvalidFormError(this.mapValidationErrors(validationData.errors));\n    }\n\n    private getValidityData({\n        fields,\n    }: PayPalCommerceCardFieldsState): HostedFieldValidateEventData {\n        const updatedFields = { ...fields };\n\n        delete updatedFields.cardNameField;\n\n        const fieldsKeys = Object.keys(updatedFields) as Array<\n            keyof PayPalCommerceCardFieldsState['fields']\n        >;\n\n        const isValid = fieldsKeys.every((key) => updatedFields[key]?.isValid);\n\n        const errors = fieldsKeys.reduce((fieldsErrors, key) => {\n            const fieldType = this.mapFieldType(key);\n\n            return {\n                ...fieldsErrors,\n                [fieldType]: updatedFields[key]?.isValid\n                    ? undefined\n                    : [this.getInvalidErrorByFieldType(fieldType)],\n            };\n        }, {});\n\n        return { isValid, errors };\n    }\n\n    private getInvalidErrorByFieldType(fieldType: string): HostedInputValidateErrorData {\n        switch (fieldType) {\n            case HostedFieldType.CardCode:\n            case HostedFieldType.CardCodeVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case HostedFieldType.CardNumber:\n            case HostedFieldType.CardNumberVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case HostedFieldType.CardExpiry:\n            case HostedFieldType.CardExpiryVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card expiry',\n                    type: 'invalid_card_expiry',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Invalid field',\n                    type: 'invalid',\n                };\n        }\n    }\n\n    private mapValidationErrors(\n        validationErrors: HostedInputValidateErrorDataMap = {},\n    ): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n        const validationErrorsKeys = Object.keys(validationErrors) as Array<\n            keyof HostedInputValidateErrorDataMap\n        >;\n\n        validationErrorsKeys.forEach((key) => {\n            errors[key] = [\n                {\n                    message: validationErrors[key]?.[0]?.message || '',\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    /**\n     *\n     * Fields mappers\n     *\n     */\n    private mapFieldType(type: string): HostedFieldType {\n        switch (type) {\n            case 'name':\n                return HostedFieldType.CardName;\n\n            case 'cardNumberField':\n            case 'number':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardNumber\n                    : HostedFieldType.CardNumberVerification;\n\n            case 'cardExpiryField':\n            case 'expiry':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardExpiry\n                    : HostedFieldType.CardExpiryVerification;\n\n            case 'cardCvvField':\n            case 'cvv':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardCode\n                    : HostedFieldType.CardCodeVerification;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     */\n    private getCardFieldsOrThrow(): PayPalCommerceCardFields {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.cardFields;\n    }\n\n    private getInputStyles(\n        styles?: HostedFieldStylesMap,\n    ): PayPalCommerceHostedFieldsRenderOptions['styles'] {\n        const commonStyles = {\n            'font-size': styles?.default?.fontSize || '1rem',\n            'font-family':\n                styles?.default?.fontFamily || 'Montserrat, Arial, Helvetica, sans-serif',\n            'font-weight': styles?.default?.fontWeight || '400',\n            outline: 'none',\n            padding: '9px 13px',\n        };\n\n        const defaultStyles = { ...commonStyles, color: '#333333' };\n        const errorStyles = { ...commonStyles, color: 'red' };\n\n        return {\n            input: defaultStyles,\n            '.invalid': errorStyles,\n            '.valid': defaultStyles,\n            ':focus': defaultStyles,\n        };\n    }\n\n    private stylizeInputContainers(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ): void {\n        Object.values(fields || {}).forEach((id: HostedCardFieldOptions) => {\n            const element = document.getElementById(`${id?.containerId || ''}`);\n\n            if (element) {\n                element.style.padding = '0px';\n                element.style.boxShadow = 'none';\n                element.style.border = 'none';\n                element.style.background = 'transparent';\n                element.style.marginBottom = '10px';\n                element.style.marginLeft = '-5px';\n            }\n        });\n    }\n\n    private hasUndefinedValues() {\n        if (this.hostedFormOptions) {\n            return Object.values(this.hostedFormOptions.fields).some(\n                (value) => value === undefined,\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * Input events methods\n     *\n     */\n    private onChangeHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onValidate?.(this.getValidityData(event));\n    }\n\n    private onFocusHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onFocus?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onBlurHandler(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onBlur?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onInputSubmitRequest(\n        formOptions: HostedFormOptions,\n        event: PayPalCommerceCardFieldsState,\n    ): void {\n        formOptions?.onEnter?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    /**\n     *\n     * PayPal Commerce Accelerated checkout related methods\n     *\n     */\n    // TODO: remove this part when PPCP AXO A/B testing will be finished\n    private shouldInitializePayPalFastlane(methodId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalCommercePaymentProviderCustomer = isPayPalCommerceAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return (\n            paymentMethod?.initializationData?.isAcceleratedCheckoutEnabled &&\n            paymentMethod?.initializationData?.isPayPalCommerceAnalyticsV2Enabled &&\n            !paypalCommercePaymentProviderCustomer?.authenticationState\n        );\n    }\n\n    // TODO: remove this part when PPCP AXO A/B testing will be finished\n    private async initializePayPalFastlaneOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n            const { initializationData } = paymentMethod;\n\n            if (!initializationData?.connectClientToken) {\n                return;\n            }\n\n            const payPalFastlaneSdk = await this.paypalCommerceSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.paypalCommerceFastlaneUtils.initializePayPalFastlane(\n                payPalFastlaneSdk,\n                !!initializationData?.isDeveloperModeApplicable,\n            );\n        } catch (_: unknown) {\n            // We should avoid throwing any error from this flow to do no brake default flow\n            // This flow is optional\n        }\n    }\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isPayPalCommerceAcceleratedCheckoutCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalCommerceFastlaneUtils,\n    createPayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditCardsPaymentStrategy from './paypal-commerce-credit-cards-payment-strategy';\n\nconst createPaypalCommerceCreditCardsPaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceCreditCardsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditCardsPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n        createPayPalCommerceFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createPaypalCommerceCreditCardsPaymentStrategy, [\n    { id: 'paypalcommercecreditcards' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    BirthDate,\n    PayPalCommerceInitializationData,\n    PayPalOrderStatus,\n} from '../paypal-commerce-types';\n\nimport {\n    PaypalCommerceRatePay,\n    WithPayPalCommerceRatePayPaymentInitializeOptions,\n} from './paypal-commerce-ratepay-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class PaypalCommerceRatepayPaymentStrategy implements PaymentStrategy {\n    private guid?: string;\n    private paypalcommerceratepay?: PaypalCommerceRatePay;\n    private loadingIndicatorContainer?: string;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, paypalcommerceratepay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerceratepay) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerceratepay\" argument is not provided.`,\n            );\n        }\n\n        const { legalTextContainer, container, loadingContainerId } = paypalcommerceratepay;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.container\" argument is not provided.`,\n            );\n        }\n\n        if (!legalTextContainer) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.legalTextContainer\" argument is not provided.`,\n            );\n        }\n\n        if (!loadingContainerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.loadingContainerId\" argument is not provided.`,\n            );\n        }\n\n        this.loadingIndicatorContainer = loadingContainerId;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { merchantId } = paymentMethod.initializationData || {};\n\n        if (!merchantId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because merchantId argument is not provided.`,\n            );\n        }\n\n        this.paypalcommerceratepay = paypalcommerceratepay;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        this.createFraudNetScript(merchantId, methodId, gatewayId);\n\n        this.loadFraudnetConfig();\n\n        this.renderLegalText(legalTextContainer, container);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        const { getFieldsValues } = this.paypalcommerceratepay || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!getFieldsValues || typeof getFieldsValues !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.getFieldsValues\" argument is not provided.`,\n            );\n        }\n\n        this.toggleLoadingIndicator(true);\n\n        try {\n            const orderId = await this.paypalCommerceIntegrationService.createOrder(\n                'paypalcommercealternativemethodscheckout',\n                { metadataId: this.guid },\n            );\n\n            const { ratepayBirthDate, ratepayPhoneNumber, ratepayPhoneCountryCode } =\n                getFieldsValues();\n\n            const paymentData = {\n                formattedPayload: {\n                    vault_payment_instrument: null,\n                    set_as_default_stored_instrument: null,\n                    device_info: null,\n                    method_id: payment.methodId,\n                    rate_pay: {\n                        birth_date: this.normalizeDate(ratepayBirthDate),\n                        phone: {\n                            national_number: ratepayPhoneNumber,\n                            country_code: ratepayPhoneCountryCode.split('+')[1],\n                        },\n                    },\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n\n            return await new Promise((resolve, reject) => {\n                this.initializePollingMechanism(\n                    payment.methodId,\n                    resolve,\n                    reject,\n                    payment.gatewayId,\n                );\n            });\n        } catch (error: unknown) {\n            this.handleError(error);\n\n            return new Promise((_resolve, reject) => reject());\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        const { legalTextContainer } = this.paypalcommerceratepay || {};\n        const fraudNetScript = document.querySelectorAll('[data-id=\"fraudnetScript\"]')[0];\n        const fraudNetConfig = document.querySelectorAll('[data-id=\"fraudnetConfig\"]')[0];\n\n        this.deinitializePollingMechanism();\n\n        fraudNetScript.remove();\n        fraudNetConfig.remove();\n\n        if (legalTextContainer) {\n            const legalTextContainerElement = document.getElementById(legalTextContainer);\n\n            legalTextContainerElement?.remove();\n        }\n\n        return Promise.resolve();\n    }\n\n    private normalizeDate(date: BirthDate) {\n        const formattedDate = this.formatDate(date.getDate());\n        const formattedMonth = this.formatDate(date.getMonth() + 1);\n\n        return `${date.getFullYear()}-${formattedMonth}-${formattedDate}`;\n    }\n\n    private formatDate(date: number): string {\n        return `${date < 10 ? 0 : ''}${date}`;\n    }\n\n    private renderLegalText(legalTextContainerElementId: string, container: string) {\n        const legalTextContainerId = legalTextContainerElementId;\n        const buttonContainerId = container.split('#')[1];\n        const buttonContainer = document.getElementById(buttonContainerId);\n        const buttonContainerParent = buttonContainer?.parentNode;\n        const legalTextContainer = document.createElement('div');\n\n        legalTextContainer.style.marginBottom = '20px';\n        legalTextContainer.setAttribute('id', legalTextContainerId);\n        buttonContainerParent?.prepend(legalTextContainer);\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const ratePayButton = paypalSdk.Legal({\n            fundingSource: paypalSdk.Legal.FUNDING.PAY_UPON_INVOICE,\n        });\n        const legalTextContainerElement = document.getElementById(legalTextContainerId);\n\n        if (legalTextContainerElement) {\n            ratePayButton.render(`#${legalTextContainerId}`);\n        } else {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"legalTextContainerElement\" argument is not found.`,\n            );\n        }\n    }\n\n    private handleError(error: unknown): void {\n        const { onError } = this.paypalcommerceratepay || {};\n\n        this.resetPollingMechanism();\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private createFraudNetScript(merchantId: string, methodId: string, gatewayId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { testMode } = paymentMethod.config;\n        const scriptElement = document.createElement('script');\n\n        scriptElement.setAttribute('type', 'application/json');\n        scriptElement.setAttribute('fncls', 'fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99');\n        scriptElement.setAttribute('data-id', 'fraudnetScript');\n        this.guid = this.generateGUID();\n\n        const fraudNetConfig = {\n            f: this.guid,\n            s: `${merchantId}_checkout-page`,\n            sandbox: testMode,\n        };\n\n        scriptElement.innerHTML = JSON.stringify(fraudNetConfig);\n        document.body.appendChild(scriptElement);\n    }\n\n    private generateGUID() {\n        let guid = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for (let i = 0; i < 32; i += 1) {\n            const randomIndex = Math.floor(Math.random() * characters.length);\n\n            guid += characters[randomIndex];\n        }\n\n        return guid;\n    }\n\n    private loadFraudnetConfig() {\n        const script = document.createElement('script');\n\n        script.setAttribute('data-id', 'fraudnetConfig');\n        script.src = 'https://c.paypal.com/da/r/fb.js';\n        document.body.appendChild(script);\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithPayPalCommerceRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.paypalCommerceIntegrationService.getOrderStatus(\n                'paypalcommercealternativemethods',\n                {\n                    params: {\n                        useMetadata: true,\n                    },\n                },\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.PollingStop;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                paypalcommerceratepay: this.paypalcommerceratepay,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            this.handleError(error);\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\nimport { LOADING_INDICATOR_STYLES } from '../paypal-commerce-constants';\n\nimport PaypalCommerceRatepayPaymentStrategy from './paypal-commerce-ratepay-payment-strategy';\n\nconst createPaypalCommerceRatepayPaymentStrategy: PaymentStrategyFactory<\n    PaypalCommerceRatepayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new PaypalCommerceRatepayPaymentStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: { ...LOADING_INDICATOR_STYLES, position: 'fixed' },\n        }),\n    );\n\nexport default toResolvableModule(createPaypalCommerceRatepayPaymentStrategy, [\n    { gateway: 'paypalcommercealternativemethods', id: 'ratepay' },\n]);\n","import { omitBy } from 'lodash';\n\nimport { FastlaneStylesSettings, PayPalFastlaneStylesOption } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n) {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n): PayPalFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: PayPalFastlaneStylesOption) {\n    const fastlaneStyles: PayPalFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n// TODO: update PayPalConnectCustomer with PayPalFastlaneCustomer\nexport default function isPayPalFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    CardInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getFastlaneStyles,\n    isPayPalFastlaneCustomer,\n    isPaypalFastlaneRequestError,\n    PayPalCommerceFastlaneUtils,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneCardComponentMethods,\n    PayPalFastlaneCardComponentOptions,\n    PayPalFastlanePaymentFormattedPayload,\n    PayPalFastlaneSdk,\n    TDSecureAuthenticationState,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport PayPalCommerceRequestSender from '../paypal-commerce-request-sender';\nimport { LiabilityShiftEnum } from '../paypal-commerce-types';\n\nimport PayPalCommerceFastlanePaymentInitializeOptions, {\n    WithPayPalCommerceFastlanePaymentInitializeOptions,\n} from './paypal-commerce-fastlane-payment-initialize-options';\n\nexport default class PaypalCommerceFastlanePaymentStrategy implements PaymentStrategy {\n    private paypalComponentMethods?: PayPalFastlaneCardComponentMethods;\n    private paypalFastlaneSdk?: PayPalFastlaneSdk;\n    private threeDSVerificationMethod?: string;\n    private paypalcommercefastlane?: PayPalCommerceFastlanePaymentInitializeOptions;\n    private orderId?: string;\n    private methodId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private paypalCommerceFastlaneUtils: PayPalCommerceFastlaneUtils,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     * */\n    async initialize(\n        options: PaymentInitializeOptions & WithPayPalCommerceFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommercefastlane } = options;\n        this.methodId = methodId;\n\n        this.paypalcommercefastlane = paypalcommercefastlane;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercefastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercefastlane.onInit || typeof paypalcommercefastlane.onInit !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (\n            !paypalcommercefastlane.onChange ||\n            typeof paypalcommercefastlane.onChange !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercefastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isDeveloperModeApplicable, isFastlaneStylingEnabled } =\n            paymentMethod.initializationData || {};\n\n        this.threeDSVerificationMethod =\n            paymentMethod.initializationData?.threeDSVerificationMethod;\n\n        this.paypalFastlaneSdk = await this.paypalCommerceSdk.getPayPalFastlaneSdk(\n            paymentMethod,\n            cart.currency.code,\n            cart.id,\n        );\n\n        const paypalFastlaneStyling = isFastlaneStylingEnabled\n            ? paymentMethod?.initializationData?.fastlaneStyles\n            : {};\n\n        const fastlaneStyles = getFastlaneStyles(\n            paypalFastlaneStyling,\n            paypalcommercefastlane?.styles,\n        );\n\n        await this.paypalCommerceFastlaneUtils.initializePayPalFastlane(\n            this.paypalFastlaneSdk,\n            !!isDeveloperModeApplicable,\n            fastlaneStyles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.runPayPalAuthenticationFlowOrThrow(methodId);\n        }\n\n        await this.initializePayPalPaymentComponent();\n\n        paypalcommercefastlane.onInit((container: string) =>\n            this.renderPayPalPaymentComponent(container),\n        );\n        paypalcommercefastlane.onChange(() => this.handlePayPalStoredInstrumentChange(methodId));\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData, methodId } = payment;\n\n        const isVaultedFlow = paymentData && isVaultedInstrument(paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n\n            const paymentPayload = isVaultedFlow\n                ? await this.prepareVaultedInstrumentPaymentPayload(methodId, paymentData)\n                : await this.preparePaymentPayload(methodId, paymentData);\n\n            await this.paymentIntegrationService.submitPayment<PayPalFastlanePaymentFormattedPayload>(\n                paymentPayload,\n            );\n\n            this.paypalCommerceFastlaneUtils.removeStorageSessionId();\n        } catch (error) {\n            if (\n                isPaypalFastlaneRequestError(error) &&\n                error.response.body.name === 'INVALID_REQUEST'\n            ) {\n                const invalidRequestError = {\n                    translationKey: 'payment.errors.invalid_request_error',\n                };\n\n                this.handleError(invalidRequestError);\n\n                return Promise.reject();\n            }\n\n            if (error instanceof Error && error.name !== 'FastlaneError') {\n                throw error;\n            }\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.paypalCommerceFastlaneUtils.getStorageSessionId();\n\n        if (\n            !customer.isGuest ||\n            paypalFastlaneCustomer?.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return !paypalFastlaneCustomer?.authenticationState && paypalFastlaneSessionId === cart.id;\n    }\n\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const customerEmail = customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } =\n                await this.paypalCommerceFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n            const authenticationResult =\n                await this.paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                    customerContextId,\n                );\n\n            const { authenticationState, addresses, instruments } =\n                this.paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                    methodId,\n                    authenticationResult,\n                );\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            const isAuthenticationFlowCanceled =\n                authenticationResult.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED;\n\n            if (isAuthenticationFlowCanceled) {\n                this.paypalCommerceFastlaneUtils.removeStorageSessionId();\n            } else {\n                this.paypalCommerceFastlaneUtils.updateStorageSessionId(cart.id);\n            }\n        } catch (error) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n    }\n\n    /**\n     *\n     * PayPal Fastlane Card Component rendering method\n     *\n     */\n    private async initializePayPalPaymentComponent(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const phone = billingAddress.phone;\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const paypalFastlane = this.paypalCommerceFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const cardComponentOptions: PayPalFastlaneCardComponentOptions = {\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        this.paypalComponentMethods = await paypalFastlane.FastlaneCardComponent(\n            cardComponentOptions,\n        );\n    }\n\n    private renderPayPalPaymentComponent(container?: string): void {\n        const paypalComponentMethods = this.getPayPalComponentMethodsOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render card component because \"container\" argument is not provided.',\n            );\n        }\n\n        paypalComponentMethods.render(container);\n    }\n\n    private getPayPalComponentMethodsOrThrow(): PayPalFastlaneCardComponentMethods {\n        if (!this.paypalComponentMethods) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalComponentMethods;\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paymentData: VaultedInstrument,\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const { instrumentId } = paymentData;\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const is3DSEnabled =\n            this.isPaypalCommerceFastlaneThreeDSAvailable() && paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(instrumentId);\n        }\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(instrumentId) : instrumentId;\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const { getPaymentToken } = this.getPayPalComponentMethodsOrThrow();\n\n        const { id } = await getPaymentToken({\n            name: { fullName },\n            billingAddress: this.paypalCommerceFastlaneUtils.mapBcToPayPalAddress(billingAddress),\n        });\n\n        const is3DSEnabled =\n            this.isPaypalCommerceFastlaneThreeDSAvailable() && paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(id);\n        }\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(id) : id;\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        return {\n            methodId,\n            paymentData: {\n                ...paymentData,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async createOrder(id: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        if (this.methodId) {\n            const { orderId } = await this.paypalCommerceRequestSender.createOrder(this.methodId, {\n                cartId,\n                fastlaneToken: id,\n            });\n\n            this.orderId = orderId;\n        }\n    }\n\n    /**\n     *\n     * 3DSecure methods\n     *\n     * */\n    private async get3DSNonce(paypalNonce: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const order = state.getOrderOrThrow();\n        const checkoutUrl = state.getStoreConfigOrThrow().links.checkoutLink;\n\n        const threeDomainSecureComponent = this.paypalFastlaneSdk?.ThreeDomainSecureClient;\n\n        if (!threeDomainSecureComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const threeDomainSecureParameters = {\n            amount: order.orderAmount.toFixed(2),\n            currency: cart.currency.code,\n            nonce: paypalNonce,\n            threeDSRequested: this.threeDSVerificationMethod === 'SCA_ALWAYS',\n            transactionContext: {\n                experience_context: {\n                    locale: 'en-US',\n                    return_url: checkoutUrl,\n                    cancel_url: checkoutUrl,\n                },\n            },\n        };\n\n        const isThreeDomainSecureEligible = await threeDomainSecureComponent.isEligible(\n            threeDomainSecureParameters,\n        );\n\n        if (isThreeDomainSecureEligible) {\n            const { liabilityShift, authenticationState, nonce } =\n                await threeDomainSecureComponent.show();\n\n            if (\n                liabilityShift === LiabilityShiftEnum.No ||\n                liabilityShift === LiabilityShiftEnum.Unknown ||\n                authenticationState === TDSecureAuthenticationState.Errored ||\n                authenticationState === TDSecureAuthenticationState.Cancelled\n            ) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            if (authenticationState === TDSecureAuthenticationState.Succeeded) {\n                await this.createOrder(nonce);\n                return nonce;\n            }\n        }\n\n        return paypalNonce;\n    }\n\n    /**\n     *\n     * PayPal Fastlane instrument change\n     *\n     */\n    private async handlePayPalStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.paypalCommerceFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstrument = this.paypalCommerceFastlaneUtils.mapPayPalToBcInstrument(\n                methodId,\n                selectedCard,\n            )[0];\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                ...paypalFastlaneCustomer,\n                instruments: [selectedInstrument],\n            });\n\n            return selectedInstrument;\n        }\n\n        return undefined;\n    }\n\n    /**\n     *\n     * PayPal Fastlane experiments handling\n     *\n     */\n    private isPaypalCommerceFastlaneThreeDSAvailable(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        return isExperimentEnabled(features, 'PROJECT-7080.paypalcommerce_fastlane_three_ds');\n    }\n\n    private handleError(error: unknown): void {\n        if (\n            this.paypalcommercefastlane?.onError &&\n            typeof this.paypalcommercefastlane.onError === 'function'\n        ) {\n            this.paypalcommercefastlane.onError(error);\n        }\n    }\n}\n","export interface PaypalFastlaneRequestError {\n    name: string;\n    message: string;\n    response: {\n        body: {\n            name: string;\n        };\n    };\n}\n\nexport default function isPaypalFastlaneRequestError(\n    error: unknown,\n): error is PaypalFastlaneRequestError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'message' in error &&\n        'response' in error &&\n        'body' in (error as PaypalFastlaneRequestError).response &&\n        'name' in (error as PaypalFastlaneRequestError).response.body\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalCommerceFastlaneUtils,\n    createPayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceRequestSender from '../paypal-commerce-request-sender';\n\nimport PayPalCommerceFastlanePaymentStrategy from './paypal-commerce-fastlane-payment-strategy';\n\nconst createPayPalCommerceFastlanePaymentStrategy: PaymentStrategyFactory<\n    PayPalCommerceFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new PayPalCommerceFastlanePaymentStrategy(\n        paymentIntegrationService,\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\n        createPayPalCommerceSdk(),\n        createPayPalCommerceFastlaneUtils(),\n    );\n};\n\nexport default toResolvableModule(createPayPalCommerceFastlanePaymentStrategy, [\n    { id: 'paypalcommerceacceleratedcheckout' }, // PayPal Fastlane relates to 'paypalcommerceacceleratedcheckout' method id\n]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCustomerInitializeOptions, {\n    WithPayPalCommerceCustomerInitializeOptions,\n} from './paypal-commerce-customer-initialize-options';\n\nexport default class PayPalCommerceCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommerce.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommerce.onClick && typeof paypalcommerce.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommerce.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = paypalcommerce.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, paypalcommerce);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalcommerce: PayPalCommerceCustomerInitializeOptions,\n    ): void {\n        const { container, onClick, onComplete } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            ...(this.isPaypalCommerceAppSwitchEnabled(methodId) && {\n                appSwitchWhenAvailable: true,\n            }),\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            ...defaultCallbacks,\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            if (paypalButton.hasReturned?.() && this.isPaypalCommerceAppSwitchEnabled(methodId)) {\n                paypalButton.resume?.();\n            } else {\n                paypalButton.render(`#${container}`);\n            }\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n\n    /**\n     *\n     * PayPal AppSwitch enabling handling\n     *\n     */\n    private isPaypalCommerceAppSwitchEnabled(methodId: string): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        return paymentMethod.initializationData?.isAppSwitchEnabled || false;\n    }\n}\n","const DefaultCheckoutButtonHeight = 36;\n\nexport default DefaultCheckoutButtonHeight;\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCustomerStrategy from './paypal-commerce-customer-strategy';\n\nconst createPayPalCommerceCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCustomerStrategy, [{ id: 'paypalcommerce' }]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditCustomerInitializeOptions, {\n    WithPayPalCommerceCreditCustomerInitializeOptions,\n} from './paypal-commerce-credit-customer-initialize-options';\n\nexport default class PayPalCommerceCreditCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceCreditCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercecredit.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommercecredit.onClick && typeof paypalcommercecredit.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercecredit.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = paypalcommercecredit.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, paypalcommercecredit);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalCommerceCredit: PayPalCommerceCreditCustomerInitializeOptions,\n    ): void {\n        const { container, onComplete, onClick } = paypalCommerceCredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                        ...checkoutTopButtonStyles,\n                        height: DefaultCheckoutButtonHeight,\n                    }),\n                    ...defaultCallbacks,\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${container}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditCustomerStrategy from './paypal-commerce-credit-customer-strategy';\n\nconst createPayPalCommerceCreditCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceCreditCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditCustomerStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoCustomerInitializeOptions, {\n    WithPayPalCommerceVenmoCustomerInitializeOptions,\n} from './paypal-commerce-venmo-customer-initialize-options';\n\nexport default class PayPalCommerceVenmoCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceVenmoCustomerInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.',\n            );\n        }\n\n        if (!paypalcommercevenmo.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo.container\" argument is not provided.',\n            );\n        }\n\n        if (paypalcommercevenmo.onClick && typeof paypalcommercevenmo.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.paypalcommercevenmo.onClick\" argument is not a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoCustomerInitializeOptions,\n    ): void {\n        const { container, onClick } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${container}`);\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(container);\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoCustomerStrategy from './paypal-commerce-venmo-customer-strategy';\n\nconst createPayPalCommerceVenmoCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceVenmoCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoCustomerStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getFastlaneStyles,\n    PayPalCommerceFastlaneUtils,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneStylesOption,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceFastlaneCustomerInitializeOptions, {\n    WithPayPalCommerceFastlaneCustomerInitializeOptions,\n} from './paypal-commerce-fastlane-customer-initialize-options';\n\nexport default class PayPalCommerceFastlaneCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n        private paypalCommerceFastlaneUtils: PayPalCommerceFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithPayPalCommerceFastlaneCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, paypalcommercefastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n            const isTestModeEnabled = !!paymentMethod.initializationData?.isDeveloperModeApplicable;\n\n            const paypalFastlaneSdk = await this.paypalCommerceSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.paypalCommerceFastlaneUtils.initializePayPalFastlane(\n                paypalFastlaneSdk,\n                isTestModeEnabled,\n                this.getFastlaneStyles(methodId, paypalcommercefastlane),\n            );\n        } catch (_) {\n            // TODO: add logger to be able to debug issues if there any\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback, methodId } =\n            options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (customer.isGuest) {\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            try {\n                await this.runPayPalAuthenticationFlowOrThrow(methodId);\n            } catch (_) {\n                // TODO: add logger to be able to debug issues if there any\n                // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const customer = state.getCustomer();\n        const billingAddress = state.getBillingAddress();\n        const customerEmail = customer?.email || billingAddress?.email || '';\n\n        const { customerContextId } = await this.paypalCommerceFastlaneUtils.lookupCustomerOrThrow(\n            customerEmail,\n        );\n\n        const authenticationResult =\n            await this.paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                customerContextId,\n            );\n\n        const isAuthenticationFlowCanceled =\n            authenticationResult.authenticationState === PayPalFastlaneAuthenticationState.CANCELED;\n\n        await this.updateCustomerDataState(methodId, authenticationResult);\n\n        if (isAuthenticationFlowCanceled) {\n            this.paypalCommerceFastlaneUtils.removeStorageSessionId();\n        } else {\n            this.paypalCommerceFastlaneUtils.updateStorageSessionId(cartId);\n        }\n    }\n\n    private async updateCustomerDataState(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        const { authenticationState, addresses, billingAddress, shippingAddress, instruments } =\n            this.paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                methodId,\n                authenticationResult,\n            );\n\n        await this.paymentIntegrationService.updatePaymentProviderCustomer({\n            authenticationState,\n            addresses,\n            instruments,\n        });\n\n        if (billingAddress) {\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && cart.lineItems.physicalItems.length > 0) {\n            const updatedState = await this.paymentIntegrationService.updateShippingAddress(\n                shippingAddress,\n            );\n\n            const paymentMethod =\n                updatedState.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n            const { isFastlaneShippingOptionAutoSelectEnabled } =\n                paymentMethod.initializationData || {};\n            const consignments = updatedState.getConsignments() || [];\n            const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n            const firstShippingOption = availableShippingOptions[0];\n            const recommendedShippingOption = availableShippingOptions.find(\n                (option) => option.isRecommended,\n            );\n\n            if (\n                (recommendedShippingOption || firstShippingOption) &&\n                isFastlaneShippingOptionAutoSelectEnabled\n            ) {\n                const shippingOptionId = recommendedShippingOption?.id || firstShippingOption.id;\n\n                await this.paymentIntegrationService.selectShippingOption(shippingOptionId);\n            }\n        }\n    }\n\n    /**\n     *\n     * Fastlane styling methods\n     *\n     */\n    private getFastlaneStyles(\n        methodId: string,\n        paypalcommercefastlane: PayPalCommerceFastlaneCustomerInitializeOptions | undefined,\n    ): PayPalFastlaneStylesOption | undefined {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        const { fastlaneStyles, isFastlaneStylingEnabled } = paymentMethod.initializationData || {};\n\n        return getFastlaneStyles(\n            isFastlaneStylingEnabled ? fastlaneStyles : {},\n            paypalcommercefastlane?.styles,\n        );\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    createPayPalCommerceFastlaneUtils,\n    createPayPalCommerceSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceFastlaneCustomerStrategy from './paypal-commerce-fastlane-customer-strategy';\n\nconst createPayPalCommerceFastlaneCustomerStrategy: CustomerStrategyFactory<\n    PayPalCommerceFastlaneCustomerStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceFastlaneCustomerStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceSdk(),\n        createPayPalCommerceFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceFastlaneCustomerStrategy, [\n    { id: 'paypalcommerceacceleratedcheckout' }, // this method id will be provided for users from test group\n    { id: 'paypalcommercecreditcards' }, // this method id will be provided for users from control group\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    PayPalCommerceInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceButtonInitializeOptions, {\n    WithPayPalCommerceButtonInitializeOptions,\n} from './paypal-commerce-button-initialize-options';\n\nexport default class PayPalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommerce, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(paypalcommerce?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommerce) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !paypalcommerce.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof paypalcommerce.buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommerce.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? paypalcommerce.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommerce, isBuyNowFlow);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommerce: PayPalCommerceButtonInitializeOptions,\n        isBuyNowFlow?: boolean,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } = paypalcommerce;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            ...(!isBuyNowFlow &&\n                this.isPaypalCommerceAppSwitchEnabled(methodId) && {\n                    appSwitchWhenAvailable: true,\n                }),\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            if (paypalButton.hasReturned?.() && this.isPaypalCommerceAppSwitchEnabled(methodId)) {\n                paypalButton.resume?.();\n            } else {\n                paypalButton.render(`#${containerId}`);\n            }\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     *\n     * PayPal AppSwitch enabling handling\n     *\n     */\n    private isPaypalCommerceAppSwitchEnabled(methodId: string): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n        return paymentMethod.initializationData?.isAppSwitchEnabled || false;\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceButtonStrategy from './paypal-commerce-button-strategy';\n\nconst createPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceButtonStrategy, [{ id: 'paypalcommerce' }]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalCommerceInitializationData,\n    PayPalCommerceSdk,\n    PayPalMessagesSdk,\n} from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceCreditButtonInitializeOptions, {\n    WithPayPalCommerceCreditButtonInitializeOptions,\n} from './paypal-commerce-credit-button-initialize-options';\n\nexport default class PayPalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n        private paypalCommerceSdk: PayPalCommerceSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercecredit, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = paypalcommercecredit || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercecredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercecredit.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercecredit);\n\n        // TODO: remove banner rendering implementation in this file when PAYPAL-5557.Hide_ppc_banner_implementation will be rolled out to 100%\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isBannerImplementationDisabled =\n            features['PAYPAL-5557.Hide_ppc_banner_implementation'] ?? false;\n\n        if (isBannerImplementationDisabled) {\n            return;\n        }\n\n        const messagingContainer =\n            messagingContainerId && document.getElementById(messagingContainerId);\n\n        if (currencyCode && messagingContainer) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData || {};\n            const bannerConfiguration =\n                paypalBNPLConfiguration && paypalBNPLConfiguration.find(({ id }) => id === 'cart');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            // TODO: remove this code when data attributes will be removed from the banner container in content service\n            messagingContainer.removeAttribute('data-pp-style-logo-type');\n            messagingContainer.removeAttribute('data-pp-style-logo-position');\n            messagingContainer.removeAttribute('data-pp-style-text-color');\n            messagingContainer.removeAttribute('data-pp-style-text-size');\n\n            const paypalSdk = await this.paypalCommerceSdk.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(paypalSdk, messagingContainerId, bannerConfiguration);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercecredit: PayPalCommerceCreditButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            paypalcommercecredit;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, isAppSwitchEnabled } =\n            paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            ...(!isAppSwitchEnabled && {\n                onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                    this.onShippingAddressChange(data),\n                onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                    this.onShippingOptionsChange(data),\n            }),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n                    fundingSource,\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                    onEligibilityFailure();\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.paypalCommerceIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.paypalCommerceIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.paypalCommerceIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'cart',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n        paypalMessages.render(`#${messagingContainerId}`);\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { createPayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceCreditButtonStrategy from './paypal-commerce-credit-button-strategy';\n\nconst createPayPalCommerceCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceCreditButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceCreditButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n        createPayPalCommerceSdk(),\n    );\n\nexport default toResolvableModule(createPayPalCommerceCreditButtonStrategy, [\n    { id: 'paypalcommercecredit' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n    StyleButtonColor,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceVenmoButtonInitializeOptions, {\n    WithPayPalCommerceVenmoButtonInitializeOptions,\n} from './paypal-commerce-venmo-button-initialize-options';\n\nexport default class PayPalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercevenmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            paypalcommercevenmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercevenmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercevenmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercevenmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercevenmo: PayPalCommerceVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onEligibilityFailure } = paypalcommercevenmo;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle = this.paypalCommerceIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceVenmoButtonStrategy from './paypal-commerce-venmo-button-strategy';\n\nconst createPayPalCommerceVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceVenmoButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceVenmoButtonStrategy, [\n    { id: 'paypalcommercevenmo' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\nimport {\n    ApproveCallbackPayload,\n    PayPalBuyNowInitializeOptions,\n    PayPalCommerceButtonsOptions,\n} from '../paypal-commerce-types';\n\nimport PayPalCommerceAlternativeMethodsButtonOptions, {\n    WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n} from './paypal-commerce-alternative-methods-button-initialize-options';\n\nexport default class PayPalCommerceAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = paypalcommercealternativemethods || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!paypalcommercealternativemethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\n\n        this.renderButton(containerId, methodId, paypalcommercealternativemethods);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        paypalcommercealternativemethods: PayPalCommerceAlternativeMethodsButtonOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style, onEligibilityFailure } =\n            paypalcommercealternativemethods;\n\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.paypalCommerceIntegrationService.createOrder(\n                    'paypalcommercealternativemethod',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\n            fundingSource: apm,\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.paypalCommerceIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\n                buyNowInitializeOptions,\n            );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\n\nimport PayPalCommerceAlternativeMethodsButtonStrategy from './paypal-commerce-alternative-methods-button-strategy';\n\nconst createPayPalCommerceAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    PayPalCommerceAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new PayPalCommerceAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsButtonStrategy, [\n    { id: 'paypalcommercealternativemethods' },\n]);\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import {\n    BuyNowCartRequestBody,\n    HostedInstrument,\n    ShippingOption,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * BigCommerce Payments Funding sources\n *\n */\nexport type FundingType = string;\n// TODO: rename BigCommercePaymentsSDKFunding to PayPalSDKFunding\nexport interface BigCommercePaymentsSDKFunding {\n    CARD: string;\n    PAYPAL: string;\n    CREDIT: string;\n    PAYLATER: string;\n    OXXO: string;\n    SEPA: string;\n    VENMO: string;\n}\n\n/**\n *\n * BigCommerce Payments SDK\n *\n */\n\nexport interface BigCommercePaymentsCardFieldsConfig {\n    inputEvents: {\n        onChange(data: BigCommercePaymentsCardFieldsState): void;\n        onFocus(data: BigCommercePaymentsCardFieldsState): void;\n        onBlur(data: BigCommercePaymentsCardFieldsState): void;\n        onInputSubmitRequest(data: BigCommercePaymentsCardFieldsState): void;\n    };\n    createVaultSetupToken?: (data: BigCommercePaymentsCardFieldsState) => void;\n    createOrder?: () => Promise<string>;\n    style: BigCommercePaymentsHostedFieldsRenderOptions['styles'];\n    onApprove(data: BigCommercePaymentsCardFieldsOnApproveData): void;\n    onError(): void;\n}\n\nexport interface BigCommercePaymentsCardFieldsOnApproveData {\n    vaultSetupToken?: string;\n    orderID: string;\n    liabilityShift?: LiabilityShiftEnum;\n}\n\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\ninterface BigCommercePaymentsCardFieldsFieldData {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isValid: boolean;\n    isPotentiallyValid: boolean;\n}\n\ntype BigCommercePaymentsCardFieldsCard = BigCommercePaymentsHostedFieldsCard;\n\nexport interface BigCommercePaymentsCardFieldsState {\n    cards: BigCommercePaymentsCardFieldsCard[];\n    emittedBy: string;\n    isFormValid: boolean;\n    errors: string[];\n    fields: {\n        cardCvvField: BigCommercePaymentsCardFieldsFieldData;\n        cardNumberField: BigCommercePaymentsCardFieldsFieldData;\n        cardNameField?: BigCommercePaymentsCardFieldsFieldData;\n        cardExpiryField: BigCommercePaymentsCardFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsFields {\n    render(container: HTMLElement | string): Promise<void>;\n    clear(): void;\n    removeClass(className: string): Promise<void>;\n    close(): Promise<void>;\n}\n\ninterface BigCommercePaymentsFieldsInitializationData {\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsCardFields {\n    isEligible(): boolean;\n    CVVField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    ExpiryField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NameField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    NumberField(config?: BigCommercePaymentsFieldsInitializationData): BigCommercePaymentsFields;\n    submit(config?: BigCommercePaymentsCardFieldsSubmitConfig): Promise<void>;\n    getState(): Promise<BigCommercePaymentsCardFieldsState>;\n}\n\nexport interface BigCommercePaymentsCardFieldsSubmitConfig {\n    billingAddress: {\n        company?: string;\n        addressLine1: string;\n        addressLine2?: string;\n        adminArea1: string; // State\n        adminArea2: string; // City\n        postalCode: string;\n        countryCode?: string;\n    };\n}\n\nexport interface PayPalSDK {\n    CardFields: (\n        data: BigCommercePaymentsCardFieldsConfig,\n    ) => Promise<BigCommercePaymentsCardFields>;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: BigCommercePaymentsSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(\n            data: BigCommercePaymentsHostedFieldsRenderOptions,\n        ): Promise<BigCommercePaymentsHostedFields>;\n    };\n    Legal: PayPalLegal & LegalFunding;\n    Buttons(options: BigCommercePaymentsButtonsOptions): BigCommercePaymentsButtons;\n    PaymentFields(\n        options: BigCommercePaymentsPaymentFieldsOptions,\n    ): BigCommercePaymentsPaymentFields;\n    Messages(options: BigCommercePaymentsMessagesOptions): BigCommercePaymentsMessages;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport type PayPalLegal = (params: { fundingSource: string }) => {\n    render(container: string): void;\n};\n\nexport interface LegalFunding {\n    FUNDING: {\n        PAY_UPON_INVOICE: string;\n    };\n}\n\nexport interface BirthDate {\n    getFullYear(): number;\n    getDate(): number;\n    getMonth(): number;\n}\n\nexport interface BigCommercePaymentsScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType[];\n        'enable-funding'?: FundingType[];\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'connect'\n    | 'card-fields'\n>;\n\nexport interface BigCommercePaymentsHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\n/**\n *\n * BigCommerce Payments Initialization Data\n *\n */\nexport interface BigCommercePaymentsInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType[];\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType[];\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\n/**\n *\n * BigCommerce Payments BuyNow\n *\n */\nexport interface PayPalBuyNowInitializeOptions {\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\n}\n\n/**\n *\n * BigCommerce Payments Hosted Fields\n *\n */\nexport interface BigCommercePaymentsHostedFieldsRenderOptions {\n    fields?: {\n        number?: BigCommercePaymentsHostedFieldOption;\n        cvv?: BigCommercePaymentsHostedFieldOption;\n        expirationDate?: BigCommercePaymentsHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface BigCommercePaymentsHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface BigCommercePaymentsHostedFields {\n    submit(\n        options?: BigCommercePaymentsHostedFieldsSubmitOptions,\n    ): Promise<BigCommercePaymentsHostedFieldsApprove>;\n    getState(): BigCommercePaymentsHostedFieldsState;\n    on(eventName: string, callback: (event: BigCommercePaymentsHostedFieldsState) => void): void;\n}\n\nexport interface BigCommercePaymentsHostedFieldsSubmitOptions {\n    contingencies?: Array<'3D_SECURE'>;\n    cardholderName?: string;\n}\n\nexport interface BigCommercePaymentsHostedFieldsApprove {\n    orderId: string;\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\n}\n\nexport interface BigCommercePaymentsHostedFieldsState {\n    cards: BigCommercePaymentsHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationDate?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationMonth?: BigCommercePaymentsHostedFieldsFieldData;\n        expirationYear?: BigCommercePaymentsHostedFieldsFieldData;\n        cvv?: BigCommercePaymentsHostedFieldsFieldData;\n        postalCode?: BigCommercePaymentsHostedFieldsFieldData;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: {\n        name: string;\n        size: number;\n    };\n}\n\nexport interface BigCommercePaymentsHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\n/**\n *\n * BigCommerce Payments Buttons\n *\n */\nexport interface BigCommercePaymentsButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface BigCommercePaymentsButtonsOptions {\n    experience?: string;\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(data: InitCallbackPayload, actions: InitCallbackActions): Promise<void>;\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\n}\n\nexport interface ShippingOptionChangeCallbackPayload {\n    orderId: string;\n    selectedShippingOption: PayPalSelectedShippingOption;\n}\n\nexport interface ShippingAddressChangeCallbackPayload {\n    orderId: string;\n    shippingAddress: PayPalAddress;\n}\n\nexport interface ClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface ClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface InitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface InitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalAddress {\n    city: string;\n    countryCode: string;\n    postalCode: string;\n    state: string;\n}\n\nexport interface PaypalAddressCallbackData {\n    city: string;\n    country_code: string;\n    postal_code: string;\n    state: string;\n}\n\nexport interface PayPalSelectedShippingOption {\n    amount: {\n        currency_code: string;\n        value: string;\n    };\n    id: string;\n    label: string;\n    selected: boolean;\n    type: string;\n}\n\nexport interface ApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface ApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n        phone?: {\n            phone_number: {\n                national_number: string;\n            };\n        };\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n            name: {\n                full_name: string;\n            };\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    address_line_2: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport interface CompleteCallbackDataPayload {\n    intent: string;\n    orderID: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * BigCommerce Payments Payment fields\n *\n */\nexport interface BigCommercePaymentsPaymentFields {\n    render(id: string): void;\n}\n\nexport interface BigCommercePaymentsPaymentFieldsOptions {\n    style?: BigCommercePaymentsFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface BigCommercePaymentsFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * BigCommercePayments Messages\n */\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessages {\n    render(id: string): void;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesOptions {\n    amount: number;\n    placement: string;\n    style?: BigCommercePaymentsMessagesStyleOptions;\n    fundingSource?: string;\n}\n\n// TODO: This interface can be removed once the PayPaySDK interface is removed\nexport interface BigCommercePaymentsMessagesStyleOptions {\n    layout?: string;\n}\n\n/**\n *\n * Other\n *\n */\nexport enum NonInstantAlternativePaymentMethods {\n    OXXO = 'oxxo',\n}\n\nexport interface PayPalOrderData {\n    orderId: string;\n    setupToken?: string;\n    approveUrl: string;\n}\n\nexport interface PayPalUpdateOrderRequestBody {\n    availableShippingOptions?: ShippingOption[];\n    cartId: string;\n    selectedShippingOption?: ShippingOption;\n}\n\nexport interface PayPalUpdateOrderResponse {\n    statusCode: number;\n}\n\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\n    cartId: string;\n    metadataId?: string;\n    setupToken?: boolean;\n    fastlaneToken?: string;\n}\n\nexport enum PayPalOrderStatus {\n    Approved = 'APPROVED',\n    Created = 'CREATED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n    PollingStop = 'POLLING_STOP',\n    PollingError = 'POLLING_ERROR',\n}\n\nexport interface PayPalOrderStatusData {\n    status: PayPalOrderStatus;\n}\n\nexport interface PayPalCreateOrderCardFieldsResponse {\n    orderId: string;\n    setupToken?: string;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { isNil, omitBy } from 'lodash';\n\nimport {\n    BillingAddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    CartSource,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    RequestError,\n    RequestOptions,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from './bigcommerce-payments-request-sender';\nimport BigCommercePaymentsScriptLoader from './bigcommerce-payments-script-loader';\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    PayPalCreateOrderCardFieldsResponse,\n    PayPalCreateOrderRequestBody,\n    PayPalOrderDetails,\n    PayPalOrderStatus,\n    PayPalSDK,\n    StyleButtonColor,\n    StyleButtonLabel,\n    StyleButtonShape,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsIntegrationService {\n    private paypalSdk?: PayPalSDK;\n\n    constructor(\n        private formPoster: FormPoster,\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsRequestSender: BigCommercePaymentsRequestSender,\n        private bigCommercePaymentsScriptLoader: BigCommercePaymentsScriptLoader,\n    ) {}\n\n    /**\n     *\n     * PayPalSDK methods\n     *\n     */\n    async loadPayPalSdk(\n        methodId: string,\n        providedCurrencyCode?: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        this.paypalSdk = await this.bigCommercePaymentsScriptLoader.getPayPalSDK(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n            forceLoad,\n        );\n\n        return this.paypalSdk;\n    }\n\n    getPayPalSdkOrThrow(): PayPalSDK {\n        if (!this.paypalSdk) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalSdk;\n    }\n\n    /**\n     *\n     * Buy Now cart creation methods\n     *\n     */\n    async createBuyNowCartOrThrow(\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\n    ): Promise<Cart> {\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n        if (!cartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    /**\n     *\n     * Order methods\n     *\n     */\n    async createOrder(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<string> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId } = await this.bigCommercePaymentsRequestSender.createOrder(providerId, {\n            cartId,\n            ...requestBody,\n        });\n\n        return orderId;\n    }\n\n    async createOrderCardFields(\n        providerId: string,\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalCreateOrderCardFieldsResponse> {\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\n\n        const { orderId, setupToken } = await this.bigCommercePaymentsRequestSender.createOrder(\n            providerId,\n            {\n                cartId,\n                ...requestBody,\n            },\n        );\n\n        return { orderId, ...(setupToken ? { setupToken } : {}) };\n    }\n\n    async updateOrder(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        try {\n            await this.bigCommercePaymentsRequestSender.updateOrder({\n                availableShippingOptions: consignment.availableShippingOptions,\n                cartId: cart.id,\n                selectedShippingOption: consignment.selectedShippingOption,\n            });\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    async getOrderStatus(methodId?: string, options?: RequestOptions): Promise<PayPalOrderStatus> {\n        try {\n            const { status } = await this.bigCommercePaymentsRequestSender.getOrderStatus(\n                methodId,\n                options,\n            );\n\n            return status;\n        } catch (_error) {\n            throw new RequestError();\n        }\n    }\n\n    /**\n     *\n     * Payment submitting and tokenizing methods\n     *\n     */\n    tokenizePayment(methodId: string, orderId?: string): void {\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        if (!orderId) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: methodId,\n            order_id: orderId,\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\n        });\n    }\n\n    async submitPayment(methodId: string, orderId: string, gatewayId?: string): Promise<void> {\n        const paymentData = {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: null,\n                method_id: methodId,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this.paymentIntegrationService.submitPayment({\n            methodId,\n            paymentData,\n            ...(gatewayId ? { gatewayId } : {}),\n        });\n    }\n\n    /**\n     *\n     * Shipping options methods\n     *\n     */\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\n        const state = this.paymentIntegrationService.getState();\n        const consignment = state.getConsignmentsOrThrow()[0];\n\n        const availableShippingOptions = consignment.availableShippingOptions || [];\n\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        const selectedShippingOption = selectedShippingOptionId\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\n            : availableShippingOptions.find(\n                  (option) => option.id === consignment.selectedShippingOption?.id,\n              );\n\n        const shippingOptionToSelect =\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\n\n        if (!shippingOptionToSelect) {\n            throw new Error(\"Your order can't be shipped to this address\");\n        }\n\n        return shippingOptionToSelect;\n    }\n\n    /**\n     *\n     * Address transforming methods\n     *\n     */\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\n        return {\n            firstName: address?.firstName || '',\n            lastName: address?.lastName || '',\n            email: address?.email || '',\n            phone: address?.phone || '',\n            company: '',\n            address1: address?.address1 || '',\n            address2: address?.address2 || '',\n            city: address?.city || '',\n            countryCode: address?.countryCode || '',\n            postalCode: address?.postalCode || '',\n            stateOrProvince: '',\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\n            customFields: [],\n        };\n    }\n\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\n        return this.getAddress({\n            firstName: payer.name.given_name,\n            lastName: payer.name.surname,\n            email: payer.email_address,\n            address1: payer.address.address_line_1,\n            address2: payer.address.address_line_2,\n            city: payer.address.admin_area_2,\n            countryCode: payer.address.country_code,\n            postalCode: payer.address.postal_code,\n            stateOrProvinceCode: payer.address.admin_area_1,\n            phone: payer.phone?.phone_number?.national_number,\n        });\n    }\n\n    getShippingAddressFromOrderDetails(\n        orderDetails: PayPalOrderDetails,\n    ): BillingAddressRequestBody {\n        const { payer, purchase_units } = orderDetails;\n        const {\n            address,\n            name: { full_name },\n        } = purchase_units[0].shipping;\n\n        const [firstName, ...lastName] = full_name.split(' ');\n\n        return this.getAddress({\n            firstName,\n            lastName: lastName.join(' '),\n            email: payer.email_address,\n            address1: address.address_line_1,\n            address2: address.address_line_2,\n            city: address.admin_area_2,\n            countryCode: address.country_code,\n            postalCode: address.postal_code,\n            stateOrProvinceCode: address.admin_area_1,\n        });\n    }\n\n    /**\n     *\n     * Buttons style methods\n     *\n     */\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\n        const { color, height, label, shape } = style || {};\n\n        const validStyles = {\n            color: color && StyleButtonColor[color] ? color : undefined,\n            height: this.getValidHeight(height),\n            label: label && StyleButtonLabel[label] ? label : undefined,\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\n        };\n\n        return omitBy(validStyles, isNil);\n    }\n\n    getValidHeight(height?: number): number {\n        const defaultHeight = 40;\n        const minHeight = 25;\n        const maxHeight = 55;\n\n        if (!height || typeof height !== 'number') {\n            return defaultHeight;\n        }\n\n        if (height > maxHeight) {\n            return maxHeight;\n        }\n\n        if (height < minHeight) {\n            return minHeight;\n        }\n\n        return height;\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            // For now this is a temporary solution, further removeElement method will be removed\n            element.style.display = 'none';\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCreateOrderRequestBody,\n    PayPalOrderData,\n    PayPalOrderStatusData,\n    PayPalUpdateOrderRequestBody,\n    PayPalUpdateOrderResponse,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async createOrder(\n        providerId: string,\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\n    ): Promise<PayPalOrderData> {\n        const url = `/api/storefront/payment/${providerId}`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async updateOrder(\n        requestBody: PayPalUpdateOrderRequestBody,\n    ): Promise<PayPalUpdateOrderResponse> {\n        const url = `/api/storefront/initialization/bigcommerce_payments`;\n        const body = requestBody;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\n\n        return res.body;\n    }\n\n    async getOrderStatus(\n        methodId = 'bigcommerce_payments',\n        options?: RequestOptions,\n    ): Promise<PayPalOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsHostWindow,\n    BigCommercePaymentsInitializationData,\n    BigCommercePaymentsScriptParams,\n    ComponentsScriptType,\n    FundingType,\n    PayPalSDK,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsScriptLoader {\n    private window: BigCommercePaymentsHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalSDK(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalSDK> {\n        const paypalSdkScriptConfig = this.getPayPalSdkScriptConfigOrThrow(\n            paymentMethod,\n            currencyCode,\n            initializesOnCheckoutPage,\n        );\n\n        return this.loadPayPalSDK(paypalSdkScriptConfig, forceLoad);\n    }\n\n    private async loadPayPalSDK(\n        paypalSdkScriptConfig: BigCommercePaymentsScriptParams,\n        forceLoad = false,\n    ): Promise<PayPalSDK> {\n        if (!this.window.paypal || forceLoad) {\n            const options = this.transformConfig<BigCommercePaymentsScriptParams['options']>(\n                paypalSdkScriptConfig.options,\n            );\n            const attributes = this.transformConfig<BigCommercePaymentsScriptParams['attributes']>(\n                paypalSdkScriptConfig.attributes,\n            );\n\n            const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n            const scriptQuery = new URLSearchParams(options).toString();\n            const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n        }\n\n        if (!this.window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypal;\n    }\n\n    private getPayPalSdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): BigCommercePaymentsScriptParams {\n        const { id, clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData?.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isVenmoEnabled,\n            isHostedCheckoutEnabled,\n            isPayPalCreditAvailable,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n            isGooglePayEnabled,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        const shouldEnableCard = id === 'bigcommerce_payments_creditcards';\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\n\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\n\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\n        const enableVenmoFunding = isVenmoEnabled ? ['venmo'] : [];\n        const disableVenmoFunding = !isVenmoEnabled ? ['venmo'] : [];\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\n        const disableAPMsFunding = shouldEnableAPMs\n            ? availableAlternativePaymentMethods.filter(\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n              )\n            : availableAlternativePaymentMethods;\n        const googlePayComponent: ComponentsScriptType = isGooglePayEnabled ? ['googlepay'] : [];\n        const cardFieldsComponent: ComponentsScriptType = initializesOnCheckoutPage\n            ? ['card-fields']\n            : [];\n        const disableFunding: FundingType[] = this.filterFundingOptions([\n            ...disableCardFunding,\n            ...disableCreditFunding,\n            ...disableVenmoFunding,\n            ...disableAPMsFunding,\n        ]);\n        const enableFunding: FundingType[] = this.filterFundingOptions([\n            ...enableCardFunding,\n            ...enableCreditFunding,\n            ...enableVenmoFunding,\n            ...enableAPMsFunding,\n        ]);\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\n                'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\n                commit,\n                components: [\n                    'buttons',\n                    'hosted-fields',\n                    'payment-fields',\n                    'legal',\n                    ...googlePayComponent,\n                    ...cardFieldsComponent,\n                ],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n            },\n        };\n    }\n\n    private filterFundingOptions(fundingOptions: FundingType[] | undefined): FundingType[] {\n        const fundingTypesToBeFiltered = ['klarna'];\n\n        if (!fundingOptions) {\n            return [];\n        }\n\n        return fundingOptions.filter(\n            (fundingOption: FundingType) => !fundingTypesToBeFiltered.includes(fundingOption),\n        );\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsIntegrationService,\n    BigCommercePaymentsRequestSender,\n    BigCommercePaymentsScriptLoader,\n} from './index';\n\nconst createBigCommercePaymentsIntegrationService = (\n    paymentIntegrationService: PaymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new BigCommercePaymentsIntegrationService(\n        createFormPoster(),\n        paymentIntegrationService,\n        new BigCommercePaymentsRequestSender(createRequestSender({ host: getHost() })),\n        new BigCommercePaymentsScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default createBigCommercePaymentsIntegrationService;\n","import { isBigCommercePaymentsProviderError } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    HostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentPayload,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isBaseInstrument } from '@bigcommerce/checkout-sdk/utility';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPaymentInitializeOptions, {\n    WithBigCommercePaymentsPaymentInitializeOptions,\n} from './bigcommerce-payments-payment-initialize-options';\n\nexport default class BigCommercePaymentsPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: BigCommercePaymentsButtons;\n    private bigcommerce_payments?: BigCommercePaymentsPaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithBigCommercePaymentsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments } = options || {};\n\n        this.bigcommerce_payments = bigcommerce_payments;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        this.loadingIndicatorContainer = bigcommerce_payments.container.split('#')[1];\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (bigcommerce_payments.onInit && typeof bigcommerce_payments.onInit === 'function') {\n            bigcommerce_payments.onInit(() => this.renderButton(methodId, bigcommerce_payments));\n        }\n\n        if (\n            bigcommerce_payments.shouldRenderPayPalButtonOnInitialization === undefined ||\n            bigcommerce_payments.shouldRenderPayPalButtonOnInitialization\n        ) {\n            this.renderButton(methodId, bigcommerce_payments);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { onError } = this.bigcommerce_payments || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n\n        if (this.isPayPalVaultedInstrumentPaymentData(paymentData) && !this.orderId) {\n            this.orderId = await this.createOrder();\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        const paymentPayload = this.isPayPalVaultedInstrumentPaymentData(paymentData)\n            ? this.prepareVaultedInstrumentPaymentPayload(methodId, this.orderId, paymentData)\n            : this.preparePaymentPayload(methodId, this.orderId, paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            if (this.isProviderError(error)) {\n                await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(payment.methodId);\n\n                await new Promise((_resolve, reject) => {\n                    if (this.bigcommerce_payments) {\n                        this.paypalButton?.close();\n                        this.renderButton(payment.methodId, this.bigcommerce_payments);\n                        this.handleError(new Error('INSTRUMENT_DECLINED'), onError);\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error, onError);\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    private prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: VaultedInstrument & HostedInstrument,\n    ): Payment {\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        const shouldConfirmInstrument = !this.isTrustedVaultingFlow(paymentData);\n\n        if (shouldConfirmInstrument) {\n            return {\n                methodId,\n                paymentData: {\n                    shouldSaveInstrument: shouldConfirmInstrument,\n                    shouldSetAsDefaultInstrument,\n                    formattedPayload: {\n                        paypal_account: {\n                            order_id: paypalOrderId,\n                        },\n                    },\n                },\n            };\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                    bigpay_token: {\n                        token: instrumentId,\n                    },\n                },\n            },\n        };\n    }\n\n    private preparePaymentPayload(\n        methodId: string,\n        paypalOrderId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_account: {\n                        order_id: paypalOrderId,\n                    },\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n        const { container, onError, onRenderButton, onValidate, submitForm } = bigcommerce_payments;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () => this.createOrder(),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onError: (error) => this.handleError(error, onError),\n            onCancel: () => this.toggleLoadingIndicator(false),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleError(\n        error: unknown,\n        onError: BigCommercePaymentsPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private async createOrder(): Promise<string> {\n        const fieldsValues = this.getFieldsValues();\n\n        return this.bigCommercePaymentsIntegrationService.createOrder(\n            'bigcommerce_paymentscheckout',\n            {\n                shouldSaveInstrument: fieldsValues?.shouldSaveInstrument || false,\n            },\n        );\n    }\n\n    /**\n     *\n     * Vaulting flow methods\n     *\n     * */\n    private getFieldsValues(): HostedInstrument | undefined {\n        const { getFieldsValues } = this.bigcommerce_payments || {};\n\n        return typeof getFieldsValues === 'function' ? getFieldsValues() : undefined;\n    }\n\n    private isTrustedVaultingFlow(paymentData?: PaymentInstrumentPayload): boolean {\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            const state = this.paymentIntegrationService.getState();\n\n            const instruments = state.getInstruments();\n\n            const findInstrument = instruments?.find(\n                (instrument) =>\n                    isBaseInstrument(instrument) &&\n                    instrument.bigpayToken === paymentData.instrumentId,\n            );\n            const trustedShippingAddress = isBaseInstrument(findInstrument)\n                ? findInstrument.trustedShippingAddress\n                : {};\n\n            return !!trustedShippingAddress;\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Guards\n     *\n     */\n    private isPayPalVaultedInstrumentPaymentData(\n        paymentData?: PaymentInstrumentPayload,\n    ): paymentData is VaultedInstrument & HostedInstrument {\n        return (\n            !!paymentData && isVaultedInstrument(paymentData) && isHostedInstrumentLike(paymentData)\n        );\n    }\n\n    private isProviderError(error: unknown): boolean {\n        if (isBigCommercePaymentsProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e) => e.provider_error) || [];\n\n            return paypalProviderError[0]?.provider_error?.code === 'INSTRUMENT_DECLINED';\n        }\n\n        return false;\n    }\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isBigCommercePaymentsProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPaymentStrategy from './bigcommerce-payments-payment-strategy';\n\nconst createBigCommercePaymentsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPaymentStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import { CardInstrument, CustomerAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n *\n * BigCommerce Payments Funding sources\n *\n */\nexport type FundingType = string;\n\n/**\n *\n * BigCommerce Payments Initialization Data\n *\n */\nexport interface BigCommercePaymentsInitializationData {\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType[];\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientId: string;\n    clientToken?: string;\n    fastlaneStyles?: FastlaneStylesSettings;\n    connectClientToken?: string; // TODO: remove when BCP Fastlane A/B test will be finished\n    enabledAlternativePaymentMethods: FundingType[];\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isAcceleratedCheckoutEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean; // PayPal Fastlane related\n    isFastlaneStylingEnabled?: boolean;\n    isHostedCheckoutEnabled?: boolean;\n    isBigCommercePaymentsAnalyticsV2Enabled?: boolean; // PayPal Fastlane related\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    merchantId?: string;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: remove when BCP Fastlane A/B test will be finished\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[];\n    threeDSVerificationMethod?: string;\n}\n\n/**\n *\n * PayPalHostWindow contains different\n * PayPal Sdk instances for different purposes\n *\n */\nexport interface PayPalHostWindow extends Window {\n    paypalFastlane?: PayPalFastlane;\n    paypalFastlaneSdk?: PayPalFastlaneSdk;\n    paypalMessages?: PayPalMessagesSdk;\n    paypalApms?: PayPalApmSdk;\n    paypalGooglePay?: PayPalGooglePaySdk;\n}\n\n/**\n *\n * PayPal SDK config\n *\n */\nexport interface PayPalSdkConfig {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'enable-funding'?: FundingType[];\n        'disable-funding'?: FundingType[];\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: PayPalSdkComponents;\n    };\n    attributes: {\n        'data-client-metadata-id'?: string;\n        'data-partner-attribution-id'?: string;\n        'data-user-id-token'?: string;\n        'data-namespace'?: string;\n        'data-client-token'?: string;\n        'data-sdk-client-token'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type PayPalSdkComponents = Array<\n    'fastlane' | 'messages' | 'buttons' | 'payment-fields' | 'googlepay' | 'three-domain-secure'\n>;\n\n/**\n *\n * PayPal Sdk instances\n *\n */\nexport enum LiabilityShiftEnum {\n    Possible = 'POSSIBLE',\n    No = 'NO',\n    Unknown = 'UNKNOWN',\n    Yes = 'YES',\n}\n\nexport interface threeDSecureParameters {\n    amount: string;\n    currency: string;\n    nonce: string;\n    threeDSRequested: boolean;\n    transactionContext: {\n        experience_context: {\n            brand_name?: string;\n            locale: string;\n            return_url: string;\n            cancel_url: string;\n        };\n    };\n}\n\nexport interface PayPalFastlaneSdk {\n    ThreeDomainSecureClient: {\n        isEligible(params: threeDSecureParameters): Promise<boolean>;\n        show(): Promise<ThreeDomainSecureClientShowResponse>;\n    };\n    Fastlane(options?: PayPalFastlaneOptions): Promise<PayPalFastlane>;\n}\n\ninterface ThreeDomainSecureClientShowResponse {\n    liabilityShift: LiabilityShiftEnum;\n    authenticationState: TDSecureAuthenticationState;\n    nonce: string; // Enriched nonce or the original nonce\n}\n\nexport interface PayPalMessagesSdk {\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PayPalApmSdk {\n    Buttons(options: BigCommercePaymentsButtonsOptions): BigCommercePaymentsButtons;\n    PaymentFields(\n        options: BigCommercePaymentsPaymentFieldsOptions,\n    ): BigCommercePaymentsPaymentFields;\n}\n\nexport interface PayPalGooglePaySdk {\n    Googlepay(): GooglePay;\n}\n\nexport enum TDSecureAuthenticationState {\n    Succeeded = 'succeeded',\n    Cancelled = 'cancelled',\n    Errored = 'errored',\n}\n\n/**\n *\n * Google Pay related types\n *\n */\n\ninterface GooglePay {\n    config: () => Promise<GooglePayConfig>;\n    confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n    initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\n/**\n *\n * BigCommerce Payments Buttons\n *\n */\nexport interface BigCommercePaymentsButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface BigCommercePaymentsButtonsOptions {\n    style?: PayPalButtonStyleOptions;\n    fundingSource: string;\n    createOrder(): Promise<string>;\n    onApprove(\n        data: PayPalButtonApproveCallbackPayload,\n        actions: PayPalButtonApproveCallbackActions,\n    ): Promise<boolean | void> | void;\n    onInit?(\n        data: PayPalButtonInitCallbackPayload,\n        actions: PayPalButtonInitCallbackActions,\n    ): Promise<void>;\n    onClick?(\n        data: PayPalButtonClickCallbackPayload,\n        actions: PayPalButtonClickCallbackActions,\n    ): Promise<void> | void;\n    onError?(error: Error): void;\n    onCancel?(): void;\n}\n\nexport interface PayPalButtonClickCallbackPayload {\n    fundingSource: string;\n}\n\nexport interface PayPalButtonClickCallbackActions {\n    reject(): void;\n    resolve(): void;\n}\n\nexport interface PayPalButtonInitCallbackPayload {\n    correlationID: string;\n}\n\nexport interface PayPalButtonInitCallbackActions {\n    disable(): void;\n    enable(): void;\n}\n\nexport interface PayPalButtonApproveCallbackPayload {\n    orderID?: string;\n}\n\nexport interface PayPalButtonApproveCallbackActions {\n    order: {\n        get: () => Promise<PayPalOrderDetails>;\n    };\n}\n\nexport interface PayPalOrderDetails {\n    payer: {\n        name: {\n            given_name: string;\n            surname: string;\n        };\n        email_address: string;\n        address: PayPalOrderAddress;\n    };\n    purchase_units: Array<{\n        shipping: {\n            address: PayPalOrderAddress;\n        };\n    }>;\n}\n\nexport interface PayPalOrderAddress {\n    address_line_1: string;\n    admin_area_2: string;\n    admin_area_1?: string;\n    postal_code: string;\n    country_code: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\n/**\n *\n * BigCommerce Payments PaymentFields fields\n *\n */\nexport interface BigCommercePaymentsPaymentFields {\n    render(id: string): void;\n}\n\nexport interface BigCommercePaymentsPaymentFieldsOptions {\n    style?: BigCommercePaymentsFieldsStyleOptions;\n    fundingSource: string;\n    fields: {\n        name?: {\n            value?: string;\n        };\n        email?: {\n            value?: string;\n        };\n    };\n}\n\nexport interface BigCommercePaymentsFieldsStyleOptions {\n    variables?: {\n        fontFamily?: string;\n        fontSizeBase?: string;\n        fontSizeSm?: string;\n        fontSizeM?: string;\n        fontSizeLg?: string;\n        textColor?: string;\n        colorTextPlaceholder?: string;\n        colorBackground?: string;\n        colorInfo?: string;\n        colorDanger?: string;\n        borderRadius?: string;\n        borderColor?: string;\n        borderWidth?: string;\n        borderFocusColor?: string;\n        spacingUnit?: string;\n    };\n    rules?: {\n        [key: string]: any;\n    };\n}\n\n/**\n *\n * PayLater Messages related types\n * doc: https://developer.paypal.com/docs/checkout/pay-later/us/integrate/reference\n */\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * PayPal Fastlane related types\n *\n */\nexport interface PayPalFastlane {\n    identity: PayPalFastlaneIdentity;\n    events: PayPalFastlaneEvents;\n    profile: PayPalFastlaneProfile;\n    FastlaneCardComponent(\n        options: PayPalFastlaneCardComponentOptions,\n    ): Promise<PayPalFastlaneCardComponentMethods>;\n}\n\nexport interface PayPalFastlaneOptions {\n    styles?: PayPalFastlaneStylesOption;\n}\n\nexport interface PayPalFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerContextId: string,\n    ): Promise<PayPalFastlaneAuthenticationResult>;\n}\n\nexport interface PayPalFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface PayPalFastlaneAuthenticationResult {\n    authenticationState?: PayPalFastlaneAuthenticationState;\n    profileData?: PayPalFastlaneProfileData;\n}\n\nexport enum PayPalFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'canceled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface PayPalFastlaneProfileData {\n    name: PayPalFastlaneProfileName;\n    shippingAddress: PayPalFastlaneShippingAddress;\n    card: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface PayPalFastlaneProfilePhone {\n    countryCode: string;\n    nationalNumber: string;\n}\n\nexport interface PayPalFastlaneShippingAddress {\n    name: PayPalFastlaneProfileName;\n    phoneNumber: PayPalFastlaneProfilePhone;\n    address: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneProfileCard {\n    id: string; // nonce / token\n    paymentSource: PayPalFastlanePaymentSource;\n}\n\nexport interface PayPalFastlanePaymentSource {\n    card: PayPalFastlaneCardSource;\n}\n\nexport interface PayPalFastlaneCardSource {\n    brand: string;\n    expiry: string; // \"YYYY-MM\"\n    lastDigits: string; // \"1111\"\n    name: string;\n    billingAddress: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneAddress {\n    company?: string;\n    addressLine1: string;\n    addressLine2?: string;\n    adminArea1: string; // State\n    adminArea2: string; // City\n    postalCode: string;\n    countryCode?: string;\n}\n\nexport interface PayPalFastlaneProfileToBcCustomerDataMappingResult {\n    authenticationState: PayPalFastlaneAuthenticationState;\n    addresses: CustomerAddress[];\n    billingAddress?: CustomerAddress;\n    shippingAddress?: CustomerAddress;\n    instruments: CardInstrument[];\n}\n\nexport interface PayPalFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport interface PayPalFastlaneProfile {\n    showCardSelector(): Promise<PayPalFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<PayPalFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface PayPalFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: PayPalFastlaneShippingAddress;\n}\n\nexport interface PayPalFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: PayPalFastlaneProfileCard;\n}\n\nexport interface PayPalFastlaneCardComponentMethods {\n    getPaymentToken(\n        options: PayPalFastlaneGetPaymentTokenOptions,\n    ): Promise<PayPalFastlaneProfileCard>;\n    render(element: string): void;\n}\n\nexport interface PayPalFastlaneGetPaymentTokenOptions {\n    name?: PayPalFastlaneProfileName;\n    billingAddress?: PayPalFastlaneAddress;\n}\n\nexport interface PayPalFastlaneCardComponentOptions {\n    fields?: PayPalFastlaneCardComponentFields;\n}\n\nexport interface PayPalFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface PayPalFastlaneEvents {\n    apmSelected: (options: PayPalFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: PayPalFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: PayPalFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface PayPalFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface PayPalFastlaneApmSelectedEventOptions extends PayPalFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface PayPalFastlaneEmailEnteredEventOptions extends PayPalFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface PayPalFastlaneOrderPlacedEventOptions extends PayPalFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface PayPalFastlanePaymentFormattedPayload {\n    paypal_connect_token?: {\n        order_id?: string;\n        token: string;\n    };\n    paypal_fastlane_token?: {\n        order_id?: string;\n        token: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    FundingType,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalHostWindow,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './bigcommerce-payments-types';\n\nexport default class PayPalSdkHelper {\n    private window: PayPalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane', 'three-domain-secure'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = this.filterFundingOptions(enabledAlternativePaymentMethods);\n        const disableAPMsFunding = this.filterFundingOptions(\n            availableAlternativePaymentMethods.filter(\n                (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n            ),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private filterFundingOptions(fundingOptions: FundingType[] | undefined): FundingType[] {\n        const fundingTypesToBeFiltered = ['klarna'];\n\n        if (!fundingOptions) {\n            return [];\n        }\n\n        return fundingOptions.filter(\n            (fundingOption: FundingType) => !fundingTypesToBeFiltered.includes(fundingOption),\n        );\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport PayPalSdkHelper from './paypal-sdk-helper';\n\nexport default function createBigCommercePaymentsSdk(): PayPalSdkHelper {\n    return new PayPalSdkHelper(createScriptLoader());\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    Address,\n    CardInstrument,\n    CustomerAddress,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nimport {\n    PayPalFastlane,\n    PayPalFastlaneAddress,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneLookupCustomerByEmailResult,\n    PayPalFastlaneProfileCard,\n    PayPalFastlaneProfileName,\n    PayPalFastlaneProfilePhone,\n    PayPalFastlaneProfileToBcCustomerDataMappingResult,\n    PayPalFastlaneSdk,\n    PayPalFastlaneStylesOption,\n    PayPalHostWindow,\n} from './bigcommerce-payments-types';\n\nexport default class BigCommercePaymentsFastlaneUtils {\n    private window: PayPalHostWindow;\n\n    constructor() {\n        this.window = window;\n    }\n\n    async initializePayPalFastlane(\n        paypalFastlaneSdk: PayPalFastlaneSdk,\n        isTestModeEnabled: boolean,\n        styles?: PayPalFastlaneStylesOption,\n    ): Promise<PayPalFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n            window.localStorage.setItem('axoEnv', 'sandbox'); // TODO: remove if this key does not use on PayPal side\n        }\n\n        if (!this.window.paypalFastlane) {\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.window.paypalFastlane = await paypalFastlaneSdk.Fastlane({\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    getPayPalFastlaneOrThrow(): PayPalFastlane {\n        if (!this.window.paypalFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalFastlane;\n    }\n\n    /**\n     *\n     * Detects the customer to PayPal Fastlane relation and\n     * returns customerContextId to use it for authentication\n     *\n     */\n    async lookupCustomerOrThrow(email: string): Promise<PayPalFastlaneLookupCustomerByEmailResult> {\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.lookupCustomerByEmail(email);\n    }\n\n    /**\n     *\n     * Triggers authentication flow (shows OTP popup) if the customer recognised as PayPal Fastlane user\n     * and returns PayPal Fastlane Profile data to use it in BC checkout\n     *\n     */\n    async triggerAuthenticationFlowOrThrow(\n        customerContextId?: string,\n    ): Promise<PayPalFastlaneAuthenticationResult> {\n        if (!customerContextId) {\n            return {};\n        }\n\n        const paypalFastlane = this.getPayPalFastlaneOrThrow();\n\n        return paypalFastlane.identity.triggerAuthenticationFlow(customerContextId);\n    }\n\n    /**\n     *\n     * 'updateStorageSessionId' method is used to:\n     * - set session id after user was authenticated (or unrecognised) to trigger authentication after page refresh\n     *\n     * Flow info:\n     * If user unrecognised then the lookup method will be working but the OTP will not be shown\n     * If user recognised and not canceled then the lookup method will be working and the OTP will be shown only if needed\n     * If user cancels the OPT then OTP will not be triggered after page refresh\n     *\n     */\n    updateStorageSessionId(sessionId: string): void {\n        const expires = new Date();\n\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        const cookiesOption = {\n            expires,\n            secure: true,\n        };\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, cookiesOption);\n    }\n\n    removeStorageSessionId(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    getStorageSessionId(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    /**\n     *\n     * 'mapPayPalFastlaneProfileToBcCustomerData' method is responsible for:\n     * - mapping PayPal Fastlane Profile data to BC data shape\n     * - returning mapped data to use for updating PaymentProviderCustomer state and\n     * update shipping and billing addresses\n     *\n     */\n    mapPayPalFastlaneProfileToBcCustomerData(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): PayPalFastlaneProfileToBcCustomerDataMappingResult {\n        const { authenticationState, profileData } = authenticationResult;\n\n        const paypalBillingAddress = profileData?.card?.paymentSource?.card?.billingAddress;\n        const paypalShippingAddress = profileData?.shippingAddress;\n        const paypalProfileName = profileData?.name;\n        const paypalInstrument = profileData?.card;\n\n        const shippingAddress = paypalShippingAddress\n            ? this.mapPayPalToBcAddress(\n                  paypalShippingAddress.address,\n                  paypalShippingAddress.name,\n                  paypalShippingAddress.phoneNumber,\n              )\n            : undefined;\n        const billingAddress =\n            paypalBillingAddress && paypalProfileName\n                ? this.mapPayPalToBcAddress(\n                      paypalBillingAddress,\n                      paypalProfileName,\n                      paypalShippingAddress?.phoneNumber,\n                  )\n                : undefined;\n        const instruments = paypalInstrument\n            ? this.mapPayPalToBcInstrument(methodId, paypalInstrument)\n            : [];\n\n        const addresses = this.filterAddresses([shippingAddress, billingAddress]);\n\n        return {\n            authenticationState:\n                authenticationState || PayPalFastlaneAuthenticationState.UNRECOGNIZED,\n            addresses,\n            billingAddress,\n            shippingAddress,\n            instruments,\n        };\n    }\n\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instrument: PayPalFastlaneProfileCard,\n    ): CardInstrument[] {\n        const { id, paymentSource } = instrument;\n        const { brand, expiry, lastDigits } = paymentSource.card;\n\n        const [expiryYear, expiryMonth] = expiry.split('-');\n\n        return [\n            {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n                type: 'card',\n            },\n        ];\n    }\n\n    mapBcToPayPalAddress(address?: Address): PayPalFastlaneAddress {\n        return {\n            company: address?.company || '',\n            addressLine1: address?.address1 || '',\n            addressLine2: address?.address2 || '',\n            adminArea1: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            adminArea2: address?.city || '',\n            postalCode: address?.postalCode || '',\n            countryCode: address?.countryCode || '',\n        };\n    }\n\n    mapPayPalToBcAddress(\n        address: PayPalFastlaneAddress,\n        profileName: PayPalFastlaneProfileName,\n        phone?: PayPalFastlaneProfilePhone,\n        customFields?: CustomerAddress['customFields'],\n    ): CustomerAddress {\n        const [firstName, lastName] = profileName.fullName.split(' ');\n\n        const phoneData = {\n            nationalNumber: phone?.nationalNumber || '',\n            countryCode: phone?.countryCode || '',\n        };\n\n        return {\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: profileName.firstName || firstName || '',\n            lastName: profileName.lastName || lastName || '',\n            company: address.company || '',\n            address1: address.addressLine1,\n            address2: address.addressLine2 || '',\n            city: address.adminArea2,\n            stateOrProvince: address.adminArea1,\n            stateOrProvinceCode: address.adminArea1,\n            country: address.countryCode || '', // TODO: update country with valid naming\n            countryCode: address.countryCode || '',\n            postalCode: address.postalCode,\n            phone: phoneData.countryCode + phoneData.nationalNumber,\n            customFields: customFields || [],\n        };\n    }\n\n    /**\n     *\n     * This method is responsible for filtering PayPal Fastlane addresses if they are the same\n     * and returns an array of addresses to use them for shipping and/or billing address selections\n     * so the customer will be able to use addresses from PayPal Fastlane in checkout flow\n     *\n     */\n    filterAddresses(addresses: Array<CustomerAddress | undefined>): CustomerAddress[] {\n        return addresses.reduce(\n            (customerAddresses: CustomerAddress[], currentAddress: CustomerAddress | undefined) => {\n                if (!currentAddress) {\n                    return customerAddresses;\n                }\n\n                const sameAddressInTheArray = customerAddresses.some((customerAddress) =>\n                    this.isEqualAddresses(customerAddress, currentAddress),\n                );\n\n                return sameAddressInTheArray\n                    ? customerAddresses\n                    : [...customerAddresses, currentAddress];\n            },\n            [],\n        );\n    }\n\n    private isEqualAddresses(\n        firstAddress: CustomerAddress,\n        secondAddress: CustomerAddress,\n    ): boolean {\n        return isEqual(this.normalizeAddress(firstAddress), this.normalizeAddress(secondAddress));\n    }\n\n    private normalizeAddress(address: CustomerAddress) {\n        return omit(address, ['id', 'phone']);\n    }\n}\n","import BigCommercePaymentsFastlaneUtils from './bigcommerce-payments-fastlane-utils';\n\nexport default function createBigCommercePaymentsFastlaneUtils(): BigCommercePaymentsFastlaneUtils {\n    return new BigCommercePaymentsFastlaneUtils();\n}\n","import { omitBy } from 'lodash';\n\nimport { FastlaneStylesSettings, PayPalFastlaneStylesOption } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n) {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: PayPalFastlaneStylesOption,\n): PayPalFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: PayPalFastlaneStylesOption) {\n    const fastlaneStyles: PayPalFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n// TODO: update PayPalConnectCustomer with PayPalFastlaneCustomer\nexport default function isPayPalFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    getFastlaneStyles,\n    isBigcommerceFastlaneRequestError,\n    isPayPalFastlaneCustomer,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneCardComponentMethods,\n    PayPalFastlaneCardComponentOptions,\n    PayPalFastlanePaymentFormattedPayload,\n    PayPalFastlaneSdk,\n    PayPalSdkHelper,\n    TDSecureAuthenticationState,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CardInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport BigCommercePaymentsRequestSender from '../bigcommerce-payments-request-sender';\nimport { LiabilityShiftEnum } from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsFastlanePaymentInitializeOptions, {\n    WithBigCommercePaymentsFastlanePaymentInitializeOptions,\n} from './bigcommerce-payments-fastlane-payment-initialize-options';\n\nexport default class BigCommercePaymentsFastlanePaymentStrategy implements PaymentStrategy {\n    private paypalComponentMethods?: PayPalFastlaneCardComponentMethods;\n    private threeDSVerificationMethod?: string;\n    private paypalFastlaneSdk?: PayPalFastlaneSdk;\n    private bigcommerce_payments_fastlane?: BigCommercePaymentsFastlanePaymentInitializeOptions;\n    private methodId?: string;\n    private orderId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsRequestSender: BigCommercePaymentsRequestSender,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     * */\n    async initialize(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_fastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.methodId = methodId;\n\n        if (!bigcommerce_payments_fastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane\" argument is not provided.',\n            );\n        }\n\n        this.bigcommerce_payments_fastlane = bigcommerce_payments_fastlane;\n\n        if (\n            !bigcommerce_payments_fastlane.onInit ||\n            typeof bigcommerce_payments_fastlane.onInit !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (\n            !bigcommerce_payments_fastlane.onChange ||\n            typeof bigcommerce_payments_fastlane.onChange !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_fastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isDeveloperModeApplicable, isFastlaneStylingEnabled } =\n            paymentMethod.initializationData || {};\n\n        this.threeDSVerificationMethod =\n            paymentMethod.initializationData?.threeDSVerificationMethod;\n\n        this.paypalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n            paymentMethod,\n            cart.currency.code,\n            cart.id,\n        );\n\n        const paypalFastlaneStyling = isFastlaneStylingEnabled\n            ? paymentMethod?.initializationData?.fastlaneStyles\n            : {};\n\n        const fastlaneStyles = getFastlaneStyles(\n            paypalFastlaneStyling,\n            bigcommerce_payments_fastlane?.styles,\n        );\n\n        await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n            this.paypalFastlaneSdk,\n            !!isDeveloperModeApplicable,\n            fastlaneStyles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.runPayPalAuthenticationFlowOrThrow(methodId);\n        }\n\n        await this.initializePayPalPaymentComponent();\n\n        bigcommerce_payments_fastlane.onInit((container: string) =>\n            this.renderPayPalPaymentComponent(container),\n        );\n        bigcommerce_payments_fastlane.onChange(() =>\n            this.handlePayPalStoredInstrumentChange(methodId),\n        );\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { paymentData, methodId } = payment;\n\n        const isVaultedFlow = paymentData && isVaultedInstrument(paymentData);\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n\n            const paymentPayload = isVaultedFlow\n                ? await this.prepareVaultedInstrumentPaymentPayload(methodId, paymentData)\n                : await this.preparePaymentPayload(methodId, paymentData);\n\n            await this.paymentIntegrationService.submitPayment<PayPalFastlanePaymentFormattedPayload>(\n                paymentPayload,\n            );\n\n            this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n        } catch (error) {\n            if (\n                isBigcommerceFastlaneRequestError(error) &&\n                error.response.name === 'INVALID_REQUEST'\n            ) {\n                const invalidRequestError = {\n                    translationKey: 'payment.errors.invalid_request_error',\n                };\n\n                this.handleError(invalidRequestError);\n\n                return Promise.reject();\n            }\n\n            if (error instanceof Error && error.name !== 'FastlaneError') {\n                throw error;\n            }\n\n            return Promise.reject();\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.bigCommercePaymentsFastlaneUtils.getStorageSessionId();\n\n        if (\n            !customer.isGuest ||\n            paypalFastlaneCustomer?.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return !paypalFastlaneCustomer?.authenticationState && paypalFastlaneSessionId === cart.id;\n    }\n\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const customerEmail = customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } =\n                await this.bigCommercePaymentsFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n            const authenticationResult =\n                await this.bigCommercePaymentsFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                    customerContextId,\n                );\n\n            const { authenticationState, addresses, instruments } =\n                this.bigCommercePaymentsFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                    methodId,\n                    authenticationResult,\n                );\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            const isAuthenticationFlowCanceled =\n                authenticationResult.authenticationState ===\n                PayPalFastlaneAuthenticationState.CANCELED;\n\n            if (isAuthenticationFlowCanceled) {\n                this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n            } else {\n                this.bigCommercePaymentsFastlaneUtils.updateStorageSessionId(cart.id);\n            }\n        } catch (error) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n    }\n\n    /**\n     *\n     * BigCommercePayments Fastlane Card Component rendering method\n     *\n     */\n    private async initializePayPalPaymentComponent(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const phone = billingAddress.phone;\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const paypalFastlane = this.bigCommercePaymentsFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const cardComponentOptions: PayPalFastlaneCardComponentOptions = {\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        this.paypalComponentMethods = await paypalFastlane.FastlaneCardComponent(\n            cardComponentOptions,\n        );\n    }\n\n    private renderPayPalPaymentComponent(container?: string): void {\n        const paypalComponentMethods = this.getPayPalComponentMethodsOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to render card component because \"container\" argument is not provided.',\n            );\n        }\n\n        paypalComponentMethods.render(container);\n    }\n\n    private getPayPalComponentMethodsOrThrow(): PayPalFastlaneCardComponentMethods {\n        if (!this.paypalComponentMethods) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalComponentMethods;\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async prepareVaultedInstrumentPaymentPayload(\n        methodId: string,\n        paymentData: VaultedInstrument,\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const { instrumentId } = paymentData;\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const is3DSEnabled =\n            this.isBigcommercePaymentsFastlaneThreeDSAvailable() &&\n            paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(instrumentId);\n        }\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(instrumentId) : instrumentId;\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n    ): Promise<Payment<PayPalFastlanePaymentFormattedPayload>> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`.trim();\n\n        const { getPaymentToken } = this.getPayPalComponentMethodsOrThrow();\n\n        const { id } = await getPaymentToken({\n            name: { fullName },\n            billingAddress:\n                this.bigCommercePaymentsFastlaneUtils.mapBcToPayPalAddress(billingAddress),\n        });\n\n        const is3DSEnabled =\n            this.isBigcommercePaymentsFastlaneThreeDSAvailable() &&\n            paymentMethod.config.is3dsEnabled;\n\n        if (!is3DSEnabled) {\n            await this.createOrder(id);\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const fastlaneToken = is3DSEnabled ? await this.get3DSNonce(id) : id;\n\n        return {\n            methodId,\n            paymentData: {\n                ...paymentData,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                formattedPayload: {\n                    paypal_fastlane_token: {\n                        order_id: this.orderId,\n                        token: fastlaneToken,\n                    },\n                },\n            },\n        };\n    }\n\n    private async createOrder(id: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n\n        if (this.methodId) {\n            const { orderId } = await this.bigCommercePaymentsRequestSender.createOrder(\n                this.methodId,\n                {\n                    cartId,\n                    fastlaneToken: id,\n                },\n            );\n\n            this.orderId = orderId;\n        }\n    }\n\n    /**\n     *\n     * 3DSecure methods\n     *\n     * */\n    private async get3DSNonce(paypalNonce: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const order = state.getOrderOrThrow();\n        const checkoutUrl = state.getStoreConfigOrThrow().links.checkoutLink;\n\n        const threeDomainSecureComponent = this.paypalFastlaneSdk?.ThreeDomainSecureClient;\n\n        if (!threeDomainSecureComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const threeDomainSecureParameters = {\n            amount: order.orderAmount.toFixed(2),\n            currency: cart.currency.code,\n            nonce: paypalNonce,\n            threeDSRequested: this.threeDSVerificationMethod === 'SCA_ALWAYS',\n            transactionContext: {\n                experience_context: {\n                    locale: 'en-US',\n                    return_url: checkoutUrl,\n                    cancel_url: checkoutUrl,\n                },\n            },\n        };\n\n        const isThreeDomainSecureEligible = await threeDomainSecureComponent.isEligible(\n            threeDomainSecureParameters,\n        );\n\n        if (isThreeDomainSecureEligible) {\n            const { liabilityShift, authenticationState, nonce } =\n                await threeDomainSecureComponent.show();\n\n            if (\n                liabilityShift === LiabilityShiftEnum.No ||\n                liabilityShift === LiabilityShiftEnum.Unknown\n            ) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            await this.createOrder(paypalNonce);\n\n            if (authenticationState === TDSecureAuthenticationState.Succeeded) {\n                return nonce;\n            }\n\n            // Cancelled or errored, merchant can choose to send the customer back to 3D Secure or submit a payment and or vault the payment token.\n            if (authenticationState === TDSecureAuthenticationState.Errored) {\n                throw new PaymentMethodInvalidError();\n            }\n\n            if (authenticationState === TDSecureAuthenticationState.Cancelled) {\n                console.error('3DS check was canceled');\n                throw new PaymentMethodInvalidError();\n            }\n        }\n\n        return paypalNonce;\n    }\n\n    /**\n     *\n     * BigCommercePayments Fastlane instrument change\n     *\n     */\n    private async handlePayPalStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.bigCommercePaymentsFastlaneUtils.getPayPalFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstrument =\n                this.bigCommercePaymentsFastlaneUtils.mapPayPalToBcInstrument(\n                    methodId,\n                    selectedCard,\n                )[0];\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                ...paypalFastlaneCustomer,\n                instruments: [selectedInstrument],\n            });\n\n            return selectedInstrument;\n        }\n\n        return undefined;\n    }\n\n    /**\n     *\n     * Bigcommerce Payments Fastlane experiments handling\n     *\n     */\n    private isBigcommercePaymentsFastlaneThreeDSAvailable(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        return isExperimentEnabled(features, 'PROJECT-7080.bcp_fastlane_three_ds');\n    }\n\n    private handleError(error: unknown): void {\n        if (\n            this.bigcommerce_payments_fastlane?.onError &&\n            typeof this.bigcommerce_payments_fastlane.onError === 'function'\n        ) {\n            this.bigcommerce_payments_fastlane.onError(error);\n        }\n    }\n}\n","export interface BigcommerceFastlaneRequestError {\n    name: string;\n    message: string;\n    response: {\n        name: string;\n    };\n}\n\nexport default function isBigcommerceFastlaneRequestError(\n    error: unknown,\n): error is BigcommerceFastlaneRequestError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'message' in error &&\n        'response' in error &&\n        'name' in (error as BigcommerceFastlaneRequestError).response\n    );\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsRequestSender from '../bigcommerce-payments-request-sender';\n\nimport BigCommercePaymentsFastlanePaymentStrategy from './bigcommerce-payments-fastlane-payment-strategy';\n\nconst createBigCommercePaymentsFastlanePaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    return new BigCommercePaymentsFastlanePaymentStrategy(\n        paymentIntegrationService,\n        new BigCommercePaymentsRequestSender(createRequestSender({ host: getHost() })),\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n};\n\nexport default toResolvableModule(createBigCommercePaymentsFastlanePaymentStrategy, [\n    { id: 'bigcommerce_payments_fastlane' }, // BigCommercePayments Fastlane relates to 'bigcommerce_payments_fastlane' method id\n]);\n","import { MessagesStyleOptions, PayPalBNPLConfigurationItem } from '../bigcommerce-payments-types';\n\nfunction getPaypalMessagesStylesFromBNPLConfig({\n    styles,\n}: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n    const messagesStyles: MessagesStyleOptions = {};\n\n    if (styles.color) {\n        messagesStyles.color = styles.color;\n    }\n\n    if (styles.layout) {\n        messagesStyles.layout = styles.layout;\n    }\n\n    if (styles['logo-type'] || styles['logo-position']) {\n        messagesStyles.logo = {};\n\n        if (styles['logo-type']) {\n            messagesStyles.logo.type = styles['logo-type'];\n        }\n\n        if (styles['logo-position']) {\n            messagesStyles.logo.position = styles['logo-position'];\n        }\n    }\n\n    if (styles.ratio) {\n        messagesStyles.ratio = styles.ratio;\n    }\n\n    if (styles['text-color'] || styles['text-size']) {\n        messagesStyles.text = {};\n\n        if (styles['text-color']) {\n            messagesStyles.text.color = styles['text-color'];\n        }\n\n        if (styles['text-size']) {\n            messagesStyles.text.size = +styles['text-size'];\n        }\n    }\n\n    return messagesStyles;\n}\n\nexport default getPaypalMessagesStylesFromBNPLConfig;\n","import {\n    BigCommercePaymentsInitializationData,\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalMessagesSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterPaymentInitializeOptions, {\n    WithBigCommercePaymentsPayLaterPaymentInitializeOptions,\n} from './bigcommerce-payments-paylater-payment-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private bigCommercePaymentsButtons?: BigCommercePaymentsButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private paypalSdkHelper: PayPalSdkHelper,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions &\n            WithBigCommercePaymentsPayLaterPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_paylater } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paypalBNPLConfiguration = [], orderId } = paymentMethod.initializationData || {};\n        const { bannerContainerId, container } = bigcommerce_payments_paylater;\n\n        if (bannerContainerId !== undefined) {\n            if (!document.getElementById(bannerContainerId)) {\n                // eslint-disable-next-line no-console\n                console.error('Unable to create banner without valid banner container ID.');\n\n                return;\n            }\n\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === 'checkout');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            const paypalMessages = await this.paypalSdkHelper.getPayPalMessages(\n                paymentMethod,\n                state.getCartOrThrow().currency.code,\n            );\n\n            return this.renderMessages(paypalMessages, bannerContainerId, bannerConfiguration);\n        }\n\n        // Info:\n        // The BigCommercePayments button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render BigCommercePayments button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = container?.split('#')[1];\n\n        this.renderButton(methodId, bigcommerce_payments_paylater);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            payment.methodId,\n            this.orderId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.bigCommercePaymentsButtons?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_paylater: BigCommercePaymentsPayLaterPaymentInitializeOptions,\n    ): void {\n        if (!bigcommerce_payments_paylater?.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        const bigCommerceSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } =\n            bigcommerce_payments_paylater;\n\n        const fundingSources = [bigCommerceSdk.FUNDING.PAYLATER, bigCommerceSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (hasRenderedSmartButton) {\n                return;\n            }\n\n            const buttonOptions: BigCommercePaymentsButtonsOptions = {\n                fundingSource,\n                style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                    checkoutPaymentButtonStyles,\n                ),\n                createOrder: () =>\n                    this.bigCommercePaymentsIntegrationService.createOrder(\n                        'bigcommerce_payments_paylater',\n                    ),\n                onClick: (_, actions) => this.handleClick(actions, onValidate),\n                onApprove: (data) => this.handleApprove(data, submitForm),\n                onCancel: () => this.toggleLoadingIndicator(false),\n                onError: (error) => this.handleError(error, onError),\n            };\n\n            this.bigCommercePaymentsButtons = bigCommerceSdk.Buttons(buttonOptions);\n\n            if (\n                !this.bigCommercePaymentsButtons.isEligible() &&\n                fundingSource === bigCommerceSdk.FUNDING.PAYLATER\n            ) {\n                return;\n            }\n\n            if (\n                !this.bigCommercePaymentsButtons.isEligible() &&\n                fundingSource === bigCommerceSdk.FUNDING.CREDIT\n            ) {\n                throw new NotImplementedError(\n                    `BigCommercePayments ${fundingSource} is not available for your region. Please use BigCommercePayments Checkout instead.`,\n                );\n            }\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            this.bigCommercePaymentsButtons.render(container);\n            hasRenderedSmartButton = true;\n        });\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsPayLaterPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        if (onValidate && typeof onValidate === 'function') {\n            await onValidate(onValidationPassed, reject);\n        }\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsPayLaterPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        if (submitForm && typeof submitForm === 'function') {\n            submitForm();\n        }\n    }\n\n    private handleError(\n        error: Error,\n        onError: BigCommercePaymentsPayLaterPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Render Pay Later Messages\n     *\n     * */\n    private renderMessages(\n        paypalMessages: PayPalMessagesSdk,\n        bannerContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'payment',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        paypalMessages.Messages(paypalMessagesOptions).render(`#${bannerContainerId}`);\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterPaymentStrategy from './bigcommerce-payments-paylater-payment-strategy';\n\nconst createBigCommercePaymentsPayLaterPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsPayLaterPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n        createBigCommercePaymentsSdk(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterPaymentStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    BigCommercePaymentsInitializationData,\n    BirthDate,\n    PayPalOrderStatus,\n} from '../bigcommerce-payments-types';\n\nimport {\n    BigCommercePaymentsRatePayPaymentInitializeOptions,\n    WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n} from './bigcommerce-payments-ratepay-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BigCommercePaymentsRatePayPaymentStrategy implements PaymentStrategy {\n    private guid?: string;\n    private bigcommerce_payments_ratepay?: BigCommercePaymentsRatePayPaymentInitializeOptions;\n    private loadingIndicatorContainer?: string;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, bigcommerce_payments_ratepay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_ratepay) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_ratepay\" argument is not provided.`,\n            );\n        }\n\n        const { legalTextContainer, container, loadingContainerId } = bigcommerce_payments_ratepay;\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.container\" argument is not provided.`,\n            );\n        }\n\n        if (!legalTextContainer) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.legalTextContainer\" argument is not provided.`,\n            );\n        }\n\n        if (!loadingContainerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.loadingContainerId\" argument is not provided.`,\n            );\n        }\n\n        this.loadingIndicatorContainer = loadingContainerId;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { merchantId } = paymentMethod.initializationData || {};\n\n        if (!merchantId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because merchantId argument is not provided.`,\n            );\n        }\n\n        this.bigcommerce_payments_ratepay = bigcommerce_payments_ratepay;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.createFraudNetScript(merchantId, methodId, gatewayId);\n\n        this.loadFraudnetConfig();\n\n        this.renderLegalText(legalTextContainer, container);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        const { getFieldsValues } = this.bigcommerce_payments_ratepay || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!getFieldsValues || typeof getFieldsValues !== 'function') {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.getFieldsValues\" argument is not provided.`,\n            );\n        }\n\n        this.toggleLoadingIndicator(true);\n\n        try {\n            const orderId = await this.bigCommercePaymentsIntegrationService.createOrder(\n                'bigcommerce_payments_apmscheckout',\n                { metadataId: this.guid },\n            );\n\n            const { ratepayBirthDate, ratepayPhoneNumber, ratepayPhoneCountryCode } =\n                getFieldsValues();\n\n            const paymentData = {\n                formattedPayload: {\n                    vault_payment_instrument: null,\n                    set_as_default_stored_instrument: null,\n                    device_info: null,\n                    method_id: payment.methodId,\n                    rate_pay: {\n                        birth_date: this.normalizeDate(ratepayBirthDate),\n                        phone: {\n                            national_number: ratepayPhoneNumber,\n                            country_code: ratepayPhoneCountryCode.split('+')[1],\n                        },\n                    },\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n\n            return await new Promise((resolve, reject) => {\n                this.initializePollingMechanism(\n                    payment.methodId,\n                    resolve,\n                    reject,\n                    payment.gatewayId,\n                );\n            });\n        } catch (error: unknown) {\n            this.handleError(error);\n\n            return new Promise((_resolve, reject) => reject());\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        const { legalTextContainer } = this.bigcommerce_payments_ratepay || {};\n        const fraudNetScript = document.querySelectorAll('[data-id=\"fraudnetScript\"]')[0];\n        const fraudNetConfig = document.querySelectorAll('[data-id=\"fraudnetConfig\"]')[0];\n\n        this.deinitializePollingMechanism();\n\n        fraudNetScript.remove();\n        fraudNetConfig.remove();\n\n        if (legalTextContainer) {\n            const legalTextContainerElement = document.getElementById(legalTextContainer);\n\n            legalTextContainerElement?.remove();\n        }\n\n        return Promise.resolve();\n    }\n\n    private normalizeDate(date: BirthDate) {\n        const formattedDate = this.formatDate(date.getDate());\n        const formattedMonth = this.formatDate(date.getMonth() + 1);\n\n        return `${date.getFullYear()}-${formattedMonth}-${formattedDate}`;\n    }\n\n    private formatDate(date: number): string {\n        return `${date < 10 ? 0 : ''}${date}`;\n    }\n\n    private renderLegalText(legalTextContainerElementId: string, container: string) {\n        const legalTextContainerId = legalTextContainerElementId;\n        const buttonContainerId = container.split('#')[1];\n        const buttonContainer = document.getElementById(buttonContainerId);\n        const buttonContainerParent = buttonContainer?.parentNode;\n        const legalTextContainer = document.createElement('div');\n\n        legalTextContainer.style.marginBottom = '20px';\n        legalTextContainer.setAttribute('id', legalTextContainerId);\n        buttonContainerParent?.prepend(legalTextContainer);\n\n        const bigCommercePaymentsSdk =\n            this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const ratePayButton = bigCommercePaymentsSdk.Legal({\n            fundingSource: bigCommercePaymentsSdk.Legal.FUNDING.PAY_UPON_INVOICE,\n        });\n        const legalTextContainerElement = document.getElementById(legalTextContainerId);\n\n        if (legalTextContainerElement) {\n            ratePayButton.render(`#${legalTextContainerId}`);\n        } else {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"legalTextContainerElement\" argument is not found.`,\n            );\n        }\n    }\n\n    private handleError(error: unknown): void {\n        const { onError } = this.bigcommerce_payments_ratepay || {};\n\n        this.resetPollingMechanism();\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    private createFraudNetScript(merchantId: string, methodId: string, gatewayId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { testMode } = paymentMethod.config;\n        const scriptElement = document.createElement('script');\n\n        scriptElement.setAttribute('type', 'application/json');\n        scriptElement.setAttribute('fncls', 'fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99');\n        scriptElement.setAttribute('data-id', 'fraudnetScript');\n        this.guid = this.generateGUID();\n\n        const fraudNetConfig = {\n            f: this.guid,\n            s: `${merchantId}_checkout-page`,\n            sandbox: testMode,\n        };\n\n        scriptElement.innerHTML = JSON.stringify(fraudNetConfig);\n        document.body.appendChild(scriptElement);\n    }\n\n    private generateGUID() {\n        let guid = '';\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for (let i = 0; i < 32; i += 1) {\n            const randomIndex = Math.floor(Math.random() * characters.length);\n\n            guid += characters[randomIndex];\n        }\n\n        return guid;\n    }\n\n    private loadFraudnetConfig() {\n        const script = document.createElement('script');\n\n        script.setAttribute('data-id', 'fraudnetConfig');\n        script.src = 'https://c.paypal.com/da/r/fb.js';\n        document.body.appendChild(script);\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithBigCommercePaymentsRatePayPaymentInitializeOptions,\n    ): Promise<void> {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.bigCommercePaymentsIntegrationService.getOrderStatus(\n                'bigcommerce_payments_apms',\n                {\n                    params: {\n                        useMetadata: true,\n                    },\n                },\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.PollingStop;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                bigcommerce_payments_ratepay: this.bigcommerce_payments_ratepay,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            this.handleError(error);\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsRatePayPaymentStrategy from './bigcommerce-payments-ratepay-payment-strategy';\n\nconst createBigCommercePaymentsRatePayPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsRatePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsRatePayPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({\n            containerStyles: { ...LOADING_INDICATOR_STYLES, position: 'fixed' },\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsRatePayPaymentStrategy, [\n    { gateway: 'bigcommerce_payments_apms', id: 'ratepay' },\n]);\n","import { isNil, omitBy } from 'lodash';\n\nimport {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    isBigCommercePaymentsFastlaneCustomer,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    HostedCardFieldOptions,\n    HostedCardFieldOptionsMap,\n    HostedFieldBlurEventData,\n    HostedFieldEnterEventData,\n    HostedFieldFocusEventData,\n    HostedFieldStylesMap,\n    HostedFieldType,\n    HostedFieldValidateEventData,\n    HostedFormOptions,\n    HostedInputValidateErrorData,\n    HostedInputValidateErrorDataMap,\n    HostedInstrument,\n    HostedStoredCardFieldOptionsMap,\n    InvalidArgumentError,\n    isCreditCardFormFields,\n    isCreditCardVaultedFormFields,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    BigCommercePaymentsCardFields,\n    BigCommercePaymentsCardFieldsConfig,\n    BigCommercePaymentsCardFieldsOnApproveData,\n    BigCommercePaymentsCardFieldsState,\n    BigCommercePaymentsFields,\n    BigCommercePaymentsHostedFieldsRenderOptions,\n    LiabilityShiftEnum,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsCreditCardsPaymentInitializeOptions, {\n    WithBigCommercePaymentsCreditCardsPaymentInitializeOptions,\n} from './bigcommerce-payments-credit-cards-payment-initialize-options';\n\nexport default class BigCommercePaymentsCreditCardsPaymentStrategy implements PaymentStrategy {\n    private executionPaymentData?: OrderPaymentRequestBody['paymentData'];\n    private isCreditCardForm?: boolean;\n    private isCreditCardVaultedForm?: boolean;\n\n    private cardFields?: BigCommercePaymentsCardFields;\n    private cvvField?: BigCommercePaymentsFields;\n    private expiryField?: BigCommercePaymentsFields;\n    private numberField?: BigCommercePaymentsFields;\n    private nameField?: BigCommercePaymentsFields;\n\n    private hostedFormOptions?: HostedFormOptions;\n    private returnedOrderId?: string;\n    private returnedVaultedToken?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsCreditCardsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_creditcards } = options;\n        const bigCommercePaymentsInitializationOptions = bigcommerce_payments_creditcards;\n\n        const { form, onCreditCardFieldsRenderingError } =\n            bigCommercePaymentsInitializationOptions || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!form) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.bigcommerce_payments_creditcards.form\" argument is not provided.',\n            );\n        }\n\n        this.hostedFormOptions = form;\n\n        this.isCreditCardForm = isCreditCardFormFields(form.fields);\n        this.isCreditCardVaultedForm =\n            isCreditCardVaultedFormFields(form.fields) && !this.hasUndefinedValues();\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            undefined,\n            true,\n            true,\n        );\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.initializeFields(form, onCreditCardFieldsRenderingError);\n        }\n\n        if (this.shouldInitializePayPalFastlane(methodId)) {\n            await this.initializePayPalFastlaneOrThrow(methodId);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const { methodId, paymentData } = payment || {};\n\n        if (!payment || !methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        this.executionPaymentData = paymentData;\n\n        if (this.isCreditCardForm || this.isCreditCardVaultedForm) {\n            await this.validateHostedFormOrThrow();\n            await this.submitHostedForm();\n        } else {\n            // The condition gets triggered when customer pays with vaulted instrument and shipping address is trusted\n            const { orderId } =\n                await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                    'bigcommerce_payments_creditcardscheckout',\n                    this.getInstrumentParams(),\n                );\n\n            this.returnedOrderId = orderId;\n        }\n\n        const submitPaymentPayload = this.preparePaymentPayload(\n            methodId,\n            paymentData,\n            this.returnedOrderId,\n            this.returnedVaultedToken,\n        );\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.cvvField?.close();\n        await this.expiryField?.close();\n        await this.numberField?.close();\n        await this.nameField?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Submit Payment Payload preparing method\n     *\n     * `vaultedToken` is used when we pay with vaulted instrument (with trusted shipping address and untrusted)\n     * `setupToken` is used when we pay with vaulted instrument (untrusted shipping address)\n     * `orderId` is used in every case (basic card payment, trusted shipping address and untrusted)\n     */\n    private preparePaymentPayload(\n        methodId: string,\n        paymentData: OrderPaymentRequestBody['paymentData'],\n        orderId?: string,\n        nonce?: string,\n    ): Payment {\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const instrumentId =\n            paymentData && isVaultedInstrument(paymentData) ? paymentData.instrumentId : undefined;\n\n        const bigpay_token = omitBy(\n            {\n                verification_nonce: nonce,\n                token: instrumentId,\n            },\n            isNil,\n        );\n\n        return {\n            methodId,\n            paymentData: {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n                instrumentId,\n                formattedPayload: {\n                    ...(nonce || instrumentId ? { bigpay_token } : {}),\n                    ...(orderId ? { card_with_order: { order_id: orderId } } : {}),\n                },\n            },\n        };\n    }\n\n    /**\n     *\n     * Card fields initialize\n     *\n     */\n    private async initializeFields(\n        formOptions: HostedFormOptions,\n        onCreditCardFieldsRenderingError?: BigCommercePaymentsCreditCardsPaymentInitializeOptions['onCreditCardFieldsRenderingError'],\n    ): Promise<void> {\n        const { fields, styles } = formOptions;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const executeCallback = this.getExecuteCallback(fields);\n\n        const cardFieldsConfig: BigCommercePaymentsCardFieldsConfig = {\n            style: this.getInputStyles(styles),\n            onApprove: ({\n                orderID,\n                vaultSetupToken,\n                liabilityShift,\n            }: BigCommercePaymentsCardFieldsOnApproveData) => {\n                if (\n                    liabilityShift === LiabilityShiftEnum.No ||\n                    liabilityShift === LiabilityShiftEnum.Unknown\n                ) {\n                    throw new Error();\n                }\n\n                return this.handleApprove({ orderID, vaultSetupToken });\n            },\n            onError: () => {\n                throw new PaymentMethodFailedError();\n            },\n            inputEvents: {\n                onChange: (event) => this.onChangeHandler(formOptions, event),\n                onFocus: (event) => this.onFocusHandler(formOptions, event),\n                onBlur: (event) => this.onBlurHandler(formOptions, event),\n                onInputSubmitRequest: (event) => this.onInputSubmitRequest(formOptions, event),\n            },\n            ...executeCallback,\n        };\n\n        this.cardFields = await paypalSdk.CardFields(cardFieldsConfig);\n\n        if (!this.cardFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            this.stylizeInputContainers(fields);\n\n            if (isCreditCardFormFields(fields)) {\n                await this.renderFields(fields);\n            }\n\n            if (isCreditCardVaultedFormFields(fields)) {\n                await this.renderVaultedFields(fields);\n            }\n        } catch (error: unknown) {\n            if (typeof onCreditCardFieldsRenderingError === 'function') {\n                onCreditCardFieldsRenderingError(error);\n            }\n        }\n    }\n\n    /**\n     *\n     * Get execute callback method\n     * Depends on shipping address is trusted or not we should pass to PP\n     * `createVaultSetupToken` callback if address is untrusted or\n     * `createOrder` if address is trusted\n     *\n     */\n    private getExecuteCallback(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ) {\n        const isVaultedForm = isCreditCardVaultedFormFields(fields);\n\n        return isVaultedForm ? this.createVaultSetupTokenCallback() : this.createOrderCallback();\n    }\n\n    private createVaultSetupTokenCallback() {\n        return {\n            createVaultSetupToken: async () => {\n                const { setupToken } =\n                    (await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                        'bigcommerce_payments_creditcardscheckout',\n                        {\n                            ...this.getInstrumentParams(),\n                            setupToken: true,\n                        },\n                    )) || {};\n\n                return setupToken;\n            },\n        };\n    }\n\n    private createOrderCallback() {\n        return {\n            createOrder: async () => {\n                const { orderId } =\n                    (await this.bigCommercePaymentsIntegrationService.createOrderCardFields(\n                        'bigcommerce_payments_creditcardscheckout',\n                        this.getInstrumentParams(),\n                    )) || {};\n\n                return orderId;\n            },\n        };\n    }\n\n    /**\n     *\n     * onApprove method\n     * When submitting a form with a `submitHostedForm` method if there is no error\n     * then onApprove callback is triggered and depends on the flow\n     * we will receive an `orderID` if it's basic paying and `vaultSetupToken` if we are paying\n     * with vaulted instrument and shipping address is untrusted\n     *\n     */\n    private handleApprove({\n        orderID,\n        vaultSetupToken,\n    }: BigCommercePaymentsCardFieldsOnApproveData) {\n        if (orderID) {\n            this.returnedOrderId = orderID;\n        }\n\n        if (vaultSetupToken) {\n            this.returnedVaultedToken = vaultSetupToken;\n        }\n    }\n\n    /**\n     *\n     * Rendering Card Fields methods\n     *\n     */\n    private async renderFields(fieldsOptions: HostedCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCode?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCode.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiry?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiry.containerId}`);\n        }\n\n        if (fieldsOptions.cardName?.containerId) {\n            this.nameField = cardFields.NameField({\n                placeholder: '',\n            });\n            await this.nameField.render(`#${fieldsOptions.cardName.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumber?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumber.containerId}`);\n        }\n    }\n\n    private async renderVaultedFields(fieldsOptions: HostedStoredCardFieldOptionsMap) {\n        const cardFields = this.getCardFieldsOrThrow();\n\n        if (fieldsOptions.cardCodeVerification?.containerId) {\n            this.cvvField = cardFields.CVVField({\n                placeholder: '',\n            });\n            await this.cvvField.render(`#${fieldsOptions.cardCodeVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardExpiryVerification?.containerId) {\n            this.expiryField = cardFields.ExpiryField();\n            await this.expiryField.render(`#${fieldsOptions.cardExpiryVerification.containerId}`);\n        }\n\n        if (fieldsOptions.cardNumberVerification?.containerId) {\n            this.numberField = cardFields.NumberField({\n                placeholder: '',\n            });\n            await this.numberField.render(`#${fieldsOptions.cardNumberVerification.containerId}`);\n        }\n    }\n\n    /**\n     *\n     * Instrument params method\n     *\n     */\n    private getInstrumentParams(): HostedInstrument | VaultedInstrument {\n        if (!this.executionPaymentData) {\n            return {};\n        }\n\n        if (isHostedInstrumentLike(this.executionPaymentData)) {\n            const { shouldSaveInstrument, shouldSetAsDefaultInstrument } =\n                this.executionPaymentData;\n\n            return {\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            };\n        }\n\n        if (isVaultedInstrument(this.executionPaymentData)) {\n            const { instrumentId } = this.executionPaymentData;\n\n            return {\n                instrumentId,\n            };\n        }\n\n        return {};\n    }\n\n    private getFieldTypeByEmittedField({\n        emittedBy,\n    }: BigCommercePaymentsCardFieldsState):\n        | HostedFieldBlurEventData\n        | HostedFieldEnterEventData\n        | HostedFieldFocusEventData {\n        return {\n            fieldType: this.mapFieldType(emittedBy),\n        };\n    }\n\n    /**\n     *\n     * Form submit method\n     * Triggers a form submit\n     *\n     * */\n    private async submitHostedForm() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const submitConfig = {\n            billingAddress: {\n                company: billingAddress.company,\n                addressLine1: billingAddress.address1,\n                addressLine2: billingAddress.address2,\n                adminArea1: billingAddress.stateOrProvinceCode,\n                adminArea2: billingAddress.city,\n                postalCode: billingAddress.postalCode,\n                countryCode: billingAddress.countryCode,\n            },\n        };\n\n        try {\n            if (this.isCreditCardVaultedForm) {\n                await cardFields.submit();\n            } else {\n                await cardFields.submit(submitConfig);\n            }\n        } catch (_) {\n            throw new PaymentMethodFailedError(\n                'Failed authentication. Please try to authorize again.',\n            );\n        }\n    }\n\n    /**\n     *\n     * Validation and errors\n     *\n     */\n    private async validateHostedFormOrThrow() {\n        const cardFields = this.getCardFieldsOrThrow();\n        const cardFieldsState = await cardFields.getState().then((data) => data);\n        const validationData = this.getValidityData(cardFieldsState);\n\n        if (validationData.isValid) {\n            return;\n        }\n\n        this.hostedFormOptions?.onValidate?.(validationData);\n\n        throw new PaymentInvalidFormError(this.mapValidationErrors(validationData.errors));\n    }\n\n    private getValidityData({\n        fields,\n    }: BigCommercePaymentsCardFieldsState): HostedFieldValidateEventData {\n        const updatedFields = { ...fields };\n\n        delete updatedFields.cardNameField;\n\n        const fieldsKeys = Object.keys(updatedFields) as Array<\n            keyof BigCommercePaymentsCardFieldsState['fields']\n        >;\n\n        const isValid = fieldsKeys.every((key) => updatedFields[key]?.isValid);\n\n        const errors = fieldsKeys.reduce((fieldsErrors, key) => {\n            const fieldType = this.mapFieldType(key);\n\n            return {\n                ...fieldsErrors,\n                [fieldType]: updatedFields[key]?.isValid\n                    ? undefined\n                    : [this.getInvalidErrorByFieldType(fieldType)],\n            };\n        }, {});\n\n        return { isValid, errors };\n    }\n\n    private getInvalidErrorByFieldType(fieldType: string): HostedInputValidateErrorData {\n        switch (fieldType) {\n            case HostedFieldType.CardCode:\n            case HostedFieldType.CardCodeVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card code',\n                    type: 'invalid_card_code',\n                };\n\n            case HostedFieldType.CardNumber:\n            case HostedFieldType.CardNumberVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card number',\n                    type: 'invalid_card_number',\n                };\n\n            case HostedFieldType.CardExpiry:\n            case HostedFieldType.CardExpiryVerification:\n                return {\n                    fieldType,\n                    message: 'Invalid card expiry',\n                    type: 'invalid_card_expiry',\n                };\n\n            default:\n                return {\n                    fieldType,\n                    message: 'Invalid field',\n                    type: 'invalid',\n                };\n        }\n    }\n\n    private mapValidationErrors(\n        validationErrors: HostedInputValidateErrorDataMap = {},\n    ): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n        const validationErrorsKeys = Object.keys(validationErrors) as Array<\n            keyof HostedInputValidateErrorDataMap\n        >;\n\n        validationErrorsKeys.forEach((key) => {\n            errors[key] = [\n                {\n                    message: validationErrors[key]?.[0]?.message || '',\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    /**\n     *\n     * Fields mappers\n     *\n     */\n    private mapFieldType(type: string): HostedFieldType {\n        switch (type) {\n            case 'name':\n                return HostedFieldType.CardName;\n\n            case 'cardNumberField':\n            case 'number':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardNumber\n                    : HostedFieldType.CardNumberVerification;\n\n            case 'cardExpiryField':\n            case 'expiry':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardExpiry\n                    : HostedFieldType.CardExpiryVerification;\n\n            case 'cardCvvField':\n            case 'cvv':\n                return this.isCreditCardForm\n                    ? HostedFieldType.CardCode\n                    : HostedFieldType.CardCodeVerification;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     */\n    private getCardFieldsOrThrow(): BigCommercePaymentsCardFields {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.cardFields;\n    }\n\n    private getInputStyles(\n        styles?: HostedFieldStylesMap,\n    ): BigCommercePaymentsHostedFieldsRenderOptions['styles'] {\n        const commonStyles = {\n            'font-size': styles?.default?.fontSize || '1rem',\n            'font-family':\n                styles?.default?.fontFamily || 'Montserrat, Arial, Helvetica, sans-serif',\n            'font-weight': styles?.default?.fontWeight || '400',\n            outline: 'none',\n            padding: '9px 13px',\n        };\n\n        const defaultStyles = { ...commonStyles, color: '#333333' };\n        const errorStyles = { ...commonStyles, color: 'red' };\n\n        return {\n            input: defaultStyles,\n            '.invalid': errorStyles,\n            '.valid': defaultStyles,\n            ':focus': defaultStyles,\n        };\n    }\n\n    private stylizeInputContainers(\n        fields: HostedCardFieldOptionsMap | HostedStoredCardFieldOptionsMap,\n    ): void {\n        Object.values(fields || {}).forEach((id: HostedCardFieldOptions) => {\n            const element = document.getElementById(`${id?.containerId || ''}`);\n\n            if (element) {\n                element.style.padding = '0px';\n                element.style.boxShadow = 'none';\n                element.style.border = 'none';\n                element.style.background = 'transparent';\n                element.style.marginBottom = '10px';\n                element.style.marginLeft = '-5px';\n            }\n        });\n    }\n\n    private hasUndefinedValues() {\n        if (this.hostedFormOptions) {\n            return Object.values(this.hostedFormOptions.fields).some(\n                (value) => value === undefined,\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     *\n     * Input events methods\n     *\n     */\n    private onChangeHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onValidate?.(this.getValidityData(event));\n    }\n\n    private onFocusHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onFocus?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onBlurHandler(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onBlur?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    private onInputSubmitRequest(\n        formOptions: HostedFormOptions,\n        event: BigCommercePaymentsCardFieldsState,\n    ): void {\n        formOptions?.onEnter?.(this.getFieldTypeByEmittedField(event));\n    }\n\n    /**\n     *\n     * BigCommercePayments Accelerated checkout related methods\n     *\n     */\n    // TODO: remove this part when BCP Fastlane A/B testing will be finished\n    private shouldInitializePayPalFastlane(methodId: string) {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const bigCommercePaymentsPaymentProviderCustomer = isBigCommercePaymentsFastlaneCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return (\n            paymentMethod?.initializationData?.isAcceleratedCheckoutEnabled &&\n            paymentMethod?.initializationData?.isBigCommercePaymentsAnalyticsV2Enabled &&\n            !bigCommercePaymentsPaymentProviderCustomer?.authenticationState\n        );\n    }\n\n    // TODO: remove this part when BCP Fastlane A/B testing will be finished\n    private async initializePayPalFastlaneOrThrow(methodId: string): Promise<void> {\n        try {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n            const { initializationData } = paymentMethod;\n\n            if (!initializationData?.connectClientToken) {\n                return;\n            }\n\n            const payPalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n                payPalFastlaneSdk,\n                !!initializationData?.isDeveloperModeApplicable,\n            );\n        } catch (_: unknown) {\n            // We should avoid throwing any error from this flow to do no brake default flow\n            // This flow is optional\n        }\n    }\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isBigCommercePaymentsFastlaneCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsCreditCardsPaymentStrategy from './bigcommerce-payments-credit-cards-payment-strategy';\n\nconst createBigCommercePaymentsCreditCardsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsCreditCardsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsCreditCardsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsCreditCardsPaymentStrategy, [\n    { id: 'bigcommerce_payments_creditcards' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    PayPalApmSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    NonInstantAlternativePaymentMethods,\n    PayPalOrderStatus,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions, {\n    WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n} from './bigcommerce-payments-alternative-methods-payment-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BigCommercePaymentsAlternativeMethodsPaymentStrategy\n    implements PaymentStrategy\n{\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private bigCommercePaymentsButton?: BigCommercePaymentsButtons;\n    private paypalApms?: PayPalApmSdk;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n    private isPollingEnabled = false;\n    private bigCommercePaymentsAlternativeMethods?: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private bigCommercePaymentsSdkHelper: PayPalSdkHelper,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, bigcommerce_payments_apms } = options;\n\n        this.bigCommercePaymentsAlternativeMethods = bigcommerce_payments_apms;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_apms) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument is not provided.`,\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { orderId, shouldRenderFields } = paymentMethod.initializationData || {};\n\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        this.isPollingEnabled = isExperimentEnabled(features, 'PAYPAL-5624.bcp_ideal_polling');\n\n        // Info:\n        // The APM button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render the button.\n        if (orderId) {\n            this.orderId = orderId;\n\n            return;\n        }\n\n        this.paypalApms = await this.bigCommercePaymentsSdkHelper.getPayPalApmsSdk(\n            paymentMethod,\n            state.getCartOrThrow().currency.code,\n        );\n\n        this.loadingIndicatorContainer = bigcommerce_payments_apms.container.split('#')[1];\n\n        this.renderButton(methodId, gatewayId, bigcommerce_payments_apms);\n\n        if (shouldRenderFields) {\n            this.renderFields(methodId, bigcommerce_payments_apms);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        if (this.isPollingEnabled && methodId === 'ideal') {\n            await new Promise((resolve, reject) => {\n                void this.initializePollingMechanism(methodId, resolve, reject, gatewayId);\n            });\n        }\n\n        if (!this.isNonInstantPaymentMethod(methodId)) {\n            await this.paymentIntegrationService.submitOrder(order, options);\n        }\n\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            methodId,\n            this.orderId,\n            gatewayId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.bigCommercePaymentsButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: (value?: unknown) => void,\n        rejectPromise: (value?: unknown) => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.bigCommercePaymentsIntegrationService.getOrderStatus(\n                gatewayId,\n            );\n\n            const isOrderApproved = orderStatus === PayPalOrderStatus.Approved;\n            const isPollingError = orderStatus === PayPalOrderStatus.PollingError;\n\n            if (isOrderApproved) {\n                this.deInitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (!isOrderApproved && this.pollingTimer < this.maxPollingIntervalTime) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                bigCommercePaymentsAlternativeMethods: this.bigCommercePaymentsAlternativeMethods,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            rejectPromise();\n        }\n    }\n\n    private deInitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deInitializePollingMechanism();\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ) {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.bigCommercePaymentsAlternativeMethods || {};\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        gatewayId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n            methodId,\n            gatewayId,\n        );\n        const { buttonStyle } = paymentMethod.initializationData || {};\n\n        const { container, onError, onRenderButton, submitForm } = bigcommerce_payments_apms;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: methodId,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(buttonStyle),\n            onInit: (_, actions) => bigcommerce_payments_apms.onInitButton(actions),\n            createOrder: () => this.onCreateOrder(methodId, gatewayId, bigcommerce_payments_apms),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => {\n                this.toggleLoadingIndicator(false);\n                this.deInitializePollingMechanism();\n            },\n            onError: (error) => {\n                this.deInitializePollingMechanism();\n                this.handleFailure(error, onError);\n            },\n            onClick: async (_, actions) =>\n                bigcommerce_payments_apms.onValidate(actions.resolve, actions.reject),\n        };\n\n        this.bigCommercePaymentsButton = paypalAmpsSdk.Buttons(buttonOptions);\n\n        if (!this.bigCommercePaymentsButton.isEligible()) {\n            return;\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.bigCommercePaymentsButton.render(container);\n    }\n\n    private async onCreateOrder(\n        methodId: string,\n        gatewayId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): Promise<string> {\n        const { onValidate } = bigcommerce_payments_apms;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return () => Promise.resolve();\n        };\n\n        await onValidate(onValidationPassed, noop);\n\n        const orderId = await this.bigCommercePaymentsIntegrationService.createOrder(\n            'bigcommerce_payments_apms',\n        );\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            const order = { useStoreCredit: false };\n            const options = {\n                params: {\n                    methodId,\n                    gatewayId,\n                },\n            };\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.bigCommercePaymentsIntegrationService.submitPayment(\n                methodId,\n                orderId,\n                gatewayId,\n            );\n        }\n\n        return orderId;\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n    }\n\n    private handleFailure(\n        error: Error,\n        onError: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Fields methods\n     *\n     * */\n    private renderFields(\n        methodId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    ): void {\n        const paypalAmpsSdk = this.getPaypalAmpsSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const { firstName, lastName, email } = state.getBillingAddressOrThrow();\n\n        const { apmFieldsContainer, apmFieldsStyles } = bigcommerce_payments_apms;\n\n        if (!apmFieldsContainer) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument should contain \"apmFieldsContainer\".',\n            );\n        }\n\n        const fieldContainerElement = document.querySelector(apmFieldsContainer);\n\n        if (fieldContainerElement) {\n            fieldContainerElement.innerHTML = '';\n        }\n\n        const fieldsOptions = {\n            fundingSource: methodId,\n            style: apmFieldsStyles || {},\n            fields: {\n                name: {\n                    value: `${firstName} ${lastName}`,\n                },\n                email: {\n                    value: email,\n                },\n            },\n        };\n\n        const paypalPaymentFields = paypalAmpsSdk.PaymentFields(fieldsOptions);\n\n        paypalPaymentFields.render(apmFieldsContainer);\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantAlternativePaymentMethods;\n    }\n\n    private getPaypalAmpsSdkOrThrow() {\n        if (!this.paypalApms) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.paypalApms;\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../bigcommerce-payments-constants';\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsAlternativeMethodsPaymentStrategy from './bigcommerce-payments-alternative-methods-payment-strategy';\n\nconst createBigCommercePaymentsAlternativeMethodsPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsAlternativeMethodsPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsAlternativeMethodsPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsAlternativeMethodsPaymentStrategy, [\n    { gateway: 'bigcommerce_payments_apms' },\n]);\n","import {\n    InvalidArgumentError,\n    NotImplementedError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtons,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ClickCallbackActions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoPaymentInitializeOptions, {\n    WithBigCommercePaymentsVenmoPaymentInitializeOptions,\n} from './bigcommerce-payments-venmo-payment-initialize-options';\n\nexport default class BigCommercePaymentsVenmoPaymentStrategy implements PaymentStrategy {\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private paypalButton?: BigCommercePaymentsButtons;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithBigCommercePaymentsVenmoPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_venmo } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        // Info:\n        // The PayPal button and fields should not be rendered when shopper was redirected to Checkout page\n        // after using smart payment button on PDP or Cart page. In this case backend returns order id if\n        // it is available in checkout session. Therefore, it is not necessary to render PayPal button.\n        if (paymentMethod.initializationData?.orderId) {\n            this.orderId = paymentMethod.initializationData?.orderId;\n\n            return;\n        }\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        this.loadingIndicatorContainer = bigcommerce_payments_venmo.container.split('#')[1];\n\n        this.renderButton(methodId, bigcommerce_payments_venmo);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this.orderId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.bigCommercePaymentsIntegrationService.submitPayment(\n            payment.methodId,\n            this.orderId,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.orderId = undefined;\n\n        this.paypalButton?.close();\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Button methods/callbacks\n     *\n     * */\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoPaymentInitializeOptions,\n    ): void {\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutPaymentButtonStyles } = paymentButtonStyles || {};\n\n        const { container, onError, onRenderButton, onValidate, submitForm } =\n            bigcommerce_payments_venmo;\n\n        const buttonOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(\n                checkoutPaymentButtonStyles,\n            ),\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo_checkout',\n                ),\n            onClick: (_, actions) => this.handleClick(actions, onValidate),\n            onApprove: (data) => this.handleApprove(data, submitForm),\n            onCancel: () => this.toggleLoadingIndicator(false),\n            onError: (error) => this.handleError(error, onError),\n        };\n\n        this.paypalButton = paypalSdk.Buttons(buttonOptions);\n\n        if (!this.paypalButton.isEligible()) {\n            throw new NotImplementedError(\n                `Venmo is not available for your region. Please another payment method instead.`,\n            );\n        }\n\n        if (onRenderButton && typeof onRenderButton === 'function') {\n            onRenderButton();\n        }\n\n        this.paypalButton.render(container);\n    }\n\n    private async handleClick(\n        actions: ClickCallbackActions,\n        onValidate: BigCommercePaymentsVenmoPaymentInitializeOptions['onValidate'],\n    ): Promise<void> {\n        const { resolve, reject } = actions;\n\n        const onValidationPassed = () => {\n            this.toggleLoadingIndicator(true);\n\n            return resolve();\n        };\n\n        await onValidate(onValidationPassed, reject);\n    }\n\n    private handleApprove(\n        { orderID }: ApproveCallbackPayload,\n        submitForm: BigCommercePaymentsVenmoPaymentInitializeOptions['submitForm'],\n    ): void {\n        this.orderId = orderID;\n\n        submitForm();\n        this.toggleLoadingIndicator(false);\n    }\n\n    private handleError(\n        error: Error,\n        onError: BigCommercePaymentsVenmoPaymentInitializeOptions['onError'],\n    ): void {\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoPaymentStrategy from './bigcommerce-payments-venmo-payment-strategy';\n\nconst createBigCommercePaymentsVenmoPaymentStrategy: PaymentStrategyFactory<\n    BigCommercePaymentsVenmoPaymentStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoPaymentStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoPaymentStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsCustomerInitializeOptions, {\n    WithBigCommercePaymentsCustomerInitializeOptions,\n} from './bigcommerce-payments-customer-initialize-options';\n\nexport default class BigCommercePaymentsCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBigCommercePaymentsCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments.container\" argument is not provided.',\n            );\n        }\n\n        if (bigcommerce_payments.onClick && typeof bigcommerce_payments.onClick !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = bigcommerce_payments.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsCustomerInitializeOptions,\n    ): void {\n        const { container, onClick, onComplete } = bigcommerce_payments;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            ...defaultCallbacks,\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${container}`);\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsCustomerStrategy from './bigcommerce-payments-customer-strategy';\n\nconst createBigCommercePaymentsCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsCustomerStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import {\n    BigCommercePaymentsFastlaneUtils,\n    BigCommercePaymentsInitializationData,\n    getFastlaneStyles,\n    PayPalFastlaneAuthenticationResult,\n    PayPalFastlaneAuthenticationState,\n    PayPalFastlaneStylesOption,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsFastlaneCustomerInitializeOptions, {\n    WithBigCommercePaymentsFastlaneCustomerInitializeOptions,\n} from './bigcommerce-payments-fastlane-customer-initialize-options';\n\nexport default class BigCommercePaymentsFastlaneCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsSdk: PayPalSdkHelper,\n        private bigCommercePaymentsFastlaneUtils: BigCommercePaymentsFastlaneUtils,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions &\n            WithBigCommercePaymentsFastlaneCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, bigcommerce_payments_fastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n            const isTestModeEnabled = !!paymentMethod.initializationData?.isDeveloperModeApplicable;\n\n            const paypalFastlaneSdk = await this.bigCommercePaymentsSdk.getPayPalFastlaneSdk(\n                paymentMethod,\n                cart.currency.code,\n                cart.id,\n            );\n\n            await this.bigCommercePaymentsFastlaneUtils.initializePayPalFastlane(\n                paypalFastlaneSdk,\n                isTestModeEnabled,\n                this.getFastlaneStyles(methodId, bigcommerce_payments_fastlane),\n            );\n        } catch (_) {\n            // TODO: add logger to be able to debug issues if there any\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback, methodId } =\n            options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (customer.isGuest) {\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            try {\n                await this.runPayPalAuthenticationFlowOrThrow(methodId);\n            } catch (_) {\n                // TODO: add logger to be able to debug issues if there any\n                // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    /**\n     *\n     * Authentication flow methods\n     *\n     */\n    private async runPayPalAuthenticationFlowOrThrow(methodId: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const customer = state.getCustomer();\n        const billingAddress = state.getBillingAddress();\n        const customerEmail = customer?.email || billingAddress?.email || '';\n\n        const { customerContextId } =\n            await this.bigCommercePaymentsFastlaneUtils.lookupCustomerOrThrow(customerEmail);\n\n        const authenticationResult =\n            await this.bigCommercePaymentsFastlaneUtils.triggerAuthenticationFlowOrThrow(\n                customerContextId,\n            );\n\n        const isAuthenticationFlowCanceled =\n            authenticationResult.authenticationState === PayPalFastlaneAuthenticationState.CANCELED;\n\n        await this.updateCustomerDataState(methodId, authenticationResult);\n\n        if (isAuthenticationFlowCanceled) {\n            this.bigCommercePaymentsFastlaneUtils.removeStorageSessionId();\n        } else {\n            this.bigCommercePaymentsFastlaneUtils.updateStorageSessionId(cartId);\n        }\n    }\n\n    private async updateCustomerDataState(\n        methodId: string,\n        authenticationResult: PayPalFastlaneAuthenticationResult,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        const { authenticationState, addresses, billingAddress, shippingAddress, instruments } =\n            this.bigCommercePaymentsFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(\n                methodId,\n                authenticationResult,\n            );\n\n        await this.paymentIntegrationService.updatePaymentProviderCustomer({\n            authenticationState,\n            addresses,\n            instruments,\n        });\n\n        if (billingAddress) {\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && cart.lineItems.physicalItems.length > 0) {\n            const updatedState = await this.paymentIntegrationService.updateShippingAddress(\n                shippingAddress,\n            );\n\n            const paymentMethod =\n                updatedState.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(\n                    methodId,\n                );\n            const { isFastlaneShippingOptionAutoSelectEnabled } =\n                paymentMethod.initializationData || {};\n            const consignments = updatedState.getConsignments() || [];\n            const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n            const firstShippingOption = availableShippingOptions[0];\n            const recommendedShippingOption = availableShippingOptions.find(\n                (option) => option.isRecommended,\n            );\n\n            if (\n                (recommendedShippingOption || firstShippingOption) &&\n                isFastlaneShippingOptionAutoSelectEnabled\n            ) {\n                const shippingOptionId = recommendedShippingOption?.id || firstShippingOption.id;\n\n                await this.paymentIntegrationService.selectShippingOption(shippingOptionId);\n            }\n        }\n    }\n\n    /**\n     *\n     * Fastlane styling methods\n     *\n     */\n    private getFastlaneStyles(\n        methodId: string,\n        bigcommerce_payments_fastlane:\n            | BigCommercePaymentsFastlaneCustomerInitializeOptions\n            | undefined,\n    ): PayPalFastlaneStylesOption | undefined {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n        const { fastlaneStyles, isFastlaneStylingEnabled } = paymentMethod.initializationData || {};\n\n        return getFastlaneStyles(\n            isFastlaneStylingEnabled ? fastlaneStyles : {},\n            bigcommerce_payments_fastlane?.styles,\n        );\n    }\n}\n","import {\n    createBigCommercePaymentsFastlaneUtils,\n    createBigCommercePaymentsSdk,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsFastlaneCustomerStrategy from './bigcommerce-payments-fastlane-customer-strategy';\n\nconst createBigCommercePaymentsFastlaneCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsFastlaneCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsFastlaneCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsSdk(),\n        createBigCommercePaymentsFastlaneUtils(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsFastlaneCustomerStrategy, [\n    { id: 'bigcommerce_payments_fastlane' }, // this method id will be provided for users from test group\n    { id: 'bigcommerce_payments_creditcards' }, // this method id will be provided for users from control group\n]);\n","import { noop } from 'lodash';\n\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterCustomerInitializeOptions, {\n    WithBigCommercePaymentsPayLaterCustomerInitializeOptions,\n} from './bigcommerce-payments-paylater-customer-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterCustomerStrategy implements CustomerStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions &\n            WithBigCommercePaymentsPayLaterCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_paylater, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_paylater.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater.container\" argument is not provided.',\n            );\n        }\n\n        if (\n            bigcommerce_payments_paylater.onClick &&\n            typeof bigcommerce_payments_paylater.onClick !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_paylater.onClick\" argument is not a function.',\n            );\n        }\n\n        this.onError = bigcommerce_payments_paylater.onError || noop;\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC BigCommercePayments PayLater]: button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments_paylater);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigCommercePaymentsPayLater: BigCommercePaymentsPayLaterCustomerInitializeOptions,\n    ): void {\n        const { container, onComplete, onClick } = bigCommercePaymentsPayLater;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled, paymentButtonStyles } =\n            paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_paylater',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n                    fundingSource,\n                    style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                        ...checkoutTopButtonStyles,\n                        height: DefaultCheckoutButtonHeight,\n                    }),\n                    ...defaultCallbacks,\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${container}`);\n                    hasRenderedSmartButton = true;\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<void> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address except shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private handleError(error: unknown) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterCustomerStrategy from './bigcommerce-payments-paylater-customer-strategy';\n\nconst createBigCommercePaymentsPayLaterCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsPayLaterCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterCustomerStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoCustomerInitializeOptions, {\n    WithBigCommercePaymentsVenmoCustomerInitializeOptions,\n} from './bigcommerce-payments-venmo-customer-initialize-options';\n\nexport default class BigCommercePaymentsVenmoCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBigCommercePaymentsVenmoCustomerInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_venmo, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.',\n            );\n        }\n\n        if (!bigcommerce_payments_venmo.container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo.container\" argument is not provided.',\n            );\n        }\n\n        if (\n            bigcommerce_payments_venmo.onClick &&\n            typeof bigcommerce_payments_venmo.onClick !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.bigcommerce_payments_venmo.onClick\" argument is not a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        }\n\n        const paypalSdk = await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(methodId);\n\n        if (!paypalSdk || !paypalSdk.Buttons || typeof paypalSdk.Buttons !== 'function') {\n            // eslint-disable-next-line no-console\n            console.error(\n                '[BC Payments Venmo]: Button could not be rendered, due to issues with loading PayPal SDK',\n            );\n\n            return;\n        }\n\n        this.renderButton(methodId, bigcommerce_payments_venmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoCustomerInitializeOptions,\n    ): void {\n        const { container, onClick } = bigcommerce_payments_venmo;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { paymentButtonStyles } = paymentMethod.initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.VENMO,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle({\n                ...checkoutTopButtonStyles,\n                height: DefaultCheckoutButtonHeight,\n            }),\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n            ...(onClick && { onClick: () => onClick() }),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${container}`);\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(container);\n        }\n    }\n}\n","import {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoCustomerStrategy from './bigcommerce-payments-venmo-customer-strategy';\n\nconst createBigCommercePaymentsVenmoCustomerStrategy: CustomerStrategyFactory<\n    BigCommercePaymentsVenmoCustomerStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoCustomerStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoCustomerStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    BigCommercePaymentsInitializationData,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsButtonInitializeOptions, {\n    WithBigCommercePaymentsButtonInitializeOptions,\n} from './bigcommerce-payments-button-initialize-options';\n\nexport default class BigCommercePaymentsButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBigCommercePaymentsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments, containerId, methodId } = options;\n\n        const isBuyNowFlow = Boolean(bigcommerce_payments?.buyNowInitializeOptions);\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !bigcommerce_payments.currencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof bigcommerce_payments.buyNowInitializeOptions?.getBuyNowCartRequestBody !==\n                'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? bigcommerce_payments.currencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments: BigCommercePaymentsButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n        };\n\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButton.isEligible()) {\n            paypalButton.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsButtonStrategy from './bigcommerce-payments-button-strategy';\n\nconst createBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsButtonStrategy, [\n    { id: 'bigcommerce_payments' },\n]);\n","import {\n    BigCommercePaymentsInitializationData,\n    getPaypalMessagesStylesFromBNPLConfig,\n    MessagingOptions,\n    PayPalBNPLConfigurationItem,\n    PayPalMessagesSdk,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackActions,\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n    ShippingAddressChangeCallbackPayload,\n    ShippingOptionChangeCallbackPayload,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsPayLaterButtonInitializeOptions, {\n    WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n} from './bigcommerce-payments-paylater-button-initialize-options';\n\nexport default class BigCommercePaymentsPayLaterButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n        private payPalSdkHelper: PayPalSdkHelper,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_paylater, containerId, methodId } = options;\n        const {\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n            messagingContainerId,\n        } = bigcommerce_payments_paylater || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_paylater) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_paylater.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const state = this.paymentIntegrationService.getState();\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : state.getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_paylater);\n\n        const messagingContainer =\n            messagingContainerId && document.getElementById(messagingContainerId);\n\n        if (currencyCode && messagingContainer) {\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData || {};\n            const bannerConfiguration =\n                paypalBNPLConfiguration && paypalBNPLConfiguration.find(({ id }) => id === 'cart');\n\n            if (!bannerConfiguration?.status) {\n                return;\n            }\n\n            // TODO: remove this when data attributes will be removed from related cart banner container in content service\n            messagingContainer.removeAttribute('data-pp-style-logo-type');\n            messagingContainer.removeAttribute('data-pp-style-logo-position');\n            messagingContainer.removeAttribute('data-pp-style-text-color');\n            messagingContainer.removeAttribute('data-pp-style-text-size');\n\n            const payPalSdkHelper = await this.payPalSdkHelper.getPayPalMessages(\n                paymentMethod,\n                currencyCode,\n            );\n\n            this.renderMessages(payPalSdkHelper, messagingContainerId, bannerConfiguration);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_paylater: BigCommercePaymentsPayLaterButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onComplete, onEligibilityFailure } =\n            bigcommerce_payments_paylater;\n\n        const bigCommercePaymentsSdk =\n            this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<BigCommercePaymentsInitializationData>(methodId);\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_paylater',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const hostedCheckoutCallbacks = {\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\n                this.onShippingAddressChange(data),\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\n                this.onShippingOptionsChange(data),\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\n        };\n\n        const fundingSources = [\n            bigCommercePaymentsSdk.FUNDING.PAYLATER,\n            bigCommercePaymentsSdk.FUNDING.CREDIT,\n        ];\n        let hasRenderedSmartButton = false;\n\n        fundingSources.forEach((fundingSource) => {\n            if (!hasRenderedSmartButton) {\n                const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n                    fundingSource,\n                    style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n                    ...defaultCallbacks,\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\n                };\n\n                const paypalButton = bigCommercePaymentsSdk.Buttons(buttonRenderOptions);\n\n                if (paypalButton.isEligible()) {\n                    paypalButton.render(`#${containerId}`);\n                    hasRenderedSmartButton = true;\n                } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                    onEligibilityFailure();\n                }\n            }\n        });\n\n        if (!hasRenderedSmartButton) {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n\n    private async onHostedCheckoutApprove(\n        data: ApproveCallbackPayload,\n        actions: ApproveCallbackActions,\n        methodId: string,\n        onComplete?: () => void,\n    ): Promise<boolean> {\n        if (!data.orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const orderDetails = await actions.order.get();\n\n        try {\n            const billingAddress =\n                this.bigCommercePaymentsIntegrationService.getBillingAddressFromOrderDetails(\n                    orderDetails,\n                );\n\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n\n            if (cart.lineItems.physicalItems.length > 0) {\n                const shippingAddress =\n                    this.bigCommercePaymentsIntegrationService.getShippingAddressFromOrderDetails(\n                        orderDetails,\n                    );\n\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n                await this.bigCommercePaymentsIntegrationService.updateOrder();\n            }\n\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\n            await this.bigCommercePaymentsIntegrationService.submitPayment(methodId, data.orderID);\n\n            if (onComplete && typeof onComplete === 'function') {\n                onComplete();\n            }\n\n            return true; // FIXME: Do we really need to return true here?\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingAddressChange(\n        data: ShippingAddressChangeCallbackPayload,\n    ): Promise<void> {\n        const address = this.bigCommercePaymentsIntegrationService.getAddress({\n            city: data.shippingAddress.city,\n            countryCode: data.shippingAddress.countryCode,\n            postalCode: data.shippingAddress.postalCode,\n            stateOrProvinceCode: data.shippingAddress.state,\n        });\n\n        try {\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\n            // on this stage we don't have access to valid customer's address accept shipping data\n            await this.paymentIntegrationService.updateBillingAddress(address);\n            await this.paymentIntegrationService.updateShippingAddress(address);\n\n            const shippingOption =\n                this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow();\n\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async onShippingOptionsChange(\n        data: ShippingOptionChangeCallbackPayload,\n    ): Promise<void> {\n        const shippingOption = this.bigCommercePaymentsIntegrationService.getShippingOptionOrThrow(\n            data.selectedShippingOption.id,\n        );\n\n        try {\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\n            await this.bigCommercePaymentsIntegrationService.updateOrder();\n        } catch (error) {\n            if (typeof error === 'string') {\n                throw new Error(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private renderMessages(\n        paypalMessagesSdk: PayPalMessagesSdk,\n        messagingContainerId: string,\n        bannerConfiguration: PayPalBNPLConfigurationItem,\n    ): void {\n        const checkout = this.paymentIntegrationService.getState().getCheckoutOrThrow();\n\n        const paypalMessagesOptions: MessagingOptions = {\n            amount: checkout.outstandingBalance,\n            placement: 'cart',\n            style: getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n        };\n\n        const paypalMessages = paypalMessagesSdk.Messages(paypalMessagesOptions);\n\n        paypalMessages.render(`#${messagingContainerId}`);\n    }\n}\n","import { createBigCommercePaymentsSdk } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsPayLaterButtonStrategy from './bigcommerce-payments-paylater-button-strategy';\n\nconst createBigCommercePaymentsPayLaterButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsPayLaterButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsPayLaterButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n        createBigCommercePaymentsSdk(),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsPayLaterButtonStrategy, [\n    { id: 'bigcommerce_payments_paylater' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalBuyNowInitializeOptions,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsAlternativeMethodsButtonInitializeOptions, {\n    WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n} from './bigcommerce-payments-alternative-methods-button-initialize-options';\n\nexport default class BigCommercePaymentsAlternativeMethodsButtonStrategy\n    implements CheckoutButtonStrategy\n{\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_apms, containerId, methodId } = options;\n        const {\n            apm,\n            buyNowInitializeOptions,\n            currencyCode: providedCurrencyCode,\n        } = bigcommerce_payments_apms || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_apms) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms\" argument is not provided.`,\n            );\n        }\n\n        if (!apm) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.apm\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_apms.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_apms);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_apms: BigCommercePaymentsAlternativeMethodsButtonInitializeOptions,\n    ): void {\n        const { apm, buyNowInitializeOptions, style, onEligibilityFailure } =\n            bigcommerce_payments_apms;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\n\n        if (!isAvailableFundingSource) {\n            throw new InvalidArgumentError(\n                `Unable to initialize PayPal button because \"options.bigcommerce_payments_apms.apm\" argument is not valid funding source.`,\n            );\n        }\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder('bigcommerce_payments_apms'),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource: apm,\n            style: this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsAlternativeMethodsButtonStrategy from './bigcommerce-payments-alternative-methods-button-strategy';\n\nconst createBigCommercePaymentsAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsAlternativeMethodsButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsAlternativeMethodsButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsAlternativeMethodsButtonStrategy, [\n    { id: 'bigcommerce_payments_apms' },\n]);\n","import {\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BigCommercePaymentsIntegrationService from '../bigcommerce-payments-integration-service';\nimport {\n    ApproveCallbackPayload,\n    BigCommercePaymentsButtonsOptions,\n    PayPalButtonStyleOptions,\n    PayPalBuyNowInitializeOptions,\n    StyleButtonColor,\n} from '../bigcommerce-payments-types';\n\nimport BigCommercePaymentsVenmoButtonInitializeOptions, {\n    WithBigCommercePaymentsVenmoButtonInitializeOptions,\n} from './bigcommerce-payments-venmo-button-initialize-options';\n\nexport default class BigCommercePaymentsVenmoButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private bigCommercePaymentsIntegrationService: BigCommercePaymentsIntegrationService,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions &\n            WithBigCommercePaymentsVenmoButtonInitializeOptions,\n    ): Promise<void> {\n        const { bigcommerce_payments_venmo, containerId, methodId } = options;\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\n            bigcommerce_payments_venmo || {};\n\n        const isBuyNowFlow = !!buyNowInitializeOptions;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!bigcommerce_payments_venmo) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo\" argument is not provided.`,\n            );\n        }\n\n        if (isBuyNowFlow && !providedCurrencyCode) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.currencyCode\" argument is not provided.`,\n            );\n        }\n\n        if (\n            isBuyNowFlow &&\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\n        ) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.bigcommerce_payments_venmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\n            );\n        }\n\n        if (!isBuyNowFlow) {\n            // Info: default checkout should not be loaded for BuyNow flow,\n            // since there is no checkout session available for that.\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        // Info: we are using provided currency code for buy now cart,\n        // because checkout session is not available before buy now cart creation,\n        // hence application will throw an error on getCartOrThrow method call\n        const currencyCode = isBuyNowFlow\n            ? providedCurrencyCode\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\n\n        await this.bigCommercePaymentsIntegrationService.loadPayPalSdk(\n            methodId,\n            currencyCode,\n            false,\n        );\n\n        this.renderButton(containerId, methodId, bigcommerce_payments_venmo);\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private renderButton(\n        containerId: string,\n        methodId: string,\n        bigcommerce_payments_venmo: BigCommercePaymentsVenmoButtonInitializeOptions,\n    ): void {\n        const { buyNowInitializeOptions, style, onEligibilityFailure } = bigcommerce_payments_venmo;\n\n        const paypalSdk = this.bigCommercePaymentsIntegrationService.getPayPalSdkOrThrow();\n        const fundingSource = paypalSdk.FUNDING.VENMO;\n\n        const defaultCallbacks = {\n            createOrder: () =>\n                this.bigCommercePaymentsIntegrationService.createOrder(\n                    'bigcommerce_payments_venmo',\n                ),\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\n                this.bigCommercePaymentsIntegrationService.tokenizePayment(methodId, orderID),\n        };\n\n        const buyNowFlowCallbacks = {\n            onClick: () => this.handleClick(buyNowInitializeOptions),\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\n        };\n\n        const buttonRenderOptions: BigCommercePaymentsButtonsOptions = {\n            fundingSource,\n            style: this.getValidVenmoButtonStyles(style),\n            ...defaultCallbacks,\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\n        };\n\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\n\n        if (paypalButtonRender.isEligible()) {\n            paypalButtonRender.render(`#${containerId}`);\n        } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n            onEligibilityFailure();\n        } else {\n            this.bigCommercePaymentsIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\n        const validButtonStyle =\n            this.bigCommercePaymentsIntegrationService.getValidButtonStyle(style);\n\n        if (validButtonStyle.color === StyleButtonColor.gold) {\n            return {\n                ...validButtonStyle,\n                color: undefined,\n            };\n        }\n\n        return validButtonStyle;\n    }\n\n    private async handleClick(\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (buyNowInitializeOptions) {\n            const buyNowCart =\n                await this.bigCommercePaymentsIntegrationService.createBuyNowCartOrThrow(\n                    buyNowInitializeOptions,\n                );\n\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\n        }\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createBigCommercePaymentsIntegrationService from '../create-bigcommerce-payments-integration-service';\n\nimport BigCommercePaymentsVenmoButtonStrategy from './bigcommerce-payments-venmo-button-strategy';\n\nconst createBigCommercePaymentsVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BigCommercePaymentsVenmoButtonStrategy\n> = (paymentIntegrationService) =>\n    new BigCommercePaymentsVenmoButtonStrategy(\n        paymentIntegrationService,\n        createBigCommercePaymentsIntegrationService(paymentIntegrationService),\n    );\n\nexport default toResolvableModule(createBigCommercePaymentsVenmoButtonStrategy, [\n    { id: 'bigcommerce_payments_venmo' },\n]);\n","/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */\n\nvar hasElementType = typeof Element !== 'undefined';\nvar hasMap = typeof Map === 'function';\nvar hasSet = typeof Set === 'function';\nvar hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;\n\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\n\nfunction equal(a, b) {\n  // START: fast-deep-equal es6/index.js 3.1.3\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    // START: Modifications:\n    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n    //    to co-exist with es5.\n    // 2. Replace `for of` with es5 compliant iteration using `for`.\n    //    Basically, take:\n    //\n    //    ```js\n    //    for (i of a.entries())\n    //      if (!b.has(i[0])) return false;\n    //    ```\n    //\n    //    ... and convert to:\n    //\n    //    ```js\n    //    it = a.entries();\n    //    while (!(i = it.next()).done)\n    //      if (!b.has(i.value[0])) return false;\n    //    ```\n    //\n    //    **Note**: `i` access switches to `i.value`.\n    var it;\n    if (hasMap && (a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!equal(i.value[1], b.get(i.value[0]))) return false;\n      return true;\n    }\n\n    if (hasSet && (a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      return true;\n    }\n    // END: Modifications\n\n    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    // START: Modifications:\n    // Apply guards for `Object.create(null)` handling. See:\n    // - https://github.com/FormidableLabs/react-fast-compare/issues/64\n    // - https://github.com/epoberezkin/fast-deep-equal/issues/49\n    if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function') return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function') return a.toString() === b.toString();\n    // END: Modifications\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    // END: fast-deep-equal\n\n    // START: react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element) return false;\n\n    // custom handling for React/Preact\n    for (i = length; i-- !== 0;) {\n      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner\n        // Preact-specific: avoid traversing Preact elements' __v and __o\n        //    __v = $_original / $_vnode\n        //    __o = $_owner\n        // These properties contain circular references and are not needed when\n        // comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of elements\n\n        continue;\n      }\n\n      // all other properties should be traversed as usual\n      if (!equal(a[keys[i]], b[keys[i]])) return false;\n    }\n    // END: react-fast-compare\n\n    // START: fast-deep-equal\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function isEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if (((error.message || '').match(/stack|recursion/i))) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('react-fast-compare cannot handle circular refs');\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item: LineItem) => total + item.quantity, 0);\n}\n","import {\n    Cart,\n    Checkout,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Pay: AmazonPayV2Client;\n}\n\nexport interface RequestConfig {\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    estimatedOrderAmount?: AmazonPayV2Price;\n    productType?: AmazonPayV2PayOptions;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void | Promise<void>) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: RequestConfig): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n\n    /**\n     * Sets Amazon Pay button design.\n     */\n    design?: AmazonPayV2ButtonDesign;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport const amazonPayV2Regions: { [key: string]: string } = {\n    de: 'eu',\n    jp: 'fe',\n    uk: 'eu',\n    us: 'na',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/no-shadow */\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n/* eslint-enable @typescript-eslint/no-shadow */\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport enum AmazonPayV2ButtonDesign {\n    C0001 = 'C0001',\n}\n\n// TODO: after migration AmazonPay strategies to integration package\n// <InternalCheckoutSelectors> should be removed\n// and replaced usage with <PaymentIntegrationService>\nexport interface InternalCheckoutSelectors {\n    cart: {\n        getCart: () => Cart | undefined;\n    };\n    checkout: {\n        getCheckout: () => Checkout | undefined;\n    };\n    config: {\n        getStoreConfigOrThrow: () => StoreConfig;\n    };\n    paymentMethods: {\n        getPaymentMethodOrThrow: <T>(methodId: string) => PaymentMethod<T>;\n    };\n}\n\nexport interface AmazonPayV2InitializeOptions {\n    buttonColor?: AmazonPayV2ButtonColor;\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n    checkoutSessionMethod?: 'GET' | 'POST';\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n    extractAmazonCheckoutSessionId?: string;\n    ledgerCurrency?: AmazonPayV2LedgerCurrency;\n    publicKeyId?: string;\n    region?: string;\n    isButtonMicroTextDisabled?: boolean;\n    paymentToken?: string;\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    buttonColor?: AmazonPayV2ButtonColor;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n    isButtonMicroTextDisabled?: boolean;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface AmazonPayAdditionalActionErrorBody {\n    status: string;\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n","import {\n    CheckoutSettings,\n    getShippableItemsCount,\n    guard,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonDesign,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2Price,\n    AmazonPayV2SDK,\n    InternalCheckoutSelectors,\n    RequestConfig,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\nimport { isInternalCheckoutSelectors } from './isInternalCheckoutSelectors';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private amazonPayV2SDK?: AmazonPayV2SDK;\n    private buttonParentContainer?: HTMLDivElement;\n    private amazonPayV2Button?: AmazonPayV2Button;\n    private isBuyNowFlow?: boolean;\n\n    constructor(private amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<void> {\n        this.amazonPayV2SDK = await this.amazonPayV2ScriptLoader.load(paymentMethod);\n        this.buttonParentContainer =\n            this.buttonParentContainer || this.createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this.amazonPayV2Button = undefined;\n        this.buttonParentContainer?.remove();\n        this.buttonParentContainer = undefined;\n        this.amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this.getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this.amazonPayV2Button = this.getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\n        const requestConfig = this.prepareRequestConfig(createCheckoutSessionConfig);\n\n        this.getAmazonPayV2Button().onClick(() => {\n            this.getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    prepareCheckoutWithCreationRequestConfig(\n        createCheckoutConfig: () => Promise<\n            | {\n                  createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\n                  estimatedOrderAmount: AmazonPayV2Price;\n                  productType: AmazonPayV2PayOptions;\n              }\n            | undefined\n        >,\n    ) {\n        this.getAmazonPayV2Button().onClick(async () => {\n            const config = await createCheckoutConfig();\n\n            if (config) {\n                const requestConfig = this.prepareRequestConfig(\n                    config.createCheckoutSessionConfig,\n                    config.estimatedOrderAmount,\n                    config.productType,\n                );\n\n                this.getAmazonPayV2Button().initCheckout(requestConfig);\n            }\n        });\n    }\n\n    async signout(): Promise<void> {\n        if (this.amazonPayV2SDK) {\n            this.amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        buttonColor,\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n        isButtonMicroTextDisabled = false,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const { id: parentContainerId } = container.appendChild(this.getButtonParentContainer());\n\n        if (options && isButtonMicroTextDisabled) {\n            options.design = AmazonPayV2ButtonDesign.C0001;\n        }\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this.getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n                buttonColor,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this.getButtonParentContainer();\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow?: boolean) {\n        this.isBuyNowFlow = Boolean(isBuyNowFlow);\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private prepareRequestConfig(\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\n        estimatedOrderAmount?: AmazonPayV2Price,\n        productType?: AmazonPayV2PayOptions,\n    ): RequestConfig {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        return {\n            createCheckoutSessionConfig: this.isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\n            ...(productType && { productType }),\n        };\n    }\n\n    private createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private getAmazonPayV2ButtonOptions(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n        buttonColor = AmazonPayV2ButtonColor.Gold,\n    ): AmazonPayV2ButtonParameters {\n        const { getCart, getCheckout, getStoreConfigOrThrow, getPaymentMethodOrThrow } =\n            this.getCheckoutState(checkoutState);\n        const {\n            config: { merchantId, testMode },\n            initializationData,\n        } = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n\n        if (!initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            checkoutLanguage,\n            checkoutSessionMethod,\n            createCheckoutSessionConfig,\n            extractAmazonCheckoutSessionId,\n            ledgerCurrency,\n            publicKeyId = '',\n            isButtonMicroTextDisabled,\n        } = initializationData;\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            placement,\n            buttonColor,\n            ...(isButtonMicroTextDisabled ? { design: AmazonPayV2ButtonDesign.C0001 } : {}),\n        };\n\n        if (this.isBuyNowFlow) {\n            return {\n                ...buttonBaseConfig,\n                sandbox: !!testMode,\n            };\n        }\n\n        const cart = getCart();\n\n        buttonBaseConfig.productType =\n            cart && getShippableItemsCount(cart) === 0\n                ? AmazonPayV2PayOptions.PayOnly\n                : AmazonPayV2PayOptions.PayAndShip;\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            if (!createCheckoutSessionConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this.isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this.getOrThrow(this.amazonPayV2SDK);\n    }\n\n    private getButtonParentContainer(): HTMLDivElement {\n        return this.getOrThrow(this.buttonParentContainer);\n    }\n\n    private getAmazonPayV2Button(): AmazonPayV2Button {\n        return this.getOrThrow(this.amazonPayV2Button);\n    }\n\n    private getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    // INFO: need this mapping while we have strategies in core and in integration package at the same time\n    private getCheckoutState(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n    ): Pick<\n        PaymentIntegrationSelectors,\n        'getCart' | 'getCheckout' | 'getStoreConfigOrThrow' | 'getPaymentMethodOrThrow'\n    > {\n        if (isInternalCheckoutSelectors(checkoutState)) {\n            return {\n                getCart: checkoutState.cart.getCart,\n                getCheckout: checkoutState.checkout.getCheckout,\n                getStoreConfigOrThrow: checkoutState.config.getStoreConfigOrThrow,\n                getPaymentMethodOrThrow: <T>(methodId: string) =>\n                    checkoutState.paymentMethods.getPaymentMethodOrThrow<T>(methodId),\n            };\n        }\n\n        return checkoutState;\n    }\n}\n","import { InternalCheckoutSelectors } from './amazon-pay-v2';\n\nexport function isInternalCheckoutSelectors(\n    checkoutSelectors: unknown,\n): checkoutSelectors is InternalCheckoutSelectors {\n    return (\n        typeof checkoutSelectors === 'object' &&\n        checkoutSelectors !== null &&\n        'cart' in checkoutSelectors &&\n        'checkout' in checkoutSelectors &&\n        'config' in checkoutSelectors &&\n        'paymentMethods' in checkoutSelectors\n    );\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2HostWindow,\n    AmazonPayV2InitializeOptions,\n    amazonPayV2Regions,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private windowWithAmazonPay: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<AmazonPayV2SDK> {\n        const { initializationData } = method;\n        const region = initializationData?.region || 'us';\n\n        const amazonPayV2Region = amazonPayV2Regions[region];\n\n        await this.scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this.windowWithAmazonPay.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.windowWithAmazonPay.amazon;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n","import { noop } from 'lodash';\n\nimport {\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n    isAmazonPayAdditionalActionErrorBody,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CheckoutSettings,\n    guard,\n    InvalidArgumentError,\n    isRequestError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithAmazonPayV2PaymentInitializeOptions } from './amazon-pay-v2-payment-initialize-options';\n\nexport default class AmazonPayV2PaymentStrategy implements PaymentStrategy {\n    private _amazonPayButton?: HTMLDivElement;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAmazonPayV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n        const paymentMethod = state.getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const initializationData = paymentMethod.initializationData || {};\n        const { paymentToken = '', region = '', isButtonMicroTextDisabled } = initializationData;\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (this._isReadyToPay(paymentToken)) {\n            if (amazonpay?.editButtonId) {\n                this._bindEditButton(\n                    amazonpay.editButtonId,\n                    paymentToken,\n                    'changePayment',\n                    this._isModalFlow(region),\n                );\n            }\n        } else {\n            const { id: containerId } = this._createContainer();\n\n            this._amazonPayButton = this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n                checkoutState: state,\n                containerId,\n                decoupleCheckoutInitiation: this._isOneTimeTransaction(\n                    features,\n                    region.toUpperCase(),\n                ),\n                methodId,\n                placement: AmazonPayV2Placement.Checkout,\n                isButtonMicroTextDisabled,\n            });\n\n            if (!this._amazonPayButton) {\n                throw new InvalidArgumentError(\n                    'Unable to render the Amazon Pay button to an invalid HTML container element.',\n                );\n            }\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const state = this.paymentIntegrationService.getState();\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n        const paymentMethod = state.getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const initializationData = paymentMethod.initializationData || {};\n        const { paymentToken = '', region = '' } = initializationData;\n\n        if (\n            this._isReadyToPay(paymentToken) ||\n            this._isOneTimeTransaction(features, region.toUpperCase())\n        ) {\n            const paymentPayload = {\n                methodId,\n                paymentData: { nonce: paymentToken || 'apb' },\n            };\n\n            await this.paymentIntegrationService.submitOrder(payload, options);\n\n            try {\n                await this.paymentIntegrationService.submitPayment(paymentPayload);\n\n                return;\n            } catch (error) {\n                if (!isRequestError(error) || !isAmazonPayAdditionalActionErrorBody(error.body)) {\n                    throw error;\n                }\n\n                const { additional_action_required: additionalAction } = error.body;\n                const { redirect_url } = additionalAction.data;\n\n                if (paymentToken) {\n                    return new Promise(() => window.location.assign(redirect_url));\n                }\n\n                this.amazonPayV2PaymentProcessor.prepareCheckout(\n                    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                    JSON.parse(redirect_url) as Required<AmazonPayV2CheckoutSessionConfig>,\n                );\n            }\n        }\n\n        this._getAmazonPayButton().click();\n\n        // Focus of parent window used to try and detect the user cancelling the Amazon log in modal\n        // Should be refactored if/when Amazon add a modal close hook to their SDK\n        if (this._isModalFlow(region)) {\n            return new Promise((_, reject) => {\n                const onFocus = () => {\n                    window.removeEventListener('focus', onFocus);\n                    reject(\n                        new PaymentMethodCancelledError(\n                            'Shopper needs to login to Amazonpay to continue',\n                        ),\n                    );\n                };\n\n                window.addEventListener('focus', onFocus);\n            });\n        }\n\n        return new Promise<never>(noop);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.amazonPayV2PaymentProcessor.deinitialize();\n\n        this._amazonPayButton = undefined;\n    }\n\n    private _bindEditButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n        isModalFlow: boolean,\n    ): void {\n        const button = document.getElementById(buttonId);\n\n        if (!button || !button.parentNode) {\n            return;\n        }\n\n        if (!isModalFlow) {\n            const clone = button.cloneNode(true);\n\n            button.parentNode.replaceChild(clone, button);\n\n            clone.addEventListener('click', () => {\n                void this._showLoadingSpinner();\n            });\n        }\n\n        this.amazonPayV2PaymentProcessor.bindButton(buttonId, sessionId, changeAction);\n    }\n\n    private _isModalFlow(region: string) {\n        return region === 'us';\n    }\n\n    private async _showLoadingSpinner(): Promise<void> {\n        await this.paymentIntegrationService.widgetInteraction(() => new Promise(noop));\n    }\n\n    private _createContainer(): HTMLElement {\n        let container = document.getElementById('AmazonPayButton');\n\n        if (container) {\n            return container;\n        }\n\n        container = document.createElement('div');\n        container.id = 'AmazonPayButton';\n        container.style.display = 'none';\n\n        return document.body.appendChild(container);\n    }\n\n    private _getAmazonPayButton() {\n        return guard(\n            this._amazonPayButton,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _isOneTimeTransaction(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        return (\n            this.amazonPayV2PaymentProcessor.isPh4Enabled(features, storeCountryCode) &&\n            features['INT-6399.amazon_pay_apb']\n        );\n    }\n\n    private _isReadyToPay(paymentToken?: string): boolean {\n        return !!paymentToken;\n    }\n}\n","import { AmazonPayAdditionalActionErrorBody } from './amazon-pay-v2';\n\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\nexport function isAmazonPayAdditionalActionErrorBody(\n    errorBody: unknown,\n): errorBody is AmazonPayAdditionalActionErrorBody {\n    return (\n        typeof errorBody === 'object' &&\n        errorBody !== null &&\n        'status' in errorBody &&\n        'additional_action_required' in errorBody &&\n        (errorBody as AmazonPayAdditionalActionErrorBody).status === 'additional_action_required' &&\n        'data' in (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required &&\n        'redirect_url' in\n            (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required.data &&\n        typeof (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required.data\n            .redirect_url === 'string'\n    );\n}\n/* eslint-enable @typescript-eslint/consistent-type-assertions */\n","import { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2PaymentStrategy from './amazon-pay-v2-payment-strategy';\n\nconst createAmazonPayV2PaymentStrategy: PaymentStrategyFactory<AmazonPayV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AmazonPayV2PaymentStrategy(\n        paymentIntegrationService,\n        createAmazonPayV2PaymentProcessor(),\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2PaymentStrategy, [{ id: 'amazonpay' }]);\n","import {\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    NotImplementedError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithAmazonPayV2CustomerInitializeOptions } from './amazon-pay-v2-customer-initialize-options';\n\nexport default class AmazonPayV2CustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithAmazonPayV2CustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId || !amazonpay?.container) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        let paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>;\n\n        try {\n            paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        }\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this.paymentIntegrationService.getState(),\n            containerId: amazonpay.container,\n            methodId,\n            placement: AmazonPayV2Placement.Checkout,\n        });\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via Amazon, the shopper must click on \"Amazon Pay\" button.',\n        );\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const payment = state.getPaymentId();\n\n        if (!payment) {\n            return;\n        }\n\n        await this.amazonPayV2PaymentProcessor.signout();\n        await this.paymentIntegrationService.remoteCheckoutSignOut(payment.providerId, options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n}\n","import { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2CustomerStrategy from './amazon-pay-v2-customer-strategy';\n\nconst createAmazonPayV2CustomerStrategy: CustomerStrategyFactory<AmazonPayV2CustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AmazonPayV2CustomerStrategy(\n        paymentIntegrationService,\n        createAmazonPayV2PaymentProcessor(),\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2CustomerStrategy, [{ id: 'amazonpay' }]);\n","import { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class AmazonPayV2ConfigCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during config creation process. Please try again later.',\n        );\n\n        this.name = 'AmazonPayV2ConfigCreationError';\n        this.type = 'amazon_pay_v2_config_creation_error';\n    }\n}\n","import { WithBuyNowFeature } from './amazon-pay-v2-button-options';\n\nexport function isWithBuyNowFeatures(options: unknown): options is WithBuyNowFeature {\n    if (!(options instanceof Object)) {\n        return false;\n    }\n\n    return 'buyNowInitializeOptions' in options;\n}\n","import {\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    BuyNowCartCreationError,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    getShippableItemsCount,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    WithAmazonPayV2ButtonInitializeOptions,\n    WithBuyNowFeature,\n} from './amazon-pay-v2-button-options';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\nimport AmazonPayV2ConfigCreationError from './errors/amazon-pay-v2-config-creation-error';\nimport { isWithBuyNowFeatures } from './isWithBuyNowFeatures';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowInitializeOptions: WithBuyNowFeature['buyNowInitializeOptions'];\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private amazonPayV2ConfigRequestSender: AmazonPayV2RequestSender,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithAmazonPayV2ButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n        const { buttonColor } = amazonpay || {};\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n\n        const paymentMethod = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const { initializationData } = paymentMethod;\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (!amazonpay) {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const initializeAmazonButtonOptions = isWithBuyNowFeatures(amazonpay)\n            ? undefined\n            : amazonpay;\n\n        if (\n            isWithBuyNowFeatures(amazonpay) &&\n            typeof amazonpay.buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n        ) {\n            this._buyNowInitializeOptions = amazonpay.buyNowInitializeOptions;\n            this.amazonPayV2PaymentProcessor.updateBuyNowFlowFlag(true);\n        }\n\n        this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this.paymentIntegrationService.getState(),\n            containerId,\n            methodId,\n            options: initializeAmazonButtonOptions,\n            placement: AmazonPayV2Placement.Cart,\n            buttonColor,\n            isButtonMicroTextDisabled: initializationData?.isButtonMicroTextDisabled,\n        });\n\n        if (this._buyNowInitializeOptions) {\n            this.amazonPayV2PaymentProcessor.prepareCheckoutWithCreationRequestConfig(\n                this._getCheckoutCreationRequestConfig.bind(this),\n            );\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return this.amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    private async _createBuyNowCartOrThrow() {\n        const buyNowCartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n        if (!buyNowCartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                buyNowCartRequestBody,\n            );\n\n            return buyNowCart;\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private async _createCheckoutConfig(\n        id: string,\n    ): Promise<Required<AmazonPayV2CheckoutSessionConfig>> {\n        try {\n            const {\n                body: { payload, public_key, ...rest },\n            } = await this.amazonPayV2ConfigRequestSender.createCheckoutConfig(id);\n\n            return {\n                payloadJSON: payload,\n                publicKeyId: public_key,\n                ...rest,\n            };\n        } catch (error) {\n            throw new AmazonPayV2ConfigCreationError();\n        }\n    }\n\n    private async _getCheckoutCreationRequestConfig() {\n        const buyNowCart = await this._createBuyNowCartOrThrow();\n        const estimatedOrderAmount = {\n            amount: String(buyNowCart.baseAmount),\n            currencyCode: buyNowCart.currency.code,\n        };\n        const createCheckoutSessionConfig = await this._createCheckoutConfig(buyNowCart.id);\n\n        return {\n            createCheckoutSessionConfig,\n            estimatedOrderAmount,\n            productType:\n                getShippableItemsCount(buyNowCart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface CheckoutConfig {\n    payload: string;\n    signature: string;\n    public_key: string;\n}\n\nexport default class AmazonPayV2RequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createCheckoutConfig(cartId: string): Promise<Response<CheckoutConfig>> {\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post('/api/storefront/payment/amazonpay', { headers, body });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2ButtonStrategy from './amazon-pay-v2-button-strategy';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\n\nconst createAmazonPayV2ButtonStrategy: CheckoutButtonStrategyFactory<AmazonPayV2ButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n    const amazonPayV2RequestSender = new AmazonPayV2RequestSender(requestSender);\n    const amazonPayV2PaymentProcessor = createAmazonPayV2PaymentProcessor();\n\n    return new AmazonPayV2ButtonStrategy(\n        paymentIntegrationService,\n        amazonPayV2PaymentProcessor,\n        amazonPayV2RequestSender,\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2ButtonStrategy, [{ id: 'amazonpay' }]);\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n    nonce?: string;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    preventCursorJumps?: boolean;\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","export const BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION = '3.128.0';\nexport const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n    [BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh',\n        [BraintreeModuleName.Paypal]:\n            'sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv',\n        [BraintreeModuleName.Venmo]:\n            'sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr',\n    },\n};\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5809.braintree_hosted_fields_fix_version')) {\n            return BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","import {\n    PaymentInstrumentPayload,\n    WithBankAccountInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isUsBankAccountInstrumentLike(\n    instrument?: PaymentInstrumentPayload,\n): instrument is WithBankAccountInstrument {\n    if (!instrument) {\n        return false;\n    }\n\n    return (\n        'accountNumber' in instrument &&\n        'routingNumber' in instrument &&\n        'ownershipType' in instrument &&\n        'accountType' in instrument\n    );\n}\n","import {\n    BraintreeInitializationData,\n    BraintreeSdk,\n    BraintreeUsBankAccount,\n    BraintreeUsBankAccountDetails,\n    isBraintreeError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    WithBankAccountInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isUsBankAccountInstrumentLike from '../is-us-bank-account-instrument-like';\n\nimport { WithBraintreeAchPaymentInitializeOptions } from './braintree-ach-initialize-options';\n\nexport default class BraintreeAchPaymentStrategy implements PaymentStrategy {\n    private usBankAccount?: BraintreeUsBankAccount;\n    private getMandateText?: () => string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeAchPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, braintreeach } = options || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.getMandateText = braintreeach?.getMandateText;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        try {\n            this.usBankAccount = await this.braintreeSdk.getUsBankAccount();\n        } catch (error) {\n            this.handleBraintreeError(error);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const isSubmittingWithVaultingInstrument = isVaultedInstrument(payment.paymentData || {});\n\n        const nonce = isSubmittingWithVaultingInstrument\n            ? await this.tokenizePaymentForVaultedInstrument(payment)\n            : await this.tokenizePayment(payment);\n\n        const submitPaymentPayload = isSubmittingWithVaultingInstrument\n            ? await this.preparePaymentDataForVaultedInstrument(nonce, payment)\n            : await this.preparePaymentData(nonce, payment);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this.paymentIntegrationService.submitPayment(submitPaymentPayload);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private async tokenizePayment({ paymentData }: OrderPaymentRequestBody): Promise<string> {\n        const usBankAccount = this.getUsBankAccountOrThrow();\n\n        if (!isUsBankAccountInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const mandateText = isVaultedInstrument(paymentData)\n            ? 'The data are used for stored instrument verification'\n            : typeof this.getMandateText === 'function' && this.getMandateText();\n\n        if (!mandateText) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because getMandateText is not provided or returned undefined value.',\n            );\n        }\n\n        try {\n            const { nonce } = await usBankAccount.tokenize({\n                bankDetails: this.getBankDetails(paymentData),\n                mandateText,\n            });\n\n            return nonce;\n        } catch (error) {\n            this.handleBraintreeError(error);\n        }\n    }\n\n    private async tokenizePaymentForVaultedInstrument(\n        payment: OrderPaymentRequestBody,\n    ): Promise<string | null> {\n        const { methodId, paymentData = {} } = payment;\n\n        const state = this.paymentIntegrationService.getState();\n        const { config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!config.isVaultingEnabled) {\n            throw new InvalidArgumentError(\n                'Vaulting is disabled but a vaulted instrument was being used for this transaction',\n            );\n        }\n\n        const shouldVerifyVaultingInstrument = isUsBankAccountInstrumentLike(paymentData);\n\n        return shouldVerifyVaultingInstrument ? this.tokenizePayment(payment) : null;\n    }\n\n    private async preparePaymentData(\n        nonce: string | null,\n        payment: OrderPaymentRequestBody,\n    ): Promise<Payment> {\n        const { methodId, paymentData = {} } = payment;\n\n        if (!isUsBankAccountInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument, routingNumber, accountNumber } =\n            paymentData;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId: deviceData,\n                shouldSetAsDefaultInstrument,\n                shouldSaveInstrument,\n                formattedPayload: {\n                    tokenized_bank_account: {\n                        issuer: routingNumber,\n                        masked_account_number: accountNumber.substr(-4),\n                        token: nonce,\n                    },\n                },\n            },\n        };\n    }\n\n    private async preparePaymentDataForVaultedInstrument(\n        nonce: string | null,\n        payment: OrderPaymentRequestBody,\n    ): Promise<Payment> {\n        const { methodId, paymentData = {} } = payment;\n\n        if (!isVaultedInstrument(paymentData) || !isHostedInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { instrumentId, shouldSetAsDefaultInstrument } = paymentData;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId: deviceData,\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n                ...(nonce && { nonce }),\n            },\n        };\n    }\n\n    private getBankDetails(paymentData: WithBankAccountInstrument): BraintreeUsBankAccountDetails {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n\n        const ownershipType = paymentData.ownershipType.toLowerCase();\n        const accountType = paymentData.accountType.toLowerCase();\n\n        return {\n            accountNumber: paymentData.accountNumber,\n            routingNumber: paymentData.routingNumber,\n            ownershipType,\n            ...(ownershipType === 'personal'\n                ? {\n                      firstName: paymentData.firstName,\n                      lastName: paymentData.lastName,\n                  }\n                : {\n                      businessName: paymentData.businessName,\n                  }),\n            accountType,\n            billingAddress: {\n                streetAddress: billingAddress.address1,\n                extendedAddress: billingAddress.address2,\n                locality: billingAddress.city,\n                region: billingAddress.stateOrProvinceCode,\n                postalCode: billingAddress.postalCode,\n            },\n        };\n    }\n\n    private getUsBankAccountOrThrow(): BraintreeUsBankAccount {\n        if (!this.usBankAccount) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.usBankAccount;\n    }\n\n    private handleBraintreeError(error: unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n}\n","import { createBraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeAchPaymentStrategy from './braintree-ach-payment-strategy';\n\nconst createBraintreeAchPaymentStrategy: PaymentStrategyFactory<BraintreeAchPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new BraintreeAchPaymentStrategy(\n        paymentIntegrationService,\n        createBraintreeSdk(paymentIntegrationService),\n    );\n};\n\nexport default toResolvableModule(createBraintreeAchPaymentStrategy, [{ id: 'braintreeach' }]);\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSdk from './braintree-sdk';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\n\nconst createBraintreeSdk = (paymentIntegrationService: PaymentIntegrationService) => {\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        getScriptLoader(),\n        window,\n        braintreeSDKVersionManager,\n    );\n\n    return new BraintreeSdk(braintreeScriptLoader);\n};\n\nexport default createBraintreeSdk;\n","// the PayPal side of things uses uppercase keys instead of camel case\n\n/**\n *\n * PayPal constants\n *\n */\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\n\nexport enum PaypalButtonStyleLayoutOption {\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nexport enum PaypalButtonStyleSizeOption {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n    RESPONSIVE = 'responsive',\n}\n\nexport enum PaypalButtonStyleColorOption {\n    GOLD = 'gold',\n    BLUE = 'blue',\n    SIlVER = 'silver',\n    BLACK = 'black',\n    WHITE = 'white',\n}\n\nexport enum PaypalButtonStyleLabelOption {\n    CHECKOUT = 'checkout',\n    PAY = 'pay',\n    BUYNOW = 'buynow',\n    PAYPAL = 'paypal',\n    CREDIT = 'credit',\n}\n\nexport enum PaypalButtonStyleShapeOption {\n    PILL = 'pill',\n    RECT = 'rect',\n}\n\n/**\n *\n * PayPal interfaces\n *\n */\nexport interface PaypalSDK {\n    Button: PaypalButton;\n    checkout: PaypalExpressCheckout;\n    FUNDING: PaypalFundingTypeList;\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\n    Messages(options: MessagingOptions): MessagingRender;\n}\n\nexport interface PaypalButton {\n    render(options: PaypalButtonOptions, container: string): void;\n}\n\nexport interface PaypalExpressCheckout {\n    initXO(): void;\n    startFlow(url: string): void;\n    closeFlow(): void;\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\n}\n\nexport interface PaypalExpressCheckoutOptions {\n    button: string;\n    environment: string;\n}\n\nexport interface MessagingOptions {\n    amount: number;\n    buyerCountry?: string;\n    placement: string;\n    style?: MessagesStyleOptions;\n}\n\nexport interface MessagesStyleOptions {\n    color?: string; // 'blue' | 'black' | 'white' | 'white-no-border' | 'gray' | 'monochrome' | 'grayscale'\n    layout?: string; // 'text' | 'flex'\n    logo?: {\n        type?: string; // 'primary' | 'alternative' | 'inline' | 'none'\n        position?: string; // 'left' | 'right' | 'top'\n    };\n    ratio?: string; // '1x1' | '1x4' | '8x1' | '20x1'\n    text?: {\n        align?: string; // 'left' | 'right' | 'center'\n        color?: string; // 'black' | 'white' | 'monochrome' | 'grayscale'\n        size?: number; // from 10 to 16\n    };\n}\n\nexport enum MessagingPlacements {\n    CART = 'cart',\n    HOME = 'homepage',\n    PAYMENT = 'payment',\n    PRODUCT = 'product',\n}\n\nexport interface MessagingRender {\n    render(container: string): void;\n}\n\nexport interface PaypalButtonOptions {\n    env?: string;\n    commit?: boolean;\n    style?: PaypalStyleOptions;\n    funding?: PaypalFundingType;\n    fundingSource?: string;\n    client?: PaypalClientToken;\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<unknown>;\n    onClick?(): void;\n    onCancel?(): void;\n    onError?(error: Error): void;\n}\n\nexport interface PaypalStyleOptions {\n    layout?: PaypalButtonStyleLayoutOption;\n    size?: PaypalButtonStyleSizeOption;\n    color?: PaypalButtonStyleColorOption;\n    label?: PaypalButtonStyleLabelOption;\n    shape?: PaypalButtonStyleShapeOption;\n    tagline?: boolean;\n    fundingicons?: boolean;\n    height?: number | string;\n}\n\nexport interface PaypalClientToken {\n    production?: string;\n    sandbox?: string;\n}\n\nexport interface PaypalFundingType {\n    allowed?: string[];\n    disallowed?: string[];\n}\n\nexport interface PaypalActions {\n    payment: PaypalPaymentActions;\n    request: PaypalRequestActions;\n}\n\nexport interface PaypalButtonRender {\n    render(container: string): void;\n    isEligible(): boolean;\n    close(): void;\n}\n\nexport interface PaypalAuthorizeData {\n    payerId: string;\n    paymentId?: string;\n    billingToken?: string;\n    payerID?: string;\n    paymentID?: string;\n}\n\nexport interface PaypalFundingTypeList {\n    CARD?: string;\n    CREDIT?: string;\n    PAYPAL?: string;\n    PAYLATER?: string;\n}\n\nexport interface PaypalPaymentActions {\n    get(id: string): Promise<unknown>;\n}\n\nexport interface PaypalRequestActions {\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\n}\n","import { supportsPopups } from '@braintree/browser-detection';\n\nimport {\n    Address,\n    CancellablePromise,\n    CreditCardInstrument,\n    LegacyAddress,\n    NonceInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethodCancelledError,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeDataCollectors,\n    BraintreeEnv,\n    BraintreeError,\n    BraintreeFastlane,\n    BraintreeFastlaneStylesOption,\n    BraintreeHostWindow,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeRequestData,\n    BraintreeShippingAddressOverride,\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureOptions,\n    BraintreeTokenizationDetails,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig,\n    BraintreeVerifyPayload,\n    PAYPAL_COMPONENTS,\n    TokenizationPayload,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { isEmpty } from 'lodash';\nimport isCreditCardInstrumentLike from './utils/is-credit-card-instrument-like';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\n// Info: this class is deprecated and will be removed in a nearest future. Please, do not add anything here.\nexport default class BraintreeIntegrationService {\n    private client?: Promise<BraintreeClient>;\n    private clientToken?: string;\n    private dataCollectors: BraintreeDataCollectors = {};\n    private paypalCheckout?: BraintreePaypalCheckout;\n    private braintreePaypal?: Promise<BraintreePaypal>;\n    private threeDSecureOptions?: BraintreeThreeDSecureOptions;\n    private threeDS?: Promise<BraintreeThreeDSecure>;\n    private venmoCheckout?: BraintreeVenmoCheckout;\n\n    constructor(\n        private braintreeScriptLoader: BraintreeScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private overlay?: Overlay,\n    ) {}\n\n    initialize(clientToken: string, threeDSecureOptions?: BraintreeThreeDSecureOptions) {\n        this.clientToken = clientToken;\n        this.threeDSecureOptions = threeDSecureOptions;\n    }\n\n    async getBraintreeFastlane(\n        cardId?: string,\n        isTestModeEnabled?: boolean,\n        styles?: BraintreeFastlaneStylesOption,\n    ): Promise<BraintreeFastlane> {\n        if (isTestModeEnabled) {\n            window.localStorage.setItem('axoEnv', 'sandbox');\n            window.localStorage.setItem('fastlaneEnv', 'sandbox');\n        }\n\n        if (!this.braintreeHostWindow.braintreeFastlane) {\n            const clientToken = this.getClientTokenOrThrow();\n            const client = await this.getClient();\n            const deviceData = await this.getSessionId(cardId);\n\n            const braintreeFastlaneCreator = await this.braintreeScriptLoader.loadFastlane();\n\n            const defaultStyles = {\n                root: {\n                    backgroundColorPrimary: 'transparent',\n                },\n            };\n\n            this.braintreeHostWindow.braintreeFastlane = await braintreeFastlaneCreator.create({\n                authorization: clientToken,\n                client,\n                deviceData,\n                styles: styles || defaultStyles,\n            });\n        }\n\n        return this.braintreeHostWindow.braintreeFastlane;\n    }\n\n    // Info: This method is deprecated. Use getClient method from BraintreeSdk class instead\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this.braintreePaypal) {\n            this.braintreePaypal = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadPaypal(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.braintreePaypal;\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        const newWindowFlow = supportsPopups();\n\n        return this.getPaypal()\n            .then((paypal) => {\n                if (newWindowFlow) {\n                    this.overlay?.show({\n                        onClick: () => paypal.focusWindow(),\n                    });\n                }\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then((response) => {\n                this.overlay?.remove();\n\n                return response;\n            })\n            .catch((error) => {\n                this.overlay?.remove();\n\n                throw error;\n            });\n    }\n\n    async getPaypalCheckout(\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\n        onError: (error: BraintreeError) => void,\n    ): Promise<BraintreePaypalCheckout> {\n        const client = await this.getClient();\n        const paypalCheckout = await this.braintreeScriptLoader.loadPaypalCheckout();\n\n        const paypalCheckoutConfig = { client };\n        const paypalCheckoutCallback = (\n            error: BraintreeError | undefined,\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (error) {\n                return onError(error);\n            }\n\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\n            const paypalSdkLoadConfig = {\n                currency: config.currency,\n                ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\n                components: PAYPAL_COMPONENTS.toString(),\n                intent: config.intent,\n                commit: config.commit ?? true,\n            };\n\n            if (!this.braintreeHostWindow.paypal) {\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\n            } else {\n                onSuccess(braintreePaypalCheckout);\n            }\n        };\n\n        this.paypalCheckout = await paypalCheckout.create(\n            paypalCheckoutConfig,\n            paypalCheckoutCallback,\n        );\n\n        return this.paypalCheckout;\n    }\n\n    async getDataCollector(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const cacheKey: keyof BraintreeDataCollectors = options?.paypal ? 'paypal' : 'default';\n\n        let cached = this.dataCollectors[cacheKey];\n\n        if (!cached) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                cached = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    cached = {\n                        deviceData: undefined,\n                        teardown: () => Promise.resolve(),\n                    };\n                } else {\n                    throw error;\n                }\n            }\n\n            this.dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getBraintreeEnv(isTestMode = false): BraintreeEnv {\n        return isTestMode ? BraintreeEnv.Sandbox : BraintreeEnv.Production;\n    }\n\n    mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n        return {\n            recipientName: `${address.firstName} ${address.lastName}`,\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n        };\n    }\n\n    mapToLegacyShippingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { email, phone, shippingAddress } = details;\n        const recipientName = shippingAddress?.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email,\n            first_name: firstName || '',\n            last_name: lastName || '',\n            phone_number: phone,\n            address_line_1: shippingAddress?.line1,\n            address_line_2: shippingAddress?.line2,\n            city: shippingAddress?.city,\n            state: shippingAddress?.state,\n            country_code: shippingAddress?.countryCode,\n            postal_code: shippingAddress?.postalCode,\n        };\n    }\n\n    mapToLegacyBillingAddress(details: BraintreeTokenizationDetails): Partial<LegacyAddress> {\n        const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n        const address = billingAddress || shippingAddress;\n\n        return {\n            email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: phone,\n            address_line_1: address?.line1,\n            address_line_2: address?.line2,\n            city: address?.city,\n            state: address?.state,\n            country_code: address?.countryCode,\n            postal_code: address?.postalCode,\n        };\n    }\n\n    removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    async getSessionId(cartId?: string): Promise<string | undefined> {\n        const { deviceData } = await this.getDataCollector({\n            riskCorrelationId: cartId,\n        });\n\n        return deviceData;\n    }\n\n    async teardown(): Promise<void> {\n        await this.teardownModule(this.dataCollectors.default);\n        await this.teardownModule(this.dataCollectors.paypal);\n        this.dataCollectors = {};\n\n        await this.teardownModule(this.paypalCheckout);\n        this.paypalCheckout = undefined;\n\n        // await this.teardownModule(this._venmoCheckout);\n        // this._venmoCheckout = undefined;\n\n        // await this.teardownModule(this._visaCheckout);\n        // this._visaCheckout = undefined;\n    }\n\n    async get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            this.threeDS = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]).then(([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }));\n        }\n\n        return this.threeDS;\n    }\n\n    async getVenmoCheckout(\n        venmoConfig?: BraintreeVenmoCreatorConfig,\n    ): Promise<BraintreeVenmoCheckout> {\n        if (!this.venmoCheckout) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n                ...(venmoConfig || {}),\n            };\n\n            this.venmoCheckout = await new Promise<BraintreeVenmoCheckout>((resolve, reject) => {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                venmoCheckout.create(\n                    venmoCheckoutConfig,\n                    (error: BraintreeError, braintreeVenmoCheckout: BraintreeVenmoCheckout) => {\n                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                        if (error) {\n                            return reject(error);\n                        }\n\n                        if (!braintreeVenmoCheckout.isBrowserSupported()) {\n                            return reject(new UnsupportedBrowserError());\n                        }\n\n                        resolve(braintreeVenmoCheckout);\n                    },\n                );\n            });\n        }\n\n        return this.venmoCheckout;\n    }\n\n    /*\n       Braintree Credit Card and Braintree Hosted Form\n   */\n    async verifyCard(\n        payment: Payment,\n        billingAddress: Address,\n        amount: number,\n    ): Promise<NonceInstrument> {\n        const tokenizationPayload = await this.tokenizeCard(payment, billingAddress);\n\n        return this.challenge3DSVerification(tokenizationPayload, amount);\n    }\n\n    async tokenizeCard(payment: Payment, billingAddress: Address): Promise<TokenizationPayload> {\n        const { paymentData } = payment;\n\n        if (!isCreditCardInstrumentLike(paymentData)) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const errors = this.getErrorsRequiredFields(paymentData);\n\n        if (!isEmpty(errors)) {\n            throw new PaymentInvalidFormError(errors);\n        }\n\n        const requestData = this.mapToCreditCard(paymentData, billingAddress);\n        const client = await this.getClient();\n        const { creditCards } = await client.request(requestData);\n\n        return {\n            nonce: creditCards[0].nonce,\n            bin: creditCards[0].details.bin,\n        };\n    }\n\n    async challenge3DSVerification(\n        tokenizationPayload: TokenizationPayload,\n        amount: number,\n    ): Promise<BraintreeVerifyPayload> {\n        const threeDSecure = await this.get3DS();\n\n        return this.present3DSChallenge(threeDSecure, amount, tokenizationPayload);\n    }\n\n    private teardownModule(module?: BraintreeModule) {\n        return module ? module.teardown() : Promise.resolve();\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private getErrorsRequiredFields(\n        paymentData: CreditCardInstrument,\n    ): PaymentInvalidFormErrorDetails {\n        const { ccNumber, ccExpiry } = paymentData;\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        if (!ccNumber) {\n            errors.ccNumber = [\n                {\n                    message: 'Credit card number is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (!ccExpiry) {\n            errors.ccExpiry = [\n                {\n                    message: 'Expiration date is required',\n                    type: 'required',\n                },\n            ];\n        }\n\n        return errors;\n    }\n\n    private mapToCreditCard(\n        creditCard: CreditCardInstrument,\n        billingAddress?: Address,\n    ): BraintreeRequestData {\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: billingAddress && {\n                        countryCodeAlpha2: billingAddress.countryCode,\n                        locality: billingAddress.city,\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress: billingAddress.address2\n                            ? `${billingAddress.address1} ${billingAddress.address2}`\n                            : billingAddress.address1,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n\n    private present3DSChallenge(\n        threeDSecure: BraintreeThreeDSecure,\n        amount: number,\n        tokenizationPayload: TokenizationPayload,\n    ): Promise<BraintreeVerifyPayload> {\n        const { nonce, bin } = tokenizationPayload;\n\n        if (!this.threeDSecureOptions || !nonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            addFrame,\n            removeFrame,\n            challengeRequested = true,\n            additionalInformation,\n        } = this.threeDSecureOptions;\n        const cancelVerifyCard = async () => {\n            const response = await threeDSecure.cancelVerifyCard();\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            verification.cancel(new PaymentMethodCancelledError());\n\n            return response;\n        };\n\n        const roundedAmount = amount.toFixed(2);\n\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                addFrame: (error, iframe) => {\n                    if (addFrame) {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    }\n                },\n                amount: Number(roundedAmount),\n                bin,\n                challengeRequested,\n                nonce,\n                removeFrame,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n                collectDeviceData: true,\n                additionalInformation,\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import { CreditCardInstrument } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isCreditCardInstrumentLike(\n    instrument: unknown,\n): instrument is CreditCardInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const creditCardInstrument = instrument as Partial<Record<string, unknown>>;\n\n    return (\n        typeof creditCardInstrument.ccExpiry === 'object' &&\n        creditCardInstrument.ccExpiry !== null &&\n        typeof creditCardInstrument.ccNumber === 'string' &&\n        typeof creditCardInstrument.ccName === 'string'\n    );\n}\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    PayPalBNPLConfigurationItem,\n} from './braintree';\nimport { MessagesStyleOptions, MessagingPlacements } from './paypal';\n\nexport default class BraintreeMessages {\n    private braintreeHostWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    render(methodId: string, containerId: string, placement: MessagingPlacements): void {\n        const messagingContainer = containerId && document.getElementById(containerId);\n\n        if (this.braintreeHostWindow.paypal && messagingContainer) {\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const billingAddress = state.getBillingAddressOrThrow();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n            if (!paymentMethod.initializationData) {\n                return;\n            }\n\n            const { paypalBNPLConfiguration = [] } = paymentMethod.initializationData;\n\n            const bannedId = placement === MessagingPlacements.PAYMENT ? 'checkout' : placement;\n            const bannerConfiguration =\n                paypalBNPLConfiguration &&\n                paypalBNPLConfiguration.find(({ id }) => id === bannedId);\n\n            if (!bannerConfiguration || !bannerConfiguration.status) {\n                return;\n            }\n\n            // TODO: remove this code when this data attributes will be removed from banner div container in content service\n            if (placement === MessagingPlacements.CART) {\n                messagingContainer.removeAttribute('data-pp-style-logo-type');\n                messagingContainer.removeAttribute('data-pp-style-logo-position');\n                messagingContainer.removeAttribute('data-pp-style-text-color');\n                messagingContainer.removeAttribute('data-pp-style-text-size');\n            }\n\n            this.braintreeHostWindow.paypal\n                .Messages({\n                    amount: cart.cartAmount,\n                    buyerCountry: billingAddress.countryCode,\n                    placement,\n                    style: this.getPaypalMessagesStylesFromBNPLConfig(bannerConfiguration),\n                })\n                .render(`#${containerId}`);\n        }\n    }\n\n    private getPaypalMessagesStylesFromBNPLConfig({\n        styles,\n    }: PayPalBNPLConfigurationItem): MessagesStyleOptions {\n        const messagesStyles: MessagesStyleOptions = {};\n\n        if (styles.color) {\n            messagesStyles.color = styles.color;\n        }\n\n        if (styles.layout) {\n            messagesStyles.layout = styles.layout;\n        }\n\n        if (styles['logo-type'] || styles['logo-position']) {\n            messagesStyles.logo = {};\n\n            if (styles['logo-type']) {\n                messagesStyles.logo.type = styles['logo-type'];\n            }\n\n            if (styles['logo-position']) {\n                messagesStyles.logo.position = styles['logo-position'];\n            }\n        }\n\n        if (styles.ratio) {\n            messagesStyles.ratio = styles.ratio;\n        }\n\n        if (styles['text-color'] || styles['text-size']) {\n            messagesStyles.text = {};\n\n            if (styles['text-color']) {\n                messagesStyles.text.color = styles['text-color'];\n            }\n\n            if (styles['text-size']) {\n                messagesStyles.text.size = +styles['text-size'];\n            }\n        }\n\n        return messagesStyles;\n    }\n}\n","import getOverlayStyle from './overlay-style';\n\nexport interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    hasCloseButton?: boolean;\n    innerHtml?: HTMLElement | DocumentFragment;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n    onClickClose?(event: MouseEvent): void;\n}\n\nexport interface Elements {\n    element: HTMLElement;\n    mainElement: HTMLElement;\n    closeElement?: HTMLElement;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _mainElement: HTMLElement;\n    private _closeElement?: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        const { element, closeElement, mainElement } = this._createElements(options);\n\n        this._element = element;\n        this._closeElement = closeElement;\n        this._mainElement = mainElement;\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._mainElement.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._mainElement);\n\n        // Fade In\n        setTimeout(() => (this._element.style.opacity = '1'));\n    }\n\n    remove(): void {\n        if (!this._mainElement.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => (this._element.style.opacity = '0'));\n    }\n\n    private _createElements(options?: OverlayOptions): Elements {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = 'checkoutOverlay',\n            transitionDuration = 400,\n            hasCloseButton = false,\n            innerHtml = null,\n        } = options || {};\n        let mainElement = element;\n        let closeElement: HTMLElement | undefined;\n        let classLayout: string | undefined;\n        let classClose: string | undefined;\n        let classOverlayText: string | undefined;\n\n        if (id) {\n            element.id = id;\n        }\n\n        if (innerHtml) {\n            const overlayText = document.createElement('div');\n\n            classOverlayText = `${id}--overlayText`;\n            overlayText.className = classOverlayText;\n            overlayText.appendChild(innerHtml);\n\n            element.appendChild(overlayText);\n        }\n\n        if (hasCloseButton) {\n            classClose = `${id}--close`;\n            closeElement = document.createElement('div');\n            closeElement.className = classClose;\n\n            classLayout = `${id}--layout`;\n            mainElement = document.createElement('div');\n            mainElement.className = classLayout;\n\n            mainElement.appendChild(element);\n            mainElement.appendChild(closeElement);\n        }\n\n        mainElement.appendChild(\n            getOverlayStyle({\n                id,\n                background,\n                transitionDuration,\n                classLayout,\n                classOverlayText,\n                classClose,\n            }),\n        );\n\n        return { element, closeElement, mainElement };\n    }\n\n    private _addEventListener(element?: HTMLElement, onClick?: (event: MouseEvent) => void): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.addEventListener('click', onClick);\n    }\n\n    private _removeEventListener(\n        element?: HTMLElement,\n        onClick?: (event: MouseEvent) => void,\n    ): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.removeEventListener('click', onClick);\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options) {\n            const { onClick, onClickClose } = options;\n\n            this._addEventListener(this._element, onClick);\n            this._addEventListener(this._closeElement, onClickClose);\n\n            this._unregisterClick = () => {\n                this._removeEventListener(this._element, onClick);\n                this._removeEventListener(this._closeElement, onClickClose);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handleTransition: (event: Event) => void = (event) => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._mainElement.parentElement) {\n                this._mainElement.remove();\n            }\n\n            this._element.removeEventListener('transitionend', handleTransition);\n        };\n\n        this._element.addEventListener('transitionend', handleTransition);\n    }\n}\n","interface OverlayStyleOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    classLayout?: string;\n    classOverlayText?: string;\n    classClose?: string;\n}\n\nexport default function getOverlayStyle(options: OverlayStyleOptions): HTMLElement {\n    const { id, background, transitionDuration, classLayout, classOverlayText, classClose } =\n        options;\n    const styles = document.createElement('style');\n    const addClassLayout = classLayout ? `, .${classLayout}` : '';\n\n    styles.id = `${id}--styles`;\n    styles.type = 'text/css';\n    styles.innerText = `\n        #${id}${addClassLayout} {\n            display: block;\n            height: 100%;\n            width: 100%;\n            left: 0;\n            top: 0;\n            position: fixed;\n            z-index: 2147483647;\n        }\n        #${id} {\n            transition: opacity ${transitionDuration}ms ease-out;\n            background: ${background};\n            opacity: 0;\n        }\n    `;\n\n    if (classOverlayText) {\n        styles.innerText += `\n             #${id} {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n             }\n             #${id} .${classOverlayText} {\n                color: white;\n                max-width: 330px;\n                font-size: 1.2em;\n                text-align: center;\n             }\n        `;\n    }\n\n    if (classClose) {\n        styles.innerText += `\n            #${id} {\n                opacity: 1;\n            }\n            .${classLayout} .${classClose} {\n                position: fixed;\n                right: 16px;\n                top: 16px;\n                width: 16px;\n                height: 16px;\n                opacity: 0.6;\n                cursor: pointer;\n                z-index: 3147483647;\n            }\n            .${classLayout} .${classClose}::after, .${classLayout} .${classClose}::before {\n                position: absolute;\n                left: 8px;\n                content: '';\n                height: 16px;\n                width: 2px;\n                background-color: #fff;\n            }\n            .${classLayout} .${classClose}::after {\n                transform: rotate(-45deg);\n            }\n            .${classLayout} .${classClose}::before {\n                transform: rotate(45deg);\n            }\n        `;\n    }\n\n    return styles;\n}\n","export const LOADING_INDICATOR_STYLES = {\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n","import { BraintreeError } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function isBraintreeError(\n    error: BraintreeError | Error | unknown,\n): error is BraintreeError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'name' in error &&\n        (error as BraintreeError).name === 'BraintreeError'\n    );\n}\n","import { BraintreeShippingAddressOverride } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function mapToBraintreeShippingAddressOverride(\n    address: Address,\n): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    MessagingPlacements,\n    PaypalAuthorizeData,\n    PaypalButtonRender,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    FormattedPayload,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isHostedVaultedInstrument,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    PaypalInstrument,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport isBraintreeError from '../is-braintree-error';\nimport isBraintreePaypalProviderError from '../is-braintree-paypal-provider-error';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport {\n    BraintreePaypalPaymentInitializeOptions,\n    WithBraintreePaypalPaymentInitializeOptions,\n} from './braintree-paypal-payment-initialize-options';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private paymentMethod?: PaymentMethod<BraintreeInitializationData>;\n    private braintreeHostWindow: BraintreeHostWindow = window;\n    private braintree?: BraintreePaypalPaymentInitializeOptions;\n    private braintreeTokenizePayload?: BraintreeTokenizePayload;\n    private paypalButtonRender?: PaypalButtonRender;\n    private loadingIndicatorContainer?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeMessages: BraintreeMessages,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreePaypalPaymentInitializeOptions,\n    ) {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this.braintree = braintreeOptions;\n\n        if (!this.paymentMethod || !this.paymentMethod.nonce) {\n            this.paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        }\n\n        if (this.paymentMethod.clientToken && braintreeOptions?.bannerContainerId) {\n            await this.loadPaypal();\n\n            return this.loadPaypalCheckoutInstance();\n        }\n\n        if (this.paymentMethod.clientToken) {\n            return this.loadPaypal();\n        }\n\n        const state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (braintreeOptions?.bannerContainerId) {\n            return this.loadPaypalCheckoutInstance();\n        }\n\n        if (!this.paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this.loadPaypal();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        const { onError } = this.braintree || {};\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            const paymentData = await this.preparePaymentData(payment, order.useStoreCredit);\n\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment(paymentData);\n        } catch (error) {\n            if (this.isProviderError(error)) {\n                await this.loadPaypal();\n\n                this.paypalButtonRender?.close();\n\n                await this.loadPaypalCheckoutInstance();\n\n                await new Promise((_resolve, reject) => {\n                    if (onError && typeof onError === 'function') {\n                        onError(new Error('INSTRUMENT_DECLINED'));\n                    }\n\n                    reject();\n                });\n            }\n\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.braintreeTokenizePayload = undefined;\n\n        this.paypalButtonRender?.close();\n\n        return this.braintreeIntegrationService.teardown();\n    }\n\n    private async preparePaymentData(\n        payment: OrderPaymentRequestBody,\n        useStoreCredit?: boolean,\n    ): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n\n        const grandTotal = state.getOutstandingBalance(useStoreCredit);\n        const config = state.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this.paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            currency,\n            storeProfile: { storeLanguage },\n        } = config;\n        const {\n            nonce,\n            config: { isVaultingEnabled },\n        } = this.paymentMethod;\n        const { methodId, paymentData = {} } = payment;\n\n        const token = this.braintreeTokenizePayload?.nonce || nonce;\n\n        if (token) {\n            const state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n            this.paymentMethod = state.getPaymentMethod(methodId);\n\n            return {\n                ...payment,\n                paymentData: this.formattedPayload(token),\n            };\n        }\n\n        if (isVaultedInstrument(paymentData) || isHostedVaultedInstrument(paymentData)) {\n            if (!isVaultingEnabled) {\n                throw new InvalidArgumentError(\n                    'Vaulting is disabled but a vaulted instrument was being used for this transaction',\n                );\n            }\n\n            return Promise.resolve(payment);\n        }\n\n        if (!isHostedInstrumentLike(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = paymentData;\n\n        if (shouldSaveInstrument && !isVaultingEnabled) {\n            throw new InvalidArgumentError(\n                'Vaulting is disabled but shouldSaveInstrument is set to true',\n            );\n        }\n\n        const shippingAddress = state.getShippingAddress();\n\n        const shippingAddressOverride = shippingAddress\n            ? mapToBraintreeShippingAddressOverride(shippingAddress)\n            : undefined;\n\n        return Promise.all([\n            this.braintreeIntegrationService.paypal({\n                amount: grandTotal,\n                locale: storeLanguage,\n                currency: currency.code,\n                offerCredit: this.paymentMethod.id === 'braintreepaypalcredit',\n                shippingAddressOverride,\n                shouldSaveInstrument: shouldSaveInstrument || false,\n                shippingAddressEditable: false,\n            }),\n            this.braintreeIntegrationService.getSessionId(),\n        ]).then(([{ nonce, details } = {} as any, sessionId]) => ({\n            ...payment,\n            paymentData: this.formattedPayload(\n                nonce,\n                details && details.email,\n                sessionId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            ),\n        }));\n    }\n\n    private formattedPayload(\n        token: string,\n        email?: string,\n        sessionId?: string,\n        vaultPaymentInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: vaultPaymentInstrument || null,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n\n    private async loadPaypalCheckoutInstance() {\n        const { clientToken, initializationData, id: paymentMethodId } = this.paymentMethod || {};\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken);\n\n            const currencyCode = this.paymentIntegrationService.getState().getCartOrThrow()\n                .currency.code;\n\n            const paypalCheckoutConfig: Partial<BraintreePaypalSdkCreatorConfig> = {\n                currency: currencyCode,\n                intent: initializationData?.intent,\n                isCreditEnabled: initializationData?.isCreditEnabled,\n            };\n\n            const isBraintreePaypalCredit = paymentMethodId === 'braintreepaypalcredit';\n            const shouldShowPayPalCreditBanner =\n                isBraintreePaypalCredit || !initializationData?.isCreditEnabled;\n\n            await this.braintreeIntegrationService.getPaypalCheckout(\n                paypalCheckoutConfig,\n                (braintreePaypalCheckout) => {\n                    if (\n                        shouldShowPayPalCreditBanner &&\n                        paymentMethodId &&\n                        this.braintree?.bannerContainerId\n                    ) {\n                        this.renderPayPalMessages(\n                            paymentMethodId,\n                            this.braintree.bannerContainerId,\n                        );\n                    }\n\n                    this.renderPayPalButton(braintreePaypalCheckout);\n                },\n                this.handleError,\n            );\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private renderPayPalMessages(methodId: string, containerId: string) {\n        this.braintreeMessages.render(methodId, containerId, MessagingPlacements.PAYMENT);\n    }\n\n    private renderPayPalButton(braintreePaypalCheckout: BraintreePaypalCheckout) {\n        const { onPaymentError, submitForm, onRenderButton, containerId, onError } =\n            this.braintree || {};\n\n        if (!containerId) {\n            return;\n        }\n\n        if (!this.paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this.loadingIndicatorContainer = containerId.split('#')[1];\n\n        const {\n            id,\n            config: { testMode },\n        } = this.paymentMethod;\n\n        const { paypal } = this.braintreeHostWindow;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            this.paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                commit: false,\n                fundingSource,\n                onClick: () => {\n                    this.toggleLoadingIndicator(true);\n                },\n                createOrder: () => this.setupPayment(braintreePaypalCheckout, id, onPaymentError),\n                onApprove: async (authorizeData: PaypalAuthorizeData) => {\n                    this.braintreeTokenizePayload = await this.tokenizePaymentOrThrow(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                    );\n\n                    if (submitForm && typeof submitForm === 'function') {\n                        submitForm();\n                    }\n                },\n                onCancel: () => {\n                    this.toggleLoadingIndicator(false);\n                },\n                onError: (error: Error) => {\n                    this.toggleLoadingIndicator(false);\n\n                    onError?.(error);\n                },\n            });\n\n            if (onRenderButton && typeof onRenderButton === 'function') {\n                onRenderButton();\n            }\n\n            if (this.paypalButtonRender.isEligible()) {\n                this.paypalButtonRender.render(`${containerId}`);\n            }\n        } else {\n            this.removeElement(containerId.split('#')[1]);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        method: string,\n        onPaymentError: BraintreePaypalPaymentInitializeOptions['onPaymentError'],\n    ): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n\n        try {\n            const customer = state.getCustomer();\n\n            const paymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(method);\n\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currencyCode = state.getStoreConfigOrThrow().currency.code;\n\n            const shippingAddress = state.getShippingAddress();\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData.intent,\n            });\n        } catch (error) {\n            if (onPaymentError && (isBraintreeError(error) || error instanceof StandardError)) {\n                onPaymentError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePaymentOrThrow(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload> {\n        try {\n            return await braintreePaypalCheckout.tokenizePayment(authorizeData);\n        } catch (error) {\n            if (onError && (isBraintreeError(error) || error instanceof StandardError)) {\n                onError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    private async loadPaypal() {\n        const { clientToken, initializationData } = this.paymentMethod || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken);\n\n            await this.braintreeIntegrationService.getPaypal();\n        } catch (error) {\n            this.handleError(error);\n        }\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError | Error | unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private isProviderError(error: unknown): boolean {\n        if (isBraintreePaypalProviderError(error)) {\n            const paypalProviderError = error?.errors?.filter((e) => e.provider_error) || [];\n\n            return paypalProviderError[0]?.provider_error?.code === '2046';\n        }\n\n        return false;\n    }\n\n    private removeElement(elementId?: string): void {\n        const element = elementId && document.getElementById(elementId);\n\n        if (element) {\n            element.remove();\n        }\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","export interface ProviderError extends Error {\n    errors?: ErrorElement[];\n    status?: string;\n    three_ds_result?: {\n        acs_url: unknown;\n        payer_auth_request: unknown;\n        merchant_data: unknown;\n        callback_url: unknown;\n    };\n}\n\nexport interface ErrorElement {\n    code: string;\n    message: string;\n    provider_error?: {\n        code: string;\n    };\n}\n\nexport default function isBraintreePaypalProviderError(error: unknown): error is ProviderError {\n    return typeof error === 'object' && error !== null && 'errors' in error;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator, Overlay } from '@bigcommerce/checkout-sdk/ui';\n\nimport { LOADING_INDICATOR_STYLES } from '../braintree-paypal-constants';\n\nimport BraintreePaypalPaymentStrategy from './braintree-paypal-payment-strategy';\n\nconst createBraintreePaypalPaymentStrategy: PaymentStrategyFactory<\n    BraintreePaypalPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const overlay = new Overlay();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n        overlay,\n    );\n    const braintreeMessages = new BraintreeMessages(paymentIntegrationService);\n\n    return new BraintreePaypalPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n        braintreeMessages,\n        new LoadingIndicator({\n            containerStyles: LOADING_INDICATOR_STYLES,\n        }),\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalPaymentStrategy, [\n    { id: 'braintreepaypal' },\n    { id: 'braintreepaypalcredit' },\n]);\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { BraintreeOrderStatusData } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    RequestOptions,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeRequestSender {\n    constructor(private requestSender: RequestSender) {}\n\n    async getOrderStatus(\n        methodId = 'braintreelocalmethods',\n        options?: RequestOptions,\n    ): Promise<BraintreeOrderStatusData> {\n        const url = `/api/storefront/initialization/${methodId}`;\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        const res = await this.requestSender.get<BraintreeOrderStatusData>(url, {\n            headers,\n            ...options,\n        });\n\n        return res.body;\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    BraintreeInitializationData,\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentConfig,\n    BraintreeLocalPaymentMethodRedirectAction,\n    BraintreeLocalPaymentsPayload,\n    BraintreeLPMPaymentStartData,\n    BraintreeLPMStartPaymentError,\n    BraintreeOrderSavedResponse,\n    BraintreeOrderStatus,\n    BraintreeRedirectError,\n    BraintreeSdk,\n    NonInstantLocalPaymentMethods,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrumentMeta,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestOptions,\n    TimeoutError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport BraintreeRequestSender from '../braintree-request-sender';\n\nimport {\n    BraintreeLocalMethodsPaymentInitializeOptions,\n    WithBraintreeLocalMethodsPaymentInitializeOptions,\n} from './braintree-local-methods-payment-initialize-options';\n\nconst POLLING_INTERVAL = 3000;\nconst MAX_POLLING_TIME = 300000;\n\nexport default class BraintreeLocalMethodsPaymentStrategy implements PaymentStrategy {\n    private braintreelocalmethods?: BraintreeLocalMethodsPaymentInitializeOptions;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private loadingIndicatorContainer?: string;\n    private orderId?: string;\n    private gatewayId?: string;\n    private isLPMsUpdateExperimentEnabled = false;\n    private pollingTimer = 0;\n    private stopPolling = noop;\n    private isPollingEnabled = false;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeSdk: BraintreeSdk,\n        private braintreeRequestSender: BraintreeRequestSender,\n        private loadingIndicator: LoadingIndicator,\n        private pollingInterval: number = POLLING_INTERVAL,\n        private maxPollingIntervalTime: number = MAX_POLLING_TIME,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeLocalMethodsPaymentInitializeOptions,\n    ): Promise<void> {\n        const { gatewayId, methodId, braintreelocalmethods } = options;\n\n        this.gatewayId = gatewayId;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.gatewayId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreelocalmethods) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreelocalmethods\" argument is not provided.`,\n            );\n        }\n\n        this.braintreelocalmethods = braintreelocalmethods;\n        this.loadingIndicatorContainer = braintreelocalmethods.container.split('#')[1];\n\n        await this.paymentIntegrationService.loadPaymentMethod(gatewayId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(gatewayId);\n        const { clientToken, config, initializationData } = paymentMethod;\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n\n        this.isPollingEnabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5258.braintree_local_methods_polling',\n        );\n\n        this.isLPMsUpdateExperimentEnabled = isExperimentEnabled(\n            features,\n            'PAYPAL-4853.add_new_payment_flow_for_braintree_lpms',\n        );\n\n        if (!clientToken || !initializationData || !config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        try {\n            this.braintreeSdk.initialize(clientToken);\n\n            if (!this.isNonInstantPaymentMethod(methodId)) {\n                this.braintreeLocalPayment = await this.braintreeSdk.getBraintreeLocalPayment(\n                    config.merchantId,\n                );\n            }\n        } catch (error: unknown) {\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.toggleLoadingIndicator(false);\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        this.toggleLoadingIndicator(true);\n\n        if (this.isNonInstantPaymentMethod(methodId)) {\n            await this.executeWithNotInstantLPM(methodId);\n        } else {\n            await this.executeWithInstantLPM(methodId, order, options);\n        }\n    }\n\n    private async executeWithNotInstantLPM(methodId: string): Promise<void> {\n        try {\n            const basicPaymentData = await this.getLPMsBasicPaymentData();\n\n            await this.paymentIntegrationService.submitOrder();\n            await this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: {\n                    ...basicPaymentData,\n                    formattedPayload: {\n                        method: methodId,\n                    },\n                },\n            });\n        } catch (error: unknown) {\n            if (this.isBraintreeRedirectError(error)) {\n                const redirectUrl = error.body.additional_action_required.data.redirect_url;\n\n                return new Promise((_, reject) => {\n                    window.location.replace(redirectUrl);\n\n                    this.toggleLoadingIndicator(false);\n\n                    reject();\n                });\n            }\n\n            this.handleError(error);\n\n            return Promise.reject(error);\n        }\n    }\n\n    private async executeWithInstantLPM(\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        if (!this.braintreeLocalPayment) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await new Promise((resolve, reject): void => {\n            this.braintreeLocalPayment?.startPayment(\n                this.getInstantLPMConfig(methodId, order, options),\n                this.getInstantLPMCallback(resolve, reject, methodId, order, options),\n            );\n        });\n    }\n\n    private async getLPMsBasicPaymentData(): Promise<PaymentInstrumentMeta> {\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n\n        return { deviceSessionId: deviceData };\n    }\n\n    private getInstantLPMConfig(\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: RequestOptions,\n    ): BraintreeLocalPaymentConfig {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const billing = state.getBillingAddressOrThrow();\n        const { firstName, lastName, countryCode } = billing;\n        const { currency, email, lineItems } = cart;\n        const isShippingRequired = lineItems.physicalItems.length > 0;\n        const grandTotal = state.getCheckoutOrThrow().outstandingBalance;\n        const checkoutUrl = state.getStoreConfigOrThrow().links.checkoutLink;\n\n        return {\n            paymentType: methodId,\n            amount: grandTotal,\n            fallback: {\n                url: checkoutUrl,\n                buttonText: 'Complete Payment',\n            },\n            currencyCode: currency.code,\n            shippingAddressRequired: isShippingRequired,\n            email,\n            givenName: firstName,\n            surname: lastName,\n            address: {\n                countryCode,\n            },\n            onPaymentStart: async (data: BraintreeLPMPaymentStartData, start: () => void) => {\n                if (!this.isLPMsUpdateExperimentEnabled) {\n                    this.orderId = data.paymentId;\n\n                    start();\n\n                    return;\n                }\n\n                const basicPaymentData = await this.getLPMsBasicPaymentData();\n                const paymentData = {\n                    ...basicPaymentData,\n                    formattedPayload: {\n                        method: methodId,\n                        [`${methodId}_account`]: {\n                            order_id: data.paymentId,\n                        },\n                    },\n                };\n\n                try {\n                    // Submit order and payment should be performed to pass order_id to the backend\n                    await this.paymentIntegrationService.submitOrder(order, options);\n                    await this.paymentIntegrationService.submitPayment({\n                        methodId,\n                        paymentData,\n                    });\n                } catch (error: unknown) {\n                    if (\n                        this.isBraintreeOrderSavedResponse(error) &&\n                        error.body.additional_action_required.data.order_id_saved_successfully\n                    ) {\n                        // Start method call initiates the popup\n                        start();\n\n                        if (this.isPollingEnabled) {\n                            return new Promise((resolve, reject) => {\n                                void this.initializePollingMechanism(\n                                    methodId,\n                                    resolve,\n                                    reject,\n                                    this.gatewayId,\n                                );\n                            });\n                        }\n\n                        return;\n                    }\n\n                    throw error;\n                }\n            },\n        };\n    }\n\n    private getInstantLPMCallback(\n        resolve: (value: unknown) => void,\n        reject: (reason?: unknown) => void,\n        methodId: string,\n        order: Omit<OrderRequestBody, 'payment'>,\n        options?: RequestOptions,\n    ) {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n\n        return async (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payloadData: BraintreeLocalPaymentsPayload,\n        ) => {\n            if (startPaymentError) {\n                if (startPaymentError.code === 'LOCAL_PAYMENT_WINDOW_CLOSED') {\n                    this.toggleLoadingIndicator(false);\n                    this.resetPollingMechanism();\n\n                    return reject();\n                }\n\n                if (this.isPollingEnabled) {\n                    this.resetPollingMechanism();\n                }\n\n                this.toggleLoadingIndicator(false);\n\n                return reject(new PaymentMethodInvalidError());\n            }\n\n            const basicPaymentData = await this.getLPMsBasicPaymentData();\n            const paymentData = {\n                ...basicPaymentData,\n                formattedPayload: {\n                    method: methodId,\n                    [`${methodId}_account`]: {\n                        email: cart.email,\n                        token: payloadData.nonce,\n                        ...(!this.isLPMsUpdateExperimentEnabled ? { order_id: this.orderId } : {}),\n                    },\n                },\n            };\n\n            try {\n                if (!this.isLPMsUpdateExperimentEnabled) {\n                    await this.paymentIntegrationService.submitOrder(order, options);\n                }\n\n                await this.paymentIntegrationService.submitPayment({\n                    methodId,\n                    paymentData,\n                });\n\n                return resolve(undefined);\n            } catch (error: unknown) {\n                this.handleError(error);\n\n                return reject(error);\n            }\n        };\n    }\n\n    /**\n     *\n     * Loading Indicator methods\n     *\n     * */\n    private toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this.loadingIndicatorContainer) {\n            this.loadingIndicator.show(this.loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n\n    private handleError(error: unknown) {\n        const { onError } = this.braintreelocalmethods || {};\n\n        if (this.isPollingEnabled) {\n            this.resetPollingMechanism();\n        }\n\n        this.toggleLoadingIndicator(false);\n\n        if (onError && typeof onError === 'function') {\n            onError(error);\n        }\n    }\n\n    /**\n     *\n     * Utils\n     *\n     * */\n    private isNonInstantPaymentMethod(methodId: string): boolean {\n        return methodId.toUpperCase() in NonInstantLocalPaymentMethods;\n    }\n\n    private isBraintreeRedirectError(error: unknown): error is BraintreeRedirectError {\n        if (typeof error !== 'object' || error === null) {\n            return false;\n        }\n\n        const { body }: Partial<BraintreeLocalPaymentMethodRedirectAction> = error;\n\n        if (!body) {\n            return false;\n        }\n\n        return !!body.additional_action_required?.data.redirect_url;\n    }\n\n    private isBraintreeOrderSavedResponse(\n        response: unknown,\n    ): response is BraintreeOrderSavedResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const { body }: Partial<BraintreeOrderSavedResponse> = response;\n\n        if (!body) {\n            return false;\n        }\n\n        return body.additional_action_required?.data.hasOwnProperty('order_id_saved_successfully');\n    }\n\n    /**\n     *\n     * Polling mechanism\n     *\n     *\n     * */\n    private async initializePollingMechanism(\n        methodId: string,\n        resolvePromise: () => void,\n        rejectPromise: () => void,\n        gatewayId?: string,\n    ): Promise<void> {\n        await new Promise<void>((resolve, reject) => {\n            const timeout = setTimeout(resolve, this.pollingInterval);\n\n            this.stopPolling = () => {\n                clearTimeout(timeout);\n                this.toggleLoadingIndicator(false);\n\n                return reject();\n            };\n        });\n\n        try {\n            this.pollingTimer += this.pollingInterval;\n\n            const orderStatus = await this.braintreeRequestSender.getOrderStatus(gatewayId, {\n                params: {\n                    useMetadata: false,\n                },\n            });\n\n            const isOrderPending = orderStatus.status === BraintreeOrderStatus.Pending;\n            const isOrderApproved = orderStatus.status === BraintreeOrderStatus.Completed;\n            const isPollingError = orderStatus.status === BraintreeOrderStatus.Failed;\n\n            if (isOrderApproved) {\n                this.deinitializePollingMechanism();\n\n                return resolvePromise();\n            }\n\n            if (isPollingError) {\n                return rejectPromise();\n            }\n\n            if (\n                !isOrderApproved &&\n                isOrderPending &&\n                this.pollingTimer < this.maxPollingIntervalTime\n            ) {\n                return await this.initializePollingMechanism(\n                    methodId,\n                    resolvePromise,\n                    rejectPromise,\n                    gatewayId,\n                );\n            }\n\n            await this.reinitializeStrategy({\n                methodId,\n                gatewayId,\n                braintreelocalmethods: this.braintreelocalmethods,\n            });\n\n            this.handleError(new TimeoutError());\n        } catch (error) {\n            rejectPromise();\n        }\n    }\n\n    private deinitializePollingMechanism(): void {\n        this.stopPolling();\n        this.pollingTimer = 0;\n    }\n\n    private resetPollingMechanism(): void {\n        this.deinitializePollingMechanism();\n    }\n\n    private async reinitializeStrategy(\n        options: PaymentInitializeOptions & WithBraintreeLocalMethodsPaymentInitializeOptions,\n    ) {\n        await this.deinitialize();\n        await this.initialize(options);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport BraintreeRequestSender from '../braintree-request-sender';\n\nimport BraintreeLocalMethodsPaymentStrategy from './braintree-local-methods-payment-strategy';\n\nconst createBraintreeLocalMethodsPaymentStrategy: PaymentStrategyFactory<\n    BraintreeLocalMethodsPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n    const requestSender = createRequestSender();\n    const braintreeRequestSender = new BraintreeRequestSender(requestSender);\n\n    return new BraintreeLocalMethodsPaymentStrategy(\n        paymentIntegrationService,\n        braintreeSdk,\n        braintreeRequestSender,\n        new LoadingIndicator({ styles: { backgroundColor: 'black' } }),\n    );\n};\n\nexport default toResolvableModule(createBraintreeLocalMethodsPaymentStrategy, [\n    { gateway: 'braintreelocalmethods' },\n]);\n","import { omitBy } from 'lodash';\n\nimport { BraintreeFastlaneStylesOption, FastlaneStylesSettings } from '../index';\n\nfunction isInvalidStyleOption(styleOption: unknown) {\n    return typeof styleOption !== 'string';\n}\n\nexport default function getFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: BraintreeFastlaneStylesOption,\n): BraintreeFastlaneStylesOption | undefined {\n    if (!uiStyles && !styleSettings) {\n        return undefined;\n    }\n\n    return cleanUpFastlaneStyles(mergeFastlaneStyles(styleSettings, uiStyles));\n}\n\nfunction mergeFastlaneStyles(\n    styleSettings?: FastlaneStylesSettings,\n    uiStyles?: BraintreeFastlaneStylesOption,\n): BraintreeFastlaneStylesOption {\n    return {\n        root: {\n            backgroundColorPrimary:\n                styleSettings?.fastlaneRootSettingsBackgroundColor ||\n                uiStyles?.root?.backgroundColorPrimary,\n            errorColor: styleSettings?.fastlaneRootSettingsErrorColor || uiStyles?.root?.errorColor,\n            fontFamily: styleSettings?.fastlaneRootSettingsFontFamily || uiStyles?.root?.fontFamily,\n            fontSizeBase:\n                styleSettings?.fastlaneRootSettingsFontSize || uiStyles?.root?.fontSizeBase,\n            padding: styleSettings?.fastlaneRootSettingsPadding || uiStyles?.root?.padding,\n            primaryColor:\n                styleSettings?.fastlaneRootSettingsPrimaryColor || uiStyles?.root?.primaryColor,\n        },\n        input: {\n            borderRadius:\n                styleSettings?.fastlaneInputSettingsBorderRadius || uiStyles?.input?.borderRadius,\n            borderColor:\n                styleSettings?.fastlaneInputSettingsBorderColor || uiStyles?.input?.borderColor,\n            focusBorderColor:\n                styleSettings?.fastlaneInputSettingsFocusBorderBase ||\n                uiStyles?.input?.focusBorderColor,\n            backgroundColor:\n                styleSettings?.fastlaneInputSettingsBackgroundColor ||\n                uiStyles?.input?.backgroundColor,\n            borderWidth:\n                styleSettings?.fastlaneInputSettingsBorderWidth || uiStyles?.input?.borderWidth,\n            textColorBase:\n                styleSettings?.fastlaneInputSettingsTextColorBase || uiStyles?.input?.textColorBase,\n        },\n        toggle: {\n            colorPrimary:\n                styleSettings?.fastlaneToggleSettingsColorPrimary || uiStyles?.toggle?.colorPrimary,\n            colorSecondary:\n                styleSettings?.fastlaneToggleSettingsColorSecondary ||\n                uiStyles?.toggle?.colorSecondary,\n        },\n        text: {\n            body: {\n                color: styleSettings?.fastlaneTextBodySettingsColor || uiStyles?.text?.body?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextBodySettingsFontSize ||\n                    uiStyles?.text?.body?.fontSize,\n            },\n            caption: {\n                color:\n                    styleSettings?.fastlaneTextCaptionSettingsColor ||\n                    uiStyles?.text?.caption?.color,\n                fontSize:\n                    styleSettings?.fastlaneTextCaptionSettingsFontSize ||\n                    uiStyles?.text?.caption?.fontSize,\n            },\n        },\n        branding: styleSettings?.fastlaneBrandingSettings || uiStyles?.branding,\n    };\n}\n\nfunction cleanUpFastlaneStyles(styles: BraintreeFastlaneStylesOption) {\n    const fastlaneStyles: BraintreeFastlaneStylesOption = {};\n\n    const root = omitBy(styles.root, isInvalidStyleOption);\n    const input = omitBy(styles.input, isInvalidStyleOption);\n    const toggle = omitBy(styles.toggle, isInvalidStyleOption);\n    const textBody = omitBy(styles.text?.body, isInvalidStyleOption);\n    const textCaption = omitBy(styles.text?.caption, isInvalidStyleOption);\n    const branding = styles.branding;\n\n    if (Object.keys(root).length) {\n        fastlaneStyles.root = root;\n    }\n\n    if (Object.keys(input).length) {\n        fastlaneStyles.input = input;\n    }\n\n    if (Object.keys(toggle).length) {\n        fastlaneStyles.toggle = toggle;\n    }\n\n    if (Object.keys(textBody).length) {\n        fastlaneStyles.text = {};\n        fastlaneStyles.text.body = textBody;\n    }\n\n    if (Object.keys(textCaption).length) {\n        fastlaneStyles.text = {\n            ...fastlaneStyles.text,\n        };\n        fastlaneStyles.text.caption = textCaption;\n    }\n\n    if (branding) {\n        fastlaneStyles.branding = branding;\n    }\n\n    return fastlaneStyles;\n}\n","import {\n    PaymentProviderCustomer,\n    PayPalConnectCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isBraintreeAcceleratedCheckoutCustomer(\n    customer?: PaymentProviderCustomer,\n): customer is PayPalConnectCustomer {\n    if (!customer) {\n        return false;\n    }\n\n    return (\n        'authenticationState' in customer || 'addresses' in customer || 'instruments' in customer\n    );\n}\n","import {\n    Braintree3DSVerifyCardError,\n    Braintree3DSVerifyCardPayload,\n    BraintreeFastlaneAddress,\n    BraintreeFastlaneAuthenticationState,\n    BraintreeFastlaneCardComponent,\n    BraintreeFastlaneCardComponentOptions,\n    BraintreeInitializationData,\n    BraintreeSdk,\n    getFastlaneStyles,\n    isBraintreeAcceleratedCheckoutCustomer,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CardInstrument,\n    InvalidArgumentError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodClientUnavailableError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { WithBraintreeFastlanePaymentInitializeOptions } from './braintree-fastlane-payment-initialize-options';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nexport default class BraintreeFastlanePaymentStrategy implements PaymentStrategy {\n    private braintreeCardComponent?: BraintreeFastlaneCardComponent;\n    private is3DSEnabled?: boolean;\n    private onError?: (error: Error) => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeFastlaneUtils: BraintreeFastlaneUtils,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    /**\n     *\n     * Default methods\n     *\n     */\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeFastlanePaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, braintreefastlane } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreefastlane) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane\" argument is not provided.',\n            );\n        }\n\n        if (!braintreefastlane.onInit || typeof braintreefastlane.onInit !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane.onInit\" argument is not provided or it is not a function.',\n            );\n        }\n\n        if (!braintreefastlane.onChange || typeof braintreefastlane.onChange !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreefastlane.onChange\" argument is not provided or it is not a function.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { initializationData, clientToken } = paymentMethod || {};\n        const { isFastlaneStylingEnabled } = initializationData || {};\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isThreeDSExperimentEnabled = isExperimentEnabled(\n            features,\n            'PROJECT-7080.braintree_fastlane_three_ds',\n        );\n\n        this.is3DSEnabled = paymentMethod.config.is3dsEnabled;\n\n        if (clientToken && isThreeDSExperimentEnabled) {\n            this.braintreeSdk.initialize(clientToken);\n        }\n\n        const paypalFastlaneStyleSettings = isFastlaneStylingEnabled\n            ? paymentMethod.initializationData?.fastlaneStyles\n            : undefined;\n\n        const fastlaneStyles = getFastlaneStyles(\n            paypalFastlaneStyleSettings,\n            braintreefastlane.styles,\n        );\n\n        await this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(\n            methodId,\n            fastlaneStyles,\n        );\n\n        if (this.shouldRunAuthenticationFlow()) {\n            await this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow();\n        }\n\n        await this.initializeCardComponent();\n\n        this.onError = braintreefastlane.onError;\n\n        braintreefastlane.onInit((container) => this.renderBraintreeCardComponent(container));\n        braintreefastlane.onChange(() => this.handleBraintreeStoredInstrumentChange(methodId));\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        const paymentPayload = await this.preparePaymentPayload(payment.methodId);\n\n        await this.paymentIntegrationService.submitPayment(paymentPayload);\n\n        this.braintreeFastlaneUtils.removeSessionIdFromCookies();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.braintreeCardComponent = undefined;\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * Braintree Fastlane Component rendering method\n     *\n     */\n    private async initializeCardComponent() {\n        const state = this.paymentIntegrationService.getState();\n        const { phone, firstName, lastName } = state.getBillingAddressOrThrow();\n        const fullName = `${firstName} ${lastName}`;\n\n        const cardComponentOptions: BraintreeFastlaneCardComponentOptions = {\n            styles: {},\n            fields: {\n                cardholderName: {\n                    prefill: fullName,\n                    enabled: true,\n                },\n                ...(phone && {\n                    phoneNumber: {\n                        prefill: phone,\n                    },\n                }),\n            },\n        };\n\n        const paypalPaymentComponent =\n            this.braintreeFastlaneUtils.getBraintreeFastlaneComponentOrThrow();\n\n        this.braintreeCardComponent = await paypalPaymentComponent(cardComponentOptions);\n    }\n\n    private renderBraintreeCardComponent(container?: string) {\n        const braintreeCardComponent = this.getBraintreeCardComponentOrThrow();\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"container\" argument is not provided.',\n            );\n        }\n\n        braintreeCardComponent.render(container);\n    }\n\n    /**\n     *\n     * Payment Payload preparation methods\n     *\n     */\n    private async preparePaymentPayload(methodId: string): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const fullName = `${billingAddress.firstName} ${billingAddress.lastName}`;\n\n        const paypalInstrument = this.getPayPalInstruments()[0];\n\n        const deviceSessionId = await this.braintreeFastlaneUtils.getDeviceSessionId();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isThreeDSExperimentEnabled = isExperimentEnabled(\n            features,\n            'PROJECT-7080.braintree_fastlane_three_ds',\n        );\n\n        if (paypalInstrument) {\n            const threeDSToken =\n                this.is3DSEnabled && isThreeDSExperimentEnabled\n                    ? await this.get3DS(paypalInstrument.bigpayToken, paypalInstrument?.iin || '')\n                    : undefined;\n\n            return {\n                methodId,\n                paymentData: {\n                    deviceSessionId,\n                    formattedPayload: {\n                        paypal_fastlane_token: {\n                            token: threeDSToken || paypalInstrument.bigpayToken,\n                        },\n                    },\n                },\n            };\n        }\n\n        const { getPaymentToken } = this.getBraintreeCardComponentOrThrow();\n\n        const paymentToken = await getPaymentToken({\n            name: { fullName },\n            billingAddress: this.mapToPayPalAddress(billingAddress),\n        });\n\n        const binGuest = paymentToken.paymentSource.card?.binDetails?.bin || '';\n        const threeDSToken =\n            this.is3DSEnabled && isThreeDSExperimentEnabled\n                ? await this.get3DS(paymentToken.id, binGuest)\n                : undefined;\n\n        return {\n            methodId,\n            paymentData: {\n                deviceSessionId,\n                nonce: threeDSToken || paymentToken.id,\n            },\n        };\n    }\n\n    /**\n     * 3DS\n     */\n    private async get3DS(nonce: string, bin: string): Promise<string> {\n        const state = this.paymentIntegrationService.getState();\n        const threeDSecure = await this.braintreeSdk.getBraintreeThreeDS();\n        const order = state.getOrderOrThrow();\n\n        return new Promise<string>((resolve, reject) => {\n            void threeDSecure.verifyCard(\n                {\n                    amount: order?.orderAmount,\n                    nonce,\n                    bin,\n                    onLookupComplete: (_data, next) => {\n                        threeDSecure.on('customer-canceled', () => {\n                            if (typeof this.onError === 'function') {\n                                this.onError(new PaymentMethodCancelledError());\n                            }\n\n                            reject(new PaymentMethodCancelledError());\n                        });\n\n                        next();\n                    },\n                },\n                (\n                    verifyError: Braintree3DSVerifyCardError,\n                    payload: Braintree3DSVerifyCardPayload,\n                ) => {\n                    if (\n                        verifyError &&\n                        verifyError.code === 'THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT'\n                    ) {\n                        if (typeof this.onError === 'function') {\n                            this.onError(new PaymentMethodCancelledError());\n                        }\n\n                        reject(new PaymentMethodCancelledError());\n                    }\n\n                    return resolve(payload.nonce);\n                },\n            );\n        });\n    }\n\n    /**\n     *\n     * Mapper methods\n     *\n     */\n    private mapToPayPalAddress(address?: Address): BraintreeFastlaneAddress {\n        return {\n            streetAddress: address?.address1 || '',\n            locality: address?.city || '',\n            region: address?.stateOrProvinceCode || address?.stateOrProvince || '',\n            postalCode: address?.postalCode || '',\n            countryCodeAlpha2: address?.countryCode || '',\n        };\n    }\n\n    /**\n     *\n     * Other methods\n     *\n     */\n    private shouldRunAuthenticationFlow(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const customer = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomer();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        const paypalFastlaneSessionId = this.braintreeFastlaneUtils.getSessionIdFromCookies();\n\n        if (\n            !customer.isGuest ||\n            braintreePaymentProviderCustomer?.authenticationState ===\n                BraintreeFastlaneAuthenticationState.CANCELED\n        ) {\n            return false;\n        }\n\n        return (\n            !braintreePaymentProviderCustomer?.authenticationState &&\n            paypalFastlaneSessionId === cart.id\n        );\n    }\n\n    private getBraintreeCardComponentOrThrow() {\n        if (!this.braintreeCardComponent) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.braintreeCardComponent;\n    }\n\n    private getPayPalInstruments(): CardInstrument[] {\n        const state = this.paymentIntegrationService.getState();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const braintreePaymentProviderCustomer = isBraintreeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n\n        return braintreePaymentProviderCustomer.instruments || [];\n    }\n\n    /**\n     *\n     * Braintree Fastlane instrument change\n     *\n     */\n    private async handleBraintreeStoredInstrumentChange(\n        methodId: string,\n    ): Promise<CardInstrument | undefined> {\n        const paypalAxoSdk = this.braintreeFastlaneUtils.getBraintreeFastlaneOrThrow();\n\n        const { selectionChanged, selectedCard } = await paypalAxoSdk.profile.showCardSelector();\n\n        if (selectionChanged) {\n            const state = this.paymentIntegrationService.getState();\n            const paymentProviderCustomer = state.getPaymentProviderCustomer();\n            const braintreeFastlaneCustomer = isBraintreeAcceleratedCheckoutCustomer(\n                paymentProviderCustomer,\n            )\n                ? paymentProviderCustomer\n                : {};\n\n            const selectedInstruments = this.braintreeFastlaneUtils.mapPayPalToBcInstrument(\n                methodId,\n                [selectedCard],\n            );\n\n            if (selectedInstruments && selectedInstruments.length > 0) {\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    ...braintreeFastlaneCustomer,\n                    instruments: [...selectedInstruments],\n                });\n\n                return selectedInstruments[0];\n            }\n        }\n\n        return undefined;\n    }\n}\n","import { isEqual, omit } from 'lodash';\n\nimport {\n    BraintreeFastlane,\n    BraintreeFastlaneAddress,\n    BraintreeFastlaneAuthenticationState,\n    BraintreeFastlaneProfileData,\n    BraintreeFastlaneStylesOption,\n    BraintreeFastlaneVaultedInstrument,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CardInstrument,\n    CustomerAddress,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethodClientUnavailableError,\n    UntrustedShippingCardVerificationType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { CookieStorage } from '@bigcommerce/checkout-sdk/storage';\n\nexport default class BraintreeFastlaneUtils {\n    private braintreeFastlane?: BraintreeFastlane;\n    private methodId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n    ) {}\n\n    async getDeviceSessionId(): Promise<string | undefined> {\n        const cart = this.paymentIntegrationService.getState().getCart();\n\n        return this.braintreeIntegrationService.getSessionId(cart?.id);\n    }\n\n    /**\n     *\n     * Initialization method\n     *\n     */\n    async initializeBraintreeFastlaneOrThrow(\n        methodId: string,\n        styles?: BraintreeFastlaneStylesOption,\n    ) {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCart();\n        const { clientToken, config } =\n            state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.methodId = methodId;\n\n        this.braintreeIntegrationService.initialize(clientToken);\n\n        this.braintreeFastlane = await this.braintreeIntegrationService.getBraintreeFastlane(\n            cart?.id,\n            config.testMode,\n            styles,\n        );\n    }\n\n    getBraintreeFastlaneOrThrow(): BraintreeFastlane {\n        if (!this.braintreeFastlane) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.braintreeFastlane;\n    }\n\n    getBraintreeFastlaneComponentOrThrow(): BraintreeFastlane['FastlaneCardComponent'] {\n        const braintreeFastlane = this.getBraintreeFastlaneOrThrow();\n\n        return braintreeFastlane.FastlaneCardComponent;\n    }\n\n    /**\n     *\n     * Authentication methods\n     *\n     * */\n    // Remove this rule disabling after method refactor\n    // eslint-disable-next-line complexity\n    async runPayPalAuthenticationFlowOrThrow(\n        email?: string,\n        shouldSetShippingOption?: boolean,\n    ): Promise<void> {\n        try {\n            const methodId = this.getMethodIdOrThrow();\n            const braintreeFastlane = this.getBraintreeFastlaneOrThrow();\n            const { lookupCustomerByEmail, triggerAuthenticationFlow } = braintreeFastlane.identity;\n\n            const state = this.paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const customer = state.getCustomer();\n            const billingAddress = state.getBillingAddress();\n            const { isFastlaneShippingOptionAutoSelectEnabled } =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId)\n                    .initializationData || {};\n\n            const customerEmail = email || customer?.email || billingAddress?.email || '';\n\n            const { customerContextId } = await lookupCustomerByEmail(customerEmail);\n\n            if (!customerContextId) {\n                // Info: we should clean up previous experience with default data and related authenticationState\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState: BraintreeFastlaneAuthenticationState.UNRECOGNIZED,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.saveSessionIdToCookies(cart.id);\n\n                return;\n            }\n\n            const { authenticationState, profileData } = await triggerAuthenticationFlow(\n                customerContextId,\n            );\n\n            const phoneNumber = profileData?.shippingAddress?.phoneNumber || '';\n\n            if (authenticationState === BraintreeFastlaneAuthenticationState.CANCELED) {\n                await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    authenticationState,\n                    addresses: [],\n                    instruments: [],\n                });\n\n                this.removeSessionIdFromCookies();\n\n                return;\n            }\n\n            const shippingAddresses =\n                this.mapPayPalToBcAddress([profileData.shippingAddress], [phoneNumber]) || [];\n            const paypalBillingAddress = this.getPayPalBillingAddresses(profileData);\n            const billingAddresses = paypalBillingAddress\n                ? this.mapPayPalToBcAddress([paypalBillingAddress], [phoneNumber])\n                : [];\n            const instruments = profileData.card\n                ? this.mapPayPalToBcInstrument(methodId, [profileData.card])\n                : [];\n            const addresses = this.mergeShippingAndBillingAddresses(\n                shippingAddresses,\n                billingAddresses,\n            );\n\n            this.saveSessionIdToCookies(cart.id);\n\n            await this.paymentIntegrationService.updatePaymentProviderCustomer({\n                authenticationState,\n                addresses,\n                instruments,\n            });\n\n            if (billingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this.paymentIntegrationService.updateBillingAddress(billingAddresses[0]);\n            }\n\n            // Prefill billing form if only digital items in cart with billing data and firstName and lastName\n            // from shippingAddresses because there are empty in billing\n            if (\n                billingAddresses.length > 0 &&\n                cart.lineItems.digitalItems.length > 0 &&\n                cart.lineItems.physicalItems.length === 0\n            ) {\n                const { firstName, lastName } = addresses[0];\n                const digitalItemBilling = {\n                    ...billingAddresses[0],\n                    firstName,\n                    lastName,\n                };\n\n                await this.paymentIntegrationService.updateBillingAddress(digitalItemBilling);\n            }\n\n            if (shippingAddresses.length > 0 && cart.lineItems.physicalItems.length > 0) {\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddresses[0]);\n\n                if (shouldSetShippingOption && isFastlaneShippingOptionAutoSelectEnabled) {\n                    await this.setShippingOption();\n                }\n            }\n        } catch (error) {\n            // TODO: we should figure out what to do here\n            // TODO: because we should not to stop the flow if the error occurs on paypal side\n        }\n    }\n\n    /**\n     *\n     * Session id management\n     *\n     */\n    getSessionIdFromCookies(): string {\n        return CookieStorage.get('bc-fastlane-sessionId') || '';\n    }\n\n    saveSessionIdToCookies(sessionId: string): void {\n        const expires = new Date();\n\n        expires.setDate(expires.getDate() + 14); // 2 weeks expiry\n\n        CookieStorage.set('bc-fastlane-sessionId', sessionId, {\n            expires,\n            secure: true,\n        });\n    }\n\n    removeSessionIdFromCookies(): void {\n        CookieStorage.remove('bc-fastlane-sessionId');\n    }\n\n    /**\n     *\n     * PayPal to BC data mappers\n     *\n     * */\n    mapPayPalToBcInstrument(\n        methodId: string,\n        instruments?: BraintreeFastlaneVaultedInstrument[],\n    ): CardInstrument[] | undefined {\n        if (!instruments) {\n            return;\n        }\n\n        return instruments.map((instrument) => {\n            const { id, paymentSource } = instrument;\n            const { brand, expiry, lastDigits, binDetails } = paymentSource.card;\n\n            const [expiryYear, expiryMonth] = expiry.split('-');\n\n            return {\n                bigpayToken: id,\n                brand,\n                defaultInstrument: false,\n                expiryMonth,\n                expiryYear,\n                iin: binDetails?.bin || '',\n                last4: lastDigits,\n                method: methodId,\n                provider: methodId,\n                trustedShippingAddress: false,\n                type: 'card',\n                untrustedShippingCardVerificationMode: UntrustedShippingCardVerificationType.PAN,\n            };\n        });\n    }\n\n    private mapPayPalToBcAddress(\n        addresses?: BraintreeFastlaneAddress[],\n        phones?: string[],\n    ): CustomerAddress[] {\n        if (!addresses) {\n            return [];\n        }\n\n        const countries = this.paymentIntegrationService.getState().getCountries() || [];\n\n        const getCountryNameByCountryCode = (countryCode: string) => {\n            const matchedCountry = countries.find((country) => country.code === countryCode);\n\n            return matchedCountry?.name || '';\n        };\n\n        return addresses.map((address) => ({\n            id: Date.now(),\n            type: 'paypal-address',\n            firstName: address.firstName || '',\n            lastName: address.lastName || '',\n            company: address.company || '',\n            address1: address.streetAddress,\n            address2: address.extendedAddress || '',\n            city: address.locality,\n            stateOrProvince: address.region,\n            stateOrProvinceCode: address.region,\n            country: getCountryNameByCountryCode(address.countryCodeAlpha2),\n            countryCode: address.countryCodeAlpha2,\n            postalCode: address.postalCode,\n            phone: (phones && phones[0]) || '',\n            customFields: [],\n        }));\n    }\n\n    /**\n     *\n     * Get PayPal billing addresses from stored braintree instruments info\n     *\n     * */\n    private getPayPalBillingAddresses(\n        profileData?: BraintreeFastlaneProfileData,\n    ): BraintreeFastlaneAddress | undefined {\n        const { card, name } = profileData || {};\n\n        if (!card) {\n            return;\n        }\n\n        const { firstName, lastName } = card.paymentSource.card.billingAddress;\n        const { firstName: given_name, lastName: surname } = name || {};\n        const { shippingAddress } = profileData || {};\n        const address = {\n            ...card.paymentSource.card.billingAddress,\n            firstName: firstName || given_name,\n            lastName: lastName || surname,\n        };\n\n        const isAddressExist =\n            shippingAddress &&\n            isEqual(this.normalizeAddress(address), this.normalizeAddress(shippingAddress));\n\n        return isAddressExist ? shippingAddress : address;\n    }\n\n    private normalizeAddress(address: CustomerAddress | BraintreeFastlaneAddress) {\n        return omit(address, ['id']);\n    }\n\n    private mergeShippingAndBillingAddresses(\n        shippingAddresses: CustomerAddress[],\n        billingAddresses: CustomerAddress[],\n    ): CustomerAddress[] {\n        const filteredBillingAddresses = billingAddresses.filter(\n            (billingAddress: CustomerAddress) =>\n                !shippingAddresses.some((shippingAddress: CustomerAddress) => {\n                    return isEqual(\n                        this.normalizeAddress(shippingAddress),\n                        this.normalizeAddress(billingAddress),\n                    );\n                }),\n        );\n\n        return [...shippingAddresses, ...filteredBillingAddresses];\n    }\n\n    /**\n     *\n     * Other\n     *\n     * */\n    private getMethodIdOrThrow(): string {\n        if (!this.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        return this.methodId;\n    }\n\n    private async setShippingOption(): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const consignments = state.getConsignments() || [];\n        const availableShippingOptions = consignments[0]?.availableShippingOptions || [];\n        const recommendedShippingOption = availableShippingOptions.find(\n            (option) => option.isRecommended,\n        );\n\n        if (recommendedShippingOption || availableShippingOptions.length) {\n            const selectedOption = recommendedShippingOption || availableShippingOptions[0];\n\n            await this.paymentIntegrationService.selectShippingOption(selectedOption.id);\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeFastlanePaymentStrategy from './braintree-fastlane-payment-strategy';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nconst createBraintreeFastlanePaymentStrategy: PaymentStrategyFactory<\n    BraintreeFastlanePaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    const braintreeFastlaneUtils = new BraintreeFastlaneUtils(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n    );\n\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        getScriptLoader(),\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeSdk = new BraintreeSdk(braintreeScriptLoader);\n\n    return new BraintreeFastlanePaymentStrategy(\n        paymentIntegrationService,\n        braintreeFastlaneUtils,\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeFastlanePaymentStrategy, [\n    { id: 'braintreeacceleratedcheckout' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeInitializationData,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithBraintreeVisaCheckoutPaymentInitializeOptions } from './braintree-visa-checkout-payment-options';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private paymentMethod?: PaymentMethod<BraintreeInitializationData>;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeVisaCheckoutPaymentInitializeOptions,\n    ): Promise<void> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const checkout = state.getCheckoutOrThrow();\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        const { clientToken, config } = this.paymentMethod || {};\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { onError = noop, onPaymentSelect = noop } = visaCheckoutOptions;\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const visaCheckoutSdk = await this.braintreeSdk.getVisaCheckoutSdk(config?.testMode);\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            settings: {\n                locale: storeConfig.storeProfile.storeLanguage,\n                shipping: {\n                    collectShipping: false,\n                },\n            },\n            paymentRequest: {\n                currencyCode: storeConfig.currency.code,\n                subtotal: String(checkout.subtotal),\n            },\n        });\n\n        await visaCheckoutSdk.init(initOptions);\n\n        visaCheckoutSdk.on(\n            'payment.success',\n            (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                this.tokenizePayment(braintreeVisaCheckout, paymentSuccessPayload)\n                    .then(() =>\n                        Promise.all([\n                            this.paymentIntegrationService.loadCheckout(),\n                            this.paymentIntegrationService.loadPaymentMethod(methodId),\n                        ]),\n                    )\n                    .then(() => onPaymentSelect())\n                    .catch((error) => onError(error)),\n        );\n        visaCheckoutSdk.on('payment.error', (_, error) => onError(error));\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"payload.payment\" argument is not provided.',\n            );\n        }\n\n        if (!this.paymentMethod?.initializationData?.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this.paymentMethod.initializationData;\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n            await this.paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: { nonce },\n            });\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<any> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n    }\n\n    private async tokenizePayment(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.mapToVisaCheckoutAddress(shipping),\n                billingAddress = this.mapToVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private mapToVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private handleError(error: unknown): never {\n        if (error instanceof Error && error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutPaymentStrategy from './braintree-visa-checkout-payment-strategy';\n\nconst createBraintreeVisaCheckoutPaymentStrategy: PaymentStrategyFactory<\n    BraintreeVisaCheckoutPaymentStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutPaymentStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutPaymentStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import {\n    BraintreeError,\n    BraintreeIntegrationService,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    isBraintreeError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    FormattedPayload,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentStrategy,\n    PaypalInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\nimport BraintreeVenmoPaymentStrategyInitializeOptions, {\n    WithBraintreeVenmoInitializeOptions,\n} from './braintree-venmo-payment-strategy-initialize-options';\n\nexport default class BraintreeVenmoPaymentStrategy implements PaymentStrategy {\n    private braintreeVenmoCheckout?: BraintreeVenmoCheckout;\n    private venmoOptions?: BraintreeVenmoPaymentStrategyInitializeOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeVenmoInitializeOptions,\n    ): Promise<void> {\n        const { methodId } = options;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n        const state = this.paymentIntegrationService.getState();\n\n        this.venmoOptions = options.braintreevenmo;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        await this.initializeBraintreeVenmo(paymentMethod);\n    }\n\n    async execute(orderRequest: OrderRequestBody): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            const paymentData = await this.preparePaymentData(payment);\n            await this.paymentIntegrationService.submitOrder(order);\n            await this.paymentIntegrationService.submitPayment(paymentData);\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: unknown): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private async initializeBraintreeVenmo(paymentMethod: PaymentMethod): Promise<void> {\n        const { clientToken } = paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const features = state.getStoreConfigOrThrow().checkoutSettings.features;\n        const isBraintreeVenmoWebFallbackSupport = isExperimentEnabled(\n            features,\n            'PAYPAL-5406.braintree_venmo_web_fallback_support',\n        );\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken);\n            this.braintreeVenmoCheckout = await this.braintreeIntegrationService.getVenmoCheckout({\n                ...(this.venmoOptions?.allowDesktop !== undefined\n                    ? { allowDesktop: this.venmoOptions.allowDesktop }\n                    : {}),\n                ...(isBraintreeVenmoWebFallbackSupport\n                    ? {\n                          mobileWebFallBack: isBraintreeVenmoWebFallbackSupport,\n                      }\n                    : {}),\n            });\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    private async preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this.paymentIntegrationService.getState();\n        const { nonce } = state.getPaymentMethodOrThrow(payment.methodId);\n\n        if (nonce) {\n            return { ...payment, paymentData: this.formattedPayload(nonce) };\n        }\n        const tokenizeResult = await this.braintreeVenmoTokenize();\n        const sessionId = await this.braintreeIntegrationService.getSessionId();\n\n        return {\n            ...payment,\n            paymentData: this.formattedPayload(\n                tokenizeResult.nonce,\n                tokenizeResult.details.email,\n                sessionId,\n            ),\n        };\n    }\n\n    private formattedPayload(\n        token: string,\n        email?: string,\n        sessionId?: string,\n    ): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                set_as_default_stored_instrument: null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n\n    private braintreeVenmoTokenize(): Promise<BraintreeTokenizePayload> {\n        return new Promise((resolve, reject) => {\n            this.braintreeVenmoCheckout?.tokenize(\n                (error: BraintreeError | undefined, payload: BraintreeTokenizePayload) => {\n                    if (error) {\n                        return reject(error);\n                    }\n\n                    resolve(payload);\n                },\n            );\n        });\n    }\n}\n","import {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport BraintreeVenmoPaymentStrategy from './braintree-venmo-payment-strategy';\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nconst createBraintreeVenmoPaymentStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVenmoPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const scriptLoader = getScriptLoader();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        scriptLoader,\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        braintreeScriptLoader,\n        braintreeHostWindow,\n    );\n\n    return new BraintreeVenmoPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVenmoPaymentStrategy, [{ id: 'braintreevenmo' }]);\n","import { some } from 'lodash';\n\nimport {\n    BraintreeIntegrationService,\n    BraintreeThreeDSecureOptions,\n    isBraintreeAcceleratedCheckoutCustomer,\n    isBraintreePaymentRequest3DSError,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NonceInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentInstrumentMeta,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeHostedForm from '../braintree-hosted-form/braintree-hosted-form';\nimport isBraintreeError from '../is-braintree-error';\n\nimport { WithBraintreeCreditCardPaymentInitializeOptions } from './braintree-credit-card-payment-initialize-options';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private is3dsEnabled?: boolean;\n    private isHostedFormInitialized?: boolean;\n    private deviceSessionId?: string;\n    private paymentMethod?: PaymentMethod;\n    private threeDSecure?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostedForm: BraintreeHostedForm,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithBraintreeCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, gatewayId, braintree } = options;\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        this.paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const { clientToken } = this.paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.threeDSecure = braintree?.threeDSecure;\n\n        try {\n            this.braintreeIntegrationService.initialize(clientToken, this.threeDSecure);\n\n            if (this.isHostedPaymentFormEnabled(methodId, gatewayId) && braintree?.form) {\n                await this.braintreeHostedForm.initialize(\n                    braintree.form,\n                    braintree.unsupportedCardBrands,\n                    clientToken,\n                );\n\n                this.isHostedFormInitialized = this.braintreeHostedForm.isInitialized();\n            }\n\n            this.is3dsEnabled = this.paymentMethod.config.is3dsEnabled;\n            this.deviceSessionId = await this.braintreeIntegrationService.getSessionId();\n\n            // TODO: Remove when BT AXO A/B testing is finished\n            if (this.shouldInitializeBraintreeFastlane()) {\n                await this.initializeBraintreeFastlaneOrThrow(methodId);\n            }\n        } catch (error) {\n            return this.handleError(error);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (this.isHostedFormInitialized) {\n            this.braintreeHostedForm.validate();\n        }\n\n        await this.paymentIntegrationService.submitOrder(order);\n\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const orderAmount = state.getOrderOrThrow().orderAmount;\n\n        try {\n            const paymentData = this.isHostedFormInitialized\n                ? await this.prepareHostedPaymentData(payment, billingAddress, orderAmount)\n                : await this.preparePaymentData(payment, billingAddress, orderAmount);\n\n            await this.paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData,\n            });\n        } catch (error) {\n            return this.processAdditionalAction(error, payment, orderAmount);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        this.isHostedFormInitialized = false;\n\n        await Promise.all([\n            this.braintreeIntegrationService.teardown(),\n            this.braintreeHostedForm.deinitialize(),\n        ]);\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: unknown): never {\n        if (isBraintreeError(error)) {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private async preparePaymentData(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const { paymentData } = payment;\n        const commonPaymentData = { deviceSessionId: this.deviceSessionId };\n\n        if (this.isSubmittingWithStoredCard(payment)) {\n            return {\n                ...commonPaymentData,\n                ...paymentData,\n            };\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { nonce } = this.shouldPerform3DSVerification(payment)\n            ? await this.braintreeIntegrationService.verifyCard(\n                  payment,\n                  billingAddress,\n                  orderAmount,\n              )\n            : await this.braintreeIntegrationService.tokenizeCard(payment, billingAddress);\n\n        return {\n            ...commonPaymentData,\n            nonce,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        };\n    }\n\n    private async prepareHostedPaymentData(\n        payment: OrderPaymentRequestBody,\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<PaymentInstrument & PaymentInstrumentMeta> {\n        const { paymentData } = payment;\n        const commonPaymentData = { deviceSessionId: this.deviceSessionId };\n\n        if (this.isSubmittingWithStoredCard(payment)) {\n            const { nonce } = await this.braintreeHostedForm.tokenizeForStoredCardVerification();\n\n            return {\n                ...commonPaymentData,\n                ...paymentData,\n                nonce,\n            };\n        }\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { nonce } = this.shouldPerform3DSVerification(payment)\n            ? await this.verifyCardWithHostedForm(billingAddress, orderAmount)\n            : await this.braintreeHostedForm.tokenize(billingAddress);\n\n        return {\n            ...commonPaymentData,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n            nonce,\n        };\n    }\n\n    private async verifyCardWithHostedForm(\n        billingAddress: Address,\n        orderAmount: number,\n    ): Promise<NonceInstrument> {\n        const tokenizationPayload = await this.braintreeHostedForm.tokenize(billingAddress);\n\n        return this.braintreeIntegrationService.challenge3DSVerification(\n            tokenizationPayload,\n            orderAmount,\n        );\n    }\n\n    private async processAdditionalAction(\n        error: unknown,\n        payment: OrderPaymentRequestBody,\n        orderAmount: number,\n    ): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'three_d_secure_required' })\n        ) {\n            return this.handleError(error);\n        }\n\n        try {\n            const { payer_auth_request: storedCreditCardNonce } =\n                (isBraintreePaymentRequest3DSError(error) && error.body.three_ds_result) || {};\n            const { paymentData } = payment;\n            const state = this.paymentIntegrationService.getState();\n\n            if (!paymentData || !isVaultedInstrument(paymentData)) {\n                throw new PaymentArgumentInvalidError(['instrumentId']);\n            }\n\n            const instrument = state.getCardInstrumentOrThrow(paymentData.instrumentId);\n            const { nonce } = await this.braintreeIntegrationService.challenge3DSVerification(\n                {\n                    nonce: storedCreditCardNonce || '',\n                    bin: instrument.iin,\n                },\n                orderAmount,\n            );\n\n            await this.paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    deviceSessionId: this.deviceSessionId,\n                    nonce,\n                },\n            });\n        } catch (error) {\n            return this.handleError(error);\n        }\n    }\n\n    private isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private isSubmittingWithStoredCard(payment: OrderPaymentRequestBody): boolean {\n        return !!(payment.paymentData && isVaultedInstrument(payment.paymentData));\n    }\n\n    private shouldPerform3DSVerification(payment: OrderPaymentRequestBody): boolean {\n        return !!(this.is3dsEnabled && !this.isSubmittingWithStoredCard(payment));\n    }\n\n    // TODO: Remove when BT AXO A/B testing is finished\n    private shouldInitializeBraintreeFastlane(): boolean {\n        const state = this.paymentIntegrationService.getState();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const braintreeCustomer = isBraintreeAcceleratedCheckoutCustomer(paymentProviderCustomer)\n            ? paymentProviderCustomer\n            : {};\n        const isFastlaneEnabled: boolean =\n            this.paymentMethod?.initializationData.isAcceleratedCheckoutEnabled;\n\n        return isFastlaneEnabled && !braintreeCustomer?.authenticationState;\n    }\n\n    // TODO: Remove when BT AXO A/B testing is finished\n    private async initializeBraintreeFastlaneOrThrow(methodId: string): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { clientToken, config } = paymentMethod;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeIntegrationService.initialize(clientToken, this.threeDSecure);\n\n        await this.braintreeIntegrationService.getBraintreeFastlane(cart.id, config.testMode);\n    }\n}\n","export interface BraintreePayment3DSRequestErrors {\n    code: string;\n}\n\nexport interface BraintreePaymentRequest3DSError {\n    name: string;\n    body: {\n        status: string;\n        three_ds_result: {\n            payer_auth_request: string;\n        };\n        errors: BraintreePayment3DSRequestErrors[];\n    };\n}\n\nexport default function isBraintreePaymentRequest3DSError(\n    error: unknown,\n): error is BraintreePaymentRequest3DSError {\n    if (typeof error !== 'object' || error === null) {\n        return false;\n    }\n    /* eslint-disable @typescript-eslint/consistent-type-assertions */\n    return (\n        'name' in error &&\n        'body' in error &&\n        'status' in (error as BraintreePaymentRequest3DSError).body &&\n        'three_ds_result' in (error as BraintreePaymentRequest3DSError).body &&\n        'payer_auth_request' in (error as BraintreePaymentRequest3DSError).body.three_ds_result &&\n        'errors' in (error as BraintreePaymentRequest3DSError).body\n    );\n}\n","import { BraintreeFormFieldsMap, BraintreeStoredCardFieldsMap } from '../index';\n\nexport function isBraintreeFormFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n): fields is BraintreeFormFieldsMap {\n    return 'cardNumber' in fields;\n}\n\nexport function isBraintreeStoredCardFieldsMap(\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n): fields is BraintreeStoredCardFieldsMap {\n    return !!(\n        Object.keys(fields).length > 0 &&\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        ((fields as BraintreeStoredCardFieldsMap).cardCodeVerification ||\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            (fields as BraintreeStoredCardFieldsMap).cardNumberVerification)\n    );\n}\n","import isBraintreeError from './is-braintree-error';\nimport { BraintreeHostedFormError } from '../types';\n\nfunction isValidInvalidFieldKeys(invalidFieldKeys: unknown): invalidFieldKeys is string[] {\n    return (\n        Array.isArray(invalidFieldKeys) && invalidFieldKeys.every((key) => typeof key === 'string')\n    );\n}\n\nexport default function isBraintreeHostedFormError(\n    error: unknown,\n): error is BraintreeHostedFormError {\n    if (!isBraintreeError(error)) {\n        return false;\n    }\n\n    const { details } = error;\n\n    return (\n        details === undefined ||\n        (typeof details === 'object' &&\n            details !== null &&\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            (details as { invalidFieldKeys?: unknown }).invalidFieldKeys === undefined) ||\n        isValidInvalidFieldKeys(details)\n    );\n}\n","import { Dictionary, isEmpty, isNil, omitBy } from 'lodash';\n\nimport {\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BraintreeBillingAddressRequestData,\n    BraintreeClient,\n    BraintreeFormErrorDataKeys,\n    BraintreeFormErrorsData,\n    BraintreeFormFieldsMap,\n    BraintreeFormFieldStyles,\n    BraintreeFormFieldStylesMap,\n    BraintreeFormFieldType,\n    BraintreeFormFieldValidateErrorData,\n    BraintreeFormFieldValidateEventData,\n    BraintreeFormOptions,\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig,\n    BraintreeHostedFieldsState,\n    BraintreeHostedFormError,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n    BraintreeStoredCardFieldsMap,\n    isBraintreeFormFieldsMap,\n    isBraintreeHostedFormError,\n    isBraintreeSupportedCardBrand,\n    TokenizationPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nenum BraintreeHostedFormType {\n    CreditCard,\n    StoredCardVerification,\n}\n\nexport default class BraintreeHostedForm {\n    private cardFields?: BraintreeHostedFields;\n    private formOptions?: BraintreeFormOptions;\n    private type?: BraintreeHostedFormType;\n    private client?: Promise<BraintreeClient>;\n    private clientToken?: string;\n    private isInitializedHostedForm = false;\n\n    constructor(\n        private braintreeScriptLoader: BraintreeScriptLoader,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async initialize(\n        options: BraintreeFormOptions,\n        unsupportedCardBrands?: string[],\n        clientToken?: string,\n    ): Promise<void> {\n        this.clientToken = clientToken;\n        this.formOptions = options;\n        this.type = isBraintreeFormFieldsMap(options.fields)\n            ? BraintreeHostedFormType.CreditCard\n            : BraintreeHostedFormType.StoredCardVerification;\n\n        const fields = this.mapFieldOptions(options.fields, unsupportedCardBrands);\n\n        if (isEmpty(fields)) {\n            this.isInitializedHostedForm = false;\n\n            return;\n        }\n\n        this.cardFields = await this.createHostedFields({\n            fields,\n            styles: options.styles && this.mapStyleOptions(options.styles),\n        });\n\n        this.cardFields?.on('blur', this.handleBlur);\n        this.cardFields?.on('focus', this.handleFocus);\n        this.cardFields?.on('cardTypeChange', this.handleCardTypeChange);\n        this.cardFields?.on('validityChange', this.handleValidityChange);\n        this.cardFields?.on('inputSubmitRequest', this.handleInputSubmitRequest);\n\n        this.isInitializedHostedForm = true;\n    }\n\n    isInitialized(): boolean {\n        return !!this.isInitializedHostedForm;\n    }\n\n    async deinitialize(): Promise<void> {\n        if (this.isInitializedHostedForm) {\n            this.isInitializedHostedForm = false;\n            await this.cardFields?.teardown();\n        }\n    }\n\n    validate(): void {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this.cardFields.getState();\n\n        if (!this.isValidForm(state)) {\n            this.handleValidityChange(state);\n\n            const errors = this.mapValidationErrors(state.fields);\n\n            throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n        }\n    }\n\n    async tokenize(billingAddress: Address): Promise<TokenizationPayload> {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            const payload = await this.cardFields.tokenize(\n                omitBy(\n                    {\n                        billingAddress: billingAddress && this.mapBillingAddress(billingAddress),\n                    },\n                    isNil,\n                ),\n            );\n\n            this.formOptions?.onValidate?.({ isValid: true, errors: {} });\n\n            return {\n                nonce: payload.nonce,\n                bin: payload.details?.bin,\n            };\n        } catch (error) {\n            if (isBraintreeHostedFormError(error)) {\n                const errors = this.mapTokenizeError(error);\n\n                if (errors) {\n                    this.formOptions?.onValidate?.({ isValid: false, errors });\n                    throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    async tokenizeForStoredCardVerification(): Promise<TokenizationPayload> {\n        if (!this.cardFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        try {\n            const payload = await this.cardFields.tokenize();\n\n            this.formOptions?.onValidate?.({ isValid: true, errors: {} });\n\n            return {\n                nonce: payload.nonce,\n                bin: payload.details?.bin,\n            };\n        } catch (error) {\n            if (isBraintreeHostedFormError(error)) {\n                const errors = this.mapTokenizeError(error, true);\n\n                if (errors) {\n                    this.formOptions?.onValidate?.({ isValid: false, errors });\n                    throw new PaymentInvalidFormError(errors as PaymentInvalidFormErrorDetails);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>,\n    ): Promise<BraintreeHostedFields> {\n        const client = await this.getClient();\n        const hostedFields = await this.braintreeScriptLoader.loadHostedFields();\n\n        const currentSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n        const hostedFieldsOptions =\n            currentSdkVersion === BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION\n                ? { ...options, preventCursorJumps: true }\n                : options;\n\n        return hostedFields.create({ ...hostedFieldsOptions, client });\n    }\n\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this.client) {\n            const client = await this.braintreeScriptLoader.loadClient();\n\n            this.client = client.create({ authorization: this.clientToken });\n        }\n\n        return this.client;\n    }\n\n    private mapBillingAddress(billingAddress: Address): BraintreeBillingAddressRequestData {\n        return {\n            countryName: billingAddress.country,\n            postalCode: billingAddress.postalCode,\n            streetAddress: billingAddress.address2\n                ? `${billingAddress.address1} ${billingAddress.address2}`\n                : billingAddress.address1,\n        };\n    }\n\n    private mapFieldOptions(\n        fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap,\n        unsupportedCardBrands?: string[],\n    ): BraintreeHostedFieldsCreatorConfig['fields'] {\n        if (isBraintreeFormFieldsMap(fields)) {\n            const supportedCardBrands: Partial<Record<string, boolean>> = {};\n\n            unsupportedCardBrands?.forEach((cardBrand) => {\n                if (isBraintreeSupportedCardBrand(cardBrand)) {\n                    supportedCardBrands[cardBrand] = false;\n                }\n            });\n\n            return omitBy(\n                {\n                    number: {\n                        container: `#${fields.cardNumber.containerId}`,\n                        placeholder: fields.cardNumber.placeholder,\n                        internalLabel: fields.cardNumber.accessibilityLabel,\n                        ...(Object.keys(supportedCardBrands).length > 0\n                            ? { supportedCardBrands }\n                            : {}),\n                    },\n                    expirationDate: {\n                        container: `#${fields.cardExpiry.containerId}`,\n                        placeholder: fields.cardExpiry.placeholder,\n                        internalLabel: fields.cardExpiry.accessibilityLabel,\n                    },\n                    cvv: fields.cardCode && {\n                        container: `#${fields.cardCode.containerId}`,\n                        placeholder: fields.cardCode.placeholder,\n                        internalLabel: fields.cardCode.accessibilityLabel,\n                    },\n                    cardholderName: {\n                        container: `#${fields.cardName.containerId}`,\n                        placeholder: fields.cardName.placeholder,\n                        internalLabel: fields.cardName.accessibilityLabel,\n                    },\n                },\n                isNil,\n            );\n        }\n\n        return omitBy(\n            {\n                number: fields.cardNumberVerification && {\n                    container: `#${fields.cardNumberVerification.containerId}`,\n                    placeholder: fields.cardNumberVerification.placeholder,\n                },\n                cvv: fields.cardCodeVerification && {\n                    container: `#${fields.cardCodeVerification.containerId}`,\n                    placeholder: fields.cardCodeVerification.placeholder,\n                },\n            },\n            isNil,\n        );\n    }\n\n    private mapStyleOptions(\n        options: BraintreeFormFieldStylesMap,\n    ): BraintreeHostedFieldsCreatorConfig['styles'] {\n        const mapStyles = (styles: BraintreeFormFieldStyles = {}) =>\n            omitBy(\n                {\n                    color: styles.color,\n                    'font-family': styles.fontFamily,\n                    'font-size': styles.fontSize,\n                    'font-weight': styles.fontWeight,\n                },\n                isNil,\n            ) as Dictionary<string>;\n\n        return {\n            input: mapStyles(options.default),\n            '.invalid': mapStyles(options.error),\n            ':focus': mapStyles(options.focus),\n        };\n    }\n\n    private mapFieldType(type: string): BraintreeFormFieldType {\n        switch (type) {\n            case 'number':\n                return this.type === BraintreeHostedFormType.StoredCardVerification\n                    ? BraintreeFormFieldType.CardNumberVerification\n                    : BraintreeFormFieldType.CardNumber;\n\n            case 'expirationDate':\n                return BraintreeFormFieldType.CardExpiry;\n\n            case 'cvv':\n                return this.type === BraintreeHostedFormType.StoredCardVerification\n                    ? BraintreeFormFieldType.CardCodeVerification\n                    : BraintreeFormFieldType.CardCode;\n\n            case 'cardholderName':\n                return BraintreeFormFieldType.CardName;\n\n            default:\n                throw new Error('Unexpected field type');\n        }\n    }\n\n    private mapErrors(fields: BraintreeHostedFieldsState['fields']): BraintreeFormErrorsData {\n        const errors: BraintreeFormErrorsData = {};\n\n        if (fields) {\n            // eslint-disable-next-line no-restricted-syntax\n            for (const [key, value] of Object.entries(fields)) {\n                if (value && this.isValidParam(key)) {\n                    const { isValid, isEmpty, isPotentiallyValid } = value;\n\n                    errors[key] = {\n                        isValid,\n                        isEmpty,\n                        isPotentiallyValid,\n                    };\n                }\n            }\n        }\n\n        return errors;\n    }\n\n    private mapValidationErrors(\n        fields: BraintreeHostedFieldsState['fields'],\n    ): BraintreeFormFieldValidateEventData['errors'] {\n        return (Object.keys(fields) as Array<keyof BraintreeHostedFieldsState['fields']>).reduce(\n            (result, fieldKey) => ({\n                ...result,\n                [this.mapFieldType(fieldKey)]: fields[fieldKey]?.isValid\n                    ? undefined\n                    : [this.createInvalidError(this.mapFieldType(fieldKey))],\n            }),\n            {},\n        );\n    }\n\n    private mapTokenizeError(\n        error: BraintreeHostedFormError,\n        isStoredCard = false,\n    ): BraintreeFormFieldValidateEventData['errors'] | undefined {\n        if (error.code === 'HOSTED_FIELDS_FIELDS_EMPTY') {\n            const cvv = [this.createRequiredError(this.mapFieldType('cvv'))];\n\n            if (isStoredCard) {\n                return { [this.mapFieldType('cvv')]: cvv };\n            }\n\n            return {\n                [this.mapFieldType('cvv')]: cvv,\n                [this.mapFieldType('expirationDate')]: [\n                    this.createRequiredError(this.mapFieldType('expirationDate')),\n                ],\n                [this.mapFieldType('number')]: [\n                    this.createRequiredError(this.mapFieldType('number')),\n                ],\n                [this.mapFieldType('cardholderName')]: [\n                    this.createRequiredError(this.mapFieldType('cardholderName')),\n                ],\n            };\n        }\n\n        return error.details?.invalidFieldKeys?.reduce((result, key) => {\n            const type = this.mapFieldType(key);\n\n            return {\n                ...result,\n                [type]: [this.createInvalidError(type)],\n            };\n        }, {});\n    }\n\n    private createRequiredError(\n        fieldType: BraintreeFormFieldType,\n    ): BraintreeFormFieldValidateErrorData {\n        const messages = {\n            [BraintreeFormFieldType.CardCode]: 'CVV is required',\n            [BraintreeFormFieldType.CardCodeVerification]: 'CVV is required',\n            [BraintreeFormFieldType.CardNumber]: 'Credit card number is required',\n            [BraintreeFormFieldType.CardNumberVerification]: 'Credit card number is required',\n            [BraintreeFormFieldType.CardExpiry]: 'Expiration date is required',\n            [BraintreeFormFieldType.CardName]: 'Full name is required',\n        };\n\n        return {\n            fieldType,\n            message: messages[fieldType] ?? 'Field is required',\n            type: 'required',\n        };\n    }\n\n    private createInvalidError(\n        fieldType: BraintreeFormFieldType,\n    ): BraintreeFormFieldValidateErrorData {\n        const formFields = {\n            [BraintreeFormFieldType.CardCode]: {\n                message: 'Invalid card code',\n                type: 'invalid_card_code',\n            },\n            [BraintreeFormFieldType.CardCodeVerification]: {\n                message: 'Invalid card code',\n                type: 'invalid_card_code',\n            },\n            [BraintreeFormFieldType.CardNumber]: {\n                message: 'Invalid card number',\n                type: 'invalid_card_number',\n            },\n            [BraintreeFormFieldType.CardNumberVerification]: {\n                message: 'Invalid card number',\n                type: 'invalid_card_number',\n            },\n            [BraintreeFormFieldType.CardExpiry]: {\n                message: 'Invalid card expiry',\n                type: 'invalid_card_expiry',\n            },\n            [BraintreeFormFieldType.CardName]: {\n                message: 'Invalid card name',\n                type: 'invalid_card_name',\n            },\n        };\n\n        return {\n            fieldType,\n            message: formFields[fieldType]?.message ?? 'Invalid field',\n            type: formFields[fieldType]?.type ?? 'invalid',\n        };\n    }\n\n    private handleBlur = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onBlur?.({\n            fieldType: this.mapFieldType(event.emittedBy),\n            errors: this.mapErrors(event.fields),\n        });\n    };\n\n    private handleFocus = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onFocus?.({\n            fieldType: this.mapFieldType(event.emittedBy),\n        });\n    };\n\n    private handleCardTypeChange = (event: BraintreeHostedFieldsState): void => {\n        const cardType =\n            event.cards.length === 1\n                ? event.cards[0].type.replace(/^master-card$/, 'mastercard')\n                : undefined;\n\n        this.formOptions?.onCardTypeChange?.({ cardType });\n    };\n\n    private handleInputSubmitRequest = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onEnter?.({\n            fieldType: this.mapFieldType(event.emittedBy),\n        });\n    };\n\n    private handleValidityChange = (event: BraintreeHostedFieldsState): void => {\n        this.formOptions?.onValidate?.({\n            isValid: this.isValidForm(event),\n            errors: this.mapValidationErrors(event.fields),\n        });\n    };\n\n    private isValidForm(event: BraintreeHostedFieldsState): boolean {\n        return (\n            Object.keys(event.fields) as Array<keyof BraintreeHostedFieldsState['fields']>\n        ).every((key) => event.fields[key]?.isValid);\n    }\n\n    private isValidParam(key: string): key is BraintreeFormErrorDataKeys {\n        return [\n            'number',\n            'cvv',\n            'expirationDate',\n            'postalCode',\n            'cardholderName',\n            'cardType',\n        ].includes(key);\n    }\n}\n","import { BraintreeSupportedCardBrands } from '../types';\n\nexport const isBraintreeSupportedCardBrand = (\n    cardBrand: string,\n): cardBrand is BraintreeSupportedCardBrands => {\n    const supportedCardBrands = Object.values(BraintreeSupportedCardBrands);\n\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return supportedCardBrands.includes(cardBrand as BraintreeSupportedCardBrands);\n};\n\nexport default isBraintreeSupportedCardBrand;\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeCreditCardPaymentStrategy from './braintree-credit-card-payment-strategy';\nimport BraintreeHostedForm from '../braintree-hosted-form/braintree-hosted-form';\n\nconst createBraintreeCreditCardPaymentStrategy: PaymentStrategyFactory<\n    BraintreeCreditCardPaymentStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        getScriptLoader(),\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        braintreeScriptLoader,\n        braintreeHostWindow,\n    );\n\n    const braintreeHostedForm = new BraintreeHostedForm(\n        braintreeScriptLoader,\n        braintreeSDKVersionManager,\n    );\n\n    return new BraintreeCreditCardPaymentStrategy(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n        braintreeHostedForm,\n    );\n};\n\nexport default toResolvableModule(createBraintreeCreditCardPaymentStrategy, [{ id: 'braintree' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCustomerInitializeOptions, {\n    WithBraintreePaypalCustomerInitializeOptions,\n} from './braintree-paypal-customer-initialize-options';\n\nexport default class BraintreePaypalCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreePaypalCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypal, methodId } = options;\n        const { container, onError } = braintreepaypal || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal.container\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<BraintreeInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n            if (!paymentMethod.clientToken) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n            }\n        } catch (_e) {\n            state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        const { clientToken, config, initializationData } = paymentMethod;\n        const { paymentButtonStyles } = initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n            commit: false,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                methodId,\n                Boolean(config.testMode),\n                checkoutTopButtonStyles,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, container, onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n        methodId: string,\n        testMode: boolean,\n        buttonStyles: PaypalStyleOptions,\n    ): void {\n        const { container, onClick = noop } = braintreepaypal;\n\n        const { paypal } = this.braintreeHostWindow;\n        const fundingSource = paypal?.FUNDING.PAYPAL;\n\n        if (paypal && fundingSource) {\n            const paypalButtonRender = paypal.Buttons({\n                env: this.braintreeIntegrationService.getBraintreeEnv(testMode),\n                fundingSource,\n                style: { ...buttonStyles, height: DefaultCheckoutButtonHeight },\n                createOrder: () =>\n                    this.setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this.tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        braintreepaypal,\n                    ),\n                onClick,\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${container}`);\n            }\n        } else {\n            this.braintreeIntegrationService.removeElement(container);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        try {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            const state = this.paymentIntegrationService.getState();\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currency = state.getCartOrThrow().currency.code;\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        braintreepaypal: BraintreePaypalCustomerInitializeOptions,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            const { container, onError } = braintreepaypal;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCustomerStrategy from './braintree-paypal-customer-strategy';\n\nconst createBraintreePaypalCustomerStrategy: CustomerStrategyFactory<\n    BraintreePaypalCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCustomerStrategy, [\n    { id: 'braintreepaypal' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    DefaultCheckoutButtonHeight,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditCustomerInitializeOptions, {\n    WithBraintreePaypalCreditCustomerInitializeOptions,\n} from './braintree-paypal-credit-customer-initialize-options';\n\nexport default class BraintreePaypalCreditCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreePaypalCreditCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypalcredit, methodId } = options;\n        const { container, onError } = braintreepaypalcredit || {};\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit.container\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<BraintreeInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        const { clientToken, config, initializationData } = paymentMethod;\n        const { paymentButtonStyles } = initializationData || {};\n        const { checkoutTopButtonStyles } = paymentButtonStyles || {};\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n            commit: false,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                methodId,\n                Boolean(config.testMode),\n                { ...checkoutTopButtonStyles, height: DefaultCheckoutButtonHeight },\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, container, onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n        testMode: boolean,\n        buttonStyles: PaypalStyleOptions,\n    ): void {\n        const { container, onClick = noop } = braintreepaypalcredit;\n        const { paypal } = this.braintreeHostWindow;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n\n            fundingSources.forEach((fundingSource) => {\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyles,\n                        createOrder: () =>\n                            this.setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this.tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                braintreepaypalcredit,\n                            ),\n                        onClick,\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${container}`);\n                        hasRenderedSmartButton = true;\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this.braintreeIntegrationService.removeElement(container);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        try {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            const state = this.paymentIntegrationService.getState();\n            const amount = state.getCheckoutOrThrow().outstandingBalance;\n            const currency = state.getCartOrThrow().currency.code;\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n            const address = customer?.addresses[0];\n            const shippingAddressOverride = address\n                ? this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error) {\n            const { container, onError } = braintreepaypalcredit;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        braintreepaypalcredit: BraintreePaypalCreditCustomerInitializeOptions,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            const { container, onError } = braintreepaypalcredit;\n\n            this.handleError(error, container, onError);\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditCustomerStrategy from './braintree-paypal-credit-customer-strategy';\n\nconst createBraintreePaypalCreditCustomerStrategy: CustomerStrategyFactory<\n    BraintreePaypalCreditCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalCreditCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCreditCustomerStrategy, [\n    { id: 'braintreepaypalcredit' },\n]);\n","import {\n    BraintreeInitializationData,\n    getFastlaneStyles,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithBraintreeFastlaneCustomerInitializeOptions } from './braintree-fastlane-customer-initialize-options';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nexport default class BraintreeFastlaneCustomerStrategy implements CustomerStrategy {\n    private isAcceleratedCheckoutEnabled = false;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private braintreeFastlaneUtils: BraintreeFastlaneUtils,\n    ) {}\n\n    async initialize({\n        methodId,\n        braintreefastlane,\n    }: CustomerInitializeOptions & WithBraintreeFastlaneCustomerInitializeOptions): Promise<void> {\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const paymentMethod = await this.getValidPaymentMethodOrThrow(methodId);\n\n        const { isAcceleratedCheckoutEnabled, isFastlaneStylingEnabled } =\n            paymentMethod.initializationData || {};\n\n        const paypalFastlaneStylesSettings = isFastlaneStylingEnabled\n            ? paymentMethod.initializationData?.fastlaneStyles\n            : undefined;\n\n        this.isAcceleratedCheckoutEnabled = !!isAcceleratedCheckoutEnabled;\n\n        try {\n            if (this.isAcceleratedCheckoutEnabled) {\n                const fastlaneStyles = getFastlaneStyles(\n                    paypalFastlaneStylesSettings,\n                    braintreefastlane?.styles,\n                );\n\n                await this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(\n                    paymentMethod.id,\n                    fastlaneStyles,\n                );\n            }\n        } catch (_) {\n            // Info: Do not throw anything here to avoid blocking customer from passing checkout flow\n        }\n\n        return Promise.resolve();\n    }\n\n    async deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signInCustomer(credentials, options);\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n    }\n\n    async executePaymentMethodCheckout(\n        options?: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<void> {\n        const { checkoutPaymentMethodExecuted, continueWithCheckoutCallback } = options || {};\n\n        if (typeof continueWithCheckoutCallback !== 'function') {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const customer = state.getCustomerOrThrow();\n\n        if (this.isAcceleratedCheckoutEnabled && customer.isGuest) {\n            const shouldRunAuthenticationFlow = await this.shouldRunAuthenticationFlow();\n\n            if (\n                checkoutPaymentMethodExecuted &&\n                typeof checkoutPaymentMethodExecuted === 'function'\n            ) {\n                checkoutPaymentMethodExecuted();\n            }\n\n            if (shouldRunAuthenticationFlow) {\n                await this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow(\n                    undefined,\n                    true,\n                );\n            }\n        }\n\n        continueWithCheckoutCallback();\n    }\n\n    // TODO: remove this method after A/B testing finished\n    private async shouldRunAuthenticationFlow(): Promise<boolean> {\n        const primaryMethodId = 'braintreeacceleratedcheckout';\n\n        try {\n            // Info: we should load payment method each time to detect if the user\n            // should be in a test or in a control group\n            await this.paymentIntegrationService.loadPaymentMethod(primaryMethodId);\n\n            const state = this.paymentIntegrationService.getState();\n            const paymentMethod =\n                state.getPaymentMethodOrThrow<BraintreeInitializationData>(primaryMethodId);\n\n            // Info: shouldRunAcceleratedCheckout is responsible for the flow of A/B testing purposes\n            // when shouldRunAcceleratedCheckout is true, the lookup PayPal Connect method should be called,\n            // otherwise AcceleratedCheckout should not be available for the customer\n            return paymentMethod.initializationData?.shouldRunAcceleratedCheckout || false;\n        } catch (_) {\n            return false;\n        }\n    }\n\n    private async getValidPaymentMethodOrThrow(\n        methodId: string,\n    ): Promise<PaymentMethod<BraintreeInitializationData>> {\n        let validPaymentMethodId = methodId;\n\n        try {\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        } catch {\n            validPaymentMethodId =\n                methodId === 'braintree' ? 'braintreeacceleratedcheckout' : 'braintree';\n            await this.paymentIntegrationService.loadPaymentMethod(validPaymentMethodId);\n        }\n\n        return this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<BraintreeInitializationData>(validPaymentMethodId);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeFastlaneCustomerStrategy from './braintree-fastlane-customer-strategy';\nimport BraintreeFastlaneUtils from './braintree-fastlane-utils';\n\nconst createBraintreeFastlaneCustomerStrategy: CustomerStrategyFactory<\n    BraintreeFastlaneCustomerStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n    const braintreeFastlaneUtils = new BraintreeFastlaneUtils(\n        paymentIntegrationService,\n        braintreeIntegrationService,\n    );\n\n    return new BraintreeFastlaneCustomerStrategy(paymentIntegrationService, braintreeFastlaneUtils);\n};\n\n// Info: braintree method id was added only for A/B testing purposes.\n// The main reason why we can't go in other way, because braintreeacceleratedcheckout\n// may be turned on only when BE knows customer's email address (to understand should we show the feature for the user or not).\n// So { id: 'braintree' }, should be removed after A/B testing\nexport default toResolvableModule(createBraintreeFastlaneCustomerStrategy, [\n    { id: 'braintreeacceleratedcheckout' },\n    { id: 'braintree' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithBraintreeVisaCheckoutCustomerInitializeOptions } from './braintree-visa-customer-initialize-options';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private buttonClassName = 'visa-checkout-wrapper';\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithBraintreeVisaCheckoutCustomerInitializeOptions,\n    ): Promise<void> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.',\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const checkout = state.getCheckoutOrThrow();\n\n        const { clientToken, config } = state.getPaymentMethodOrThrow(methodId);\n\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const { container, onError } = visaCheckoutOptions;\n\n        this.onError = onError || noop;\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: storeConfig.currency.code,\n                subtotal: String(checkout.subtotal),\n            },\n            settings: {\n                locale: storeConfig.storeProfile.storeLanguage,\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        const signInButton = this.createSignInButton(container, this.buttonClassName);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on(\n            'payment.success',\n            (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                this.tokenizePayment(braintreeVisaCheckout, paymentSuccessPayload)\n                    .then(() => this.paymentIntegrationService.loadCheckout())\n                    .catch((error) => this.handleError(error)),\n        );\n\n        visaCheckoutInstance.on('payment.error', (_, error) => this.handleError(error));\n\n        signInButton.style.visibility = 'visible';\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.',\n        );\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        await this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private async tokenizePayment(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.mapToVisaCheckoutAddress(shipping),\n                billingAddress = this.mapToVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private mapToVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Unable to proceed because the provided container ID is not valid.');\n        }\n\n        return this.insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.style.width = 'max-content';\n\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n\n    private handleError(error: Error) {\n        if (typeof this.onError === 'function') {\n            this.onError(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutCustomerStrategy from './braintree-visa-checkout-customer-strategy';\n\nconst createBraintreeVisaCheckoutCustomerStrategy: CustomerStrategyFactory<\n    BraintreeVisaCheckoutCustomerStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutCustomerStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutCustomerStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import { isNil, omitBy } from 'lodash';\n\nimport { PaypalStyleOptions } from '@bigcommerce/checkout-sdk/braintree-utils';\n\nexport default function getValidButtonStyle(style?: PaypalStyleOptions): PaypalStyleOptions {\n    const { color, fundingicons, height = 40, layout, shape, size, tagline } = style || {};\n\n    const validStyles = {\n        color,\n        fundingicons,\n        height: getValidHeight(height),\n        layout,\n        shape: shape || 'rect',\n        size,\n        tagline,\n    };\n\n    return omitBy(validStyles, isNil);\n}\n\nfunction getValidHeight(height: number | string): number {\n    const minHeight = 25;\n    const defaultHeight = 40;\n    const maxHeight = 55;\n\n    const currentHeight = Number(height);\n\n    if (!currentHeight || Number.isNaN(currentHeight)) {\n        return defaultHeight;\n    }\n\n    if (currentHeight > maxHeight) {\n        return maxHeight;\n    }\n\n    if (currentHeight < minHeight) {\n        return minHeight;\n    }\n\n    return currentHeight;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    PaypalAuthorizeData,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalButtonInitializeOptions, {\n    WithBraintreePaypalButtonInitializeOptions,\n} from './braintree-paypal-button-initialize-options';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypal, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypal) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypal.buyNowInitializeOptions) {\n            if (!braintreepaypal.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypal.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypal,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypal.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypal;\n        const { paypal } = this.braintreeHostWindow;\n\n        if (paypal) {\n            const paypalButtonRender = paypal.Buttons({\n                env: testMode ? 'sandbox' : 'production',\n                fundingSource: paypal.FUNDING.PAYPAL,\n                style: getValidButtonStyle(style),\n                createOrder: () =>\n                    this.setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\n                    this.tokenizePayment(\n                        authorizeData,\n                        braintreePaypalCheckout,\n                        methodId,\n                        shouldProcessPayment,\n                        onAuthorizeError,\n                    ),\n            });\n\n            if (paypalButtonRender.isEligible()) {\n                paypalButtonRender.render(`#${containerId}`);\n            } else if (onEligibilityFailure && typeof onEligibilityFailure === 'function') {\n                onEligibilityFailure();\n            }\n        } else {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypal;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount;\n            const currencyCode = buyNowCart\n                ? braintreepaypal.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: false,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalButtonStrategy from './braintree-paypal-button-strategy';\n\nconst createBraintreePaypalButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n\n    return new BraintreePaypalButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalButtonStrategy, [{ id: 'braintreepaypal' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeError,\n    BraintreeHostWindow,\n    BraintreeInitializationData,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreePaypalCheckout,\n    BraintreePaypalSdkCreatorConfig,\n    BraintreeTokenizePayload,\n    isBraintreeError,\n    MessagingPlacements,\n    PaypalAuthorizeData,\n    PaypalButtonStyleLabelOption,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    StandardError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport getValidButtonStyle from '../get-valid-button-style';\nimport mapToBraintreeShippingAddressOverride from '../map-to-braintree-shipping-address-override';\n\nimport BraintreePaypalCreditButtonInitializeOptions, {\n    WithBraintreePaypalCreditButtonInitializeOptions,\n} from './braintree-paypal-credit-button-initialize-options';\n\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\n    private buyNowCartId: string | undefined;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeIntegrationService: BraintreeIntegrationService,\n        private braintreeMessages: BraintreeMessages,\n        private braintreeHostWindow: BraintreeHostWindow,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreePaypalCreditButtonInitializeOptions,\n    ): Promise<void> {\n        const { braintreepaypalcredit, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        if (!braintreepaypalcredit) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\n            );\n        }\n\n        let state = this.paymentIntegrationService.getState();\n        let currencyCode: string;\n\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\n            if (!braintreepaypalcredit.currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            currencyCode = braintreepaypalcredit.currencyCode;\n        } else {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n\n            state = this.paymentIntegrationService.getState();\n            currencyCode = state.getCartOrThrow().currency.code;\n        }\n\n        const paymentMethod = state.getPaymentMethodOrThrow<BraintreeInitializationData>(methodId);\n        const { clientToken, config, initializationData } = paymentMethod;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\n            currency: currencyCode,\n            intent: initializationData.intent,\n            isCreditEnabled: initializationData.isCreditEnabled,\n        };\n\n        // TODO: remove banner rendering implementation in this file when PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk will be rolled out to 100%\n        const features = state.getStoreConfig()?.checkoutSettings.features ?? {};\n        const isBannerImplementationDisabled = isExperimentEnabled(\n            features,\n            'PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk',\n        );\n\n        const paypalCheckoutSuccessCallback = (\n            braintreePaypalCheckout: BraintreePaypalCheckout,\n        ) => {\n            if (!isBannerImplementationDisabled && braintreepaypalcredit.messagingContainerId) {\n                this.renderPayPalMessages(methodId, braintreepaypalcredit.messagingContainerId);\n            }\n\n            this.renderPayPalButton(\n                braintreePaypalCheckout,\n                braintreepaypalcredit,\n                containerId,\n                methodId,\n                !!config.testMode,\n            );\n        };\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\n            this.handleError(error, containerId, braintreepaypalcredit.onError);\n\n        this.braintreeIntegrationService.initialize(clientToken);\n        await this.braintreeIntegrationService.getPaypalCheckout(\n            paypalCheckoutOptions,\n            paypalCheckoutSuccessCallback,\n            paypalCheckoutErrorCallback,\n        );\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeIntegrationService.teardown();\n    }\n\n    private renderPayPalMessages(methodId: string, messagingContainerId: string): void {\n        this.braintreeMessages.render(methodId, messagingContainerId, MessagingPlacements.CART);\n    }\n\n    private renderPayPalButton(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        containerId: string,\n        methodId: string,\n        testMode: boolean,\n    ): void {\n        const { style, shouldProcessPayment, onAuthorizeError, onEligibilityFailure } =\n            braintreepaypalcredit;\n        const { paypal } = this.braintreeHostWindow;\n\n        let hasRenderedSmartButton = false;\n\n        if (paypal) {\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\n\n            fundingSources.forEach((fundingSource) => {\n                const buttonStyle =\n                    fundingSource === paypal.FUNDING.CREDIT\n                        ? {\n                              label: PaypalButtonStyleLabelOption.CREDIT,\n                              ...getValidButtonStyle(style),\n                          }\n                        : getValidButtonStyle(style);\n\n                if (!hasRenderedSmartButton) {\n                    const paypalButtonRender = paypal.Buttons({\n                        env: testMode ? 'sandbox' : 'production',\n                        fundingSource,\n                        style: buttonStyle,\n                        createOrder: () =>\n                            this.setupPayment(\n                                braintreePaypalCheckout,\n                                braintreepaypalcredit,\n                                methodId,\n                            ),\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\n                            this.tokenizePayment(\n                                authorizeData,\n                                braintreePaypalCheckout,\n                                methodId,\n                                shouldProcessPayment,\n                                onAuthorizeError,\n                            ),\n                    });\n\n                    if (paypalButtonRender.isEligible()) {\n                        paypalButtonRender.render(`#${containerId}`);\n                        hasRenderedSmartButton = true;\n                    } else if (\n                        paypal.FUNDING.CREDIT &&\n                        onEligibilityFailure &&\n                        typeof onEligibilityFailure === 'function'\n                    ) {\n                        // the condition is related to paypal.FUNDING.CREDIT because when paypal.FUNDING.PAYLATER is not eligible then\n                        // CREDIT button should be configured and triggered to render with eligibility check\n                        // and if it is not eligible, then onEligibilityFailure callback should be called\n                        onEligibilityFailure();\n                    }\n                }\n            });\n        }\n\n        if (!paypal || !hasRenderedSmartButton) {\n            this.braintreeIntegrationService.removeElement(containerId);\n        }\n    }\n\n    private async setupPayment(\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\n        methodId: string,\n    ): Promise<string | void> {\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\n\n        try {\n            const buyNowCart =\n                typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n                    ? await this.createBuyNowCart(\n                          buyNowInitializeOptions.getBuyNowCartRequestBody(),\n                      )\n                    : undefined;\n\n            this.buyNowCartId = buyNowCart?.id;\n\n            const state = this.paymentIntegrationService.getState();\n            const customer = state.getCustomer();\n            const paymentMethod: PaymentMethod<BraintreeInitializationData> =\n                state.getPaymentMethodOrThrow(methodId);\n\n            const amount = buyNowCart ? buyNowCart.cartAmount : state.getCartOrThrow().cartAmount; // state.getCheckoutOrThrow().outstandingBalance\n            const currencyCode = buyNowCart\n                ? braintreepaypalcredit.currencyCode\n                : state.getCartOrThrow().currency.code;\n\n            const address = shippingAddress || customer?.addresses[0];\n\n            const shippingAddressOverride = address\n                ? mapToBraintreeShippingAddressOverride(address)\n                : undefined;\n\n            return await braintreePaypalCheckout.createPayment({\n                flow: 'checkout',\n                enableShippingAddress: true,\n                shippingAddressEditable: false,\n                shippingAddressOverride,\n                amount,\n                currency: currencyCode,\n                offerCredit: true,\n                intent: paymentMethod.initializationData?.intent,\n            });\n        } catch (error: unknown) {\n            if (onPaymentError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onPaymentError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async tokenizePayment(\n        authorizeData: PaypalAuthorizeData,\n        braintreePaypalCheckout: BraintreePaypalCheckout,\n        methodId: string,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void,\n    ): Promise<BraintreeTokenizePayload | void> {\n        try {\n            const { deviceData } = await this.braintreeIntegrationService.getDataCollector({\n                paypal: true,\n            });\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\n            const { details, nonce } = tokenizePayload;\n            const billingAddress =\n                this.braintreeIntegrationService.mapToLegacyBillingAddress(details);\n            const shippingAddress =\n                this.braintreeIntegrationService.mapToLegacyShippingAddress(details);\n\n            this.formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                nonce,\n                device_data: deviceData,\n                billing_address: JSON.stringify(billingAddress),\n                shipping_address: JSON.stringify(shippingAddress),\n                ...(this.buyNowCartId && { cart_id: this.buyNowCartId }),\n            });\n\n            return tokenizePayload;\n        } catch (error) {\n            if (onError) {\n                if (isBraintreeError(error) || error instanceof StandardError) {\n                    onError(error);\n                }\n            }\n\n            throw error;\n        }\n    }\n\n    private async createBuyNowCart(buyNowCardRequestBody?: BuyNowCartRequestBody | void) {\n        if (!buyNowCardRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            return await this.paymentIntegrationService.createBuyNowCart(buyNowCardRequestBody);\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private handleError(\n        error: unknown,\n        buttonContainerId: string,\n        onErrorCallback?: (error: BraintreeError | StandardError) => void,\n    ): void {\n        this.braintreeIntegrationService.removeElement(buttonContainerId);\n\n        if (onErrorCallback && isBraintreeError(error)) {\n            onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeIntegrationService,\n    BraintreeMessages,\n    BraintreeScriptLoader,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreePaypalCreditButtonStrategy from './braintree-paypal-credit-button-strategy';\n\nconst createBraintreePaypalCreditButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreePaypalCreditButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeIntegrationService = new BraintreeIntegrationService(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n        braintreeHostWindow,\n    );\n    const braintreeMessages = new BraintreeMessages(paymentIntegrationService);\n\n    return new BraintreePaypalCreditButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeIntegrationService,\n        braintreeMessages,\n        braintreeHostWindow,\n    );\n};\n\nexport default toResolvableModule(createBraintreePaypalCreditButtonStrategy, [\n    { id: 'braintreepaypalcredit' },\n]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    BraintreeDataCollector,\n    BraintreeSdk,\n    BraintreeVisaCheckout,\n    VisaCheckoutAddress,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    Address,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    LegacyAddress,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class BraintreeVisaCheckoutButtonStrategy implements CheckoutButtonStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const { clientToken, initializationData, config } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.braintreeSdk.initialize(clientToken);\n\n        const braintreeVisaCheckout = await this.braintreeSdk.getBraintreeVisaCheckout();\n\n        const {\n            currency: { code },\n            cartAmount,\n        } = state.getCartOrThrow();\n\n        const visaCheckoutInstance = await this.braintreeSdk.getVisaCheckoutSdk(config.testMode);\n\n        const initOptions = braintreeVisaCheckout.createInitOptions({\n            paymentRequest: {\n                currencyCode: code,\n                subtotal: String(cartAmount),\n            },\n            settings: {\n                shipping: {\n                    collectShipping: true,\n                },\n            },\n        });\n\n        this.createSignInButton(containerId);\n\n        await visaCheckoutInstance.init(initOptions);\n\n        visaCheckoutInstance.on('payment.success', async (payment) => {\n            await this.paymentSuccess(braintreeVisaCheckout, payment);\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private async paymentSuccess(\n        braintreeVisaCheckout: BraintreeVisaCheckout,\n        payment: VisaCheckoutPaymentSuccessPayload,\n    ) {\n        return Promise.all([\n            braintreeVisaCheckout.tokenize(payment),\n            this.braintreeSdk.getDataCollectorOrThrow(),\n        ]).then(([payload, deviceData]) => {\n            const state = this.paymentIntegrationService.getState();\n\n            const shipping = state.getShippingAddress();\n            const billing = state.getBillingAddress();\n\n            const {\n                shippingAddress = this.toVisaCheckoutAddress(shipping),\n                billingAddress = this.toVisaCheckoutAddress(billing),\n            } = payload;\n\n            return this.postForm(\n                {\n                    ...payload,\n                    shippingAddress,\n                    billingAddress,\n                },\n                deviceData,\n            );\n        });\n    }\n\n    private postForm(\n        paymentData: VisaCheckoutTokenizedPayload,\n        dataCollector: BraintreeDataCollector,\n    ) {\n        const { userData, billingAddress, shippingAddress, details: cardInformation } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this.formPoster.postForm('/checkout.php', {\n            payment_type: paymentData.type,\n            nonce: paymentData.nonce,\n            provider: 'braintreevisacheckout',\n            action: 'set_external_checkout',\n            device_data: deviceData,\n            card_information: JSON.stringify({\n                type: cardInformation.cardType,\n                number: cardInformation.lastTwo,\n            }),\n            billing_address: JSON.stringify(this.getAddress(userEmail, billingAddress)),\n            shipping_address: JSON.stringify(this.getAddress(userEmail, shippingAddress)),\n        });\n    }\n\n    private toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return this.insertVisaCheckoutButton(container);\n    }\n\n    private insertVisaCheckoutButton(container: Element): HTMLElement {\n        const buttonSource =\n            'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n\n        visaCheckoutButton.style.display = 'flex';\n        visaCheckoutButton.style.flexDirection = 'column';\n        visaCheckoutButton.style.alignItems = 'flex-end';\n\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n    VisaCheckoutHostWindow,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVisaCheckoutButtonStrategy from './braintree-visa-checkout-button-strategy';\n\nconst createBraintreeVisaCheckoutButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVisaCheckoutButtonStrategy\n> = (paymentIntegrationService) => {\n    const hostWindow: VisaCheckoutHostWindow & BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(getScriptLoader(), hostWindow, braintreeSDKVersionManager),\n    );\n\n    return new BraintreeVisaCheckoutButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVisaCheckoutButtonStrategy, [\n    { id: 'braintreevisacheckout' },\n]);\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyBillingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\n\n    const address = billingAddress || shippingAddress;\n\n    return {\n        email,\n        first_name: firstName,\n        last_name: lastName,\n        phone_number: phone,\n        address_line_1: address?.line1,\n        address_line_2: address?.line2,\n        city: address?.city,\n        state: address?.state,\n        country_code: address?.countryCode,\n        postal_code: address?.postalCode,\n    };\n}\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BraintreeTokenizationDetails } from './types';\n\nexport default function mapToLegacyShippingAddress(\n    details: BraintreeTokenizationDetails,\n): Partial<LegacyAddress> {\n    const { email, phone, shippingAddress } = details;\n\n    const recipientName = shippingAddress?.recipientName || '';\n    const [firstName, lastName] = recipientName.split(' ');\n\n    return {\n        email,\n        first_name: firstName || '',\n        last_name: lastName || '',\n        phone_number: phone,\n        address_line_1: shippingAddress?.line1,\n        address_line_2: shippingAddress?.line2,\n        city: shippingAddress?.city,\n        state: shippingAddress?.state,\n        country_code: shippingAddress?.countryCode,\n        postal_code: shippingAddress?.postalCode,\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { noop } from 'lodash';\n\nimport {\n    BraintreeError,\n    BraintreeSdk,\n    BraintreeTokenizePayload,\n    BraintreeVenmoCheckout,\n    mapToLegacyBillingAddress,\n    mapToLegacyShippingAddress,\n    PaypalButtonStyleColorOption,\n    PaypalStyleOptions,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    BuyNowCartCreationError,\n    BuyNowCartRequestBody,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isBraintreeError from '../is-braintree-error';\nimport { isUnsupportedBrowserError } from '../isUnsupportedBrowserError';\n\nimport { WithBraintreeVenmoInitializeOptions } from './braintree-venmo-initialize-options';\n\nconst getVenmoButtonStyle = (styles: PaypalStyleOptions): Record<string, string> => {\n    const { color, height } = styles;\n\n    const colorParser = (c: string) => {\n        if (c === PaypalButtonStyleColorOption.WHITE) {\n            return '#FFFFFF';\n        }\n\n        return '#3D95CE';\n    };\n\n    return {\n        backgroundColor: colorParser(color || ''),\n        backgroundPosition: '50% 50%',\n        backgroundSize: '80px auto',\n        backgroundImage: `url(\"/app/assets/img/payment-providers/venmo-logo-${\n            color === PaypalButtonStyleColorOption.WHITE\n                ? PaypalButtonStyleColorOption.BLUE\n                : PaypalButtonStyleColorOption.WHITE\n        }.svg\")`,\n        backgroundRepeat: 'no-repeat',\n        borderRadius: '4px',\n        cursor: 'pointer',\n        transition: '0.2s ease',\n        minHeight: `${height || 40}px`,\n        minWidth: '150px',\n        height: '100%',\n        width: '100%',\n        border: color === PaypalButtonStyleColorOption.WHITE ? '1px solid black' : 'none',\n    };\n};\n\nconst venmoButtonStyleHover = {\n    backgroundColor: '#0a7fc2',\n};\n\ninterface BuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\n}\n\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\n    private onError = noop;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n        private braintreeSdk: BraintreeSdk,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithBraintreeVenmoInitializeOptions,\n    ): Promise<void> {\n        const { braintreevenmo, containerId, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { clientToken, initializationData }: PaymentMethod = paymentMethod;\n        const { paymentButtonStyles } = initializationData;\n        const { cartButtonStyles } = paymentButtonStyles || {};\n        const styles = braintreevenmo?.style || cartButtonStyles;\n\n        if (!clientToken || !initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!containerId) {\n            throw new InvalidArgumentError(\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\n            );\n        }\n\n        await this.paymentIntegrationService.loadDefaultCheckout();\n\n        this.onError = braintreevenmo?.onError || this.handleError;\n        this.braintreeSdk.initialize(clientToken);\n\n        try {\n            const braintreeVenmoCheckout = await this.braintreeSdk.getVenmoCheckoutOrThrow();\n\n            this.renderVenmoButton(\n                braintreeVenmoCheckout,\n                containerId,\n                braintreevenmo?.buyNowInitializeOptions,\n                styles,\n            );\n        } catch (error) {\n            if (isBraintreeError(error) || isUnsupportedBrowserError(error)) {\n                this.handleInitializationVenmoError(error, containerId);\n            }\n        }\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.braintreeSdk.deinitialize();\n\n        return Promise.resolve();\n    }\n\n    private handleError(error: BraintreeError) {\n        throw new Error(error.message);\n    }\n\n    private async createBuyNowCart(\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n    ): Promise<Cart | undefined> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions?.getBuyNowCartRequestBody();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            try {\n                const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                return buyNowCart;\n            } catch (error) {\n                throw new BuyNowCartCreationError();\n            }\n        }\n\n        return undefined;\n    }\n\n    private handleInitializationVenmoError(\n        error: BraintreeError | UnsupportedBrowserError,\n        containerId: string,\n    ): void {\n        this.removeVenmoContainer(containerId);\n\n        return this.onError(error);\n    }\n\n    private removeVenmoContainer(containerId: string): void {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (buttonContainer) {\n            buttonContainer.remove();\n        }\n    }\n\n    private renderVenmoButton(\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\n        containerId: string,\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\n        buttonStyles?: PaypalStyleOptions,\n    ): void {\n        const venmoButton = document.getElementById(containerId);\n        const { color } = buttonStyles || {};\n\n        if (!venmoButton) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        venmoButton.setAttribute('aria-label', 'Venmo');\n        Object.assign(venmoButton.style, getVenmoButtonStyle(buttonStyles || {}));\n\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        venmoButton.addEventListener('click', async () => {\n            venmoButton.setAttribute('disabled', 'true');\n\n            const buyBowCart = await this.createBuyNowCart(buyNowInitializeOptions);\n\n            if (braintreeVenmoCheckout.tokenize) {\n                braintreeVenmoCheckout.tokenize(\n                    async (\n                        error: BraintreeError | undefined,\n                        payload: BraintreeTokenizePayload,\n                    ) => {\n                        venmoButton.removeAttribute('disabled');\n\n                        if (error) {\n                            this.onError(error);\n                        }\n\n                        await this.handlePostForm(payload, buyBowCart?.id);\n                    },\n                );\n            }\n        });\n\n        if (color === PaypalButtonStyleColorOption.BLUE) {\n            venmoButton.addEventListener('mouseenter', () => {\n                venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\n            });\n\n            venmoButton.addEventListener('mouseleave', () => {\n                venmoButton.style.backgroundColor = getVenmoButtonStyle(\n                    buttonStyles || {},\n                ).backgroundColor;\n            });\n        }\n    }\n\n    private async handlePostForm(\n        payload: BraintreeTokenizePayload,\n        buyNowCartId?: string,\n    ): Promise<void> {\n        const { deviceData } = await this.braintreeSdk.getDataCollectorOrThrow();\n        const { nonce, details } = payload;\n\n        this.formPoster.postForm('/checkout.php', {\n            nonce,\n            provider: 'braintreevenmo',\n            payment_type: 'paypal',\n            device_data: deviceData,\n            action: 'set_external_checkout',\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\n        });\n    }\n}\n","import { UnsupportedBrowserError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport function isUnsupportedBrowserError(error: unknown): error is UnsupportedBrowserError {\n    return error instanceof UnsupportedBrowserError;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeVenmoButtonStrategy from './braintree-venmo-button-strategy';\n\nconst createBraintreeVenmoButtonStrategy: CheckoutButtonStrategyFactory<\n    BraintreeVenmoButtonStrategy\n> = (paymentIntegrationService) => {\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const scriptLoader = getScriptLoader();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeScriptLoader = new BraintreeScriptLoader(\n        scriptLoader,\n        braintreeHostWindow,\n        braintreeSDKVersionManager,\n    );\n\n    const braintreeSdk = new BraintreeSdk(braintreeScriptLoader);\n\n    return new BraintreeVenmoButtonStrategy(\n        paymentIntegrationService,\n        createFormPoster(),\n        braintreeSdk,\n    );\n};\n\nexport default toResolvableModule(createBraintreeVenmoButtonStrategy, [{ id: 'braintreevenmo' }]);\n","import * as React from 'react';\nimport warning from 'warning';\nimport { ManagerReferenceNodeSetterContext } from './Manager';\nimport { safeInvoke, unwrapArray, setRef } from './utils';\nexport function Reference(_ref) {\n  var children = _ref.children,\n      innerRef = _ref.innerRef;\n  var setReferenceNode = React.useContext(ManagerReferenceNodeSetterContext);\n  var refHandler = React.useCallback(function (node) {\n    setRef(innerRef, node);\n    safeInvoke(setReferenceNode, node);\n  }, [innerRef, setReferenceNode]); // ran on unmount\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  React.useEffect(function () {\n    return function () {\n      return setRef(innerRef, null);\n    };\n  }, []);\n  React.useEffect(function () {\n    warning(Boolean(setReferenceNode), '`Reference` should not be used outside of a `Manager` component.');\n  }, [setReferenceNode]);\n  return unwrapArray(children)({\n    ref: refHandler\n  });\n}","import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport PropTypes from 'prop-types';\nimport { cloneElement, Component, useRef, useEffect, useCallback, useLayoutEffect, useReducer, useMemo } from 'react';\nimport { isForwardRef } from 'react-is';\nimport compute from 'compute-scroll-into-view';\nimport { __assign } from 'tslib';\n\nvar idCounter = 0;\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop;\n}\nfunction noop() {}\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */\nfunction scrollIntoView(node, menuNode) {\n  if (!node) {\n    return;\n  }\n  var actions = compute(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed'\n  });\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n      top = _ref.top,\n      left = _ref.left;\n    el.scrollTop = top;\n    el.scrollLeft = left;\n  });\n}\n\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @param {Window} environment The window context where downshift renders.\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\nfunction isOrContainsNode(parent, child, environment) {\n  var result = parent === child || child instanceof environment.Node && parent.contains && parent.contains(child);\n  return result;\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  var timeoutId;\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n  }\n  function wrapper() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    cancel();\n    timeoutId = setTimeout(function () {\n      timeoutId = null;\n      fn.apply(void 0, args);\n    }, time);\n  }\n  wrapper.cancel = cancel;\n  return wrapper;\n}\n\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\nfunction callAllEventHandlers() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n  return function (event) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    return fns.some(function (fn) {\n      if (fn) {\n        fn.apply(void 0, [event].concat(args));\n      }\n      return event.preventDownshiftDefault || event.hasOwnProperty('nativeEvent') && event.nativeEvent.preventDownshiftDefault;\n    });\n  };\n}\nfunction handleRefs() {\n  for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    refs[_key4] = arguments[_key4];\n  }\n  return function (node) {\n    refs.forEach(function (ref) {\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref) {\n        ref.current = node;\n      }\n    });\n  };\n}\n\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\nfunction generateId() {\n  return String(idCounter++);\n}\n\n/**\n * Resets idCounter to 0. Used for SSR.\n */\nfunction resetIdCounter() {\n  idCounter = 0;\n}\n\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specify if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage$1(_ref2) {\n  var isOpen = _ref2.isOpen,\n    resultCount = _ref2.resultCount,\n    previousResultCount = _ref2.previousResultCount;\n  if (!isOpen) {\n    return '';\n  }\n  if (!resultCount) {\n    return 'No results are available.';\n  }\n  if (resultCount !== previousResultCount) {\n    return resultCount + \" result\" + (resultCount === 1 ? ' is' : 's are') + \" available, use up and down arrow keys to navigate. Press Enter key to select.\";\n  }\n  return '';\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */arg[0] : arg;\n  if (!arg && defaultValue) {\n    return defaultValue;\n  } else {\n    return arg;\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n\n  // then we assume this is react\n  return typeof element.type === 'string';\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  return element.props;\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(\"The property \\\"\" + propName + \"\\\" is required in \\\"\" + fnName + \"\\\"\");\n}\nvar stateKeys = ['highlightedIndex', 'inputValue', 'isOpen', 'selectedItem', 'type'];\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\nfunction pickState(state) {\n  if (state === void 0) {\n    state = {};\n  }\n  var result = {};\n  stateKeys.forEach(function (k) {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k];\n    }\n  });\n  return result;\n}\n\n/**\n * This will perform a shallow merge of the given state object\n * with the state coming from props\n * (for the controlled component scenario)\n * This is used in state updater functions so they're referencing\n * the right state regardless of where it comes from.\n *\n * @param {Object} state The state of the component/hook.\n * @param {Object} props The props that may contain controlled values.\n * @returns {Object} The merged controlled state.\n */\nfunction getState(state, props) {\n  return Object.keys(state).reduce(function (prevState, key) {\n    prevState[key] = isControlledProp(props, key) ? props[key] : state[key];\n    return prevState;\n  }, {});\n}\n\n/**\n * This determines whether a prop is a \"controlled prop\" meaning it is\n * state which is controlled by the outside of this component rather\n * than within this component.\n *\n * @param {Object} props The props that may contain controlled values.\n * @param {String} key the key to check\n * @return {Boolean} whether it is a controlled controlled prop\n */\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\nfunction normalizeArrowKey(event) {\n  var key = event.key,\n    keyCode = event.keyCode;\n  /* istanbul ignore next (ie) */\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return \"Arrow\" + key;\n  }\n  return key;\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}\n\n/**\n * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,\n * it will wrap to either 0 or itemCount - 1.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index after the move.\n */\nfunction getNextWrappingIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {\n  if (circular === void 0) {\n    circular = true;\n  }\n  if (itemCount === 0) {\n    return -1;\n  }\n  var itemsLastIndex = itemCount - 1;\n  if (typeof baseIndex !== 'number' || baseIndex < 0 || baseIndex >= itemCount) {\n    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1;\n  }\n  var newIndex = baseIndex + moveAmount;\n  if (newIndex < 0) {\n    newIndex = circular ? itemsLastIndex : 0;\n  } else if (newIndex > itemsLastIndex) {\n    newIndex = circular ? 0 : itemsLastIndex;\n  }\n  var nonDisabledNewIndex = getNextNonDisabledIndex(moveAmount, newIndex, itemCount, getItemNodeFromIndex, circular);\n  if (nonDisabledNewIndex === -1) {\n    return baseIndex >= itemCount ? -1 : baseIndex;\n  }\n  return nonDisabledNewIndex;\n}\n\n/**\n * Returns the next index in the list of an item that is not disabled.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index. Returns baseIndex if item is not disabled. Returns next non-disabled item otherwise. If no non-disabled found it will return -1.\n */\nfunction getNextNonDisabledIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {\n  var currentElementNode = getItemNodeFromIndex(baseIndex);\n  if (!currentElementNode || !currentElementNode.hasAttribute('disabled')) {\n    return baseIndex;\n  }\n  if (moveAmount > 0) {\n    for (var index = baseIndex + 1; index < itemCount; index++) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index;\n      }\n    }\n  } else {\n    for (var _index = baseIndex - 1; _index >= 0; _index--) {\n      if (!getItemNodeFromIndex(_index).hasAttribute('disabled')) {\n        return _index;\n      }\n    }\n  }\n  if (circular) {\n    return moveAmount > 0 ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false) : getNextNonDisabledIndex(-1, itemCount - 1, itemCount, getItemNodeFromIndex, false);\n  }\n  return -1;\n}\n\n/**\n * Checks if event target is within the downshift elements.\n *\n * @param {EventTarget} target Target to check.\n * @param {HTMLElement[]} downshiftElements The elements that form downshift (list, toggle button etc).\n * @param {Window} environment The window context where downshift renders.\n * @param {boolean} checkActiveElement Whether to also check activeElement.\n *\n * @returns {boolean} Whether or not the target is within downshift elements.\n */\nfunction targetWithinDownshift(target, downshiftElements, environment, checkActiveElement) {\n  if (checkActiveElement === void 0) {\n    checkActiveElement = true;\n  }\n  return downshiftElements.some(function (contextNode) {\n    return contextNode && (isOrContainsNode(contextNode, target, environment) || checkActiveElement && isOrContainsNode(contextNode, environment.document.activeElement, environment));\n  });\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nvar validateControlledUnchanged = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validateControlledUnchanged = function validateControlledUnchanged(state, prevProps, nextProps) {\n    var warningDescription = \"This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props\";\n    Object.keys(state).forEach(function (propKey) {\n      if (prevProps[propKey] !== undefined && nextProps[propKey] === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\"downshift: A component has changed the controlled prop \\\"\" + propKey + \"\\\" to be uncontrolled. \" + warningDescription);\n      } else if (prevProps[propKey] === undefined && nextProps[propKey] !== undefined) {\n        // eslint-disable-next-line no-console\n        console.error(\"downshift: A component has changed the uncontrolled prop \\\"\" + propKey + \"\\\" to be controlled. \" + warningDescription);\n      }\n    });\n  };\n}\n\nvar cleanupStatus = debounce(function (documentProp) {\n  getStatusDiv(documentProp).textContent = '';\n}, 500);\n\n/**\n * @param {String} status the status message\n * @param {Object} documentProp document passed by the user.\n */\nfunction setStatus(status, documentProp) {\n  var div = getStatusDiv(documentProp);\n  if (!status) {\n    return;\n  }\n  div.textContent = status;\n  cleanupStatus(documentProp);\n}\n\n/**\n * Get the status node or create it if it does not already exist.\n * @param {Object} documentProp document passed by the user.\n * @return {HTMLElement} the status node.\n */\nfunction getStatusDiv(documentProp) {\n  if (documentProp === void 0) {\n    documentProp = document;\n  }\n  var statusDiv = documentProp.getElementById('a11y-status-message');\n  if (statusDiv) {\n    return statusDiv;\n  }\n  statusDiv = documentProp.createElement('div');\n  statusDiv.setAttribute('id', 'a11y-status-message');\n  statusDiv.setAttribute('role', 'status');\n  statusDiv.setAttribute('aria-live', 'polite');\n  statusDiv.setAttribute('aria-relevant', 'additions text');\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px'\n  });\n  documentProp.body.appendChild(statusDiv);\n  return statusDiv;\n}\n\nvar unknown = process.env.NODE_ENV !== \"production\" ? '__autocomplete_unknown__' : 0;\nvar mouseUp = process.env.NODE_ENV !== \"production\" ? '__autocomplete_mouseup__' : 1;\nvar itemMouseEnter = process.env.NODE_ENV !== \"production\" ? '__autocomplete_item_mouseenter__' : 2;\nvar keyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_arrow_up__' : 3;\nvar keyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_arrow_down__' : 4;\nvar keyDownEscape = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_escape__' : 5;\nvar keyDownEnter = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_enter__' : 6;\nvar keyDownHome = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_home__' : 7;\nvar keyDownEnd = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_end__' : 8;\nvar clickItem = process.env.NODE_ENV !== \"production\" ? '__autocomplete_click_item__' : 9;\nvar blurInput = process.env.NODE_ENV !== \"production\" ? '__autocomplete_blur_input__' : 10;\nvar changeInput = process.env.NODE_ENV !== \"production\" ? '__autocomplete_change_input__' : 11;\nvar keyDownSpaceButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_space_button__' : 12;\nvar clickButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_click_button__' : 13;\nvar blurButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_blur_button__' : 14;\nvar controlledPropUpdatedSelectedItem = process.env.NODE_ENV !== \"production\" ? '__autocomplete_controlled_prop_updated_selected_item__' : 15;\nvar touchEnd = process.env.NODE_ENV !== \"production\" ? '__autocomplete_touchend__' : 16;\n\nvar stateChangeTypes$3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  unknown: unknown,\n  mouseUp: mouseUp,\n  itemMouseEnter: itemMouseEnter,\n  keyDownArrowUp: keyDownArrowUp,\n  keyDownArrowDown: keyDownArrowDown,\n  keyDownEscape: keyDownEscape,\n  keyDownEnter: keyDownEnter,\n  keyDownHome: keyDownHome,\n  keyDownEnd: keyDownEnd,\n  clickItem: clickItem,\n  blurInput: blurInput,\n  changeInput: changeInput,\n  keyDownSpaceButton: keyDownSpaceButton,\n  clickButton: clickButton,\n  blurButton: blurButton,\n  controlledPropUpdatedSelectedItem: controlledPropUpdatedSelectedItem,\n  touchEnd: touchEnd\n});\n\nvar _excluded$4 = [\"refKey\", \"ref\"],\n  _excluded2$3 = [\"onClick\", \"onPress\", \"onKeyDown\", \"onKeyUp\", \"onBlur\"],\n  _excluded3$2 = [\"onKeyDown\", \"onBlur\", \"onChange\", \"onInput\", \"onChangeText\"],\n  _excluded4$1 = [\"refKey\", \"ref\"],\n  _excluded5 = [\"onMouseMove\", \"onMouseDown\", \"onClick\", \"onPress\", \"index\", \"item\"];\nvar Downshift = /*#__PURE__*/function () {\n  var Downshift = /*#__PURE__*/function (_Component) {\n    _inheritsLoose(Downshift, _Component);\n    function Downshift(_props) {\n      var _this;\n      _this = _Component.call(this, _props) || this;\n      // fancy destructuring + defaults + aliases\n      // this basically says each value of state should either be set to\n      // the initial value or the default value if the initial value is not provided\n      _this.id = _this.props.id || \"downshift-\" + generateId();\n      _this.menuId = _this.props.menuId || _this.id + \"-menu\";\n      _this.labelId = _this.props.labelId || _this.id + \"-label\";\n      _this.inputId = _this.props.inputId || _this.id + \"-input\";\n      _this.getItemId = _this.props.getItemId || function (index) {\n        return _this.id + \"-item-\" + index;\n      };\n      _this.input = null;\n      _this.items = [];\n      // itemCount can be changed asynchronously\n      // from within downshift (so it can't come from a prop)\n      // this is why we store it as an instance and use\n      // getItemCount rather than just use items.length\n      // (to support windowing + async)\n      _this.itemCount = null;\n      _this.previousResultCount = 0;\n      _this.timeoutIds = [];\n      /**\n       * @param {Function} fn the function to call after the time\n       * @param {Number} time the time to wait\n       */\n      _this.internalSetTimeout = function (fn, time) {\n        var id = setTimeout(function () {\n          _this.timeoutIds = _this.timeoutIds.filter(function (i) {\n            return i !== id;\n          });\n          fn();\n        }, time);\n        _this.timeoutIds.push(id);\n      };\n      _this.setItemCount = function (count) {\n        _this.itemCount = count;\n      };\n      _this.unsetItemCount = function () {\n        _this.itemCount = null;\n      };\n      _this.setHighlightedIndex = function (highlightedIndex, otherStateToSet) {\n        if (highlightedIndex === void 0) {\n          highlightedIndex = _this.props.defaultHighlightedIndex;\n        }\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n        otherStateToSet = pickState(otherStateToSet);\n        _this.internalSetState(_extends({\n          highlightedIndex: highlightedIndex\n        }, otherStateToSet));\n      };\n      _this.clearSelection = function (cb) {\n        _this.internalSetState({\n          selectedItem: null,\n          inputValue: '',\n          highlightedIndex: _this.props.defaultHighlightedIndex,\n          isOpen: _this.props.defaultIsOpen\n        }, cb);\n      };\n      _this.selectItem = function (item, otherStateToSet, cb) {\n        otherStateToSet = pickState(otherStateToSet);\n        _this.internalSetState(_extends({\n          isOpen: _this.props.defaultIsOpen,\n          highlightedIndex: _this.props.defaultHighlightedIndex,\n          selectedItem: item,\n          inputValue: _this.props.itemToString(item)\n        }, otherStateToSet), cb);\n      };\n      _this.selectItemAtIndex = function (itemIndex, otherStateToSet, cb) {\n        var item = _this.items[itemIndex];\n        if (item == null) {\n          return;\n        }\n        _this.selectItem(item, otherStateToSet, cb);\n      };\n      _this.selectHighlightedItem = function (otherStateToSet, cb) {\n        return _this.selectItemAtIndex(_this.getState().highlightedIndex, otherStateToSet, cb);\n      };\n      // any piece of our state can live in two places:\n      // 1. Uncontrolled: it's internal (this.state)\n      //    We will call this.setState to update that state\n      // 2. Controlled: it's external (this.props)\n      //    We will call this.props.onStateChange to update that state\n      //\n      // In addition, we'll call this.props.onChange if the\n      // selectedItem is changed.\n      _this.internalSetState = function (stateToSet, cb) {\n        var isItemSelected, onChangeArg;\n        var onStateChangeArg = {};\n        var isStateToSetFunction = typeof stateToSet === 'function';\n\n        // we want to call `onInputValueChange` before the `setState` call\n        // so someone controlling the `inputValue` state gets notified of\n        // the input change as soon as possible. This avoids issues with\n        // preserving the cursor position.\n        // See https://github.com/downshift-js/downshift/issues/217 for more info.\n        if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n          _this.props.onInputValueChange(stateToSet.inputValue, _extends({}, _this.getStateAndHelpers(), stateToSet));\n        }\n        return _this.setState(function (state) {\n          state = _this.getState(state);\n          var newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet;\n\n          // Your own function that could modify the state that will be set.\n          newStateToSet = _this.props.stateReducer(state, newStateToSet);\n\n          // checks if an item is selected, regardless of if it's different from\n          // what was selected before\n          // used to determine if onSelect and onChange callbacks should be called\n          isItemSelected = newStateToSet.hasOwnProperty('selectedItem');\n          // this keeps track of the object we want to call with setState\n          var nextState = {};\n          // we need to call on change if the outside world is controlling any of our state\n          // and we're trying to update that state. OR if the selection has changed and we're\n          // trying to update the selection\n          if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {\n            onChangeArg = newStateToSet.selectedItem;\n          }\n          newStateToSet.type = newStateToSet.type || unknown;\n          Object.keys(newStateToSet).forEach(function (key) {\n            // onStateChangeArg should only have the state that is\n            // actually changing\n            if (state[key] !== newStateToSet[key]) {\n              onStateChangeArg[key] = newStateToSet[key];\n            }\n            // the type is useful for the onStateChangeArg\n            // but we don't actually want to set it in internal state.\n            // this is an undocumented feature for now... Not all internalSetState\n            // calls support it and I'm not certain we want them to yet.\n            // But it enables users controlling the isOpen state to know when\n            // the isOpen state changes due to mouseup events which is quite handy.\n            if (key === 'type') {\n              return;\n            }\n            newStateToSet[key];\n            // if it's coming from props, then we don't care to set it internally\n            if (!isControlledProp(_this.props, key)) {\n              nextState[key] = newStateToSet[key];\n            }\n          });\n\n          // if stateToSet is a function, then we weren't able to call onInputValueChange\n          // earlier, so we'll call it now that we know what the inputValue state will be.\n          if (isStateToSetFunction && newStateToSet.hasOwnProperty('inputValue')) {\n            _this.props.onInputValueChange(newStateToSet.inputValue, _extends({}, _this.getStateAndHelpers(), newStateToSet));\n          }\n          return nextState;\n        }, function () {\n          // call the provided callback if it's a function\n          cbToCb(cb)();\n\n          // only call the onStateChange and onChange callbacks if\n          // we have relevant information to pass them.\n          var hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;\n          if (hasMoreStateThanType) {\n            _this.props.onStateChange(onStateChangeArg, _this.getStateAndHelpers());\n          }\n          if (isItemSelected) {\n            _this.props.onSelect(stateToSet.selectedItem, _this.getStateAndHelpers());\n          }\n          if (onChangeArg !== undefined) {\n            _this.props.onChange(onChangeArg, _this.getStateAndHelpers());\n          }\n          // this is currently undocumented and therefore subject to change\n          // We'll try to not break it, but just be warned.\n          _this.props.onUserAction(onStateChangeArg, _this.getStateAndHelpers());\n        });\n      };\n      //////////////////////////// ROOT\n      _this.rootRef = function (node) {\n        return _this._rootNode = node;\n      };\n      _this.getRootProps = function (_temp, _temp2) {\n        var _extends2;\n        var _ref = _temp === void 0 ? {} : _temp,\n          _ref$refKey = _ref.refKey,\n          refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,\n          ref = _ref.ref,\n          rest = _objectWithoutPropertiesLoose(_ref, _excluded$4);\n        var _ref2 = _temp2 === void 0 ? {} : _temp2,\n          _ref2$suppressRefErro = _ref2.suppressRefError,\n          suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n        // this is used in the render to know whether the user has called getRootProps.\n        // It uses that to know whether to apply the props automatically\n        _this.getRootProps.called = true;\n        _this.getRootProps.refKey = refKey;\n        _this.getRootProps.suppressRefError = suppressRefError;\n        var _this$getState = _this.getState(),\n          isOpen = _this$getState.isOpen;\n        return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, _this.rootRef), _extends2.role = 'combobox', _extends2['aria-expanded'] = isOpen, _extends2['aria-haspopup'] = 'listbox', _extends2['aria-owns'] = isOpen ? _this.menuId : null, _extends2['aria-labelledby'] = _this.labelId, _extends2), rest);\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n      _this.keyDownHandlers = {\n        ArrowDown: function ArrowDown(event) {\n          var _this2 = this;\n          event.preventDefault();\n          if (this.getState().isOpen) {\n            var amount = event.shiftKey ? 5 : 1;\n            this.moveHighlightedIndex(amount, {\n              type: keyDownArrowDown\n            });\n          } else {\n            this.internalSetState({\n              isOpen: true,\n              type: keyDownArrowDown\n            }, function () {\n              var itemCount = _this2.getItemCount();\n              if (itemCount > 0) {\n                var _this2$getState = _this2.getState(),\n                  highlightedIndex = _this2$getState.highlightedIndex;\n                var nextHighlightedIndex = getNextWrappingIndex(1, highlightedIndex, itemCount, function (index) {\n                  return _this2.getItemNodeFromIndex(index);\n                });\n                _this2.setHighlightedIndex(nextHighlightedIndex, {\n                  type: keyDownArrowDown\n                });\n              }\n            });\n          }\n        },\n        ArrowUp: function ArrowUp(event) {\n          var _this3 = this;\n          event.preventDefault();\n          if (this.getState().isOpen) {\n            var amount = event.shiftKey ? -5 : -1;\n            this.moveHighlightedIndex(amount, {\n              type: keyDownArrowUp\n            });\n          } else {\n            this.internalSetState({\n              isOpen: true,\n              type: keyDownArrowUp\n            }, function () {\n              var itemCount = _this3.getItemCount();\n              if (itemCount > 0) {\n                var _this3$getState = _this3.getState(),\n                  highlightedIndex = _this3$getState.highlightedIndex;\n                var nextHighlightedIndex = getNextWrappingIndex(-1, highlightedIndex, itemCount, function (index) {\n                  return _this3.getItemNodeFromIndex(index);\n                });\n                _this3.setHighlightedIndex(nextHighlightedIndex, {\n                  type: keyDownArrowUp\n                });\n              }\n            });\n          }\n        },\n        Enter: function Enter(event) {\n          if (event.which === 229) {\n            return;\n          }\n          var _this$getState2 = this.getState(),\n            isOpen = _this$getState2.isOpen,\n            highlightedIndex = _this$getState2.highlightedIndex;\n          if (isOpen && highlightedIndex != null) {\n            event.preventDefault();\n            var item = this.items[highlightedIndex];\n            var itemNode = this.getItemNodeFromIndex(highlightedIndex);\n            if (item == null || itemNode && itemNode.hasAttribute('disabled')) {\n              return;\n            }\n            this.selectHighlightedItem({\n              type: keyDownEnter\n            });\n          }\n        },\n        Escape: function Escape(event) {\n          event.preventDefault();\n          this.reset(_extends({\n            type: keyDownEscape\n          }, !this.state.isOpen && {\n            selectedItem: null,\n            inputValue: ''\n          }));\n        }\n      };\n      //////////////////////////// BUTTON\n      _this.buttonKeyDownHandlers = _extends({}, _this.keyDownHandlers, {\n        ' ': function _(event) {\n          event.preventDefault();\n          this.toggleMenu({\n            type: keyDownSpaceButton\n          });\n        }\n      });\n      _this.inputKeyDownHandlers = _extends({}, _this.keyDownHandlers, {\n        Home: function Home(event) {\n          var _this4 = this;\n          var _this$getState3 = this.getState(),\n            isOpen = _this$getState3.isOpen;\n          if (!isOpen) {\n            return;\n          }\n          event.preventDefault();\n          var itemCount = this.getItemCount();\n          if (itemCount <= 0 || !isOpen) {\n            return;\n          }\n\n          // get next non-disabled starting downwards from 0 if that's disabled.\n          var newHighlightedIndex = getNextNonDisabledIndex(1, 0, itemCount, function (index) {\n            return _this4.getItemNodeFromIndex(index);\n          }, false);\n          this.setHighlightedIndex(newHighlightedIndex, {\n            type: keyDownHome\n          });\n        },\n        End: function End(event) {\n          var _this5 = this;\n          var _this$getState4 = this.getState(),\n            isOpen = _this$getState4.isOpen;\n          if (!isOpen) {\n            return;\n          }\n          event.preventDefault();\n          var itemCount = this.getItemCount();\n          if (itemCount <= 0 || !isOpen) {\n            return;\n          }\n\n          // get next non-disabled starting upwards from last index if that's disabled.\n          var newHighlightedIndex = getNextNonDisabledIndex(-1, itemCount - 1, itemCount, function (index) {\n            return _this5.getItemNodeFromIndex(index);\n          }, false);\n          this.setHighlightedIndex(newHighlightedIndex, {\n            type: keyDownEnd\n          });\n        }\n      });\n      _this.getToggleButtonProps = function (_temp3) {\n        var _ref3 = _temp3 === void 0 ? {} : _temp3,\n          onClick = _ref3.onClick;\n          _ref3.onPress;\n          var onKeyDown = _ref3.onKeyDown,\n          onKeyUp = _ref3.onKeyUp,\n          onBlur = _ref3.onBlur,\n          rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$3);\n        var _this$getState5 = _this.getState(),\n          isOpen = _this$getState5.isOpen;\n        var enabledEventHandlers = {\n          onClick: callAllEventHandlers(onClick, _this.buttonHandleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, _this.buttonHandleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, _this.buttonHandleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, _this.buttonHandleBlur)\n        };\n        var eventHandlers = rest.disabled ? {} : enabledEventHandlers;\n        return _extends({\n          type: 'button',\n          role: 'button',\n          'aria-label': isOpen ? 'close menu' : 'open menu',\n          'aria-haspopup': true,\n          'data-toggle': true\n        }, eventHandlers, rest);\n      };\n      _this.buttonHandleKeyUp = function (event) {\n        // Prevent click event from emitting in Firefox\n        event.preventDefault();\n      };\n      _this.buttonHandleKeyDown = function (event) {\n        var key = normalizeArrowKey(event);\n        if (_this.buttonKeyDownHandlers[key]) {\n          _this.buttonKeyDownHandlers[key].call(_assertThisInitialized(_this), event);\n        }\n      };\n      _this.buttonHandleClick = function (event) {\n        event.preventDefault();\n        // handle odd case for Safari and Firefox which\n        // don't give the button the focus properly.\n        /* istanbul ignore if (can't reasonably test this) */\n        if (_this.props.environment.document.activeElement === _this.props.environment.document.body) {\n          event.target.focus();\n        }\n        // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n        // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n        // when building for production and should therefore have no impact on production code.\n        if (process.env.NODE_ENV === 'test') {\n          _this.toggleMenu({\n            type: clickButton\n          });\n        } else {\n          // Ensure that toggle of menu occurs after the potential blur event in iOS\n          _this.internalSetTimeout(function () {\n            return _this.toggleMenu({\n              type: clickButton\n            });\n          });\n        }\n      };\n      _this.buttonHandleBlur = function (event) {\n        var blurTarget = event.target; // Save blur target for comparison with activeElement later\n        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n        _this.internalSetTimeout(function () {\n          if (!_this.isMouseDown && (_this.props.environment.document.activeElement == null || _this.props.environment.document.activeElement.id !== _this.inputId) && _this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n          ) {\n            _this.reset({\n              type: blurButton\n            });\n          }\n        });\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n      /////////////////////////////// LABEL\n      _this.getLabelProps = function (props) {\n        return _extends({\n          htmlFor: _this.inputId,\n          id: _this.labelId\n        }, props);\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n      /////////////////////////////// INPUT\n      _this.getInputProps = function (_temp4) {\n        var _ref4 = _temp4 === void 0 ? {} : _temp4,\n          onKeyDown = _ref4.onKeyDown,\n          onBlur = _ref4.onBlur,\n          onChange = _ref4.onChange,\n          onInput = _ref4.onInput;\n          _ref4.onChangeText;\n          var rest = _objectWithoutPropertiesLoose(_ref4, _excluded3$2);\n        var onChangeKey;\n        var eventHandlers = {};\n\n        /* istanbul ignore next (preact) */\n        {\n          onChangeKey = 'onChange';\n        }\n        var _this$getState6 = _this.getState(),\n          inputValue = _this$getState6.inputValue,\n          isOpen = _this$getState6.isOpen,\n          highlightedIndex = _this$getState6.highlightedIndex;\n        if (!rest.disabled) {\n          var _eventHandlers;\n          eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, _this.inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, _this.inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, _this.inputHandleBlur), _eventHandlers);\n        }\n        return _extends({\n          'aria-autocomplete': 'list',\n          'aria-activedescendant': isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : null,\n          'aria-controls': isOpen ? _this.menuId : null,\n          'aria-labelledby': rest && rest['aria-label'] ? undefined : _this.labelId,\n          // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n          // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n          autoComplete: 'off',\n          value: inputValue,\n          id: _this.inputId\n        }, eventHandlers, rest);\n      };\n      _this.inputHandleKeyDown = function (event) {\n        var key = normalizeArrowKey(event);\n        if (key && _this.inputKeyDownHandlers[key]) {\n          _this.inputKeyDownHandlers[key].call(_assertThisInitialized(_this), event);\n        }\n      };\n      _this.inputHandleChange = function (event) {\n        _this.internalSetState({\n          type: changeInput,\n          isOpen: true,\n          inputValue: event.target.value,\n          highlightedIndex: _this.props.defaultHighlightedIndex\n        });\n      };\n      _this.inputHandleBlur = function () {\n        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n        _this.internalSetTimeout(function () {\n          var downshiftButtonIsActive = _this.props.environment.document && !!_this.props.environment.document.activeElement && !!_this.props.environment.document.activeElement.dataset && _this.props.environment.document.activeElement.dataset.toggle && _this._rootNode && _this._rootNode.contains(_this.props.environment.document.activeElement);\n          if (!_this.isMouseDown && !downshiftButtonIsActive) {\n            _this.reset({\n              type: blurInput\n            });\n          }\n        });\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n      /////////////////////////////// MENU\n      _this.menuRef = function (node) {\n        _this._menuNode = node;\n      };\n      _this.getMenuProps = function (_temp5, _temp6) {\n        var _extends3;\n        var _ref5 = _temp5 === void 0 ? {} : _temp5,\n          _ref5$refKey = _ref5.refKey,\n          refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,\n          ref = _ref5.ref,\n          props = _objectWithoutPropertiesLoose(_ref5, _excluded4$1);\n        var _ref6 = _temp6 === void 0 ? {} : _temp6,\n          _ref6$suppressRefErro = _ref6.suppressRefError,\n          suppressRefError = _ref6$suppressRefErro === void 0 ? false : _ref6$suppressRefErro;\n        _this.getMenuProps.called = true;\n        _this.getMenuProps.refKey = refKey;\n        _this.getMenuProps.suppressRefError = suppressRefError;\n        return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, _this.menuRef), _extends3.role = 'listbox', _extends3['aria-labelledby'] = props && props['aria-label'] ? null : _this.labelId, _extends3.id = _this.menuId, _extends3), props);\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU\n      /////////////////////////////// ITEM\n      _this.getItemProps = function (_temp7) {\n        var _enabledEventHandlers;\n        var _ref7 = _temp7 === void 0 ? {} : _temp7,\n          onMouseMove = _ref7.onMouseMove,\n          onMouseDown = _ref7.onMouseDown,\n          onClick = _ref7.onClick;\n          _ref7.onPress;\n          var index = _ref7.index,\n          _ref7$item = _ref7.item,\n          item = _ref7$item === void 0 ? process.env.NODE_ENV === 'production' ? /* istanbul ignore next */undefined : requiredProp('getItemProps', 'item') : _ref7$item,\n          rest = _objectWithoutPropertiesLoose(_ref7, _excluded5);\n        if (index === undefined) {\n          _this.items.push(item);\n          index = _this.items.indexOf(item);\n        } else {\n          _this.items[index] = item;\n        }\n        var onSelectKey = 'onClick';\n        var customClickHandler = onClick;\n        var enabledEventHandlers = (_enabledEventHandlers = {\n          // onMouseMove is used over onMouseEnter here. onMouseMove\n          // is only triggered on actual mouse movement while onMouseEnter\n          // can fire on DOM changes, interrupting keyboard navigation\n          onMouseMove: callAllEventHandlers(onMouseMove, function () {\n            if (index === _this.getState().highlightedIndex) {\n              return;\n            }\n            _this.setHighlightedIndex(index, {\n              type: itemMouseEnter\n            });\n\n            // We never want to manually scroll when changing state based\n            // on `onMouseMove` because we will be moving the element out\n            // from under the user which is currently scrolling/moving the\n            // cursor\n            _this.avoidScrolling = true;\n            _this.internalSetTimeout(function () {\n              return _this.avoidScrolling = false;\n            }, 250);\n          }),\n          onMouseDown: callAllEventHandlers(onMouseDown, function (event) {\n            // This prevents the activeElement from being changed\n            // to the item so it can remain with the current activeElement\n            // which is a more common use case.\n            event.preventDefault();\n          })\n        }, _enabledEventHandlers[onSelectKey] = callAllEventHandlers(customClickHandler, function () {\n          _this.selectItemAtIndex(index, {\n            type: clickItem\n          });\n        }), _enabledEventHandlers);\n\n        // Passing down the onMouseDown handler to prevent redirect\n        // of the activeElement if clicking on disabled items\n        var eventHandlers = rest.disabled ? {\n          onMouseDown: enabledEventHandlers.onMouseDown\n        } : enabledEventHandlers;\n        return _extends({\n          id: _this.getItemId(index),\n          role: 'option',\n          'aria-selected': _this.getState().highlightedIndex === index\n        }, eventHandlers, rest);\n      };\n      //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n      _this.clearItems = function () {\n        _this.items = [];\n      };\n      _this.reset = function (otherStateToSet, cb) {\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n        otherStateToSet = pickState(otherStateToSet);\n        _this.internalSetState(function (_ref8) {\n          var selectedItem = _ref8.selectedItem;\n          return _extends({\n            isOpen: _this.props.defaultIsOpen,\n            highlightedIndex: _this.props.defaultHighlightedIndex,\n            inputValue: _this.props.itemToString(selectedItem)\n          }, otherStateToSet);\n        }, cb);\n      };\n      _this.toggleMenu = function (otherStateToSet, cb) {\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n        otherStateToSet = pickState(otherStateToSet);\n        _this.internalSetState(function (_ref9) {\n          var isOpen = _ref9.isOpen;\n          return _extends({\n            isOpen: !isOpen\n          }, isOpen && {\n            highlightedIndex: _this.props.defaultHighlightedIndex\n          }, otherStateToSet);\n        }, function () {\n          var _this$getState7 = _this.getState(),\n            isOpen = _this$getState7.isOpen,\n            highlightedIndex = _this$getState7.highlightedIndex;\n          if (isOpen) {\n            if (_this.getItemCount() > 0 && typeof highlightedIndex === 'number') {\n              _this.setHighlightedIndex(highlightedIndex, otherStateToSet);\n            }\n          }\n          cbToCb(cb)();\n        });\n      };\n      _this.openMenu = function (cb) {\n        _this.internalSetState({\n          isOpen: true\n        }, cb);\n      };\n      _this.closeMenu = function (cb) {\n        _this.internalSetState({\n          isOpen: false\n        }, cb);\n      };\n      _this.updateStatus = debounce(function () {\n        var state = _this.getState();\n        var item = _this.items[state.highlightedIndex];\n        var resultCount = _this.getItemCount();\n        var status = _this.props.getA11yStatusMessage(_extends({\n          itemToString: _this.props.itemToString,\n          previousResultCount: _this.previousResultCount,\n          resultCount: resultCount,\n          highlightedItem: item\n        }, state));\n        _this.previousResultCount = resultCount;\n        setStatus(status, _this.props.environment.document);\n      }, 200);\n      var _this$props = _this.props,\n        defaultHighlightedIndex = _this$props.defaultHighlightedIndex,\n        _this$props$initialHi = _this$props.initialHighlightedIndex,\n        _highlightedIndex = _this$props$initialHi === void 0 ? defaultHighlightedIndex : _this$props$initialHi,\n        defaultIsOpen = _this$props.defaultIsOpen,\n        _this$props$initialIs = _this$props.initialIsOpen,\n        _isOpen = _this$props$initialIs === void 0 ? defaultIsOpen : _this$props$initialIs,\n        _this$props$initialIn = _this$props.initialInputValue,\n        _inputValue = _this$props$initialIn === void 0 ? '' : _this$props$initialIn,\n        _this$props$initialSe = _this$props.initialSelectedItem,\n        _selectedItem = _this$props$initialSe === void 0 ? null : _this$props$initialSe;\n      var _state = _this.getState({\n        highlightedIndex: _highlightedIndex,\n        isOpen: _isOpen,\n        inputValue: _inputValue,\n        selectedItem: _selectedItem\n      });\n      if (_state.selectedItem != null && _this.props.initialInputValue === undefined) {\n        _state.inputValue = _this.props.itemToString(_state.selectedItem);\n      }\n      _this.state = _state;\n      return _this;\n    }\n    var _proto = Downshift.prototype;\n    /**\n     * Clear all running timeouts\n     */\n    _proto.internalClearTimeouts = function internalClearTimeouts() {\n      this.timeoutIds.forEach(function (id) {\n        clearTimeout(id);\n      });\n      this.timeoutIds = [];\n    }\n\n    /**\n     * Gets the state based on internal state or props\n     * If a state value is passed via props, then that\n     * is the value given, otherwise it's retrieved from\n     * stateToMerge\n     *\n     * @param {Object} stateToMerge defaults to this.state\n     * @return {Object} the state\n     */;\n    _proto.getState = function getState$1(stateToMerge) {\n      if (stateToMerge === void 0) {\n        stateToMerge = this.state;\n      }\n      return getState(stateToMerge, this.props);\n    };\n    _proto.getItemCount = function getItemCount() {\n      // things read better this way. They're in priority order:\n      // 1. `this.itemCount`\n      // 2. `this.props.itemCount`\n      // 3. `this.items.length`\n      var itemCount = this.items.length;\n      if (this.itemCount != null) {\n        itemCount = this.itemCount;\n      } else if (this.props.itemCount !== undefined) {\n        itemCount = this.props.itemCount;\n      }\n      return itemCount;\n    };\n    _proto.getItemNodeFromIndex = function getItemNodeFromIndex(index) {\n      return this.props.environment.document.getElementById(this.getItemId(index));\n    };\n    _proto.scrollHighlightedItemIntoView = function scrollHighlightedItemIntoView() {\n      /* istanbul ignore else (react-native) */\n      {\n        var node = this.getItemNodeFromIndex(this.getState().highlightedIndex);\n        this.props.scrollIntoView(node, this._menuNode);\n      }\n    };\n    _proto.moveHighlightedIndex = function moveHighlightedIndex(amount, otherStateToSet) {\n      var _this6 = this;\n      var itemCount = this.getItemCount();\n      var _this$getState8 = this.getState(),\n        highlightedIndex = _this$getState8.highlightedIndex;\n      if (itemCount > 0) {\n        var nextHighlightedIndex = getNextWrappingIndex(amount, highlightedIndex, itemCount, function (index) {\n          return _this6.getItemNodeFromIndex(index);\n        });\n        this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet);\n      }\n    };\n    _proto.getStateAndHelpers = function getStateAndHelpers() {\n      var _this$getState9 = this.getState(),\n        highlightedIndex = _this$getState9.highlightedIndex,\n        inputValue = _this$getState9.inputValue,\n        selectedItem = _this$getState9.selectedItem,\n        isOpen = _this$getState9.isOpen;\n      var itemToString = this.props.itemToString;\n      var id = this.id;\n      var getRootProps = this.getRootProps,\n        getToggleButtonProps = this.getToggleButtonProps,\n        getLabelProps = this.getLabelProps,\n        getMenuProps = this.getMenuProps,\n        getInputProps = this.getInputProps,\n        getItemProps = this.getItemProps,\n        openMenu = this.openMenu,\n        closeMenu = this.closeMenu,\n        toggleMenu = this.toggleMenu,\n        selectItem = this.selectItem,\n        selectItemAtIndex = this.selectItemAtIndex,\n        selectHighlightedItem = this.selectHighlightedItem,\n        setHighlightedIndex = this.setHighlightedIndex,\n        clearSelection = this.clearSelection,\n        clearItems = this.clearItems,\n        reset = this.reset,\n        setItemCount = this.setItemCount,\n        unsetItemCount = this.unsetItemCount,\n        setState = this.internalSetState;\n      return {\n        // prop getters\n        getRootProps: getRootProps,\n        getToggleButtonProps: getToggleButtonProps,\n        getLabelProps: getLabelProps,\n        getMenuProps: getMenuProps,\n        getInputProps: getInputProps,\n        getItemProps: getItemProps,\n        // actions\n        reset: reset,\n        openMenu: openMenu,\n        closeMenu: closeMenu,\n        toggleMenu: toggleMenu,\n        selectItem: selectItem,\n        selectItemAtIndex: selectItemAtIndex,\n        selectHighlightedItem: selectHighlightedItem,\n        setHighlightedIndex: setHighlightedIndex,\n        clearSelection: clearSelection,\n        clearItems: clearItems,\n        setItemCount: setItemCount,\n        unsetItemCount: unsetItemCount,\n        setState: setState,\n        // props\n        itemToString: itemToString,\n        // derived\n        id: id,\n        // state\n        highlightedIndex: highlightedIndex,\n        inputValue: inputValue,\n        isOpen: isOpen,\n        selectedItem: selectedItem\n      };\n    };\n    _proto.componentDidMount = function componentDidMount() {\n      var _this7 = this;\n      /* istanbul ignore if (react-native) */\n      if (process.env.NODE_ENV !== 'production' && !false && this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n      }\n\n      /* istanbul ignore if (react-native) */\n      {\n        // this.isMouseDown helps us track whether the mouse is currently held down.\n        // This is useful when the user clicks on an item in the list, but holds the mouse\n        // down long enough for the list to disappear (because the blur event fires on the input)\n        // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n        // trigger hiding the menu.\n        var onMouseDown = function onMouseDown() {\n          _this7.isMouseDown = true;\n        };\n        var onMouseUp = function onMouseUp(event) {\n          _this7.isMouseDown = false;\n          // if the target element or the activeElement is within a downshift node\n          // then we don't want to reset downshift\n          var contextWithinDownshift = targetWithinDownshift(event.target, [_this7._rootNode, _this7._menuNode], _this7.props.environment);\n          if (!contextWithinDownshift && _this7.getState().isOpen) {\n            _this7.reset({\n              type: mouseUp\n            }, function () {\n              return _this7.props.onOuterClick(_this7.getStateAndHelpers());\n            });\n          }\n        };\n        // Touching an element in iOS gives focus and hover states, but touching out of\n        // the element will remove hover, and persist the focus state, resulting in the\n        // blur event not being triggered.\n        // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n        // If the user taps outside of Downshift, the component should be reset,\n        // but not if the user is swiping\n        var onTouchStart = function onTouchStart() {\n          _this7.isTouchMove = false;\n        };\n        var onTouchMove = function onTouchMove() {\n          _this7.isTouchMove = true;\n        };\n        var onTouchEnd = function onTouchEnd(event) {\n          var contextWithinDownshift = targetWithinDownshift(event.target, [_this7._rootNode, _this7._menuNode], _this7.props.environment, false);\n          if (!_this7.isTouchMove && !contextWithinDownshift && _this7.getState().isOpen) {\n            _this7.reset({\n              type: touchEnd\n            }, function () {\n              return _this7.props.onOuterClick(_this7.getStateAndHelpers());\n            });\n          }\n        };\n        var environment = this.props.environment;\n        environment.addEventListener('mousedown', onMouseDown);\n        environment.addEventListener('mouseup', onMouseUp);\n        environment.addEventListener('touchstart', onTouchStart);\n        environment.addEventListener('touchmove', onTouchMove);\n        environment.addEventListener('touchend', onTouchEnd);\n        this.cleanup = function () {\n          _this7.internalClearTimeouts();\n          _this7.updateStatus.cancel();\n          environment.removeEventListener('mousedown', onMouseDown);\n          environment.removeEventListener('mouseup', onMouseUp);\n          environment.removeEventListener('touchstart', onTouchStart);\n          environment.removeEventListener('touchmove', onTouchMove);\n          environment.removeEventListener('touchend', onTouchEnd);\n        };\n      }\n    };\n    _proto.shouldScroll = function shouldScroll(prevState, prevProps) {\n      var _ref10 = this.props.highlightedIndex === undefined ? this.getState() : this.props,\n        currentHighlightedIndex = _ref10.highlightedIndex;\n      var _ref11 = prevProps.highlightedIndex === undefined ? prevState : prevProps,\n        prevHighlightedIndex = _ref11.highlightedIndex;\n      var scrollWhenOpen = currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen;\n      var scrollWhenNavigating = currentHighlightedIndex !== prevHighlightedIndex;\n      return scrollWhenOpen || scrollWhenNavigating;\n    };\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateControlledUnchanged(this.state, prevProps, this.props);\n        /* istanbul ignore if (react-native) */\n        if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n          validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n        }\n      }\n      if (isControlledProp(this.props, 'selectedItem') && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {\n        this.internalSetState({\n          type: controlledPropUpdatedSelectedItem,\n          inputValue: this.props.itemToString(this.props.selectedItem)\n        });\n      }\n      if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n        this.scrollHighlightedItemIntoView();\n      }\n\n      /* istanbul ignore else (react-native) */\n      {\n        this.updateStatus();\n      }\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this.cleanup(); // avoids memory leak\n    };\n    _proto.render = function render() {\n      var children = unwrapArray(this.props.children, noop);\n      // because the items are rerendered every time we call the children\n      // we clear this out each render and it will be populated again as\n      // getItemProps is called.\n      this.clearItems();\n      // we reset this so we know whether the user calls getRootProps during\n      // this render. If they do then we don't need to do anything,\n      // if they don't then we need to clone the element they return and\n      // apply the props for them.\n      this.getRootProps.called = false;\n      this.getRootProps.refKey = undefined;\n      this.getRootProps.suppressRefError = undefined;\n      // we do something similar for getMenuProps\n      this.getMenuProps.called = false;\n      this.getMenuProps.refKey = undefined;\n      this.getMenuProps.suppressRefError = undefined;\n      // we do something similar for getLabelProps\n      this.getLabelProps.called = false;\n      // and something similar for getInputProps\n      this.getInputProps.called = false;\n      var element = unwrapArray(children(this.getStateAndHelpers()));\n      if (!element) {\n        return null;\n      }\n      if (this.getRootProps.called || this.props.suppressRefError) {\n        if (process.env.NODE_ENV !== 'production' && !this.getRootProps.suppressRefError && !this.props.suppressRefError) {\n          validateGetRootPropsCalledCorrectly(element, this.getRootProps);\n        }\n        return element;\n      } else if (isDOMElement(element)) {\n        // they didn't apply the root props, but we can clone\n        // this and apply the props ourselves\n        return /*#__PURE__*/cloneElement(element, this.getRootProps(getElementProps(element)));\n      }\n\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        // they didn't apply the root props, but they need to\n        // otherwise we can't query around the autocomplete\n\n        throw new Error('downshift: If you return a non-DOM element, you must apply the getRootProps function');\n      }\n\n      /* istanbul ignore next */\n      return undefined;\n    };\n    return Downshift;\n  }(Component);\n  Downshift.defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultIsOpen: false,\n    getA11yStatusMessage: getA11yStatusMessage$1,\n    itemToString: function itemToString(i) {\n      if (i == null) {\n        return '';\n      }\n      if (process.env.NODE_ENV !== 'production' && isPlainObject(i) && !i.hasOwnProperty('toString')) {\n        // eslint-disable-next-line no-console\n        console.warn('downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.', 'The object that was passed:', i);\n      }\n      return String(i);\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: function selectedItemChanged(prevItem, item) {\n      return prevItem !== item;\n    },\n    environment: /* istanbul ignore next (ssr) */\n    typeof window === 'undefined' ? {} : window,\n    stateReducer: function stateReducer(state, stateToSet) {\n      return stateToSet;\n    },\n    suppressRefError: false,\n    scrollIntoView: scrollIntoView\n  };\n  Downshift.stateChangeTypes = stateChangeTypes$3;\n  return Downshift;\n}();\nprocess.env.NODE_ENV !== \"production\" ? Downshift.propTypes = {\n  children: PropTypes.func,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultIsOpen: PropTypes.bool,\n  initialHighlightedIndex: PropTypes.number,\n  initialSelectedItem: PropTypes.any,\n  initialInputValue: PropTypes.string,\n  initialIsOpen: PropTypes.bool,\n  getA11yStatusMessage: PropTypes.func,\n  itemToString: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  onUserAction: PropTypes.func,\n  onOuterClick: PropTypes.func,\n  selectedItemChanged: PropTypes.func,\n  stateReducer: PropTypes.func,\n  itemCount: PropTypes.number,\n  id: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  }),\n  suppressRefError: PropTypes.bool,\n  scrollIntoView: PropTypes.func,\n  // things we keep in state for uncontrolled components\n  // but can accept as props for controlled components\n  /* eslint-disable react/no-unused-prop-types */\n  selectedItem: PropTypes.any,\n  isOpen: PropTypes.bool,\n  inputValue: PropTypes.string,\n  highlightedIndex: PropTypes.number,\n  labelId: PropTypes.string,\n  inputId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func\n  /* eslint-enable react/no-unused-prop-types */\n} : void 0;\nvar Downshift$1 = Downshift;\nfunction validateGetMenuPropsCalledCorrectly(node, _ref12) {\n  var refKey = _ref12.refKey;\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(\"downshift: The ref prop \\\"\" + refKey + \"\\\" from getMenuProps was not applied correctly on your menu element.\");\n  }\n}\nfunction validateGetRootPropsCalledCorrectly(element, _ref13) {\n  var refKey = _ref13.refKey;\n  var refKeySpecified = refKey !== 'ref';\n  var isComposite = !isDOMElement(element);\n  if (isComposite && !refKeySpecified && !isForwardRef(element)) {\n    // eslint-disable-next-line no-console\n    console.error('downshift: You returned a non-DOM element. You must specify a refKey in getRootProps');\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(\"downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \\\"\" + refKey + \"\\\"\");\n  }\n  if (!isForwardRef(element) && !getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(\"downshift: You must apply the ref prop \\\"\" + refKey + \"\\\" from getRootProps onto your root element.\");\n  }\n}\n\nvar _excluded$3 = [\"isInitialMount\", \"highlightedIndex\", \"items\", \"environment\"];\nvar dropdownDefaultStateValues = {\n  highlightedIndex: -1,\n  isOpen: false,\n  selectedItem: null,\n  inputValue: ''\n};\nfunction callOnChangeProps(action, state, newState) {\n  var props = action.props,\n    type = action.type;\n  var changes = {};\n  Object.keys(state).forEach(function (key) {\n    invokeOnChangeHandler(key, action, state, newState);\n    if (newState[key] !== state[key]) {\n      changes[key] = newState[key];\n    }\n  });\n  if (props.onStateChange && Object.keys(changes).length) {\n    props.onStateChange(_extends({\n      type: type\n    }, changes));\n  }\n}\nfunction invokeOnChangeHandler(key, action, state, newState) {\n  var props = action.props,\n    type = action.type;\n  var handler = \"on\" + capitalizeString(key) + \"Change\";\n  if (props[handler] && newState[key] !== undefined && newState[key] !== state[key]) {\n    props[handler](_extends({\n      type: type\n    }, newState));\n  }\n}\n\n/**\n * Default state reducer that returns the changes.\n *\n * @param {Object} s state.\n * @param {Object} a action with changes.\n * @returns {Object} changes.\n */\nfunction stateReducer(s, a) {\n  return a.changes;\n}\n\n/**\n * Returns a message to be added to aria-live region when item is selected.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11ySelectionMessage(selectionParameters) {\n  var selectedItem = selectionParameters.selectedItem,\n    itemToStringLocal = selectionParameters.itemToString;\n  return selectedItem ? itemToStringLocal(selectedItem) + \" has been selected.\" : '';\n}\n\n/**\n * Debounced call for updating the a11y message.\n */\nvar updateA11yStatus = debounce(function (getA11yMessage, document) {\n  setStatus(getA11yMessage(), document);\n}, 200);\n\n// istanbul ignore next\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect;\nfunction useElementIds(_ref) {\n  var _ref$id = _ref.id,\n    id = _ref$id === void 0 ? \"downshift-\" + generateId() : _ref$id,\n    labelId = _ref.labelId,\n    menuId = _ref.menuId,\n    getItemId = _ref.getItemId,\n    toggleButtonId = _ref.toggleButtonId,\n    inputId = _ref.inputId;\n  var elementIdsRef = useRef({\n    labelId: labelId || id + \"-label\",\n    menuId: menuId || id + \"-menu\",\n    getItemId: getItemId || function (index) {\n      return id + \"-item-\" + index;\n    },\n    toggleButtonId: toggleButtonId || id + \"-toggle-button\",\n    inputId: inputId || id + \"-input\"\n  });\n  return elementIdsRef.current;\n}\nfunction getItemAndIndex(itemProp, indexProp, items, errorMessage) {\n  var item, index;\n  if (itemProp === undefined) {\n    if (indexProp === undefined) {\n      throw new Error(errorMessage);\n    }\n    item = items[indexProp];\n    index = indexProp;\n  } else {\n    index = indexProp === undefined ? items.indexOf(itemProp) : indexProp;\n    item = itemProp;\n  }\n  return [item, index];\n}\nfunction itemToString(item) {\n  return item ? String(item) : '';\n}\nfunction isAcceptedCharacterKey(key) {\n  return /^\\S{1}$/.test(key);\n}\nfunction capitalizeString(string) {\n  return \"\" + string.slice(0, 1).toUpperCase() + string.slice(1);\n}\nfunction useLatestRef(val) {\n  var ref = useRef(val);\n  // technically this is not \"concurrent mode safe\" because we're manipulating\n  // the value during render (so it's not idempotent). However, the places this\n  // hook is used is to support memoizing callbacks which will be called\n  // *during* render, so we need the latest values *during* render.\n  // If not for this, then we'd probably want to use useLayoutEffect instead.\n  ref.current = val;\n  return ref;\n}\n\n/**\n * Computes the controlled state using a the previous state, props,\n * two reducers, one from downshift and an optional one from the user.\n * Also calls the onChange handlers for state values that have changed.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useEnhancedReducer(reducer, initialState, props) {\n  var prevStateRef = useRef();\n  var actionRef = useRef();\n  var enhancedReducer = useCallback(function (state, action) {\n    actionRef.current = action;\n    state = getState(state, action.props);\n    var changes = reducer(state, action);\n    var newState = action.props.stateReducer(state, _extends({}, action, {\n      changes: changes\n    }));\n    return newState;\n  }, [reducer]);\n  var _useReducer = useReducer(enhancedReducer, initialState),\n    state = _useReducer[0],\n    dispatch = _useReducer[1];\n  var propsRef = useLatestRef(props);\n  var dispatchWithProps = useCallback(function (action) {\n    return dispatch(_extends({\n      props: propsRef.current\n    }, action));\n  }, [propsRef]);\n  var action = actionRef.current;\n  useEffect(function () {\n    if (action && prevStateRef.current && prevStateRef.current !== state) {\n      callOnChangeProps(action, getState(prevStateRef.current, action.props), state);\n    }\n    prevStateRef.current = state;\n  }, [state, props, action]);\n  return [state, dispatchWithProps];\n}\n\n/**\n * Wraps the useEnhancedReducer and applies the controlled prop values before\n * returning the new state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useControlledReducer$1(reducer, initialState, props) {\n  var _useEnhancedReducer = useEnhancedReducer(reducer, initialState, props),\n    state = _useEnhancedReducer[0],\n    dispatch = _useEnhancedReducer[1];\n  return [getState(state, props), dispatch];\n}\nvar defaultProps$3 = {\n  itemToString: itemToString,\n  stateReducer: stateReducer,\n  getA11ySelectionMessage: getA11ySelectionMessage,\n  scrollIntoView: scrollIntoView,\n  environment: /* istanbul ignore next (ssr) */\n  typeof window === 'undefined' ? {} : window\n};\nfunction getDefaultValue$1(props, propKey, defaultStateValues) {\n  if (defaultStateValues === void 0) {\n    defaultStateValues = dropdownDefaultStateValues;\n  }\n  var defaultValue = props[\"default\" + capitalizeString(propKey)];\n  if (defaultValue !== undefined) {\n    return defaultValue;\n  }\n  return defaultStateValues[propKey];\n}\nfunction getInitialValue$1(props, propKey, defaultStateValues) {\n  if (defaultStateValues === void 0) {\n    defaultStateValues = dropdownDefaultStateValues;\n  }\n  var value = props[propKey];\n  if (value !== undefined) {\n    return value;\n  }\n  var initialValue = props[\"initial\" + capitalizeString(propKey)];\n  if (initialValue !== undefined) {\n    return initialValue;\n  }\n  return getDefaultValue$1(props, propKey, defaultStateValues);\n}\nfunction getInitialState$2(props) {\n  var selectedItem = getInitialValue$1(props, 'selectedItem');\n  var isOpen = getInitialValue$1(props, 'isOpen');\n  var highlightedIndex = getInitialValue$1(props, 'highlightedIndex');\n  var inputValue = getInitialValue$1(props, 'inputValue');\n  return {\n    highlightedIndex: highlightedIndex < 0 && selectedItem && isOpen ? props.items.indexOf(selectedItem) : highlightedIndex,\n    isOpen: isOpen,\n    selectedItem: selectedItem,\n    inputValue: inputValue\n  };\n}\nfunction getHighlightedIndexOnOpen(props, state, offset) {\n  var items = props.items,\n    initialHighlightedIndex = props.initialHighlightedIndex,\n    defaultHighlightedIndex = props.defaultHighlightedIndex;\n  var selectedItem = state.selectedItem,\n    highlightedIndex = state.highlightedIndex;\n  if (items.length === 0) {\n    return -1;\n  }\n\n  // initialHighlightedIndex will give value to highlightedIndex on initial state only.\n  if (initialHighlightedIndex !== undefined && highlightedIndex === initialHighlightedIndex) {\n    return initialHighlightedIndex;\n  }\n  if (defaultHighlightedIndex !== undefined) {\n    return defaultHighlightedIndex;\n  }\n  if (selectedItem) {\n    return items.indexOf(selectedItem);\n  }\n  if (offset === 0) {\n    return -1;\n  }\n  return offset < 0 ? items.length - 1 : 0;\n}\n\n/**\n * Reuse the movement tracking of mouse and touch events.\n *\n * @param {boolean} isOpen Whether the dropdown is open or not.\n * @param {Array<Object>} downshiftElementRefs Downshift element refs to track movement (toggleButton, menu etc.)\n * @param {Object} environment Environment where component/hook exists.\n * @param {Function} handleBlur Handler on blur from mouse or touch.\n * @returns {Object} Ref containing whether mouseDown or touchMove event is happening\n */\nfunction useMouseAndTouchTracker(isOpen, downshiftElementRefs, environment, handleBlur) {\n  var mouseAndTouchTrackersRef = useRef({\n    isMouseDown: false,\n    isTouchMove: false\n  });\n  useEffect(function () {\n    if ((environment == null ? void 0 : environment.addEventListener) == null) {\n      return;\n    }\n\n    // The same strategy for checking if a click occurred inside or outside downshift\n    // as in downshift.js.\n    var onMouseDown = function onMouseDown() {\n      mouseAndTouchTrackersRef.current.isMouseDown = true;\n    };\n    var onMouseUp = function onMouseUp(event) {\n      mouseAndTouchTrackersRef.current.isMouseDown = false;\n      if (isOpen && !targetWithinDownshift(event.target, downshiftElementRefs.map(function (ref) {\n        return ref.current;\n      }), environment)) {\n        handleBlur();\n      }\n    };\n    var onTouchStart = function onTouchStart() {\n      mouseAndTouchTrackersRef.current.isTouchMove = false;\n    };\n    var onTouchMove = function onTouchMove() {\n      mouseAndTouchTrackersRef.current.isTouchMove = true;\n    };\n    var onTouchEnd = function onTouchEnd(event) {\n      if (isOpen && !mouseAndTouchTrackersRef.current.isTouchMove && !targetWithinDownshift(event.target, downshiftElementRefs.map(function (ref) {\n        return ref.current;\n      }), environment, false)) {\n        handleBlur();\n      }\n    };\n    environment.addEventListener('mousedown', onMouseDown);\n    environment.addEventListener('mouseup', onMouseUp);\n    environment.addEventListener('touchstart', onTouchStart);\n    environment.addEventListener('touchmove', onTouchMove);\n    environment.addEventListener('touchend', onTouchEnd);\n\n    // eslint-disable-next-line consistent-return\n    return function cleanup() {\n      environment.removeEventListener('mousedown', onMouseDown);\n      environment.removeEventListener('mouseup', onMouseUp);\n      environment.removeEventListener('touchstart', onTouchStart);\n      environment.removeEventListener('touchmove', onTouchMove);\n      environment.removeEventListener('touchend', onTouchEnd);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, environment]);\n  return mouseAndTouchTrackersRef;\n}\n\n/* istanbul ignore next */\n// eslint-disable-next-line import/no-mutable-exports\nvar useGetterPropsCalledChecker = function useGetterPropsCalledChecker() {\n  return noop;\n};\n/**\n * Custom hook that checks if getter props are called correctly.\n *\n * @param  {...any} propKeys Getter prop names to be handled.\n * @returns {Function} Setter function called inside getter props to set call information.\n */\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  useGetterPropsCalledChecker = function useGetterPropsCalledChecker() {\n    var isInitialMountRef = useRef(true);\n    for (var _len = arguments.length, propKeys = new Array(_len), _key = 0; _key < _len; _key++) {\n      propKeys[_key] = arguments[_key];\n    }\n    var getterPropsCalledRef = useRef(propKeys.reduce(function (acc, propKey) {\n      acc[propKey] = {};\n      return acc;\n    }, {}));\n    useEffect(function () {\n      Object.keys(getterPropsCalledRef.current).forEach(function (propKey) {\n        var propCallInfo = getterPropsCalledRef.current[propKey];\n        if (isInitialMountRef.current) {\n          if (!Object.keys(propCallInfo).length) {\n            // eslint-disable-next-line no-console\n            console.error(\"downshift: You forgot to call the \" + propKey + \" getter function on your component / element.\");\n            return;\n          }\n        }\n        var suppressRefError = propCallInfo.suppressRefError,\n          refKey = propCallInfo.refKey,\n          elementRef = propCallInfo.elementRef;\n        if ((!elementRef || !elementRef.current) && !suppressRefError) {\n          // eslint-disable-next-line no-console\n          console.error(\"downshift: The ref prop \\\"\" + refKey + \"\\\" from \" + propKey + \" was not applied correctly on your element.\");\n        }\n      });\n      isInitialMountRef.current = false;\n    });\n    var setGetterPropCallInfo = useCallback(function (propKey, suppressRefError, refKey, elementRef) {\n      getterPropsCalledRef.current[propKey] = {\n        suppressRefError: suppressRefError,\n        refKey: refKey,\n        elementRef: elementRef\n      };\n    }, []);\n    return setGetterPropCallInfo;\n  };\n}\nfunction useA11yMessageSetter(getA11yMessage, dependencyArray, _ref2) {\n  var isInitialMount = _ref2.isInitialMount,\n    highlightedIndex = _ref2.highlightedIndex,\n    items = _ref2.items,\n    environment = _ref2.environment,\n    rest = _objectWithoutPropertiesLoose(_ref2, _excluded$3);\n  // Sets a11y status message on changes in state.\n  useEffect(function () {\n    if (isInitialMount || false) {\n      return;\n    }\n    updateA11yStatus(function () {\n      return getA11yMessage(_extends({\n        highlightedIndex: highlightedIndex,\n        highlightedItem: items[highlightedIndex],\n        resultCount: items.length\n      }, rest));\n    }, environment.document);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencyArray);\n}\nfunction useScrollIntoView(_ref3) {\n  var highlightedIndex = _ref3.highlightedIndex,\n    isOpen = _ref3.isOpen,\n    itemRefs = _ref3.itemRefs,\n    getItemNodeFromIndex = _ref3.getItemNodeFromIndex,\n    menuElement = _ref3.menuElement,\n    scrollIntoViewProp = _ref3.scrollIntoView;\n  // used not to scroll on highlight by mouse.\n  var shouldScrollRef = useRef(true);\n  // Scroll on highlighted item if change comes from keyboard.\n  useIsomorphicLayoutEffect(function () {\n    if (highlightedIndex < 0 || !isOpen || !Object.keys(itemRefs.current).length) {\n      return;\n    }\n    if (shouldScrollRef.current === false) {\n      shouldScrollRef.current = true;\n    } else {\n      scrollIntoViewProp(getItemNodeFromIndex(highlightedIndex), menuElement);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedIndex]);\n  return shouldScrollRef;\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nvar useControlPropsValidator = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  useControlPropsValidator = function useControlPropsValidator(_ref4) {\n    var isInitialMount = _ref4.isInitialMount,\n      props = _ref4.props,\n      state = _ref4.state;\n    // used for checking when props are moving from controlled to uncontrolled.\n    var prevPropsRef = useRef(props);\n    useEffect(function () {\n      if (isInitialMount) {\n        return;\n      }\n      validateControlledUnchanged(state, prevPropsRef.current, props);\n      prevPropsRef.current = props;\n    }, [state, props, isInitialMount]);\n  };\n}\n\n/**\n * Handles selection on Enter / Alt + ArrowUp. Closes the menu and resets the highlighted index, unless there is a highlighted.\n * In that case, selects the item and resets to defaults for open state and highlighted idex.\n * @param {Object} props The useCombobox props.\n * @param {number} highlightedIndex The index from the state.\n * @param {boolean} inputValue Also return the input value for state.\n * @returns The changes for the state.\n */\nfunction getChangesOnSelection(props, highlightedIndex, inputValue) {\n  var _props$items;\n  if (inputValue === void 0) {\n    inputValue = true;\n  }\n  var shouldSelect = ((_props$items = props.items) == null ? void 0 : _props$items.length) && highlightedIndex >= 0;\n  return _extends({\n    isOpen: false,\n    highlightedIndex: -1\n  }, shouldSelect && _extends({\n    selectedItem: props.items[highlightedIndex],\n    isOpen: getDefaultValue$1(props, 'isOpen'),\n    highlightedIndex: getDefaultValue$1(props, 'highlightedIndex')\n  }, inputValue && {\n    inputValue: props.itemToString(props.items[highlightedIndex])\n  }));\n}\n\nfunction downshiftCommonReducer(state, action, stateChangeTypes) {\n  var type = action.type,\n    props = action.props;\n  var changes;\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.disabled ? -1 : action.index\n      };\n      break;\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1\n      };\n      break;\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex\n      };\n      break;\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        selectedItem: getDefaultValue$1(props, 'selectedItem'),\n        inputValue: getDefaultValue$1(props, 'inputValue')\n      };\n      break;\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n  return _extends({}, state, changes);\n}\n/* eslint-enable complexity */\n\nfunction getItemIndexByCharacterKey(_a) {\n    var keysSoFar = _a.keysSoFar, highlightedIndex = _a.highlightedIndex, items = _a.items, itemToString = _a.itemToString, getItemNodeFromIndex = _a.getItemNodeFromIndex;\n    var lowerCasedKeysSoFar = keysSoFar.toLowerCase();\n    for (var index = 0; index < items.length; index++) {\n        // if we already have a search query in progress, we also consider the current highlighted item.\n        var offsetIndex = (index + highlightedIndex + (keysSoFar.length < 2 ? 1 : 0)) % items.length;\n        var item = items[offsetIndex];\n        if (item !== undefined &&\n            itemToString(item).toLowerCase().startsWith(lowerCasedKeysSoFar)) {\n            var element = getItemNodeFromIndex(offsetIndex);\n            if (!(element === null || element === void 0 ? void 0 : element.hasAttribute('disabled'))) {\n                return offsetIndex;\n            }\n        }\n    }\n    return highlightedIndex;\n}\nvar propTypes$2 = {\n    items: PropTypes.array.isRequired,\n    itemToString: PropTypes.func,\n    getA11yStatusMessage: PropTypes.func,\n    getA11ySelectionMessage: PropTypes.func,\n    highlightedIndex: PropTypes.number,\n    defaultHighlightedIndex: PropTypes.number,\n    initialHighlightedIndex: PropTypes.number,\n    isOpen: PropTypes.bool,\n    defaultIsOpen: PropTypes.bool,\n    initialIsOpen: PropTypes.bool,\n    selectedItem: PropTypes.any,\n    initialSelectedItem: PropTypes.any,\n    defaultSelectedItem: PropTypes.any,\n    id: PropTypes.string,\n    labelId: PropTypes.string,\n    menuId: PropTypes.string,\n    getItemId: PropTypes.func,\n    toggleButtonId: PropTypes.string,\n    stateReducer: PropTypes.func,\n    onSelectedItemChange: PropTypes.func,\n    onHighlightedIndexChange: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onIsOpenChange: PropTypes.func,\n    environment: PropTypes.shape({\n        addEventListener: PropTypes.func,\n        removeEventListener: PropTypes.func,\n        document: PropTypes.shape({\n            getElementById: PropTypes.func,\n            activeElement: PropTypes.any,\n            body: PropTypes.any\n        })\n    })\n};\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage(_a) {\n    var isOpen = _a.isOpen, resultCount = _a.resultCount, previousResultCount = _a.previousResultCount;\n    if (!isOpen) {\n        return '';\n    }\n    if (!resultCount) {\n        return 'No results are available.';\n    }\n    if (resultCount !== previousResultCount) {\n        return \"\".concat(resultCount, \" result\").concat(resultCount === 1 ? ' is' : 's are', \" available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.\");\n    }\n    return '';\n}\nvar defaultProps$2 = __assign(__assign({}, defaultProps$3), { getA11yStatusMessage: getA11yStatusMessage });\n// eslint-disable-next-line import/no-mutable-exports\nvar validatePropTypes$2 = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n    validatePropTypes$2 = function (options, caller) {\n        PropTypes.checkPropTypes(propTypes$2, options, 'prop', caller.name);\n    };\n}\n\nvar ToggleButtonClick$1 = process.env.NODE_ENV !== \"production\" ? '__togglebutton_click__' : 0;\nvar ToggleButtonKeyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_arrow_down__' : 1;\nvar ToggleButtonKeyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_arrow_up__' : 2;\nvar ToggleButtonKeyDownCharacter = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_character__' : 3;\nvar ToggleButtonKeyDownEscape = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_escape__' : 4;\nvar ToggleButtonKeyDownHome = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_home__' : 5;\nvar ToggleButtonKeyDownEnd = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_end__' : 6;\nvar ToggleButtonKeyDownEnter = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_enter__' : 7;\nvar ToggleButtonKeyDownSpaceButton = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_space_button__' : 8;\nvar ToggleButtonKeyDownPageUp = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_page_up__' : 9;\nvar ToggleButtonKeyDownPageDown = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_page_down__' : 10;\nvar ToggleButtonBlur = process.env.NODE_ENV !== \"production\" ? '__togglebutton_blur__' : 11;\nvar MenuMouseLeave$1 = process.env.NODE_ENV !== \"production\" ? '__menu_mouse_leave__' : 12;\nvar ItemMouseMove$1 = process.env.NODE_ENV !== \"production\" ? '__item_mouse_move__' : 13;\nvar ItemClick$1 = process.env.NODE_ENV !== \"production\" ? '__item_click__' : 14;\nvar FunctionToggleMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_toggle_menu__' : 15;\nvar FunctionOpenMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_open_menu__' : 16;\nvar FunctionCloseMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_close_menu__' : 17;\nvar FunctionSetHighlightedIndex$1 = process.env.NODE_ENV !== \"production\" ? '__function_set_highlighted_index__' : 18;\nvar FunctionSelectItem$1 = process.env.NODE_ENV !== \"production\" ? '__function_select_item__' : 19;\nvar FunctionSetInputValue$1 = process.env.NODE_ENV !== \"production\" ? '__function_set_input_value__' : 20;\nvar FunctionReset$2 = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 21;\n\nvar stateChangeTypes$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ToggleButtonClick: ToggleButtonClick$1,\n  ToggleButtonKeyDownArrowDown: ToggleButtonKeyDownArrowDown,\n  ToggleButtonKeyDownArrowUp: ToggleButtonKeyDownArrowUp,\n  ToggleButtonKeyDownCharacter: ToggleButtonKeyDownCharacter,\n  ToggleButtonKeyDownEscape: ToggleButtonKeyDownEscape,\n  ToggleButtonKeyDownHome: ToggleButtonKeyDownHome,\n  ToggleButtonKeyDownEnd: ToggleButtonKeyDownEnd,\n  ToggleButtonKeyDownEnter: ToggleButtonKeyDownEnter,\n  ToggleButtonKeyDownSpaceButton: ToggleButtonKeyDownSpaceButton,\n  ToggleButtonKeyDownPageUp: ToggleButtonKeyDownPageUp,\n  ToggleButtonKeyDownPageDown: ToggleButtonKeyDownPageDown,\n  ToggleButtonBlur: ToggleButtonBlur,\n  MenuMouseLeave: MenuMouseLeave$1,\n  ItemMouseMove: ItemMouseMove$1,\n  ItemClick: ItemClick$1,\n  FunctionToggleMenu: FunctionToggleMenu$1,\n  FunctionOpenMenu: FunctionOpenMenu$1,\n  FunctionCloseMenu: FunctionCloseMenu$1,\n  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex$1,\n  FunctionSelectItem: FunctionSelectItem$1,\n  FunctionSetInputValue: FunctionSetInputValue$1,\n  FunctionReset: FunctionReset$2\n});\n\n/* eslint-disable complexity */\nfunction downshiftSelectReducer(state, action) {\n  var _props$items;\n  var type = action.type,\n    props = action.props,\n    altKey = action.altKey;\n  var changes;\n  switch (type) {\n    case ItemClick$1:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index]\n      };\n      break;\n    case ToggleButtonKeyDownCharacter:\n      {\n        var lowercasedKey = action.key;\n        var inputValue = \"\" + state.inputValue + lowercasedKey;\n        var prevHighlightedIndex = !state.isOpen && state.selectedItem ? props.items.indexOf(state.selectedItem) : state.highlightedIndex;\n        var highlightedIndex = getItemIndexByCharacterKey({\n          keysSoFar: inputValue,\n          highlightedIndex: prevHighlightedIndex,\n          items: props.items,\n          itemToString: props.itemToString,\n          getItemNodeFromIndex: action.getItemNodeFromIndex\n        });\n        changes = {\n          inputValue: inputValue,\n          highlightedIndex: highlightedIndex,\n          isOpen: true\n        };\n      }\n      break;\n    case ToggleButtonKeyDownArrowDown:\n      {\n        var _highlightedIndex = state.isOpen ? getNextWrappingIndex(1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false) : altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1);\n        changes = {\n          highlightedIndex: _highlightedIndex,\n          isOpen: true\n        };\n      }\n      break;\n    case ToggleButtonKeyDownArrowUp:\n      if (state.isOpen && altKey) {\n        changes = getChangesOnSelection(props, state.highlightedIndex, false);\n      } else {\n        var _highlightedIndex2 = state.isOpen ? getNextWrappingIndex(-1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false) : getHighlightedIndexOnOpen(props, state, -1);\n        changes = {\n          highlightedIndex: _highlightedIndex2,\n          isOpen: true\n        };\n      }\n      break;\n    // only triggered when menu is open.\n    case ToggleButtonKeyDownEnter:\n    case ToggleButtonKeyDownSpaceButton:\n      changes = getChangesOnSelection(props, state.highlightedIndex, false);\n      break;\n    case ToggleButtonKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false),\n        isOpen: true\n      };\n      break;\n    case ToggleButtonKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false),\n        isOpen: true\n      };\n      break;\n    case ToggleButtonKeyDownPageUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(-10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case ToggleButtonKeyDownPageDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case ToggleButtonKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1\n      };\n      break;\n    case ToggleButtonBlur:\n      changes = _extends({\n        isOpen: false,\n        highlightedIndex: -1\n      }, state.highlightedIndex >= 0 && ((_props$items = props.items) == null ? void 0 : _props$items.length) && {\n        selectedItem: props.items[state.highlightedIndex]\n      });\n      break;\n    case FunctionSelectItem$1:\n      changes = {\n        selectedItem: action.selectedItem\n      };\n      break;\n    default:\n      return downshiftCommonReducer(state, action, stateChangeTypes$2);\n  }\n  return _extends({}, state, changes);\n}\n/* eslint-enable complexity */\n\nvar _excluded$2 = [\"onMouseLeave\", \"refKey\", \"onKeyDown\", \"onBlur\", \"ref\"],\n  _excluded2$2 = [\"onBlur\", \"onClick\", \"onPress\", \"onKeyDown\", \"refKey\", \"ref\"],\n  _excluded3$1 = [\"item\", \"index\", \"onMouseMove\", \"onClick\", \"onPress\", \"refKey\", \"ref\", \"disabled\"];\nuseSelect.stateChangeTypes = stateChangeTypes$2;\nfunction useSelect(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n  validatePropTypes$2(userProps, useSelect);\n  // Props defaults and destructuring.\n  var props = _extends({}, defaultProps$2, userProps);\n  var items = props.items,\n    scrollIntoView = props.scrollIntoView,\n    environment = props.environment,\n    itemToString = props.itemToString,\n    getA11ySelectionMessage = props.getA11ySelectionMessage,\n    getA11yStatusMessage = props.getA11yStatusMessage;\n  // Initial state depending on controlled props.\n  var initialState = getInitialState$2(props);\n  var _useControlledReducer = useControlledReducer$1(downshiftSelectReducer, initialState, props),\n    state = _useControlledReducer[0],\n    dispatch = _useControlledReducer[1];\n  var isOpen = state.isOpen,\n    highlightedIndex = state.highlightedIndex,\n    selectedItem = state.selectedItem,\n    inputValue = state.inputValue;\n\n  // Element efs.\n  var toggleButtonRef = useRef(null);\n  var menuRef = useRef(null);\n  var itemRefs = useRef({});\n  // used to keep the inputValue clearTimeout object between renders.\n  var clearTimeoutRef = useRef(null);\n  // prevent id re-generation between renders.\n  var elementIds = useElementIds(props);\n  // used to keep track of how many items we had on previous cycle.\n  var previousResultCountRef = useRef();\n  var isInitialMountRef = useRef(true);\n  // utility callback to get item element.\n  var latest = useLatestRef({\n    state: state,\n    props: props\n  });\n\n  // Some utils.\n  var getItemNodeFromIndex = useCallback(function (index) {\n    return itemRefs.current[elementIds.getItemId(index)];\n  }, [elementIds]);\n\n  // Effects.\n  // Sets a11y status message on changes in state.\n  useA11yMessageSetter(getA11yStatusMessage, [isOpen, highlightedIndex, inputValue, items], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state));\n  // Sets a11y status message on changes in selectedItem.\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state));\n  // Scroll on highlighted item if change comes from keyboard.\n  var shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    itemRefs: itemRefs,\n    scrollIntoView: scrollIntoView,\n    getItemNodeFromIndex: getItemNodeFromIndex\n  });\n\n  // Sets cleanup for the keysSoFar callback, debounded after 500ms.\n  useEffect(function () {\n    // init the clean function here as we need access to dispatch.\n    clearTimeoutRef.current = debounce(function (outerDispatch) {\n      outerDispatch({\n        type: FunctionSetInputValue$1,\n        inputValue: ''\n      });\n    }, 500);\n\n    // Cancel any pending debounced calls on mount\n    return function () {\n      clearTimeoutRef.current.cancel();\n    };\n  }, []);\n\n  // Invokes the keysSoFar callback set up above.\n  useEffect(function () {\n    if (!inputValue) {\n      return;\n    }\n    clearTimeoutRef.current(dispatch);\n  }, [dispatch, inputValue]);\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props: props,\n    state: state\n  });\n  useEffect(function () {\n    if (isInitialMountRef.current) {\n      return;\n    }\n    previousResultCountRef.current = items.length;\n  });\n  // Add mouse/touch events to document.\n  var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [menuRef, toggleButtonRef], environment, function () {\n    dispatch({\n      type: ToggleButtonBlur\n    });\n  });\n  var setGetterPropCallInfo = useGetterPropsCalledChecker('getMenuProps', 'getToggleButtonProps');\n  // Make initial ref false.\n  useEffect(function () {\n    isInitialMountRef.current = false;\n    return function () {\n      isInitialMountRef.current = true;\n    };\n  }, []);\n  // Reset itemRefs on close.\n  useEffect(function () {\n    if (!isOpen) {\n      itemRefs.current = {};\n    }\n  }, [isOpen]);\n\n  // Event handler functions.\n  var toggleButtonKeyDownHandlers = useMemo(function () {\n    return {\n      ArrowDown: function ArrowDown(event) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownArrowDown,\n          getItemNodeFromIndex: getItemNodeFromIndex,\n          altKey: event.altKey\n        });\n      },\n      ArrowUp: function ArrowUp(event) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownArrowUp,\n          getItemNodeFromIndex: getItemNodeFromIndex,\n          altKey: event.altKey\n        });\n      },\n      Home: function Home(event) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownHome,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      End: function End(event) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownEnd,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      Escape: function Escape() {\n        if (latest.current.state.isOpen) {\n          dispatch({\n            type: ToggleButtonKeyDownEscape\n          });\n        }\n      },\n      Enter: function Enter(event) {\n        event.preventDefault();\n        dispatch({\n          type: latest.current.state.isOpen ? ToggleButtonKeyDownEnter : ToggleButtonClick$1\n        });\n      },\n      PageUp: function PageUp(event) {\n        if (latest.current.state.isOpen) {\n          event.preventDefault();\n          dispatch({\n            type: ToggleButtonKeyDownPageUp,\n            getItemNodeFromIndex: getItemNodeFromIndex\n          });\n        }\n      },\n      PageDown: function PageDown(event) {\n        if (latest.current.state.isOpen) {\n          event.preventDefault();\n          dispatch({\n            type: ToggleButtonKeyDownPageDown,\n            getItemNodeFromIndex: getItemNodeFromIndex\n          });\n        }\n      },\n      ' ': function _(event) {\n        event.preventDefault();\n        var currentState = latest.current.state;\n        if (!currentState.isOpen) {\n          dispatch({\n            type: ToggleButtonClick$1\n          });\n          return;\n        }\n        if (currentState.inputValue) {\n          dispatch({\n            type: ToggleButtonKeyDownCharacter,\n            key: ' ',\n            getItemNodeFromIndex: getItemNodeFromIndex\n          });\n        } else {\n          dispatch({\n            type: ToggleButtonKeyDownSpaceButton\n          });\n        }\n      }\n    };\n  }, [dispatch, getItemNodeFromIndex, latest]);\n\n  // Action functions.\n  var toggleMenu = useCallback(function () {\n    dispatch({\n      type: FunctionToggleMenu$1\n    });\n  }, [dispatch]);\n  var closeMenu = useCallback(function () {\n    dispatch({\n      type: FunctionCloseMenu$1\n    });\n  }, [dispatch]);\n  var openMenu = useCallback(function () {\n    dispatch({\n      type: FunctionOpenMenu$1\n    });\n  }, [dispatch]);\n  var setHighlightedIndex = useCallback(function (newHighlightedIndex) {\n    dispatch({\n      type: FunctionSetHighlightedIndex$1,\n      highlightedIndex: newHighlightedIndex\n    });\n  }, [dispatch]);\n  var selectItem = useCallback(function (newSelectedItem) {\n    dispatch({\n      type: FunctionSelectItem$1,\n      selectedItem: newSelectedItem\n    });\n  }, [dispatch]);\n  var reset = useCallback(function () {\n    dispatch({\n      type: FunctionReset$2\n    });\n  }, [dispatch]);\n  var setInputValue = useCallback(function (newInputValue) {\n    dispatch({\n      type: FunctionSetInputValue$1,\n      inputValue: newInputValue\n    });\n  }, [dispatch]);\n  // Getter functions.\n  var getLabelProps = useCallback(function (labelProps) {\n    return _extends({\n      id: elementIds.labelId,\n      htmlFor: elementIds.toggleButtonId\n    }, labelProps);\n  }, [elementIds]);\n  var getMenuProps = useCallback(function (_temp, _temp2) {\n    var _extends2;\n    var _ref = _temp === void 0 ? {} : _temp,\n      onMouseLeave = _ref.onMouseLeave,\n      _ref$refKey = _ref.refKey,\n      refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey;\n      _ref.onKeyDown;\n      _ref.onBlur;\n      var ref = _ref.ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded$2);\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      _ref2$suppressRefErro = _ref2.suppressRefError,\n      suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n    var menuHandleMouseLeave = function menuHandleMouseLeave() {\n      dispatch({\n        type: MenuMouseLeave$1\n      });\n    };\n    setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef);\n    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function (menuNode) {\n      menuRef.current = menuNode;\n    }), _extends2.id = elementIds.menuId, _extends2.role = 'listbox', _extends2['aria-labelledby'] = rest && rest['aria-label'] ? undefined : \"\" + elementIds.labelId, _extends2.onMouseLeave = callAllEventHandlers(onMouseLeave, menuHandleMouseLeave), _extends2), rest);\n  }, [dispatch, setGetterPropCallInfo, elementIds]);\n  var getToggleButtonProps = useCallback(function (_temp3, _temp4) {\n    var _extends3;\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n      onBlur = _ref3.onBlur,\n      onClick = _ref3.onClick;\n      _ref3.onPress;\n      var onKeyDown = _ref3.onKeyDown,\n      _ref3$refKey = _ref3.refKey,\n      refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,\n      ref = _ref3.ref,\n      rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$2);\n    var _ref4 = _temp4 === void 0 ? {} : _temp4,\n      _ref4$suppressRefErro = _ref4.suppressRefError,\n      suppressRefError = _ref4$suppressRefErro === void 0 ? false : _ref4$suppressRefErro;\n    var latestState = latest.current.state;\n    var toggleButtonHandleClick = function toggleButtonHandleClick() {\n      dispatch({\n        type: ToggleButtonClick$1\n      });\n    };\n    var toggleButtonHandleBlur = function toggleButtonHandleBlur() {\n      if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n        dispatch({\n          type: ToggleButtonBlur\n        });\n      }\n    };\n    var toggleButtonHandleKeyDown = function toggleButtonHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n      if (key && toggleButtonKeyDownHandlers[key]) {\n        toggleButtonKeyDownHandlers[key](event);\n      } else if (isAcceptedCharacterKey(key)) {\n        dispatch({\n          type: ToggleButtonKeyDownCharacter,\n          key: key,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      }\n    };\n    var toggleProps = _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function (toggleButtonNode) {\n      toggleButtonRef.current = toggleButtonNode;\n    }), _extends3['aria-activedescendant'] = latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : '', _extends3['aria-controls'] = elementIds.menuId, _extends3['aria-expanded'] = latest.current.state.isOpen, _extends3['aria-haspopup'] = 'listbox', _extends3['aria-labelledby'] = rest && rest['aria-label'] ? undefined : \"\" + elementIds.labelId, _extends3.id = elementIds.toggleButtonId, _extends3.role = 'combobox', _extends3.tabIndex = 0, _extends3.onBlur = callAllEventHandlers(onBlur, toggleButtonHandleBlur), _extends3), rest);\n    if (!rest.disabled) {\n      /* istanbul ignore if (react-native) */\n      {\n        toggleProps.onClick = callAllEventHandlers(onClick, toggleButtonHandleClick);\n        toggleProps.onKeyDown = callAllEventHandlers(onKeyDown, toggleButtonHandleKeyDown);\n      }\n    }\n    setGetterPropCallInfo('getToggleButtonProps', suppressRefError, refKey, toggleButtonRef);\n    return toggleProps;\n  }, [latest, elementIds, setGetterPropCallInfo, dispatch, mouseAndTouchTrackersRef, toggleButtonKeyDownHandlers, getItemNodeFromIndex]);\n  var getItemProps = useCallback(function (_temp5) {\n    var _extends4;\n    var _ref5 = _temp5 === void 0 ? {} : _temp5,\n      itemProp = _ref5.item,\n      indexProp = _ref5.index,\n      onMouseMove = _ref5.onMouseMove,\n      onClick = _ref5.onClick;\n      _ref5.onPress;\n      var _ref5$refKey = _ref5.refKey,\n      refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,\n      ref = _ref5.ref,\n      disabled = _ref5.disabled,\n      rest = _objectWithoutPropertiesLoose(_ref5, _excluded3$1);\n    var _latest$current = latest.current,\n      latestState = _latest$current.state,\n      latestProps = _latest$current.props;\n    var _getItemAndIndex = getItemAndIndex(itemProp, indexProp, latestProps.items, 'Pass either item or index to getItemProps!'),\n      item = _getItemAndIndex[0],\n      index = _getItemAndIndex[1];\n    var itemHandleMouseMove = function itemHandleMouseMove() {\n      if (index === latestState.highlightedIndex) {\n        return;\n      }\n      shouldScrollRef.current = false;\n      dispatch({\n        type: ItemMouseMove$1,\n        index: index,\n        disabled: disabled\n      });\n    };\n    var itemHandleClick = function itemHandleClick() {\n      dispatch({\n        type: ItemClick$1,\n        index: index\n      });\n    };\n    var itemProps = _extends((_extends4 = {\n      disabled: disabled,\n      role: 'option',\n      'aria-selected': \"\" + (item === selectedItem),\n      id: elementIds.getItemId(index)\n    }, _extends4[refKey] = handleRefs(ref, function (itemNode) {\n      if (itemNode) {\n        itemRefs.current[elementIds.getItemId(index)] = itemNode;\n      }\n    }), _extends4), rest);\n    if (!disabled) {\n      /* istanbul ignore next (react-native) */\n      {\n        itemProps.onClick = callAllEventHandlers(onClick, itemHandleClick);\n      }\n    }\n    itemProps.onMouseMove = callAllEventHandlers(onMouseMove, itemHandleMouseMove);\n    return itemProps;\n  }, [latest, selectedItem, elementIds, shouldScrollRef, dispatch]);\n  return {\n    // prop getters.\n    getToggleButtonProps: getToggleButtonProps,\n    getLabelProps: getLabelProps,\n    getMenuProps: getMenuProps,\n    getItemProps: getItemProps,\n    // actions.\n    toggleMenu: toggleMenu,\n    openMenu: openMenu,\n    closeMenu: closeMenu,\n    setHighlightedIndex: setHighlightedIndex,\n    selectItem: selectItem,\n    reset: reset,\n    setInputValue: setInputValue,\n    // state.\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    selectedItem: selectedItem,\n    inputValue: inputValue\n  };\n}\n\nvar InputKeyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__input_keydown_arrow_down__' : 0;\nvar InputKeyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__input_keydown_arrow_up__' : 1;\nvar InputKeyDownEscape = process.env.NODE_ENV !== \"production\" ? '__input_keydown_escape__' : 2;\nvar InputKeyDownHome = process.env.NODE_ENV !== \"production\" ? '__input_keydown_home__' : 3;\nvar InputKeyDownEnd = process.env.NODE_ENV !== \"production\" ? '__input_keydown_end__' : 4;\nvar InputKeyDownPageUp = process.env.NODE_ENV !== \"production\" ? '__input_keydown_page_up__' : 5;\nvar InputKeyDownPageDown = process.env.NODE_ENV !== \"production\" ? '__input_keydown_page_down__' : 6;\nvar InputKeyDownEnter = process.env.NODE_ENV !== \"production\" ? '__input_keydown_enter__' : 7;\nvar InputChange = process.env.NODE_ENV !== \"production\" ? '__input_change__' : 8;\nvar InputBlur = process.env.NODE_ENV !== \"production\" ? '__input_blur__' : 9;\nvar InputFocus = process.env.NODE_ENV !== \"production\" ? '__input_focus__' : 10;\nvar MenuMouseLeave = process.env.NODE_ENV !== \"production\" ? '__menu_mouse_leave__' : 11;\nvar ItemMouseMove = process.env.NODE_ENV !== \"production\" ? '__item_mouse_move__' : 12;\nvar ItemClick = process.env.NODE_ENV !== \"production\" ? '__item_click__' : 13;\nvar ToggleButtonClick = process.env.NODE_ENV !== \"production\" ? '__togglebutton_click__' : 14;\nvar FunctionToggleMenu = process.env.NODE_ENV !== \"production\" ? '__function_toggle_menu__' : 15;\nvar FunctionOpenMenu = process.env.NODE_ENV !== \"production\" ? '__function_open_menu__' : 16;\nvar FunctionCloseMenu = process.env.NODE_ENV !== \"production\" ? '__function_close_menu__' : 17;\nvar FunctionSetHighlightedIndex = process.env.NODE_ENV !== \"production\" ? '__function_set_highlighted_index__' : 18;\nvar FunctionSelectItem = process.env.NODE_ENV !== \"production\" ? '__function_select_item__' : 19;\nvar FunctionSetInputValue = process.env.NODE_ENV !== \"production\" ? '__function_set_input_value__' : 20;\nvar FunctionReset$1 = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 21;\nvar ControlledPropUpdatedSelectedItem = process.env.NODE_ENV !== \"production\" ? '__controlled_prop_updated_selected_item__' : 22;\n\nvar stateChangeTypes$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  InputKeyDownArrowDown: InputKeyDownArrowDown,\n  InputKeyDownArrowUp: InputKeyDownArrowUp,\n  InputKeyDownEscape: InputKeyDownEscape,\n  InputKeyDownHome: InputKeyDownHome,\n  InputKeyDownEnd: InputKeyDownEnd,\n  InputKeyDownPageUp: InputKeyDownPageUp,\n  InputKeyDownPageDown: InputKeyDownPageDown,\n  InputKeyDownEnter: InputKeyDownEnter,\n  InputChange: InputChange,\n  InputBlur: InputBlur,\n  InputFocus: InputFocus,\n  MenuMouseLeave: MenuMouseLeave,\n  ItemMouseMove: ItemMouseMove,\n  ItemClick: ItemClick,\n  ToggleButtonClick: ToggleButtonClick,\n  FunctionToggleMenu: FunctionToggleMenu,\n  FunctionOpenMenu: FunctionOpenMenu,\n  FunctionCloseMenu: FunctionCloseMenu,\n  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex,\n  FunctionSelectItem: FunctionSelectItem,\n  FunctionSetInputValue: FunctionSetInputValue,\n  FunctionReset: FunctionReset$1,\n  ControlledPropUpdatedSelectedItem: ControlledPropUpdatedSelectedItem\n});\n\nfunction getInitialState$1(props) {\n  var initialState = getInitialState$2(props);\n  var selectedItem = initialState.selectedItem;\n  var inputValue = initialState.inputValue;\n  if (inputValue === '' && selectedItem && props.defaultInputValue === undefined && props.initialInputValue === undefined && props.inputValue === undefined) {\n    inputValue = props.itemToString(selectedItem);\n  }\n  return _extends({}, initialState, {\n    inputValue: inputValue\n  });\n}\nvar propTypes$1 = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  selectedItemChanged: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  inputValue: PropTypes.string,\n  defaultInputValue: PropTypes.string,\n  initialInputValue: PropTypes.string,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  inputId: PropTypes.string,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  })\n};\n\n/**\n * The useCombobox version of useControlledReducer, which also\n * checks if the controlled prop selectedItem changed between\n * renders. If so, it will also update inputValue with its\n * string equivalent. It uses the common useEnhancedReducer to\n * compute the rest of the state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useControlledReducer(reducer, initialState, props) {\n  var previousSelectedItemRef = useRef();\n  var _useEnhancedReducer = useEnhancedReducer(reducer, initialState, props),\n    state = _useEnhancedReducer[0],\n    dispatch = _useEnhancedReducer[1];\n\n  // ToDo: if needed, make same approach as selectedItemChanged from Downshift.\n  useEffect(function () {\n    if (!isControlledProp(props, 'selectedItem')) {\n      return;\n    }\n    if (props.selectedItemChanged(previousSelectedItemRef.current, props.selectedItem)) {\n      dispatch({\n        type: ControlledPropUpdatedSelectedItem,\n        inputValue: props.itemToString(props.selectedItem)\n      });\n    }\n    previousSelectedItemRef.current = state.selectedItem === previousSelectedItemRef.current ? props.selectedItem : state.selectedItem;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.selectedItem, props.selectedItem]);\n  return [getState(state, props), dispatch];\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nvar validatePropTypes$1 = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes$1 = function validatePropTypes(options, caller) {\n    PropTypes.checkPropTypes(propTypes$1, options, 'prop', caller.name);\n  };\n}\nvar defaultProps$1 = _extends({}, defaultProps$3, {\n  selectedItemChanged: function selectedItemChanged(prevItem, item) {\n    return prevItem !== item;\n  },\n  getA11yStatusMessage: getA11yStatusMessage$1\n});\n\n/* eslint-disable complexity */\nfunction downshiftUseComboboxReducer(state, action) {\n  var _props$items;\n  var type = action.type,\n    props = action.props,\n    altKey = action.altKey;\n  var changes;\n  switch (type) {\n    case ItemClick:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n    case InputKeyDownArrowDown:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, true)\n        };\n      } else {\n        changes = {\n          highlightedIndex: altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1, action.getItemNodeFromIndex),\n          isOpen: props.items.length >= 0\n        };\n      }\n      break;\n    case InputKeyDownArrowUp:\n      if (state.isOpen) {\n        if (altKey) {\n          changes = getChangesOnSelection(props, state.highlightedIndex);\n        } else {\n          changes = {\n            highlightedIndex: getNextWrappingIndex(-1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, true)\n          };\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(props, state, -1, action.getItemNodeFromIndex),\n          isOpen: props.items.length >= 0\n        };\n      }\n      break;\n    case InputKeyDownEnter:\n      changes = getChangesOnSelection(props, state.highlightedIndex);\n      break;\n    case InputKeyDownEscape:\n      changes = _extends({\n        isOpen: false,\n        highlightedIndex: -1\n      }, !state.isOpen && {\n        selectedItem: null,\n        inputValue: ''\n      });\n      break;\n    case InputKeyDownPageUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(-10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case InputKeyDownPageDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case InputKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case InputKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case InputBlur:\n      changes = _extends({\n        isOpen: false,\n        highlightedIndex: -1\n      }, state.highlightedIndex >= 0 && ((_props$items = props.items) == null ? void 0 : _props$items.length) && action.selectItem && {\n        selectedItem: props.items[state.highlightedIndex],\n        inputValue: props.itemToString(props.items[state.highlightedIndex])\n      });\n      break;\n    case InputChange:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        inputValue: action.inputValue\n      };\n      break;\n    case InputFocus:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n    case FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n    case ControlledPropUpdatedSelectedItem:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n    default:\n      return downshiftCommonReducer(state, action, stateChangeTypes$1);\n  }\n  return _extends({}, state, changes);\n}\n/* eslint-enable complexity */\n\nvar _excluded$1 = [\"onMouseLeave\", \"refKey\", \"ref\"],\n  _excluded2$1 = [\"item\", \"index\", \"refKey\", \"ref\", \"onMouseMove\", \"onMouseDown\", \"onClick\", \"onPress\", \"disabled\"],\n  _excluded3 = [\"onClick\", \"onPress\", \"refKey\", \"ref\"],\n  _excluded4 = [\"onKeyDown\", \"onChange\", \"onInput\", \"onFocus\", \"onBlur\", \"onChangeText\", \"refKey\", \"ref\"];\nuseCombobox.stateChangeTypes = stateChangeTypes$1;\nfunction useCombobox(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n  validatePropTypes$1(userProps, useCombobox);\n  // Props defaults and destructuring.\n  var props = _extends({}, defaultProps$1, userProps);\n  var initialIsOpen = props.initialIsOpen,\n    defaultIsOpen = props.defaultIsOpen,\n    items = props.items,\n    scrollIntoView = props.scrollIntoView,\n    environment = props.environment,\n    getA11yStatusMessage = props.getA11yStatusMessage,\n    getA11ySelectionMessage = props.getA11ySelectionMessage,\n    itemToString = props.itemToString;\n  // Initial state depending on controlled props.\n  var initialState = getInitialState$1(props);\n  var _useControlledReducer = useControlledReducer(downshiftUseComboboxReducer, initialState, props),\n    state = _useControlledReducer[0],\n    dispatch = _useControlledReducer[1];\n  var isOpen = state.isOpen,\n    highlightedIndex = state.highlightedIndex,\n    selectedItem = state.selectedItem,\n    inputValue = state.inputValue;\n\n  // Element refs.\n  var menuRef = useRef(null);\n  var itemRefs = useRef({});\n  var inputRef = useRef(null);\n  var toggleButtonRef = useRef(null);\n  var isInitialMountRef = useRef(true);\n  // prevent id re-generation between renders.\n  var elementIds = useElementIds(props);\n  // used to keep track of how many items we had on previous cycle.\n  var previousResultCountRef = useRef();\n  // utility callback to get item element.\n  var latest = useLatestRef({\n    state: state,\n    props: props\n  });\n  var getItemNodeFromIndex = useCallback(function (index) {\n    return itemRefs.current[elementIds.getItemId(index)];\n  }, [elementIds]);\n\n  // Effects.\n  // Sets a11y status message on changes in state.\n  useA11yMessageSetter(getA11yStatusMessage, [isOpen, highlightedIndex, inputValue, items], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state));\n  // Sets a11y status message on changes in selectedItem.\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], _extends({\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items: items,\n    environment: environment,\n    itemToString: itemToString\n  }, state));\n  // Scroll on highlighted item if change comes from keyboard.\n  var shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    itemRefs: itemRefs,\n    scrollIntoView: scrollIntoView,\n    getItemNodeFromIndex: getItemNodeFromIndex\n  });\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props: props,\n    state: state\n  });\n  // Focus the input on first render if required.\n  useEffect(function () {\n    var focusOnOpen = initialIsOpen || defaultIsOpen || isOpen;\n    if (focusOnOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(function () {\n    if (isInitialMountRef.current) {\n      return;\n    }\n    previousResultCountRef.current = items.length;\n  });\n  // Add mouse/touch events to document.\n  var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [inputRef, menuRef, toggleButtonRef], environment, function () {\n    dispatch({\n      type: InputBlur,\n      selectItem: false\n    });\n  });\n  var setGetterPropCallInfo = useGetterPropsCalledChecker('getInputProps', 'getMenuProps');\n  // Make initial ref false.\n  useEffect(function () {\n    isInitialMountRef.current = false;\n    return function () {\n      isInitialMountRef.current = true;\n    };\n  }, []);\n  // Reset itemRefs on close.\n  useEffect(function () {\n    var _environment$document;\n    if (!isOpen) {\n      itemRefs.current = {};\n    } else if (((_environment$document = environment.document) == null ? void 0 : _environment$document.activeElement) !== inputRef.current) {\n      var _inputRef$current;\n      inputRef == null || (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();\n    }\n  }, [isOpen, environment]);\n\n  /* Event handler functions */\n  var inputKeyDownHandlers = useMemo(function () {\n    return {\n      ArrowDown: function ArrowDown(event) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownArrowDown,\n          altKey: event.altKey,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      ArrowUp: function ArrowUp(event) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownArrowUp,\n          altKey: event.altKey,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      Home: function Home(event) {\n        if (!latest.current.state.isOpen) {\n          return;\n        }\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownHome,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      End: function End(event) {\n        if (!latest.current.state.isOpen) {\n          return;\n        }\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownEnd,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      Escape: function Escape(event) {\n        var latestState = latest.current.state;\n        if (latestState.isOpen || latestState.inputValue || latestState.selectedItem || latestState.highlightedIndex > -1) {\n          event.preventDefault();\n          dispatch({\n            type: InputKeyDownEscape\n          });\n        }\n      },\n      Enter: function Enter(event) {\n        var latestState = latest.current.state;\n        // if closed or no highlighted index, do nothing.\n        if (!latestState.isOpen || event.which === 229 // if IME composing, wait for next Enter keydown event.\n        ) {\n          return;\n        }\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownEnter,\n          getItemNodeFromIndex: getItemNodeFromIndex\n        });\n      },\n      PageUp: function PageUp(event) {\n        if (latest.current.state.isOpen) {\n          event.preventDefault();\n          dispatch({\n            type: InputKeyDownPageUp,\n            getItemNodeFromIndex: getItemNodeFromIndex\n          });\n        }\n      },\n      PageDown: function PageDown(event) {\n        if (latest.current.state.isOpen) {\n          event.preventDefault();\n          dispatch({\n            type: InputKeyDownPageDown,\n            getItemNodeFromIndex: getItemNodeFromIndex\n          });\n        }\n      }\n    };\n  }, [dispatch, latest, getItemNodeFromIndex]);\n\n  // Getter props.\n  var getLabelProps = useCallback(function (labelProps) {\n    return _extends({\n      id: elementIds.labelId,\n      htmlFor: elementIds.inputId\n    }, labelProps);\n  }, [elementIds]);\n  var getMenuProps = useCallback(function (_temp, _temp2) {\n    var _extends2;\n    var _ref = _temp === void 0 ? {} : _temp,\n      onMouseLeave = _ref.onMouseLeave,\n      _ref$refKey = _ref.refKey,\n      refKey = _ref$refKey === void 0 ? 'ref' : _ref$refKey,\n      ref = _ref.ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      _ref2$suppressRefErro = _ref2.suppressRefError,\n      suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;\n    setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef);\n    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function (menuNode) {\n      menuRef.current = menuNode;\n    }), _extends2.id = elementIds.menuId, _extends2.role = 'listbox', _extends2['aria-labelledby'] = rest && rest['aria-label'] ? undefined : \"\" + elementIds.labelId, _extends2.onMouseLeave = callAllEventHandlers(onMouseLeave, function () {\n      dispatch({\n        type: MenuMouseLeave\n      });\n    }), _extends2), rest);\n  }, [dispatch, setGetterPropCallInfo, elementIds]);\n  var getItemProps = useCallback(function (_temp3) {\n    var _extends3, _ref4;\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n      itemProp = _ref3.item,\n      indexProp = _ref3.index,\n      _ref3$refKey = _ref3.refKey,\n      refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,\n      ref = _ref3.ref,\n      onMouseMove = _ref3.onMouseMove,\n      onMouseDown = _ref3.onMouseDown,\n      onClick = _ref3.onClick;\n      _ref3.onPress;\n      var disabled = _ref3.disabled,\n      rest = _objectWithoutPropertiesLoose(_ref3, _excluded2$1);\n    var _latest$current = latest.current,\n      latestProps = _latest$current.props,\n      latestState = _latest$current.state;\n    var _getItemAndIndex = getItemAndIndex(itemProp, indexProp, latestProps.items, 'Pass either item or index to getItemProps!'),\n      index = _getItemAndIndex[1];\n    var onSelectKey = 'onClick';\n    var customClickHandler = onClick;\n    var itemHandleMouseMove = function itemHandleMouseMove() {\n      if (index === latestState.highlightedIndex) {\n        return;\n      }\n      shouldScrollRef.current = false;\n      dispatch({\n        type: ItemMouseMove,\n        index: index,\n        disabled: disabled\n      });\n    };\n    var itemHandleClick = function itemHandleClick() {\n      dispatch({\n        type: ItemClick,\n        index: index\n      });\n    };\n    var itemHandleMouseDown = function itemHandleMouseDown(e) {\n      return e.preventDefault();\n    };\n    return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function (itemNode) {\n      if (itemNode) {\n        itemRefs.current[elementIds.getItemId(index)] = itemNode;\n      }\n    }), _extends3.disabled = disabled, _extends3.role = 'option', _extends3['aria-selected'] = \"\" + (index === latestState.highlightedIndex), _extends3.id = elementIds.getItemId(index), _extends3), !disabled && (_ref4 = {}, _ref4[onSelectKey] = callAllEventHandlers(customClickHandler, itemHandleClick), _ref4), {\n      onMouseMove: callAllEventHandlers(onMouseMove, itemHandleMouseMove),\n      onMouseDown: callAllEventHandlers(onMouseDown, itemHandleMouseDown)\n    }, rest);\n  }, [dispatch, latest, shouldScrollRef, elementIds]);\n  var getToggleButtonProps = useCallback(function (_temp4) {\n    var _extends4;\n    var _ref5 = _temp4 === void 0 ? {} : _temp4,\n      onClick = _ref5.onClick;\n      _ref5.onPress;\n      var _ref5$refKey = _ref5.refKey,\n      refKey = _ref5$refKey === void 0 ? 'ref' : _ref5$refKey,\n      ref = _ref5.ref,\n      rest = _objectWithoutPropertiesLoose(_ref5, _excluded3);\n    var latestState = latest.current.state;\n    var toggleButtonHandleClick = function toggleButtonHandleClick() {\n      dispatch({\n        type: ToggleButtonClick\n      });\n    };\n    return _extends((_extends4 = {}, _extends4[refKey] = handleRefs(ref, function (toggleButtonNode) {\n      toggleButtonRef.current = toggleButtonNode;\n    }), _extends4['aria-controls'] = elementIds.menuId, _extends4['aria-expanded'] = latestState.isOpen, _extends4.id = elementIds.toggleButtonId, _extends4.tabIndex = -1, _extends4), !rest.disabled && _extends({}, {\n      onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)\n    }), rest);\n  }, [dispatch, latest, elementIds]);\n  var getInputProps = useCallback(function (_temp5, _temp6) {\n    var _extends5;\n    var _ref6 = _temp5 === void 0 ? {} : _temp5,\n      onKeyDown = _ref6.onKeyDown,\n      onChange = _ref6.onChange,\n      onInput = _ref6.onInput,\n      onFocus = _ref6.onFocus,\n      onBlur = _ref6.onBlur;\n      _ref6.onChangeText;\n      var _ref6$refKey = _ref6.refKey,\n      refKey = _ref6$refKey === void 0 ? 'ref' : _ref6$refKey,\n      ref = _ref6.ref,\n      rest = _objectWithoutPropertiesLoose(_ref6, _excluded4);\n    var _ref7 = _temp6 === void 0 ? {} : _temp6,\n      _ref7$suppressRefErro = _ref7.suppressRefError,\n      suppressRefError = _ref7$suppressRefErro === void 0 ? false : _ref7$suppressRefErro;\n    setGetterPropCallInfo('getInputProps', suppressRefError, refKey, inputRef);\n    var latestState = latest.current.state;\n    var inputHandleKeyDown = function inputHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n      if (key && inputKeyDownHandlers[key]) {\n        inputKeyDownHandlers[key](event);\n      }\n    };\n    var inputHandleChange = function inputHandleChange(event) {\n      dispatch({\n        type: InputChange,\n        inputValue: event.target.value\n      });\n    };\n    var inputHandleBlur = function inputHandleBlur(event) {\n      /* istanbul ignore else */\n      if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n        var isBlurByTabChange = event.relatedTarget === null && environment.document.activeElement !== environment.document.body;\n        dispatch({\n          type: InputBlur,\n          selectItem: !isBlurByTabChange\n        });\n      }\n    };\n    var inputHandleFocus = function inputHandleFocus() {\n      if (!latestState.isOpen) {\n        dispatch({\n          type: InputFocus\n        });\n      }\n    };\n\n    /* istanbul ignore next (preact) */\n    var onChangeKey = 'onChange';\n    var eventHandlers = {};\n    if (!rest.disabled) {\n      var _eventHandlers;\n      eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, inputHandleBlur), _eventHandlers.onFocus = callAllEventHandlers(onFocus, inputHandleFocus), _eventHandlers);\n    }\n    return _extends((_extends5 = {}, _extends5[refKey] = handleRefs(ref, function (inputNode) {\n      inputRef.current = inputNode;\n    }), _extends5['aria-activedescendant'] = latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : '', _extends5['aria-autocomplete'] = 'list', _extends5['aria-controls'] = elementIds.menuId, _extends5['aria-expanded'] = latestState.isOpen, _extends5['aria-labelledby'] = rest && rest['aria-label'] ? undefined : \"\" + elementIds.labelId, _extends5.autoComplete = 'off', _extends5.id = elementIds.inputId, _extends5.role = 'combobox', _extends5.value = latestState.inputValue, _extends5), eventHandlers, rest);\n  }, [setGetterPropCallInfo, latest, elementIds, inputKeyDownHandlers, dispatch, mouseAndTouchTrackersRef, environment]);\n\n  // returns\n  var toggleMenu = useCallback(function () {\n    dispatch({\n      type: FunctionToggleMenu\n    });\n  }, [dispatch]);\n  var closeMenu = useCallback(function () {\n    dispatch({\n      type: FunctionCloseMenu\n    });\n  }, [dispatch]);\n  var openMenu = useCallback(function () {\n    dispatch({\n      type: FunctionOpenMenu\n    });\n  }, [dispatch]);\n  var setHighlightedIndex = useCallback(function (newHighlightedIndex) {\n    dispatch({\n      type: FunctionSetHighlightedIndex,\n      highlightedIndex: newHighlightedIndex\n    });\n  }, [dispatch]);\n  var selectItem = useCallback(function (newSelectedItem) {\n    dispatch({\n      type: FunctionSelectItem,\n      selectedItem: newSelectedItem\n    });\n  }, [dispatch]);\n  var setInputValue = useCallback(function (newInputValue) {\n    dispatch({\n      type: FunctionSetInputValue,\n      inputValue: newInputValue\n    });\n  }, [dispatch]);\n  var reset = useCallback(function () {\n    dispatch({\n      type: FunctionReset$1\n    });\n  }, [dispatch]);\n  return {\n    // prop getters.\n    getItemProps: getItemProps,\n    getLabelProps: getLabelProps,\n    getMenuProps: getMenuProps,\n    getInputProps: getInputProps,\n    getToggleButtonProps: getToggleButtonProps,\n    // actions.\n    toggleMenu: toggleMenu,\n    openMenu: openMenu,\n    closeMenu: closeMenu,\n    setHighlightedIndex: setHighlightedIndex,\n    setInputValue: setInputValue,\n    selectItem: selectItem,\n    reset: reset,\n    // state.\n    highlightedIndex: highlightedIndex,\n    isOpen: isOpen,\n    selectedItem: selectedItem,\n    inputValue: inputValue\n  };\n}\n\nvar defaultStateValues = {\n  activeIndex: -1,\n  selectedItems: []\n};\n\n/**\n * Returns the initial value for a state key in the following order:\n * 1. controlled prop, 2. initial prop, 3. default prop, 4. default\n * value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nfunction getInitialValue(props, propKey) {\n  return getInitialValue$1(props, propKey, defaultStateValues);\n}\n\n/**\n * Returns the default value for a state key in the following order:\n * 1. controlled prop, 2. default prop, 3. default value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nfunction getDefaultValue(props, propKey) {\n  return getDefaultValue$1(props, propKey, defaultStateValues);\n}\n\n/**\n * Gets the initial state based on the provided props. It uses initial, default\n * and controlled props related to state in order to compute the initial value.\n *\n * @param {Object} props Props passed to the hook.\n * @returns {Object} The initial state.\n */\nfunction getInitialState(props) {\n  var activeIndex = getInitialValue(props, 'activeIndex');\n  var selectedItems = getInitialValue(props, 'selectedItems');\n  return {\n    activeIndex: activeIndex,\n    selectedItems: selectedItems\n  };\n}\n\n/**\n * Returns true if dropdown keydown operation is permitted. Should not be\n * allowed on keydown with modifier keys (ctrl, alt, shift, meta), on\n * input element with text content that is either highlighted or selection\n * cursor is not at the starting position.\n *\n * @param {KeyboardEvent} event The event from keydown.\n * @returns {boolean} Whether the operation is allowed.\n */\nfunction isKeyDownOperationPermitted(event) {\n  if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {\n    return false;\n  }\n  var element = event.target;\n  if (element instanceof HTMLInputElement &&\n  // if element is a text input\n  element.value !== '' && (\n  // and we have text in it\n  // and cursor is either not at the start or is currently highlighting text.\n  element.selectionStart !== 0 || element.selectionEnd !== 0)) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns a message to be added to aria-live region when item is removed.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11yRemovalMessage(selectionParameters) {\n  var removedSelectedItem = selectionParameters.removedSelectedItem,\n    itemToStringLocal = selectionParameters.itemToString;\n  return itemToStringLocal(removedSelectedItem) + \" has been removed.\";\n}\nvar propTypes = {\n  selectedItems: PropTypes.array,\n  initialSelectedItems: PropTypes.array,\n  defaultSelectedItems: PropTypes.array,\n  itemToString: PropTypes.func,\n  getA11yRemovalMessage: PropTypes.func,\n  stateReducer: PropTypes.func,\n  activeIndex: PropTypes.number,\n  initialActiveIndex: PropTypes.number,\n  defaultActiveIndex: PropTypes.number,\n  onActiveIndexChange: PropTypes.func,\n  onSelectedItemsChange: PropTypes.func,\n  keyNavigationNext: PropTypes.string,\n  keyNavigationPrevious: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  })\n};\nvar defaultProps = {\n  itemToString: defaultProps$3.itemToString,\n  stateReducer: defaultProps$3.stateReducer,\n  environment: defaultProps$3.environment,\n  getA11yRemovalMessage: getA11yRemovalMessage,\n  keyNavigationNext: 'ArrowRight',\n  keyNavigationPrevious: 'ArrowLeft'\n};\n\n// eslint-disable-next-line import/no-mutable-exports\nvar validatePropTypes = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes = function validatePropTypes(options, caller) {\n    PropTypes.checkPropTypes(propTypes, options, 'prop', caller.name);\n  };\n}\n\nvar SelectedItemClick = process.env.NODE_ENV !== \"production\" ? '__selected_item_click__' : 0;\nvar SelectedItemKeyDownDelete = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_delete__' : 1;\nvar SelectedItemKeyDownBackspace = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_backspace__' : 2;\nvar SelectedItemKeyDownNavigationNext = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_navigation_next__' : 3;\nvar SelectedItemKeyDownNavigationPrevious = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_navigation_previous__' : 4;\nvar DropdownKeyDownNavigationPrevious = process.env.NODE_ENV !== \"production\" ? '__dropdown_keydown_navigation_previous__' : 5;\nvar DropdownKeyDownBackspace = process.env.NODE_ENV !== \"production\" ? '__dropdown_keydown_backspace__' : 6;\nvar DropdownClick = process.env.NODE_ENV !== \"production\" ? '__dropdown_click__' : 7;\nvar FunctionAddSelectedItem = process.env.NODE_ENV !== \"production\" ? '__function_add_selected_item__' : 8;\nvar FunctionRemoveSelectedItem = process.env.NODE_ENV !== \"production\" ? '__function_remove_selected_item__' : 9;\nvar FunctionSetSelectedItems = process.env.NODE_ENV !== \"production\" ? '__function_set_selected_items__' : 10;\nvar FunctionSetActiveIndex = process.env.NODE_ENV !== \"production\" ? '__function_set_active_index__' : 11;\nvar FunctionReset = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 12;\n\nvar stateChangeTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SelectedItemClick: SelectedItemClick,\n  SelectedItemKeyDownDelete: SelectedItemKeyDownDelete,\n  SelectedItemKeyDownBackspace: SelectedItemKeyDownBackspace,\n  SelectedItemKeyDownNavigationNext: SelectedItemKeyDownNavigationNext,\n  SelectedItemKeyDownNavigationPrevious: SelectedItemKeyDownNavigationPrevious,\n  DropdownKeyDownNavigationPrevious: DropdownKeyDownNavigationPrevious,\n  DropdownKeyDownBackspace: DropdownKeyDownBackspace,\n  DropdownClick: DropdownClick,\n  FunctionAddSelectedItem: FunctionAddSelectedItem,\n  FunctionRemoveSelectedItem: FunctionRemoveSelectedItem,\n  FunctionSetSelectedItems: FunctionSetSelectedItems,\n  FunctionSetActiveIndex: FunctionSetActiveIndex,\n  FunctionReset: FunctionReset\n});\n\n/* eslint-disable complexity */\nfunction downshiftMultipleSelectionReducer(state, action) {\n  var type = action.type,\n    index = action.index,\n    props = action.props,\n    selectedItem = action.selectedItem;\n  var activeIndex = state.activeIndex,\n    selectedItems = state.selectedItems;\n  var changes;\n  switch (type) {\n    case SelectedItemClick:\n      changes = {\n        activeIndex: index\n      };\n      break;\n    case SelectedItemKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1\n      };\n      break;\n    case SelectedItemKeyDownNavigationNext:\n      changes = {\n        activeIndex: activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1\n      };\n      break;\n    case SelectedItemKeyDownBackspace:\n    case SelectedItemKeyDownDelete:\n      {\n        if (activeIndex < 0) {\n          break;\n        }\n        var newActiveIndex = activeIndex;\n        if (selectedItems.length === 1) {\n          newActiveIndex = -1;\n        } else if (activeIndex === selectedItems.length - 1) {\n          newActiveIndex = selectedItems.length - 2;\n        }\n        changes = _extends({\n          selectedItems: [].concat(selectedItems.slice(0, activeIndex), selectedItems.slice(activeIndex + 1))\n        }, {\n          activeIndex: newActiveIndex\n        });\n        break;\n      }\n    case DropdownKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: selectedItems.length - 1\n      };\n      break;\n    case DropdownKeyDownBackspace:\n      changes = {\n        selectedItems: selectedItems.slice(0, selectedItems.length - 1)\n      };\n      break;\n    case FunctionAddSelectedItem:\n      changes = {\n        selectedItems: [].concat(selectedItems, [selectedItem])\n      };\n      break;\n    case DropdownClick:\n      changes = {\n        activeIndex: -1\n      };\n      break;\n    case FunctionRemoveSelectedItem:\n      {\n        var _newActiveIndex = activeIndex;\n        var selectedItemIndex = selectedItems.indexOf(selectedItem);\n        if (selectedItemIndex < 0) {\n          break;\n        }\n        if (selectedItems.length === 1) {\n          _newActiveIndex = -1;\n        } else if (selectedItemIndex === selectedItems.length - 1) {\n          _newActiveIndex = selectedItems.length - 2;\n        }\n        changes = {\n          selectedItems: [].concat(selectedItems.slice(0, selectedItemIndex), selectedItems.slice(selectedItemIndex + 1)),\n          activeIndex: _newActiveIndex\n        };\n        break;\n      }\n    case FunctionSetSelectedItems:\n      {\n        var newSelectedItems = action.selectedItems;\n        changes = {\n          selectedItems: newSelectedItems\n        };\n        break;\n      }\n    case FunctionSetActiveIndex:\n      {\n        var _newActiveIndex2 = action.activeIndex;\n        changes = {\n          activeIndex: _newActiveIndex2\n        };\n        break;\n      }\n    case FunctionReset:\n      changes = {\n        activeIndex: getDefaultValue(props, 'activeIndex'),\n        selectedItems: getDefaultValue(props, 'selectedItems')\n      };\n      break;\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n  return _extends({}, state, changes);\n}\n\nvar _excluded = [\"refKey\", \"ref\", \"onClick\", \"onKeyDown\", \"selectedItem\", \"index\"],\n  _excluded2 = [\"refKey\", \"ref\", \"onKeyDown\", \"onClick\", \"preventKeyAction\"];\nuseMultipleSelection.stateChangeTypes = stateChangeTypes;\nfunction useMultipleSelection(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n  validatePropTypes(userProps, useMultipleSelection);\n  // Props defaults and destructuring.\n  var props = _extends({}, defaultProps, userProps);\n  var getA11yRemovalMessage = props.getA11yRemovalMessage,\n    itemToString = props.itemToString,\n    environment = props.environment,\n    keyNavigationNext = props.keyNavigationNext,\n    keyNavigationPrevious = props.keyNavigationPrevious;\n\n  // Reducer init.\n  var _useControlledReducer = useControlledReducer$1(downshiftMultipleSelectionReducer, getInitialState(props), props),\n    state = _useControlledReducer[0],\n    dispatch = _useControlledReducer[1];\n  var activeIndex = state.activeIndex,\n    selectedItems = state.selectedItems;\n\n  // Refs.\n  var isInitialMountRef = useRef(true);\n  var dropdownRef = useRef(null);\n  var previousSelectedItemsRef = useRef(selectedItems);\n  var selectedItemRefs = useRef();\n  selectedItemRefs.current = [];\n  var latest = useLatestRef({\n    state: state,\n    props: props\n  });\n\n  // Effects.\n  /* Sets a11y status message on changes in selectedItem. */\n  useEffect(function () {\n    if (isInitialMountRef.current || false) {\n      return;\n    }\n    if (selectedItems.length < previousSelectedItemsRef.current.length) {\n      var removedSelectedItem = previousSelectedItemsRef.current.find(function (item) {\n        return selectedItems.indexOf(item) < 0;\n      });\n      setStatus(getA11yRemovalMessage({\n        itemToString: itemToString,\n        resultCount: selectedItems.length,\n        removedSelectedItem: removedSelectedItem,\n        activeIndex: activeIndex,\n        activeSelectedItem: selectedItems[activeIndex]\n      }), environment.document);\n    }\n    previousSelectedItemsRef.current = selectedItems;\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItems.length]);\n  // Sets focus on active item.\n  useEffect(function () {\n    if (isInitialMountRef.current) {\n      return;\n    }\n    if (activeIndex === -1 && dropdownRef.current) {\n      dropdownRef.current.focus();\n    } else if (selectedItemRefs.current[activeIndex]) {\n      selectedItemRefs.current[activeIndex].focus();\n    }\n  }, [activeIndex]);\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props: props,\n    state: state\n  });\n  var setGetterPropCallInfo = useGetterPropsCalledChecker('getDropdownProps');\n  // Make initial ref false.\n  useEffect(function () {\n    isInitialMountRef.current = false;\n    return function () {\n      isInitialMountRef.current = true;\n    };\n  }, []);\n\n  // Event handler functions.\n  var selectedItemKeyDownHandlers = useMemo(function () {\n    var _ref;\n    return _ref = {}, _ref[keyNavigationPrevious] = function () {\n      dispatch({\n        type: SelectedItemKeyDownNavigationPrevious\n      });\n    }, _ref[keyNavigationNext] = function () {\n      dispatch({\n        type: SelectedItemKeyDownNavigationNext\n      });\n    }, _ref.Delete = function Delete() {\n      dispatch({\n        type: SelectedItemKeyDownDelete\n      });\n    }, _ref.Backspace = function Backspace() {\n      dispatch({\n        type: SelectedItemKeyDownBackspace\n      });\n    }, _ref;\n  }, [dispatch, keyNavigationNext, keyNavigationPrevious]);\n  var dropdownKeyDownHandlers = useMemo(function () {\n    var _ref2;\n    return _ref2 = {}, _ref2[keyNavigationPrevious] = function (event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: DropdownKeyDownNavigationPrevious\n        });\n      }\n    }, _ref2.Backspace = function Backspace(event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: DropdownKeyDownBackspace\n        });\n      }\n    }, _ref2;\n  }, [dispatch, keyNavigationPrevious]);\n\n  // Getter props.\n  var getSelectedItemProps = useCallback(function (_temp) {\n    var _extends2;\n    var _ref3 = _temp === void 0 ? {} : _temp,\n      _ref3$refKey = _ref3.refKey,\n      refKey = _ref3$refKey === void 0 ? 'ref' : _ref3$refKey,\n      ref = _ref3.ref,\n      onClick = _ref3.onClick,\n      onKeyDown = _ref3.onKeyDown,\n      selectedItemProp = _ref3.selectedItem,\n      indexProp = _ref3.index,\n      rest = _objectWithoutPropertiesLoose(_ref3, _excluded);\n    var latestState = latest.current.state;\n    var _getItemAndIndex = getItemAndIndex(selectedItemProp, indexProp, latestState.selectedItems, 'Pass either item or index to getSelectedItemProps!'),\n      index = _getItemAndIndex[1];\n    var isFocusable = index > -1 && index === latestState.activeIndex;\n    var selectedItemHandleClick = function selectedItemHandleClick() {\n      dispatch({\n        type: SelectedItemClick,\n        index: index\n      });\n    };\n    var selectedItemHandleKeyDown = function selectedItemHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n      if (key && selectedItemKeyDownHandlers[key]) {\n        selectedItemKeyDownHandlers[key](event);\n      }\n    };\n    return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function (selectedItemNode) {\n      if (selectedItemNode) {\n        selectedItemRefs.current.push(selectedItemNode);\n      }\n    }), _extends2.tabIndex = isFocusable ? 0 : -1, _extends2.onClick = callAllEventHandlers(onClick, selectedItemHandleClick), _extends2.onKeyDown = callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown), _extends2), rest);\n  }, [dispatch, latest, selectedItemKeyDownHandlers]);\n  var getDropdownProps = useCallback(function (_temp2, _temp3) {\n    var _extends3;\n    var _ref4 = _temp2 === void 0 ? {} : _temp2,\n      _ref4$refKey = _ref4.refKey,\n      refKey = _ref4$refKey === void 0 ? 'ref' : _ref4$refKey,\n      ref = _ref4.ref,\n      onKeyDown = _ref4.onKeyDown,\n      onClick = _ref4.onClick,\n      _ref4$preventKeyActio = _ref4.preventKeyAction,\n      preventKeyAction = _ref4$preventKeyActio === void 0 ? false : _ref4$preventKeyActio,\n      rest = _objectWithoutPropertiesLoose(_ref4, _excluded2);\n    var _ref5 = _temp3 === void 0 ? {} : _temp3,\n      _ref5$suppressRefErro = _ref5.suppressRefError,\n      suppressRefError = _ref5$suppressRefErro === void 0 ? false : _ref5$suppressRefErro;\n    setGetterPropCallInfo('getDropdownProps', suppressRefError, refKey, dropdownRef);\n    var dropdownHandleKeyDown = function dropdownHandleKeyDown(event) {\n      var key = normalizeArrowKey(event);\n      if (key && dropdownKeyDownHandlers[key]) {\n        dropdownKeyDownHandlers[key](event);\n      }\n    };\n    var dropdownHandleClick = function dropdownHandleClick() {\n      dispatch({\n        type: DropdownClick\n      });\n    };\n    return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function (dropdownNode) {\n      if (dropdownNode) {\n        dropdownRef.current = dropdownNode;\n      }\n    }), _extends3), !preventKeyAction && {\n      onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),\n      onClick: callAllEventHandlers(onClick, dropdownHandleClick)\n    }, rest);\n  }, [dispatch, dropdownKeyDownHandlers, setGetterPropCallInfo]);\n\n  // returns\n  var addSelectedItem = useCallback(function (selectedItem) {\n    dispatch({\n      type: FunctionAddSelectedItem,\n      selectedItem: selectedItem\n    });\n  }, [dispatch]);\n  var removeSelectedItem = useCallback(function (selectedItem) {\n    dispatch({\n      type: FunctionRemoveSelectedItem,\n      selectedItem: selectedItem\n    });\n  }, [dispatch]);\n  var setSelectedItems = useCallback(function (newSelectedItems) {\n    dispatch({\n      type: FunctionSetSelectedItems,\n      selectedItems: newSelectedItems\n    });\n  }, [dispatch]);\n  var setActiveIndex = useCallback(function (newActiveIndex) {\n    dispatch({\n      type: FunctionSetActiveIndex,\n      activeIndex: newActiveIndex\n    });\n  }, [dispatch]);\n  var reset = useCallback(function () {\n    dispatch({\n      type: FunctionReset\n    });\n  }, [dispatch]);\n  return {\n    getSelectedItemProps: getSelectedItemProps,\n    getDropdownProps: getDropdownProps,\n    addSelectedItem: addSelectedItem,\n    removeSelectedItem: removeSelectedItem,\n    setSelectedItems: setSelectedItems,\n    setActiveIndex: setActiveIndex,\n    reset: reset,\n    selectedItems: selectedItems,\n    activeIndex: activeIndex\n  };\n}\n\nexport { Downshift$1 as default, resetIdCounter, useCombobox, useMultipleSelection, useSelect };\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","import * as React from 'react';\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array,\n * otherwise returns the argument. Used for Preact compatibility.\n */\nexport var unwrapArray = function unwrapArray(arg) {\n  return Array.isArray(arg) ? arg[0] : arg;\n};\n/**\n * Takes a maybe-undefined function and arbitrary args and invokes the function\n * only if it is defined.\n */\n\nexport var safeInvoke = function safeInvoke(fn) {\n  if (typeof fn === 'function') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return fn.apply(void 0, args);\n  }\n};\n/**\n * Sets a ref using either a ref callback or a ref object\n */\n\nexport var setRef = function setRef(ref, node) {\n  // if its a function call it\n  if (typeof ref === 'function') {\n    return safeInvoke(ref, node);\n  } // otherwise we should treat it as a ref object\n  else if (ref != null) {\n      ref.current = node;\n    }\n};\n/**\n * Simple ponyfill for Object.fromEntries\n */\n\nexport var fromEntries = function fromEntries(entries) {\n  return entries.reduce(function (acc, _ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    acc[key] = value;\n    return acc;\n  }, {});\n};\n/**\n * Small wrapper around `useLayoutEffect` to get rid of the warning on SSR envs\n */\n\nexport var useIsomorphicLayoutEffect = typeof window !== 'undefined' && window.document && window.document.createElement ? React.useLayoutEffect : React.useEffect;","/** @license React v17.0.2\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;\nif(\"function\"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x(\"react.element\");c=x(\"react.portal\");d=x(\"react.fragment\");e=x(\"react.strict_mode\");f=x(\"react.profiler\");g=x(\"react.provider\");h=x(\"react.context\");k=x(\"react.forward_ref\");l=x(\"react.suspense\");m=x(\"react.suspense_list\");n=x(\"react.memo\");p=x(\"react.lazy\");q=x(\"react.block\");r=x(\"react.server.block\");u=x(\"react.fundamental\");v=x(\"react.debug_trace_mode\");w=x(\"react.legacy_hidden\")}\nfunction y(a){if(\"object\"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;exports.ContextConsumer=h;exports.ContextProvider=z;exports.Element=A;exports.ForwardRef=B;exports.Fragment=C;exports.Lazy=D;exports.Memo=E;exports.Portal=F;exports.Profiler=G;exports.StrictMode=H;\nexports.Suspense=I;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return y(a)===h};exports.isContextProvider=function(a){return y(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return y(a)===k};exports.isFragment=function(a){return y(a)===d};exports.isLazy=function(a){return y(a)===p};exports.isMemo=function(a){return y(a)===n};\nexports.isPortal=function(a){return y(a)===c};exports.isProfiler=function(a){return y(a)===f};exports.isStrictMode=function(a){return y(a)===e};exports.isSuspense=function(a){return y(a)===l};exports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||\"object\"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};\nexports.typeOf=y;\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CreditCardPaymentStrategy from './credit-card-payment-strategy';\n\nconst createCreditCardPaymentStrategy: PaymentStrategyFactory<CreditCardPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CreditCardPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCreditCardPaymentStrategy, [{ default: true }]);\n","import { IndividualCardElementOptions } from './stripev3';\n\nexport default function isIndividualCardElementOptions(\n    individualCardElementOptions: any,\n): individualCardElementOptions is IndividualCardElementOptions {\n    return (\n        individualCardElementOptions !== null &&\n        typeof individualCardElementOptions === 'object' &&\n        'cardNumberElementOptions' in individualCardElementOptions &&\n        'cardCvcElementOptions' in individualCardElementOptions &&\n        'cardExpiryElementOptions' in individualCardElementOptions &&\n        typeof individualCardElementOptions.cardNumberElementOptions !== 'undefined' &&\n        typeof individualCardElementOptions.cardCvcElementOptions !== 'undefined' &&\n        typeof individualCardElementOptions.cardExpiryElementOptions !== 'undefined'\n    );\n}\n","interface BaseElementOptions {\n    /**\n     * Customize the appearance of an element using CSS properties passed in a [Style](https://stripe.com/docs/js/appendix/style) object,\n     * which consists of CSS properties nested under objects for each variant.\n     */\n    style?: StripeElementStyle;\n\n    /**\n     * Set custom class names on the container DOM element when the Stripe element is in a particular state.\n     */\n    classes?: StripeElementClasses;\n\n    /**\n     * Applies a disabled state to the Element such that user input is not accepted. Default is false.\n     */\n    disabled?: boolean;\n}\n\nexport interface CreatePaymentMethodCardData extends PaymentMethodCreateParams {\n    card?: StripeElement;\n}\n\nexport interface CreatePaymentMethodIdealData extends PaymentMethodCreateParams {\n    ideal?: StripeElement;\n}\n\nexport interface CreatePaymentMethodSepaData extends PaymentMethodCreateParams {\n    sepa_debit?: StripeElement;\n}\n\n/**\n * The PaymentIntent object.\n */\nexport interface PaymentIntent {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * Status of this PaymentIntent. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).\n     */\n    status: 'succeeded' | string;\n\n    /**\n     * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n     */\n    last_payment_error: LastPaymentError | null;\n}\n\n/**\n * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n */\nexport interface LastPaymentError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n}\n\n/**\n * The PaymentMethod object\n */\nexport interface PaymentMethod {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value.\n     * It contains additional information specific to the PaymentMethod type.\n     */\n    type: string;\n}\n\nexport interface PaymentMethodCreateParams {\n    /**\n     * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n     */\n    billing_details?: StripeBillingDetails;\n}\n\nexport interface StripeError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n\n    /**\n     * The PaymentIntent object.\n     */\n    payment_intent: PaymentIntent;\n\n    /**\n     * A human-readable code for the error obtained\n     */\n    code?: string;\n}\n\n/**\n * CSS properties supported by Stripe.js.\n */\ninterface StripeElementCSSProperties {\n    /**\n     * The [background-color](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color) CSS property.\n     *\n     * This property works best with the `::selection` pseudo-class.\n     * In other cases, consider setting the background color on the element's container instaed.\n     */\n    backgroundColor?: string;\n\n    /**\n     * The [color](https://developer.mozilla.org/en-US/docs/Web/CSS/color) CSS property.\n     */\n    color?: string;\n\n    /**\n     * The [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) CSS property.\n     */\n    fontFamily?: string;\n\n    /**\n     * The [font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) CSS property.\n     */\n    fontSize?: string;\n\n    /**\n     * The [font-smoothing](https://developer.mozilla.org/en-US/docs/Web/CSS/font-smoothing) CSS property.\n     */\n    fontSmoothing?: string;\n\n    /**\n     * The [font-style](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style) CSS property.\n     */\n    fontStyle?: string;\n\n    /**\n     * The [font-variant](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant) CSS property.\n     */\n    fontVariant?: string;\n\n    /**\n     * The [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) CSS property.\n     */\n    fontWeight?: string;\n\n    /**\n     * A custom property, used to set the color of the icons that are rendered in an element.\n     */\n    iconColor?: string;\n\n    /**\n     * The [line-height](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height) CSS property.\n     *\n     * To avoid cursors being rendered inconsistently across browsers, consider using a padding on the element's container instead.\n     */\n    lineHeight?: string;\n\n    /**\n     * The [letter-spacing](https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing) CSS property.\n     */\n    letterSpacing?: string;\n\n    /**\n     * The [text-align](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) CSS property.\n     *\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    textAlign?: string;\n\n    /**\n     * The [padding](https://developer.mozilla.org/en-US/docs/Web/CSS/padding) CSS property.\n     *\n     * Available for the `idealBank` element.\n     * Accepts integer `px` values.\n     */\n    padding?: string;\n\n    /**\n     * The [text-decoration](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration) CSS property.\n     */\n    textDecoration?: string;\n\n    /**\n     * The [text-shadow](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow) CSS property.\n     */\n    textShadow?: string;\n\n    /**\n     * The [text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) CSS property.\n     */\n    textTransform?: string;\n}\n\ninterface StripeElementStyleVariant extends StripeElementCSSProperties {\n    ':hover'?: StripeElementCSSProperties;\n\n    ':focus'?: StripeElementCSSProperties;\n\n    '::placeholder'?: StripeElementCSSProperties;\n\n    '::selection'?: StripeElementCSSProperties;\n\n    ':-webkit-autofill'?: StripeElementCSSProperties;\n\n    /**\n     * Available for all elements except the `paymentRequestButton` element\n     */\n    ':disabled'?: StripeElementCSSProperties;\n\n    /**\n     * Available for the `cardNumber`, `cardExpiry`, and `cardCvc` elements.\n     */\n    '::-ms-clear'?: StripeElementCSSProperties & { display: string };\n}\n\nexport interface CardElementOptions extends BaseElementOptions {\n    /**\n     * A pre-filled set of values to include in the input (e.g., {postalCode: '94110'}).\n     * Note that sensitive card information (card number, CVC, and expiration date)\n     * cannot be pre-filled\n     */\n    value?: string;\n\n    /**\n     * Hide the postal code field. Default is false. If you are already collecting a\n     * full billing address or postal code elsewhere, set this to true.\n     */\n    hidePostalCode?: boolean;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n\n    /*\n     * Hides the icon in the Element, Default is false\n     */\n    hideIcon?: boolean;\n}\n\ninterface BaseIndividualElementOptions extends BaseElementOptions {\n    containerId: string;\n}\n\nexport interface CardNumberElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n\n    showIcon?: boolean;\n    /**\n     * Appearance of the icon in the Element. Either `solid` or `default`\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface CardExpiryElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n}\n\nexport interface CardCvcElementOptions extends BaseIndividualElementOptions {\n    /*\n     * Placeholder\n     */\n    placeholder?: string;\n}\n\nexport interface IbanElementOptions extends BaseElementOptions {\n    /**\n     * Specify the list of countries or country-groups whose IBANs you want to allow.\n     * Must be ['SEPA'].\n     */\n    supportedCountries?: string[];\n\n    /**\n     * Customize the country and format of the placeholder IBAN. Default is DE.\n     */\n    placeholderCountry?: string;\n\n    /**\n     * Appearance of the icon in the Element.\n     */\n    iconStyle?: IconStyle;\n}\n\nexport interface IdealElementOptions extends BaseElementOptions {\n    value?: string;\n\n    /**\n     * Hides the icon in the Element. Default is false.\n     */\n    hideIcon?: boolean;\n}\n\nexport interface ZipCodeElementOptions {\n    containerId: string;\n}\n\nexport enum IconStyle {\n    Solid = 'solid',\n    Default = 'default',\n}\n\nexport interface StripeElementStyle {\n    /**\n     * Base variant—all other variants inherit from these styles.\n     */\n    base?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has valid input.\n     */\n    complete?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has no customer input.\n     */\n    empty?: StripeElementStyleVariant;\n\n    /**\n     * Applied when the element has invalid input.\n     */\n    invalid?: StripeElementStyleVariant;\n}\n\nexport interface StripeElementClasses {\n    /**\n     * The base class applied to the container. Defaults to StripeElement.\n     */\n    base?: string;\n\n    /**\n     * The class name to apply when the Element is complete. Defaults to StripeElement--complete.\n     */\n    complete?: string;\n\n    /**\n     * The class name to apply when the Element is empty. Defaults to StripeElement--empty.\n     */\n    empty?: string;\n\n    /**\n     * The class name to apply when the Element is focused. Defaults to StripeElement--focus.\n     */\n    focus?: string;\n\n    /**\n     * The class name to apply when the Element is invalid. Defaults to StripeElement--invalid.\n     */\n    invalid?: string;\n\n    /**\n     * The class name to apply when the Element has its value autofilled by the browser\n     * (only on Chrome and Safari). Defaults to StripeElement--webkit-autofill.\n     */\n    webkitAutoFill?: string;\n}\n\nexport interface StripeAddress {\n    /**\n     * City, district, suburb, town, or village.\n     */\n    city?: string;\n\n    /**\n     * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).\n     */\n    country?: string;\n\n    /**\n     * Address line 1 (e.g., street, PO Box, or company name).\n     */\n    line1: string;\n\n    /**\n     * Address line 2 (e.g., apartment, suite, unit, or building).\n     */\n    line2?: string;\n\n    /**\n     * ZIP or postal code.\n     */\n    postal_code?: string;\n\n    /**\n     * State, county, province, or region.\n     */\n    state?: string;\n}\n\nexport interface StripeBillingDetails {\n    /**\n     * Billing address.\n     */\n    address?: StripeAddress;\n\n    /**\n     * Email address.\n     */\n    email?: string;\n\n    /**\n     * Full name.\n     */\n    name?: string;\n\n    /**\n     * Billing phone number (including extension).\n     */\n    phone?: string;\n}\n\nexport interface StripeShippingAddress {\n    /**\n     * Shipping Address\n     */\n    address: StripeAddress;\n\n    /**\n     * Recipient name\n     */\n    name: string;\n\n    /**\n     * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.\n     */\n    carrier?: string;\n\n    /**\n     * Recipient phone (including extension).\n     */\n    phone?: string;\n\n    /**\n     * The tracking number for a physical product, obtained from the delivery service.\n     * If multiple tracking numbers were generated for this purchase, please separate them with commas.\n     */\n    tracking_number?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmAlipayPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmAlipayPaymentData {\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmCardPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmCardPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodCardData;\n\n    /*\n     * The [shipping details](https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping) for the payment, if collected.\n     *\n     * @recommended\n     */\n    shipping?: StripeShippingAddress;\n\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n\n    /**\n     * Indicates that you intend to make future payments with this PaymentIntent's payment method.\n     *\n     * If present, the payment method used with this PaymentIntent can be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer, even after the transaction completes.\n     *\n     * Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow.\n     */\n    setup_future_usage?: 'off_session' | 'on_session' | null;\n}\n\n/**\n * Data to be sent with a `stripe.confirmIdealPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmIdealPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodIdealData;\n\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n}\n\n/**\n * Data to be sent with a `stripe.confirmSEPAPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n */\nexport interface StripeConfirmSepaPaymentData {\n    /*\n     * Either the id of an existing [PaymentMethod](https://stripe.com/docs/api/payment_methods), or an object containing data to create a\n     * PaymentMethod with. See the use case sections below for details.\n     *\n     * @recommended\n     */\n    payment_method?: CreatePaymentMethodSepaData;\n}\n\nexport type StripeConfirmPaymentData =\n    | StripeConfirmAlipayPaymentData\n    | StripeConfirmCardPaymentData\n    | StripeConfirmIdealPaymentData\n    | StripeConfirmSepaPaymentData\n    | undefined;\n\nexport type StripeElementOptions =\n    | CardElementOptions\n    | CardExpiryElementOptions\n    | CardNumberElementOptions\n    | CardCvcElementOptions\n    | IdealElementOptions\n    | IbanElementOptions\n    | ZipCodeElementOptions;\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n}\n\nexport interface StripeElements {\n    /**\n     * Creates a `AlipayElement` | `CardElement` | `CardCvcElement` |`CardExpiryElement` | `CardExpiryElement` | `CardNumberElement` | `IdealBankElement` | `IbanElement`.\n     */\n    create(elementType: StripeElementType, options?: StripeElementOptions): StripeElement;\n\n    /**\n     * Looks up a previously created `Element` by its type.\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CssFontSource {\n    /**\n     * A relative or absolute URL pointing to a CSS file with [@font-face](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face) definitions, for example:\n     * `https://fonts.googleapis.com/css?family=Open+Sans`\n     * Note that if you are using a [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) (CSP),\n     * [additional directives](https://stripe.com/docs/security#content-security-policy) may be necessary.\n     */\n    cssSrc: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CustomFontSource {\n    /**\n     * The name to give the font.\n     */\n    family: string;\n\n    /**\n     * A valid [src](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src) value pointing to your\n     * custom font file. This is usually (though not always) a link to a file with a .woff , .otf, or .svg suffix.\n     */\n    src: string;\n\n    /**\n     * A valid [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) value.\n     */\n    display?: string;\n\n    /**\n     * One of normal, italic, oblique. Defaults to normal.\n     */\n    style?: string;\n\n    /**\n     * A valid [unicode-range](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) value.\n     */\n    unicodeRange?: string;\n\n    /**\n     * A valid [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight). Note that this is a string, not a number.\n     */\n    weight?: string;\n}\n\nexport type CustomFont = CssFontSource | CustomFontSource;\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: CustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n}\n\nexport interface StripeConfirmPaymentOptions {\n    /**\n     * Set this to false if you want to [manually handle the authorization redirect](https://stripe.com/docs/payments/ideal#handle-redirect). Default is true.\n     */\n    handleActions?: boolean;\n}\n\nexport interface StripeV3Client {\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options?: StripeElementsOptions): StripeElements;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_alipay_payment\n     *\n     * Use `stripe.confirmAlipayPayment` in the Alipay payment method creation flow when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents) with data you provide, and it will automatically\n     * redirect the customer to the authorize the transaction. Once authorization is complete, the customer will be redirected\n     * back to your specified `return_url`. When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * If you have already attached a `PaymentMethod` you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmAlipayPayment` by default, will trigger a redirect when successful. If there is an error, or when handling\n     * `next_actions` manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result` object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmAlipayPayment` may take several seconds to complete. During that time, you should disable your\n     * form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result, you should\n     * be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmAlipayPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmAlipayPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_card_payment\n     *\n     * Use `stripe.confirmCardPayment` when the customer submits your payment form.\n     * When called, it will confirm the [PaymentIntent](https://stripe.com/docs/api/payment_intents)\n     * with `data` you provide and carry out 3DS or other next actions if they are required.\n     *\n     * If you are using [Dynamic 3D Secure](https://stripe.com/docs/payments/3d-secure#three-ds-radar), `stripe.confirmCardPayment` will\n     * trigger your Radar rules to execute and may open a dialog for your customer to authenticate their payment.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * `stripe.confirmCardPayment` will return a Promise which resolves with a result object.\n     * This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that stripe.confirmCardPayment may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     *\n     * Additionally, `stripe.confirmCardPayment may trigger` a [3D Secure](https://stripe.com/docs/payments/3d-secure) authentication\n     * challenge. This will be shown in a modal dialog and may be confusing for customers using assistive technologies like\n     * screen readers. You should make your form accessible by ensuring that success or error messages are clearly read out\n     * after this method completes.\n     *\n     */\n    confirmCardPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmCardPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_ideal_payment\n     *\n     * Use `stripe.confirmIdealPayment` in the [iDEAL Payments with Payment Methods](https://stripe.com/docs/payments/ideal)\n     * flow when the customer submits your payment form. When called, it will confirm the `PaymentIntent` with `data` you\n     * provide, and it will automatically redirect the customer to the authorize the transaction.\n     * Once authorization is complete, the customer will be redirected back to your specified `return_url`.\n     *\n     * When you confirm a `PaymentIntent`, it needs to have an attached [PaymentMethod](https://stripe.com/docs/api/payment_methods).\n     * In addition to confirming the `PaymentIntent`, this method can automatically create and attach a new `PaymentMethod` for you.\n     * It can also be called with an existing `PaymentMethod`, or if you have already attached a PaymentMethod you can call this\n     * method without needing to provide any additional data. These use cases are detailed in the sections that follow.\n     *\n     * @returns\n     * By default, `stripe.confirmIdealPayment` will trigger a redirect when successful. If there is an error, or when handling\n     * next actions manually by using the `handleActions: false` option, it will return a `Promise` which resolves with a `result`\n     * object. This object has either:\n     *\n     * - result.paymentIntent: the successful PaymentIntent.\n     * - result.error: an error. Refer to the API reference for all possible errors.\n     *\n     * Note that `stripe.confirmIdealPayment` may take several seconds to complete. During that time, you should disable\n     * your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error result,\n     * you should be sure to show that error to the customer, re-enable the form, and hide the waiting indicator.\n     */\n    confirmIdealPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the Payment Intents API for a full list of parameters.\n         */\n        data?: StripeConfirmIdealPaymentData,\n\n        /**\n         * An options object to control the behavior of this method.\n         */\n        options?: StripeConfirmPaymentOptions,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     *\n     * Use `stripe.confirmSepaDebitPayment` in the [SEPA Direct Debit Payments](https://stripe.com/docs/payments/sepa-debit)\n     * with Payment Methods flow when the customer submits your payment form. When called, it will confirm the\n     * [PaymentIntent](https://stripe.com/docs/api/payment_intents) with `data` you provide. Note that there are some additional\n     * requirements to this flow that are not covered in this reference. Refer to our [integration guide](https://stripe.com/docs/payments/sepa-debit\n     * for more details.\n     *\n     * When you confirm a PaymentIntent, it needs to have an attached PaymentMethod. In addition to confirming the PaymentIntent,\n     * this method can automatically create and attach a new PaymentMethod for you. If you have already attached a\n     * [PaymentMethod](https://stripe.com/docs/api/payment_methods) you can call this method without needing to provide any additional data.\n     * These use cases are detailed in the sections that follow.\n     *\n     * @docs https://stripe.com/docs/js/payment_intents/confirm_sepa_debit_payment\n     */\n    confirmSepaDebitPayment(\n        /**\n         * The [client secret](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent.\n         */\n        clientSecret: string,\n\n        /**\n         * Data to be sent with the request. Refer to the [Payment Intents API](https://stripe.com/docs/api/payment_intents/confirm) for a full list of parameters.\n         */\n        data?: StripeConfirmSepaPaymentData,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n\n    /*\n     * Use stripe.createPaymentMethod to convert payment information collected by elements into a PaymentMethod\n     * object that you safely pass to your server to use in an API call.\n     *\n     * @docs https://stripe.com/docs/js/payment_methods/create_payment_method\n     *\n     * @param type: String, The type of the PaymentMethod to create. Refer to the PaymentMethod API for all possible values.\n     * @param card: StripeElement, A card or cardNumber Element.\n     * @param billing_details: StripeBillingDetails, Billing information associated with the PaymentMethod that\n     * may be used or required by particular types of payment methods.\n     */\n    createPaymentMethod(\n        params: CreatePaymentMethodParams,\n    ): Promise<{ paymentMethod?: PaymentMethod; error?: StripeError }>;\n\n    /*\n     * Use stripe.handleCardAction in the Payment Intents API manual confirmation flow to handle a PaymentIntent\n     * with the requires_action status. It will throw an error if the PaymentIntent has a different status.\n     *\n     * @docs https://stripe.com/docs/js/payment_intents/handle_card_action\n     *\n     * @param paymentIntentClientSecret: String, The client secret of the PaymentIntent to handle.\n     */\n    handleCardAction(\n        paymentIntentClientSecret: string,\n    ): Promise<{ paymentIntent?: PaymentIntent; error?: StripeError }>;\n}\n\nexport interface CreatePaymentMethodParams {\n    type: StripePaymentMethodType;\n    card: StripeElement;\n    billing_details?: StripeBillingDetails;\n    allow_redisplay?: 'always' | 'limited' | 'unspecified';\n}\n\nexport interface StripeHostWindow extends Window {\n    Stripe?(stripePublishableKey: string, options?: StripeConfigurationOptions): StripeV3Client;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    CardCvc = 'cardCvc',\n    CardExpiry = 'cardExpiry',\n    CardNumber = 'cardNumber',\n    CreditCard = 'card',\n    IDEAL = 'idealBank',\n    Sepa = 'iban',\n}\n\nexport enum StripePaymentMethodType {\n    Alipay = 'alipay',\n    CreditCard = 'card',\n    IDEAL = 'ideal',\n    Sepa = 'sepa_debit',\n}\n\n/**\n * Initialization options.\n */\nexport interface StripeConfigurationOptions {\n    /**\n     * For usage with [Connect](https://stripe.com/docs/connect) only.\n     * Specifying a connected account ID (e.g., acct_24BFMpJ1svR5A89k) allows you to perform actions on behalf of that account.\n     */\n    stripeAccount: string;\n\n    /**\n     * Override your account's [API version](https://stripe.com/docs/api/versioning)\n     */\n    apiVersion?: string;\n\n    /**\n     * A locale used to globally configure localization in Stripe. Setting the locale here will localize error strings for all Stripe.js methods. It will also configure the locale for Elements and Checkout. Default is auto (Stripe detects the locale of the browser).\n     * Note that Checkout supports a slightly different set of locales than Stripe.js.\n     */\n    locale?: string;\n\n    betas?: string[];\n}\n\nexport interface StripeAdditionalActionData {\n    redirect_url?: string;\n    intent?: string;\n}\n\nexport interface StripeAdditionalAction {\n    type: string;\n    data: StripeAdditionalActionData;\n}\n\nexport interface StripeCardElements {\n    [index: number]: StripeElement;\n}\n\nexport interface IndividualCardElementOptions {\n    cardCvcElementOptions: CardCvcElementOptions;\n    cardExpiryElementOptions: CardExpiryElementOptions;\n    cardNumberElementOptions: CardNumberElementOptions;\n    zipCodeElementOptions?: ZipCodeElementOptions;\n}\n\nexport interface StripeV3PaymentMethod extends PaymentMethod {\n    initializationData: StripeV3InitializationData;\n}\n\nexport interface StripeV3InitializationData {\n    stripePublishableKey: string;\n    stripeConnectedAccount: string;\n    useIndividualCardFields: boolean;\n    allowRedisplayForStoredInstruments?: boolean;\n}\n","import { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport enum StripeV3ErrorType {\n    AuthFailure = 'auth_failure',\n}\n\nexport default class StripeV3Error extends StandardError {\n    subtype: string;\n\n    constructor(subtype: StripeV3ErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'stripev3_error';\n        this.subtype = subtype;\n    }\n}\n\nfunction getErrorMessage(type: StripeV3ErrorType) {\n    switch (type) {\n        case StripeV3ErrorType.AuthFailure:\n            return `User did not authenticate`;\n\n        default:\n            return 'There was an error while processing your payment. Please try again or contact us.';\n    }\n}\n","import { includes, isEmpty, omitBy, some } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    Customer,\n    HostedForm,\n    HostedFormOptions,\n    InvalidArgumentError,\n    isBillingAddressLike,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StripeV3FormattedPayload,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isIndividualCardElementOptions from './is-individual-card-element-options';\nimport {\n    PaymentIntent,\n    StripeAdditionalAction,\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElements,\n    StripeConfirmIdealPaymentData,\n    StripeConfirmPaymentData,\n    StripeConfirmSepaPaymentData,\n    StripeElement,\n    StripeElementOptions,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    PaymentMethod as StripePaymentMethod,\n    StripePaymentMethodType,\n    StripeV3Client,\n    StripeV3PaymentMethod,\n} from './stripev3';\nimport StripeV3Error, { StripeV3ErrorType } from './stripev3-error';\nimport StripeV3PaymentInitializeOptions, {\n    WithStripeV3PaymentInitializeOptions,\n} from './stripev3-initialize-options';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nconst APM_REDIRECT = [StripeElementType.Alipay, StripeElementType.IDEAL];\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private initializeOptions?: StripeV3PaymentInitializeOptions;\n    private stripeV3Client?: StripeV3Client;\n    private stripeElements?: StripeElements;\n    private stripeElement?: StripeElement;\n    private stripeCardElements?: StripeCardElements;\n    private useIndividualCardFields?: boolean;\n    private hostedForm?: HostedForm;\n    private isDeinitialize?: boolean;\n    private _allowRedisplayForStoredInstruments?: boolean;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeV3ScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions & WithStripeV3PaymentInitializeOptions) {\n        const { stripev3, methodId, gatewayId } = options;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        this.initializeOptions = stripev3;\n        this.isDeinitialize = false;\n\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(methodId);\n\n        const {\n            initializationData: {\n                stripePublishableKey,\n                stripeConnectedAccount,\n                useIndividualCardFields,\n                allowRedisplayForStoredInstruments,\n            },\n        } = paymentMethod as StripeV3PaymentMethod;\n\n        this._allowRedisplayForStoredInstruments = allowRedisplayForStoredInstruments;\n\n        const form = this.getInitializeOptions().form;\n\n        this.useIndividualCardFields = useIndividualCardFields;\n        this.stripeV3Client = await this.loadStripeJs(stripePublishableKey, stripeConnectedAccount);\n\n        if (\n            this.isCreditCard(methodId) &&\n            this.shouldShowTSVHostedForm(methodId, gatewayId) &&\n            form\n        ) {\n            this.hostedForm = await this.mountCardVerificationFields(form);\n        } else {\n            this.stripeElement = await this.mountCardFields(methodId);\n        }\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        let formattedPayload: StripeV3FormattedPayload;\n        let stripeError: StripeError | undefined;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        const { paymentData, gatewayId, methodId } = payment;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const shouldSubmitOrderBeforeLoadingAPM = includes(APM_REDIRECT, methodId);\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        if (useStoreCredit) {\n            await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        try {\n            if (shouldSubmitOrderBeforeLoadingAPM) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n            }\n\n            if (gatewayId) {\n                await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                    params: { method: methodId },\n                });\n            }\n\n            const state = this.paymentIntegrationService.getState();\n\n            if (isVaultedInstrument(paymentData)) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n\n                const { instrumentId } = paymentData;\n                const paymentMethod = state.getPaymentMethodOrThrow(payment.methodId);\n                const clientToken = paymentMethod.clientToken;\n\n                if (!clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return await this.executeWithVaulted(\n                    payment,\n                    instrumentId,\n                    shouldSetAsDefaultInstrument,\n                    clientToken,\n                );\n            }\n\n            const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n            const result = await this.confirmStripePayment(paymentMethod);\n            const { clientToken, method } = paymentMethod;\n            const { id: token } = result.paymentIntent ?? result.paymentMethod ?? { id: '' };\n\n            stripeError = result.error;\n\n            formattedPayload = {\n                credit_card_token: { token },\n                vault_payment_instrument: shouldSaveInstrument,\n                confirm: false,\n                set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n            };\n\n            if (method === StripeElementType.CreditCard) {\n                formattedPayload.client_token = clientToken;\n            }\n\n            if (!shouldSubmitOrderBeforeLoadingAPM) {\n                await this.paymentIntegrationService.submitOrder(order, options);\n            }\n\n            const paymentPayload = this.buildPaymentPayload(\n                methodId,\n                formattedPayload,\n                shouldSetAsDefaultInstrument,\n            );\n\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this.processAdditionalAction(\n                this.handleEmptyPaymentIntentError(error, stripeError),\n                methodId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.hostedForm) {\n            this.hostedForm.detach();\n        }\n\n        this.isDeinitialize = true;\n        this.unmountElement();\n\n        return Promise.resolve();\n    }\n\n    private buildPaymentPayload(\n        methodId: string,\n        formattedPayload: StripeV3FormattedPayload,\n        shouldSetAsDefaultInstrument: boolean | undefined,\n    ): Payment {\n        const paymentData = shouldSetAsDefaultInstrument\n            ? {\n                  formattedPayload: {\n                      ...formattedPayload,\n                      set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                  },\n              }\n            : { formattedPayload };\n\n        return { methodId, paymentData };\n    }\n\n    private isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private isAuthError(stripeError: StripeError | undefined) {\n        return stripeError?.code === 'payment_intent_authentication_failure';\n    }\n\n    private isCreditCard(methodId: string): boolean {\n        return methodId === StripePaymentMethodType.CreditCard;\n    }\n\n    private isHostedFieldAvailable(): boolean {\n        const options = this.getInitializeOptions();\n        const definedFields = omitBy(options.form?.fields, isEmpty);\n\n        return !isEmpty(definedFields);\n    }\n\n    private isHostedPaymentFormEnabled(methodId: string, gatewayId?: string): boolean {\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return Boolean(paymentMethod.config.isHostedFormEnabled);\n    }\n\n    private async confirmStripePayment(paymentMethod: PaymentMethod): Promise<{\n        paymentIntent?: PaymentIntent | undefined;\n        paymentMethod?: StripePaymentMethod | undefined;\n        error?: StripeError | undefined;\n    }> {\n        const { clientToken: clientSecret, method, returnUrl } = paymentMethod;\n\n        if (!clientSecret) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        switch (method) {\n            case StripeElementType.Alipay:\n                return this.getStripeJs().confirmAlipayPayment(\n                    clientSecret,\n                    { return_url: returnUrl },\n                    { handleActions: false },\n                );\n\n            case StripeElementType.IDEAL: {\n                const data = this.mapStripePaymentData(StripePaymentMethodType.IDEAL, returnUrl);\n\n                return this.getStripeJs().confirmIdealPayment(clientSecret, data, {\n                    handleActions: false,\n                });\n            }\n\n            case StripeElementType.Sepa: {\n                const data = this.mapStripePaymentData(StripePaymentMethodType.Sepa);\n\n                return this.getStripeJs().confirmSepaDebitPayment(clientSecret, data);\n            }\n\n            default: {\n                const card = this.useIndividualCardFields\n                    ? this.getStripeCardElements()[0]\n                    : this.getStripeElement();\n                const billingDetails = this.mapStripeBillingDetails(\n                    this.paymentIntegrationService.getState().getBillingAddress(),\n                    this.paymentIntegrationService.getState().getCustomer(),\n                );\n                const shouldAllowRedisplay = this._allowRedisplayForStoredInstruments;\n\n                return this.getStripeJs().createPaymentMethod({\n                    type: StripePaymentMethodType.CreditCard,\n                    card,\n                    billing_details: billingDetails,\n                    ...(shouldAllowRedisplay ? { allow_redisplay: 'always' } : {}),\n                });\n            }\n        }\n    }\n\n    private async executeWithVaulted(\n        payment: OrderPaymentRequestBody,\n        token: string,\n        shouldSetAsDefaultInstrument: boolean | undefined,\n        clientToken: string,\n    ): Promise<any> {\n        const formattedPayload = {\n            bigpay_token: { token },\n            confirm: true,\n            client_token: clientToken,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n        };\n\n        if (\n            this.isHostedPaymentFormEnabled(payment.methodId, payment.gatewayId) &&\n            this.hostedForm\n        ) {\n            const form = this.hostedForm;\n\n            if (payment.paymentData && isVaultedInstrument(payment.paymentData)) {\n                payment.paymentData = {\n                    ...payment.paymentData,\n                    instrumentId: JSON.stringify({\n                        token: payment.paymentData?.instrumentId || '',\n                        client_token: clientToken,\n                    }),\n                };\n            }\n\n            await form.validate();\n            await form.submit(payment);\n\n            return this.paymentIntegrationService.loadCurrentOrder();\n        }\n\n        const paymentPayload = this.buildPaymentPayload(\n            payment.methodId,\n            formattedPayload,\n            shouldSetAsDefaultInstrument,\n        );\n\n        return this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    private getInitializeOptions(): StripeV3PaymentInitializeOptions {\n        if (!this.initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.initializeOptions;\n    }\n\n    private getStripeCardElements(): StripeCardElements {\n        if (!this.stripeCardElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeCardElements;\n    }\n\n    private getStripeElement(): StripeElement {\n        if (!this.stripeElement) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeElement;\n    }\n\n    private getStripeJs(): StripeV3Client {\n        if (!this.stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.stripeV3Client;\n    }\n\n    private handleEmptyPaymentIntentError(error: unknown, stripeError: StripeError | undefined) {\n        if (!isRequestError(error)) {\n            return error;\n        }\n\n        return some(error.body.errors, { code: 'required_field' }) && stripeError\n            ? new Error(stripeError.message)\n            : error;\n    }\n\n    private async loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeV3Client> {\n        if (this.stripeV3Client) {\n            return Promise.resolve(this.stripeV3Client);\n        }\n\n        return this.scriptLoader.load(\n            stripePublishableKey,\n            stripeConnectedAccount,\n            this.paymentIntegrationService.getState().getLocale(),\n        );\n    }\n\n    private mapStripeAddress(address?: Address): StripeAddress {\n        if (address) {\n            const {\n                city,\n                countryCode: country,\n                address1: line1,\n                address2: line2,\n                postalCode,\n                stateOrProvinceCode: state,\n            } = address;\n\n            return { city, country, line1, line2, postal_code: postalCode, state };\n        }\n\n        return { line1: '' };\n    }\n\n    private mapStripeBillingDetails(\n        billingAddress?: BillingAddress,\n        customer?: Customer,\n    ): StripeBillingDetails {\n        const { firstName, lastName } = billingAddress ||\n            customer || { firstName: 'Guest', lastName: '' };\n        const name = `${firstName} ${lastName}`.trim();\n        const { options } = this.getInitializeOptions();\n\n        if (this.useIndividualCardFields && isIndividualCardElementOptions(options)) {\n            const { zipCodeElementOptions } = options;\n\n            if (zipCodeElementOptions) {\n                const postalCode = document.getElementById(zipCodeElementOptions.containerId)\n                    ? (\n                          document.getElementById(\n                              zipCodeElementOptions.containerId,\n                          ) as HTMLInputElement\n                      ).value\n                    : '';\n\n                if (postalCode && billingAddress) {\n                    billingAddress = { ...billingAddress, postalCode };\n                }\n            }\n        }\n\n        const address = {\n            address: this.mapStripeAddress(billingAddress),\n        };\n\n        if (customer && customer.addresses[0] && isBillingAddressLike(customer.addresses[0])) {\n            const customerAddress = customer.addresses[0];\n            const { email } = customer;\n            const { phone } = customerAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        if (billingAddress) {\n            const { email, phone } = billingAddress;\n\n            return phone ? { ...address, email, name, phone } : { ...address, email, name };\n        }\n\n        return { ...address, name };\n    }\n\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType.IDEAL,\n        returnUrl?: string,\n    ): StripeConfirmIdealPaymentData;\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType.Sepa,\n    ): StripeConfirmSepaPaymentData;\n    private mapStripePaymentData(\n        stripePaymentMethodType: StripePaymentMethodType,\n        returnUrl?: string,\n    ): StripeConfirmPaymentData {\n        const customer = this.paymentIntegrationService.getState().getCustomer();\n        const billingAddress = this.paymentIntegrationService.getState().getBillingAddress();\n\n        const result: Partial<StripeConfirmPaymentData> = {\n            payment_method: {\n                [stripePaymentMethodType]: this.getStripeElement(),\n                billing_details: this.mapStripeBillingDetails(billingAddress, customer),\n            },\n        };\n\n        if (stripePaymentMethodType === StripePaymentMethodType.IDEAL) {\n            return { ...result, return_url: returnUrl };\n        }\n\n        return result;\n    }\n\n    private mountCardFields(methodId: string): Promise<StripeElement> {\n        const { options, containerId } = this.getInitializeOptions();\n\n        let stripeElement: StripeElement;\n\n        return new Promise((resolve, reject) => {\n            if (!this.stripeElements) {\n                this.stripeElements = this.getStripeJs().elements();\n            }\n\n            switch (methodId) {\n                case StripeElementType.CreditCard:\n                    if (this.useIndividualCardFields && isIndividualCardElementOptions(options)) {\n                        const {\n                            cardNumberElementOptions,\n                            cardExpiryElementOptions,\n                            cardCvcElementOptions,\n                        } = options;\n\n                        const cardNumberElement =\n                            this.stripeElements.getElement(StripeElementType.CardNumber) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardNumber,\n                                cardNumberElementOptions,\n                            );\n                        const cardExpiryElement =\n                            this.stripeElements.getElement(StripeElementType.CardExpiry) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardExpiry,\n                                cardExpiryElementOptions,\n                            );\n                        const cardCvcElement =\n                            this.stripeElements.getElement(StripeElementType.CardCvc) ||\n                            this.stripeElements.create(\n                                StripeElementType.CardCvc,\n                                cardCvcElementOptions,\n                            );\n\n                        this.stripeCardElements = [\n                            cardNumberElement,\n                            cardExpiryElement,\n                            cardCvcElement,\n                        ];\n                        stripeElement = this.stripeCardElements[0];\n\n                        try {\n                            cardNumberElement.mount(`#${cardNumberElementOptions.containerId}`);\n                            cardExpiryElement.mount(`#${cardExpiryElementOptions.containerId}`);\n                            cardCvcElement.mount(`#${cardCvcElementOptions.containerId}`);\n                        } catch (error) {\n                            if (!this.isDeinitialize) {\n                                reject(\n                                    new InvalidArgumentError(\n                                        'Unable to mount Stripe component without valid container ID.',\n                                    ),\n                                );\n                            }\n                        }\n                    } else {\n                        stripeElement =\n                            this.stripeElements.getElement(methodId) ||\n                            this.stripeElements.create(methodId, options as StripeElementOptions);\n\n                        try {\n                            stripeElement.mount(`#${containerId}`);\n                        } catch (error) {\n                            if (!this.isDeinitialize) {\n                                reject(\n                                    new InvalidArgumentError(\n                                        'Unable to mount Stripe component without valid container ID.',\n                                    ),\n                                );\n                            }\n                        }\n                    }\n\n                    break;\n\n                case StripeElementType.IDEAL:\n                case StripeElementType.Sepa:\n                    stripeElement =\n                        this.stripeElements.getElement(methodId) ||\n                        this.stripeElements.create(methodId, options as StripeElementOptions);\n\n                    try {\n                        stripeElement.mount(`#${containerId}`);\n                    } catch (error) {\n                        if (!this.isDeinitialize) {\n                            reject(\n                                new InvalidArgumentError(\n                                    'Unable to mount Stripe component without valid container ID.',\n                                ),\n                            );\n                        }\n                    }\n\n                    break;\n\n                case StripeElementType.Alipay:\n                    break;\n            }\n\n            resolve(stripeElement);\n        });\n    }\n\n    private async mountCardVerificationFields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const bigpayBaseUrl = storeConfig.paymentSettings.bigpayBaseUrl;\n\n        const form = this.paymentIntegrationService.createHostedForm(bigpayBaseUrl, formOptions);\n\n        await form.attach();\n\n        return form;\n    }\n\n    private async processAdditionalAction(\n        error: unknown,\n        methodId: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<any | never> {\n        if (!isRequestError(error)) {\n            throw error;\n        }\n\n        const isAdditionalActionError = some(error.body.errors, {\n            code: 'additional_action_required',\n        });\n        const isThreeDSecureRequiredError = some(error.body.errors, {\n            code: 'three_d_secure_required',\n        });\n\n        if (isAdditionalActionError) {\n            const action: StripeAdditionalAction = error.body.additional_action_required;\n\n            if (action && action.type === 'redirect_to_url') {\n                return new Promise(() => {\n                    if (action.data.redirect_url) {\n                        window.location.replace(action.data.redirect_url);\n                    }\n                });\n            }\n        }\n\n        if (isThreeDSecureRequiredError) {\n            const clientSecret = error.body.three_ds_result.token;\n            const needsConfirm = false;\n            let catchedConfirmError = false;\n            let result;\n\n            try {\n                result = await this.getStripeJs().confirmCardPayment(clientSecret);\n            } catch (error) {\n                catchedConfirmError = true;\n            }\n\n            if (result?.error) {\n                if (this.isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                if (this.isAuthError(result.error)) {\n                    throw new StripeV3Error(StripeV3ErrorType.AuthFailure);\n                }\n\n                throw new Error(result.error.message);\n            }\n\n            const token = this.getPaymentToken(\n                result?.paymentIntent,\n                clientSecret,\n                catchedConfirmError,\n            );\n\n            const formattedPayload = {\n                credit_card_token: { token },\n                vault_payment_instrument: shouldSaveInstrument,\n                confirm: needsConfirm,\n            };\n\n            const paymentPayload = this.buildPaymentPayload(\n                methodId,\n                formattedPayload,\n                shouldSetAsDefaultInstrument,\n            );\n\n            try {\n                return await this.paymentIntegrationService.submitPayment(paymentPayload);\n            } catch (error) {\n                throw this.handleEmptyPaymentIntentError(error, result?.error);\n            }\n        }\n\n        throw error;\n    }\n\n    private getPaymentToken(\n        paymentIntent: PaymentIntent | undefined,\n        clientSecret: string,\n        catchedConfirmError: boolean,\n    ): string {\n        if (!paymentIntent || catchedConfirmError) {\n            return clientSecret;\n        }\n\n        return paymentIntent.id;\n    }\n\n    private shouldShowTSVHostedForm(methodId: string, gatewayId: string): boolean {\n        return (\n            this.isHostedFieldAvailable() && this.isHostedPaymentFormEnabled(methodId, gatewayId)\n        );\n    }\n\n    private unmountElement(): void {\n        if (this.stripeElement) {\n            this.stripeElement.unmount();\n            this.stripeElement = undefined;\n        }\n    }\n}\n","import BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: any): address is BillingAddress {\n    return (\n        typeof address === 'object' &&\n        address !== null &&\n        'id' in address &&\n        typeof address.id !== 'undefined'\n    );\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    load(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeV3Client> {\n        return this.scriptLoader.loadScript('https://js.stripe.com/v3/').then(() => {\n            if (!this.stripeWindow.Stripe) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this.stripeWindow.Stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: ['payment_intent_beta_3', 'alipay_pm_beta_1'],\n                apiVersion: '2020-03-02;alipay_beta=v1',\n            });\n        });\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport StripeV3PaymentStrategy from './stripev3-payment-strategy';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nconst createStripeV3PaymentStrategy: PaymentStrategyFactory<any> = (paymentIntegrationService) => {\n    return new StripeV3PaymentStrategy(\n        paymentIntegrationService,\n        new StripeV3ScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createStripeV3PaymentStrategy, [{ gateway: 'stripev3' }]);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\n/**\n * Initialization options.\n */\nexport interface StripeConfigurationOptions {\n    /**\n     * For usage with [Connect](https://stripe.com/docs/connect) only.\n     * Specifying a connected account ID (e.g., acct_24BFMpJ1svR5A89k) allows you to perform actions on behalf of that account.\n     */\n    stripeAccount?: string;\n\n    /**\n     * Override your account's [API version](https://stripe.com/docs/api/versioning)\n     */\n    apiVersion?: string;\n\n    /**\n     * A locale used to globally configure localization in Stripe. Setting the locale here will localize error strings for all Stripe.js methods. It will also configure the locale for Elements and Checkout. Default is auto (Stripe detects the locale of the browser).\n     * Note that Checkout supports a slightly different set of locales than Stripe.js.\n     */\n    locale?: string;\n\n    betas?: string[];\n}\n\nexport interface StripeAdditionalActionData {\n    redirect_url?: string;\n    intent?: string;\n}\n\nexport interface StripeAdditionalAction {\n    type: string;\n    data: StripeAdditionalActionData;\n}\n\n/**\n * The PaymentIntent object.\n */\nexport interface PaymentIntent {\n    /**\n     * Unique identifier for the object.\n     */\n    id: string;\n\n    /**\n     * The client secret of the PaymentIntent. Used for client-side retrieval using a publishable key.\n     */\n    client_secret?: string;\n\n    /**\n     * Status of this PaymentIntent. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).\n     */\n    status: 'succeeded' | string;\n\n    /**\n     * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n     */\n    last_payment_error: LastPaymentError | null;\n\n    payment_method_options?: StripePIPaymentMethodOptions;\n}\n\nexport interface StripePIPaymentMethodSavingOptions {\n    setup_future_usage?: StripeInstrumentSetupFutureUsage;\n    verification_method?: string;\n}\n\nexport interface StripePIPaymentMethodOptions {\n    card?: StripePIPaymentMethodSavingOptions;\n    us_bank_account?: StripePIPaymentMethodSavingOptions;\n}\n\n/**\n * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.\n */\nexport interface LastPaymentError {\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CssFontSource {\n    /**\n     * A relative or absolute URL pointing to a CSS file with [@font-face](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face) definitions, for example:\n     * `https://fonts.googleapis.com/css?family=Open+Sans`\n     * Note that if you are using a [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) (CSP),\n     * [additional directives](https://stripe.com/docs/security#content-security-policy) may be necessary.\n     */\n    cssSrc: string;\n}\n\n/**\n * This object is used to pass custom fonts when creating an [Elements](https://stripe.com/docs/js/elements_object/create) object.\n */\nexport interface CustomFontSource {\n    /**\n     * The name to give the font.\n     */\n    family: string;\n\n    /**\n     * A valid [src](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src) value pointing to your\n     * custom font file. This is usually (though not always) a link to a file with a .woff , .otf, or .svg suffix.\n     */\n    src: string;\n\n    /**\n     * A valid [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) value.\n     */\n    display?: string;\n\n    /**\n     * One of normal, italic, oblique. Defaults to normal.\n     */\n    style?: string;\n\n    /**\n     * A valid [unicode-range](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range) value.\n     */\n    unicodeRange?: string;\n\n    /**\n     * A valid [font-weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight). Note that this is a string, not a number.\n     */\n    weight?: string;\n}\n\nexport type StripeCustomFont = CssFontSource | CustomFontSource;\n\nexport interface StripeError {\n    /**\n     * type of error. When the error type is card_error or validation_error, you can display the error message in error.message directly to your user.\n     */\n    type: string;\n    /**\n     * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n     */\n    message?: string;\n\n    /**\n     * The PaymentIntent object.\n     */\n    payment_intent: PaymentIntent;\n}\n\nexport interface StripeElement {\n    /**\n     * The `element.mount` method attaches your element to the DOM.\n     */\n    mount(domElement: string | HTMLElement): void;\n\n    /**\n     * Removes the element from the DOM and destroys it.\n     * A destroyed element can not be re-activated or re-mounted to the DOM.\n     */\n    destroy(): void;\n\n    /**\n     * Unmounts the element from the DOM.\n     * Call `element.mount` to re-attach it to the DOM.\n     */\n    unmount(): void;\n\n    /**\n     * The change event is triggered when the Element's value changes. The event payload always contains certain keys,\n     * in addition to some Element-specific keys.\n     * https://stripe.com/docs/js/element/events/on_change?type=paymentElement\n     */\n    on(event: StripeElementEvent, handler: (event: StripeEventType) => void): void;\n\n    /**\n     * Updates the options the Payment Element was initialized with. Updates are merged into the existing configuration.\n     * https://docs.stripe.com/js/elements_object/update_payment_element\n     */\n    update(options?: StripeElementsCreateOptions): void;\n\n    /**\n     * This method collapses the Payment Element into a row of payment method tabs.\n     * https://docs.stripe.com/js/elements_object/collapse_payment_element\n     */\n    collapse(): void;\n}\n\nexport interface StripeEvent {\n    complete: boolean;\n    elementType: string;\n    empty: boolean;\n}\n\nexport interface StripeCustomerEvent extends StripeEvent {\n    collapsed?: boolean;\n    authenticated: boolean;\n    value: {\n        email: string;\n    };\n}\n\nexport interface StripeShippingEvent extends StripeEvent {\n    mode?: string;\n    isNewAddress?: boolean;\n    phoneFieldRequired: boolean;\n    value: {\n        address: Address;\n        name?: string;\n        firstName?: string;\n        lastName?: string;\n        phone?: string;\n    };\n    fields?: {\n        phone: string;\n    };\n    display?: {\n        name: string;\n    };\n}\n\nexport interface StripePaymentEvent extends StripeEvent {\n    value: {\n        type: StripePaymentMethodType;\n    };\n    collapsed?: boolean;\n}\n\nexport interface Address {\n    city: string;\n    country: string;\n    line1: string;\n    line2?: string;\n    postal_code: string;\n    state: string;\n}\n\nexport type StripeEventType =\n    | StripeShippingEvent\n    | StripeCustomerEvent\n    | StripePaymentEvent\n    | StripeLinkV2Event;\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping\n */\nexport type AddressOptions = Partial<Address>;\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n * https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface AddressProperties {\n    city?: AutoOrNever;\n    country?: AutoOrNever;\n    state?: AutoOrNever;\n    postalCode?: AutoOrNever;\n    line1?: AutoOrNever;\n    line2?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsOptions {\n    name?: string;\n    email?: string;\n    address?: AddressOptions;\n    phone?: string;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface BillingDetailsProperties {\n    name?: AutoOrNever;\n    email?: AutoOrNever;\n    address?: AutoOrNever | AddressProperties;\n    phone?: AutoOrNever;\n}\n\n/**\n * Object definition for part of the data sent to confirm the PaymentIntent.\n */\nexport interface PaymentMethodDataOptions {\n    billing_details: BillingDetailsOptions;\n    allow_redisplay?: 'always' | 'limited' | 'unspecified';\n}\n\n/**\n * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n */\nexport interface StripeConfirmParams {\n    /*\n     * If you are [handling next actions yourself](https://stripe.com/docs/payments/payment-intents/verifying-status#next-actions), pass in a return_url. If the subsequent action\n     * is redirect_to_url, this URL will be used on the return path for the redirect.\n     *\n     * @recommended\n     */\n    return_url?: string;\n    payment_method_data?: PaymentMethodDataOptions;\n}\n\n/**\n * Data to be sent with a `stripe.confirmPayment` request.\n * Refer to the [Payment Intents API](https://stripe.com/docs/js/payment_intents/confirm_payment) for a full list of parameters.\n */\nexport interface StripeConfirmPaymentData {\n    /**\n     * The Elements instance that was used to create the Payment Element.\n     */\n    elements: StripeElements;\n\n    /**\n     * Parameters that will be passed on to the Stripe API to confirm the PaymentIntent.\n     */\n    confirmParams?: StripeConfirmParams;\n\n    /**\n     * By default, confirmPayment will always redirect to your return_url after a successful confirmation.\n     * If you set redirect: \"if_required\", then confirmPayment will only redirect if your user chooses a redirect-based payment method.\n     */\n    redirect?: StripeStringConstants.ALWAYS | StripeStringConstants.IF_REQUIRED;\n\n    clientSecret?: string;\n}\n\nexport interface FieldsOptions {\n    billingDetails?: AutoOrNever | BillingDetailsProperties;\n    phone?: string;\n}\n\nexport interface WalletOptions {\n    applePay?: AutoOrNever;\n    googlePay?: AutoOrNever;\n    link?: AutoOrNever;\n}\n\nexport interface TermOptions {\n    card?: AutoOrNever;\n}\n\nexport interface StripeLayoutOptions {\n    type?: 'accordion' | 'tabs';\n    linkInAccordion?: boolean;\n    defaultCollapsed?: boolean;\n    radios?: boolean;\n    spacedAccordionItems?: boolean;\n    visibleAccordionItemsCount?: number;\n}\n\n/**\n * All available options are here https://stripe.com/docs/js/elements_object/create_payment_element\n */\nexport interface StripeElementsCreateOptions {\n    mode?: string;\n    fields?: FieldsOptions;\n    wallets?: WalletOptions;\n    allowedCountries?: string[];\n    defaultValues?: ShippingDefaultValues | CustomerDefaultValues | PaymentDefaultValues;\n    validation?: validationElement;\n    display?: { name: StripeDisplayName };\n    terms?: TermOptions;\n    layout?: StripeLayoutOptions;\n    paymentMethodOrder?: string[];\n    //  Link v2 options\n    lineItems?: LineItem[];\n    allowedShippingCountries?: string[];\n    shippingAddressRequired?: boolean;\n    shippingRates?: StripeLinkV2ShippingRate[];\n    billingAddressRequired?: boolean;\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    paymentMethods?: {\n        link: StripeStringConstants.AUTO;\n        applePay: StripeStringConstants.NEVER;\n        googlePay: StripeStringConstants.NEVER;\n        amazonPay: StripeStringConstants.NEVER;\n        paypal: StripeStringConstants.NEVER;\n        klarna: StripeStringConstants.NEVER;\n    };\n    buttonHeight?: number;\n    savePaymentMethod?: StripeSavePaymentMethod;\n}\n\ninterface validationElement {\n    phone?: validationRequiredElement;\n}\n\ninterface validationRequiredElement {\n    required?: string;\n}\n\ninterface PaymentDefaultValues {\n    savePaymentMethod?: boolean;\n    billingDetails?: BillingDetailsOptions;\n}\n\ninterface ShippingDefaultValues {\n    name?: string;\n    firstName?: string;\n    lastName?: string;\n    phone: string;\n    address: Address;\n}\n\n/*\nDecide which mode you are going to use the Address Element\nShipping: is used with the Payment Element and Link Authentication Element, it will automatically pass shipping\ninformation when confirming Payment Intent or Setup Intent.\nBilling: is used with the Payment Element, it will automatically pass the billing information when confirming\nPayment Intent or Setup Intent.\n */\nexport enum StripeFormMode {\n    SHIPPING = 'shipping',\n    BILLING = 'billing',\n}\n\nexport enum StripeDisplayName {\n    SPLIT = 'split',\n    FULL = 'full',\n    ORGANIZATION = 'organization',\n}\n\ninterface CustomerDefaultValues {\n    mode: StripeFormMode;\n    email: string;\n    allowedCountries?: string[];\n    display?: {\n        name: StripeDisplayName;\n    };\n}\n\nexport interface StripeElements {\n    /**\n     * Creates an Elements instance, which manages a group of elements.\n     * https://stripe.com/docs/js/elements_object/create\n     */\n    create(elementType: StripeElementType, options?: StripeElementsCreateOptions): StripeElement;\n\n    /**\n     * Looks up a previously created element.\n     * https://stripe.com/docs/js/elements_object/get_payment_element or\n     * https://stripe.com/docs/js/elements_object/get_link_authentication_element\n     */\n    getElement(elementType: StripeElementType): StripeElement | null;\n\n    /**\n     * Updates options on an existing instance of Elements.\n     * https://stripe.com/docs/js/elements_object/update\n     */\n    update(options?: StripeUpdateElementsOptions): StripeElement;\n\n    /**\n     * Fetches updates from the associated PaymentIntent or SetupIntent on an existing instance of Elements,\n     * and reflects these updates in the Payment Element.\n     * https://stripe.com/docs/js/elements_object/fetch_updates\n     */\n    fetchUpdates(): Promise<void>;\n}\n\n/**\n * All available options are here https://stripe.com/docs/stripe-js/appearance-api#supported-css-properties\n */\nexport interface StripeAppearanceOptions {\n    variables?: Record<string, StripeAppearanceValues>;\n\n    rules?: Record<string, Record<string, StripeAppearanceValues>>;\n}\n\nexport type StripeAppearanceValues = string | string[] | number | undefined;\n\nexport interface StripeElementsOptions {\n    /**\n     * An array of custom fonts, which elements created from the Elements object can use.\n     * Fonts can be specified as [CssFontSource](https://stripe.com/docs/js/appendix/css_font_source_object)\n     * or [CustomFontSource](https://stripe.com/docs/js/appendix/custom_font_source_object) objects.\n     */\n    fonts?: StripeCustomFont[];\n\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.\n     * The client secret can be used to complete a payment from your frontend.\n     * It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer.\n     * Make sure that you have TLS enabled on any page that includes the client secret.\n     * Refer to our docs to accept a payment and learn about how client_secret should be handled.\n     */\n    clientSecret?: string;\n\n    /**\n     * A token that represents the Stripe customer session.\n     * Stripe documentation: https://docs.stripe.com/api/checkout/sessions\n     */\n    customerSessionClientSecret?: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeAppearanceOptions;\n\n    mode?: string;\n    amount?: number;\n    currency?: string;\n    paymentMethodTypes?: string[];\n}\n\nexport interface StripeUpdateElementsOptions {\n    /**\n     * A [locale](https://stripe.com/docs/js/appendix/supported_locales) to display placeholders and\n     * error strings in. Default is auto (Stripe detects the locale of the browser).\n     * Setting the locale does not affect the behavior of postal code validation—a valid postal code\n     * for the billing country of the card is still required.\n     */\n    locale?: string;\n\n    /**\n     * Match the design of your site with the appearance option.\n     * The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n     */\n    appearance?: StripeAppearanceOptions;\n    mode?: string;\n    amount?: number;\n    currency?: string;\n}\n\nexport interface StripeClient {\n    /**\n     * Use confirmPayment to confirm a PaymentIntent using data collected by the Payment Element.\n     * When called, confirmPayment will attempt to complete any required actions,\n     * such as authenticating your user by displaying a 3DS dialog or redirecting them to a bank authorization page.\n     */\n    confirmPayment(options: StripeConfirmPaymentData): Promise<StripeResult>;\n\n    /**\n     * When called, it will confirm the PaymentIntent with data you provide and carry out 3DS or other next actions if they are required.\n     */\n    confirmCardPayment(clientSecret: string): Promise<StripeResult>;\n\n    /**\n     * Retrieve a PaymentIntent using its client secret.\n     */\n    retrievePaymentIntent(clientSecret: string): Promise<StripeResult>;\n\n    /**\n     * Create an `Elements` instance, which manages a group of elements.\n     */\n    elements(options: StripeElementsOptions): StripeElements;\n}\n\nexport interface StripeResult {\n    paymentIntent?: PaymentIntent;\n    error?: StripeError;\n}\n\nexport interface StripeHostWindow extends Window {\n    bcStripeClient?: StripeClient;\n    bcStripeElements?: StripeElements;\n    Stripe?<T = StripeClient>(\n        stripePublishableKey: string,\n        options?: StripeConfigurationOptions,\n    ): T;\n}\n\nexport enum StripePaymentMethodType {\n    CreditCard = 'card',\n    Link = 'link',\n    EPS = 'eps',\n    GRABPAY = 'grabpay',\n    BANCONTACT = 'bancontact',\n    IDEAL = 'ideal',\n    ALIPAY = 'alipay',\n    KLARNA = 'klarna',\n    OCS = 'optimized_checkout',\n}\n\ntype AutoOrNever = StripeStringConstants.AUTO | StripeStringConstants.NEVER;\n\nexport enum StripeStringConstants {\n    NEVER = 'never',\n    AUTO = 'auto',\n    ALWAYS = 'always',\n    PAYMENT = 'payment',\n    IF_REQUIRED = 'if_required',\n}\n\nexport enum StripeElementType {\n    PAYMENT = 'payment',\n    AUTHENTICATION = 'linkAuthentication',\n    SHIPPING = 'address',\n    EXPRESS_CHECKOUT = 'expressCheckout',\n}\n\nexport enum StripePaymentIntentStatus {\n    REQUIRES_PAYMENT_METHOD = 'requires_payment_method',\n    REQUIRES_CONFIRMATION = 'requires_confirmation',\n    REQUIRES_ACTION = 'requires_action',\n    PROCESSING = 'processing',\n    SUCCEEDED = 'succeeded',\n    CANCELED = 'canceled',\n}\n\nexport interface StripePaymentMethod extends PaymentMethod {\n    initializationData: StripeInitializationData;\n}\n\nexport interface StripeInitializationData {\n    stripePublishableKey: string;\n    stripeConnectedAccount: string;\n    shopperLanguage: string;\n    customerSessionToken?: string;\n    enableLink?: boolean;\n    allowRedisplayForStoredInstruments?: boolean;\n    captureMethod?: 'automatic' | 'manual';\n}\n\nexport interface StripeElementUpdateOptions {\n    shouldShowTerms?: boolean;\n}\n\nexport interface StripeAdditionalActionRequired {\n    type: string;\n    data: {\n        token?: string;\n        redirect_url?: string;\n    };\n}\n\nexport interface StripeAdditionalActionResponseBody {\n    additional_action_required: StripeAdditionalActionRequired;\n    three_ds_result: {\n        token?: string;\n    };\n}\n\nexport enum StripeElementEvent {\n    CLICK = 'click',\n    CHANGE = 'change',\n    READY = 'ready',\n    SHIPPING_ADDRESS_CHANGE = 'shippingaddresschange',\n    SHIPPING_RATE_CHANGE = 'shippingratechange',\n    CONFIRM = 'confirm',\n    CANCEL = 'cancel',\n    LOADER_START = 'loaderstart',\n}\n\nexport interface LineItem {\n    name: string;\n    amount: number;\n}\n\nexport interface StripeSavePaymentMethod {\n    maxVisiblePaymentMethods?: number;\n}\n\nexport enum StripeInstrumentSetupFutureUsage {\n    ON_SESSION = 'on_session',\n    OFF_SESSION = 'off_session',\n}\n\nexport interface StripeLinkV2Event {\n    value?: null;\n    billingDetails?: {\n        name?: string;\n        email?: string;\n        phone?: string;\n        address?: {\n            line1?: string;\n            city?: string;\n            country?: string;\n            postal_code?: string;\n            state?: string;\n        };\n    };\n    shippingAddress?: {\n        name?: string;\n        address?: {\n            line1?: string;\n            line2?: string;\n            city?: string;\n            country?: string;\n            postal_code?: string;\n            state?: string;\n        };\n    };\n    address?: {\n        line1?: string;\n        city?: string;\n        country?: string;\n        postal_code?: string;\n        state?: string;\n    };\n    shippingRate?: StripeLinkV2ShippingRate;\n    elementType: string;\n    expressPaymentType: string;\n    resolve(data: StripeLinkV2EventResolveData): void;\n}\n\nexport interface StripeLinkV2EventResolveData {\n    lineItems?: LineItem[];\n    allowedShippingCountries?: string[];\n    shippingAddressRequired?: boolean;\n    shippingRates?: StripeLinkV2ShippingRate[];\n    billingAddressRequired?: boolean;\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n}\n\nexport interface StripeLinkV2ShippingRate {\n    id: string;\n    amount: number;\n    displayName: string;\n}\n\nexport interface StripeLinkV2Options {\n    clientSecret?: string;\n    mode?: string;\n    currency?: string;\n    captureMethod?: 'automatic' | 'manual';\n    amount?: number;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    StripeClient,\n    StripeElements,\n    StripeElementsOptions,\n    StripeHostWindow,\n    StripeInitializationData,\n} from './stripe';\n\nexport default class StripeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    async getStripeClient(\n        initializationData: StripeInitializationData,\n        betas?: string[],\n        apiVersion?: string,\n    ): Promise<StripeClient> {\n        if (this.stripeWindow.bcStripeClient) {\n            return this.stripeWindow.bcStripeClient;\n        }\n\n        const stripe = await this.load();\n        const { stripePublishableKey, stripeConnectedAccount } = initializationData;\n        const options = {\n            ...(stripeConnectedAccount ? { stripeAccount: stripeConnectedAccount } : {}),\n            ...(betas ? { betas } : {}),\n            ...(apiVersion ? { apiVersion } : {}),\n        };\n\n        const stripeClient = stripe<StripeClient>(stripePublishableKey, options);\n\n        Object.assign(this.stripeWindow, { bcStripeClient: stripeClient });\n\n        return stripeClient;\n    }\n\n    async getElements(\n        stripeClient: StripeClient,\n        options: StripeElementsOptions,\n    ): Promise<StripeElements> {\n        let stripeElements = this.stripeWindow.bcStripeElements;\n\n        if (!stripeElements) {\n            stripeElements = stripeClient.elements(options);\n\n            Object.assign(this.stripeWindow, { bcStripeElements: stripeElements });\n        } else {\n            await this.updateStripeElements(options);\n        }\n\n        return stripeElements;\n    }\n\n    async updateStripeElements(options: StripeElementsOptions) {\n        const stripeElements = this.stripeWindow.bcStripeElements;\n\n        if (!stripeElements) {\n            return;\n        }\n\n        stripeElements.update(options);\n        await stripeElements.fetchUpdates();\n    }\n\n    private async load() {\n        if (!this.stripeWindow.Stripe) {\n            await this.scriptLoader.loadScript('https://js.stripe.com/v3/');\n\n            if (!this.stripeWindow.Stripe) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.stripeWindow.Stripe;\n    }\n}\n","import { includes, some } from 'lodash';\n\nimport {\n    Address,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { isStripeError } from './is-stripe-error';\nimport {\n    AddressOptions,\n    StripeAdditionalActionRequired,\n    StripeClient,\n    StripeConfirmPaymentData,\n    StripeElement,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    StripePaymentIntentStatus,\n    StripeStringConstants,\n} from './stripe';\nimport StripePaymentInitializeOptions from './stripe-initialize-options';\nimport StripeScriptLoader from './stripe-script-loader';\n\nexport default class StripeIntegrationService {\n    private isMounted = false;\n    private checkoutEventsUnsubscribe?: () => void;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n    ) {}\n\n    deinitialize(): void {\n        this.checkoutEventsUnsubscribe?.();\n        this.isMounted = false;\n    }\n\n    initCheckoutEventsSubscription(\n        gatewayId: string,\n        methodId: string,\n        stripeInitializationOptions: StripePaymentInitializeOptions,\n        stripeElements?: StripeElements,\n    ): void {\n        this.checkoutEventsUnsubscribe = this.paymentIntegrationService.subscribe(\n            async () => {\n                const paymentElement = stripeElements?.getElement(StripeElementType.PAYMENT);\n\n                if (!paymentElement) {\n                    return;\n                }\n\n                try {\n                    await this.updateStripePaymentIntent(gatewayId, methodId);\n                } catch (error) {\n                    if (this.isMounted) {\n                        paymentElement.unmount();\n                        this.isMounted = false;\n                    }\n\n                    if (error instanceof Error) {\n                        stripeInitializationOptions.onError?.(error);\n                    }\n\n                    return;\n                }\n\n                if (!this.isMounted) {\n                    await stripeElements?.fetchUpdates();\n                    this.mountElement(paymentElement, stripeInitializationOptions.containerId);\n                }\n            },\n            (state) => state.getCheckout()?.outstandingBalance,\n            (state) => state.getCheckout()?.coupons,\n        );\n    }\n\n    mountElement(stripeElement: StripeElement, containerId: string): void {\n        if (!document.getElementById(containerId)) {\n            return;\n        }\n\n        stripeElement.mount(`#${containerId}`);\n        this.isMounted = true;\n    }\n\n    mapAppearanceVariables(styles: NonNullable<StripePaymentInitializeOptions['style']>) {\n        return {\n            colorPrimary: styles.fieldInnerShadow,\n            colorBackground: styles.fieldBackground,\n            colorText: styles.labelText,\n            colorDanger: styles.fieldErrorText,\n            colorTextSecondary: styles.labelText,\n            colorTextPlaceholder: styles.fieldPlaceholderText,\n            colorIcon: styles.fieldPlaceholderText,\n        };\n    }\n\n    mapInputAppearanceRules(styles: NonNullable<StripePaymentInitializeOptions['style']>) {\n        return {\n            borderColor: styles.fieldBorder,\n            color: styles.fieldText,\n            boxShadow: styles.fieldInnerShadow,\n        };\n    }\n\n    throwStripeError(stripeError?: unknown): never {\n        if (isStripeError(stripeError)) {\n            this.throwDisplayableStripeError(stripeError);\n\n            if (this.isCancellationError(stripeError)) {\n                throw new PaymentMethodCancelledError();\n            }\n        }\n\n        throw new PaymentMethodFailedError();\n    }\n\n    throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n\n    isCancellationError(stripeError?: StripeError): boolean {\n        const errorMessage = stripeError?.payment_intent.last_payment_error?.message;\n\n        return !!errorMessage && errorMessage.indexOf('canceled') !== -1;\n    }\n\n    throwPaymentConfirmationProceedMessage() {\n        // INFO: for case if payment was successfully confirmed on Stripe side but on BC side something go wrong, request failed and order status hasn't changed yet\n        // For shopper we need to show additional message that BC is waiting for stripe confirmation, to prevent additional payment creation\n        throw new PaymentMethodFailedError(\n            \"We've received your order and are processing your payment. Once the payment is verified, your order will be completed. We will send you an email when it's completed. Please note, this process may take a few minutes depending on the processing times of your chosen method.\",\n        );\n    }\n\n    async isPaymentCompleted(methodId: string, stripeUPEClient?: StripeClient): Promise<boolean> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n\n        if (\n            !paymentMethod.clientToken ||\n            !stripeUPEClient ||\n            !features['PI-626.Block_unnecessary_payment_confirmation_for_StripeUPE']\n        ) {\n            return false;\n        }\n\n        const { paymentIntent } = await stripeUPEClient.retrievePaymentIntent(\n            paymentMethod.clientToken,\n        );\n\n        return paymentIntent?.status === StripePaymentIntentStatus.SUCCEEDED;\n    }\n\n    mapStripePaymentData(\n        stripeElements?: StripeElements,\n        returnUrl?: string,\n        shouldAllowRedisplay = false,\n    ): StripeConfirmPaymentData {\n        const billingAddress = this.paymentIntegrationService.getState().getBillingAddress();\n        const { firstName = '', lastName = '', email = '' } = billingAddress || {};\n        const address = this._mapStripeAddress(billingAddress);\n\n        if (!stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!email || !address || !address.city || !address.country || !firstName || !lastName) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        return {\n            elements: stripeElements,\n            redirect: StripeStringConstants.IF_REQUIRED,\n            confirmParams: {\n                payment_method_data: {\n                    ...(shouldAllowRedisplay ? { allow_redisplay: 'always' } : {}),\n                    billing_details: {\n                        email,\n                        address,\n                        name: `${firstName} ${lastName}`,\n                    },\n                },\n                ...(returnUrl && { return_url: returnUrl }),\n            },\n        };\n    }\n\n    isAdditionalActionError(errors: Array<{ code: string }>): boolean {\n        return some(errors, { code: 'additional_action_required' });\n    }\n\n    isRedirectAction(additionalAction: StripeAdditionalActionRequired): boolean {\n        const {\n            type,\n            data: { redirect_url },\n        } = additionalAction;\n\n        return type === 'redirect_to_url' && !!redirect_url;\n    }\n\n    isOnPageAdditionalAction(additionalAction: StripeAdditionalActionRequired): boolean {\n        const {\n            type,\n            data: { token },\n        } = additionalAction;\n\n        return type === 'additional_action_requires_payment_method' && !!token;\n    }\n\n    async updateStripePaymentIntent(gatewayId: string, methodId: string): Promise<void> {\n        // INFO: to trigger payment intent update on the BE side we need to make stripe config request\n        const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.scriptLoader.updateStripeElements({ clientSecret: clientToken });\n    }\n\n    private _mapStripeAddress(address?: Address): AddressOptions {\n        if (address) {\n            const {\n                city,\n                address1,\n                address2,\n                countryCode: country,\n                postalCode,\n                stateOrProvinceCode,\n            } = address;\n\n            return {\n                city,\n                country,\n                postal_code: postalCode,\n                line1: address1,\n                line2: address2,\n                ...(stateOrProvinceCode ? { state: stateOrProvinceCode } : {}),\n            };\n        }\n\n        throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n    }\n}\n","import { StripeError } from './stripe';\n\nexport function isStripeError(error: unknown): error is StripeError {\n    return typeof error === 'object' && error !== null && 'type' in error;\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripePaymentMethod } from './stripe';\n\nexport function isStripePaymentMethodLike(\n    paymentMethod: PaymentMethod,\n): paymentMethod is StripePaymentMethod {\n    return (\n        typeof paymentMethod === 'object' &&\n        paymentMethod !== null &&\n        'initializationData' in paymentMethod &&\n        (paymentMethod as StripePaymentMethod).initializationData !== undefined &&\n        (paymentMethod as StripePaymentMethod).initializationData !== null &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData === 'object' &&\n        'stripePublishableKey' in (paymentMethod as StripePaymentMethod).initializationData &&\n        'stripeConnectedAccount' in (paymentMethod as StripePaymentMethod).initializationData &&\n        'shopperLanguage' in (paymentMethod as StripePaymentMethod).initializationData &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData.stripePublishableKey !==\n            'undefined' &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData.stripeConnectedAccount !==\n            'undefined' &&\n        typeof (paymentMethod as StripePaymentMethod).initializationData.shopperLanguage !==\n            'undefined'\n    );\n}\n","export const supportedLocales: Record<string, string[]> = {\n    ar: ['ar'],\n    bg: ['bg'],\n    cs: ['cs'],\n    da: ['da'],\n    de: ['de'],\n    el: ['el'],\n    en: ['en', 'en-GB'],\n    es: ['es', 'es-419'],\n    et: ['et'],\n    fi: ['fi'],\n    fil: ['fil'],\n    fr: ['fr', 'fr-CA'],\n    he: ['he'],\n    hr: ['hr'],\n    hu: ['hu'],\n    id: ['id'],\n    it: ['it'],\n    ja: ['ja'],\n    ko: ['ko'],\n    lt: ['lt'],\n    lv: ['lv'],\n    ms: ['ms'],\n    mt: ['mt'],\n    nb: ['nb'],\n    nl: ['nl'],\n    pl: ['pl'],\n    pt: ['pt', 'pt-BR'],\n    ro: ['ro'],\n    ru: ['ru'],\n    sk: ['sk'],\n    sl: ['sl'],\n    sv: ['sv'],\n    th: ['th'],\n    tr: ['tr'],\n    vi: ['vi'],\n    zh: ['zh', 'zh-HK', 'zh-TW'],\n};\n","import { supportedLocales } from './stripe-supported-locales';\n\nexport default function formatLocale(localeLanguage: string): string {\n    const [language, country] = localeLanguage.replace(/_/g, '-').toLowerCase().split('-');\n    const countryLocales = supportedLocales[language];\n\n    if (!countryLocales) {\n        return 'auto';\n    }\n\n    const formattedLocale = country ? `${language}-${country.toUpperCase()}` : language;\n\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\n}\n","export const STRIPE_UPE_CLIENT_BETAS = [\n    'payment_element_beta_2',\n    'alipay_pm_beta_1',\n    'link_default_integration_beta_1',\n    'shipping_address_element_beta_1',\n    'address_element_beta_1',\n];\n\nexport const STRIPE_UPE_CLIENT_API_VERSION = '2020-03-02;alipay_beta=v1;link_beta=v1';\n","import {\n    PaymentProviderCustomer,\n    StripeAcceleratedCheckoutCustomer,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default function isStripeAcceleratedCheckoutCustomer(\n    customer: PaymentProviderCustomer,\n): customer is StripeAcceleratedCheckoutCustomer {\n    return 'stripeLinkAuthenticationState' in customer;\n}\n","import { some } from 'lodash';\n\nimport {\n    FormattedHostedInstrument,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    RequestError,\n    StripeUPEIntent,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    formatStripeLocale,\n    isStripePaymentMethodLike,\n    STRIPE_UPE_CLIENT_API_VERSION,\n    STRIPE_UPE_CLIENT_BETAS,\n    StripeAdditionalActionRequired,\n    StripeAppearanceOptions,\n    StripeClient,\n    StripeElement,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementsCreateOptions,\n    StripeElementType,\n    StripeElementUpdateOptions,\n    StripeError,\n    StripeEventType,\n    StripeInitializationData,\n    StripeIntegrationService,\n    StripePaymentMethodType,\n    StripeResult,\n    StripeScriptLoader,\n    StripeStringConstants,\n} from '@bigcommerce/checkout-sdk/stripe-utils';\n\nimport isStripeAcceleratedCheckoutCustomer from './is-stripe-accelerated-checkout-customer';\nimport StripeUPEPaymentInitializeOptions, {\n    WithStripeUPEPaymentInitializeOptions,\n} from './stripe-upe-initialize-options';\n\nexport default class StripeUPEPaymentStrategy implements PaymentStrategy {\n    private _stripeUPEClient?: StripeClient;\n    private _stripeElements?: StripeElements;\n    private _isStripeElementUpdateEnabled?: boolean;\n    private _allowRedisplayForStoredInstruments?: boolean;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n        private stripeIntegrationService: StripeIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithStripeUPEPaymentInitializeOptions,\n    ): Promise<void> {\n        const { stripeupe, methodId, gatewayId } = options;\n\n        if (!stripeupe?.containerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        this._loadStripeElement(stripeupe, gatewayId, methodId).catch((error) =>\n            stripeupe.onError?.(error),\n        );\n\n        this.stripeIntegrationService.initCheckoutEventsSubscription(\n            gatewayId,\n            methodId,\n            stripeupe,\n            this._stripeElements,\n        );\n\n        return Promise.resolve();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment || !payment.paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        if (!this._stripeUPEClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { paymentData, methodId, gatewayId } = payment;\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n        const state = this.paymentIntegrationService.getState();\n        const { isStoreCreditApplied: useStoreCredit } = state.getCheckoutOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const stripePaymentProviderCustomer = isStripeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n        const stripeLinkAuthenticationState =\n            stripePaymentProviderCustomer.stripeLinkAuthenticationState;\n\n        if (useStoreCredit) {\n            await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        if (gatewayId) {\n            await this.stripeIntegrationService.updateStripePaymentIntent(gatewayId, methodId);\n\n            const { email } = state.getCustomerOrThrow();\n\n            if (stripeLinkAuthenticationState !== undefined && !email) {\n                const billingAddress = state.getBillingAddressOrThrow();\n\n                await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n            }\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        if (isVaultedInstrument(paymentData)) {\n            const { instrumentId } = paymentData;\n\n            await this._executeWithVaulted(\n                payment.methodId,\n                instrumentId,\n                shouldSetAsDefaultInstrument,\n            );\n\n            return;\n        }\n\n        await this._executeWithStripeConfirmation(\n            payment.methodId,\n            stripeLinkAuthenticationState ? false : shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._stripeElements?.getElement(StripeElementType.PAYMENT)?.unmount();\n        this.stripeIntegrationService.deinitialize();\n        this._stripeElements = undefined;\n        this._stripeUPEClient = undefined;\n\n        return Promise.resolve();\n    }\n\n    private async _executeWithStripeConfirmation(\n        methodId: string,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            clientToken || '',\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this._processAdditionalActionWithStripeConfirmation(\n                error,\n                methodId,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private async _executeWithVaulted(\n        methodId: string,\n        token: string,\n        shouldSetAsDefaultInstrument: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const cartId = state.getCart()?.id;\n\n        try {\n            const paymentPayload = {\n                methodId,\n                paymentData: {\n                    formattedPayload: {\n                        cart_id: cartId,\n                        bigpay_token: { token },\n                        confirm: false,\n                        client_token: paymentMethod.clientToken,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n                    },\n                },\n            };\n\n            return await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            return this._processVaultedAdditionalAction(\n                error,\n                methodId,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private async _loadStripeElement(\n        stripeupe: StripeUPEPaymentInitializeOptions,\n        gatewayId: string,\n        methodId: string,\n    ) {\n        const { containerId, style, render, initStripeElementUpdateTrigger } = stripeupe;\n        const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        const { checkoutSettings } = state.getStoreConfigOrThrow();\n\n        if (!isStripePaymentMethodLike(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientToken, initializationData } = paymentMethod;\n        const { shopperLanguage, allowRedisplayForStoredInstruments = false } = initializationData;\n\n        this._allowRedisplayForStoredInstruments = allowRedisplayForStoredInstruments;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._stripeUPEClient = await this._loadStripeJs(initializationData);\n        this._isStripeElementUpdateEnabled =\n            !!checkoutSettings.features['PI-1679.trigger_update_stripe_payment_element'] &&\n            typeof initStripeElementUpdateTrigger === 'function';\n\n        let appearance: StripeAppearanceOptions | undefined;\n\n        if (style) {\n            const styles = style;\n\n            appearance = {\n                variables: this.stripeIntegrationService.mapAppearanceVariables(style),\n                rules: {\n                    '.Input': this.stripeIntegrationService.mapInputAppearanceRules(styles),\n                },\n            };\n        }\n\n        this._stripeElements = await this.scriptLoader.getElements(this._stripeUPEClient, {\n            clientSecret: clientToken,\n            locale: formatStripeLocale(shopperLanguage),\n            appearance,\n        });\n\n        const { getBillingAddress, getShippingAddress } = state;\n        const { postalCode } = getShippingAddress() || getBillingAddress() || {};\n\n        const stripeElement: StripeElement =\n            this._stripeElements.getElement(StripeElementType.PAYMENT) ||\n            this._stripeElements.create(StripeElementType.PAYMENT, {\n                fields: {\n                    billingDetails: {\n                        email: StripeStringConstants.NEVER,\n                        address: {\n                            country: StripeStringConstants.NEVER,\n                            city: StripeStringConstants.NEVER,\n                            postalCode: postalCode\n                                ? StripeStringConstants.NEVER\n                                : StripeStringConstants.AUTO,\n                        },\n                    },\n                },\n                wallets: {\n                    applePay: StripeStringConstants.NEVER,\n                    googlePay: StripeStringConstants.NEVER,\n                },\n                ...this._getStripeElementTerms(),\n            });\n\n        this.stripeIntegrationService.mountElement(stripeElement, containerId);\n\n        stripeElement.on(StripeElementEvent.READY, () => {\n            render();\n        });\n\n        stripeElement.on(StripeElementEvent.CHANGE, (event: StripeEventType) => {\n            if (!event?.value || !('type' in event.value)) {\n                return;\n            }\n\n            this._updateStripeLinkStateByElementType(event.value.type);\n        });\n\n        if (this._isStripeElementUpdateEnabled) {\n            initStripeElementUpdateTrigger?.(this._updateStripeElement.bind(this));\n        }\n    }\n\n    private async _processAdditionalActionWithStripeConfirmation(\n        error: unknown,\n        methodId: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !this.stripeIntegrationService.isAdditionalActionError(error.body.errors)\n        ) {\n            throw error;\n        }\n\n        if (!this._stripeUPEClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { data: additionalActionData } = error.body.additional_action_required;\n        const { token } = additionalActionData;\n\n        const { paymentIntent } = await this._confirmStripePaymentOrThrow(\n            methodId,\n            additionalActionData,\n        );\n\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            paymentIntent?.id || token,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        );\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            this.stripeIntegrationService.throwPaymentConfirmationProceedMessage();\n        }\n    }\n\n    private async _confirmStripePaymentOrThrow(\n        methodId: string,\n        additionalActionData: StripeAdditionalActionRequired['data'],\n    ): Promise<StripeResult | never> {\n        const { token, redirect_url } = additionalActionData;\n        const stripePaymentData = this.stripeIntegrationService.mapStripePaymentData(\n            this._stripeElements,\n            redirect_url,\n            !!this._allowRedisplayForStoredInstruments,\n        );\n        let stripeError: StripeError | undefined;\n\n        try {\n            const isPaymentCompleted = await this.stripeIntegrationService.isPaymentCompleted(\n                methodId,\n                this._stripeUPEClient,\n            );\n\n            const confirmationResult = !isPaymentCompleted\n                ? await this._stripeUPEClient?.confirmPayment(stripePaymentData)\n                : await this._stripeUPEClient?.retrievePaymentIntent(token || '');\n\n            stripeError = confirmationResult?.error;\n\n            if (stripeError || !confirmationResult?.paymentIntent) {\n                throw new PaymentMethodFailedError();\n            }\n\n            return confirmationResult;\n        } catch (error: unknown) {\n            this.stripeIntegrationService.throwStripeError(stripeError);\n        }\n    }\n\n    private async _processVaultedAdditionalAction(\n        error: unknown,\n        methodId?: string,\n        shouldSetAsDefaultInstrument = false,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (\n            !methodId ||\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'three_d_secure_required' })\n        ) {\n            throw error;\n        }\n\n        if (!this._stripeUPEClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const clientSecret = error.body.three_ds_result.token;\n        let result;\n        let catchedConfirmError = false;\n\n        try {\n            result = await this._stripeUPEClient.confirmCardPayment(clientSecret);\n        } catch (error) {\n            try {\n                result = await this._stripeUPEClient.retrievePaymentIntent(clientSecret);\n            } catch (error) {\n                catchedConfirmError = true;\n            }\n        }\n\n        if (result?.error) {\n            this.stripeIntegrationService.throwStripeError(result.error);\n        }\n\n        if (!result?.paymentIntent && !catchedConfirmError) {\n            throw new RequestError();\n        }\n\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            catchedConfirmError ? clientSecret : result?.paymentIntent?.id,\n            false,\n            shouldSetAsDefaultInstrument,\n        );\n\n        return this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    private async _loadStripeJs(\n        initializationData: StripeInitializationData,\n    ): Promise<StripeClient> {\n        if (this._stripeUPEClient) {\n            return this._stripeUPEClient;\n        }\n\n        return this.scriptLoader.getStripeClient(\n            initializationData,\n            STRIPE_UPE_CLIENT_BETAS,\n            STRIPE_UPE_CLIENT_API_VERSION,\n        );\n    }\n\n    private _getPaymentPayload(\n        methodId: string,\n        token: string,\n        shouldSaveInstrument = false,\n        shouldSetAsDefaultInstrument = false,\n    ): Payment {\n        const cartId = this.paymentIntegrationService.getState().getCart()?.id || '';\n        const formattedPayload: StripeUPEIntent & FormattedHostedInstrument = {\n            cart_id: cartId,\n            credit_card_token: { token },\n            confirm: false,\n            vault_payment_instrument: shouldSaveInstrument,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n        };\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload,\n            },\n        };\n    }\n\n    private _updateStripeElement({ shouldShowTerms }: StripeElementUpdateOptions): void {\n        const stripeElement = this._stripeElements?.getElement(StripeElementType.PAYMENT);\n\n        stripeElement?.update({\n            ...this._getStripeElementTerms(shouldShowTerms),\n        });\n    }\n\n    private _getStripeElementTerms(\n        shouldShowTerms?: boolean,\n    ): Pick<StripeElementsCreateOptions, 'terms'> {\n        let card = StripeStringConstants.AUTO;\n\n        if (this._isStripeElementUpdateEnabled) {\n            card = shouldShowTerms ? StripeStringConstants.AUTO : StripeStringConstants.NEVER;\n        }\n\n        return {\n            terms: {\n                card,\n            },\n        };\n    }\n\n    private _updateStripeLinkStateByElementType(paymentElementType: StripePaymentMethodType): void {\n        const state = this.paymentIntegrationService.getState();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const isStripeLinkElementType = paymentElementType === StripePaymentMethodType.Link;\n\n        // INFO: Trigger additional update only if Stripe Link Authentication was skipped on the customer step, but the Link payment element was rendered.\n        if (\n            !isStripeAcceleratedCheckoutCustomer(paymentProviderCustomer) &&\n            isStripeLinkElementType\n        ) {\n            this.paymentIntegrationService.updatePaymentProviderCustomer({\n                stripeLinkAuthenticationState: isStripeLinkElementType,\n            });\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    StripeIntegrationService,\n    StripeScriptLoader,\n} from '@bigcommerce/checkout-sdk/stripe-utils';\n\nimport StripeUPEPaymentStrategy from './stripe-upe-payment-strategy';\n\nconst createStripeUPEPaymentStrategy: PaymentStrategyFactory<StripeUPEPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const stripeScriptLoader = new StripeScriptLoader(getScriptLoader());\n\n    return new StripeUPEPaymentStrategy(\n        paymentIntegrationService,\n        stripeScriptLoader,\n        new StripeIntegrationService(paymentIntegrationService, stripeScriptLoader),\n    );\n};\n\nexport default toResolvableModule(createStripeUPEPaymentStrategy, [\n    { gateway: 'stripeupe' },\n    { gateway: 'stripeupe', id: 'klarna' },\n]);\n","import {\n    InvalidArgumentError,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodFailedError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    formatStripeLocale,\n    isStripePaymentEvent,\n    isStripePaymentMethodLike,\n    StripeAdditionalActionRequired,\n    StripeClient,\n    StripeElement,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementType,\n    StripeError,\n    StripeEventType,\n    StripeInitializationData,\n    StripeInstrumentSetupFutureUsage,\n    StripeIntegrationService,\n    StripePIPaymentMethodOptions,\n    StripePIPaymentMethodSavingOptions,\n    StripeResult,\n    StripeScriptLoader,\n    StripeStringConstants,\n} from '@bigcommerce/checkout-sdk/stripe-utils';\n\nimport StripeOCSPaymentInitializeOptions, {\n    WithStripeOCSPaymentInitializeOptions,\n} from './stripe-ocs-initialize-options';\n\nexport default class StripeOCSPaymentStrategy implements PaymentStrategy {\n    private stripeClient?: StripeClient;\n    private stripeElements?: StripeElements;\n    private selectedMethodId?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n        private stripeIntegrationService: StripeIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithStripeOCSPaymentInitializeOptions,\n    ): Promise<void> {\n        const { stripeocs, methodId, gatewayId } = options;\n\n        if (!stripeocs?.containerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        try {\n            await this._initializeStripeElement(stripeocs, gatewayId, methodId);\n        } catch (error) {\n            if (error instanceof Error) {\n                stripeocs.onError?.(error);\n            }\n        }\n\n        this.stripeIntegrationService.initCheckoutEventsSubscription(\n            gatewayId,\n            methodId,\n            stripeocs,\n            this.stripeElements,\n        );\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = orderRequest;\n        const { methodId, gatewayId } = payment || {};\n\n        if (!this.stripeClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!gatewayId || !methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"gatewayId\" or \"methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const { isStoreCreditApplied } = state.getCheckoutOrThrow();\n\n        if (isStoreCreditApplied) {\n            await this.paymentIntegrationService.applyStoreCredit(isStoreCreditApplied);\n        }\n\n        await this.stripeIntegrationService.updateStripePaymentIntent(gatewayId, methodId);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        const { clientToken } = state.getPaymentMethodOrThrow(methodId);\n        const paymentPayload = this._getPaymentPayload(methodId, clientToken || '');\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            await this._processAdditionalAction(error, methodId);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        const paymentElement = this.stripeElements?.getElement(StripeElementType.PAYMENT);\n\n        paymentElement?.unmount();\n        paymentElement?.destroy();\n        this.stripeIntegrationService.deinitialize();\n        this.stripeElements = undefined;\n        this.stripeClient = undefined;\n\n        return Promise.resolve();\n    }\n\n    private async _initializeStripeElement(\n        stripe: StripeOCSPaymentInitializeOptions,\n        gatewayId: string,\n        methodId: string,\n    ) {\n        let paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(methodId);\n\n        if (!paymentMethod?.clientToken) {\n            const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n                params: { method: methodId },\n            });\n\n            paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        if (!isStripePaymentMethodLike(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientToken, initializationData } = paymentMethod;\n        const { shopperLanguage, customerSessionToken, enableLink } = initializationData;\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.stripeClient = await this._loadStripeJs(initializationData);\n\n        const {\n            appearance,\n            containerId,\n            fonts,\n            layout,\n            render,\n            paymentMethodSelect,\n            handleClosePaymentMethod,\n            togglePreloader,\n        } = stripe;\n\n        this.stripeElements = await this.scriptLoader.getElements(this.stripeClient, {\n            clientSecret: clientToken,\n            customerSessionClientSecret: customerSessionToken,\n            locale: formatStripeLocale(shopperLanguage),\n            appearance,\n            fonts,\n        });\n\n        const { getBillingAddress, getShippingAddress } = this.paymentIntegrationService.getState();\n        const billingAddress = getBillingAddress();\n        const { postalCode } = getShippingAddress() || billingAddress || {};\n\n        const stripeElement: StripeElement =\n            this.stripeElements.getElement(StripeElementType.PAYMENT) ||\n            this.stripeElements.create(StripeElementType.PAYMENT, {\n                fields: {\n                    billingDetails: {\n                        email: StripeStringConstants.NEVER,\n                        address: {\n                            country: StripeStringConstants.NEVER,\n                            city: StripeStringConstants.NEVER,\n                            postalCode: postalCode\n                                ? StripeStringConstants.NEVER\n                                : StripeStringConstants.AUTO,\n                        },\n                    },\n                },\n                wallets: {\n                    applePay: StripeStringConstants.NEVER,\n                    googlePay: StripeStringConstants.NEVER,\n                    link: enableLink ? StripeStringConstants.AUTO : StripeStringConstants.NEVER,\n                },\n                layout,\n                savePaymentMethod: {\n                    maxVisiblePaymentMethods: 20,\n                },\n                defaultValues: {\n                    billingDetails: {\n                        email: billingAddress?.email || '',\n                    },\n                },\n            });\n\n        this.stripeIntegrationService.mountElement(stripeElement, containerId);\n\n        stripeElement.on(StripeElementEvent.LOADER_START, () => {\n            togglePreloader?.(false);\n        });\n\n        stripeElement.on(StripeElementEvent.READY, () => {\n            render();\n        });\n\n        stripeElement.on(StripeElementEvent.CHANGE, (event: StripeEventType) => {\n            this._onStripeElementChange(event, gatewayId, methodId, paymentMethodSelect);\n        });\n\n        handleClosePaymentMethod?.(this._collapseStripeElement.bind(this));\n    }\n\n    private async _loadStripeJs(\n        initializationData: StripeInitializationData,\n    ): Promise<StripeClient> {\n        if (this.stripeClient) {\n            return this.stripeClient;\n        }\n\n        return this.scriptLoader.getStripeClient(initializationData);\n    }\n\n    private _collapseStripeElement() {\n        const stripeElement = this.stripeElements?.getElement(StripeElementType.PAYMENT);\n\n        stripeElement?.collapse();\n    }\n\n    private _getPaymentPayload(\n        methodId: string,\n        token: string,\n        paymentMethodOptions?: StripePIPaymentMethodOptions,\n    ): Payment {\n        const cartId = this.paymentIntegrationService.getState().getCart()?.id || '';\n        const { card, us_bank_account } = paymentMethodOptions || {};\n        const shouldSaveInstrument =\n            this._shouldSaveInstrument(card) || this._shouldSaveInstrument(us_bank_account);\n        const tokenizedOptions = this._getTokenizedOptions(token, paymentMethodOptions);\n\n        const formattedPayload = {\n            cart_id: cartId,\n            confirm: false,\n            method: this.selectedMethodId,\n            vault_payment_instrument: shouldSaveInstrument,\n            ...tokenizedOptions,\n        };\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload,\n            },\n        };\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        methodId: string,\n    ): Promise<PaymentIntegrationSelectors | undefined> {\n        if (\n            !isRequestError(error) ||\n            !this.stripeIntegrationService.isAdditionalActionError(error.body.errors)\n        ) {\n            throw error;\n        }\n\n        if (!this.stripeClient || !this.stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { data: additionalActionData } = error.body.additional_action_required;\n        const { token } = additionalActionData;\n\n        const { paymentIntent } = await this._confirmStripePaymentOrThrow(\n            methodId,\n            additionalActionData,\n        );\n        const {\n            client_secret: paymentIntentClientSecret,\n            payment_method_options: paymentMethodOptions,\n        } = paymentIntent || {};\n\n        const paymentPayload = this._getPaymentPayload(\n            methodId,\n            paymentIntentClientSecret || token,\n            paymentMethodOptions,\n        );\n\n        try {\n            return await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error) {\n            this.stripeIntegrationService.throwPaymentConfirmationProceedMessage();\n        }\n    }\n\n    private async _confirmStripePaymentOrThrow(\n        methodId: string,\n        additionalActionData: StripeAdditionalActionRequired['data'],\n    ): Promise<StripeResult | never> {\n        const { token, redirect_url } = additionalActionData;\n        const stripePaymentData = this.stripeIntegrationService.mapStripePaymentData(\n            this.stripeElements,\n            redirect_url,\n        );\n        let stripeError: StripeError | undefined;\n\n        try {\n            const isPaymentCompleted = await this.stripeIntegrationService.isPaymentCompleted(\n                methodId,\n                this.stripeClient,\n            );\n\n            const confirmationResult = !isPaymentCompleted\n                ? await this.stripeClient?.confirmPayment(stripePaymentData)\n                : await this.stripeClient?.retrievePaymentIntent(token || '');\n\n            stripeError = confirmationResult?.error;\n\n            if (stripeError || !confirmationResult?.paymentIntent) {\n                throw new PaymentMethodFailedError();\n            }\n\n            return confirmationResult;\n        } catch (error: unknown) {\n            return this.stripeIntegrationService.throwStripeError(stripeError);\n        }\n    }\n\n    private _onStripeElementChange(\n        event: StripeEventType,\n        gatewayId: string,\n        methodId: string,\n        paymentMethodSelect?: (id: string) => void,\n    ) {\n        if (!isStripePaymentEvent(event) || event.collapsed) {\n            return;\n        }\n\n        this.selectedMethodId = event.value.type;\n        paymentMethodSelect?.(`${gatewayId}-${methodId}`);\n    }\n\n    private _shouldSaveInstrument(paymentMethodOptions?: StripePIPaymentMethodSavingOptions) {\n        const setupFutureUsage = paymentMethodOptions?.setup_future_usage;\n\n        return (\n            setupFutureUsage === StripeInstrumentSetupFutureUsage.ON_SESSION ||\n            setupFutureUsage === StripeInstrumentSetupFutureUsage.OFF_SESSION\n        );\n    }\n\n    private _getTokenizedOptions(\n        token: string,\n        paymentMethodOptions?: StripePIPaymentMethodOptions,\n    ) {\n        if (this._shouldSaveInstrument(paymentMethodOptions?.us_bank_account)) {\n            return { tokenized_ach: { token } };\n        }\n\n        return { credit_card_token: { token } };\n    }\n}\n","import { StripePaymentEvent } from './stripe';\n\nexport const isStripePaymentEvent = (event: unknown): event is StripePaymentEvent => {\n    return typeof event === 'object' && event !== null && 'value' in event && 'collapsed' in event;\n};\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    StripeIntegrationService,\n    StripeScriptLoader,\n} from '@bigcommerce/checkout-sdk/stripe-utils';\n\nimport StripeOCSPaymentStrategy from './stripe-ocs-payment-strategy';\n\nconst createStripeOCSPaymentStrategy: PaymentStrategyFactory<StripeOCSPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const stripeScriptLoader = new StripeScriptLoader(getScriptLoader());\n\n    return new StripeOCSPaymentStrategy(\n        paymentIntegrationService,\n        stripeScriptLoader,\n        new StripeIntegrationService(paymentIntegrationService, stripeScriptLoader),\n    );\n};\n\nexport default toResolvableModule(createStripeOCSPaymentStrategy, [\n    { gateway: 'stripeocs', id: 'optimized_checkout' },\n]);\n","import {\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    isStripePaymentMethodLike,\n    STRIPE_UPE_CLIENT_API_VERSION,\n    STRIPE_UPE_CLIENT_BETAS,\n    StripeAppearanceOptions,\n    StripeClient,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementType,\n    StripeEventType,\n    StripeFormMode,\n    StripeScriptLoader,\n} from '@bigcommerce/checkout-sdk/stripe-utils';\n\nimport isStripeAcceleratedCheckoutCustomer from './is-stripe-accelerated-checkout-customer';\nimport { WithStripeUPECustomerInitializeOptions } from './stripeupe-customer-initialize-options';\n\nexport default class StripeUPECustomerStrategy implements CustomerStrategy {\n    private _stripeElements?: StripeElements;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithStripeUPECustomerInitializeOptions,\n    ): Promise<void> {\n        let stripeUPEClient: StripeClient;\n\n        if (!options.stripeupe) {\n            throw new InvalidArgumentError(\n                `Unable to proceed because \"options\" argument is not provided.`,\n            );\n        }\n\n        const { container, gatewayId, methodId, onEmailChange, getStyles, isLoading } =\n            options.stripeupe;\n\n        Object.entries(options.stripeupe).forEach(([key, value]) => {\n            if (!value) {\n                throw new InvalidArgumentError(\n                    `Unable to proceed because \"${key}\" argument is not provided.`,\n                );\n            }\n        });\n\n        await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { clientToken } = paymentMethod;\n\n        if (!isStripePaymentMethodLike(paymentMethod) || !clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const { email } = state.getCustomerOrThrow();\n        const paymentProviderCustomer = state.getPaymentProviderCustomerOrThrow();\n        const stripePaymentProviderCustomer = isStripeAcceleratedCheckoutCustomer(\n            paymentProviderCustomer,\n        )\n            ? paymentProviderCustomer\n            : {};\n        const stripeLinkAuthenticationState =\n            stripePaymentProviderCustomer.stripeLinkAuthenticationState;\n\n        if (!email) {\n            let appearance: StripeAppearanceOptions | undefined;\n            const styles = typeof getStyles === 'function' && getStyles();\n\n            if (styles) {\n                appearance = {\n                    variables: {\n                        colorPrimary: styles.fieldInnerShadow,\n                        colorBackground: styles.fieldBackground,\n                        colorText: styles.labelText,\n                        colorDanger: styles.fieldErrorText,\n                        colorTextSecondary: styles.labelText,\n                        colorTextPlaceholder: styles.fieldPlaceholderText,\n                    },\n                    rules: {\n                        '.Input': {\n                            borderColor: styles.fieldBorder,\n                            color: styles.fieldText,\n                            boxShadow: styles.fieldInnerShadow,\n                        },\n                    },\n                };\n            } else {\n                appearance = {};\n            }\n\n            stripeUPEClient = await this.scriptLoader.getStripeClient(\n                paymentMethod.initializationData,\n                STRIPE_UPE_CLIENT_BETAS,\n                STRIPE_UPE_CLIENT_API_VERSION,\n            );\n\n            this._stripeElements = await this.scriptLoader.getElements(stripeUPEClient, {\n                clientSecret: clientToken,\n                appearance,\n            });\n\n            const { getBillingAddress, getConsignments } =\n                this.paymentIntegrationService.getState();\n            const consignments = getConsignments();\n            const id = consignments?.[0]?.id;\n            const { email: billingEmail } = getBillingAddress() || {};\n            const options = billingEmail\n                ? { defaultValues: { mode: StripeFormMode.SHIPPING, email: billingEmail } }\n                : {};\n            const linkAuthenticationElement =\n                this._stripeElements.getElement(StripeElementType.AUTHENTICATION) ||\n                this._stripeElements.create(StripeElementType.AUTHENTICATION, options);\n\n            linkAuthenticationElement.on(StripeElementEvent.CHANGE, (event: StripeEventType) => {\n                if (!('authenticated' in event)) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCustomer);\n                }\n\n                this.paymentIntegrationService.updatePaymentProviderCustomer({\n                    stripeLinkAuthenticationState: event.authenticated,\n                });\n\n                if (event.complete) {\n                    onEmailChange(event.authenticated, event.value.email);\n                } else {\n                    onEmailChange(false, '');\n                }\n\n                if (isLoading) {\n                    isLoading(false);\n                }\n\n                if (stripeLinkAuthenticationState === undefined && event.authenticated && id) {\n                    this.paymentIntegrationService.deleteConsignment(id);\n                }\n            });\n            linkAuthenticationElement.mount(`#${container}`);\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        this._stripeElements?.getElement(StripeElementType.AUTHENTICATION)?.unmount();\n\n        return Promise.resolve();\n    }\n\n    signIn(credentials: CustomerCredentials, options?: RequestOptions): Promise<void> {\n        this.paymentIntegrationService.signInCustomer(credentials, options);\n\n        return Promise.resolve();\n    }\n\n    signOut(options?: RequestOptions): Promise<void> {\n        this.paymentIntegrationService.signOutCustomer(options);\n\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { StripeScriptLoader } from '@bigcommerce/checkout-sdk/stripe-utils';\n\nimport StripeUPECustomerStrategy from './stripe-upe-customer-strategy';\n\nconst createStripeUPECustomerStrategy: CustomerStrategyFactory<StripeUPECustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new StripeUPECustomerStrategy(\n        paymentIntegrationService,\n        new StripeScriptLoader(getScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createStripeUPECustomerStrategy, [{ id: 'stripeupe' }]);\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * 10 ** this._decimalPlaces);\n    }\n}\n","export const expressCheckoutAllowedCountryCodes = [\n    'AC',\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CV',\n    'CW',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SZ',\n    'TA',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'XK',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n    'ZZ',\n];\n","import { round } from 'lodash';\n\nimport {\n    AmountTransformer,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    InvalidArgumentError,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    isStripePaymentMethodLike,\n    StripeAdditionalActionRequired,\n    StripeClient,\n    StripeElement,\n    StripeElementEvent,\n    StripeElements,\n    StripeElementsCreateOptions,\n    StripeElementType,\n    StripeError,\n    StripeEventType,\n    StripeIntegrationService,\n    StripeLinkV2Event,\n    StripeLinkV2Options,\n    StripeLinkV2ShippingRate,\n    StripePaymentMethodType,\n    StripeResult,\n    StripeScriptLoader,\n    StripeStringConstants,\n} from '@bigcommerce/checkout-sdk/stripe-utils';\nimport { LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport { expressCheckoutAllowedCountryCodes } from './constants';\nimport { WithStripeOCSCustomerInitializeOptions } from './stripe-ocs-customer-initialize-options';\n\nexport default class StripeLinkV2CustomerStrategy implements CustomerStrategy {\n    private _stripeClient?: StripeClient;\n    private _stripeElements?: StripeElements;\n    private _linkV2Element?: StripeElement;\n    private _amountTransformer?: AmountTransformer;\n    private _onComplete?: (orderId?: number) => Promise<never>;\n    private _loadingIndicatorContainer?: string;\n    private _captureMethod?: 'automatic' | 'manual';\n    private _currencyCode?: string;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeScriptLoader,\n        private stripeIntegrationService: StripeIntegrationService,\n        private loadingIndicator: LoadingIndicator,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithStripeOCSCustomerInitializeOptions,\n    ): Promise<void> {\n        const { stripeocs } = options || {};\n\n        if (!stripeocs) {\n            throw new InvalidArgumentError(\n                `Unable to proceed because \"options\" argument is not provided.`,\n            );\n        }\n\n        const { methodId, gatewayId, container } = stripeocs;\n\n        if (!container || !methodId || !gatewayId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = await this.paymentIntegrationService.loadPaymentMethod(gatewayId, {\n            params: { method: methodId },\n        });\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n        const { loadingContainerId, buttonHeight, onComplete } = stripeocs;\n\n        this._loadingIndicatorContainer = loadingContainerId;\n\n        this._onComplete = onComplete;\n\n        if (!isStripePaymentMethodLike(paymentMethod)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = paymentMethod;\n        const { captureMethod } = initializationData;\n\n        this._captureMethod = captureMethod;\n        this._stripeClient = await this.scriptLoader.getStripeClient(initializationData);\n\n        await this._mountExpressCheckoutElement(\n            methodId,\n            container,\n            this._stripeClient,\n            buttonHeight,\n        );\n\n        return Promise.resolve();\n    }\n\n    signIn() {\n        return Promise.resolve();\n    }\n\n    signOut() {\n        return Promise.resolve();\n    }\n\n    executePaymentMethodCheckout() {\n        return Promise.resolve();\n    }\n\n    deinitialize() {\n        return Promise.resolve();\n    }\n\n    private async _mountExpressCheckoutElement(\n        methodId: string,\n        container: string,\n        stripeExpressCheckoutClient: StripeClient,\n        buttonHeight = 40,\n    ) {\n        const shouldRequireShippingAddress = this._shouldRequireShippingAddress();\n        const expressCheckoutOptions: StripeElementsCreateOptions = {\n            shippingAddressRequired: shouldRequireShippingAddress,\n            ...(shouldRequireShippingAddress\n                ? { allowedShippingCountries: await this._getAvailableCountries() }\n                : {}),\n            ...(shouldRequireShippingAddress\n                ? { shippingRates: [{ id: '_', amount: 0, displayName: 'Pending rates' }] }\n                : {}),\n            billingAddressRequired: true,\n            emailRequired: true,\n            phoneNumberRequired: true,\n            paymentMethods: {\n                link: StripeStringConstants.AUTO,\n                applePay: StripeStringConstants.NEVER,\n                googlePay: StripeStringConstants.NEVER,\n                amazonPay: StripeStringConstants.NEVER,\n                paypal: StripeStringConstants.NEVER,\n                klarna: StripeStringConstants.NEVER,\n            },\n            // Minimal buttonHeight value is 40\n            buttonHeight,\n        };\n\n        const { cartAmount } = this.paymentIntegrationService.getState().getCartOrThrow();\n\n        const elementsOptions: StripeLinkV2Options = {\n            mode: 'payment',\n            amount: this._toCents(cartAmount),\n            currency: this._getCurrency(),\n            ...(this._captureMethod ? { captureMethod: this._captureMethod } : {}),\n        };\n\n        this._stripeElements = stripeExpressCheckoutClient.elements(elementsOptions);\n\n        this._linkV2Element = this._stripeElements.create(\n            StripeElementType.EXPRESS_CHECKOUT,\n            expressCheckoutOptions,\n        );\n        this._linkV2Element.mount(`#${container}`);\n        this._initializeEvents(this._linkV2Element, methodId);\n    }\n\n    /** Events * */\n\n    private _initializeEvents(expressCheckoutElement: StripeElement, methodId: string): void {\n        const shouldRequireShippingAddress = this._shouldRequireShippingAddress();\n\n        if (shouldRequireShippingAddress) {\n            expressCheckoutElement.on(StripeElementEvent.SHIPPING_ADDRESS_CHANGE, async (event) =>\n                this._onShippingAddressChange(event),\n            );\n            expressCheckoutElement.on(StripeElementEvent.SHIPPING_RATE_CHANGE, async (event) =>\n                this._onShippingRateChange(event),\n            );\n        }\n\n        expressCheckoutElement.on(StripeElementEvent.CONFIRM, async (event) =>\n            this._onConfirm(event, methodId),\n        );\n\n        expressCheckoutElement.on(StripeElementEvent.CANCEL, this._onCancel);\n    }\n\n    private async _onShippingAddressChange(event: StripeEventType) {\n        if ('address' in event) {\n            const shippingAddress = event.address;\n            // Depending on the country, some fields can be missing or partially redacted.\n            // For example, the shipping address in the US can only contain a city, state, and ZIP code.\n            // The full shipping address appears in the confirm event object after the purchase is confirmed in the browser’s payment interface.\n            const result = {\n                firstName: '',\n                lastName: '',\n                phone: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: shippingAddress?.city || '',\n                countryCode: shippingAddress?.country || '',\n                postalCode: shippingAddress?.postal_code || '',\n                stateOrProvince: shippingAddress?.state || '',\n                stateOrProvinceCode: '',\n                customFields: [],\n            };\n\n            await this.paymentIntegrationService.updateShippingAddress(result);\n\n            const shippingRates = await this._getAvailableShippingOptions();\n\n            await this._updateDisplayedPrice();\n\n            event.resolve({\n                shippingRates,\n            });\n        }\n    }\n\n    private _onCancel() {\n        throw new PaymentMethodCancelledError();\n    }\n\n    private async _onShippingRateChange(event: StripeEventType) {\n        if ('shippingRate' in event) {\n            const { shippingRate } = event;\n\n            await this._handleShippingOptionChange(shippingRate?.id);\n\n            await this._updateDisplayedPrice();\n\n            event.resolve({});\n        }\n    }\n\n    /** Confirm methods * */\n    private async _onConfirm(event: StripeEventType, methodId: string) {\n        if (\n            'billingDetails' in event &&\n            'shippingAddress' in event &&\n            this._stripeClient &&\n            this._stripeElements\n        ) {\n            await this._updateShippingAndBillingAddress(event);\n            await this.paymentIntegrationService.submitOrder();\n\n            const paymentMethod = this._getPaymentPayload(methodId);\n\n            try {\n                await this.paymentIntegrationService.submitPayment(paymentMethod);\n            } catch (error) {\n                await this._processAdditionalAction(error, methodId);\n            }\n        }\n\n        return Promise.resolve();\n    }\n\n    private async _updateShippingAndBillingAddress(event: StripeLinkV2Event) {\n        const shouldRequireShippingAddress = this._shouldRequireShippingAddress();\n\n        const firstName =\n            event.shippingAddress?.name?.split(' ')[0] ||\n            event.billingDetails?.name?.split(' ')[0] ||\n            '';\n        const lastName =\n            event.shippingAddress?.name?.split(' ')[1] ||\n            event.billingDetails?.name?.split(' ')[1] ||\n            '';\n\n        if (shouldRequireShippingAddress) {\n            const shippingAddress = this._mapShippingAddress(\n                event.shippingAddress,\n                event.billingDetails,\n                firstName,\n                lastName,\n            );\n\n            await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        const billingAddress = this._mapBillingAddress(\n            event.shippingAddress,\n            event.billingDetails,\n            firstName,\n            lastName,\n        );\n\n        await this.paymentIntegrationService.updateBillingAddress(billingAddress);\n    }\n\n    private _mapShippingAddress(\n        shippingAddress: StripeLinkV2Event['shippingAddress'],\n        billingDetails: StripeLinkV2Event['billingDetails'],\n        firstName: string,\n        lastName: string,\n    ) {\n        return {\n            firstName,\n            lastName,\n            phone: billingDetails?.phone || '',\n            company: '',\n            address1: shippingAddress?.address?.line1 || '',\n            address2: shippingAddress?.address?.line2 || '',\n            city: shippingAddress?.address?.city || '',\n            countryCode: shippingAddress?.address?.country || '',\n            postalCode: shippingAddress?.address?.postal_code || '',\n            stateOrProvince: shippingAddress?.address?.state || '',\n            stateOrProvinceCode: shippingAddress?.address?.state || '',\n            customFields: [],\n        };\n    }\n\n    private _mapBillingAddress(\n        shippingAddress: StripeLinkV2Event['shippingAddress'],\n        billingDetails: StripeLinkV2Event['billingDetails'],\n        firstName: string,\n        lastName: string,\n    ) {\n        return {\n            email: billingDetails?.email || '',\n            firstName,\n            lastName,\n            phone: billingDetails?.phone || '',\n            company: '',\n            address1: billingDetails?.address?.line1 || '',\n            address2: '',\n            city: billingDetails?.address?.city || '',\n            countryCode: billingDetails?.address?.country || '',\n            postalCode: billingDetails?.address?.postal_code || '',\n            stateOrProvince: billingDetails?.address?.state || '',\n            stateOrProvinceCode: shippingAddress?.address?.state || '',\n            customFields: [],\n        };\n    }\n\n    private async _processAdditionalAction(error: unknown, methodId: string): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !this.stripeIntegrationService.isAdditionalActionError(error.body.errors)\n        ) {\n            throw error;\n        }\n\n        if (!this._stripeClient || !this._stripeElements) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { data: additionalActionData } = error.body.additional_action_required;\n        const { token } = additionalActionData;\n\n        const { paymentIntent } = await this._confirmStripePaymentOrThrow(\n            additionalActionData,\n            methodId,\n        );\n\n        const paymentPayload = this._getPaymentPayload(methodId, paymentIntent?.id || token);\n\n        try {\n            this._toggleLoadingIndicator(true);\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n            await this._completeCheckoutFlow();\n        } catch (error) {\n            this.stripeIntegrationService.throwPaymentConfirmationProceedMessage();\n        } finally {\n            this._toggleLoadingIndicator(false);\n        }\n    }\n\n    private async _confirmStripePaymentOrThrow(\n        additionalActionData: StripeAdditionalActionRequired['data'],\n        methodId: string,\n    ): Promise<StripeResult | never> {\n        const { token, redirect_url } = additionalActionData;\n        const stripePaymentData = this.stripeIntegrationService.mapStripePaymentData(\n            this._stripeElements,\n            redirect_url,\n        );\n        let stripeError: StripeError | undefined;\n\n        try {\n            const isPaymentCompleted = await this.stripeIntegrationService.isPaymentCompleted(\n                methodId,\n                this._stripeClient,\n            );\n\n            const confirmationResult = !isPaymentCompleted\n                ? await this._stripeClient?.confirmPayment({\n                      elements: stripePaymentData.elements,\n                      clientSecret: token,\n                      redirect: StripeStringConstants.IF_REQUIRED,\n                      confirmParams: {\n                          return_url: stripePaymentData.confirmParams?.return_url,\n                      },\n                  })\n                : await this._stripeClient?.retrievePaymentIntent(token || '');\n\n            stripeError = confirmationResult?.error;\n\n            if (stripeError || !confirmationResult?.paymentIntent) {\n                throw new PaymentMethodFailedError();\n            }\n\n            return confirmationResult;\n        } catch (error: unknown) {\n            return this.stripeIntegrationService.throwStripeError(stripeError);\n        }\n    }\n\n    private async _completeCheckoutFlow() {\n        if (typeof this._onComplete === 'function') {\n            return this._onComplete();\n        }\n\n        window.location.replace('/order-confirmation');\n\n        return Promise.resolve();\n    }\n\n    private _getPaymentPayload(methodId: string, token?: string): Payment {\n        const cartId = this.paymentIntegrationService.getState().getCart()?.id || '';\n        const formattedPayload = {\n            cart_id: cartId,\n            ...(token ? { credit_card_token: { token } } : {}),\n            confirm: false,\n            payment_method_id: StripePaymentMethodType.Link,\n        };\n\n        return {\n            methodId,\n            paymentData: {\n                formattedPayload,\n            },\n        };\n    }\n\n    /** Utils * */\n\n    private _shouldRequireShippingAddress() {\n        const { getCartOrThrow } = this.paymentIntegrationService.getState();\n        const { lineItems } = getCartOrThrow();\n\n        return !!lineItems.physicalItems.length;\n    }\n\n    private async _updateDisplayedPrice() {\n        if (this._stripeElements) {\n            this._stripeElements.update({\n                currency: this._getCurrency(),\n                mode: 'payment',\n                amount: await this._getTotalPrice(),\n            });\n        }\n    }\n\n    private _getCurrency() {\n        if (!this._currencyCode) {\n            const { code: currencyCode } = this.paymentIntegrationService\n                .getState()\n                .getCartOrThrow().currency;\n\n            this._currencyCode = currencyCode.toLowerCase();\n        }\n\n        return this._currencyCode;\n    }\n\n    private async _getTotalPrice(): Promise<number> {\n        await this.paymentIntegrationService.loadCheckout();\n\n        const { getCheckoutOrThrow, getCartOrThrow } = this.paymentIntegrationService.getState();\n        const { decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return this._toCents(+totalPrice);\n    }\n\n    private async _getAvailableCountries(): Promise<string[]> {\n        const countries = await this.paymentIntegrationService.loadShippingCountries();\n        const deliverableCountries =\n            countries.getShippingCountries()?.map((country) => country.code) || [];\n\n        return deliverableCountries.filter((code) => {\n            return expressCheckoutAllowedCountryCodes.includes(code);\n        });\n    }\n\n    private async _getAvailableShippingOptions(): Promise<StripeLinkV2ShippingRate[] | undefined> {\n        const state = this.paymentIntegrationService.getState();\n        const consignments = state.getConsignments();\n\n        if (!consignments?.[0]) {\n            return;\n        }\n\n        const consignment = consignments[0];\n        const options = (consignment.availableShippingOptions || []).map(\n            this._getStripeShippingOption.bind(this),\n        );\n\n        const selectedId = consignment.selectedShippingOption?.id;\n\n        if (!selectedId) {\n            await this._handleShippingOptionChange(options[0]?.id);\n        } else {\n            // Set selected shipping option first in the array, as it will be selected by default\n            options.sort((option) => (option.id === selectedId ? -1 : 0));\n        }\n\n        return options;\n    }\n\n    private _getStripeShippingOption({ id, cost, description }: ShippingOption) {\n        return {\n            id,\n            displayName: description,\n            amount: this._toCents(cost),\n        };\n    }\n\n    private async _handleShippingOptionChange(optionId?: string) {\n        if (!optionId || optionId === 'shipping_option_unselected') {\n            return;\n        }\n\n        return this.paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private _getAmountTransformer() {\n        if (this._amountTransformer) {\n            return this._amountTransformer;\n        }\n\n        const { getCart } = this.paymentIntegrationService.getState();\n        const { currency } = getCart() || {};\n\n        if (currency) {\n            const amountTransformer = new AmountTransformer(currency.decimalPlaces);\n\n            return amountTransformer;\n        }\n    }\n\n    private _toCents(amount: number) {\n        const fallbackValue = Math.round(amount * 100);\n        const amountTransformer = this._getAmountTransformer();\n\n        if (amountTransformer) {\n            return amountTransformer.toInteger(amount);\n        }\n\n        return fallbackValue;\n    }\n\n    private _toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this._loadingIndicatorContainer) {\n            this.loadingIndicator.show(this._loadingIndicatorContainer);\n        } else {\n            this.loadingIndicator.hide();\n        }\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport {\n    StripeIntegrationService,\n    StripeScriptLoader,\n} from '@bigcommerce/checkout-sdk/stripe-utils';\nimport { DEFAULT_CONTAINER_STYLES, LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport StripeLinkV2CustomerStrategy from './stripe-link-v2-customer-strategy';\n\nconst createStripeLinkV2CustomerStrategy: CustomerStrategyFactory<StripeLinkV2CustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const stripeScriptLoader = new StripeScriptLoader(getScriptLoader());\n    const loadingIndicator = new LoadingIndicator({\n        containerStyles: DEFAULT_CONTAINER_STYLES,\n    });\n\n    return new StripeLinkV2CustomerStrategy(\n        paymentIntegrationService,\n        stripeScriptLoader,\n        new StripeIntegrationService(paymentIntegrationService, stripeScriptLoader),\n        loadingIndicator,\n    );\n};\n\nexport default toResolvableModule(createStripeLinkV2CustomerStrategy, [{ id: 'stripeocs' }]);\n","export enum ApplePayGatewayType {\n    BRAINTREE = 'braintree',\n    BRAINTREE_FASTLANE = 'braintreeacceleratedcheckout',\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayPaymentInitializeOptions } from './apple-pay-payment-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\ninterface ApplePayPromise {\n    resolve(): void;\n    reject(reason?: Error): void;\n}\n\nenum DefaultLabels {\n    Shipping = 'Shipping',\n    Subtotal = 'Subtotal',\n    StoreCredit = 'Store Credit',\n}\n\nexport default class ApplePayPaymentStrategy implements PaymentStrategy {\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _storeCreditLabel: string = DefaultLabels.StoreCredit;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithApplePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const { methodId } = options;\n\n        await this._applePayScriptLoader.loadSdk();\n\n        this._shippingLabel = options.applepay?.shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = options.applepay?.subtotalLabel || DefaultLabels.Subtotal;\n        this._storeCreditLabel = options.applepay?.storeCreditLabel || DefaultLabels.StoreCredit;\n\n        const state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const paymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n        const state = this._paymentIntegrationService.getState();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const request = this._getBaseRequest(state, paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        await this._paymentIntegrationService.submitOrder(\n            {\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n\n        applePaySession.begin();\n\n        return new Promise((resolve, reject) => {\n            this._handleApplePayEvents(applePaySession, paymentMethod, {\n                resolve,\n                reject,\n            });\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _getBaseRequest(\n        state: PaymentIntegrationSelectors,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const checkout = state.getCheckoutOrThrow();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const { grandTotal, isStoreCreditApplied, outstandingBalance } = checkout;\n\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        if (isStoreCreditApplied) {\n            const { storeCredit } = state.getCustomerOrThrow();\n\n            lineItems.push({\n                label: this._storeCreditLabel,\n                amount: `-${Math.min(grandTotal, storeCredit).toFixed(decimalPlaces)}`,\n            });\n        }\n\n        return {\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems,\n            total: {\n                label: storeName,\n                amount: `${outstandingBalance.toFixed(decimalPlaces)}`,\n                type: 'final',\n            },\n        };\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.oncancel = async () =>\n            promise.reject(new PaymentMethodCancelledError('Continue with applepay'));\n\n        applePaySession.onpaymentauthorized = (event: ApplePayJS.ApplePayPaymentAuthorizedEvent) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod, promise);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        const { token } = event.payment;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        try {\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return promise.resolve();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return promise.reject(\n                new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n            );\n        }\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        const state = this._paymentIntegrationService.getState();\n        let braintreePaymentMethod =\n            state.getPaymentMethod(ApplePayGatewayType.BRAINTREE_FASTLANE) ||\n            state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (!braintreePaymentMethod) {\n            await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n            braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n        }\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { assertApplePayWindow } from './apple-pay-session-factory';\n\nexport default class ApplePayScriptLoader {\n    private sdkVersion = '1.latest';\n\n    constructor(private scriptLoader: ScriptLoader) {}\n\n    async loadSdk() {\n        await this.scriptLoader.loadScript(\n            `https://applepay.cdn-apple.com/jsapi/${this.sdkVersion}/apple-pay-sdk.js`,\n        );\n\n        assertApplePayWindow(window);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayPaymentStrategy from './apple-pay-payment-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayPaymentStrategy: PaymentStrategyFactory<ApplePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayPaymentStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayPaymentStrategy, [{ id: 'applepay' }]);\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayCustomerInitializeOptions } from './apple-pay-customer-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _onError = noop;\n    private _onClick = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _hasApplePaySession = false;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithApplePayCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            container,\n            shippingLabel,\n            subtotalLabel,\n            onError = noop,\n            onClick = noop,\n            onPaymentAuthorize,\n        } = applepay;\n\n        this._shippingLabel = shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = subtotalLabel || DefaultLabels.Subtotal;\n        this._onAuthorizeCallback = onPaymentAuthorize;\n        this._onError = onError;\n        this._onClick = onClick;\n\n        let state = this._paymentIntegrationService.getState();\n\n        await this._applePayScriptLoader.loadSdk();\n\n        try {\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n\n        this._applePayButton = this._createButton(container);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via Apple, the shopper must click on \"Apple Pay\" button.',\n        );\n    }\n\n    signOut(): Promise<void> {\n        throw new NotImplementedError('Need to do signout via apple.');\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._createApplePayButtonElement();\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createApplePayButtonElement(): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', 'black');\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 36px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (this._hasApplePaySession) {\n            return;\n        }\n\n        this._onClick();\n\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n        this._hasApplePaySession = true;\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                this._onError(err);\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            this._hasApplePaySession = false;\n\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                return this._onError(new PaymentMethodCancelledError());\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            return this._onError(error);\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return this._onError(error);\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayCustomerStrategy from './apple-pay-customer-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayCustomerStrategy: CustomerStrategyFactory<ApplePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayCustomerStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayCustomerStrategy, [{ id: 'applepay' }]);\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport ApplePayButtonInitializeOptions, {\n    WithApplePayButtonInitializeOptions,\n} from './apple-pay-button-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nexport enum ButtonStyleOption {\n    Black = 'black',\n    White = 'white',\n    WhiteBorder = 'white-border',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nconst getButtonStyle = (buttonStyle?: ButtonStyleOption): string => {\n    switch (buttonStyle) {\n        case ButtonStyleOption.White:\n            return 'white';\n\n        case ButtonStyleOption.WhiteBorder:\n            return 'white-outline';\n\n        case ButtonStyleOption.Black:\n        default:\n            return 'black';\n    }\n};\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _requiresShipping?: boolean;\n    private _buyNowInitializeOptions?: ApplePayButtonInitializeOptions['buyNowInitializeOptions'];\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await this._applePayScriptLoader.loadSdk();\n\n        const { onPaymentAuthorize, buyNowInitializeOptions, requiresShipping } = applepay;\n\n        this._requiresShipping = requiresShipping;\n\n        this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        if (!buyNowInitializeOptions) {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const cart = state.getCart();\n\n        if (cart) {\n            await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n        }\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n\n        this._applePayButton = this._createButton(\n            containerId,\n            this._paymentMethod.initializationData?.styleOption,\n        );\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string, styleOption?: ButtonStyleOption): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._createApplePayButtonElement(styleOption);\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createApplePayButtonElement(styleOption?: ButtonStyleOption): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', getButtonStyle(styleOption));\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 40px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private async _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this._buyNowInitializeOptions &&\n            typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const {\n                countryCode,\n                currencyCode,\n                merchantCapabilities,\n                supportedNetworks,\n                storeName,\n            } = this._paymentMethod.initializationData;\n\n            const request = this._getRequestWithEmptyTotal(\n                countryCode,\n                currencyCode,\n                supportedNetworks,\n                merchantCapabilities,\n            );\n\n            if (this._requiresShipping) {\n                request.requiredShippingContactFields?.push('postalAddress');\n            }\n\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(applePaySession, this._paymentMethod, storeName);\n\n            applePaySession.begin();\n        } else {\n            const state = this._paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const config = state.getStoreConfigOrThrow();\n            const checkout = state.getCheckoutOrThrow();\n            const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(\n                applePaySession,\n                this._paymentMethod,\n                config.storeProfile.storeName,\n            );\n\n            applePaySession.begin();\n        }\n    }\n\n    private _getRequestWithEmptyTotal(\n        countryCode: string,\n        currencyCode: string,\n        supportedNetworks: string[],\n        merchantCapabilities: ApplePayJS.ApplePayMerchantCapability[],\n    ): ApplePayJS.ApplePayPaymentRequest {\n        return {\n            countryCode,\n            currencyCode,\n            supportedNetworks,\n            merchantCapabilities,\n            total: { label: '', amount: '0', type: 'pending' },\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n        };\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        storeName: string,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        if (this._buyNowInitializeOptions && !this._requiresShipping) {\n            applePaySession.onpaymentmethodselected = async () => {\n                await this._createBuyNowCart();\n                this._handlePaymentMethodSelected(applePaySession);\n            };\n        }\n\n        applePaySession.onshippingcontactselected = async (event) => {\n            if (this._buyNowInitializeOptions && this._requiresShipping) {\n                await this._createBuyNowCart();\n            }\n\n            await this._handleShippingContactSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.onshippingmethodselected = async (event) => {\n            await this._handleShippingMethodSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _createBuyNowCart() {\n        try {\n            const cartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            const buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                cartRequestBody,\n            );\n\n            await this._paymentIntegrationService.loadCheckout(buyNowCart.id);\n\n            const state = this._paymentIntegrationService.getState();\n            const { shouldExecuteSpamCheck } = state.getCheckoutOrThrow();\n\n            if (shouldExecuteSpamCheck) {\n                await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n            }\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private _handlePaymentMethodSelected(applePaySession: ApplePaySession) {\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n\n        delete request.total.type;\n\n        applePaySession.completePaymentMethodSelection({\n            newTotal: request.total,\n            newLineItems: request.lineItems,\n        });\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","export default function getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (node.toString() !== '[object Window]') {\n    var ownerDocument = node.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  return node;\n}","import getWindow from \"./getWindow.js\";\n\nfunction isElement(node) {\n  var OwnElement = getWindow(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\n\nfunction isHTMLElement(node) {\n  var OwnElement = getWindow(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\n\nfunction isShadowRoot(node) {\n  // IE 11 has no ShadowRoot\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n\n  var OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\nexport { isElement, isHTMLElement, isShadowRoot };","export var max = Math.max;\nexport var min = Math.min;\nexport var round = Math.round;","export default function getUAString() {\n  var uaData = navigator.userAgentData;\n\n  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {\n    return uaData.brands.map(function (item) {\n      return item.brand + \"/\" + item.version;\n    }).join(' ');\n  }\n\n  return navigator.userAgent;\n}","import getUAString from \"../utils/userAgent.js\";\nexport default function isLayoutViewport() {\n  return !/^((?!chrome|android).)*safari/i.test(getUAString());\n}","import { isElement, isHTMLElement } from \"./instanceOf.js\";\nimport { round } from \"../utils/math.js\";\nimport getWindow from \"./getWindow.js\";\nimport isLayoutViewport from \"./isLayoutViewport.js\";\nexport default function getBoundingClientRect(element, includeScale, isFixedStrategy) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n\n  var clientRect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1;\n\n  if (includeScale && isHTMLElement(element)) {\n    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n  }\n\n  var _ref = isElement(element) ? getWindow(element) : window,\n      visualViewport = _ref.visualViewport;\n\n  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n  var width = clientRect.width / scaleX;\n  var height = clientRect.height / scaleY;\n  return {\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: y + height,\n    left: x,\n    x: x,\n    y: y\n  };\n}","import getWindow from \"./getWindow.js\";\nexport default function getWindowScroll(node) {\n  var win = getWindow(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft: scrollLeft,\n    scrollTop: scrollTop\n  };\n}","export default function getNodeName(element) {\n  return element ? (element.nodeName || '').toLowerCase() : null;\n}","import { isElement } from \"./instanceOf.js\";\nexport default function getDocumentElement(element) {\n  // $FlowFixMe[incompatible-return]: assume body is always available\n  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]\n  element.document) || window.document).documentElement;\n}","import getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getWindowScroll from \"./getWindowScroll.js\";\nexport default function getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  // Popper 1 is broken in this case and never had a bug report so let's assume\n  // it's not an issue. I don't think anyone ever specifies width on <html>\n  // anyway.\n  // Browsers where the left scrollbar doesn't cause an issue report `0` for\n  // this (e.g. Edge 2019, IE11, Safari)\n  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}","import getWindow from \"./getWindow.js\";\nexport default function getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}","import getComputedStyle from \"./getComputedStyle.js\";\nexport default function isScrollParent(element) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  var _getComputedStyle = getComputedStyle(element),\n      overflow = _getComputedStyle.overflow,\n      overflowX = _getComputedStyle.overflowX,\n      overflowY = _getComputedStyle.overflowY;\n\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}","import getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getNodeScroll from \"./getNodeScroll.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport isScrollParent from \"./isScrollParent.js\";\nimport { round } from \"../utils/math.js\";\n\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = round(rect.width) / element.offsetWidth || 1;\n  var scaleY = round(rect.height) / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n\nexport default function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent, true);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}","import getWindowScroll from \"./getWindowScroll.js\";\nimport getWindow from \"./getWindow.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nimport getHTMLElementScroll from \"./getHTMLElementScroll.js\";\nexport default function getNodeScroll(node) {\n  if (node === getWindow(node) || !isHTMLElement(node)) {\n    return getWindowScroll(node);\n  } else {\n    return getHTMLElementScroll(node);\n  }\n}","export default function getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}","import getBoundingClientRect from \"./getBoundingClientRect.js\"; // Returns the layout rect of an element relative to its offsetParent. Layout\n// means it doesn't take into account transforms.\n\nexport default function getLayoutRect(element) {\n  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n  // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width: width,\n    height: height\n  };\n}","import getNodeName from \"./getNodeName.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport { isShadowRoot } from \"./instanceOf.js\";\nexport default function getParentNode(element) {\n  if (getNodeName(element) === 'html') {\n    return element;\n  }\n\n  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || ( // DOM Element detected\n    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element) // fallback\n\n  );\n}","import getParentNode from \"./getParentNode.js\";\nimport isScrollParent from \"./isScrollParent.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nexport default function getScrollParent(node) {\n  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return node.ownerDocument.body;\n  }\n\n  if (isHTMLElement(node) && isScrollParent(node)) {\n    return node;\n  }\n\n  return getScrollParent(getParentNode(node));\n}","import getScrollParent from \"./getScrollParent.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport getWindow from \"./getWindow.js\";\nimport isScrollParent from \"./isScrollParent.js\";\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the\nreference element's position.\n*/\n\nexport default function listScrollParents(element, list) {\n  var _element$ownerDocumen;\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = getScrollParent(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(getParentNode(target)));\n}","import getNodeName from \"./getNodeName.js\";\nexport default function isTableElement(element) {\n  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;\n}","import getWindow from \"./getWindow.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport { isHTMLElement, isShadowRoot } from \"./instanceOf.js\";\nimport isTableElement from \"./isTableElement.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport getUAString from \"../utils/userAgent.js\";\n\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n\n  return element.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n\n\nfunction getContainingBlock(element) {\n  var isFirefox = /firefox/i.test(getUAString());\n  var isIE = /Trident/i.test(getUAString());\n\n  if (isIE && isHTMLElement(element)) {\n    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n    var elementCss = getComputedStyle(element);\n\n    if (elementCss.position === 'fixed') {\n      return null;\n    }\n  }\n\n  var currentNode = getParentNode(element);\n\n  if (isShadowRoot(currentNode)) {\n    currentNode = currentNode.host;\n  }\n\n  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nexport default function getOffsetParent(element) {\n  var window = getWindow(element);\n  var offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}","export var top = 'top';\nexport var bottom = 'bottom';\nexport var right = 'right';\nexport var left = 'left';\nexport var auto = 'auto';\nexport var basePlacements = [top, bottom, right, left];\nexport var start = 'start';\nexport var end = 'end';\nexport var clippingParents = 'clippingParents';\nexport var viewport = 'viewport';\nexport var popper = 'popper';\nexport var reference = 'reference';\nexport var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n  return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nexport var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n}, []); // modifiers that need to read the DOM\n\nexport var beforeRead = 'beforeRead';\nexport var read = 'read';\nexport var afterRead = 'afterRead'; // pure-logic modifiers\n\nexport var beforeMain = 'beforeMain';\nexport var main = 'main';\nexport var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\nexport var beforeWrite = 'beforeWrite';\nexport var write = 'write';\nexport var afterWrite = 'afterWrite';\nexport var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];","import { modifierPhases } from \"../enums.js\"; // source: https://stackoverflow.com/questions/49875255\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nexport default function orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}","import getCompositeRect from \"./dom-utils/getCompositeRect.js\";\nimport getLayoutRect from \"./dom-utils/getLayoutRect.js\";\nimport listScrollParents from \"./dom-utils/listScrollParents.js\";\nimport getOffsetParent from \"./dom-utils/getOffsetParent.js\";\nimport orderModifiers from \"./utils/orderModifiers.js\";\nimport debounce from \"./utils/debounce.js\";\nimport mergeByName from \"./utils/mergeByName.js\";\nimport detectOverflow from \"./utils/detectOverflow.js\";\nimport { isElement } from \"./dom-utils/instanceOf.js\";\nvar DEFAULT_OPTIONS = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === 'function');\n  });\n}\n\nexport function popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n\n  var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper(reference, popper, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n\n    var state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference,\n        popper: popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state: state,\n      setOptions: function setOptions(setOptionsAction) {\n        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;\n        cleanupModifierEffects();\n        state.options = Object.assign({}, defaultOptions, state.options, options);\n        state.scrollParents = {\n          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n          popper: listScrollParents(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(function (m) {\n          return m.enabled;\n        });\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n          popper: getLayoutRect(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (typeof fn === 'function') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce(function () {\n        return new Promise(function (resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      return instance;\n    }\n\n    instance.setOptions(options).then(function (state) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function (_ref) {\n        var name = _ref.name,\n            _ref$options = _ref.options,\n            options = _ref$options === void 0 ? {} : _ref$options,\n            effect = _ref.effect;\n\n        if (typeof effect === 'function') {\n          var cleanupFn = effect({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n\n          var noopFn = function noopFn() {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function (fn) {\n        return fn();\n      });\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\nexport var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n\nexport { detectOverflow };","export default function debounce(fn) {\n  var pending;\n  return function () {\n    if (!pending) {\n      pending = new Promise(function (resolve) {\n        Promise.resolve().then(function () {\n          pending = undefined;\n          resolve(fn());\n        });\n      });\n    }\n\n    return pending;\n  };\n}","export default function mergeByName(modifiers) {\n  var merged = modifiers.reduce(function (merged, current) {\n    var existing = merged[current.name];\n    merged[current.name] = existing ? Object.assign({}, existing, current, {\n      options: Object.assign({}, existing.options, current.options),\n      data: Object.assign({}, existing.data, current.data)\n    }) : current;\n    return merged;\n  }, {}); // IE11 does not support Object.values\n\n  return Object.keys(merged).map(function (key) {\n    return merged[key];\n  });\n}","import getWindow from \"../dom-utils/getWindow.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar passive = {\n  passive: true\n};\n\nfunction effect(_ref) {\n  var state = _ref.state,\n      instance = _ref.instance,\n      options = _ref.options;\n  var _options$scroll = options.scroll,\n      scroll = _options$scroll === void 0 ? true : _options$scroll,\n      _options$resize = options.resize,\n      resize = _options$resize === void 0 ? true : _options$resize;\n  var window = getWindow(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n  if (scroll) {\n    scrollParents.forEach(function (scrollParent) {\n      scrollParent.addEventListener('scroll', instance.update, passive);\n    });\n  }\n\n  if (resize) {\n    window.addEventListener('resize', instance.update, passive);\n  }\n\n  return function () {\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.removeEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.removeEventListener('resize', instance.update, passive);\n    }\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'eventListeners',\n  enabled: true,\n  phase: 'write',\n  fn: function fn() {},\n  effect: effect,\n  data: {}\n};","import { auto } from \"../enums.js\";\nexport default function getBasePlacement(placement) {\n  return placement.split('-')[0];\n}","export default function getVariation(placement) {\n  return placement.split('-')[1];\n}","export default function getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n}","import getBasePlacement from \"./getBasePlacement.js\";\nimport getVariation from \"./getVariation.js\";\nimport getMainAxisFromPlacement from \"./getMainAxisFromPlacement.js\";\nimport { top, right, bottom, left, start, end } from \"../enums.js\";\nexport default function computeOffsets(_ref) {\n  var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    var len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n        break;\n\n      case end:\n        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n        break;\n\n      default:\n    }\n  }\n\n  return offsets;\n}","import { top, left, right, bottom, end } from \"../enums.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport getWindow from \"../dom-utils/getWindow.js\";\nimport getDocumentElement from \"../dom-utils/getDocumentElement.js\";\nimport getComputedStyle from \"../dom-utils/getComputedStyle.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getVariation from \"../utils/getVariation.js\";\nimport { round } from \"../utils/math.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar unsetSides = {\n  top: 'auto',\n  right: 'auto',\n  bottom: 'auto',\n  left: 'auto'\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n\nfunction roundOffsetsByDPR(_ref, win) {\n  var x = _ref.x,\n      y = _ref.y;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: round(x * dpr) / dpr || 0,\n    y: round(y * dpr) / dpr || 0\n  };\n}\n\nexport function mapToStyles(_ref2) {\n  var _Object$assign2;\n\n  var popper = _ref2.popper,\n      popperRect = _ref2.popperRect,\n      placement = _ref2.placement,\n      variation = _ref2.variation,\n      offsets = _ref2.offsets,\n      position = _ref2.position,\n      gpuAcceleration = _ref2.gpuAcceleration,\n      adaptive = _ref2.adaptive,\n      roundOffsets = _ref2.roundOffsets,\n      isFixed = _ref2.isFixed;\n  var _offsets$x = offsets.x,\n      x = _offsets$x === void 0 ? 0 : _offsets$x,\n      _offsets$y = offsets.y,\n      y = _offsets$y === void 0 ? 0 : _offsets$y;\n\n  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref3.x;\n  y = _ref3.y;\n  var hasX = offsets.hasOwnProperty('x');\n  var hasY = offsets.hasOwnProperty('y');\n  var sideX = left;\n  var sideY = top;\n  var win = window;\n\n  if (adaptive) {\n    var offsetParent = getOffsetParent(popper);\n    var heightProp = 'clientHeight';\n    var widthProp = 'clientWidth';\n\n    if (offsetParent === getWindow(popper)) {\n      offsetParent = getDocumentElement(popper);\n\n      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {\n        heightProp = 'scrollHeight';\n        widthProp = 'scrollWidth';\n      }\n    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n\n    offsetParent = offsetParent;\n\n    if (placement === top || (placement === left || placement === right) && variation === end) {\n      sideY = bottom;\n      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]\n      offsetParent[heightProp];\n      y -= offsetY - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n\n    if (placement === left || (placement === top || placement === bottom) && variation === end) {\n      sideX = right;\n      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]\n      offsetParent[widthProp];\n      x -= offsetX - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n\n  var commonStyles = Object.assign({\n    position: position\n  }, adaptive && unsetSides);\n\n  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n    x: x,\n    y: y\n  }, getWindow(popper)) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref4.x;\n  y = _ref4.y;\n\n  if (gpuAcceleration) {\n    var _Object$assign;\n\n    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n  }\n\n  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n}\n\nfunction computeStyles(_ref5) {\n  var state = _ref5.state,\n      options = _ref5.options;\n  var _options$gpuAccelerat = options.gpuAcceleration,\n      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n      _options$adaptive = options.adaptive,\n      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n      _options$roundOffsets = options.roundOffsets,\n      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n  var commonStyles = {\n    placement: getBasePlacement(state.placement),\n    variation: getVariation(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration: gpuAcceleration,\n    isFixed: state.options.strategy === 'fixed'\n  };\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive: adaptive,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.arrow,\n      position: 'absolute',\n      adaptive: false,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-placement': state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'computeStyles',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn: computeStyles,\n  data: {}\n};","import getBasePlacement from \"../utils/getBasePlacement.js\";\nimport { top, left, right, placements } from \"../enums.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport function distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {\n    placement: placement\n  })) : offset,\n      skidding = _ref[0],\n      distance = _ref[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n\nfunction offset(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = placements.reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n};","var hash = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nexport default function getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}","var hash = {\n  start: 'end',\n  end: 'start'\n};\nexport default function getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function (matched) {\n    return hash[matched];\n  });\n}","import { isShadowRoot } from \"./instanceOf.js\";\nexport default function contains(parent, child) {\n  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n  if (parent.contains(child)) {\n    return true;\n  } // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && isShadowRoot(rootNode)) {\n      var next = child;\n\n      do {\n        if (next && parent.isSameNode(next)) {\n          return true;\n        } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n\n        next = next.parentNode || next.host;\n      } while (next);\n    } // Give up, the result is false\n\n\n  return false;\n}","export default function rectToClientRect(rect) {\n  return Object.assign({}, rect, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}","import { viewport } from \"../enums.js\";\nimport getViewportRect from \"./getViewportRect.js\";\nimport getDocumentRect from \"./getDocumentRect.js\";\nimport listScrollParents from \"./listScrollParents.js\";\nimport getOffsetParent from \"./getOffsetParent.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport { isElement, isHTMLElement } from \"./instanceOf.js\";\nimport getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport contains from \"./contains.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport rectToClientRect from \"../utils/rectToClientRect.js\";\nimport { max, min } from \"../utils/math.js\";\n\nfunction getInnerBoundingClientRect(element, strategy) {\n  var rect = getBoundingClientRect(element, false, strategy === 'fixed');\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\n\nfunction getClientRectFromMixedType(element, clippingParent, strategy) {\n  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  var clippingParents = listScrollParents(getParentNode(element));\n  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;\n  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n  if (!isElement(clipperElement)) {\n    return [];\n  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n  return clippingParents.filter(function (clippingParent) {\n    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n  });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nexport default function getClippingRect(element, boundary, rootBoundary, strategy) {\n  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents[0];\n  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}","import getWindow from \"./getWindow.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport isLayoutViewport from \"./isLayoutViewport.js\";\nexport default function getViewportRect(element, strategy) {\n  var win = getWindow(element);\n  var html = getDocumentElement(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0;\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    var layoutViewport = isLayoutViewport();\n\n    if (layoutViewport || !layoutViewport && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x + getWindowScrollBarX(element),\n    y: y\n  };\n}","import getDocumentElement from \"./getDocumentElement.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport getWindowScroll from \"./getWindowScroll.js\";\nimport { max } from \"../utils/math.js\"; // Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\nexport default function getDocumentRect(element) {\n  var _element$ownerDocumen;\n\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n\n  if (getComputedStyle(body || html).direction === 'rtl') {\n    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}","import getFreshSideObject from \"./getFreshSideObject.js\";\nexport default function mergePaddingObject(paddingObject) {\n  return Object.assign({}, getFreshSideObject(), paddingObject);\n}","export default function getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}","export default function expandToHashMap(value, keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}","import getClippingRect from \"../dom-utils/getClippingRect.js\";\nimport getDocumentElement from \"../dom-utils/getDocumentElement.js\";\nimport getBoundingClientRect from \"../dom-utils/getBoundingClientRect.js\";\nimport computeOffsets from \"./computeOffsets.js\";\nimport rectToClientRect from \"./rectToClientRect.js\";\nimport { clippingParents, reference, popper, bottom, top, right, basePlacements, viewport } from \"../enums.js\";\nimport { isElement } from \"../dom-utils/instanceOf.js\";\nimport mergePaddingObject from \"./mergePaddingObject.js\";\nimport expandToHashMap from \"./expandToHashMap.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport default function detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$strategy = _options.strategy,\n      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}","import { max as mathMax, min as mathMin } from \"./math.js\";\nexport function within(min, value, max) {\n  return mathMax(min, mathMin(value, max));\n}\nexport function withinMaxClamp(min, value, max) {\n  var v = within(min, value, max);\n  return v > max ? max : v;\n}","import { top, left, right, bottom, start } from \"../enums.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getMainAxisFromPlacement from \"../utils/getMainAxisFromPlacement.js\";\nimport getAltAxis from \"../utils/getAltAxis.js\";\nimport { within, withinMaxClamp } from \"../utils/within.js\";\nimport getLayoutRect from \"../dom-utils/getLayoutRect.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\nimport getVariation from \"../utils/getVariation.js\";\nimport getFreshSideObject from \"../utils/getFreshSideObject.js\";\nimport { min as mathMin, max as mathMax } from \"../utils/math.js\";\n\nfunction preventOverflow(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = detectOverflow(state, {\n    boundary: boundary,\n    rootBoundary: rootBoundary,\n    padding: padding,\n    altBoundary: altBoundary\n  });\n  var basePlacement = getBasePlacement(state.placement);\n  var variation = getVariation(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = getMainAxisFromPlacement(basePlacement);\n  var altAxis = getAltAxis(mainAxis);\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {\n    mainAxis: tetherOffsetValue,\n    altAxis: tetherOffsetValue\n  } : Object.assign({\n    mainAxis: 0,\n    altAxis: 0\n  }, tetherOffsetValue);\n  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n  var data = {\n    x: 0,\n    y: 0\n  };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis) {\n    var _offsetModifierState$;\n\n    var mainSide = mainAxis === 'y' ? top : left;\n    var altSide = mainAxis === 'y' ? bottom : right;\n    var len = mainAxis === 'y' ? 'height' : 'width';\n    var offset = popperOffsets[mainAxis];\n    var min = offset + overflow[mainSide];\n    var max = offset - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n\n    var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = offset + maxOffset - offsetModifierValue;\n    var preventedOffset = within(tether ? mathMin(min, tetherMin) : min, offset, tether ? mathMax(max, tetherMax) : max);\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n\n  if (checkAltAxis) {\n    var _offsetModifierState$2;\n\n    var _mainSide = mainAxis === 'x' ? top : left;\n\n    var _altSide = mainAxis === 'x' ? bottom : right;\n\n    var _offset = popperOffsets[altAxis];\n\n    var _len = altAxis === 'y' ? 'height' : 'width';\n\n    var _min = _offset + overflow[_mainSide];\n\n    var _max = _offset - overflow[_altSide];\n\n    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;\n\n    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n\n    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n\n    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n\n    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n\n    popperOffsets[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n};","export default function getAltAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}","import getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getLayoutRect from \"../dom-utils/getLayoutRect.js\";\nimport contains from \"../dom-utils/contains.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport getMainAxisFromPlacement from \"../utils/getMainAxisFromPlacement.js\";\nimport { within } from \"../utils/within.js\";\nimport mergePaddingObject from \"../utils/mergePaddingObject.js\";\nimport expandToHashMap from \"../utils/expandToHashMap.js\";\nimport { left, right, basePlacements, top, bottom } from \"../enums.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar toPaddingObject = function toPaddingObject(padding, state) {\n  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n};\n\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n\n  var state = _ref.state,\n      name = _ref.name,\n      options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var basePlacement = getBasePlacement(state.placement);\n  var axis = getMainAxisFromPlacement(basePlacement);\n  var isVertical = [left, right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? 'height' : 'width';\n\n  if (!arrowElement || !popperOffsets) {\n    return;\n  }\n\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = getLayoutRect(arrowElement);\n  var minProp = axis === 'y' ? top : left;\n  var maxProp = axis === 'y' ? bottom : right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = getOffsetParent(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n  // outside of the popper bounds\n\n  var min = paddingObject[minProp];\n  var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options;\n  var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n\n  if (arrowElement == null) {\n    return;\n  } // CSS selector\n\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n\n    if (!arrowElement) {\n      return;\n    }\n  }\n\n  if (!contains(state.elements.popper, arrowElement)) {\n    return;\n  }\n\n  state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'arrow',\n  enabled: true,\n  phase: 'main',\n  fn: arrow,\n  effect: effect,\n  requires: ['popperOffsets'],\n  requiresIfExists: ['preventOverflow']\n};","import { top, bottom, left, right } from \"../enums.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\n\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return [top, right, bottom, left].some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n\nfunction hide(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = detectOverflow(state, {\n    elementContext: 'reference'\n  });\n  var popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets: referenceClippingOffsets,\n    popperEscapeOffsets: popperEscapeOffsets,\n    isReferenceHidden: isReferenceHidden,\n    hasPopperEscaped: hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n};","import { popperGenerator, detectOverflow } from \"./createPopper.js\";\nimport eventListeners from \"./modifiers/eventListeners.js\";\nimport popperOffsets from \"./modifiers/popperOffsets.js\";\nimport computeStyles from \"./modifiers/computeStyles.js\";\nimport applyStyles from \"./modifiers/applyStyles.js\";\nimport offset from \"./modifiers/offset.js\";\nimport flip from \"./modifiers/flip.js\";\nimport preventOverflow from \"./modifiers/preventOverflow.js\";\nimport arrow from \"./modifiers/arrow.js\";\nimport hide from \"./modifiers/hide.js\";\nvar defaultModifiers = [eventListeners, popperOffsets, computeStyles, applyStyles, offset, flip, preventOverflow, arrow, hide];\nvar createPopper = /*#__PURE__*/popperGenerator({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper, popperGenerator, defaultModifiers, detectOverflow }; // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper as createPopperLite } from \"./popper-lite.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport * from \"./modifiers/index.js\";","import computeOffsets from \"../utils/computeOffsets.js\";\n\nfunction popperOffsets(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  // Offsets are the actual position the popper needs to have to be\n  // properly positioned near its reference element\n  // This is the most basic placement, and will be adjusted by\n  // the modifiers in the next step\n  state.modifiersData[name] = computeOffsets({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: 'absolute',\n    placement: state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'popperOffsets',\n  enabled: true,\n  phase: 'read',\n  fn: popperOffsets,\n  data: {}\n};","import getNodeName from \"../dom-utils/getNodeName.js\";\nimport { isHTMLElement } from \"../dom-utils/instanceOf.js\"; // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: effect,\n  requires: ['computeStyles']\n};","import getOppositePlacement from \"../utils/getOppositePlacement.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getOppositeVariationPlacement from \"../utils/getOppositeVariationPlacement.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\nimport computeAutoPlacement from \"../utils/computeAutoPlacement.js\";\nimport { bottom, top, start, right, left, auto } from \"../enums.js\";\nimport getVariation from \"../utils/getVariation.js\"; // eslint-disable-next-line import/no-unused-modules\n\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n\n  var oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\n\nfunction flip(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n      specifiedFallbackPlacements = options.fallbackPlacements,\n      padding = options.padding,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      _options$flipVariatio = options.flipVariations,\n      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n      allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = getBasePlacement(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      flipVariations: flipVariations,\n      allowedAutoPlacements: allowedAutoPlacements\n    }) : placement);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements[0];\n\n  for (var i = 0; i < placements.length; i++) {\n    var placement = placements[i];\n\n    var _basePlacement = getBasePlacement(placement);\n\n    var isStartVariation = getVariation(placement) === start;\n    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? 'width' : 'height';\n    var overflow = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      altBoundary: altBoundary,\n      padding: padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n\n    var altVariationSide = getOppositePlacement(mainVariationSide);\n    var checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(function (check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    var numberOfChecks = flipVariations ? 3 : 1;\n\n    var _loop = function _loop(_i) {\n      var fittingPlacement = placements.find(function (placement) {\n        var checks = checksMap.get(placement);\n\n        if (checks) {\n          return checks.slice(0, _i).every(function (check) {\n            return check;\n          });\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return \"break\";\n      }\n    };\n\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n\n      if (_ret === \"break\") break;\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: {\n    _skip: false\n  }\n};","import getVariation from \"./getVariation.js\";\nimport { variationPlacements, basePlacements, placements as allPlacements } from \"../enums.js\";\nimport detectOverflow from \"./detectOverflow.js\";\nimport getBasePlacement from \"./getBasePlacement.js\";\nexport default function computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? allPlacements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n    return getVariation(placement) === variation;\n  }) : basePlacements;\n  var allowedPlacements = placements.filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  });\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n  var overflows = allowedPlacements.reduce(function (acc, placement) {\n    acc[placement] = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { createPopper as defaultCreatePopper } from '@popperjs/core';\nimport isEqual from 'react-fast-compare';\nimport { fromEntries, useIsomorphicLayoutEffect } from './utils';\nvar EMPTY_MODIFIERS = [];\nexport var usePopper = function usePopper(referenceElement, popperElement, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var prevOptions = React.useRef(null);\n  var optionsWithDefaults = {\n    onFirstUpdate: options.onFirstUpdate,\n    placement: options.placement || 'bottom',\n    strategy: options.strategy || 'absolute',\n    modifiers: options.modifiers || EMPTY_MODIFIERS\n  };\n\n  var _React$useState = React.useState({\n    styles: {\n      popper: {\n        position: optionsWithDefaults.strategy,\n        left: '0',\n        top: '0'\n      },\n      arrow: {\n        position: 'absolute'\n      }\n    },\n    attributes: {}\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var updateStateModifier = React.useMemo(function () {\n    return {\n      name: 'updateState',\n      enabled: true,\n      phase: 'write',\n      fn: function fn(_ref) {\n        var state = _ref.state;\n        var elements = Object.keys(state.elements);\n        ReactDOM.flushSync(function () {\n          setState({\n            styles: fromEntries(elements.map(function (element) {\n              return [element, state.styles[element] || {}];\n            })),\n            attributes: fromEntries(elements.map(function (element) {\n              return [element, state.attributes[element]];\n            }))\n          });\n        });\n      },\n      requires: ['computeStyles']\n    };\n  }, []);\n  var popperOptions = React.useMemo(function () {\n    var newOptions = {\n      onFirstUpdate: optionsWithDefaults.onFirstUpdate,\n      placement: optionsWithDefaults.placement,\n      strategy: optionsWithDefaults.strategy,\n      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {\n        name: 'applyStyles',\n        enabled: false\n      }])\n    };\n\n    if (isEqual(prevOptions.current, newOptions)) {\n      return prevOptions.current || newOptions;\n    } else {\n      prevOptions.current = newOptions;\n      return newOptions;\n    }\n  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);\n  var popperInstanceRef = React.useRef();\n  useIsomorphicLayoutEffect(function () {\n    if (popperInstanceRef.current) {\n      popperInstanceRef.current.setOptions(popperOptions);\n    }\n  }, [popperOptions]);\n  useIsomorphicLayoutEffect(function () {\n    if (referenceElement == null || popperElement == null) {\n      return;\n    }\n\n    var createPopper = options.createPopper || defaultCreatePopper;\n    var popperInstance = createPopper(referenceElement, popperElement, popperOptions);\n    popperInstanceRef.current = popperInstance;\n    return function () {\n      popperInstance.destroy();\n      popperInstanceRef.current = null;\n    };\n  }, [referenceElement, popperElement, options.createPopper]);\n  return {\n    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,\n    styles: state.styles,\n    attributes: state.attributes,\n    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,\n    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null\n  };\n};","import * as React from 'react';\nimport { ManagerReferenceNodeContext } from './Manager';\nimport { unwrapArray, setRef } from './utils';\nimport { usePopper } from './usePopper';\n\nvar NOOP = function NOOP() {\n  return void 0;\n};\n\nvar NOOP_PROMISE = function NOOP_PROMISE() {\n  return Promise.resolve(null);\n};\n\nvar EMPTY_MODIFIERS = [];\nexport function Popper(_ref) {\n  var _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,\n      _ref$strategy = _ref.strategy,\n      strategy = _ref$strategy === void 0 ? 'absolute' : _ref$strategy,\n      _ref$modifiers = _ref.modifiers,\n      modifiers = _ref$modifiers === void 0 ? EMPTY_MODIFIERS : _ref$modifiers,\n      referenceElement = _ref.referenceElement,\n      onFirstUpdate = _ref.onFirstUpdate,\n      innerRef = _ref.innerRef,\n      children = _ref.children;\n  var referenceNode = React.useContext(ManagerReferenceNodeContext);\n\n  var _React$useState = React.useState(null),\n      popperElement = _React$useState[0],\n      setPopperElement = _React$useState[1];\n\n  var _React$useState2 = React.useState(null),\n      arrowElement = _React$useState2[0],\n      setArrowElement = _React$useState2[1];\n\n  React.useEffect(function () {\n    setRef(innerRef, popperElement);\n  }, [innerRef, popperElement]);\n  var options = React.useMemo(function () {\n    return {\n      placement: placement,\n      strategy: strategy,\n      onFirstUpdate: onFirstUpdate,\n      modifiers: [].concat(modifiers, [{\n        name: 'arrow',\n        enabled: arrowElement != null,\n        options: {\n          element: arrowElement\n        }\n      }])\n    };\n  }, [placement, strategy, onFirstUpdate, modifiers, arrowElement]);\n\n  var _usePopper = usePopper(referenceElement || referenceNode, popperElement, options),\n      state = _usePopper.state,\n      styles = _usePopper.styles,\n      forceUpdate = _usePopper.forceUpdate,\n      update = _usePopper.update;\n\n  var childrenProps = React.useMemo(function () {\n    return {\n      ref: setPopperElement,\n      style: styles.popper,\n      placement: state ? state.placement : placement,\n      hasPopperEscaped: state && state.modifiersData.hide ? state.modifiersData.hide.hasPopperEscaped : null,\n      isReferenceHidden: state && state.modifiersData.hide ? state.modifiersData.hide.isReferenceHidden : null,\n      arrowProps: {\n        style: styles.arrow,\n        ref: setArrowElement\n      },\n      forceUpdate: forceUpdate || NOOP,\n      update: update || NOOP_PROMISE\n    };\n  }, [setPopperElement, setArrowElement, placement, state, styles, update, forceUpdate]);\n  return unwrapArray(children)(childrenProps);\n}","import * as React from 'react';\nexport var ManagerReferenceNodeContext = React.createContext();\nexport var ManagerReferenceNodeSetterContext = React.createContext();\nexport function Manager(_ref) {\n  var children = _ref.children;\n\n  var _React$useState = React.useState(null),\n      referenceNode = _React$useState[0],\n      setReferenceNode = _React$useState[1];\n\n  var hasUnmounted = React.useRef(false);\n  React.useEffect(function () {\n    return function () {\n      hasUnmounted.current = true;\n    };\n  }, []);\n  var handleSetReferenceNode = React.useCallback(function (node) {\n    if (!hasUnmounted.current) {\n      setReferenceNode(node);\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(ManagerReferenceNodeContext.Provider, {\n    value: referenceNode\n  }, /*#__PURE__*/React.createElement(ManagerReferenceNodeSetterContext.Provider, {\n    value: handleSetReferenceNode\n  }, children));\n}","import {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(payload, options);\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport LegacyPaymentStrategy from './legacy-payment-strategy';\n\nconst createLegacyPaymentStrategy: PaymentStrategyFactory<LegacyPaymentStrategy> = (\n    paymentIntegrationService,\n) => new LegacyPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createLegacyPaymentStrategy, [{ id: 'testgateway' }]);\n"],"names":["NotInitializedErrorType","MissingDataErrorType","HostedFieldType","__webpack_require__","toResolvableModule","module","resolveIds","Object","assign","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","StandardError","Error","constructor","message","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","PaymentMethodFailedError","guard","value","errorFactory","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","subtype","BlueSnapDirect3ds","initialize","blueSnapSdk","_blueSnapSdk","initialize3ds","token","cardData","_getBlueSnapSdk","Promise","resolve","reject","threeDsPaymentsSetup","sdkResponse","code","threeDSecure","threeDSecureReferenceId","threeDsPaymentsSubmitData","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","isHostedInstrumentLike","instrument","shouldSaveInstrument","shouldSetAsDefaultInstrument","isVaultedInstrument","Boolean","instrumentId","OrderFinalizationNotRequiredError","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","CardCode","CardCodeVerification","CardExpiry","CardName","CardNumber","CardNumberVerification","CardExpiryVerification","isHostedCardFieldOptionsMap","fields","isHostedStoredCardFieldOptionsMap","BlueSnapDirectCardType","BlueSnapDirectEventOrigin","BlueSnapDirectErrorDescription","BlueSnapDirectErrorCode","BlueSnapDirectHostedFieldTagId","BlueSnapDirectCreditCardPaymentStrategy","_scriptLoader","_paymentIntegrationService","_blueSnapDirectHostedForm","_blueSnapDirect3ds","options","methodId","gatewayId","creditCard","state","loadPaymentMethod","params","method","bigpayToken","config","testMode","is3dsEnabled","clientToken","getPaymentMethodOrThrow","load","_paymentFieldsToken","_shouldUseHostedFields","form","cardNumberVerification","attach","_getPaymentFieldsToken","execute","payload","payment","paymentData","pfToken","getState","bluesnapSubmitedForm","validate","submit","_getBlueSnapDirectThreeDSecureData","submitOrder","last4","brand","getCardInstrumentOrThrow","previouslyUsedCard","last4Digits","ccType","toUpperCase","submitPayment","nonce","deviceSessionId","formattedPayload","credit_card_token","JSON","stringify","cardHolderName","vault_payment_instrument","set_as_default_stored_instrument","finalize","deinitialize","detach","getBillingAddress","getShippingAddress","getCustomer","getCheckoutOrThrow","getCartOrThrow","billingAddress","shippingAddress","email","phone","amount","outstandingBalance","currency","billingFirstName","firstName","billingLastName","lastName","billingCountry","countryCode","billingCity","city","address1","address2","trim","billingZip","postalCode","shippingFirstName","shippingLastName","shippingCountry","shippingCity","shippingZip","PaymentInvalidFormError","details","AMEX","CHINA_UNION_PAY","DINERS","DISCOVER","JCB","MASTERCARD","UNKNOWN","VISA","ON_BLUR","ON_SUBMIT","EMPTY","INVALID","THREE_DS_NOT_ENABLED","CC_NOT_SUPORTED","ERROR_403","ERROR_404","ERROR_500","INVALID_OR_EMPTY","SESSION_EXPIRED","THREE_DS_AUTH_FAILED","THREE_DS_CLIENT_ERROR","THREE_DS_MISSING_FIELDS","TOKEN_EXPIRED","TOKEN_NOT_ASSOCIATED","TOKEN_NOT_FOUND","BlueSnapHostedFieldType","CREDIT_CARD_ERRORS","empty","fieldType","invalid","BlueSnapDirectHostedForm","_nameOnCardInput","_hostedInputValidator","initializeValidationFields","paymentFieldsToken","enable3DS","callbacksAndStyles","_onValidate","onValidate","_setCustomBlueSnapAttributes","_setCustomStoredCardsBlueSnapAttributes","_getHostedPaymentFieldsOptions","hostedPaymentFieldsCreate","cardName","accessibilityLabel","placeholder","results","isValid","entries","errors","reduce","result","map","threeDSecureData","shouldSendName","hostedPaymentFieldsSubmitData","data","_isBlueSnapDirectCallbackError","statusCode","error","errorDescription","getValue","onFocus","onBlur","onCardTypeChange","onEnter","styles","onFieldEventHandler","setupComplete","_usetUiEventCallback","onError","_handleError","onType","_tagId","cardType","onValid","tagId","ccnPlaceHolder","cardNumber","cvvPlaceHolder","cardCode","expPlaceHolder","cardExpiry","style","_mapStyles","default","input","focus","selector","declaration","declarationBlock","property","kebabCase","errorCode","eventOrigin","includes","callback","cardNumberContainer","document","getElementById","containerId","cardExpiryContainer","cardCodeContainer","cardNameContainer","dataset","bluesnap","cardCodeVerification","BlueSnapHostedInputValidator","_errors","_updateErrors","values","every","errorData","length","BluesnapDirectNameOnCardInput","_style","_create","_getInput","addEventListener","_handleFocus","_handleBlur","_handleEnter","setAttribute","querySelector","appendChild","_input","remove","_applyStyles","t","target","HTMLInputElement","test","allowedStyle","color","fontFamily","fontSize","fontWeight","styleKeys","keys","field","forEach","_configureInput","autocomplete","id","inputMode","maxLength","backgroundColor","border","height","margin","outline","padding","width","createElement","PaymentMethodClientUnavailableError","BlueSnapDirectSdkEnv","PRODUCTION","SANDBOX","BlueSnapDirectScriptLoader","_window","window","loadScript","paymentIntegrationService","getScriptLoader","gateway","BlueSnapDirectAPMPaymentStrategy","paymentPayload","_formatePaymentPayload","_isBlueSnapDirectRedirectResponse","providerData","body","provider_data","parse","frameUrl","additional_action_required","redirect_url","partialValue","merchantid","providerDataQuery","URLSearchParams","toString","location","replace","ecp","account_number","accountNumber","account_type","accountType","shopper_permission","shopperPermission","routing_number","routingNumber","companyName","company_name","sepa_direct_debit","iban","first_name","last_name","ideal","bic","pay_by_bank","response","partialResponse","partialBody","status","CancellablePromise","promise","cancellable","_","cancel","race","PaymentMethodCancelledError","PaymentStatusTypes","ACKNOWLEDGE","FINALIZE","INITIALIZE","BlueSnapV2PaymentStrategy","orderRequest","_initializeOptions","onLoad","frame","_createIframe","noop","initializeOffsitePayment","order","getOrder","getPaymentStatus","finalizeOrder","bluesnapv2","iframe","PayPalCommerceSdk","scriptLoader","getPayPalFastlaneSdk","paymentMethod","currencyCode","sessionId","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","loadPayPalSdk","getPayPalGooglePaySdk","initializesOnCheckoutPage","forceLoad","paypalGooglePay","paypalSdkScriptConfig","getPayPalGooglePaySdkScriptConfigOrThrow","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","attributes","scriptOptions","transformConfig","scriptAttributes","scriptSrc","async","initializationData","clientId","intent","merchantId","attributionId","commit","components","buyerCountry","isHostedCheckoutEnabled","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","enableAPMsFunding","disableAPMsFunding","filter","apm","transformedConfig","Array","isArray","DEFAULT_STYLES","size","ROTATION_ANIMATION","LoadingIndicator","containerStyles","defineAnimation","container","buildContainer","indicator","buildIndicator","show","parentId","parent","visibility","opacity","hide","handleTransitionEnd","removeEventListener","display","bottom","left","position","right","top","transition","setStyleAttribute","borderRadius","borderColor","transform","transformStyle","animation","element","attrs","k","setProperty","head","sheet","CSSStyleSheet","insertRule","BuyNowCartCreationError","DEFAULT_RESPONSE","headers","RequestError","CartSource","LiabilityShiftEnum","PayPalCommerceIntent","StyleButtonLabel","StyleButtonColor","StyleButtonShape","NonInstantAlternativePaymentMethods","PayPalOrderStatus","BuyNow","Possible","No","Unknown","Yes","AUTHORIZE","CAPTURE","paypal","checkout","buynow","pay","installment","gold","blue","silver","black","white","pill","rect","OXXO","Approved","Created","PayerActionRequired","PollingStop","PollingError","PayPalCommerceIntegrationService","formPoster","paypalCommerceRequestSender","paypalCommerceScriptLoader","providedCurrencyCode","paypalSdk","getPayPalSDK","getPayPalSdkOrThrow","createBuyNowCartOrThrow","buyNowInitializeOptions","cartRequestBody","getBuyNowCartRequestBody","createBuyNowCart","createOrder","providerId","requestBody","cartId","orderId","createOrderCardFields","setupToken","updateOrder","cart","consignment","getConsignmentsOrThrow","availableShippingOptions","selectedShippingOption","_error","getOrderStatus","tokenizePayment","postForm","payment_type","action","provider","order_id","source","cart_id","device_info","method_id","paypal_account","getShippingOptionOrThrow","selectedShippingOptionId","recommendedShippingOption","find","option","isRecommended","shippingOptionToSelect","getAddress","address","company","stateOrProvince","stateOrProvinceCode","customFields","getBillingAddressFromOrderDetails","payer","given_name","surname","email_address","address_line_1","address_line_2","admin_area_2","country_code","postal_code","admin_area_1","phone_number","national_number","getShippingAddressFromOrderDetails","orderDetails","purchase_units","full_name","shipping","split","getValidButtonStyle","label","shape","validStyles","getValidHeight","omitBy","isNil","removeElement","elementId","INTERNAL_USE_ONLY","ContentType","Json","JsonV1","SDK_VERSION_HEADERS","PayPalCommerceRequestSender","requestSender","url","post","put","PayPalCommerceScriptLoader","getPayPalSdkScriptConfigOrThrow","loadPayPalSDK","isVenmoEnabled","isPayPalCreditAvailable","isGooglePayEnabled","shouldEnableCard","enableCardFunding","enableCreditFunding","shouldEnableAPMs","enableVenmoFunding","googlePayComponent","cardFieldsComponent","disableFunding","enableFunding","getHost","createFormPoster","createRequestSender","host","LOADING_INDICATOR_STYLES","PaymentMethodInvalidError","messagesStyles","layout","logo","ratio","text","isBaseInstrument","PayPalCommercePaymentStrategy","paypalCommerceIntegrationService","paypalCommerceSdk","loadingIndicator","paypalcommerce","bannerContainerId","paypalBNPLConfiguration","console","bannerConfiguration","Messages","renderMessages","loadingIndicatorContainer","onInit","renderButton","shouldRenderPayPalButtonOnInitialization","isPayPalVaultedInstrumentPaymentData","prepareVaultedInstrumentPaymentPayload","preparePaymentPayload","redirectUrl","isProviderError","_resolve","paypalButton","close","handleError","paypalOrderId","shouldConfirmInstrument","isTrustedVaultingFlow","bigpay_token","paymentButtonStyles","checkoutPaymentButtonStyles","onRenderButton","submitForm","buttonOptions","isPaypalCommerceAppSwitchEnabled","appSwitchWhenAvailable","fundingSource","FUNDING","PAYPAL","onClick","actions","handleClick","onApprove","handleApprove","onCancel","toggleLoadingIndicator","Buttons","isEligible","hasReturned","resume","render","orderID","fieldsValues","getFieldsValues","instruments","getInstruments","findInstrument","trustedShippingAddress","isLoading","paypalMessagesOptions","placement","e","provider_error","isAppSwitchEnabled","createPayPalCommerceSdk","createScriptLoader","NotImplementedError","PayPalCommerceCreditPaymentStrategy","paypalcommercecredit","paypalOptions","fundingSources","PAYLATER","CREDIT","hasRenderedSmartButton","PayPalCommerceVenmoPaymentStrategy","paypalcommercevenmo","VENMO","TimeoutError","isExperimentEnabled","features","experimentName","fallbackValue","PayPalCommerceAlternativeMethodsPaymentStrategy","pollingInterval","maxPollingIntervalTime","pollingTimer","stopPolling","isPollingEnabled","paypalcommercealternativemethods","shouldRenderFields","getStoreConfigOrThrow","checkoutSettings","renderFields","initializePollingMechanism","isNonInstantPaymentMethod","resetPollingMechanism","resolvePromise","rejectPromise","timeout","setTimeout","clearTimeout","orderStatus","isOrderApproved","isPollingError","deinitializePollingMechanism","reinitializeStrategy","paypalAmpsSdk","getPaypalAmpsSdkOrThrow","buttonStyle","onInitButton","onCreateOrder","handleFailure","useStoreCredit","getBillingAddressOrThrow","apmFieldsContainer","apmFieldsStyles","fieldContainerElement","innerHTML","fieldsOptions","PaymentFields","UntrustedShippingCardVerificationType","TDSecureAuthenticationState","PayPalFastlaneAuthenticationState","CVV","PAN","CookieStorage","cookieKey","encodeURIComponent","cookie","firstIndex","indexOf","lastIndex","decodeURIComponent","substring","set","secure","cookieText","expires","path","domain","toUTCString","now","Date","minutes","setTime","getTime","Succeeded","Cancelled","Errored","SUCCEEDED","FAILED","CANCELED","UNRECOGNIZED","PayPalCommerceFastlaneUtils","initializePayPalFastlane","isTestModeEnabled","localStorage","setItem","paypalFastlane","defaultStyles","root","backgroundColorPrimary","Fastlane","getPayPalFastlaneOrThrow","lookupCustomerOrThrow","identity","lookupCustomerByEmail","triggerAuthenticationFlowOrThrow","customerContextId","triggerAuthenticationFlow","updateStorageSessionId","setDate","getDate","cookiesOption","removeStorageSessionId","getStorageSessionId","mapPayPalFastlaneProfileToBcCustomerData","authenticationResult","authenticationState","profileData","paypalBillingAddress","card","paymentSource","paypalShippingAddress","paypalProfileName","paypalInstrument","mapPayPalToBcAddress","phoneNumber","mapPayPalToBcInstrument","addresses","filterAddresses","expiry","lastDigits","expiryYear","expiryMonth","defaultInstrument","iin","untrustedShippingCardVerificationMode","mapBcToPayPalAddress","addressLine1","addressLine2","adminArea1","adminArea2","profileName","fullName","phoneData","nationalNumber","country","customerAddresses","currentAddress","some","customerAddress","isEqualAddresses","firstAddress","secondAddress","isEqual","normalizeAddress","omit","createPayPalCommerceFastlaneUtils","isCreditCardFormFields","isCreditCardVaultedFormFields","PayPalCommerceCreditCardsPaymentStrategy","paypalCommerceFastlaneUtils","paypalcommercecreditcards","paypalCommerceInitializationOptions","onCreditCardFieldsRenderingError","hostedFormOptions","isCreditCardForm","isCreditCardVaultedForm","hasUndefinedValues","undefined","initializeFields","shouldInitializePayPalFastlane","initializePayPalFastlaneOrThrow","executionPaymentData","validateHostedFormOrThrow","submitHostedForm","getInstrumentParams","returnedOrderId","submitPaymentPayload","returnedVaultedToken","cvvField","expiryField","numberField","nameField","verification_nonce","card_with_order","formOptions","executeCallback","getExecuteCallback","cardFieldsConfig","getInputStyles","vaultSetupToken","liabilityShift","inputEvents","onChange","event","onChangeHandler","onFocusHandler","onBlurHandler","onInputSubmitRequest","cardFields","CardFields","stylizeInputContainers","renderVaultedFields","createVaultSetupTokenCallback","createOrderCallback","createVaultSetupToken","getCardFieldsOrThrow","CVVField","ExpiryField","NameField","NumberField","cardExpiryVerification","getFieldTypeByEmittedField","emittedBy","mapFieldType","submitConfig","cardFieldsState","then","validationData","getValidityData","mapValidationErrors","updatedFields","cardNameField","fieldsKeys","fieldsErrors","getInvalidErrorByFieldType","validationErrors","commonStyles","boxShadow","background","marginBottom","marginLeft","paymentProviderCustomer","getPaymentProviderCustomer","paypalCommercePaymentProviderCustomer","customer","isAcceleratedCheckoutEnabled","isPayPalCommerceAnalyticsV2Enabled","connectClientToken","payPalFastlaneSdk","PaypalCommerceRatepayPaymentStrategy","paypalcommerceratepay","legalTextContainer","loadingContainerId","createFraudNetScript","loadFraudnetConfig","renderLegalText","metadataId","guid","ratepayBirthDate","ratepayPhoneNumber","ratepayPhoneCountryCode","rate_pay","birth_date","normalizeDate","fraudNetScript","querySelectorAll","fraudNetConfig","legalTextContainerElement","date","formattedDate","formatDate","formattedMonth","getMonth","getFullYear","legalTextContainerElementId","legalTextContainerId","buttonContainerId","buttonContainer","buttonContainerParent","parentNode","prepend","ratePayButton","Legal","PAY_UPON_INVOICE","scriptElement","generateGUID","f","s","sandbox","i","Math","floor","characters","random","script","src","useMetadata","isInvalidStyleOption","styleOption","getFastlaneStyles","styleSettings","uiStyles","fastlaneStyles","toggle","textBody","textCaption","caption","branding","fastlaneRootSettingsBackgroundColor","errorColor","fastlaneRootSettingsErrorColor","fastlaneRootSettingsFontFamily","fontSizeBase","fastlaneRootSettingsFontSize","fastlaneRootSettingsPadding","primaryColor","fastlaneRootSettingsPrimaryColor","fastlaneInputSettingsBorderRadius","fastlaneInputSettingsBorderColor","focusBorderColor","fastlaneInputSettingsFocusBorderBase","fastlaneInputSettingsBackgroundColor","borderWidth","fastlaneInputSettingsBorderWidth","u","textColorBase","fastlaneInputSettingsTextColorBase","colorPrimary","fastlaneToggleSettingsColorPrimary","colorSecondary","fastlaneToggleSettingsColorSecondary","fastlaneTextBodySettingsColor","fastlaneTextBodySettingsFontSize","fastlaneTextCaptionSettingsColor","fastlaneTextCaptionSettingsFontSize","fastlaneBrandingSettings","isPayPalFastlaneCustomer","PaypalCommerceFastlanePaymentStrategy","paypalcommercefastlane","isFastlaneStylingEnabled","threeDSVerificationMethod","shouldRunAuthenticationFlow","runPayPalAuthenticationFlowOrThrow","initializePayPalPaymentComponent","renderPayPalPaymentComponent","handlePayPalStoredInstrumentChange","isVaultedFlow","invalidRequestError","translationKey","getCustomerOrThrow","paypalFastlaneCustomer","paypalFastlaneSessionId","isGuest","customerEmail","updatePaymentProviderCustomer","cardComponentOptions","cardholderName","prefill","enabled","paypalComponentMethods","FastlaneCardComponent","getPayPalComponentMethodsOrThrow","is3DSEnabled","isPaypalCommerceFastlaneThreeDSAvailable","fastlaneToken","get3DSNonce","paypal_fastlane_token","getPaymentToken","paypalNonce","getOrderOrThrow","checkoutUrl","links","checkoutLink","threeDomainSecureComponent","ThreeDomainSecureClient","threeDomainSecureParameters","orderAmount","toFixed","threeDSRequested","transactionContext","experience_context","locale","return_url","cancel_url","paypalAxoSdk","selectionChanged","selectedCard","profile","showCardSelector","selectedInstrument","PayPalCommerceCustomerStrategy","getPaymentMethod","signIn","credentials","signInCustomer","signOut","signOutCustomer","executePaymentMethodCheckout","continueWithCheckoutCallback","onComplete","checkoutTopButtonStyles","defaultCallbacks","hostedCheckoutCallbacks","onShippingAddressChange","onShippingOptionsChange","onHostedCheckoutApprove","buttonRenderOptions","updateBillingAddress","lineItems","physicalItems","updateShippingAddress","shippingOption","selectShippingOption","PayPalCommerceCreditCustomerStrategy","paypalCommerceCredit","PayPalCommerceVenmoCustomerStrategy","paypalButtonRender","PayPalCommerceFastlaneCustomerStrategy","checkoutPaymentMethodExecuted","isAuthenticationFlowCanceled","updateCustomerDataState","updatedState","isFastlaneShippingOptionAutoSelectEnabled","consignments","getConsignments","firstShippingOption","shippingOptionId","PayPalCommerceButtonStrategy","isBuyNowFlow","loadDefaultCheckout","onEligibilityFailure","buyNowFlowCallbacks","buyNowCart","loadCheckout","PayPalCommerceCreditButtonStrategy","messagingContainerId","messagingContainer","removeAttribute","paypalMessagesSdk","PayPalCommerceVenmoButtonStrategy","getValidVenmoButtonStyles","validButtonStyle","PayPalCommerceAlternativeMethodsButtonStrategy","BigCommercePaymentsIntent","BigCommercePaymentsIntegrationService","bigCommercePaymentsRequestSender","bigCommercePaymentsScriptLoader","BigCommercePaymentsRequestSender","BigCommercePaymentsScriptLoader","disableCardFunding","disableCreditFunding","disableVenmoFunding","filterFundingOptions","fundingOptions","fundingTypesToBeFiltered","fundingOption","BigCommercePaymentsPaymentStrategy","bigCommercePaymentsIntegrationService","bigcommerce_payments","PayPalSdkHelper","createBigCommercePaymentsSdk","BigCommercePaymentsFastlaneUtils","createBigCommercePaymentsFastlaneUtils","BigCommercePaymentsFastlanePaymentStrategy","bigCommercePaymentsSdk","bigCommercePaymentsFastlaneUtils","bigcommerce_payments_fastlane","isBigcommercePaymentsFastlaneThreeDSAvailable","BigCommercePaymentsPayLaterPaymentStrategy","paypalSdkHelper","bigcommerce_payments_paylater","bigCommercePaymentsButtons","bigCommerceSdk","BigCommercePaymentsRatePayPaymentStrategy","bigcommerce_payments_ratepay","BigCommercePaymentsCreditCardsPaymentStrategy","bigcommerce_payments_creditcards","bigCommercePaymentsInitializationOptions","bigCommercePaymentsPaymentProviderCustomer","isBigCommercePaymentsAnalyticsV2Enabled","BigCommercePaymentsAlternativeMethodsPaymentStrategy","bigCommercePaymentsSdkHelper","bigcommerce_payments_apms","bigCommercePaymentsAlternativeMethods","bigCommercePaymentsButton","deInitializePollingMechanism","BigCommercePaymentsVenmoPaymentStrategy","bigcommerce_payments_venmo","BigCommercePaymentsCustomerStrategy","BigCommercePaymentsFastlaneCustomerStrategy","BigCommercePaymentsPayLaterCustomerStrategy","bigCommercePaymentsPayLater","BigCommercePaymentsVenmoCustomerStrategy","BigCommercePaymentsButtonStrategy","BigCommercePaymentsPayLaterButtonStrategy","payPalSdkHelper","BigCommercePaymentsAlternativeMethodsButtonStrategy","BigCommercePaymentsVenmoButtonStrategy","hasElementType","Element","hasMap","Map","hasSet","Set","hasArrayBuffer","ArrayBuffer","isView","equal","a","b","it","next","done","has","RegExp","flags","valueOf","$$typeof","match","warn","getShippableItemsCount","item","addedByPromotion","total","quantity","amazonPayV2Regions","de","jp","uk","us","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","AmazonPayV2ButtonDesign","en_US","en_GB","de_DE","fr_FR","it_IT","es_ES","ja_JP","Home","Product","Cart","Checkout","Other","USD","EUR","GBP","JPY","PayAndShip","PayOnly","Gold","LightGray","DarkGray","C0001","AmazonPayV2PaymentProcessor","amazonPayV2ScriptLoader","amazonPayV2SDK","buttonParentContainer","createAmazonPayButtonParentContainer","amazonPayV2Button","bindButton","buttonId","changeAction","getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","prepareCheckout","createCheckoutSessionConfig","requestConfig","prepareRequestConfig","getAmazonPayV2Button","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutConfig","estimatedOrderAmount","productType","signout","renderAmazonPayButton","buttonColor","checkoutState","decoupleCheckoutInitiation","isButtonMicroTextDisabled","parentContainerId","getButtonParentContainer","design","amazonPayV2ButtonOptions","getAmazonPayV2ButtonOptions","updateBuyNowFlowFlag","isPh4Enabled","storeCountryCode","isPh4UsOnly","publicKeyId","signedPayload","isEnvironmentSpecific","uid","substr","parentContainer","getCart","getCheckout","getCheckoutState","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","buttonBaseConfig","storeProfile","shopPath","tmpConfig","createCheckoutSession","getOrThrow","checkoutSelectors","paymentMethods","AmazonPayV2ScriptLoader","windowWithAmazonPay","region","amazonPayV2Region","amazon","createAmazonPayV2PaymentProcessor","AmazonPayV2PaymentStrategy","amazonPayV2PaymentProcessor","amazonpay","paymentToken","_isReadyToPay","editButtonId","_bindEditButton","_isModalFlow","_createContainer","_amazonPayButton","_isOneTimeTransaction","errorBody","additionalAction","_getAmazonPayButton","click","isModalFlow","button","clone","cloneNode","replaceChild","_showLoadingSpinner","widgetInteraction","AmazonPayV2CustomerStrategy","_e","getPaymentId","remoteCheckoutSignOut","AmazonPayV2ConfigCreationError","isWithBuyNowFeatures","AmazonPayV2ButtonStrategy","amazonPayV2ConfigRequestSender","initializeAmazonButtonOptions","_buyNowInitializeOptions","_getCheckoutCreationRequestConfig","bind","_createBuyNowCartOrThrow","buyNowCartRequestBody","_createCheckoutConfig","public_key","rest","payloadJSON","String","baseAmount","AmazonPayV2RequestSender","_requestSender","amazonPayV2RequestSender","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","Sandbox","Production","Client","DataCollector","GooglePayment","HostedFields","LocalPayment","Paypal","PaypalCheckout","ThreeDSecure","UsBankAccount","Venmo","VisaCheckout","BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","BRAINTREE_SDK_SCRIPTS_INTEGRITY","TotalPriceStatusType","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","BraintreeScriptLoader","braintreeHostWindow","braintreeSDKVersionManager","loadClient","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadLocalPayment","loadDataCollector","loadUsBankAccount","loadGooglePayment","load3DS","loadVisaCheckout","loadVenmoCheckout","loadHostedFields","loadVisaCheckoutSdk","V","hash","integrity","crossorigin","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","getSDKVersion","scriptPath","getIntegrityValuesByModuleName","braintree","moduleName","version","UnsupportedBrowserError","isBraintreeError","ESTIMATED","FINAL","NOT_CURRENTLY_KNOWN","Completed","Pending","Failed","TRUSTLY","Customer","Merchant","Network","Internal","KountNotEnabled","Visa","Mastercard","AmericanExpress","DinersClub","Discover","Jcb","UnionPay","Maestro","Elo","Mir","Hiper","Hipercard","BraintreeSdk","braintreeScriptLoader","setClientToken","teardownModule","dataCollector","getClient","client","getClientTokenOrThrow","clientCreator","create","authorization","getDataCollectorOrThrow","emptyDataCollector","deviceData","teardown","dataCollectorConfig","kount","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","all","getBraintreeThreeDS","threeDS","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","localPaymentCreator","getUsBankAccount","usBankAccount","getBraintreeVisaCheckout","visaCheckout","getVisaCheckoutSdk","visaCheckoutSDK","getVenmoCheckoutOrThrow","braintreeVenmo","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","BraintreeSDKVersionManager","braintreeWindow","storeConfig","getStoreConfig","getPreloadedSDKVersion","preloadedVersion","VERSION","isUsBankAccountInstrumentLike","BraintreeAchPaymentStrategy","braintreeSdk","braintreeach","getMandateText","handleBraintreeError","isSubmittingWithVaultingInstrument","tokenizePaymentForVaultedInstrument","preparePaymentDataForVaultedInstrument","preparePaymentData","getUsBankAccountOrThrow","mandateText","tokenize","bankDetails","getBankDetails","isVaultingEnabled","tokenized_bank_account","issuer","masked_account_number","ownershipType","toLowerCase","businessName","streetAddress","extendedAddress","locality","PAYPAL_COMPONENTS","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","MessagingPlacements","HORIZONTAL","VERTICAL","SMALL","MEDIUM","LARGE","RESPONSIVE","GOLD","BLUE","SIlVER","BLACK","WHITE","CHECKOUT","PAY","BUYNOW","PILL","RECT","CART","HOME","PAYMENT","PRODUCT","BraintreeIntegrationService","overlay","dataCollectors","threeDSecureOptions","getBraintreeFastlane","cardId","braintreeFastlane","getSessionId","braintreeFastlaneCreator","getPaypal","braintreePaypal","newWindowFlow","supportsPopups","focusWindow","enableShippingAddress","flow","useraction","catch","getPaypalCheckout","onSuccess","paypalCheckout","paypalCheckoutConfig","braintreePaypalCheckout","paypalSdkLoadConfig","isCreditEnabled","getDataCollector","cacheKey","cached","getBraintreeEnv","isTestMode","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","mapToLegacyShippingAddress","mapToLegacyBillingAddress","riskCorrelationId","get3DS","getVenmoCheckout","venmoConfig","verifyCard","tokenizationPayload","tokenizeCard","challenge3DSVerification","creditCardInstrument","ccExpiry","ccNumber","ccName","getErrorsRequiredFields","isEmpty","requestData","mapToCreditCard","creditCards","request","bin","present3DSChallenge","number","cvv","ccCvv","expirationDate","month","year","countryCodeAlpha2","countryName","endpoint","addFrame","removeFrame","challengeRequested","additionalInformation","cancelVerifyCard","verification","roundedAmount","Number","onLookupComplete","_data","collectDeviceData","BraintreeMessages","bannedId","cartAmount","getPaypalMessagesStylesFromBNPLConfig","Overlay","closeElement","mainElement","_createElements","_element","_closeElement","_mainElement","parentElement","_registerClick","_unregisterClick","_removeAfterTransition","transitionDuration","hasCloseButton","innerHtml","classLayout","classClose","classOverlayText","overlayText","className","addClassLayout","innerText","_addEventListener","_removeEventListener","onClickClose","handleTransition","propertyName","BraintreePaypalPaymentStrategy","braintreeIntegrationService","braintreeMessages","braintreeOptions","loadPaypalCheckoutInstance","braintreeTokenizePayload","grandTotal","getOutstandingBalance","storeLanguage","shippingAddressOverride","offerCredit","shippingAddressEditable","vaultPaymentInstrument","paymentMethodId","shouldShowPayPalCreditBanner","renderPayPalMessages","renderPayPalButton","onPaymentError","env","setupPayment","authorizeData","tokenizePaymentOrThrow","createPayment","BraintreeRequestSender","BraintreeLocalMethodsPaymentStrategy","braintreeRequestSender","isLPMsUpdateExperimentEnabled","braintreelocalmethods","executeWithNotInstantLPM","executeWithInstantLPM","basicPaymentData","getLPMsBasicPaymentData","isBraintreeRedirectError","startPayment","getInstantLPMConfig","getInstantLPMCallback","billing","isShippingRequired","paymentType","fallback","buttonText","shippingAddressRequired","givenName","onPaymentStart","start","paymentId","isBraintreeOrderSavedResponse","order_id_saved_successfully","startPaymentError","payloadData","isOrderPending","isBraintreeAcceleratedCheckoutCustomer","BraintreeFastlanePaymentStrategy","braintreeFastlaneUtils","braintreefastlane","isThreeDSExperimentEnabled","initializeBraintreeFastlaneOrThrow","initializeCardComponent","renderBraintreeCardComponent","handleBraintreeStoredInstrumentChange","removeSessionIdFromCookies","braintreeCardComponent","paypalPaymentComponent","getBraintreeFastlaneComponentOrThrow","getBraintreeCardComponentOrThrow","getPayPalInstruments","getDeviceSessionId","threeDSToken","mapToPayPalAddress","binGuest","binDetails","on","verifyError","braintreePaymentProviderCustomer","getSessionIdFromCookies","getPaymentProviderCustomerOrThrow","getBraintreeFastlaneOrThrow","braintreeFastlaneCustomer","selectedInstruments","BraintreeFastlaneUtils","shouldSetShippingOption","getMethodIdOrThrow","saveSessionIdToCookies","shippingAddresses","getPayPalBillingAddresses","billingAddresses","mergeShippingAndBillingAddresses","digitalItems","digitalItemBilling","setShippingOption","phones","countries","getCountries","getCountryNameByCountryCode","matchedCountry","filteredBillingAddresses","selectedOption","BraintreeVisaCheckoutPaymentStrategy","braintreevisacheckout","visaCheckoutOptions","onPaymentSelect","braintreeVisaCheckout","visaCheckoutSdk","initOptions","createInitOptions","settings","collectShipping","paymentRequest","subtotal","init","paymentSuccessPayload","mapToVisaCheckoutAddress","userData","cardInformation","userEmail","device_data","card_information","lastTwo","billing_address","shipping_address","hostWindow","BraintreeVenmoPaymentStrategy","venmoOptions","braintreevenmo","initializeBraintreeVenmo","isBraintreeVenmoWebFallbackSupport","mobileWebFallBack","tokenizeResult","braintreeVenmoTokenize","BraintreeCreditCardPaymentStrategy","braintreeHostedForm","isHostedPaymentFormEnabled","unsupportedCardBrands","isHostedFormInitialized","isInitialized","shouldInitializeBraintreeFastlane","prepareHostedPaymentData","processAdditionalAction","commonPaymentData","isSubmittingWithStoredCard","shouldPerform3DSVerification","tokenizeForStoredCardVerification","verifyCardWithHostedForm","payer_auth_request","storedCreditCardNonce","three_ds_result","isHostedFormEnabled","braintreeCustomer","isBraintreeFormFieldsMap","isBraintreeHostedFormError","invalidFieldKeys","BraintreeHostedFormType","CreditCard","StoredCardVerification","BraintreeHostedForm","isInitializedHostedForm","handleBlur","mapErrors","handleFocus","handleCardTypeChange","cards","handleInputSubmitRequest","handleValidityChange","isValidForm","mapFieldOptions","createHostedFields","mapStyleOptions","mapBillingAddress","mapTokenizeError","hostedFields","hostedFieldsOptions","preventCursorJumps","supportedCardBrands","cardBrand","internalLabel","mapStyles","isValidParam","isPotentiallyValid","fieldKey","createInvalidError","isStoredCard","createRequiredError","formFields","BraintreePaypalCustomerStrategy","braintreepaypal","paypalCheckoutOptions","buttonStyles","tokenizePayload","onErrorCallback","BraintreePaypalCreditCustomerStrategy","braintreepaypalcredit","BraintreeFastlaneCustomerStrategy","getValidPaymentMethodOrThrow","paypalFastlaneStylesSettings","primaryMethodId","shouldRunAcceleratedCheckout","validPaymentMethodId","BraintreeVisaCheckoutCustomerStrategy","buttonClassName","visaCheckoutInstance","signInButton","createSignInButton","buttonClass","insertVisaCheckoutButton","visaCheckoutButton","flexDirection","fundingicons","tagline","currentHeight","isNaN","BraintreePaypalButtonStrategy","shouldProcessPayment","onAuthorizeError","buyNowCartId","buyNowCardRequestBody","BraintreePaypalCreditButtonStrategy","isBannerImplementationDisabled","BraintreeVisaCheckoutButtonStrategy","paymentSuccess","toVisaCheckoutAddress","alignItems","getVenmoButtonStyle","c","backgroundPosition","backgroundSize","backgroundImage","backgroundRepeat","cursor","minHeight","minWidth","BraintreeVenmoButtonStrategy","cartButtonStyles","renderVenmoButton","handleInitializationVenmoError","removeVenmoContainer","venmoButton","buyBowCart","handlePostForm","Reference","_ref","children","innerRef","setReferenceNode","refHandler","node","ref","idCounter","cbToCb","cb","scrollIntoView","menuNode","boundary","block","scrollMode","el","scrollTop","scrollLeft","isOrContainsNode","child","environment","Node","contains","debounce","fn","time","timeoutId","wrapper","_len","arguments","args","_key","apply","callAllEventHandlers","_len2","fns","_key2","_len3","_key3","concat","preventDownshiftDefault","nativeEvent","handleRefs","_len4","refs","_key4","current","generateId","getA11yStatusMessage$1","_ref2","isOpen","resultCount","previousResultCount","unwrapArray","arg","defaultValue","isDOMElement","getElementProps","props","stateKeys","pickState","prevState","isControlledProp","normalizeArrowKey","keyCode","getNextWrappingIndex","moveAmount","baseIndex","itemCount","getItemNodeFromIndex","circular","itemsLastIndex","newIndex","nonDisabledNewIndex","getNextNonDisabledIndex","currentElementNode","hasAttribute","index","_index","targetWithinDownshift","downshiftElements","checkActiveElement","contextNode","activeElement","cleanupStatus","documentProp","getStatusDiv","textContent","setStatus","div","statusDiv","clip","overflow","stateChangeTypes$3","freeze","unknown","mouseUp","itemMouseEnter","keyDownArrowUp","keyDownArrowDown","keyDownEscape","keyDownEnter","keyDownHome","keyDownEnd","clickItem","blurInput","changeInput","keyDownSpaceButton","clickButton","blurButton","controlledPropUpdatedSelectedItem","touchEnd","_excluded$4","_excluded2$3","_excluded3$2","_excluded4$1","_excluded5","Downshift","_Component","_props","_this","menuId","labelId","inputId","getItemId","items","timeoutIds","internalSetTimeout","push","setItemCount","count","unsetItemCount","setHighlightedIndex","highlightedIndex","otherStateToSet","defaultHighlightedIndex","internalSetState","clearSelection","selectedItem","inputValue","defaultIsOpen","selectItem","itemToString","selectItemAtIndex","itemIndex","selectHighlightedItem","stateToSet","isItemSelected","onChangeArg","onStateChangeArg","isStateToSetFunction","onInputValueChange","getStateAndHelpers","setState","newStateToSet","stateReducer","nextState","onStateChange","onSelect","onUserAction","rootRef","_rootNode","getRootProps","_temp","_temp2","_extends2","_ref$refKey","refKey","_ref2$suppressRefErro","suppressRefError","called","role","keyDownHandlers","ArrowDown","_this2","preventDefault","shiftKey","moveHighlightedIndex","getItemCount","nextHighlightedIndex","ArrowUp","_this3","Enter","which","_this$getState2","itemNode","Escape","reset","buttonKeyDownHandlers","toggleMenu","inputKeyDownHandlers","_this4","newHighlightedIndex","End","_this5","getToggleButtonProps","_temp3","_ref3","onPress","onKeyDown","onKeyUp","enabledEventHandlers","buttonHandleClick","buttonHandleKeyDown","buttonHandleKeyUp","buttonHandleBlur","eventHandlers","disabled","blurTarget","isMouseDown","getLabelProps","htmlFor","getInputProps","_temp4","_ref4","onInput","onChangeText","_eventHandlers","_this$getState6","inputHandleChange","inputHandleKeyDown","inputHandleBlur","autoComplete","downshiftButtonIsActive","menuRef","_menuNode","getMenuProps","_temp5","_temp6","_extends3","_ref5","_ref5$refKey","_ref6$suppressRefErro","getItemProps","_temp7","_enabledEventHandlers","_ref7","onMouseMove","onMouseDown","_ref7$item","customClickHandler","avoidScrolling","clearItems","_ref8","_ref9","_this$getState7","openMenu","closeMenu","updateStatus","getA11yStatusMessage","highlightedItem","_this$props","_this$props$initialHi","initialHighlightedIndex","_highlightedIndex","_this$props$initialIs","initialIsOpen","_isOpen","_this$props$initialIn","initialInputValue","_inputValue","_this$props$initialSe","initialSelectedItem","_selectedItem","_state","_proto","internalClearTimeouts","stateToMerge","scrollHighlightedItemIntoView","_this6","_this$getState9","componentDidMount","_this7","onMouseUp","onOuterClick","onTouchStart","isTouchMove","onTouchMove","onTouchEnd","contextWithinDownshift","cleanup","shouldScroll","prevProps","currentHighlightedIndex","prevHighlightedIndex","componentDidUpdate","selectedItemChanged","componentWillUnmount","cloneElement","Component","defaultProps","prevItem","stateChangeTypes","Downshift$1","getA11yMessage","useLayoutEffect","useEffect","defaultProps$3","changes","getA11ySelectionMessage","selectionParameters","itemToStringLocal","isRequired","__assign","_a","safeInvoke","setRef","fromEntries","acc","useIsomorphicLayoutEffect","g","h","l","m","n","p","q","r","v","w","Symbol","for","x","y","CreditCardPaymentStrategy","_isHostedPaymentFormEnabled","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","_isHostedFieldAvailable","paymentSettings","bigpayBaseUrl","createHostedForm","_hostedForm","isIndividualCardElementOptions","individualCardElementOptions","cardNumberElementOptions","cardCvcElementOptions","cardExpiryElementOptions","IconStyle","StripeElementType","StripePaymentMethodType","StripeV3ErrorType","Solid","Default","Alipay","CardCvc","IDEAL","Sepa","AuthFailure","StripeV3Error","APM_REDIRECT","StripeV3PaymentStrategy","stripev3","initializeOptions","isDeinitialize","stripePublishableKey","stripeConnectedAccount","useIndividualCardFields","allowRedisplayForStoredInstruments","_allowRedisplayForStoredInstruments","getInitializeOptions","stripeV3Client","loadStripeJs","isCreditCard","shouldShowTSVHostedForm","hostedForm","mountCardVerificationFields","stripeElement","mountCardFields","stripeError","shouldSubmitOrderBeforeLoadingAPM","isStoreCreditApplied","applyStoreCredit","executeWithVaulted","confirmStripePayment","paymentIntent","confirm","client_token","buildPaymentPayload","handleEmptyPaymentIntentError","unmountElement","isCancellationError","payment_intent","last_payment_error","isAuthError","isHostedFieldAvailable","definedFields","clientSecret","returnUrl","getStripeJs","confirmAlipayPayment","handleActions","mapStripePaymentData","confirmIdealPayment","confirmSepaDebitPayment","getStripeCardElements","getStripeElement","billingDetails","mapStripeBillingDetails","shouldAllowRedisplay","createPaymentMethod","billing_details","allow_redisplay","loadCurrentOrder","stripeCardElements","getLocale","mapStripeAddress","zipCodeElementOptions","stripePaymentMethodType","payment_method","stripeElements","elements","cardNumberElement","getElement","cardExpiryElement","cardCvcElement","mount","isAdditionalActionError","isThreeDSecureRequiredError","needsConfirm","catchedConfirmError","confirmCardPayment","unmount","StripeV3ScriptLoader","stripeWindow","stripeAccount","Stripe","betas","apiVersion","StripeFormMode","StripeDisplayName","StripeStringConstants","StripePaymentIntentStatus","StripeElementEvent","StripeInstrumentSetupFutureUsage","StripeScriptLoader","getStripeClient","bcStripeClient","stripe","stripeClient","getElements","bcStripeElements","updateStripeElements","update","fetchUpdates","SHIPPING","BILLING","SPLIT","FULL","ORGANIZATION","Link","EPS","GRABPAY","BANCONTACT","ALIPAY","KLARNA","OCS","NEVER","AUTO","ALWAYS","IF_REQUIRED","AUTHENTICATION","EXPRESS_CHECKOUT","REQUIRES_PAYMENT_METHOD","REQUIRES_CONFIRMATION","REQUIRES_ACTION","PROCESSING","CLICK","CHANGE","READY","SHIPPING_ADDRESS_CHANGE","SHIPPING_RATE_CHANGE","CONFIRM","CANCEL","LOADER_START","ON_SESSION","OFF_SESSION","StripeIntegrationService","isMounted","checkoutEventsUnsubscribe","initCheckoutEventsSubscription","stripeInitializationOptions","subscribe","paymentElement","updateStripePaymentIntent","mountElement","coupons","mapAppearanceVariables","fieldInnerShadow","colorBackground","fieldBackground","colorText","labelText","colorDanger","fieldErrorText","colorTextSecondary","colorTextPlaceholder","fieldPlaceholderText","colorIcon","mapInputAppearanceRules","fieldBorder","fieldText","throwStripeError","throwDisplayableStripeError","errorMessage","throwPaymentConfirmationProceedMessage","isPaymentCompleted","stripeUPEClient","retrievePaymentIntent","_mapStripeAddress","redirect","confirmParams","payment_method_data","isRedirectAction","isOnPageAdditionalAction","isStripePaymentMethodLike","shopperLanguage","supportedLocales","ar","bg","cs","da","en","es","et","fi","fil","fr","he","hr","hu","ja","ko","lt","lv","ms","mt","nb","nl","pl","pt","ro","ru","sk","sl","sv","th","tr","vi","zh","formatLocale","localeLanguage","language","countryLocales","formattedLocale","STRIPE_UPE_CLIENT_BETAS","STRIPE_UPE_CLIENT_API_VERSION","isStripeAcceleratedCheckoutCustomer","StripeUPEPaymentStrategy","stripeIntegrationService","stripeupe","_loadStripeElement","_stripeElements","_stripeUPEClient","stripeLinkAuthenticationState","_executeWithVaulted","_executeWithStripeConfirmation","_getPaymentPayload","_processAdditionalActionWithStripeConfirmation","_processVaultedAdditionalAction","initStripeElementUpdateTrigger","appearance","_loadStripeJs","_isStripeElementUpdateEnabled","variables","rules","wallets","applePay","googlePay","_getStripeElementTerms","_updateStripeLinkStateByElementType","_updateStripeElement","additionalActionData","_confirmStripePaymentOrThrow","stripePaymentData","confirmationResult","confirmPayment","shouldShowTerms","terms","paymentElementType","isStripeLinkElementType","stripeScriptLoader","StripeOCSPaymentStrategy","stripeocs","_initializeStripeElement","_processAdditionalAction","destroy","customerSessionToken","enableLink","fonts","paymentMethodSelect","handleClosePaymentMethod","togglePreloader","customerSessionClientSecret","link","savePaymentMethod","maxVisiblePaymentMethods","defaultValues","_onStripeElementChange","_collapseStripeElement","collapse","paymentMethodOptions","us_bank_account","_shouldSaveInstrument","tokenizedOptions","_getTokenizedOptions","selectedMethodId","client_secret","paymentIntentClientSecret","payment_method_options","collapsed","setupFutureUsage","setup_future_usage","tokenized_ach","StripeUPECustomerStrategy","onEmailChange","getStyles","billingEmail","mode","linkAuthenticationElement","authenticated","complete","deleteConsignment","DEFAULT_CONTAINER_STYLES","AmountTransformer","_decimalPlaces","toInteger","round","expressCheckoutAllowedCountryCodes","StripeLinkV2CustomerStrategy","buttonHeight","_loadingIndicatorContainer","_onComplete","captureMethod","_captureMethod","_stripeClient","_mountExpressCheckoutElement","stripeExpressCheckoutClient","shouldRequireShippingAddress","_shouldRequireShippingAddress","expressCheckoutOptions","allowedShippingCountries","_getAvailableCountries","shippingRates","displayName","billingAddressRequired","emailRequired","phoneNumberRequired","amazonPay","klarna","elementsOptions","_toCents","_getCurrency","_linkV2Element","_initializeEvents","expressCheckoutElement","_onShippingAddressChange","_onShippingRateChange","_onConfirm","_onCancel","_getAvailableShippingOptions","_updateDisplayedPrice","shippingRate","_handleShippingOptionChange","_updateShippingAndBillingAddress","_mapShippingAddress","_mapBillingAddress","_toggleLoadingIndicator","_completeCheckoutFlow","payment_method_id","_getTotalPrice","_currencyCode","decimalPlaces","totalPrice","loadShippingCountries","getShippingCountries","_getStripeShippingOption","selectedId","sort","cost","description","optionId","_getAmountTransformer","_amountTransformer","amountTransformer","ApplePayGatewayType","BRAINTREE","BRAINTREE_FASTLANE","DefaultLabels","Shipping","Subtotal","StoreCredit","ApplePayPaymentStrategy","_sessionFactory","_braintreeSdk","_applePayScriptLoader","_shippingLabel","_subTotalLabel","_storeCreditLabel","loadSdk","applepay","shippingLabel","subtotalLabel","storeCreditLabel","_initializeBraintreeSdk","_getBaseRequest","applePaySession","begin","_handleApplePayEvents","storeName","merchantCapabilities","supportedNetworks","taxes","tax","shippingCostTotal","storeCredit","min","onvalidatemerchant","merchantSession","_onValidateMerchant","completeMerchantValidation","err","oncancel","onpaymentauthorized","_onPaymentAuthorized","validationURL","hostname","paymentsUrl","Accept","_getBraintreeDeviceData","apple_pay_token","payment_data","transaction_id","transactionIdentifier","completePayment","ApplePaySession","STATUS_SUCCESS","STATUS_FAILURE","braintreePaymentMethod","assertApplePayWindow","ApplePaySessionFactory","ApplePayScriptLoader","sdkVersion","ScriptLoader","ApplePayCustomerStrategy","_onAuthorizeCallback","_onError","_onClick","_hasApplePaySession","onPaymentAuthorize","_paymentMethod","verifyCheckoutSpamProtection","_applePayButton","_createButton","_handleWalletButtonClick","applePayButton","_createApplePayButtonElement","requiresShipping","requiredBillingContactFields","requiredShippingContactFields","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","_transformContactToAddress","shippingContact","abort","selectionShippingOptionId","availableOptions","unselectedOptions","shippingOptions","detail","additionalDescription","identifier","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","selectedOptionId","_updateShippingOption","newShippingMethods","newTotal","newLineItems","_getUpdatedLineItems","shippingMethod","completeShippingMethodSelection","billingContact","transformedBillingAddress","transformedShippingAddress","emailAddress","contact","familyName","addressLines","administrativeArea","ButtonStyleOption","Black","White","WhiteBorder","ApplePayButtonStrategy","_requiresShipping","_getRequestWithEmptyTotal","onpaymentmethodselected","_createBuyNowCart","_handlePaymentMethodSelected","shouldExecuteSpamCheck","completePaymentMethodSelection","getWindow","ownerDocument","defaultView","isElement","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","max","getUAString","uaData","navigator","userAgentData","brands","userAgent","isLayoutViewport","getBoundingClientRect","includeScale","isFixedStrategy","clientRect","scaleX","scaleY","offsetWidth","offsetHeight","visualViewport","addVisualOffsets","offsetLeft","offsetTop","getWindowScroll","win","pageXOffset","pageYOffset","getNodeName","nodeName","getDocumentElement","documentElement","getWindowScrollBarX","getComputedStyle","isScrollParent","_getComputedStyle","overflowX","overflowY","getCompositeRect","elementOrVirtualElement","offsetParent","isFixed","isOffsetParentAnElement","offsetParentIsScaled","isElementScaled","scroll","offsets","clientLeft","clientTop","getLayoutRect","abs","getParentNode","assignedSlot","getScrollParent","listScrollParents","list","_element$ownerDocumen","scrollParent","isBody","updatedList","isTableElement","getTrueOffsetParent","getOffsetParent","isFirefox","currentNode","css","perspective","contain","willChange","getContainingBlock","auto","basePlacements","end","viewport","popper","variationPlacements","modifierPhases","modifiers","visited","modifier","add","requires","requiresIfExists","dep","depModifier","DEFAULT_OPTIONS","strategy","areValidElements","popperGenerator","generatorOptions","_generatorOptions","_generatorOptions$def","defaultModifiers","_generatorOptions$def2","defaultOptions","reference","pending","orderedModifiers","modifiersData","effectCleanupFns","isDestroyed","instance","setOptions","setOptionsAction","cleanupModifierEffects","scrollParents","contextElement","merged","phase","orderModifiers","existing","_ref$options","effect","cleanupFn","noopFn","forceUpdate","_state$elements","rects","_state$orderedModifie","_state$orderedModifie2","_options","onFirstUpdate","passive","getBasePlacement","getVariation","getMainAxisFromPlacement","computeOffsets","basePlacement","variation","commonX","commonY","mainAxis","len","unsetSides","mapToStyles","_Object$assign2","popperRect","gpuAcceleration","adaptive","roundOffsets","_offsets$x","_offsets$y","hasX","hasY","sideX","sideY","heightProp","widthProp","_Object$assign","dpr","devicePixelRatio","roundOffsetsByDPR","_options$offset","offset","invertDistance","skidding","distance","distanceAndSkiddingToXY","_data$state$placement","popperOffsets","getOppositePlacement","matched","getOppositeVariationPlacement","rootNode","getRootNode","isSameNode","rectToClientRect","getClientRectFromMixedType","clippingParent","html","clientWidth","clientHeight","layoutViewport","getViewportRect","getInnerBoundingClientRect","winScroll","scrollWidth","scrollHeight","direction","getDocumentRect","getClippingRect","rootBoundary","mainClippingParents","clippingParents","clipperElement","getClippingParents","firstClippingParent","clippingRect","accRect","mergePaddingObject","paddingObject","expandToHashMap","hashMap","detectOverflow","_options$placement","_options$strategy","_options$boundary","_options$rootBoundary","_options$elementConte","elementContext","_options$altBoundary","altBoundary","_options$padding","altContext","clippingClientRect","referenceClientRect","popperClientRect","elementClientRect","overflowOffsets","offsetData","multiply","axis","within","_options$mainAxis","checkMainAxis","_options$altAxis","altAxis","checkAltAxis","_options$tether","tether","_options$tetherOffset","tetherOffset","isBasePlacement","referenceRect","tetherOffsetValue","normalizedTetherOffsetValue","offsetModifierState","_offsetModifierState$","mainSide","altSide","additive","minLen","maxLen","arrowElement","arrow","arrowRect","arrowPaddingObject","arrowPaddingMin","arrowPaddingMax","arrowLen","minOffset","maxOffset","arrowOffsetParent","clientOffset","offsetModifierValue","tetherMax","preventedOffset","_offsetModifierState$2","_mainSide","_altSide","_offset","_min","_max","isOriginSide","_offsetModifierValue","_tetherMin","_tetherMax","_preventedOffset","withinMaxClamp","_state$modifiersData$","toPaddingObject","minProp","maxProp","endDiff","startDiff","clientSize","centerToReference","center","axisProp","centerOffset","_options$element","getSideOffsets","preventedOffsets","isAnySideFullyClipped","side","_options$scroll","_options$resize","resize","_options$gpuAccelerat","_options$adaptive","_options$roundOffsets","initialStyles","attribute","_skip","specifiedFallbackPlacements","fallbackPlacements","_options$flipVariatio","flipVariations","allowedAutoPlacements","preferredPlacement","oppositePlacement","getExpandedFallbackPlacements","placements","_options$allowedAutoP","allowedPlacements","overflows","computeAutoPlacement","checksMap","makeFallbackChecks","firstFittingPlacement","_basePlacement","isStartVariation","isVertical","mainVariationSide","altVariationSide","checks","check","_loop","_i","fittingPlacement","slice","preventOverflow","referenceOverflow","popperAltOverflow","referenceClippingOffsets","popperEscapeOffsets","isReferenceHidden","hasPopperEscaped","EMPTY_MODIFIERS","usePopper","referenceElement","popperElement","prevOptions","optionsWithDefaults","_React$useState","updateStateModifier","popperOptions","newOptions","popperInstanceRef","popperInstance","createPopper","NOOP","NOOP_PROMISE","Popper","_ref$placement","_ref$strategy","_ref$modifiers","referenceNode","Manager","setPopperElement","_React$useState2","setArrowElement","_usePopper","childrenProps","arrowProps","ManagerReferenceNodeContext","ManagerReferenceNodeSetterContext","hasUnmounted","handleSetReferenceNode","Provider","LegacyPaymentStrategy"],"sourceRoot":""}