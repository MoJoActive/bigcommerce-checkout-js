{"version":3,"file":"payment-237fc5a4.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalLink.tsx","webpack://checkout/./packages/core/src/app/ui/text/MultiLineText.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditionsField.tsx","webpack://checkout/./packages/core/src/app/payment/mapSubmitOrderErrorMessage.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getUniquePaymentMethodId.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardFieldsetValues.ts","webpack://checkout/./packages/core/src/app/payment/mapToOrderRequestBody.ts","webpack://checkout/./packages/core/src/app/payment/PaymentContext.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditions.tsx","webpack://checkout/./packages/core/src/app/payment/getPaymentValidationSchema.ts","webpack://checkout/./packages/core/src/app/termsConditions/getTermsConditionsValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodType.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodName.ts","webpack://checkout/./packages/core/src/app/ui/form/CustomChecklistItem.tsx","webpack://checkout/./packages/bigcommerce-payments-utils/src/BigCommercePaymentsPayLaterBanner.tsx","webpack://checkout/./packages/paypal-utils/src/BraintreePaypalCreditBanner.tsx","webpack://checkout/./packages/paypal-utils/src/PaypalCommerceCreditBanner.tsx","webpack://checkout/./packages/ui/src/icon/mapFromPaymentMethodCardType.ts","webpack://checkout/./packages/ui/src/icon/CreditCardIcon.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIconList.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodTitle.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodDisplayName.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardFieldsetValues.ts","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormContext.tsx","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormProvider.tsx","webpack://checkout/./packages/core/src/app/ui/form/withForm.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2CardValidation.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isBankInstrument/isBankInstrument.ts","webpack://checkout/./packages/ui/src/form/Legend/Legend.tsx","webpack://checkout/./packages/ui/src/modal/ModalTrigger.tsx","webpack://checkout/./packages/ui/src/icon/IconNewAccount.tsx","webpack://checkout/./packages/ui/src/icon/IconPaypal.tsx","webpack://checkout/./packages/ui/src/icon/IconAch.tsx","webpack://checkout/./packages/ui/src/icon/IconSepa.tsx","webpack://checkout/./packages/ui/src/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isAchInstrument/isAchInstrument.ts","webpack://checkout/./packages/instrument-utils/src/guards/isSepaInstrument/isSepaInstrument.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/AccountInstrumentSelect/AccountInstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isCardInstrument/isCardInstrument.ts","webpack://checkout/./packages/instrument-utils/src/guards/isAccountInstrument/isAccountInstrument.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageAccountInstrumentsTable/ManageAccountInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageAchInstrumentsTable/ManageAchInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageCardInstrumentsTable/ManageCardInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageInstrumentsAlert/ManageInstrumentsAlert.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageInstrumentsModal/ManageInstrumentsModal.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/AccountInstrumentFieldset/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/ui/src/form/CheckboxFormField/CheckboxFormField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentStorageField/InstrumentStorageField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentStoreAsDefaultField/InstrumentStoreAsDefaultField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/StoreInstrumentFieldset/StoreInstrumentFieldset.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2PaymentMethod.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3PaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts","webpack://checkout/./packages/hosted-payment-integration/src/HostedPaymentComponent.tsx","webpack://checkout/./packages/affirm-integration/src/AffirmPaymentMethod.tsx","webpack://checkout/./packages/afterpay-integration/src/AfterpayPaymentMethod.tsx","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2PaymentMethod.tsx","webpack://checkout/./packages/apple-pay-integration/src/ApplePayPaymentMethod.tsx","webpack://checkout/./packages/barclay-integration/src/BarclaycardPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/components/BigCommercePaymentsPaymentMethodComponent.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/hooks/useBigCommercePaymentsInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePayments/BigCommercePaymentsPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/getUniquePaymentMethodId.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsAPMs/BigCommercePaymentsAPMsPaymentMethod.tsx","webpack://checkout/./packages/ui/src/icon/IconLock.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/formatCreditCardNumber/formatCreditCardNumber.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/unformatCreditCardNumber/unformatCreditCardNumber.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardNumberField/CreditCardNumberField.tsx","webpack://checkout/./packages/ui/src/icon/IconCardCodeVisa.tsx","webpack://checkout/./packages/ui/src/icon/IconCardCodeAmex.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCodeTooltip.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCodeField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardValidation/CreditCardValidation.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardExpiryField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/formatCreditCardExpiryDate/formatCreditCardExpiryDate.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardNameField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCustomerCodeField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardFieldset/CreditCardFieldset.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/getInstrumentValidationSchema/getInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardValidationSchema/getCreditCardValidationSchema.ts","webpack://checkout/./packages/locale/src/createLocaleContext.ts","webpack://checkout/./packages/credit-card-integration/src/CreditCardPaymentMethodComponent.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/configureCardValidator.ts","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNameField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardFieldset/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedCreditCardValidationSchema/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentCreditCards/BigCommercePaymentsCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneCreditCardForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/hooks/useBigCommercePaymentsFastlaneInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/BigCommercePaymentsFastlanePaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/index.ts","webpack://checkout/./packages/utility/src/is-error-with-translation-key.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsPayLater/BigCommercePaymentsPayLaterPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsVenmo/BigCommercePaymentsVenmoPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/CountryData.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/validation-schemas/getBigCommercePaymentsRatePayValidationSchema.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsRatePay/BigCommercePaymentsRatePayPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/constants.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectNumberField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectSelectField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectTextField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectEcpFieldset.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useEcpInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getEcpValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectEcpPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectAlternativePaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectInitializationData.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useSepaInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getSepaValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectSepaPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getIdealValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectIdealPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapV2PaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getPayByBankValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectPayByBankPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltClientPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltCustomForm.tsx","webpack://checkout/./packages/bolt-integration/src/BoltEmbeddedPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/constants.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchValidation.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchFormFields.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchMandateText.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchPaymentForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/BraintreeAchPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneCreditCardForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/hooks/useBraintreeFastlaneInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/BraintreeFastlanePaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/index.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeLocalPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreePaypalPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx","webpack://checkout/./packages/braintree-integration/src/VisaCheckout/VisaCheckoutPaymentMethod.tsx","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/TextFieldForm.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomFormFields.tsx","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomPaymentMethod.tsx","webpack://checkout/./packages/clearpay-integration/src/ClearpayPaymentMethod.tsx","webpack://checkout/./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarna/KlarnaPaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarnav2/KlarnaV2PaymentMethod.tsx","webpack://checkout/./packages/mollie-integration/src/MollieAPMCustomForm.tsx","webpack://checkout/./packages/mollie-integration/src/MollieCustomCardForm.tsx","webpack://checkout/./packages/mollie-integration/src/MolliePaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx","webpack://checkout/./packages/moneris-integration/src/MonerisPaymentMethod.tsx","webpack://checkout/./packages/offline-payment-integration/src/OfflinePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/components/PayPalCommercePaymentMethodComponent.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceAPMs/PayPalCommerceAPMsPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCredit/PayPalCommerceCreditPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCreditCards/PayPalCommerceCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneCreditCardForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/hooks/usePayPalCommerceFastlaneInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/PayPalCommerceFastlanePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/index.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/is-error-with-translation-key.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/hooks/usePaypalCommerceInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/PayPalCommercePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceVenmo/PayPalCommerceVenmoPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/validation-schema/getPaypalCommerceRatePayValidationSchema.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/PaypalCommerceRatePayPaymentMethod.tsx","webpack://checkout/./packages/paypal-express-integration/src/PaypalExpressPaymentMethod.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2Form.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2PaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/getStripeOCSStyles.ts","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/StripeOCSPaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-upe/StripeUPEPaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3CustomCardForm.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3PaymentMethod.tsx","webpack://checkout/./packages/worldpay-access-integration/src/WorldpayCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/resolvePaymentMethod.ts","webpack://checkout/./packages/core/src/app/payment/withPayment.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/getCreditCardInputStyles.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCustomerCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentFeatureAvailable.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/mapFromInstrumentCardType.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/InstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isAccountInstrument.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isBankAccountInstrument.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isCardInstrument.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconPaypal.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageAccountInstrumentsTable.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageCardInstrumentsTable.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageInstrumentsAlert.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageInstrumentsModal.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/CardInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/core/src/app/ui/form/TextInputIframeContainer.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconLock.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconHelp.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconCardCodeVisa.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconCardCodeAmex.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCodeTooltip.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardNameField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardValidation.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/withHostedCreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardExpiryField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/formatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardNameField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardNumberField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/formatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/getCreditCardValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/CreditCardValidation.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/getInstrumentValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/InstrumentStorageField.tsx","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/InstrumentStoreAsDefaultField.tsx","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/StoreInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/configureCardValidator.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/BraintreeCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconNewAccount.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CCAvenueMarsPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/SignOutLink.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/WalletButtonPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/MasterpassPaymentMethod.tsx","webpack://checkout/./packages/locale/src/masterpassFormatLocale.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodProviderType.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaypalPaymentsProPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/usePropsToOnMount.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/Wrapper.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/initializationComponentMap.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/NoUI.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/PPSDKPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodV2.tsx","webpack://checkout/./packages/core/src/app/payment/createPaymentFormService.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodList.tsx","webpack://checkout/./packages/core/src/app/common/utility/isMobile.ts","webpack://checkout/./packages/core/src/app/payment/PaymentRedeemables.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentSubmitButton.tsx","webpack://checkout/./packages/core/src/app/payment/SpamProtectionField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditOverlay.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentForm.tsx","webpack://checkout/./packages/core/src/app/payment/Payment.tsx","webpack://checkout/./packages/core/src/app/common/error/isCartChangedError.ts","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts"],"sourcesContent":["import { Placement } from '@popperjs/core';\nimport React, { MouseEventHandler, ReactElement, ReactNode, useCallback, useEffect, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n    children?: ReactNode;\n}\n\nconst DropdownTrigger = ({\n    placement = 'bottom-start',\n    dropdown,\n    children\n}: DropdownTriggerProps): ReactElement => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const getRootElement = useCallback(() => {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }, []);\n\n    const handleClose = useCallback(() => {\n        if (!shouldShow) {\n            return;\n        }\n\n        setShouldShow(false);\n    }, [shouldShow]);\n\n    const handleOpen = useCallback(() => {\n        if (shouldShow) {\n            return;\n        }\n\n        setShouldShow(true);\n    }, [shouldShow]);\n\n    const handleClick: MouseEventHandler<HTMLElement> = useCallback(() => {\n        if (shouldShow) {\n            handleClose();\n        } else {\n            handleOpen();\n        }\n    }, [shouldShow, handleClose, handleOpen]);\n\n    useEffect(() => {\n        const rootElement = getRootElement();\n\n        if (shouldShow) {\n            rootElement?.addEventListener('click', handleClose);\n        } else {\n            rootElement?.removeEventListener('click', handleClose);\n        }\n\n        return () => {\n            rootElement?.removeEventListener('click', handleClose);\n        };\n    }, [shouldShow, handleClose, getRootElement]);\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <div className=\"dropdownTrigger\" onClick={handleClick} ref={ref}>\n                        {children}\n                    </div>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ref}\n                            style={{\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            }}\n                        >\n                            {dropdown}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default DropdownTrigger;\n","import React, { FunctionComponent, ReactNode, useCallback } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize } from '../button';\n\nimport Modal from './Modal';\nimport './ModalLink.scss';\nimport ModalTrigger, { ModalTriggerModalProps } from './ModalTrigger';\n\nexport interface ModalLinkProps {\n    header: ReactNode;\n    body: ReactNode;\n    children?: ReactNode;\n}\n\nconst ModalLink: FunctionComponent<ModalLinkProps> = ({ children, body, header }) => {\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <Modal\n                {...props}\n                additionalBodyClassName=\"modal--withText\"\n                footer={\n                    <Button onClick={props.onRequestClose} size={ButtonSize.Small}>\n                        <TranslatedString id=\"common.ok_action\" />\n                    </Button>\n                }\n                header={header}\n                shouldShowCloseButton={true}\n            >\n                {body}\n            </Modal>\n        ),\n        [header, body],\n    );\n\n    return (\n        <ModalTrigger modal={renderModal}>\n            { }\n            {({ onClick }) => <a onClick={preventDefault(onClick)}>{children}</a>}\n        </ModalTrigger>\n    );\n};\n\nexport default ModalLink;\n","import React, { Fragment, FunctionComponent } from 'react';\n\nconst MultiLineText: FunctionComponent<{ children: string }> = ({ children }) => (\n    <>\n        {children.split('\\n').map((line, key) => (\n            <Fragment key={key}>\n                {line}\n                <br />\n            </Fragment>\n        ))}\n    </>\n);\n\nexport default MultiLineText;\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { parseAnchor } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedHtml, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField, Fieldset, FormField, Legend, TextArea } from '../ui/form';\nimport { ModalHeader, ModalLink } from '../ui/modal';\nimport { MultiLineText } from '../ui/text';\n\nexport enum TermsConditionsType {\n    Link = 'link',\n    TextArea = 'textarea',\n    Modal = 'modal',\n}\n\nexport type TermsConditionsFieldProps =\n    | TermsConditionsLinkFieldProps\n    | TermsConditionsTextAreaFieldProps;\n\ninterface TermsConditionsLinkFieldProps {\n    name: string;\n    type: TermsConditionsType.Link;\n    url: string;\n}\n\ninterface TermsConditionsTextAreaFieldProps {\n    name: string;\n    terms: string;\n    type: TermsConditionsType.TextArea | TermsConditionsType.Modal;\n}\n\ninterface TermsConditionsTextFieldProps {\n    name: string;\n    terms: string;\n}\n\nconst BaseTermsConditionsModalCheckboxField: FunctionComponent<\n    TermsConditionsTextFieldProps & WithLanguageProps\n> = ({ language, name, terms }) => {\n    const translatedLabel = language.translate('terms_and_conditions.agreement_with_link_text', {\n        url: '',\n    });\n    const parsedLabel = parseAnchor(translatedLabel);\n\n    const labelContent = parsedLabel ? (\n        <>\n            {parsedLabel[0]}\n            <ModalLink\n                body={<MultiLineText>{terms}</MultiLineText>}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"terms_and_conditions.heading\" />\n                    </ModalHeader>\n                }\n            >\n                {parsedLabel[1]}\n            </ModalLink>\n            {parsedLabel[2]}\n        </>\n    ) : (\n        translatedLabel\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsModalCheckboxField = withLanguage(BaseTermsConditionsModalCheckboxField);\n\ninterface TermsConditionsCheckboxFieldProps {\n    name: string;\n    type: TermsConditionsType;\n    url?: string;\n}\n\nconst TermsConditionsCheckboxField: FunctionComponent<TermsConditionsCheckboxFieldProps> = ({\n    name,\n    url,\n}) => {\n    const labelContent = useMemo(\n        () =>\n            url ? (\n                <TranslatedHtml data={{ url }} id=\"terms_and_conditions.agreement_with_link_text\" />\n            ) : (\n                <TranslatedString id=\"terms_and_conditions.agreement_text\" />\n            ),\n        [url],\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsTextField: FunctionComponent<TermsConditionsTextFieldProps> = ({\n    name,\n    terms,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextArea defaultValue={terms} name={field.name} readOnly />,\n        [terms],\n    );\n\n    return <FormField input={renderInput} name={`${name}Text`} />;\n};\n\nconst TermsConditionsFieldset: FunctionComponent<TermsConditionsFieldProps> = (props) => {\n    const { type } = props;\n\n    return (\n        <Fieldset\n            additionalClassName=\"checkout-terms\"\n            legend={\n                <Legend>\n                    <TranslatedString id=\"terms_and_conditions.terms_and_conditions_heading\" />\n                </Legend>\n            }\n        >\n            {isTermsConditionsTextArea(props) && <TermsConditionsTextField {...props} />}\n            {isTermsConditionModal(props) && type === TermsConditionsType.Modal ? (\n                <TermsConditionsModalCheckboxField {...props} />\n            ) : (\n                <TermsConditionsCheckboxField {...props} />\n            )}\n        </Fieldset>\n    );\n};\n\nfunction isTermsConditionsTextArea(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.TextArea;\n}\n\nfunction isTermsConditionModal(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.Modal;\n}\n\nexport default memo(TermsConditionsFieldset);\n","import { TranslationData } from '@bigcommerce/checkout-sdk';\nimport { includes } from 'lodash';\n\nexport default function mapSubmitOrderErrorMessage(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n    shouldLocalise: boolean,\n): string {\n    switch (error.type) {\n        case 'not_initialized':\n            return translate('payment.payment_error');\n\n        case 'custom_provider_execute_error':\n            return translate(error.subtype);\n\n        case 'payment_cancelled':\n            return translate('payment.payment_cancelled');\n\n        case 'payment_method_invalid':\n            return translate('payment.payment_method_disabled_error');\n\n        case 'tax_provider_unavailable':\n            return translate('payment.tax_provider_unavailable');\n\n        case 'cart_changed':\n            return translate('shipping.cart_change_error');\n\n        case 'cart_consistency':\n            return translate('cart.consistency_error');\n\n        default:\n            if (\n                includes(\n                    [\n                        'order_could_not_be_finalized_error',\n                        'provider_fatal_error',\n                        'payment_invalid',\n                        'provider_error',\n                        'provider_widget_error',\n                        'user_payment_error',\n                    ],\n                    error.body && error.body.type,\n                )\n            ) {\n                return translate('payment.payment_method_error', { message: error.message });\n            }\n\n            if (shouldLocalise && error.body && error.body.errors && error.body.errors.length) {\n                const messages = error.body.errors.map((err: { code: any }) =>\n                    translate(`payment.errors.${err.code}`),\n                );\n\n                return messages.join(' ');\n            }\n\n            if (error.message) {\n                return error.message;\n            }\n\n            return error.type === 'unrecoverable'\n                ? translate('common.unavailable_error')\n                : translate('payment.place_order_error');\n    }\n}\n\nexport function mapSubmitOrderErrorTitle(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n): string {\n    if (error.type === 'unrecoverable') {\n        return translate('common.unavailable_heading');\n    }\n\n    if (error.type === 'missing_shipping_method') {\n        return translate('common.missing_shipping_method_heading');\n    }\n\n    if (error.type === 'invalid_shipping_address') {\n        return translate('common.invalid_shipping_address');\n    }\n\n    return translate('common.error_heading');\n}\n","export interface ExpiryDate {\n    month: string;\n    year: string;\n}\n\nexport default function unformatCreditCardExpiryDate(value: string): ExpiryDate {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n\n    if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n        return { month: '', year: '' };\n    }\n\n    return {\n        month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n        year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n    };\n}\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n\nexport function parseUniquePaymentMethodId(value: string): {\n    methodId: string;\n    gatewayId?: string;\n} {\n    const [gatewayId, methodId] = value.includes('-') ? value.split('-') : [undefined, value];\n\n    return { gatewayId, methodId };\n}\n","import { CardInstrumentFieldsetValues } from '../storedInstrument';\n\nexport default interface CreditCardFieldsetValues {\n    ccCustomerCode?: string;\n    ccCvv?: string;\n    ccExpiry: string;\n    ccName: string;\n    ccNumber: string;\n    shouldSaveInstrument?: boolean;\n}\n\nexport interface CreditCardValidationValues extends CardInstrumentFieldsetValues {\n    ccCvv?: string;\n    ccNumber?: string;\n}\n\nexport function hasCreditCardNumber(values: unknown): values is { ccNumber: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccNumber' in values;\n}\n\nexport function hasCreditCardExpiry(values: unknown): values is { ccExpiry: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccExpiry' in values;\n}\n","import { OrderPaymentRequestBody, OrderRequestBody } from '@bigcommerce/checkout-sdk';\nimport { isEmpty, isNil, omitBy } from 'lodash';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { unformatCreditCardExpiryDate, unformatCreditCardNumber } from './creditCard';\nimport {\n    hasCreditCardExpiry,\n    hasCreditCardNumber,\n    parseUniquePaymentMethodId,\n} from './paymentMethod';\n\nexport default function mapToOrderRequestBody(\n    values: PaymentFormValues,\n    isPaymentDataRequired: boolean,\n): OrderRequestBody {\n    if (!isPaymentDataRequired) {\n        return {};\n    }\n\n    const { paymentProviderRadio, ...rest } = values;\n    const { methodId, gatewayId } = parseUniquePaymentMethodId(paymentProviderRadio);\n    const payload: OrderRequestBody = {\n        payment: { gatewayId, methodId },\n    };\n    const paymentData = omitBy(\n        {\n            ...rest,\n            ccExpiry: hasCreditCardExpiry(values)\n                ? unformatCreditCardExpiryDate(values.ccExpiry)\n                : null,\n            ccNumber: hasCreditCardNumber(values)\n                ? unformatCreditCardNumber(values.ccNumber)\n                : null,\n        },\n        isNil,\n    ) as OrderPaymentRequestBody['paymentData'];\n\n    if (payload.payment && !isEmpty(paymentData)) {\n        payload.payment.paymentData = paymentData;\n    }\n\n    return payload;\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createContext } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nconst PaymentContext = createContext<PaymentContextProps | undefined>(undefined);\n\nexport default PaymentContext;\n","import React, { FunctionComponent } from 'react';\n\nimport TermsConditionsField, { TermsConditionsType } from './TermsConditionsField';\n\nexport interface TermsConditionsProps {\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n}\n\nexport const TermsConditions: FunctionComponent<TermsConditionsProps> = ({\n    termsConditionsUrl,\n    termsConditionsText = '',\n}) => (\n    <>\n        {termsConditionsUrl ? (\n            <TermsConditionsField\n                name=\"terms\"\n                type={TermsConditionsType.Link}\n                url={termsConditionsUrl}\n            />\n        ) : (\n            <TermsConditionsField\n                name=\"terms\"\n                terms={termsConditionsText}\n                type={TermsConditionsType.TextArea}\n            />\n        )}\n    </>\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { getTermsConditionsValidationSchema } from '../termsConditions';\n\nexport interface PaymentValidationSchemaOptions {\n    additionalValidation?: ObjectSchema<Partial<PaymentFormValues>>;\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPaymentValidationSchema({\n    additionalValidation,\n    isTermsConditionsRequired,\n    language,\n}: PaymentValidationSchemaOptions): ObjectSchema<PaymentFormValues> {\n    const schemaFields: {\n        paymentProviderRadio: StringSchema;\n    } = {\n        paymentProviderRadio: string().required(),\n    };\n\n    const schemaFieldsWithTerms = object(schemaFields).concat(\n        getTermsConditionsValidationSchema({ isTermsConditionsRequired, language }),\n    );\n\n    return additionalValidation\n        ? schemaFieldsWithTerms.concat(additionalValidation as any)\n        : schemaFieldsWithTerms;\n}\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, BooleanSchema, object, ObjectSchema } from 'yup';\n\nexport interface TermsConditionValidationSchemaOptions {\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getTermsConditionsValidationSchema({\n    isTermsConditionsRequired,\n    language,\n}: TermsConditionValidationSchemaOptions): ObjectSchema<{ terms?: boolean }> {\n    const schemaFields: {\n        terms?: BooleanSchema;\n    } = {};\n\n    if (isTermsConditionsRequired) {\n        schemaFields.terms = boolean().oneOf(\n            [true],\n            language.translate('terms_and_conditions.agreement_required_error'),\n        );\n    }\n\n    return object(schemaFields);\n}\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config && method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import React, { FunctionComponent, memo, ReactNode } from 'react';\n\nexport interface CustomChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n}\n\nconst CustomChecklistItem: FunctionComponent<CustomChecklistItemProps> = ({\n    content,\n    htmlId,\n}) => {\n    return (\n        <li\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item custom-checklist-item\"\n            id={htmlId}\n        >\n            {content}\n        </li>\n    );\n};\n\nexport default memo(CustomChecklistItem);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsPayLaterBanner: FunctionComponent<{\n    onUnhandledError?(error: Error): void\n}> = ({ onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n                bigcommerce_payments_paylater: {\n                    bannerContainerId: 'bigcommerce-payments-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n    }, []);\n\n    return (\n        <div\n            data-test='bigcommerce-payments-banner-container'\n            id='bigcommerce-payments-banner-container'\n        />\n    );\n};\n\nexport default BigCommercePaymentsPayLaterBanner;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalCreditBanner: FunctionComponent<{ onUnhandledError?(error: Error): void }> = ({\n    onUnhandledError,\n}) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BraintreePaypalCredit,\n                braintree: {\n                    bannerContainerId: 'braintree-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BraintreePaypalCredit,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n\n        return () => {\n            try {\n                void checkoutService.deinitializePayment({\n                    methodId: PaymentMethodId.BraintreePaypalCredit,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError?.(error);\n                }\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test=\"braintree-banner-container\" id=\"braintree-banner-container\" />;\n};\n\nexport default BraintreePaypalCreditBanner;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst PaypalCommerceCreditBanner: FunctionComponent<{\n    methodId: string;\n    containerId: string;\n    onUnhandledError?(error: Error): void;\n}> = ({ methodId, containerId, onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId,\n                [methodId]: {\n                    bannerContainerId: containerId,\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default PaypalCommerceCreditBanner;\n","import { ComponentType, lazy } from 'react';\n\nimport { IconProps } from './';\n\ninterface InstrumentComponent {\n    instrument: string;\n    component: ComponentType<IconProps>;\n}\n\nconst instrumentTypeMap: Record<string, InstrumentComponent> = {\n    AMEX: {\n        instrument: 'american-express',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-amex\" */ './IconCardAmex')),\n    },\n    BITCOIN: {\n        instrument: 'bitcoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-bitcoin\" */ './IconBitCoin')),\n    },\n    BITCOIN_CASH: {\n        instrument: 'bitcoin-cash',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-bitcoin-cash\" */ './IconBitCoinCash'),\n        ),\n    },\n    BANCONTACT: {\n        instrument: 'bancontact',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-bancontact\" */ './IconCardBancontact'),\n        ),\n    },\n    CARNET: {\n        instrument: 'carnet',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-carnet\" */ './IconCardCarnet'),\n        ),\n    },\n    CB: {\n        instrument: 'cb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-cb\" */ './IconCardCB')),\n    },\n    DINERS: {\n        instrument: 'diners-club',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-diners-club\" */ './IconCardDinersClub'),\n        ),\n    },\n    DANKORT: {\n        instrument: 'dankort',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-dankort\" */ './IconCardDankort'),\n        ),\n    },\n    DISCOVER: {\n        instrument: 'discover',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-discover\" */ './IconCardDiscover'),\n        ),\n    },\n    DOGECOIN: {\n        instrument: 'dogecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-dogecoin\" */ './IconDogeCoin')),\n    },\n    ELECTRON: {\n        instrument: 'electron',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-electron\" */ './IconCardElectron'),\n        ),\n    },\n    ELO: {\n        instrument: 'elo',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-elo\" */ './IconCardElo')),\n    },\n    ETHEREUM: {\n        instrument: 'ethereum',\n        component: lazy(() => import(/* webpackChunkName: \"icon-ethereum\" */ './IconEthereum')),\n    },\n    HIPER: {\n        instrument: 'hiper',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-hipercard\" */ './IconCardHipercard'),\n        ),\n    },\n    JCB: {\n        instrument: 'jcb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-jcb\" */ './IconCardJCB')),\n    },\n    LITECOIN: {\n        instrument: 'litecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-litecoin\" */ './IconLiteCoin')),\n    },\n    MADA: {\n        instrument: 'mada',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-mada\" */ './IconCardMada')),\n    },\n    MAESTRO: {\n        instrument: 'maestro',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-maestro\" */ './IconCardMaestro'),\n        ),\n    },\n    MC: {\n        instrument: 'mastercard',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-mastercard\" */ './IconCardMastercard'),\n        ),\n    },\n    SHIBA_INU: {\n        instrument: 'shiba-inu',\n        component: lazy(() => import(/* webpackChunkName: \"icon-shiba-inu\" */ './IconShibaInu')),\n    },\n    TROY: {\n        instrument: 'troy',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-troy\" */ './IconCardTroy')),\n    },\n    CUP: {\n        instrument: 'unionpay',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-unionpay\" */ './IconCardUnionPay'),\n        ),\n    },\n    USD_COIN: {\n        instrument: 'usd-coin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-usd-coin\" */ './IconUsdCoin')),\n    },\n    VISA: {\n        instrument: 'visa',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-visa\" */ './IconCardVisa')),\n    },\n};\n\nexport default function mapFromPaymentMethodCardType(type: string): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return instrumentTypeMap[type]?.instrument || undefined;\n}\n\nexport function getPaymentMethodIconComponent(type?: string): ComponentType<IconProps> | undefined {\n    if (!type) {\n        return undefined;\n    }\n\n    const instrumentType = Object.values(instrumentTypeMap).find(\n        (record) => record.instrument === type,\n    );\n\n    return instrumentType ? instrumentType.component : undefined;\n}\n\nfunction getSupportedInstrumentTypes() {\n    return Object.values(instrumentTypeMap).map((record) => record.instrument);\n}\n\nexport function filterInstrumentTypes(instrumentTypes: string[]) {\n    const supportedInstrumentTypes = getSupportedInstrumentTypes();\n\n    return instrumentTypes.filter((type) => supportedInstrumentTypes.includes(type));\n}\n","import React, { FunctionComponent, memo, Suspense } from 'react';\n\nimport { getPaymentMethodIconComponent } from './mapFromPaymentMethodCardType';\nimport { IconSize } from './withIconContainer';\n\nexport interface CreditCardIconProps {\n    cardType?: string;\n}\n\nconst CreditCardIcon: FunctionComponent<CreditCardIconProps> = ({ cardType }) => {\n    const iconProps = {\n        additionalClassName: 'cardIcon-icon',\n        size: IconSize.Medium,\n        testId: `credit-card-icon-${cardType || 'default'}`,\n    };\n\n    const IconComponent = getPaymentMethodIconComponent(cardType);\n\n    return IconComponent ? (\n        <Suspense>\n            <IconComponent {...iconProps} />\n        </Suspense>\n    ) : (\n        <div className=\"cardIcon-icon cardIcon-icon--default icon icon--medium\" />\n    );\n};\n\nexport default memo(CreditCardIcon);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { CreditCardIcon, filterInstrumentTypes } from './';\n\nexport interface CreditCardIconListProps {\n    selectedCardType?: string;\n    cardTypes: string[];\n}\n\nconst CreditCardIconList: FunctionComponent<CreditCardIconListProps> = ({\n    selectedCardType,\n    cardTypes,\n}) => {\n    const filteredCardTypes = filterInstrumentTypes(cardTypes);\n\n    if (!filteredCardTypes.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"creditCardTypes-list\">\n            {filteredCardTypes.map((type) => (\n                <li\n                    className={classNames(\n                        'creditCardTypes-list-item',\n                        { 'is-active': selectedCardType === type },\n                        { 'not-active': selectedCardType && selectedCardType !== type },\n                    )}\n                    data-test={`${type}-icon`}\n                    key={type}\n                >\n                    <span className=\"cardIcon\">\n                        <CreditCardIcon cardType={type} />\n                    </span>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(CreditCardIconList);\n","import { CardInstrument, CheckoutSettings, LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport classNames from 'classnames';\nimport { compact } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { BigCommercePaymentsPayLaterBanner } from '@bigcommerce/checkout/bigcommerce-payments-utils'\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps , PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { BraintreePaypalCreditBanner, PaypalCommerceCreditBanner } from '@bigcommerce/checkout/paypal-utils';\nimport { CreditCardIconList, mapFromPaymentMethodCardType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { isExperimentEnabled } from '../../common/utility';\n\nimport { hasCreditCardNumber } from './CreditCardFieldsetValues';\nimport getPaymentMethodDisplayName from './getPaymentMethodDisplayName';\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { isHostedCreditCardFieldsetValues } from './HostedCreditCardFieldsetValues';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodTitleProps {\n    method: PaymentMethod;\n    isSelected?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithPaymentTitleProps {\n    instruments: CardInstrument[];\n    checkoutSettings: CheckoutSettings;\n    storeCountryCode: string;\n    cdnBasePath: string;\n}\n\ninterface PaymentMethodSubtitleProps {\n    onUnhandledError?(error: Error): void;\n    methodId: string;\n}\n\ntype SubtitleType = ReactNode | ((subtitleProps?: PaymentMethodSubtitleProps) => ReactNode);\n\nexport function getPaymentMethodTitle(\n    language: LanguageService,\n    basePath: string,\n    checkoutSettings: CheckoutSettings,\n    storeCountryCode: string,\n): (method: PaymentMethod) => {\n    logoUrl: string;\n    titleText: string,\n    subtitle?: SubtitleType\n} {\n    const cdnPath = (path: string) => `${basePath}${path}`;\n\n    return (method) => {\n        const paymentWithLogo = method.initializationData?.methodsWithLogo\n            ? method.initializationData.methodsWithLogo\n            : [];\n        const methodName = getPaymentMethodName(language)(method);\n        const methodDisplayName = getPaymentMethodDisplayName(language)(method);\n        // TODO: API could provide the data below so UI can read simply read it.\n        // However, I'm not sure how we deal with translation yet. TBC.\n        const customTitles: { [key: string]: { logoUrl: string; titleText: string, subtitle?: ReactNode | ((props: any) => ReactNode) } } = {\n            [PaymentMethodType.CreditCard]: {\n                logoUrl: '',\n                titleText: methodName,\n            },\n            [PaymentMethodId.BraintreeVenmo]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.BraintreePaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: { onUnhandledError?(error: Error): void }): ReactNode => <BraintreePaypalCreditBanner {...props} />\n            },\n            [PaymentMethodType.PaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeAch]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeLocalPaymentMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BigCommercePaymentsPayPal]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsPayLater]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.PaypalCommerce]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-credit-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodType.VisaCheckout]: {\n                logoUrl: cdnPath('/img/payment-providers/visa-checkout.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.Affirm]: {\n                logoUrl: cdnPath('/img/payment-providers/affirm-checkout-header.png'),\n                titleText: language.translate('payment.affirm_display_name_text'),\n            },\n            [PaymentMethodId.Afterpay]: {\n                logoUrl: isExperimentEnabled(checkoutSettings, 'PROJECT-6993.change_afterpay_logo_for_us_stores') && storeCountryCode === 'US' ? cdnPath('/img/payment-providers/afterpay-new-us.svg') : cdnPath('/img/payment-providers/afterpay-badge-blackonmint.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.AmazonPay]: {\n                logoUrl: cdnPath('/img/payment-providers/amazon-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.ApplePay]: {\n                logoUrl: cdnPath('/modules/checkout/applepay/images/applepay-header@2x.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Bolt]: {\n                logoUrl: '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Clearpay]: {\n                logoUrl: cdnPath('/img/payment-providers/clearpay-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.GooglePay]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.PayWithGoogle]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Humm]: {\n                logoUrl: cdnPath('/img/payment-providers/humm-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Klarna]: {\n                logoUrl: method.initializationData?.enableBillie\n                        ? cdnPath('/img/payment-providers/klarna-billie-header.png')\n                        : cdnPath('/img/payment-providers/klarna-header.png'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Laybuy]: {\n                logoUrl: cdnPath('/img/payment-providers/laybuy-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Masterpass]: {\n                logoUrl: 'https://masterpass.com/dyn/img/acc/global/mp_mark_hor_blk.svg',\n                titleText: '',\n            },\n            [PaymentMethodType.Paypal]: {\n                // TODO: method.id === PaymentMethodId.BraintreeVenmo should be removed after the PAYPAL-1380.checkout_button_strategies_update experiment removal\n                logoUrl:\n                    method.id === PaymentMethodId.BraintreeVenmo && method.logoUrl\n                        ? method.logoUrl\n                        : cdnPath('/img/payment-providers/paypalpaymentsprouk.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Quadpay]: {\n                logoUrl: cdnPath('/img/payment-providers/quadpay.png'),\n                titleText: language.translate('payment.quadpay_display_name_text'),\n            },\n            [PaymentMethodId.Sezzle]: {\n                logoUrl: cdnPath('/img/payment-providers/sezzle-checkout-header.png'),\n                titleText: language.translate('payment.sezzle_display_name_text'),\n            },\n            [PaymentMethodId.Zip]: {\n                logoUrl: cdnPath('/img/payment-providers/zip.png'),\n                titleText: language.translate('payment.zip_display_name_text'),\n            },\n            [PaymentMethodType.Barclaycard]: {\n                logoUrl: cdnPath(\n                    `/img/payment-providers/barclaycard_${method.id.toLowerCase()}.png`,\n                ),\n                titleText: '',\n            },\n            [PaymentMethodId.AdyenV2]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.AdyenV3]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Mollie]: {\n                logoUrl:\n                    method.method === 'credit_card'\n                        ? ''\n                        : cdnPath(`/img/payment-providers/mollie_${method.method}.svg`),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Checkoutcom]: {\n                logoUrl: ['credit_card', 'card', 'checkoutcom'].includes(method.id)\n                    ? ''\n                    : cdnPath(`/img/payment-providers/checkoutcom_${method.id.toLowerCase()}.svg`),\n                titleText: methodName,\n            },\n            [PaymentMethodId.StripeV3]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.StripeUPE]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.WorldpayAccess]: {\n                logoUrl: '',\n                titleText: language.translate('payment.credit_debit_card_text'),\n            },\n        };\n\n        if (method.gateway === PaymentMethodId.BlueSnapDirect) {\n            if (method.id === 'credit_card') {\n                return { logoUrl: '', titleText: language.translate('payment.credit_card_text') };\n            }\n\n            if (method.id === 'ecp') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_electronic_check_label') };\n            }\n\n            if (method.id === 'banktransfer') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_local_bank_transfer_label') };\n            }\n        }\n\n        if (method.id === PaymentMethodId.PaypalCommerceVenmo) {\n            return customTitles[PaymentMethodId.PaypalCommerceAlternativeMethod];\n        }\n\n        if (method.id === PaymentMethodId.BigCommercePaymentsVenmo) {\n            return customTitles[PaymentMethodId.BigCommercePaymentsAlternativeMethod];\n        }\n\n        // KLUDGE: 'paypal' is actually a credit card method. It is the only\n        // exception to the rule below. We should probably fix it on API level,\n        // but apparently it would break LCO if we are not careful.\n        if (\n            method.id === PaymentMethodId.PaypalPaymentsPro &&\n            method.method === PaymentMethodType.CreditCard\n        ) {\n            return customTitles[PaymentMethodType.CreditCard];\n        }\n\n        if (method.id === PaymentMethodId.Ratepay) {\n            return { logoUrl: method.logoUrl || '', titleText: language.translate('payment.ratepay.payment_method_title')};\n        }\n\n        return (\n            customTitles[method.gateway || ''] ||\n            customTitles[method.id] ||\n            customTitles[method.method] ||\n            customTitles[PaymentMethodType.CreditCard]\n        );\n    };\n}\n\nfunction getInstrumentForMethod(\n    instruments: CardInstrument[],\n    method: PaymentMethod,\n    values: PaymentFormValues\n): CardInstrument | undefined {\n    const instrumentsForMethod = instruments.filter(instrument => instrument.provider === method.id);\n    const selectedInstrument = instrumentsForMethod.find(instrument => instrument.bigpayToken === values.instrumentId);\n\n    return selectedInstrument;\n}\n\nconst PaymentMethodTitle: FunctionComponent<\n    PaymentMethodTitleProps &\n        WithLanguageProps &\n        WithPaymentTitleProps &\n        ConnectFormikProps<PaymentFormValues>\n> = ({ cdnBasePath, checkoutSettings, storeCountryCode, onUnhandledError, formik: { values }, instruments, isSelected, language, method }) => {\n    const methodName = getPaymentMethodName(language)(method);\n    const { logoUrl, titleText, subtitle } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(method);\n    const { themeV2 } = useThemeContext();\n\n    const getSelectedCardType = () => {\n        if (!isSelected) {\n            return;\n        }\n\n        const instrumentSelected = getInstrumentForMethod(instruments, method, values);\n\n        if (isHostedCreditCardFieldsetValues(values) && values.hostedForm.cardType) {\n            return values.hostedForm.cardType;\n        }\n\n        if (hasCreditCardNumber(values) && values.ccNumber) {\n            const { card } = number(values.ccNumber);\n\n            if (!card) {\n                return;\n            }\n\n            return card.type;\n        }\n\n        if (instrumentSelected) {\n            return instrumentSelected.brand;\n        }\n    };\n\n    const getSubtitle = () => {\n        const node = subtitle instanceof Function ? subtitle({ onUnhandledError, methodId: method.id }) : subtitle;\n\n        return node ? <div className=\"paymentProviderHeader-subtitleContainer\">\n            {node}\n        </div> : null\n    }\n\n    return (\n        <div className={\n            classNames(\n                'paymentProviderHeader-container',\n                {'paymentProviderHeader-container-googlePay': method.id.includes('googlepay')},\n            )\n        }>\n            <div\n                className=\"paymentProviderHeader-nameContainer\"\n                data-test={`payment-method-${method.id}`}\n            >\n                {logoUrl && (\n                    <img\n                        alt={`${methodName} icon`}\n                        className={classNames(\n                            'paymentProviderHeader-img',\n                            {'paymentProviderHeader-img-applePay': method.id === 'applepay'},\n                            {'paymentProviderHeader-img-googlePay': method.id.includes('googlepay')},\n                        )}\n                        data-test=\"payment-method-logo\"\n                        src={logoUrl}\n                    />\n                )}\n\n                {titleText && (\n                    <div className={classNames('paymentProviderHeader-name',\n                        { 'sub-header': themeV2 })}\n                        data-test=\"payment-method-name\">\n                        {titleText}\n                    </div>\n                )}\n                {getSubtitle()}\n            </div>\n            <div className=\"paymentProviderHeader-cc\">\n                <CreditCardIconList\n                    cardTypes={compact(method.supportedCards.map(mapFromPaymentMethodCardType))}\n                    selectedCardType={getSelectedCardType()}\n                />\n            </div>\n        </div>\n    );\n};\n\nfunction mapToCheckoutProps({ checkoutState }: CheckoutContextProps): WithPaymentTitleProps | null {\n    const {\n        data: { getConfig, getInstruments },\n    } = checkoutState;\n    const config = getConfig();\n\n    const instruments = getInstruments() || [];\n\n    if (!config) {\n        return null;\n    }\n\n    const storeCountryCode = config.storeProfile.storeCountryCode\n\n    return {\n        instruments,\n        checkoutSettings: config.checkoutSettings,\n        storeCountryCode,\n        cdnBasePath: config.cdnPath,\n    };\n}\n\nexport default connectFormik(\n    withLanguage(withCheckout(mapToCheckoutProps)(memo(PaymentMethodTitle))),\n);\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport PaymentMethodId from './PaymentMethodId';\n\nexport default function getPaymentMethodDisplayName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        const { displayName } = method.config;\n\n        const isCreditCard = displayName?.toLowerCase() === 'credit card';\n\n        if (\n            method.id === PaymentMethodId.PaypalCommerceCredit ||\n            method.id === PaymentMethodId.BigCommercePaymentsPayLater ||\n            method.id === PaymentMethodId.BraintreePaypalCredit\n        ) {\n            const { payPalCreditProductBrandName } = method.initializationData;\n\n            if (payPalCreditProductBrandName) {\n                return payPalCreditProductBrandName.credit || payPalCreditProductBrandName;\n            }\n\n            return 'Pay Later';\n        }\n\n        if (\n            (isCreditCard && method.id === PaymentMethodId.AdyenV2) ||\n            method.id === PaymentMethodId.AdyenV3\n        ) {\n            return language.translate('payment.credit_debit_card_text');\n        }\n\n        if (isCreditCard) {\n            return language.translate('payment.credit_card_text');\n        }\n\n        return displayName || '';\n    };\n}\n","interface HostedCreditCardFieldsetValues {\n    hostedForm: {\n        cardType?: string;\n        errors?: {\n            cardCode?: string;\n            cardExpiry?: string;\n            cardName?: string;\n            cardNumber?: string;\n        };\n    };\n}\n\nexport function isHostedCreditCardFieldsetValues(\n    value: unknown,\n): value is HostedCreditCardFieldsetValues {\n    if (!(value instanceof Object)) {\n        return false;\n    }\n\n    if (!('hostedForm' in value)) {\n        return false;\n    }\n\n    return true;\n}\n","import { createContext, useContext } from 'react';\n\nimport PaymentMethodProps from '../../PaymentMethodProps';\n\nexport type PaymentFormContextProps = Pick<PaymentMethodProps, 'paymentForm'>;\n\nexport const PaymentFormContext = createContext<PaymentFormContextProps | undefined>(undefined);\n\nexport function usePaymentFormContext() {\n    const context = useContext(PaymentFormContext);\n\n    if (!context) {\n        throw new Error('usePaymentFormContext must be used within a PaymentFormContextProvider');\n    }\n\n    return context;\n}\n","import React, { ReactNode } from 'react';\n\nimport PaymentFormService from '../../PaymentFormService';\n\nimport { PaymentFormContext } from './PaymentFormContext';\n\ninterface PaymentFormProviderProps {\n    children?: ReactNode;\n    paymentForm: PaymentFormService;\n}\n\nexport const PaymentFormProvider = ({ children, paymentForm }: PaymentFormProviderProps) => {\n    return (\n        <PaymentFormContext.Provider value={{ paymentForm }}>\n            {children}\n        </PaymentFormContext.Provider>\n    );\n};\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\nimport { FormContext, FormContextType } from '@bigcommerce/checkout/ui';\n\nexport type WithFormProps = FormContextType;\n\nconst withForm = createInjectHoc(FormContext, { displayNamePrefix: 'WithForm' });\n\nexport default withForm;\n","import {\n    AdyenValidationState,\n    CardInstrument,\n    LanguageService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV2CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n    language?: LanguageService;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV2CardValidation: FunctionComponent<AdyenV2CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n    language,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        {language?.translate(\n                            'payment.instrument_trusted_shipping_address_title_text',\n                        )}\n                    </strong>\n\n                    <br />\n\n                    {language?.translate('payment.instrument_trusted_shipping_address_text')}\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            {language?.translate('payment.credit_card_number_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            {language?.translate('payment.credit_card_cvv_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            {language?.translate('payment.credit_card_expiration_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV2CardValidation;\n","import { BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isBankAccountInstrument(\n    instrument?: PaymentInstrument,\n): instrument is BankInstrument {\n    return (\n        instrument?.type === 'bank' && instrument?.method !== 'ach' && instrument?.method !== 'ecp'\n    );\n}\n\nexport default function assertIsBankInstrument(\n    instrument?: PaymentInstrument,\n): asserts instrument is BankInstrument {\n    if (!instrument || !isBankAccountInstrument(instrument)) {\n        throw new Error('Is not a bank account instrument.');\n    }\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface LegendProps extends HTMLAttributes<HTMLLegendElement> {\n    hidden?: boolean;\n    testId?: string;\n}\n\nconst Legend: FunctionComponent<LegendProps> = ({\n    children,\n    className,\n    hidden,\n    testId,\n    ...rest\n}) => (\n    <legend\n        {...rest}\n        className={classNames(\n            className || 'form-legend',\n            { 'is-srOnly': hidden },\n            { 'optimizedCheckout-headingSecondary': !hidden },\n        )}\n        data-test={testId}\n    >\n        {children}\n    </legend>\n);\n\nexport default Legend;\n","import React, {\n    Component,\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactNode,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nexport interface ModalTriggerState {\n    isOpen: boolean;\n}\n\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\n    state = {\n        isOpen: false,\n    };\n\n    private canHandleEvent = false;\n\n    componentDidMount(): void {\n        this.canHandleEvent = true;\n    }\n\n    componentWillUnmount(): void {\n        this.canHandleEvent = false;\n    }\n\n    render() {\n        const { children, modal } = this.props;\n        const { isOpen } = this.state;\n\n        return (\n            <>\n                {children({\n                    onClick: this.handleOpen,\n                    onKeyPress: this.handleKeyOpen,\n                })}\n\n                {modal({\n                    isOpen,\n                    onRequestClose: this.handleClose,\n                })}\n            </>\n        );\n    }\n\n    private handleOpen: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    private handleClose: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: false,\n        });\n    };\n\n    private handleKeyOpen: (keyboardEvent: KeyboardEvent<HTMLElement>) => void = (\n        keyboardEvent,\n    ) => {\n        if (keyboardEvent.key === 'Enter') {\n            this.handleOpen();\n        }\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconPaypal: FunctionComponent = () => (\n    <svg height=\"300\" viewBox=\"0 0 255 300\" width=\"255\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M228.03 77.2c3.6-23.02-.03-38.7-12.48-52.89C201.83 8.7 177.07 2 145.4 2H53.4c-6.47 0-11.99 4.7-12.99 11.11L2.1 256.03a7.9 7.9 0 0 0 7.8 9.14h56.78c79.33-53.38 148.45-81.4 161.35-187.97z\"\n            fill=\"#253B80\"\n        />\n        <path\n            d=\"M228.02 77.2C124 73 95 98 80.5 177.52l-13.82 87.65-3.91 24.85a6.9 6.9 0 0 0 6.82 7.98h47.86c5.67 0 10.48-4.12 11.37-9.71l.48-2.43 9-57.2.59-3.15c.88-5.6 5.7-9.73 11.37-9.73h7.16c46.38 0 82.68-18.83 93.29-73.33 4.43-22.76 2.14-41.77-9.6-55.14a45.77 45.77 0 0 0-13.1-10.1z\"\n            fill=\"#179BD7\"\n        />\n        <path\n            d=\"M215.33 72.14c-3.88-1.12-7.82-2-11.8-2.62a149.83 149.83 0 0 0-23.79-1.73h-72.1a11.49 11.49 0 0 0-11.36 9.73l-15.34 97.16-.44 2.84a13.1 13.1 0 0 1 12.95-11.1h27c53 0 94.5-21.53 106.62-83.82.37-1.85.67-3.64.95-5.4a64.66 64.66 0 0 0-9.98-4.2c-.9-.3-1.8-.59-2.71-.86z\"\n            fill=\"#222D65\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconPaypal);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconAch: FunctionComponent = () => (\n    <svg viewBox=\"25 0 50 48\" xmlSpace=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title id=\"iconAchTitle\">ACH</title>\n        <path\n            d=\"M30 9.5h40c1.9 0 3.5 1.6 3.5 3.5v22c0 1.9-1.6 3.5-3.5 3.5H30c-1.9 0-3.5-1.6-3.5-3.5V13c0-1.9 1.6-3.5 3.5-3.5z\"\n            fill=\"#1524d9\"\n        />\n        <path\n            d=\"m45.2 27.5-.6-1.4h-2.7l-.5 1.4h-1.8l3-7.1h1.7l2.8 7.1h-1.9zm-1.9-5.1-.9 2.4h1.8l-.9-2.4zm9.1 5c-.5.2-1 .3-1.6.3-.5 0-1-.1-1.5-.3-.9-.3-1.6-1-2-1.9-.4-1-.4-2 0-3 .2-.4.5-.8.8-1.2.4-.3.8-.6 1.2-.7 1-.4 2-.4 3 0 .4.2.9.4 1.2.8l-1.2 1.2c-.2-.2-.4-.4-.6-.5-.3-.1-.5-.2-.8-.2-.3 0-.6 0-.8.2-.2.1-.5.3-.6.5-.2.2-.3.4-.4.7-.1.3-.2.6-.1.9 0 .3 0 .6.1.9.1.3.2.5.4.7.2.2.4.3.6.4.3.1.5.2.8.2.3 0 .6-.1.9-.2.2-.1.5-.3.6-.5l1.2 1.1c-.3.1-.7.4-1.2.6zm6.4.1v-2.9H56v2.9h-1.7v-7.1H56v2.7h2.8v-2.7h1.7v7l-1.7.1z\"\n            fill=\"#fff\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconAch);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSepa: FunctionComponent = () => (\n    <svg fill=\"none\" height=\"24\" viewBox=\"0 0 35 24\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect fill=\"#9A1B27\" height=\"23\" rx=\"3.5\" stroke=\"#D9D9D9\" width=\"34\" x=\"0.5\" y=\"0.5\" />\n        <path\n            d=\"M10.758 11.652a5.095 5.095 0 00-1.29-.28 2.764 2.764 0 01-.747-.15.272.272 0 01-.165-.258.316.316 0 01.13-.252.703.703 0 01.43-.107.875.875 0 01.502.143.574.574 0 01.215.316l1.65-.165a2.03 2.03 0 00-.43-.71 1.564 1.564 0 00-.646-.388c-.394-.098-.8-.139-1.205-.122a3.809 3.809 0 00-1.227.158c-.28.092-.529.26-.717.488a1.205 1.205 0 00-.266.782c0 .265.089.523.252.732.15.207.357.366.595.459.412.133.834.231 1.262.294.255.035.505.098.746.186a.323.323 0 01.163.45.336.336 0 01-.112.124.861.861 0 01-.546.144.89.89 0 01-.516-.13.86.86 0 01-.294-.444l-1.736.165c.085.413.33.777.681 1.011a3.3 3.3 0 001.78.359c.473.02.946-.052 1.391-.215.307-.12.57-.33.753-.603.152-.227.234-.494.237-.767 0-.258-.08-.508-.23-.718a1.435 1.435 0 00-.645-.502h-.014zm10.638 1.241a.632.632 0 01-.509.258.724.724 0 01-.574-.265 1.205 1.205 0 01-.23-.803c-.03-.304.047-.608.216-.861a.703.703 0 01.856-.186c.09.046.167.112.227.193.161.238.237.524.215.81.03.302-.04.605-.2.861m.035-3.228c-.295 0-.586.074-.846.215-.241.15-.45.345-.617.574v-.688h-1.636v6.549h1.765v-2.417c.166.175.366.314.588.408.235.095.486.14.74.137a1.778 1.778 0 001.376-.603 2.51 2.51 0 00.538-1.736 2.912 2.912 0 00-.502-1.736 1.628 1.628 0 00-1.406-.703zm5.854 2.79c.006.184-.03.366-.108.531a.86.86 0 01-.359.352c-.163.094-.349.144-.538.143a.603.603 0 01-.43-.136.453.453 0 01.007-.66 1.73 1.73 0 01.674-.28c.259-.067.51-.143.754-.23v.28zm1.743 1.421a2.45 2.45 0 01-.043-.502v-2.016a1.995 1.995 0 00-.13-.681 1.292 1.292 0 00-.35-.545 1.614 1.614 0 00-.79-.373 7.187 7.187 0 00-1.262-.087 5.308 5.308 0 00-.904.072 2.13 2.13 0 00-.66.208c-.203.103-.38.25-.517.43-.136.212-.229.449-.272.696l1.671.18a.753.753 0 01.266-.41c.198-.104.421-.15.645-.135a.667.667 0 01.466.129c.104.126.153.289.137.452a5.901 5.901 0 01-.617.215c-.196.048-.622.139-1.277.272-.415.05-.806.225-1.12.502-.207.235-.318.54-.307.854a1.205 1.205 0 00.423.933c.35.275.79.41 1.233.38.368.008.733-.055 1.077-.187a2.26 2.26 0 00.681-.473 2 2 0 00.064.287c.035.094.078.186.13.272h1.635a2.275 2.275 0 01-.18-.473zM11.892 7.979v8.178l5.99 1.062V6.925l-5.99 1.054zm9.024 7.948a.316.316 0 00.064.216.18.18 0 00.137.071.172.172 0 00.143-.071c.04-.06.057-.13.05-.201a.345.345 0 00-.057-.216.18.18 0 00-.22-.055.172.172 0 00-.06.048.337.337 0 00-.057.216v-.008zm.394.366V16.2a.23.23 0 01-.208.115.314.314 0 01-.273-.186.465.465 0 01-.035-.202c0-.066.012-.132.036-.193a.286.286 0 01.385-.161.244.244 0 01.088.075v-.359h.122v1.004h-.115z\"\n            fill=\"#FEFEFE\"\n        />\n        <mask\n            height=\"33\"\n            id=\"mask0_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask0_1854_5393)\">\n            <path\n                d=\"M21.755 16.3h.15v-.739h-.143l-.007.74zm0-.875h.15v-.143h-.143l-.007.143z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask1_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask1_1854_5393)\">\n            <path\n                d=\"M22.207 16.3v-.739h.115v.115a.3.3 0 01.072-.107.136.136 0 01.086-.022.245.245 0 01.122.043l-.044.115a.179.179 0 00-.086-.029.114.114 0 00-.071.022.136.136 0 00-.05.072.488.488 0 00-.022.143v.38l-.122.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask2_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask2_1854_5393)\">\n            <path\n                d=\"M22.91 15.863h.409a.25.25 0 00-.05-.144.187.187 0 00-.144-.071.195.195 0 00-.143.057.23.23 0 00-.072.158zm.409.193l.122.022a.308.308 0 01-.108.172.38.38 0 01-.466-.036.387.387 0 01-.093-.28.402.402 0 01.1-.286.323.323 0 01.244-.1.31.31 0 01.237.1c.068.08.101.182.093.287v.028h-.545c.002.066.028.13.072.18a.2.2 0 00.143.071.186.186 0 00.122-.043c.035-.03.06-.07.072-.115\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask3_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask3_1854_5393)\">\n            <path\n                d=\"M24.216 16.028l.122.014a.316.316 0 01-.1.201.294.294 0 01-.202.072.315.315 0 01-.244-.1.401.401 0 01-.093-.288.51.51 0 01.043-.2.272.272 0 01.115-.137.36.36 0 01.18-.043.301.301 0 01.193.058.28.28 0 01.093.172l-.122.021a.2.2 0 00-.057-.114.158.158 0 00-.108-.036.195.195 0 00-.143.071.323.323 0 00-.065.216.33.33 0 00.058.215.178.178 0 00.143.057.172.172 0 00.122-.043.223.223 0 00.065-.143\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask4_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask4_1854_5393)\">\n            <path\n                d=\"M24.854 16.186l.014.107a.468.468 0 01-.093.015.215.215 0 01-.1-.022.122.122 0 01-.058-.057.454.454 0 01-.014-.144v-.43h-.086v-.093h.086v-.18l.122-.072v.252h.129v.1h-.13v.43c0 .022.002.044.008.065a.05.05 0 00.021.021.086.086 0 00.043.015.41.41 0 00.058-.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask5_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask5_1854_5393)\">\n            <path\n                d=\"M25.657 15.927a.316.316 0 00.058.216.18.18 0 00.143.071.172.172 0 00.137-.071c.04-.06.057-.13.05-.201a.345.345 0 00-.058-.216.18.18 0 00-.219-.055.173.173 0 00-.06.048.338.338 0 00-.05.216v-.008zm.388.366V16.2a.23.23 0 01-.201.115.286.286 0 01-.273-.187.524.524 0 01-.007-.394.287.287 0 01.386-.161.244.244 0 01.088.075v-.36h.122v1.005h-.115z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask6_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask6_1854_5393)\">\n            <path\n                d=\"M26.59 15.863h.402a.251.251 0 00-.043-.144.186.186 0 00-.15-.071.195.195 0 00-.144.057.23.23 0 00-.072.158m.409.194l.129.021a.308.308 0 01-.115.172.38.38 0 01-.459-.036.388.388 0 01-.093-.28.401.401 0 01.093-.286.323.323 0 01.244-.1.307.307 0 01.244.1c.068.08.101.182.093.287v.028h-.545c.003.066.028.13.072.18a.2.2 0 00.143.071.186.186 0 00.122-.043c.035-.03.06-.07.072-.114z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask7_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask7_1854_5393)\">\n            <path\n                d=\"M27.53 15.927a.38.38 0 00.035.187.18.18 0 00.295.029.323.323 0 00.064-.216.33.33 0 00-.057-.215.173.173 0 00-.144-.064.18.18 0 00-.136.071.31.31 0 00-.057.208zm0 .366h-.115V15.29h.122v.359a.244.244 0 01.2-.1c.045 0 .09.009.13.028.038.015.073.04.1.072a.494.494 0 01.079.265.415.415 0 01-.093.294.287.287 0 01-.215.108.229.229 0 01-.208-.108v.086z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask8_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask8_1854_5393)\">\n            <path\n                d=\"M28.333 16.3h.15v-.739h-.143l-.007.74zm0-.875h.15v-.143h-.143l-.007.143z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask9_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask9_1854_5393)\">\n            <path\n                d=\"M29.058 16.186l.021.107a.467.467 0 01-.093.015.215.215 0 01-.108-.022.122.122 0 01-.05-.057.45.45 0 01-.014-.144v-.43h-.094v-.093h.094v-.18l.122-.072v.252h.122v.1h-.122v.43a.219.219 0 000 .065.05.05 0 00.028.021.086.086 0 00.043.015.406.406 0 00.05-.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask10_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask10_1854_5393)\">\n            <path\n                d=\"M15.751 11.666a1.177 1.177 0 00-.272-.731.855.855 0 00-1.248.114 1.22 1.22 0 00-.201.617h1.721zm1.772.84H14.03c.01.225.087.442.222.624a.826.826 0 00.66.301.989.989 0 00.488-.13c.12-.075.224-.172.308-.286l1.722.158c-.22.41-.55.752-.954.982-.502.227-1.05.33-1.6.302a3.265 3.265 0 01-1.427-.258 2.095 2.095 0 01-.861-.811 2.461 2.461 0 01-.337-1.313 2.31 2.31 0 01.681-1.736 2.597 2.597 0 011.894-.66 3.35 3.35 0 011.542.295 2 2 0 01.86.86c.216.46.317.964.295 1.47v.202z\"\n                fill=\"#9A1B27\"\n            />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconSepa);\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Placement } from '@popperjs/core';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n    children?: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        this.getRootElement()?.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\n                            {children}\n                        </div>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={[\n                        { name: 'hide', enabled: false },\n                        { name: 'flip', enabled: false },\n                        { name: 'preventOverflow', enabled: false },\n                    ]}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        !shouldShow ? null : (\n                            <div\n                                className=\"dropdownMenu\"\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    width: '100%',\n                                    zIndex: 1,\n                                }}\n                            >\n                                {dropdown}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            this.getRootElement()?.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\n        });\n    };\n\n    private getRootElement() {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }\n}\n","import { AchInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAchInstrument(\n    instrument: PaymentInstrument,\n): instrument is AchInstrument {\n    return (\n        instrument.type === 'bank' && (instrument.method === 'ecp' || instrument.method === 'ach')\n    );\n}\n","import { BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isSepaInstrument(instrument?: PaymentInstrument): instrument is BankInstrument {\n    return (\n        instrument?.type === 'bank' &&\n        (instrument?.method === 'sepa' || instrument?.method === 'sepa_direct_debit')\n    );\n}\n","import {\n    AccountInstrument,\n    AchInstrument,\n    BankInstrument,\n    PayPalInstrument,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    DropdownTrigger,\n    IconAch,\n    IconNewAccount,\n    IconPaypal,\n    IconSepa,\n    IconSize,\n} from '@bigcommerce/checkout/ui';\n\nimport { isAchInstrument, isBankAccountInstrument, isSepaInstrument } from '../../guards';\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId || ''}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AchInstrumentMenuItemProps {\n    className?: string;\n    instrument: AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AchInstrumentMenuItem: FunctionComponent<AchInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                <IconAch size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-bank\">\n                    <div>\n                        <TranslatedString\n                            data={{ accountNumber: instrument.accountNumber }}\n                            id=\"payment.instrument_account_number_ending\"\n                        />\n                    </div>\n                    <div>\n                        <TranslatedString id=\"payment.instrument_manage_table_header_routing_number_text\" />\n                        : {instrument.issuer}\n                    </div>\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst SepaInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                <IconSepa size={IconSize.Medium} />\n                <div className=\"instrumentSelect-bank\">\n                    <div className=\"instrumentSelect-card\">\n                        <TranslatedString id=\"payment.sepa_account_number\" />:{' '}\n                        {instrument.accountNumber}\n                    </div>\n                </div>\n            </div>\n        </button>\n    );\n};\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    if (isAchInstrument(instrument)) {\n        return (\n            <AchInstrumentMenuItem\n                instrument={instrument}\n                onClick={handleClick}\n                testId=\"instrument-select-option\"\n            />\n        );\n    }\n\n    if (isSepaInstrument(instrument)) {\n        return (\n            <SepaInstrumentMenuItem\n                instrument={instrument}\n                onClick={handleClick}\n                testId=\"instrument-select-option\"\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    if (isSepaInstrument(instrument)) {\n        return (\n            <SepaInstrumentMenuItem\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                instrument={instrument}\n                onClick={onClick}\n                testId={testId}\n            />\n        );\n    }\n\n    if (isAchInstrument(instrument)) {\n        return (\n            <AchInstrumentMenuItem\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                instrument={instrument}\n                onClick={onClick}\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\" data-test=\"account-instrument-select\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        void form.setFieldValue(field.name, instrumentId);\n    }\n}\n\nexport default AccountInstrumentSelect;\n","import { CardInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isCardInstrument(instrument?: PaymentInstrument): instrument is CardInstrument {\n    return instrument !== undefined && instrument.type === 'card';\n}\n\nexport default function assertIsCardInstrument(\n    instrument?: PaymentInstrument,\n): asserts instrument is CardInstrument {\n    if (!isCardInstrument(instrument)) {\n        throw new Error('Is not a card instrument.');\n    }\n}\n","import { AccountInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is AccountInstrument {\n    return instrument.type === 'account';\n}\n","import { AccountInstrument, BankInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconPaypal, IconSize, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isAchInstrument, isBankAccountInstrument, isSepaInstrument } from '../../guards';\n\ninterface ManageInstrumentsRowProps {\n    instrument: AccountInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-accountExternalId\">\n                {isBankAccountInstrument(instrument) || isAchInstrument(instrument) ? (\n                    <span className=\"instrumentModal-instrumentAccountNumber\">\n                        {isSepaInstrument(instrument) ? (\n                            <TranslatedString id=\"payment.sepa_account_number\" />\n                        ) : (\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        )}\n                        {` ${instrument.accountNumber}`}\n                    </span>\n                ) : (\n                    <>\n                        <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n                        <span className=\"instrumentModal-instrumentAccountExternalId\">\n                            {instrument.externalId}\n                        </span>\n                    </>\n                )}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageAccountInstrumentsTableProps {\n    instruments: Array<AccountInstrument | BankInstrument>;\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsTable: FunctionComponent<ManageAccountInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ManageInstrumentsTable);\n","import { AchInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconAch, IconSize, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\ninterface ManageInstrumentsRowProps {\n    instrument: AchInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-bankType\">\n                <IconAch size={IconSize.Medium} />\n            </td>\n            <td data-test=\"manage-instrument-accountNumber\">{instrument.accountNumber}</td>\n            <td data-test=\"manage-instrument-issuer\">{instrument.issuer}</td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageAchInstrumentsTableProps {\n    instruments: AchInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageAchInstrumentsTable: FunctionComponent<ManageAchInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-ach-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_routing_number_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default ManageAchInstrumentsTable;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n\ninterface ManageInstrumentsRowProps {\n    instrument: CardInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-cardType\">\n                <CreditCardIcon cardType={cardType} />\n\n                {cardInfo && (\n                    <span className=\"instrumentModal-instrumentCardType\">{cardInfo.niceType}</span>\n                )}\n            </td>\n            <td data-test=\"manage-instrument-last4\">{instrument.last4}</td>\n            <td\n                className={classNames({ 'instrumentModal-instrumentExpiry--expired': isExpired })}\n                data-test=\"manage-instrument-expiry\"\n            >\n                {`${instrument.expiryMonth}/${instrument.expiryYear}`}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageCardInstrumentsTableProps {\n    instruments: CardInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageCardInstrumentsTable: FunctionComponent<ManageCardInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-card-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_expiry_date_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ManageCardInstrumentsTable);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Alert, AlertType } from '@bigcommerce/checkout/ui';\n\nexport interface ManageInstrumentsAlertProps {\n    error: any; // TODO: Fix typing\n}\n\nconst ManageInstrumentsAlert: FunctionComponent<ManageInstrumentsAlertProps> = ({ error }) => {\n    const { status } = error;\n\n    if (status === 401) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_auth_error\" />\n            </Alert>\n        );\n    }\n\n    if (status >= 400 && status < 500) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_client_error\" />\n            </Alert>\n        );\n    }\n\n    return (\n        <Alert type={AlertType.Error}>\n            <TranslatedString id=\"payment.instrument_manage_delete_server_error\" />\n        </Alert>\n    );\n};\n\nexport default memo(ManageInstrumentsAlert);\n","import { PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { Button, ButtonSize, ButtonVariant, Modal, ModalHeader } from '@bigcommerce/checkout/ui';\n\nimport {\n    isAccountInstrument,\n    isAchInstrument,\n    isBankAccountInstrument,\n    isCardInstrument,\n} from '../../guards';\nimport { ManageAccountInstrumentsTable } from '../ManageAccountInstrumentsTable';\nimport { ManageAchInstrumentsTable } from '../ManageAchInstrumentsTable';\nimport { ManageCardInstrumentsTable } from '../ManageCardInstrumentsTable';\nimport { ManageInstrumentsAlert } from '../ManageInstrumentsAlert';\n\nexport interface ManageInstrumentsModalProps {\n    isOpen: boolean;\n    instruments: PaymentInstrument[];\n    onAfterOpen?(): void;\n    onDeleteInstrument?(instrumentId: string): void;\n    onDeleteInstrumentError?(error: Error): void;\n    onRequestClose?(): void;\n}\n\nexport interface ManageInstrumentsModalState {\n    isConfirmingDelete: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass ManageInstrumentsModal extends Component<\n    ManageInstrumentsModalProps,\n    ManageInstrumentsModalState\n> {\n    static contextType = CheckoutContext;\n    declare context: React.ContextType<typeof CheckoutContext>;\n\n    state: ManageInstrumentsModalState = {\n        isConfirmingDelete: false,\n    };\n\n    render(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                errors: { getDeleteInstrumentError },\n            },\n        } = this.context;\n\n        const deleteInstrumentError = getDeleteInstrumentError();\n\n        const { isOpen, onRequestClose } = this.props;\n\n        return (\n            <Modal\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                footer={this.renderFooter()}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"payment.instrument_manage_modal_title_text\" />\n                    </ModalHeader>\n                }\n                isOpen={isOpen}\n                onAfterOpen={this.handleAfterOpen}\n                onRequestClose={onRequestClose}\n            >\n                {deleteInstrumentError && <ManageInstrumentsAlert error={deleteInstrumentError} />}\n\n                {this.renderContent()}\n            </Modal>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                statuses: { isDeletingInstrument },\n            },\n        } = this.context;\n        const { instruments } = this.props;\n\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <p>\n                    <TranslatedString id=\"payment.instrument_manage_modal_confirmation_label\" />\n                </p>\n            );\n        }\n\n        const cardInstruments = instruments.filter(isCardInstrument);\n        const bankInstruments = instruments.filter(isBankAccountInstrument);\n        const accountInstruments = instruments.filter(isAccountInstrument);\n        const achInstrument = instruments.filter(isAchInstrument);\n\n        if (achInstrument.length) {\n            return (\n                <ManageAchInstrumentsTable\n                    instruments={achInstrument}\n                    isDeletingInstrument={isDeletingInstrument()}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        const bankAndAccountInstruments = [...bankInstruments, ...accountInstruments];\n\n        if (bankAndAccountInstruments.length) {\n            return (\n                <ManageAccountInstrumentsTable\n                    instruments={bankAndAccountInstruments}\n                    isDeletingInstrument={isDeletingInstrument()}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        return (\n            <ManageCardInstrumentsTable\n                instruments={cardInstruments}\n                isDeletingInstrument={isDeletingInstrument()}\n                onDeleteInstrument={this.handleDeleteInstrument}\n            />\n        );\n    }\n\n    private renderFooter(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                statuses: { isDeletingInstrument, isLoadingInstruments },\n            },\n        } = this.context;\n\n        const { onRequestClose } = this.props;\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <>\n                    <Button\n                        onClick={this.handleCancel}\n                        size={ButtonSize.Small}\n                        testId=\"manage-instrument-cancel-button\"\n                    >\n                        <TranslatedString id=\"common.cancel_action\" />\n                    </Button>\n\n                    <Button\n                        disabled={isDeletingInstrument() || isLoadingInstruments()}\n                        onClick={this.handleConfirmDelete}\n                        size={ButtonSize.Small}\n                        testId=\"manage-instrument-confirm-button\"\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"payment.instrument_manage_modal_confirmation_action\" />\n                    </Button>\n                </>\n            );\n        }\n\n        return (\n            <Button\n                onClick={onRequestClose}\n                size={ButtonSize.Small}\n                testId=\"manage-instrument-close-button\"\n            >\n                <TranslatedString id=\"common.close_action\" />\n            </Button>\n        );\n    }\n\n    private handleAfterOpen: () => void = () => {\n        const { onAfterOpen } = this.props;\n\n        this.setState(\n            {\n                isConfirmingDelete: false,\n            },\n            onAfterOpen,\n        );\n    };\n\n    private handleCancel: () => void = () => {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                errors: { getDeleteInstrumentError },\n            },\n            checkoutService: { clearError },\n        } = this.context;\n\n        const deleteInstrumentError = getDeleteInstrumentError();\n\n        if (deleteInstrumentError) {\n            void clearError(deleteInstrumentError);\n        }\n\n        this.setState({\n            isConfirmingDelete: false,\n        });\n    };\n\n    private handleConfirmDelete: () => void = async () => {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutService: { deleteInstrument },\n        } = this.context;\n\n        const {\n            onDeleteInstrument = noop,\n            onDeleteInstrumentError = noop,\n            onRequestClose = noop,\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (!selectedInstrumentId) {\n            return;\n        }\n\n        try {\n            await deleteInstrument(selectedInstrumentId);\n            onDeleteInstrument(selectedInstrumentId);\n            onRequestClose();\n        } catch (error) {\n            onDeleteInstrumentError(error);\n        }\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isConfirmingDelete: true,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default ManageInstrumentsModal;\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { AccountInstrumentSelect } from '../AccountInstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n            testId=\"account-instrument-fieldset\"\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\" data-test=\"instrument-select-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nclass InstrumentSelect extends PureComponent<InstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<InstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            field,\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate = false,\n        } = this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <InstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideExpiryDate}\n                        />\n                    }\n                >\n                    <InstrumentSelectButton\n                        instrument={selectedInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" {...field} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        void form.setFieldValue(field.name, instrumentId);\n    }\n}\n\nexport default InstrumentSelect;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { BasicFormField } from '../BasicFormField';\nimport { CheckboxInput } from '../CheckboxInput';\nimport { FormFieldError } from '../FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <CheckboxInput\n                    {...field}\n                    checked={!!field.value}\n                    disabled={disabled}\n                    id={id || field.name}\n                    label={labelContent}\n                />\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n            </>\n        ),\n        [disabled, id, labelContent, name],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(CheckboxFormField);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\ninterface InstrumentStorageFieldProps {\n    isAccountInstrument: boolean;\n}\n\nconst InstrumentStorageField: FunctionComponent<InstrumentStorageFieldProps> = ({\n    isAccountInstrument,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_payment_method_label'\n        : 'payment.instrument_save_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--saveInstrument\"\n            labelContent={labelContent}\n            name=\"shouldSaveInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStorageField);\n","import React, { FunctionComponent, memo, useEffect, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\ninterface InstrumentStoreAsDefaultFieldProps {\n    isAccountInstrument: boolean;\n    disabled?: boolean;\n}\n\nconst InstrumentStoreAsDefaultField: FunctionComponent<InstrumentStoreAsDefaultFieldProps> = ({\n    isAccountInstrument,\n    disabled = false,\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_as_default_payment_method_label'\n        : 'payment.instrument_save_as_default_payment_method_label';\n\n    useEffect(() => {\n        if (disabled) {\n            paymentForm.setFieldValue('shouldSetAsDefaultInstrument', false);\n        }\n        // Ignoring paymentForm dependency as it causes sequential re-renders when included in array\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disabled]);\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--setAsDefaultInstrument\"\n            disabled={disabled}\n            labelContent={labelContent}\n            name=\"shouldSetAsDefaultInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStoreAsDefaultField);\n","import { PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentFormService,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset } from '@bigcommerce/checkout/ui';\n\nimport { InstrumentStorageField } from '../InstrumentStorageField';\nimport { InstrumentStoreAsDefaultField } from '../InstrumentStoreAsDefaultField';\n\ninterface StoreInstrumentFieldsetProps {\n    isAccountInstrument?: boolean;\n    instrumentId?: string;\n    instruments: PaymentInstrument[];\n}\n\ninterface WithStorageSettings {\n    showSave: boolean;\n    showSetAsDefault: boolean;\n    setAsDefaultEnabled: boolean;\n}\n\nconst useProps = (\n    props: StoreInstrumentFieldsetProps,\n    paymentForm: PaymentFormService,\n): WithStorageSettings => {\n    const saveIsChecked = Boolean(paymentForm.getFieldValue<boolean>('shouldSaveInstrument'));\n\n    const { instrumentId, instruments } = props;\n\n    const addingNewInstrument = !instrumentId;\n    const hasAnyOtherInstruments = !!instruments && instruments.length > 0;\n    const instrument =\n        instruments && instruments.find(({ bigpayToken }) => bigpayToken === instrumentId);\n\n    return {\n        ...props,\n        showSave: addingNewInstrument,\n        showSetAsDefault:\n            (addingNewInstrument && hasAnyOtherInstruments) ||\n            Boolean(instrument && !instrument.defaultInstrument),\n        setAsDefaultEnabled: !addingNewInstrument || saveIsChecked,\n    };\n};\n\nconst StoreInstrumentFieldset: FunctionComponent<StoreInstrumentFieldsetProps> = ({\n    isAccountInstrument = false,\n    ...props\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n\n    const { showSave, showSetAsDefault, setAsDefaultEnabled } = useProps(props, paymentForm);\n\n    return (\n        <Fieldset>\n            {showSave && <InstrumentStorageField isAccountInstrument={isAccountInstrument} />}\n\n            {showSetAsDefault && (\n                <InstrumentStoreAsDefaultField\n                    disabled={!setAsDefaultEnabled}\n                    isAccountInstrument={isAccountInstrument}\n                />\n            )}\n        </Fieldset>\n    );\n};\n\nexport default StoreInstrumentFieldset;\n","import {\n    AccountInstrument,\n    CardInstrument,\n    CheckoutSelectors,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    Instrument,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n","import { LineItemMap, PaymentInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { Instrument, LineItemMap, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentMethodProps, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport type AdyenV2FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    showAdditionalActionContent: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV2Form: FunctionComponent<AdyenV2FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    showAdditionalActionContent,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    onUnhandledError,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    ...rest\n}) => {\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired },\n        },\n    } = useCheckout();\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={showAdditionalActionContent}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!showAdditionalActionContent && (\n                <div id={additionalActionContainerId} style={{ display: 'none' }} />\n            )}\n        </>\n    );\n};\n\nexport default AdyenV2Form;\n","import {\n    AdyenCreditCardComponentOptions,\n    AdyenIdealComponentOptions,\n    AdyenValidationState,\n    CardInstrument,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV2CardValidation from './AdyenV2CardValidation';\nimport AdyenV2Form from './AdyenV2Form';\n\nexport interface AdyenOptions {\n    scheme: AdyenCreditCardComponentOptions;\n    bcmc: AdyenCreditCardComponentOptions;\n    ideal: AdyenIdealComponentOptions;\n}\n\nexport enum AdyenV2PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    ideal = 'ideal',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n    const [showAdditionalActionContent, setShowAdditionalActionContent] = useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const threeDS2ContainerId = `adyen-${method.id}-additional-action-component-field`;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const component = method.id as AdyenV2PaymentMethodType;\n    const shouldHideInstrumentExpiryDate = component === AdyenV2PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShowAdditionalActionContent(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setShowAdditionalActionContent(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setShowAdditionalActionContent(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n            const adyenOptions: AdyenOptions = {\n                [AdyenV2PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n                [AdyenV2PaymentMethodType.bcmc]: {\n                    hasHolderName: false,\n                },\n                [AdyenV2PaymentMethodType.ideal]: {\n                    showImage: true,\n                },\n            };\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv2: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    threeDS2ContainerId,\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            threeDS2ContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV2CardValidation\n                cardValidationState={cardValidationState}\n                language={language}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV2Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                language={language}\n                                method={method}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                showAdditionalActionContent={showAdditionalActionContent}\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV2PaymentMethod,\n    [{ gateway: 'adyenv2' }],\n);\n","import { AdyenValidationState, CardInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV3CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV3CardValidation: FunctionComponent<AdyenV3CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            <TranslatedString id=\"payment.credit_card_number_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV3CardValidation;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\nimport { Omit } from 'utility-types';\n\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport type AdyenV3FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    shouldRenderAdditionalActionContentModal: boolean;\n    isModalVisible: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV3Form: FunctionComponent<AdyenV3FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    shouldRenderAdditionalActionContentModal,\n    isModalVisible,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    checkoutState,\n    checkoutService,\n    onUnhandledError,\n    ...rest\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={shouldRenderAdditionalActionContentModal}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n                style={\n                    !isModalVisible && method.id === 'scheme'\n                        ? {\n                              overlay: {\n                                  display: 'none',\n                              },\n                          }\n                        : {}\n                }\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!shouldRenderAdditionalActionContentModal && <div id={additionalActionContainerId} />}\n        </>\n    );\n};\n\nexport default AdyenV3Form;\n","import {\n    AdyenCreditCardComponentOptions,\n    AdyenValidationState,\n    CardInstrument,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV3CardValidation from './AdyenV3CardValidation';\nimport AdyenV3Form from './AdyenV3Form';\n\nexport interface AdyenOptions {\n    [key: string]: AdyenCreditCardComponentOptions;\n}\n\nexport enum AdyenV3PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    onUnhandledError,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n\n    const [shouldRenderAdditionalActionContentModal, setShouldRenderAdditionalActionContentModal] =\n        useState<boolean>(false);\n    const [isAdditionalActionContentModalVisible, setIsAdditionalActionContentModalVisible] =\n        useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const component = method.id;\n    const shouldHideInstrumentExpiryDate = component === AdyenV3PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShouldRenderAdditionalActionContentModal(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onActionHandled = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(true);\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            const adyenOptions: AdyenOptions = {\n                [AdyenV3PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv3: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                        onActionHandled,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            onActionHandled,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV3CardValidation\n                cardValidationState={cardValidationState}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV3Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                hideContentWhenSignedOut\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                isModalVisible={isAdditionalActionContentModalVisible}\n                                language={language}\n                                method={method}\n                                onUnhandledError={onUnhandledError}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                shouldRenderAdditionalActionContentModal={\n                                    shouldRenderAdditionalActionContentModal\n                                }\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV3PaymentMethod,\n    [{ gateway: 'adyenv3' }],\n);\n","import { Customer, PaymentMethod, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import {\n    AccountInstrument,\n    CheckoutSelectors,\n    CheckoutService,\n    LanguageService,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentMethodProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface HostedPaymentMethodDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentMethodProps,\n): HostedPaymentMethodDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nclass HostedPaymentMethodComponent extends Component<\n    HostedPaymentMethodProps,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        const { isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp, loadInstruments } =\n            getHostedPaymentMethodDerivedProps(this.props);\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { description, isInitializing = false } = this.props;\n\n        const {\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = getHostedPaymentMethodDerivedProps(this.props);\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            instruments={instruments}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n\n        const { instruments } = getHostedPaymentMethodDerivedProps(this.props);\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = getHostedPaymentMethodDerivedProps(this.props);\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nexport default HostedPaymentMethodComponent;\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AffirmPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const description = useMemo(() => <TranslatedString id=\"payment.affirm_body_text\" />, []);\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            description={description}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AffirmPaymentMethod,\n    [{ id: 'affirm' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AfterpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AfterpayPaymentMethod,\n    [{ gateway: 'afterpay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AmazonPayV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    method: {\n        initializationData: { paymentDescriptor, paymentToken },\n    },\n    ...rest\n}) => {\n    const initializeAmazonPayV2Payment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                amazonpay: {\n                    editButtonId: 'editButtonId',\n                },\n            }),\n        [checkoutService],\n    );\n\n    const reload = useCallback(() => window.location.reload(), []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...rest}\n            buttonId=\"editButtonId\"\n            containerId=\"paymentWidget\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            hideWidget\n            initializePayment={initializeAmazonPayV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignInRequired={false}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            onSignOut={reload}\n            paymentDescriptor={paymentDescriptor}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldShow={!!paymentToken}\n            shouldShowDescriptor={!!paymentToken}\n            shouldShowEditButton={!!paymentToken}\n            signOut={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AmazonPayV2PaymentMethod,\n    [{ id: 'amazonpay' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ApplePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    language,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    applepay: {\n                        shippingLabel: language.translate('cart.shipping_text'),\n                        subtotalLabel: language.translate('cart.subtotal_text'),\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, language, method, onUnhandledError]);\n\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ApplePaymentMethod,\n    [{ id: 'applepay' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BarclaycardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BarclaycardPaymentMethod,\n    [{ gateway: 'barclaycard' }],\n);\n","import {\n    AccountInstrument,\n    HostedInstrument,\n    BigCommercePaymentsPaymentInitializeOptions,\n    BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    BigCommercePaymentsCreditCardsPaymentInitializeOptions,\n    BigCommercePaymentsVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype BigCommercePaymentsProvidersPaymentInitializeOptions =\n    BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions &\n        BigCommercePaymentsCreditCardsPaymentInitializeOptions &\n        BigCommercePaymentsPaymentInitializeOptions &\n        BigCommercePaymentsVenmoPaymentInitializeOptions;\n\ninterface BigCommercePaymentsPaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<BigCommercePaymentsProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst BigCommercePaymentsPaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & BigCommercePaymentsPaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default BigCommercePaymentsPaymentMethodComponent;\n","import { AccountInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBigCommercePaymentsInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBigCommercePaymentsInstrument;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\nimport useBigCommercePaymentsInstrument from '../hooks/useBigCommercePaymentsInstruments';\n\nconst BigCommercePaymentsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { ...isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = useBigCommercePaymentsInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    });\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <BigCommercePaymentsPaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"bigcommerce_payments\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </BigCommercePaymentsPaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPaymentMethod,\n    [{ id: 'bigcommerce_payments' }],\n);\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(method.id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"bigcommerce_payments_apms\"\n            {...props}\n        >\n            <div className={`widget widget--${method.id} payment-widget`} id={widgetContainerId} />\n        </BigCommercePaymentsPaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsAPMsPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconLock: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconLock);\n","import { number } from 'card-validator';\n\nimport unformatCreditCardNumber from '../unformatCreditCardNumber/unformatCreditCardNumber';\n\nexport default function formatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    const unformattedValue = unformatCreditCardNumber(value, separator);\n\n    return card.gaps\n        .filter((gapIndex) => unformattedValue.length > gapIndex)\n        .reduce(\n            (output, gapIndex, index) =>\n                [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(separator),\n            unformattedValue,\n        );\n}\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","import creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { max } from 'lodash';\nimport React, {\n    ChangeEventHandler,\n    createRef,\n    FunctionComponent,\n    memo,\n    PureComponent,\n    ReactNode,\n    RefObject,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInput } from '@bigcommerce/checkout/ui';\n\nimport formatCreditCardNumber from '../formatCreditCardNumber/formatCreditCardNumber';\n\nexport interface CreditCardNumberFieldProps {\n    name: string;\n}\n\nclass CreditCardNumberInput extends PureComponent<FieldProps<string>> {\n    private inputRef: RefObject<HTMLInputElement> = createRef();\n    private nextSelectionEnd = 0;\n\n    componentDidUpdate(): void {\n        if (this.inputRef.current && this.inputRef.current.selectionEnd !== this.nextSelectionEnd) {\n            this.inputRef.current.setSelectionRange(this.nextSelectionEnd, this.nextSelectionEnd);\n        }\n    }\n\n    render(): ReactNode {\n        const { field } = this.props;\n\n        return (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-number\"\n                    id={field.name}\n                    onChange={this.handleChange}\n                    ref={this.inputRef}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        );\n    }\n\n    private handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n        const separator = ' ';\n        const { value = '' } = event.target;\n        const { field, form } = this.props;\n        const { name, value: previousValue = '' } = field;\n        const selectionEnd = this.inputRef.current && this.inputRef.current.selectionEnd;\n\n        // Only allow digits and spaces\n        if (new RegExp(`[^\\\\d${separator}]`).test(value)) {\n            return form.setFieldValue(name, previousValue);\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n\n        const formattedValue = formatCreditCardNumber(\n            value.replace(new RegExp(separator, 'g'), '').slice(0, maxLength),\n            separator,\n        );\n\n        if (selectionEnd === value.length && value.length < formattedValue.length) {\n            this.nextSelectionEnd = formattedValue.length;\n        } else {\n            this.nextSelectionEnd = selectionEnd || 0;\n        }\n\n        return form.setFieldValue(name, formattedValue);\n    };\n}\n\nconst CreditCardNumberField: FunctionComponent<CreditCardNumberFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field, form, meta }: FieldProps<string>) => (\n            <CreditCardNumberInput field={field} form={form} meta={meta} />\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_number_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNumberField);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeVisa: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV visa, mc, disc</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <path d=\"M0 5h88v12H0z\" fill=\"#838383\" />\n            <path d=\"M3 23h82v10H3z\" fill=\"#FFF\" />\n            <path\n                d=\"M69.81 29.053c.015.297.13.502.343.616.11.058.233.088.37.088.258 0 .477-.107.66-.32.18-.215.31-.65.384-1.306-.12.19-.267.322-.444.4-.176.076-.366.114-.57.114-.412 0-.74-.13-.98-.386-.24-.257-.36-.588-.36-.993 0-.388.12-.73.357-1.025.237-.295.587-.443 1.05-.443.623 0 1.054.28 1.29.842.133.31.2.696.2 1.16 0 .525-.08.99-.238 1.394-.26.674-.703 1.01-1.327 1.01-.42 0-.737-.11-.954-.328-.217-.22-.325-.494-.325-.825h.544zm1.4-1.09c.176-.14.265-.387.265-.737 0-.315-.08-.55-.238-.705-.16-.153-.36-.23-.606-.23-.262 0-.47.088-.625.264-.155.177-.232.412-.232.707 0 .28.068.502.203.667.136.164.352.246.65.246.213 0 .408-.07.584-.21zm3.414-.563c.133-.132.2-.29.2-.474 0-.16-.064-.306-.19-.44-.13-.133-.323-.2-.585-.2-.26 0-.447.067-.563.2-.115.134-.173.29-.173.47 0 .202.075.36.224.473.15.112.326.17.53.17.237 0 .422-.067.556-.2zm.097 2.118c.165-.135.247-.336.247-.603 0-.277-.084-.487-.254-.63-.17-.144-.386-.216-.652-.216-.256 0-.466.072-.628.22-.163.145-.244.348-.244.607 0 .223.074.416.223.58.15.16.38.243.69.243.25 0 .456-.068.62-.202zm-1.735-1.937c-.158-.158-.236-.365-.236-.62 0-.32.114-.594.345-.823.232-.23.56-.344.984-.344.41 0 .732.108.965.325.233.216.35.47.35.758 0 .267-.068.483-.203.65-.076.092-.194.184-.353.274.176.08.316.175.418.28.19.2.284.46.284.778 0 .377-.127.697-.38.96-.253.26-.61.392-1.074.392-.416 0-.77-.113-1.057-.34-.287-.226-.43-.554-.43-.985 0-.253.06-.472.184-.656.124-.186.307-.327.55-.424-.15-.064-.265-.14-.35-.225zm5.614-1.42c.188.248.282.503.282.766h-.532c-.032-.17-.083-.302-.153-.397-.13-.18-.326-.27-.59-.27-.3 0-.54.14-.717.417-.177.278-.276.676-.296 1.194.124-.18.28-.316.467-.405.172-.08.364-.12.575-.12.36 0 .672.115.94.344.266.228.4.57.4 1.025 0 .388-.127.733-.38 1.033-.253.3-.614.45-1.083.45-.4 0-.746-.152-1.037-.456-.29-.304-.437-.816-.437-1.536 0-.532.065-.983.194-1.354.25-.71.705-1.065 1.367-1.065.478 0 .81.124 1 .372zm-.404 3.274c.14-.19.21-.415.21-.674 0-.22-.062-.43-.188-.627-.126-.198-.354-.297-.685-.297-.23 0-.434.076-.608.23-.175.153-.262.385-.262.694 0 .27.08.498.238.683.16.184.38.277.66.277.283 0 .495-.096.636-.286z\"\n                fill=\"#636363\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"19\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeVisa);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeAmex: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV amex</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <text\n                fill=\"#979BA1\"\n                fontFamily=\"Avenir Next\"\n                fontSize=\"6\"\n                fontWeight=\"420\"\n                letterSpacing=\".2\"\n            >\n                <tspan x=\"11\" y=\"35\">\n                    3712 567890 374\n                </tspan>\n                <tspan x=\"70.21\" y=\"35\">\n                    5\n                </tspan>\n            </text>\n            <path\n                d=\"M69.182 26.767h-.55v-3.35l-.762.635-.324-.38 1.142-.926h.494v4.02zm4.19 0H70.75v-.528l1.6-1.59c.122-.126.226-.257.313-.393s.13-.29.13-.46c0-.106-.018-.202-.056-.287-.038-.085-.09-.158-.153-.22-.065-.06-.14-.106-.228-.138-.087-.032-.18-.048-.278-.048-.204 0-.373.065-.505.196-.133.13-.216.298-.25.503l-.54-.09c.023-.153.07-.294.145-.424.074-.132.168-.246.28-.342.115-.097.246-.17.396-.224.15-.053.31-.08.48-.08.166 0 .326.025.48.074.153.05.288.12.406.216.117.094.21.214.28.357.07.145.106.31.106.496 0 .128-.017.248-.05.357-.035.11-.082.214-.14.313-.06.098-.128.192-.208.28-.08.09-.162.178-.25.265l-1.306 1.273h1.97v.494zm1.625-2.328h.176c.114 0 .225-.012.333-.033.107-.02.203-.056.286-.107.084-.052.15-.12.202-.208.05-.087.077-.195.077-.323 0-.104-.018-.196-.056-.277-.038-.08-.09-.15-.156-.207-.067-.057-.142-.102-.227-.134-.085-.032-.175-.048-.27-.048-.17 0-.314.044-.434.13-.12.088-.21.21-.27.364l-.5-.176c.1-.242.257-.433.475-.57.22-.14.47-.208.753-.208.167 0 .325.024.475.07.15.048.28.117.394.208.114.09.204.205.27.34.066.137.1.294.1.472 0 .114-.018.22-.054.318-.036.1-.086.188-.148.267-.063.08-.137.147-.224.204-.087.057-.182.098-.284.125v.01c.117.023.226.063.326.12.1.056.187.127.26.212.07.086.127.183.17.293.04.11.06.23.06.358 0 .2-.036.377-.112.53-.076.154-.176.282-.3.384-.126.102-.27.18-.433.233-.163.053-.33.08-.5.08-.318 0-.598-.073-.84-.216-.242-.144-.418-.368-.528-.67l.51-.17c.06.173.165.315.31.425.146.11.325.164.537.164.102 0 .202-.016.298-.05.097-.03.183-.08.26-.143.074-.064.135-.143.18-.238.046-.095.07-.206.07-.335 0-.14-.032-.257-.092-.352-.06-.095-.14-.17-.236-.23-.097-.06-.205-.1-.327-.125-.12-.025-.24-.037-.357-.037h-.17v-.454zm4.73.953h.58v.47h-.58v.904h-.533v-.903h-1.85v-.5l1.708-2.618h.676v2.647zm-.533-2.016h-.01l-1.273 2.016h1.284v-2.016z\"\n                fill=\"#636363\"\n                opacity=\".9\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"16\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeAmex);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconCardCodeAmex, IconCardCodeVisa, IconSize } from '@bigcommerce/checkout/ui';\n\nimport './CreditCardCodeTooltip.scss';\n\nconst CreditCardCodeTooltip: FunctionComponent = () => (\n    <div className=\"dropdown-menu dropdown-menu--content dropdown-menu--card-code\">\n        <div className=\"form-ccFields-cvvExample\">\n            <div className=\"form-ccFields-cvvExampleDescription\">\n                <p>\n                    <TranslatedString id=\"payment.credit_card_cvv_help_text\" />\n                </p>\n            </div>\n\n            <div className=\"form-ccFields-cvvExampleFigures\">\n                <figure>\n                    <IconCardCodeVisa size={IconSize.Large} />\n                </figure>\n\n                <figure>\n                    <IconCardCodeAmex size={IconSize.Large} />\n                </figure>\n            </div>\n        </div>\n    </div>\n);\n\nexport default CreditCardCodeTooltip;\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconHelp, IconLock, TextInput, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport CreditCardCodeTooltip from './CreditCardCodeTooltip';\n\nexport interface CreditCardCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCodeField: FunctionComponent<CreditCardCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-csc\"\n                    id={field.name}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardCodeField);\n","import React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CreditCardCodeField, CreditCardNumberField } from '../index';\n\ninterface CreditCardValidationProps {\n    shouldShowCardCodeField: boolean;\n    shouldShowNumberField: boolean;\n}\n\nconst CreditCardValidation: React.FunctionComponent<CreditCardValidationProps> = ({\n    shouldShowNumberField,\n    shouldShowCardCodeField,\n}) => (\n    <>\n        {shouldShowNumberField && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {shouldShowNumberField && <CreditCardNumberField name=\"ccNumber\" />}\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n        </div>\n    </>\n);\n\nexport default CreditCardValidation;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport React, { ChangeEvent, FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nimport { formatCreditCardExpiryDate } from '.';\n\ninterface CreditCardExpiryFieldProps {\n    name: string;\n}\n\nconst CreditCardExpiryField: FunctionComponent<CreditCardExpiryFieldProps> = ({ name }) => {\n    const { language } = useLocale();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const handleChange = useCallback(\n        memoizeOne((field: FieldProps['field'], form: FieldProps['form']) => {\n            return (event: ChangeEvent<any>) => {\n                void form.setFieldValue(field.name, formatCreditCardExpiryDate(event.target.value));\n            };\n        }),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps) => (\n            <TextInput\n                {...field}\n                autoComplete=\"cc-exp\"\n                id={field.name}\n                onChange={handleChange(field, form)}\n                placeholder={language.translate('payment.credit_card_expiration_placeholder_text')}\n                type=\"tel\"\n            />\n        ),\n        [handleChange, language],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_expiration_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardExpiryField);\n","export default function formatCreditCardExpiryDate(value: string): string {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n    const trimmedMonth = month.slice(0, 2);\n    const trimmedYear =\n        year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n    // i.e.: '1'\n    if (value.length < 2) {\n        return month;\n    }\n\n    // ie.: '10 /' (without trailing space)\n    if (value.length > 3 && !trimmedYear) {\n        return trimmedMonth;\n    }\n\n    return `${trimmedMonth} / ${trimmedYear}`;\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardNameFieldProps {\n    name: string;\n}\n\nconst CreditCardNameField: FunctionComponent<CreditCardNameFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"cc-name\" id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_name_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNameField);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardCustomerCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCustomerCodeField: FunctionComponent<CreditCardCustomerCodeFieldProps> = ({\n    name,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_customer_code_label\" />{' '}\n                <small className=\"optimizedCheckout-contentSecondary\">\n                    <TranslatedString id=\"common.optional_text\" />\n                </small>\n            </>\n        ),\n        [],\n    );\n\n    return <FormField input={renderInput} labelContent={labelContent} name={name} />;\n};\n\nexport default memo(CreditCardCustomerCodeField);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    CreditCardCodeField,\n    CreditCardCustomerCodeField,\n    CreditCardExpiryField,\n    CreditCardNameField,\n    CreditCardNumberField,\n} from '../';\n\nexport interface CreditCardFieldsetProps {\n    shouldShowCardCodeField?: boolean;\n    shouldShowCustomerCodeField?: boolean;\n    shouldShowSaveCardField?: boolean;\n}\n\nconst CreditCardFieldset: FunctionComponent<CreditCardFieldsetProps> = ({\n    shouldShowCardCodeField,\n    shouldShowCustomerCodeField,\n}) => (\n    <Fieldset\n        additionalClassName=\"creditCardFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <CreditCardNumberField name=\"ccNumber\" />\n\n            <CreditCardExpiryField name=\"ccExpiry\" />\n\n            <CreditCardNameField name=\"ccName\" />\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n\n            {shouldShowCustomerCodeField && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />}\n        </div>\n    </Fieldset>\n);\n\nexport default memo(CreditCardFieldset);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, number } from 'card-validator';\nimport creditCardType from 'credit-card-type';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport { CardInstrumentFieldsetValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { mapFromInstrumentCardType } from '../';\n\nexport interface InstrumentValidationSchemaOptions {\n    instrumentBrand: string;\n    instrumentLast4: string;\n    isCardCodeRequired: boolean;\n    isCardNumberRequired: boolean;\n    language: LanguageService;\n}\n\ninterface InstrumentValidationSchema {\n    ccCvv?: StringSchema;\n    ccNumber?: StringSchema;\n    instrumentId: StringSchema;\n}\n\nexport default memoize(function getInstrumentValidationSchema({\n    instrumentBrand,\n    instrumentLast4,\n    isCardCodeRequired,\n    isCardNumberRequired,\n    language,\n}: InstrumentValidationSchemaOptions): ObjectSchema<CardInstrumentFieldsetValues> {\n    const schema: InstrumentValidationSchema = {\n        instrumentId: string().required(),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value = '') {\n                    const cardType = mapFromInstrumentCardType(instrumentBrand);\n                    const cardInfo = creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined)\n                        .isValid;\n                },\n            });\n    }\n\n    if (isCardNumberRequired) {\n        schema.ccNumber = string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: language.translate('payment.credit_card_number_mismatch_error'),\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                test: (value = '') => value.slice(-instrumentLast4.length) === instrumentLast4,\n            });\n    }\n\n    return object(schema);\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, expirationDate, number } from 'card-validator';\nimport { object, ObjectSchema, string } from 'yup';\n\nimport { CreditCardFieldsetValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface CreditCardValidationSchemaOptions {\n    isCardCodeRequired: boolean;\n    language: LanguageService;\n}\n\nexport default memoize(function getCreditCardValidationSchema({\n    isCardCodeRequired,\n    language,\n}: CreditCardValidationSchemaOptions): ObjectSchema<CreditCardFieldsetValues> {\n    const schema = {\n        ccCustomerCode: string(),\n        ccCvv: string(),\n        ccExpiry: string()\n            .required(language.translate('payment.credit_card_expiration_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_expiration_invalid_error'),\n\n                test: (value) => expirationDate(value).isValid,\n            }),\n        ccName: string()\n            .max(200)\n            .required(language.translate('payment.credit_card_name_required_error')),\n        ccNumber: string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n\n                test: (value) => number(value).isValid,\n            }),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value) {\n                    const { card } = number(this.parent.ccNumber);\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    return object(schema);\n});\n","import { createCurrencyService, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport getLanguageService from './getLanguageService';\nimport { LocaleContextType } from './LocaleContext';\n\nexport default function createLocaleContext(config: StoreConfig): Required<LocaleContextType> {\n    if (!config) {\n        throw new Error('Missing configuration data');\n    }\n\n    const { inputDateFormat } = config;\n\n    return {\n        currency: createCurrencyService(config),\n        date: {\n            inputFormat: inputDateFormat,\n        },\n        language: getLanguageService(),\n    };\n}\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    HostedFieldType,\n    Instrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport {\n    CardInstrumentFieldset,\n    configureCardValidator,\n    CreditCardFieldset,\n    CreditCardFieldsetValues,\n    CreditCardValidation,\n    getCreditCardValidationSchema,\n    getInstrumentValidationSchema,\n    isCardInstrument,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { createLocaleContext, LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    CardInstrumentFieldsetValues,\n    PaymentMethodProps,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardPaymentMethodProps {\n    cardFieldset?: ReactNode;\n    cardValidationSchema?: ObjectSchema;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    getHostedFormOptions?(selectedInstrument?: CardInstrument): Promise<LegacyHostedFormOptions>;\n    getStoredCardValidationFieldset?(selectedInstrument?: CardInstrument): ReactNode;\n}\n\ninterface CreditCardPaymentMethodDerivedProps {\n    instruments: CardInstrument[];\n    isCardCodeRequired: boolean;\n    isCustomerCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    shouldShowInstrumentFieldset: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\ninterface CreditCardPaymentMethodState {\n    focusedHostedFieldType?: HostedFieldType;\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport type CreditCardPaymentMethodValues = CreditCardFieldsetValues | CardInstrumentFieldsetValues;\n\nclass CreditCardPaymentMethodComponent extends Component<\n    CreditCardPaymentMethodProps & PaymentMethodProps\n> {\n    state: CreditCardPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    private filterInstruments = memoizeOne(\n        (instruments: PaymentInstrument[] = []): CardInstrument[] =>\n            instruments.filter(isCardInstrument),\n    );\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n        const { isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp, loadInstruments } =\n            this.getCreditCardPaymentMethodDerivedProps();\n\n        setValidationSchema(method, this.getValidationSchema());\n        configureCardValidator();\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await initializePayment(\n                {\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                },\n                this.getSelectedInstrument(),\n            );\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n\n        setValidationSchema(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentDidUpdate(\n        _prevProps: Readonly<CreditCardPaymentMethodProps>,\n        prevState: Readonly<CreditCardPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            initializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            isAddingNewCard !== prevState.isAddingNewCard\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                await initializePayment(\n                    {\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    },\n                    this.getSelectedInstrument(),\n                );\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            checkoutState,\n            cardFieldset,\n            getStoredCardValidationFieldset,\n            isInitializing,\n            method,\n        } = this.props;\n        const {\n            instruments,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldShowInstrumentFieldset,\n        } = this.getCreditCardPaymentMethodDerivedProps();\n        const {\n            data: { getConfig },\n        } = checkoutState;\n\n        const { isAddingNewCard } = this.state;\n\n        const selectedInstrument = this.getSelectedInstrument();\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowNumberField = selectedInstrument\n            ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n            : false;\n        const shouldShowCardCodeField = selectedInstrument\n            ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n            : false;\n\n        const storeConfig = getConfig();\n\n        if (!storeConfig) {\n            throw Error('Unable to get config or customer');\n        }\n\n        return (\n            <LocaleContext.Provider value={createLocaleContext(storeConfig)}>\n                <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                    <div className=\"paymentMethod paymentMethod--creditCard\">\n                        {shouldShowInstrumentFieldset && (\n                            <CardInstrumentFieldset\n                                instruments={instruments}\n                                onDeleteInstrument={this.handleDeleteInstrument}\n                                onSelectInstrument={this.handleSelectInstrument}\n                                onUseNewInstrument={this.handleUseNewCard}\n                                selectedInstrumentId={\n                                    selectedInstrument && selectedInstrument.bigpayToken\n                                }\n                                validateInstrument={\n                                    getStoredCardValidationFieldset ? (\n                                        getStoredCardValidationFieldset(selectedInstrument)\n                                    ) : (\n                                        <CreditCardValidation\n                                            shouldShowCardCodeField={shouldShowCardCodeField}\n                                            shouldShowNumberField={shouldShowNumberField}\n                                        />\n                                    )\n                                }\n                            />\n                        )}\n\n                        {shouldShowCreditCardFieldset && !cardFieldset && (\n                            <CreditCardFieldset\n                                shouldShowCardCodeField={\n                                    method.config.cardCode || method.config.cardCode === null\n                                }\n                                shouldShowCustomerCodeField={method.config.requireCustomerCode}\n                            />\n                        )}\n\n                        {shouldShowCreditCardFieldset && cardFieldset}\n\n                        {isInstrumentFeatureAvailableProp && (\n                            <StoreInstrumentFieldset\n                                instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                                instruments={instruments}\n                            />\n                        )}\n                    </div>\n                </LoadingOverlay>\n            </LocaleContext.Provider>\n        );\n    }\n\n    private getSelectedInstrument(): CardInstrument | undefined {\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const { cardValidationSchema, language, method, storedCardValidationSchema } = this.props;\n        const {\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n        } = this.getCreditCardPaymentMethodDerivedProps();\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return (\n                storedCardValidationSchema ||\n                getInstrumentValidationSchema({\n                    instrumentBrand: selectedInstrument.brand,\n                    instrumentLast4: selectedInstrument.last4,\n                    isCardCodeRequired: isInstrumentCardCodeRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    isCardNumberRequired: isInstrumentCardNumberRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    language,\n                })\n            );\n        }\n\n        return (\n            cardValidationSchema ||\n            getCreditCardValidationSchema({\n                isCardCodeRequired: method.config.cardCode === true,\n                language,\n            })\n        );\n    }\n\n    private handleUseNewCard: () => void = () => {\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const {\n            paymentForm: { setFieldValue },\n        } = this.props;\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getCreditCardPaymentMethodDerivedProps(): CreditCardPaymentMethodDerivedProps {\n        const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = this.props;\n\n        const {\n            data: { getConfig, getCustomer, getInstruments, isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer || !method) {\n            throw new Error('Unable to get checkout');\n        }\n\n        const instruments = this.filterInstruments(getInstruments(method));\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            isUsingMultiShipping,\n            paymentMethod: method,\n        });\n\n        return {\n            instruments,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isCustomerCodeRequired: !!method.config.requireCustomerCode,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n            shouldShowInstrumentFieldset:\n                isInstrumentFeatureAvailableProp && instruments.length > 0,\n        };\n    }\n}\n\nexport default CreditCardPaymentMethodComponent;\n","import { creditCardType } from 'card-validator';\n\nexport default function configureCardValidator(): void {\n    const discoverInfo = creditCardType.getTypeInfo('discover');\n    const visaInfo = creditCardType.getTypeInfo('visa');\n\n    // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n    creditCardType.updateCard('visa', {\n        lengths: [13, ...(visaInfo.lengths || [])],\n    });\n\n    // Add support for 8-BIN Discover Cards.\n    creditCardType.updateCard('discover', {\n        patterns: [...(discoverInfo.patterns || []), [810, 817]],\n    });\n\n    // Add support for Mada-BIN Cards.\n    creditCardType.addCard({\n        niceType: 'Mada',\n        type: 'mada',\n        patterns: [\n            400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817, 422818,\n            422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954, 440533, 440647,\n            440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865, 458456, 462220, 468540,\n            468541, 468542, 468543, 483010, 483011, 483012, 484783, 486094, 486095, 486096, 489317,\n            489318, 489319, 493428, 504300, 506968, 508160, 513213, 520058, 521076, 524130, 524514,\n            529415, 529741, 530060, 530906, 531095, 531196, 532013, 535825, 535989, 536023, 537767,\n            539931, 543085, 543357, 549760, 554180, 557606, 558848, 585265, 588845, 588846, 588847,\n            588848, 588849, 588850, 588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120,\n            968201, 968202, 968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n        ],\n        gaps: [4, 8, 12],\n        lengths: [16, 18, 19],\n        code: {\n            name: 'CVV',\n            size: 3,\n        },\n    });\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNameField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div\n            className={classNames('form-ccFields', {\n                'form-ccFields--without-card-name': !cardNameId,\n                'form-ccFields--without-card-code': !cardCodeId,\n            })}\n        >\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {Boolean(cardNameId) && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {Boolean(cardCodeId) && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object()\n            .required()\n            .shape<HostedCreditCardValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedCreditCardValidationSchemaShape['hostedForm']['errors']>({\n                        cardCode: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardExpiry: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_expiry',\n                            }),\n\n                        cardName: string().test({\n                            message: language.translate('payment.credit_card_name_required_error'),\n                            test: (value) => value !== 'required',\n                        }),\n\n                        cardNumber: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            }),\n                    }),\n            }),\n    });\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = (\n    props,\n) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeBigCommercePaymentsCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    bigcommerce_payments_creditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching BigCommercePayments Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsCreditCardPaymentMethod,\n    [{ id: 'bigcommerce_payments_creditcards' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneCreditCardForm.scss';\n\ninterface BigCommercePaymentsFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst BigCommercePaymentsFastlaneCreditCardForm: FunctionComponent<\n    BigCommercePaymentsFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#big-commerce-payments-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-cc-form-container\"\n            data-test=\"big-commerce-payments-fastlane-cc-form-container\"\n            id=\"big-commerce-payments-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BigCommercePaymentsFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BigCommercePaymentsFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BigCommercePaymentsFastlaneInstrumentsForm: FunctionComponent<\n    BigCommercePaymentsFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-instrument\"\n            data-test=\"big-commerce-payments-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"big-commerce-payments-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"big-commerce-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"big-commerce-payments-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"big-commerce-payments-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"big-commerce-payments-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\nimport { useBigCommercePaymentsFastlaneInstruments } from '../hooks/useBigCommercePaymentsFastlaneInstruments';\n\nimport BigCommercePaymentsFastlaneCreditCardForm from './BigCommercePaymentsFastlaneCreditCardForm';\nimport BigCommercePaymentsFastlaneInstrumentsForm from './BigCommercePaymentsFastlaneInstrumentsForm';\n\ninterface BigCommercePaymentsFastlaneFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst BigCommercePaymentsFastlaneForm: FunctionComponent<BigCommercePaymentsFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBigCommercePaymentsFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument, handleSelectInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneForm;\n","import { CardInstrument, PaymentProviderCustomer } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBigCommercePaymentsFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n\n    const paymentProviderCustomer: PaymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsFastlaneForm from './components/BigCommercePaymentsFastlaneForm';\n\nimport './BigCommercePaymentsFastlanePaymentMethod.scss';\nimport { isErrorWithTranslationKey } from '@bigcommerce/checkout/utility';\n\nexport interface BigCommercePaymentsFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BigCommercePaymentsFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<BigCommercePaymentsFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n\n                bigcommerce_payments_fastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BigCommercePaymentsFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsFastlanePaymentMethod,\n    [{ id: 'bigcommerce_payments_fastlane' }],\n);\n","import BigCommercePaymentsFastlanePaymentMethod from './BigCommercePaymentsFastlanePaymentMethod';\n\nexport default BigCommercePaymentsFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsPayLaterPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_paylater\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPayLaterPaymentMethod,\n    [{ id: 'bigcommerce_payments_paylater' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const isPaymentDataRequired = props.checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_venmo\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsVenmoPaymentMethod,\n    [{ id: 'bigcommerce_payments_venmo' }],\n);\n","export interface CountryData {\n    name: string;\n    dialCode: string;\n    code: string;\n}\n\nconst COUNTRY_DATA = [\n    {\n        name: 'Afghanistan',\n        dialCode: '+93',\n        code: 'AF',\n    },\n    {\n        name: 'Aland Islands',\n        dialCode: '+358',\n        code: 'AX',\n    },\n    {\n        name: 'Albania',\n        dialCode: '+355',\n        code: 'AL',\n    },\n    {\n        name: 'Algeria',\n        dialCode: '+213',\n        code: 'DZ',\n    },\n    {\n        name: 'American Samoa',\n        dialCode: '+1684',\n        code: 'AS',\n    },\n    {\n        name: 'Andorra',\n        dialCode: '+376',\n        code: 'AD',\n    },\n    {\n        name: 'Angola',\n        dialCode: '+244',\n        code: 'AO',\n    },\n    {\n        name: 'Anguilla',\n        dialCode: '+1264',\n        code: 'AI',\n    },\n    {\n        name: 'Antarctica',\n        dialCode: '+672',\n        code: 'AQ',\n    },\n    {\n        name: 'Antigua and Barbuda',\n        dialCode: '+1268',\n        code: 'AG',\n    },\n    {\n        name: 'Argentina',\n        dialCode: '+54',\n        code: 'AR',\n    },\n    {\n        name: 'Armenia',\n        dialCode: '+374',\n        code: 'AM',\n    },\n    {\n        name: 'Aruba',\n        dialCode: '+297',\n        code: 'AW',\n    },\n    {\n        name: 'Australia',\n        dialCode: '+61',\n        code: 'AU',\n    },\n    {\n        name: 'Austria',\n        dialCode: '+43',\n        code: 'AT',\n    },\n    {\n        name: 'Azerbaijan',\n        dialCode: '+994',\n        code: 'AZ',\n    },\n    {\n        name: 'Bahamas',\n        dialCode: '+1242',\n        code: 'BS',\n    },\n    {\n        name: 'Bahrain',\n        dialCode: '+973',\n        code: 'BH',\n    },\n    {\n        name: 'Bangladesh',\n        dialCode: '+880',\n        code: 'BD',\n    },\n    {\n        name: 'Barbados',\n        dialCode: '+1246',\n        code: 'BB',\n    },\n    {\n        name: 'Belarus',\n        dialCode: '+375',\n        code: 'BY',\n    },\n    {\n        name: 'Belgium',\n        dialCode: '+32',\n        code: 'BE',\n    },\n    {\n        name: 'Belize',\n        dialCode: '+501',\n        code: 'BZ',\n    },\n    {\n        name: 'Benin',\n        dialCode: '+229',\n        code: 'BJ',\n    },\n    {\n        name: 'Bermuda',\n        dialCode: '+1441',\n        code: 'BM',\n    },\n    {\n        name: 'Bhutan',\n        dialCode: '+975',\n        code: 'BT',\n    },\n    {\n        name: 'Bolivia, Plurinational State of',\n        dialCode: '+591',\n        code: 'BO',\n    },\n    {\n        name: 'Bosnia and Herzegovina',\n        dialCode: '+387',\n        code: 'BA',\n    },\n    {\n        name: 'Botswana',\n        dialCode: '+267',\n        code: 'BW',\n    },\n    {\n        name: 'Brazil',\n        dialCode: '+55',\n        code: 'BR',\n    },\n    {\n        name: 'British Indian Ocean Territory',\n        dialCode: '+246',\n        code: 'IO',\n    },\n    {\n        name: 'Brunei Darussalam',\n        dialCode: '+673',\n        code: 'BN',\n    },\n    {\n        name: 'Bulgaria',\n        dialCode: '+359',\n        code: 'BG',\n    },\n    {\n        name: 'Burkina Faso',\n        dialCode: '+226',\n        code: 'BF',\n    },\n    {\n        name: 'Burundi',\n        dialCode: '+257',\n        code: 'BI',\n    },\n    {\n        name: 'Cambodia',\n        dialCode: '+855',\n        code: 'KH',\n    },\n    {\n        name: 'Cameroon',\n        dialCode: '+237',\n        code: 'CM',\n    },\n    {\n        name: 'Canada',\n        dialCode: '+1',\n        code: 'CA',\n    },\n    {\n        name: 'Cape Verde',\n        dialCode: '+238',\n        code: 'CV',\n    },\n    {\n        name: 'Cayman Islands',\n        dialCode: '+ 345',\n        code: 'KY',\n    },\n    {\n        name: 'Central African Republic',\n        dialCode: '+236',\n        code: 'CF',\n    },\n    {\n        name: 'Chad',\n        dialCode: '+235',\n        code: 'TD',\n    },\n    {\n        name: 'Chile',\n        dialCode: '+56',\n        code: 'CL',\n    },\n    {\n        name: 'China',\n        dialCode: '+86',\n        code: 'CN',\n    },\n    {\n        name: 'Christmas Island',\n        dialCode: '+61',\n        code: 'CX',\n    },\n    {\n        name: 'Cocos (Keeling) Islands',\n        dialCode: '+61',\n        code: 'CC',\n    },\n    {\n        name: 'Colombia',\n        dialCode: '+57',\n        code: 'CO',\n    },\n    {\n        name: 'Comoros',\n        dialCode: '+269',\n        code: 'KM',\n    },\n    {\n        name: 'Congo',\n        dialCode: '+242',\n        code: 'CG',\n    },\n    {\n        name: 'Congo, The Democratic Republic of the Congo',\n        dialCode: '+243',\n        code: 'CD',\n    },\n    {\n        name: 'Cook Islands',\n        dialCode: '+682',\n        code: 'CK',\n    },\n    {\n        name: 'Costa Rica',\n        dialCode: '+506',\n        code: 'CR',\n    },\n    {\n        name: \"Cote d'Ivoire\",\n        dialCode: '+225',\n        code: 'CI',\n    },\n    {\n        name: 'Croatia',\n        dialCode: '+385',\n        code: 'HR',\n    },\n    {\n        name: 'Cuba',\n        dialCode: '+53',\n        code: 'CU',\n    },\n    {\n        name: 'Cyprus',\n        dialCode: '+357',\n        code: 'CY',\n    },\n    {\n        name: 'Czech Republic',\n        dialCode: '+420',\n        code: 'CZ',\n    },\n    {\n        name: 'Denmark',\n        dialCode: '+45',\n        code: 'DK',\n    },\n    {\n        name: 'Djibouti',\n        dialCode: '+253',\n        code: 'DJ',\n    },\n    {\n        name: 'Dominica',\n        dialCode: '+1767',\n        code: 'DM',\n    },\n    {\n        name: 'Dominican Republic',\n        dialCode: '+1849',\n        code: 'DO',\n    },\n    {\n        name: 'Ecuador',\n        dialCode: '+593',\n        code: 'EC',\n    },\n    {\n        name: 'Egypt',\n        dialCode: '+20',\n        code: 'EG',\n    },\n    {\n        name: 'El Salvador',\n        dialCode: '+503',\n        code: 'SV',\n    },\n    {\n        name: 'Equatorial Guinea',\n        dialCode: '+240',\n        code: 'GQ',\n    },\n    {\n        name: 'Eritrea',\n        dialCode: '+291',\n        code: 'ER',\n    },\n    {\n        name: 'Estonia',\n        dialCode: '+372',\n        code: 'EE',\n    },\n    {\n        name: 'Ethiopia',\n        dialCode: '+251',\n        code: 'ET',\n    },\n    {\n        name: 'Falkland Islands (Malvinas)',\n        dialCode: '+500',\n        code: 'FK',\n    },\n    {\n        name: 'Faroe Islands',\n        dialCode: '+298',\n        code: 'FO',\n    },\n    {\n        name: 'Fiji',\n        dialCode: '+679',\n        code: 'FJ',\n    },\n    {\n        name: 'Finland',\n        dialCode: '+358',\n        code: 'FI',\n    },\n    {\n        name: 'France',\n        dialCode: '+33',\n        code: 'FR',\n    },\n    {\n        name: 'French Guiana',\n        dialCode: '+594',\n        code: 'GF',\n    },\n    {\n        name: 'French Polynesia',\n        dialCode: '+689',\n        code: 'PF',\n    },\n    {\n        name: 'Gabon',\n        dialCode: '+241',\n        code: 'GA',\n    },\n    {\n        name: 'Gambia',\n        dialCode: '+220',\n        code: 'GM',\n    },\n    {\n        name: 'Georgia',\n        dialCode: '+995',\n        code: 'GE',\n    },\n    {\n        name: 'Germany',\n        dialCode: '+49',\n        code: 'DE',\n    },\n    {\n        name: 'Ghana',\n        dialCode: '+233',\n        code: 'GH',\n    },\n    {\n        name: 'Gibraltar',\n        dialCode: '+350',\n        code: 'GI',\n    },\n    {\n        name: 'Greece',\n        dialCode: '+30',\n        code: 'GR',\n    },\n    {\n        name: 'Greenland',\n        dialCode: '+299',\n        code: 'GL',\n    },\n    {\n        name: 'Grenada',\n        dialCode: '+1473',\n        code: 'GD',\n    },\n    {\n        name: 'Guadeloupe',\n        dialCode: '+590',\n        code: 'GP',\n    },\n    {\n        name: 'Guam',\n        dialCode: '+1671',\n        code: 'GU',\n    },\n    {\n        name: 'Guatemala',\n        dialCode: '+502',\n        code: 'GT',\n    },\n    {\n        name: 'Guernsey',\n        dialCode: '+44',\n        code: 'GG',\n    },\n    {\n        name: 'Guinea',\n        dialCode: '+224',\n        code: 'GN',\n    },\n    {\n        name: 'Guinea-Bissau',\n        dialCode: '+245',\n        code: 'GW',\n    },\n    {\n        name: 'Guyana',\n        dialCode: '+595',\n        code: 'GY',\n    },\n    {\n        name: 'Haiti',\n        dialCode: '+509',\n        code: 'HT',\n    },\n    {\n        name: 'Holy See (Vatican City State)',\n        dialCode: '+379',\n        code: 'VA',\n    },\n    {\n        name: 'Honduras',\n        dialCode: '+504',\n        code: 'HN',\n    },\n    {\n        name: 'Hong Kong',\n        dialCode: '+852',\n        code: 'HK',\n    },\n    {\n        name: 'Hungary',\n        dialCode: '+36',\n        code: 'HU',\n    },\n    {\n        name: 'Iceland',\n        dialCode: '+354',\n        code: 'IS',\n    },\n    {\n        name: 'India',\n        dialCode: '+91',\n        code: 'IN',\n    },\n    {\n        name: 'Indonesia',\n        dialCode: '+62',\n        code: 'ID',\n    },\n    {\n        name: 'Iran, Islamic Republic of',\n        dialCode: '+98',\n        code: 'IR',\n    },\n    {\n        name: 'Iraq',\n        dialCode: '+964',\n        code: 'IQ',\n    },\n    {\n        name: 'Ireland',\n        dialCode: '+353',\n        code: 'IE',\n    },\n    {\n        name: 'Isle of Man',\n        dialCode: '+44',\n        code: 'IM',\n    },\n    {\n        name: 'Israel',\n        dialCode: '+972',\n        code: 'IL',\n    },\n    {\n        name: 'Italy',\n        dialCode: '+39',\n        code: 'IT',\n    },\n    {\n        name: 'Jamaica',\n        dialCode: '+1876',\n        code: 'JM',\n    },\n    {\n        name: 'Japan',\n        dialCode: '+81',\n        code: 'JP',\n    },\n    {\n        name: 'Jersey',\n        dialCode: '+44',\n        code: 'JE',\n    },\n    {\n        name: 'Jordan',\n        dialCode: '+962',\n        code: 'JO',\n    },\n    {\n        name: 'Kazakhstan',\n        dialCode: '+7',\n        code: 'KZ',\n    },\n    {\n        name: 'Kenya',\n        dialCode: '+254',\n        code: 'KE',\n    },\n    {\n        name: 'Kiribati',\n        dialCode: '+686',\n        code: 'KI',\n    },\n    {\n        name: \"Korea, Democratic People's Republic of Korea\",\n        dialCode: '+850',\n        code: 'KP',\n    },\n    {\n        name: 'Korea, Republic of South Korea',\n        dialCode: '+82',\n        code: 'KR',\n    },\n    {\n        name: 'Kuwait',\n        dialCode: '+965',\n        code: 'KW',\n    },\n    {\n        name: 'Kyrgyzstan',\n        dialCode: '+996',\n        code: 'KG',\n    },\n    {\n        name: 'Laos',\n        dialCode: '+856',\n        code: 'LA',\n    },\n    {\n        name: 'Latvia',\n        dialCode: '+371',\n        code: 'LV',\n    },\n    {\n        name: 'Lebanon',\n        dialCode: '+961',\n        code: 'LB',\n    },\n    {\n        name: 'Lesotho',\n        dialCode: '+266',\n        code: 'LS',\n    },\n    {\n        name: 'Liberia',\n        dialCode: '+231',\n        code: 'LR',\n    },\n    {\n        name: 'Libyan Arab Jamahiriya',\n        dialCode: '+218',\n        code: 'LY',\n    },\n    {\n        name: 'Liechtenstein',\n        dialCode: '+423',\n        code: 'LI',\n    },\n    {\n        name: 'Lithuania',\n        dialCode: '+370',\n        code: 'LT',\n    },\n    {\n        name: 'Luxembourg',\n        dialCode: '+352',\n        code: 'LU',\n    },\n    {\n        name: 'Macao',\n        dialCode: '+853',\n        code: 'MO',\n    },\n    {\n        name: 'Macedonia',\n        dialCode: '+389',\n        code: 'MK',\n    },\n    {\n        name: 'Madagascar',\n        dialCode: '+261',\n        code: 'MG',\n    },\n    {\n        name: 'Malawi',\n        dialCode: '+265',\n        code: 'MW',\n    },\n    {\n        name: 'Malaysia',\n        dialCode: '+60',\n        code: 'MY',\n    },\n    {\n        name: 'Maldives',\n        dialCode: '+960',\n        code: 'MV',\n    },\n    {\n        name: 'Mali',\n        dialCode: '+223',\n        code: 'ML',\n    },\n    {\n        name: 'Malta',\n        dialCode: '+356',\n        code: 'MT',\n    },\n    {\n        name: 'Marshall Islands',\n        dialCode: '+692',\n        code: 'MH',\n    },\n    {\n        name: 'Martinique',\n        dialCode: '+596',\n        code: 'MQ',\n    },\n    {\n        name: 'Mauritania',\n        dialCode: '+222',\n        code: 'MR',\n    },\n    {\n        name: 'Mauritius',\n        dialCode: '+230',\n        code: 'MU',\n    },\n    {\n        name: 'Mayotte',\n        dialCode: '+262',\n        code: 'YT',\n    },\n    {\n        name: 'Mexico',\n        dialCode: '+52',\n        code: 'MX',\n    },\n    {\n        name: 'Micronesia, Federated States of Micronesia',\n        dialCode: '+691',\n        code: 'FM',\n    },\n    {\n        name: 'Moldova',\n        dialCode: '+373',\n        code: 'MD',\n    },\n    {\n        name: 'Monaco',\n        dialCode: '+377',\n        code: 'MC',\n    },\n    {\n        name: 'Mongolia',\n        dialCode: '+976',\n        code: 'MN',\n    },\n    {\n        name: 'Montenegro',\n        dialCode: '+382',\n        code: 'ME',\n    },\n    {\n        name: 'Montserrat',\n        dialCode: '+1664',\n        code: 'MS',\n    },\n    {\n        name: 'Morocco',\n        dialCode: '+212',\n        code: 'MA',\n    },\n    {\n        name: 'Mozambique',\n        dialCode: '+258',\n        code: 'MZ',\n    },\n    {\n        name: 'Myanmar',\n        dialCode: '+95',\n        code: 'MM',\n    },\n    {\n        name: 'Namibia',\n        dialCode: '+264',\n        code: 'NA',\n    },\n    {\n        name: 'Nauru',\n        dialCode: '+674',\n        code: 'NR',\n    },\n    {\n        name: 'Nepal',\n        dialCode: '+977',\n        code: 'NP',\n    },\n    {\n        name: 'Netherlands',\n        dialCode: '+31',\n        code: 'NL',\n    },\n    {\n        name: 'Netherlands Antilles',\n        dialCode: '+599',\n        code: 'AN',\n    },\n    {\n        name: 'New Caledonia',\n        dialCode: '+687',\n        code: 'NC',\n    },\n    {\n        name: 'New Zealand',\n        dialCode: '+64',\n        code: 'NZ',\n    },\n    {\n        name: 'Nicaragua',\n        dialCode: '+505',\n        code: 'NI',\n    },\n    {\n        name: 'Niger',\n        dialCode: '+227',\n        code: 'NE',\n    },\n    {\n        name: 'Nigeria',\n        dialCode: '+234',\n        code: 'NG',\n    },\n    {\n        name: 'Niue',\n        dialCode: '+683',\n        code: 'NU',\n    },\n    {\n        name: 'Norfolk Island',\n        dialCode: '+672',\n        code: 'NF',\n    },\n    {\n        name: 'Northern Mariana Islands',\n        dialCode: '+1670',\n        code: 'MP',\n    },\n    {\n        name: 'Norway',\n        dialCode: '+47',\n        code: 'NO',\n    },\n    {\n        name: 'Oman',\n        dialCode: '+968',\n        code: 'OM',\n    },\n    {\n        name: 'Pakistan',\n        dialCode: '+92',\n        code: 'PK',\n    },\n    {\n        name: 'Palau',\n        dialCode: '+680',\n        code: 'PW',\n    },\n    {\n        name: 'Palestinian Territory, Occupied',\n        dialCode: '+970',\n        code: 'PS',\n    },\n    {\n        name: 'Panama',\n        dialCode: '+507',\n        code: 'PA',\n    },\n    {\n        name: 'Papua New Guinea',\n        dialCode: '+675',\n        code: 'PG',\n    },\n    {\n        name: 'Paraguay',\n        dialCode: '+595',\n        code: 'PY',\n    },\n    {\n        name: 'Peru',\n        dialCode: '+51',\n        code: 'PE',\n    },\n    {\n        name: 'Philippines',\n        dialCode: '+63',\n        code: 'PH',\n    },\n    {\n        name: 'Pitcairn',\n        dialCode: '+872',\n        code: 'PN',\n    },\n    {\n        name: 'Poland',\n        dialCode: '+48',\n        code: 'PL',\n    },\n    {\n        name: 'Portugal',\n        dialCode: '+351',\n        code: 'PT',\n    },\n    {\n        name: 'Puerto Rico',\n        dialCode: '+1939',\n        code: 'PR',\n    },\n    {\n        name: 'Qatar',\n        dialCode: '+974',\n        code: 'QA',\n    },\n    {\n        name: 'Romania',\n        dialCode: '+40',\n        code: 'RO',\n    },\n    {\n        name: 'Russia',\n        dialCode: '+7',\n        code: 'RU',\n    },\n    {\n        name: 'Rwanda',\n        dialCode: '+250',\n        code: 'RW',\n    },\n    {\n        name: 'Reunion',\n        dialCode: '+262',\n        code: 'RE',\n    },\n    {\n        name: 'Saint Barthelemy',\n        dialCode: '+590',\n        code: 'BL',\n    },\n    {\n        name: 'Saint Helena, Ascension and Tristan Da Cunha',\n        dialCode: '+290',\n        code: 'SH',\n    },\n    {\n        name: 'Saint Kitts and Nevis',\n        dialCode: '+1869',\n        code: 'KN',\n    },\n    {\n        name: 'Saint Lucia',\n        dialCode: '+1758',\n        code: 'LC',\n    },\n    {\n        name: 'Saint Martin',\n        dialCode: '+590',\n        code: 'MF',\n    },\n    {\n        name: 'Saint Pierre and Miquelon',\n        dialCode: '+508',\n        code: 'PM',\n    },\n    {\n        name: 'Saint Vincent and the Grenadines',\n        dialCode: '+1784',\n        code: 'VC',\n    },\n    {\n        name: 'Samoa',\n        dialCode: '+685',\n        code: 'WS',\n    },\n    {\n        name: 'San Marino',\n        dialCode: '+378',\n        code: 'SM',\n    },\n    {\n        name: 'Sao Tome and Principe',\n        dialCode: '+239',\n        code: 'ST',\n    },\n    {\n        name: 'Saudi Arabia',\n        dialCode: '+966',\n        code: 'SA',\n    },\n    {\n        name: 'Senegal',\n        dialCode: '+221',\n        code: 'SN',\n    },\n    {\n        name: 'Serbia',\n        dialCode: '+381',\n        code: 'RS',\n    },\n    {\n        name: 'Seychelles',\n        dialCode: '+248',\n        code: 'SC',\n    },\n    {\n        name: 'Sierra Leone',\n        dialCode: '+232',\n        code: 'SL',\n    },\n    {\n        name: 'Singapore',\n        dialCode: '+65',\n        code: 'SG',\n    },\n    {\n        name: 'Slovakia',\n        dialCode: '+421',\n        code: 'SK',\n    },\n    {\n        name: 'Slovenia',\n        dialCode: '+386',\n        code: 'SI',\n    },\n    {\n        name: 'Solomon Islands',\n        dialCode: '+677',\n        code: 'SB',\n    },\n    {\n        name: 'Somalia',\n        dialCode: '+252',\n        code: 'SO',\n    },\n    {\n        name: 'South Africa',\n        dialCode: '+27',\n        code: 'ZA',\n    },\n    {\n        name: 'South Sudan',\n        dialCode: '+211',\n        code: 'SS',\n    },\n    {\n        name: 'South Georgia and the South Sandwich Islands',\n        dialCode: '+500',\n        code: 'GS',\n    },\n    {\n        name: 'Spain',\n        dialCode: '+34',\n        code: 'ES',\n    },\n    {\n        name: 'Sri Lanka',\n        dialCode: '+94',\n        code: 'LK',\n    },\n    {\n        name: 'Sudan',\n        dialCode: '+249',\n        code: 'SD',\n    },\n    {\n        name: 'Suriname',\n        dialCode: '+597',\n        code: 'SR',\n    },\n    {\n        name: 'Svalbard and Jan Mayen',\n        dialCode: '+47',\n        code: 'SJ',\n    },\n    {\n        name: 'Swaziland',\n        dialCode: '+268',\n        code: 'SZ',\n    },\n    {\n        name: 'Sweden',\n        dialCode: '+46',\n        code: 'SE',\n    },\n    {\n        name: 'Switzerland',\n        dialCode: '+41',\n        code: 'CH',\n    },\n    {\n        name: 'Syrian Arab Republic',\n        dialCode: '+963',\n        code: 'SY',\n    },\n    {\n        name: 'Taiwan',\n        dialCode: '+886',\n        code: 'TW',\n    },\n    {\n        name: 'Tajikistan',\n        dialCode: '+992',\n        code: 'TJ',\n    },\n    {\n        name: 'Tanzania, United Republic of Tanzania',\n        dialCode: '+255',\n        code: 'TZ',\n    },\n    {\n        name: 'Thailand',\n        dialCode: '+66',\n        code: 'TH',\n    },\n    {\n        name: 'Timor-Leste',\n        dialCode: '+670',\n        code: 'TL',\n    },\n    {\n        name: 'Togo',\n        dialCode: '+228',\n        code: 'TG',\n    },\n    {\n        name: 'Tokelau',\n        dialCode: '+690',\n        code: 'TK',\n    },\n    {\n        name: 'Tonga',\n        dialCode: '+676',\n        code: 'TO',\n    },\n    {\n        name: 'Trinidad and Tobago',\n        dialCode: '+1868',\n        code: 'TT',\n    },\n    {\n        name: 'Tunisia',\n        dialCode: '+216',\n        code: 'TN',\n    },\n    {\n        name: 'Turkey',\n        dialCode: '+90',\n        code: 'TR',\n    },\n    {\n        name: 'Turkmenistan',\n        dialCode: '+993',\n        code: 'TM',\n    },\n    {\n        name: 'Turks and Caicos Islands',\n        dialCode: '+1649',\n        code: 'TC',\n    },\n    {\n        name: 'Tuvalu',\n        dialCode: '+688',\n        code: 'TV',\n    },\n    {\n        name: 'Uganda',\n        dialCode: '+256',\n        code: 'UG',\n    },\n    {\n        name: 'Ukraine',\n        dialCode: '+380',\n        code: 'UA',\n    },\n    {\n        name: 'United Arab Emirates',\n        dialCode: '+971',\n        code: 'AE',\n    },\n    {\n        name: 'United Kingdom',\n        dialCode: '+44',\n        code: 'GB',\n    },\n    {\n        name: 'United States',\n        dialCode: '+1',\n        code: 'US',\n    },\n    {\n        name: 'Uruguay',\n        dialCode: '+598',\n        code: 'UY',\n    },\n    {\n        name: 'Uzbekistan',\n        dialCode: '+998',\n        code: 'UZ',\n    },\n    {\n        name: 'Vanuatu',\n        dialCode: '+678',\n        code: 'VU',\n    },\n    {\n        name: 'Venezuela, Bolivarian Republic of Venezuela',\n        dialCode: '+58',\n        code: 'VE',\n    },\n    {\n        name: 'Vietnam',\n        dialCode: '+84',\n        code: 'VN',\n    },\n    {\n        name: 'Virgin Islands, British',\n        dialCode: '+1284',\n        code: 'VG',\n    },\n    {\n        name: 'Virgin Islands, U.S.',\n        dialCode: '+1340',\n        code: 'VI',\n    },\n    {\n        name: 'Wallis and Futuna',\n        dialCode: '+681',\n        code: 'WF',\n    },\n    {\n        name: 'Yemen',\n        dialCode: '+967',\n        code: 'YE',\n    },\n    {\n        name: 'Zambia',\n        dialCode: '+260',\n        code: 'ZM',\n    },\n    {\n        name: 'Zimbabwe',\n        dialCode: '+263',\n        code: 'ZW',\n    },\n];\n\nexport const getCountryData = (countryName: string) => {\n    return COUNTRY_DATA.filter((country: CountryData) => country.name === countryName);\n};\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, StringSchema } from 'yup';\n\nexport default memoize(function getBigCommercePaymentsRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n    CustomError,\n    SpecificError,\n    CountryData,\n    getCountryData,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getBigCommercePaymentsRatePayValidationSchema from '../validation-schemas/getBigCommercePaymentsRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst BigCommercePaymentsRatePayPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n    const getCountryInfo = (): CountryData => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        return getCountryData(billing.country)[0] || '';\n    };\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                bigcommerce_payments_ratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => fieldsValues.current,\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }) => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const validationSchema = useMemo(\n        () =>\n            getBigCommercePaymentsRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setFieldValue('ratepayPhoneCountryCode', getCountryInfo().dialCode);\n    }, []);\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={{ isSubmitted, setSubmitted }}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsRatePayPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms', id: 'ratepay' }],\n);\n","export enum BluesnapECPAccountType {\n    ConsumerChecking = 'CONSUMER_CHECKING',\n    ConsumerSavings = 'CONSUMER_SAVINGS',\n    CorporateChecking = 'CORPORATE_CHECKING',\n    CorporateSavings = 'CORPORATE_SAVINGS',\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectNumberFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectNumberField: FunctionComponent<BlueSnapDirectNumberFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete=\"cc-number\"\n                fieldType={DynamicFormFieldType.TELEPHONE}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectNumberField);\n","import { FormFieldOptions } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectSelectFieldProps {\n    labelContent: string;\n    name: string;\n    options: FormFieldOptions;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectSelectField: FunctionComponent<BlueSnapDirectSelectFieldProps> = ({\n    options: { helperLabel, items, rows },\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderSelect = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                fieldType={DynamicFormFieldType.DROPDOWM}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                options={items}\n                placeholder={helperLabel}\n                rows={rows}\n            />\n        ),\n        [helperLabel, items, rows, useFloatingLabel],\n    );\n\n    return <FormField {...rest} input={renderSelect} />;\n};\n\nexport default memo(BlueSnapDirectSelectField);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectTextFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    autoComplete?: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectTextField: FunctionComponent<BlueSnapDirectTextFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    autoComplete,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete={autoComplete}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel, autoComplete],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectTextField);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { BluesnapECPAccountType } from '../constants';\n\nimport BlueSnapDirectNumberField from './BlueSnapDirectNumberField';\nimport BlueSnapDirectSelectField from './BlueSnapDirectSelectField';\nimport BlueSnapDirectTextField from './BlueSnapDirectTextField';\n\nexport interface BlueSnapDirectEcpFieldsetProps {\n    language: LanguageService;\n    useFloatingLabel?: boolean;\n    shouldRenderCompanyName: boolean;\n}\n\nconst BlueSnapDirectEcpFieldset: FunctionComponent<BlueSnapDirectEcpFieldsetProps> = ({\n    language,\n    useFloatingLabel,\n    shouldRenderCompanyName,\n}) => {\n    const options = {\n        helperLabel: language.translate('payment.bluesnap_direct_account_type_select.label'),\n        items: [\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_checking',\n                ),\n                value: BluesnapECPAccountType.ConsumerChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_savings',\n                ),\n                value: BluesnapECPAccountType.ConsumerSavings,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_checking',\n                ),\n                value: BluesnapECPAccountType.CorporateChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_savings',\n                ),\n                value: BluesnapECPAccountType.CorporateSavings,\n            },\n        ],\n    };\n\n    return (\n        <>\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_account_number.label')}\n                maxLength={17}\n                name=\"accountNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_routing_number.label')}\n                maxLength={9}\n                name=\"routingNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.bluesnap_direct_account_type.label')}\n                name=\"accountType\"\n                options={options}\n                useFloatingLabel={useFloatingLabel}\n            />\n            {shouldRenderCompanyName && (\n                <BlueSnapDirectTextField\n                    labelContent={language.translate('address.company_name_label')}\n                    name=\"companyName\"\n                    useFloatingLabel={useFloatingLabel}\n                />\n            )}\n        </>\n    );\n};\n\nexport default memo(BlueSnapDirectEcpFieldset);\n","import { AchInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useEcpInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isAchInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useEcpInstruments;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getEcpValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n    shouldRenderCompanyName: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  accountNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_account_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_account_number.only_numbers'),\n                      )\n                      .min(4, language.translate('payment.bluesnap_direct_account_number.length'))\n                      .max(\n                          17,\n                          language.translate('payment.bluesnap_direct_account_number.length_max'),\n                      ),\n                  routingNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_routing_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_routing_number.only_numbers'),\n                      )\n                      .length(\n                          9,\n                          language.translate('payment.bluesnap_direct_routing_number.length'),\n                      ),\n                  ...(shouldRenderCompanyName\n                      ? {\n                            companyName: string()\n                                .required(language.translate('address.company_name_required_error'))\n                                .max(\n                                    50,\n                                    language.translate(\n                                        'payment.bluesnap_direct_company_name.length_max',\n                                    ),\n                                ),\n                        }\n                      : {}),\n                  accountType: string().required(\n                      language.translate('payment.bluesnap_direct_account_type.is_required'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { BluesnapECPAccountType } from './constants';\nimport BlueSnapDirectEcpFieldset from './fields/BlueSnapDirectEcpFieldset';\nimport useEcpInstruments from './hooks/useEcpInstruments';\nimport getEcpValidationSchema from './validation-schemas/getEcpValidationSchema';\n\nconst BlueSnapDirectEcpPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n    checkoutState: {\n        data: { isPaymentDataRequired, getCustomer, getBillingAddress },\n        statuses: { isLoadingInstruments },\n    },\n    paymentForm: { disableSubmit, setValidationSchema, setFieldValue, getFormValues },\n    language,\n    onUnhandledError,\n}) => {\n    const [disabled, setDisabled] = useState(true);\n    const onChange = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeEcp = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeEcp = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeEcp();\n\n        return () => {\n            void deinitializeEcp();\n        };\n    }, [deinitializeEcp, initializeEcp]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useEcpInstruments(method);\n\n    const isLoading = isLoadingInstruments();\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n    const accountType = getFormValues().accountType;\n    const shouldRenderCompanyName =\n        accountType === BluesnapECPAccountType.CorporateChecking ||\n        accountType === BluesnapECPAccountType.CorporateSavings;\n\n    useEffect(() => {\n        if (shouldRenderCompanyName) {\n            setFieldValue('companyName', getBillingAddress()?.company);\n        } else {\n            setFieldValue('companyName', undefined);\n        }\n    }, [shouldRenderCompanyName, setFieldValue, getBillingAddress]);\n\n    useEffect(() => {\n        setValidationSchema(\n            method,\n            getEcpValidationSchema(language, shouldShowForm, shouldRenderCompanyName),\n        );\n    }, [language, shouldShowForm, shouldRenderCompanyName, setValidationSchema, method]);\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_electronic_check_label')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <BlueSnapDirectEcpFieldset\n                        language={language}\n                        shouldRenderCompanyName={shouldRenderCompanyName}\n                    />\n                )}\n                <CheckboxFormField\n                    labelContent={language.translate('payment.bluesnap_direct_permission')}\n                    name=\"shopperPermission\"\n                    onChange={onChange}\n                />\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectEcpPaymentMethod,\n    [{ id: 'ecp', gateway: 'bluesnapdirect' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BlueSnapDirectAlternativePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectAlternativePaymentMethod,\n    [{ gateway: 'bluesnapdirect' }],\n);\n","export interface BlueSnapDirectInitializationData {\n    sepaCreditorCompanyName: string;\n    idealIssuers: IdealIssuer[];\n}\n\ninterface IdealIssuer {\n    issuerId: string;\n    issuerName: string;\n}\n\nexport const isBlueSnapDirectIdealIssuerList = (array: unknown): array is IdealIssuer[] => {\n    if (\n        !(\n            Array.isArray(array) &&\n            array.length &&\n            'issuerId' in array[0] &&\n            'issuerName' in array[0]\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const isBlueSnapDirectInitializationData = (\n    object: unknown,\n): object is BlueSnapDirectInitializationData => {\n    if (\n        !(\n            typeof object === 'object' &&\n            object !== null &&\n            (('sepaCreditorCompanyName' in object &&\n                typeof object.sepaCreditorCompanyName === 'string') ||\n                ('idealIssuers' in object && isBlueSnapDirectIdealIssuerList(object.idealIssuers)))\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n","import { BankInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isSepaInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useSepaInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<BankInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isSepaInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): BankInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useSepaInstruments;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getSepaValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  iban: string()\n                      .matches(\n                          /^[a-zA-Z0-9]+$/i,\n                          language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n                      )\n                      .required(language.translate('payment.sepa_account_number_required')),\n                  firstName: string().required(\n                      language.translate('address.first_name_required_error'),\n                  ),\n                  lastName: string().required(\n                      language.translate('address.last_name_required_error'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport useSepaInstruments from './hooks/useSepaInstruments';\nimport getSepaValidationSchema from './validation-schemas/getSepaValidationSchema';\n\nconst BlueSnapDirectSepaPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        method,\n        checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n        checkoutState: {\n            data: { isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        },\n        paymentForm: { disableSubmit, setValidationSchema },\n        language,\n        onUnhandledError,\n    } = props;\n\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const [disabled, setDisabled] = useState(true);\n    const toggleSubmitButton = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeSepa = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeSepa = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeSepa();\n\n        return () => {\n            void deinitializeSepa();\n        };\n    }, [deinitializeSepa, initializeSepa]);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useSepaInstruments(method);\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n\n    useEffect(() => {\n        setValidationSchema(method, getSepaValidationSchema(language, shouldShowForm));\n    }, [language, shouldShowForm, setValidationSchema, method]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (isInstrumentFeatureAvailable) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const isLoading = isLoadingInstruments();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_sepa_direct_debit')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <>\n                        <BlueSnapDirectTextField\n                            autoComplete=\"iban\"\n                            labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                            name=\"iban\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.first_name_label')}\n                            name=\"firstName\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.last_name_label')}\n                            name=\"lastName\"\n                            useFloatingLabel={true}\n                        />\n                    </>\n                )}\n\n                <CheckboxFormField\n                    labelContent={language.translate(\n                        'payment.bluesnap_direct_sepa_mandate_disclaimer',\n                        {\n                            creditorName: method.initializationData.sepaCreditorCompanyName,\n                        },\n                    )}\n                    name=\"shopperPermission\"\n                    onChange={toggleSubmitButton}\n                />\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectSepaPaymentMethod,\n    [{ id: 'sepa_direct_debit', gateway: 'bluesnapdirect' }],\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getIdealValidationSchema(language: LanguageService): ObjectSchema {\n    return object({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    });\n});\n","import React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectSelectField from './fields/BlueSnapDirectSelectField';\nimport getIdealValidationSchema from './validation-schemas/getIdealValidationSchema';\n\nconst BlueSnapDirectIdealPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment },\n    paymentForm: { setValidationSchema },\n    language,\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const { idealIssuers } = method.initializationData;\n\n    const idealIssuersSelectOptions = idealIssuers.map((issuer) => ({\n        value: issuer.issuerId,\n        label: issuer.issuerName,\n    }));\n\n    const initializeIdeal = useCallback(async () => {\n        setValidationSchema(method, getIdealValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method, setValidationSchema, language]);\n\n    const deinitializeIdeal = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeIdeal();\n\n        return () => {\n            void deinitializeIdeal();\n        };\n    }, [deinitializeIdeal, initializeIdeal]);\n\n    return (\n        <Fieldset\n            legend={<Legend hidden>{language.translate('payment.ideal.label')}</Legend>}\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.ideal.label')}\n                name=\"bic\"\n                options={{\n                    helperLabel: language.translate('payment.select_your_bank'),\n                    items: idealIssuersSelectOptions,\n                }}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectIdealPaymentMethod,\n    [{ id: 'ideal', gateway: 'bluesnapdirect' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport {\n    HostedPaymentComponent,\n    HostedPaymentMethodProps,\n} from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay, Modal } from '@bigcommerce/checkout/ui';\n\nexport type BlueSnapV2PaymentMethodProps = HostedPaymentMethodProps;\n\ninterface BlueSnapV2PaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelBlueSnapV2Payment?(): void;\n}\n\nconst BlueSnapV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [isLoadingIframe, setisLoadingIframe] = useState<boolean>(false);\n    const [paymentPageContent, setPaymentPageContent] = useState<HTMLElement>();\n    const ref = useRef<BlueSnapV2PaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n\n    const cancelBlueSnapV2ModalFlow = useCallback(() => {\n        setPaymentPageContent(undefined);\n\n        if (ref.current.cancelBlueSnapV2Payment) {\n            ref.current.cancelBlueSnapV2Payment();\n            ref.current.cancelBlueSnapV2Payment = undefined;\n        }\n    }, []);\n\n    const initializeBlueSnapV2Payment = useCallback(\n        (options: PaymentInitializeOptions) => {\n            return checkoutService.initializePayment({\n                ...options,\n                bluesnapv2: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setPaymentPageContent(content);\n                        setisLoadingIframe(true);\n                        ref.current.cancelBlueSnapV2Payment = cancel;\n                    },\n                    style: {\n                        border: '1px solid lightgray',\n                        height: '60vh',\n                        width: '100%',\n                    },\n                },\n            });\n        },\n        [checkoutService],\n    );\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (ref.current.paymentPageContentRef.current && paymentPageContent) {\n            paymentPageContent.addEventListener('load', () => {\n                setisLoadingIframe(false);\n            });\n            ref.current.paymentPageContentRef.current.appendChild(paymentPageContent);\n        }\n    }, [paymentPageContent]);\n\n    return (\n        <>\n            <HostedPaymentComponent\n                {...rest}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                initializePayment={initializeBlueSnapV2Payment}\n                method={method}\n                paymentForm={paymentForm}\n            />\n            <Modal\n                additionalModalClassName=\"modal--bluesnap\"\n                isOpen={!!paymentPageContent}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelBlueSnapV2ModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <LoadingOverlay isLoading={isLoadingIframe}>\n                    <div ref={ref.current.paymentPageContentRef} />\n                </LoadingOverlay>\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapV2PaymentMethod,\n    [{ gateway: 'bluesnapv2' }],\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getPayByBankValidationSchema(\n    language: LanguageService,\n): ObjectSchema {\n    return object({\n        iban: string()\n            .matches(\n                /^[a-zA-Z0-9]+$/i,\n                language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n            )\n            .required(language.translate('payment.pay_by_bank_iban_required')),\n    });\n});\n","import React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport getPayByBankValidationSchema from './validation-schemas/getPayByBankValidationSchema';\n\nconst BlueSnapDirectPayByBankPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    language,\n    paymentForm: { setValidationSchema },\n    checkoutService: { initializePayment, deinitializePayment },\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const initializePayByBank = useCallback(async () => {\n        setValidationSchema(method, getPayByBankValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, language, method, setValidationSchema]);\n\n    const deinitializePayByBank = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayByBank();\n\n        return () => {\n            void deinitializePayByBank();\n        };\n    }, [deinitializePayByBank, initializePayByBank]);\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>{language.translate('payment.bluesnap_direct_iban.label')}</Legend>\n            }\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectTextField\n                autoComplete=\"iban\"\n                labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                name=\"iban\"\n                useFloatingLabel={true}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectPayByBankPaymentMethod,\n    [{ id: 'pay_by_bank', gateway: 'bluesnapdirect' }],\n);\n","import { CheckoutService, PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BoltClientPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    ...rest\n}) => {\n    const initializeBoltPayment: CheckoutService['initializePayment'] = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    useBigCommerceCheckout: true,\n                },\n            }),\n        [checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBoltPayment}\n            method={method}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltClientPaymentMethod;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nexport interface BoltCustomFormProps {\n    containerId: string;\n    showCreateAccountCheckbox: boolean;\n}\n\nconst agreementTranslationOptions = {\n    privacyPolicyUrl: 'https://www.bolt.com/privacy/',\n    termsUrl: 'https://www.bolt.com/end-user-terms/',\n};\n\nconst benefitsList = [\n    { id: 'payment.bolt_benefit_1' },\n    { id: 'payment.bolt_benefit_2' },\n    { id: 'payment.bolt_benefit_3' },\n];\n\nconst BoltCreateAccountCheckbox: FunctionComponent = () => {\n    const labelContent = (\n        <>\n            <TranslatedHtml\n                data={agreementTranslationOptions}\n                id=\"payment.bolt_checkbox_agreement\"\n            />\n            <ul>\n                {benefitsList.map(({ id }, key) => (\n                    <li key={key}>\n                        <TranslatedString id={id} />\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-checkbox form-field--createAccount\"\n            labelContent={labelContent}\n            name=\"shouldCreateAccount\"\n        />\n    );\n};\n\nconst BoltCustomForm: FunctionComponent<BoltCustomFormProps> = ({\n    containerId,\n    showCreateAccountCheckbox,\n}) => {\n    return (\n        <div className=\"form-ccFields\">\n            <div className=\"form-field form-field--bolt-embed\" id={containerId} />\n            {showCreateAccountCheckbox ? <BoltCreateAccountCheckbox /> : null}\n        </div>\n    );\n};\n\nexport default BoltCustomForm;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltCustomForm from './BoltCustomForm';\n\nconst BoltEmbeddedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [showCreateAccountCheckbox, setShowCreateAccountCheckbox] = useState(false);\n\n    const boltEmbeddedContainerId = 'bolt-embedded';\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const initializeBoltPayment = useCallback(\n        (options: any) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    containerId: boltEmbeddedContainerId,\n                    useBigCommerceCheckout: true,\n                    onPaymentSelect: (hasBoltAccount: boolean) => {\n                        setShowCreateAccountCheckbox(!hasBoltAccount);\n\n                        if (hasBoltAccount) {\n                            setFieldValue('shouldCreateAccount', false);\n                        }\n                    },\n                },\n            }),\n        [checkoutService, boltEmbeddedContainerId, setFieldValue],\n    );\n\n    const renderCustomPaymentForm = useCallback(\n        () => (\n            <BoltCustomForm\n                containerId={boltEmbeddedContainerId}\n                showCreateAccountCheckbox={showCreateAccountCheckbox}\n            />\n        ),\n        [boltEmbeddedContainerId, showCreateAccountCheckbox],\n    );\n\n    const { getInstruments, isPaymentDataRequired } = checkoutState.data;\n    const { isInitializingPayment, isLoadingInstruments } = checkoutState.statuses;\n    const instruments = getInstruments(method) || [];\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId=\"boltEmbeddedOneClick\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeBoltPayment}\n            instruments={instruments}\n            isInitializing={isInitializingPayment()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={!isGuestCustomer}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltEmbeddedPaymentMethod;\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltClientPaymentMethod from './BoltClientPaymentMethod';\nimport BoltEmbeddedPaymentMethod from './BoltEmbeddedPaymentMethod';\n\nconst BoltPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const useBoltEmbedded = method.initializationData?.embeddedOneClickEnabled;\n\n    if (useBoltEmbedded) {\n        return (\n            <BoltEmbeddedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                method={method}\n                paymentForm={paymentForm}\n                {...rest}\n            />\n        );\n    }\n\n    return (\n        <BoltClientPaymentMethod\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            method={method}\n            paymentForm={paymentForm}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BoltPaymentMethod,\n    [{ id: 'bolt' }],\n);\n","import { FormField } from '@bigcommerce/checkout-sdk';\n\nimport { DynamicFormFieldType } from '@bigcommerce/checkout/ui';\n\nexport enum BraintreeAchFieldType {\n    BusinessName = 'businessName',\n    AccountType = 'accountType',\n    AccountNumber = 'accountNumber',\n    RoutingNumber = 'routingNumber',\n    OwnershipType = 'ownershipType',\n    FirstName = 'firstName',\n    LastName = 'lastName',\n}\n\nexport enum OwnershipTypes {\n    Personal = 'Personal',\n    Business = 'Business',\n}\n\nexport enum AccountTypes {\n    Savings = 'Savings',\n    Checking = 'Checking',\n}\n\nconst accountTypeOptions = [\n    {\n        value: AccountTypes.Savings,\n        label: AccountTypes.Savings,\n    },\n    {\n        value: AccountTypes.Checking,\n        label: AccountTypes.Checking,\n    },\n];\n\nexport const ownershipTypeOptions = [\n    {\n        value: OwnershipTypes.Personal,\n        label: OwnershipTypes.Personal,\n    },\n    {\n        value: OwnershipTypes.Business,\n        label: OwnershipTypes.Business,\n    },\n];\n\nexport const defaultBraintreeAchFormFields: FormField[] = [\n    {\n        name: BraintreeAchFieldType.AccountType,\n        custom: false,\n        id: BraintreeAchFieldType.AccountType,\n        label: 'Account Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: accountTypeOptions,\n        },\n    },\n    {\n        name: BraintreeAchFieldType.AccountNumber,\n        custom: false,\n        id: BraintreeAchFieldType.AccountNumber,\n        label: 'Account Number',\n        required: true,\n        max: 9,\n        min: 8,\n    },\n    {\n        name: BraintreeAchFieldType.RoutingNumber,\n        custom: false,\n        id: BraintreeAchFieldType.RoutingNumber,\n        label: 'Routing Number',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.OwnershipType,\n        custom: false,\n        id: BraintreeAchFieldType.OwnershipType,\n        label: 'Ownership Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: ownershipTypeOptions,\n        },\n    },\n];\n\nexport const personalBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.FirstName,\n        custom: false,\n        id: BraintreeAchFieldType.FirstName,\n        label: 'First Name',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.LastName,\n        custom: false,\n        id: BraintreeAchFieldType.LastName,\n        label: 'Last Name',\n        required: true,\n    },\n];\n\nexport const businessBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.BusinessName,\n        custom: false,\n        id: BraintreeAchFieldType.BusinessName,\n        label: 'Business Name',\n        required: true,\n    },\n];\n","import { AchInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBraintreeAchInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => instruments.filter(isAchInstrument), [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset &&\n        !!currentInstrument &&\n        !currentInstrument.trustedShippingAddress;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBraintreeAchInstruments;\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { useCallback } from 'react';\nimport { object, string, StringSchema } from 'yup';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormValues,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst useBraintreeAchValidation = (method: PaymentMethod) => {\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const getValidationSchema = () => {\n        const ownershipType = paymentForm.getFieldValue('ownershipType');\n        const formFields =\n            ownershipType === OwnershipTypes.Business\n                ? businessBraintreeAchFormFields\n                : personalBraintreeAchFormFields;\n\n        const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n            [BraintreeAchFieldType.FirstName]: 'address.first_name',\n            [BraintreeAchFieldType.LastName]: 'address.last_name',\n            [BraintreeAchFieldType.AccountNumber]: 'payment.errors.account_number',\n            [BraintreeAchFieldType.RoutingNumber]: 'payment.errors.routing_number',\n            [BraintreeAchFieldType.BusinessName]: 'payment.errors.business_name',\n        };\n\n        return object(\n            formFields.reduce(\n                (schema, { id, required }) => {\n                    if (required) {\n                        if (requiredFieldErrorTranslationIds[id]) {\n                            schema[id] = string().required(\n                                language.translate(\n                                    `${requiredFieldErrorTranslationIds[id]}_required_error`,\n                                ),\n                            );\n\n                            if (id === BraintreeAchFieldType.AccountNumber) {\n                                schema[id] = schema[id].matches(\n                                    /^\\d+$/,\n                                    language.translate('payment.errors.only_numbers_error', {\n                                        label: language.translate('payment.account_number_label'),\n                                    }),\n                                );\n                            }\n\n                            if (id === BraintreeAchFieldType.RoutingNumber) {\n                                schema[id] = schema[id]\n                                    .matches(\n                                        /^\\d+$/,\n                                        language.translate('payment.errors.only_numbers_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                        }),\n                                    )\n                                    .min(\n                                        8,\n                                        language.translate('customer.min_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            min: 8,\n                                        }),\n                                    )\n                                    .max(\n                                        9,\n                                        language.translate('customer.max_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            max: 9,\n                                        }),\n                                    );\n                            }\n                        }\n                    }\n\n                    return schema;\n                },\n                // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n                {} as { [key: string]: StringSchema },\n            ),\n        );\n    };\n\n    const validateBraintreeAchForm = useCallback(\n        async (braintreeAchFormValues: PaymentFormValues): Promise<boolean> => {\n            const {\n                accountNumber,\n                businessName,\n                routingNumber,\n                ownershipType,\n                firstName,\n                lastName,\n            } = braintreeAchFormValues;\n\n            const validationSchema = getValidationSchema();\n\n            paymentForm.setValidationSchema(method, validationSchema);\n\n            const [\n                isValidAccountNumber,\n                isValidRoutingNumber,\n                isValidFirstName,\n                isValidLastName,\n                isValidBusinessName,\n            ] = await Promise.all([\n                await validationSchema.fields.accountNumber?.isValid(accountNumber),\n                await validationSchema.fields.routingNumber?.isValid(routingNumber),\n                await validationSchema.fields.firstName?.isValid(firstName),\n                await validationSchema.fields.lastName?.isValid(lastName),\n                await validationSchema.fields.businessName?.isValid(businessName),\n            ]);\n\n            const isValidDepositoryName =\n                ownershipType === OwnershipTypes.Business\n                    ? isValidBusinessName\n                    : isValidFirstName && isValidLastName;\n\n            return isValidRoutingNumber && isValidAccountNumber && isValidDepositoryName;\n        },\n        [getValidationSchema],\n    );\n\n    const resetFormValidation = useCallback(() => {\n        paymentForm.setValidationSchema(method, null);\n    }, [paymentForm, method]);\n\n    return {\n        validateBraintreeAchForm,\n        resetFormValidation,\n    };\n};\n\nexport default useBraintreeAchValidation;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField } from '@bigcommerce/checkout/ui';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst isBraintreeAchFormFieldName = (fieldName: string): fieldName is BraintreeAchFieldType => {\n    return Object.values(BraintreeAchFieldType).includes(fieldName as BraintreeAchFieldType);\n};\n\nconst getTranslatedLabelByFieldName = (fieldName: string, language: LanguageService) => {\n    const braintreeAchFormLabelsMap = {\n        firstName: language.translate('address.first_name_label'),\n        lastName: language.translate('address.last_name_label'),\n        accountNumber: language.translate('payment.account_number_label'),\n        routingNumber: language.translate('payment.account_routing_label'),\n        businessName: language.translate('payment.business_name_label'),\n        ownershipType: language.translate('payment.ownership_type_label'),\n        accountType: language.translate('payment.account_type_label'),\n    };\n\n    return isBraintreeAchFormFieldName(fieldName)\n        ? braintreeAchFormLabelsMap[fieldName]\n        : fieldName;\n};\n\nconst BraintreeAchFormFields: FunctionComponent = () => {\n    const { language } = useLocale();\n    const { paymentForm } = usePaymentFormContext();\n    const { getFieldValue, setFieldValue } = paymentForm;\n\n    const ownershipTypeValue = getFieldValue(BraintreeAchFieldType.OwnershipType);\n    const fieldValues =\n        ownershipTypeValue === OwnershipTypes.Business\n            ? businessBraintreeAchFormFields\n            : personalBraintreeAchFormFields;\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n        },\n        [setFieldValue],\n    );\n\n    return (\n        <>\n            {fieldValues.map((field) => (\n                <DynamicFormField\n                    extraClass={`dynamic-form-field--${field.id}`}\n                    field={field}\n                    key={field.id}\n                    label={getTranslatedLabelByFieldName(field.name, language)}\n                    onChange={handleChange(field.id)}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default BraintreeAchFormFields;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nimport { OwnershipTypes } from '../constants';\n\nexport interface BraintreeAchMandateTextProps {\n    isInstrumentFeatureAvailable?: boolean;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchMandateText: FunctionComponent<BraintreeAchMandateTextProps> = ({\n    isInstrumentFeatureAvailable,\n    updateMandateText,\n}) => {\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const {\n        businessName,\n        accountType,\n        accountNumber,\n        routingNumber,\n        ownershipType,\n        firstName,\n        lastName,\n    } = paymentForm.getFormValues();\n\n    const fullName = `${String(firstName)} ${String(lastName)}`;\n\n    const depositoryName = ownershipType === OwnershipTypes.Business ? businessName : fullName;\n    const outstandingBalance = checkoutState.data.getCheckout()?.outstandingBalance;\n    const storeName = checkoutState.data.getConfig()?.storeProfile.storeName;\n    const symbol = checkoutState.data.getCart()?.currency.symbol;\n\n    const mandateTextTranslationKey = isInstrumentFeatureAvailable\n        ? 'payment.braintreeach_vaulting_mandate_text'\n        : 'payment.braintreeach_mandate_text';\n\n    const currentDate = new Date(Date.now()).toJSON().slice(0, 10); // yyyy-mm-dd\n    const formattedDate = currentDate.split('-').reverse().join('.'); // dd.mm.yyyy\n\n    const mandateTextTranslationProps = {\n        accountType: String(accountType).toLowerCase(),\n        accountNumber: String(accountNumber),\n        currentDate: formattedDate,\n        depositoryName: String(depositoryName),\n        routingNumber: String(routingNumber),\n        outstandingBalance: `${symbol || ''}${outstandingBalance || ''}`,\n        storeName: String(storeName),\n    };\n\n    const mandateText = language.translate(mandateTextTranslationKey, mandateTextTranslationProps);\n\n    useEffect(() => {\n        updateMandateText(mandateText);\n    }, [mandateText, updateMandateText]);\n\n    const handleChange = (value: boolean) => {\n        paymentForm.setFieldValue('orderConsent', value);\n    };\n\n    return (\n        <div className=\"mandate-text\" data-test=\"mandate-text\">\n            <CheckboxFormField\n                labelContent={mandateText}\n                name=\"orderConsent\"\n                onChange={handleChange}\n            />\n        </div>\n    );\n};\n\nexport default BraintreeAchMandateText;\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { AccountTypes, OwnershipTypes } from '../constants';\nimport useBraintreeAchInstruments from '../hooks/useBraintreeAchInstruments';\nimport useBraintreeAchValidation from '../hooks/useBraintreeAchValidation';\n\nimport BraintreeAchFormFields from './BraintreeAchFormFields';\nimport BraintreeAchMandateText from './BraintreeAchMandateText';\n\nexport interface BraintreeAchPaymentFormProps {\n    method: PaymentMethod;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchPaymentForm: FunctionComponent<BraintreeAchPaymentFormProps> = ({\n    method,\n    updateMandateText,\n}) => {\n    const [isValidForm, setIsValidForm] = useState(false);\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { disableSubmit, getFieldValue, getFormValues, setFieldValue } = paymentForm;\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    } = useBraintreeAchInstruments(method);\n    const { validateBraintreeAchForm, resetFormValidation } = useBraintreeAchValidation(method);\n\n    const resetFormValues = () => {\n        const { firstName, lastName } = checkoutState.data.getBillingAddress() || {};\n\n        const defaultFormValues = {\n            ownershipType: OwnershipTypes.Personal,\n            accountType: AccountTypes.Savings,\n            accountNumber: '',\n            routingNumber: '',\n            businessName: '',\n            firstName: firstName || '',\n            lastName: lastName || '',\n            shouldSaveInstrument: false,\n            shouldSetAsDefaultInstrument: false,\n            instrumentId: currentInstrument?.bigpayToken || '',\n            orderConsent: false,\n        };\n\n        for (const [key, value] of Object.entries(defaultFormValues)) {\n            setFieldValue(key, value);\n        }\n    };\n\n    useEffect(() => {\n        resetFormValues();\n    }, [currentInstrument?.bigpayToken]);\n\n    const shouldShowForm =\n        !shouldShowInstrumentFieldset || shouldCreateNewInstrument || shouldConfirmInstrument;\n    const shouldShowMandateTextCheckbox = shouldShowForm && isValidForm && !shouldConfirmInstrument;\n\n    useEffect(() => {\n        if (shouldShowForm) {\n            const validate = async () => {\n                const braintreeAchFormValues = getFormValues();\n                const isValid = await validateBraintreeAchForm(braintreeAchFormValues);\n\n                if (!isValid && getFieldValue('orderConsent')) {\n                    setFieldValue('orderConsent', false);\n                }\n\n                setIsValidForm(isValid);\n            };\n\n            void validate();\n        } else {\n            resetFormValidation();\n        }\n    }, [\n        getFormValues,\n        setFieldValue,\n        setIsValidForm,\n        shouldShowForm,\n        validateBraintreeAchForm,\n        resetFormValidation,\n    ]);\n\n    useEffect(() => {\n        const mandateTextConfirmationCheckboxValue = getFieldValue('orderConsent');\n\n        const inValidForInstrumentConfirmation = shouldConfirmInstrument && !isValidForm;\n        const inValidForDefaultTransactions =\n            shouldShowMandateTextCheckbox && !mandateTextConfirmationCheckboxValue;\n\n        const shouldDisableSubmit = shouldShowForm\n            ? inValidForInstrumentConfirmation || inValidForDefaultTransactions\n            : false;\n\n        disableSubmit(method, shouldDisableSubmit);\n    }, [disableSubmit, getFieldValue, isValidForm, method, shouldShowMandateTextCheckbox]);\n\n    return (\n        <div className=\"checkout-ach-form\" data-test=\"checkout-ach-form\">\n            {shouldShowInstrumentFieldset && (\n                <div className=\"checkout-ach-form__instrument\">\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                </div>\n            )}\n\n            {shouldConfirmInstrument && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            {shouldShowForm && <BraintreeAchFormFields />}\n\n            {isInstrumentFeatureAvailable && (\n                <StoreInstrumentFieldset\n                    instrumentId={currentInstrument?.bigpayToken}\n                    instruments={accountInstruments}\n                    isAccountInstrument\n                />\n            )}\n\n            {shouldShowMandateTextCheckbox && (\n                <BraintreeAchMandateText\n                    isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                    updateMandateText={updateMandateText}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeAchPaymentForm;\n","import React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeAchPaymentForm from './components/BraintreeAchPaymentForm';\n\nconst BraintreeAchPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const currentMandateTextRef = useRef('');\n    const updateMandateText = (currentMandateText: string) => {\n        currentMandateTextRef.current = currentMandateText;\n    };\n\n    useEffect(() => {\n        const initializePaymentOrThrow = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    braintreeach: {\n                        getMandateText: () => currentMandateTextRef.current,\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePaymentOrThrow();\n\n        return () => {\n            const deinitializePaymentOrThrow = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePaymentOrThrow();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = checkoutState.data.getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeAchPaymentForm\n                                method={method}\n                                updateMandateText={updateMandateText}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeAchPaymentMethod,\n    [{ id: 'braintreeach' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneCreditCardForm.scss';\n\ninterface BraintreeFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n}\n\nconst BraintreeFastlaneCreditCardForm: FunctionComponent<BraintreeFastlaneCreditCardFormProps> = ({\n    renderPayPalCardComponent,\n}) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#braintree-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"braintree-fastlane-cc-form-container\"\n            data-test=\"braintree-fastlane-cc-form-container\"\n            id=\"braintree-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BraintreeFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BraintreeFastlaneInstrumentsFormProps {\n    onChange: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n    selectedInstrument: CardInstrument;\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BraintreeFastlaneInstrumentsForm: FunctionComponent<\n    BraintreeFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"braintree-fastlane-instrument\"\n            data-test=\"braintree-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"braintree-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"braintree-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"braintree-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"braintree-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"braintree-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\nimport { useBraintreeFastlaneInstruments } from '../hooks/useBraintreeFastlaneInstruments';\n\nimport BraintreFastlaneCreditCardForm from './BraintreeFastlaneCreditCardForm';\nimport BraintreeFastlaneInstrumentsForm from './BraintreeFastlaneInstrumentsForm';\n\ninterface BraintreeFastlaneFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n}\n\nconst BraintreeFastlaneForm: FunctionComponent<BraintreeFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBraintreeFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\" id=\"braintree-fastlane\">\n            {shouldShowInstrumentsForm && (\n                <BraintreeFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BraintreFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBraintreeFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeFastlaneForm from './components/BraintreeFastlaneForm';\n\nimport './BraintreeFastlanePaymentMethod.scss';\n\nexport interface BraintreeFastlaneComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BraintreeFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const paypalFastlaneComponentRef = useRef<BraintreeFastlaneComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                braintreefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalFastlaneComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalFastlaneComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: Error) => {\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalFastlaneComponentRef?.current?.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalFastlaneComponentRef.current?.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeFastlanePaymentMethod,\n    [{ id: 'braintreeacceleratedcheckout' }],\n);\n","import BraintreeFastlanePaymentMethod from './BraintreeFastlanePaymentMethod';\n\nexport default BraintreeFastlanePaymentMethod;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreeLocalPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const methodId = method.id;\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                braintreelocalmethods: {\n                    container: '#checkout-payment-continue',\n                    buttonText: language.translate('payment.continue_with_brand', {\n                        brandName: methodId,\n                    }),\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeLocalPaymentMethod,\n    [{ gateway: 'braintreelocalmethods' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const initializeBraintreePaypalPaymentMethod = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const { onUnhandledError, language, method, paymentForm } = rest;\n\n            return checkoutService.initializePayment({\n                ...defaultOptions,\n                braintree: {\n                    containerId: '#checkout-payment-continue',\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError?.(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError?.(error);\n                        }\n                    },\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                },\n            });\n        },\n        [rest, checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBraintreePaypalPaymentMethod}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreePaypalPaymentMethod,\n    [{ id: 'braintreepaypal' }],\n);\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { number } from 'card-validator';\n\nimport { WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","import {\n    CheckoutSelectors,\n    CustomerRequestOptions,\n    LanguageService,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    getPaymentMethodName,\n    PaymentFormService,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\n\nexport interface WalletButtonPaymentMethodProps {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WalletButtonPaymentMethodDerivedProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentDataRequired: boolean;\n    isPaymentSelected: boolean;\n}\n\nclass WalletButtonPaymentMethodComponent extends Component<WalletButtonPaymentMethodProps> {\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            paymentForm: { disableSubmit },\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<WalletButtonPaymentMethodProps & WalletButtonPaymentMethodDerivedProps>,\n    ): void {\n        const { method } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n        const { method: prevMethod, isPaymentDataRequired: prevIsPaymentDataRequired } = prevProps;\n\n        if (\n            method.initializationData !== prevMethod.initializationData ||\n            isPaymentDataRequired !== prevIsPaymentDataRequired\n        ) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const { isInitializing = false } = this.props;\n        const { isPaymentSelected } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    {isPaymentSelected ? this.renderPaymentView() : this.renderSignInView()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const { buttonId, signInButtonClassName, signInButtonLabel, method, language } = this.props;\n\n        return (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n                {signInButtonLabel || (\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_in_action\"\n                    />\n                )}\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const { buttonId, editButtonClassName, editButtonLabel, shouldShowEditButton, method } =\n            this.props;\n        const { accountMask, cardName, cardType, expiryMonth, expiryYear } =\n            this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <>\n                {!!cardName && (\n                    <p data-test=\"payment-method-wallet-card-name\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_name_label\" />:\n                        </strong>{' '}\n                        {cardName}\n                    </p>\n                )}\n\n                {!!accountMask && !!cardType && (\n                    <p data-test=\"payment-method-wallet-card-type\">\n                        <strong>{`${cardType}:`}</strong> {accountMask}\n                    </p>\n                )}\n\n                {!!expiryMonth && !!expiryYear && (\n                    <p data-test=\"payment-method-wallet-card-expiry\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                        </strong>{' '}\n                        {`${expiryMonth}/${expiryYear}`}\n                    </p>\n                )}\n\n                {!!shouldShowEditButton && (\n                    <p>\n                        {\n                            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                            <a\n                                className={editButtonClassName}\n                                href=\"#\"\n                                id={buttonId}\n                                onClick={preventDefault()}\n                            >\n                                {editButtonLabel || (\n                                    <TranslatedString id=\"remote.select_different_card_action\" />\n                                )}\n                            </a>\n                        }\n                    </p>\n                )}\n\n                <SignOutLink method={method} onSignOut={this.handleSignOut} />\n            </>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const {\n            paymentForm: { disableSubmit },\n            method,\n        } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        if (normalizeWalletPaymentData(method.initializationData) || !isPaymentDataRequired) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const { signOutCustomer, method, onSignOut = noop, onSignOutError = noop } = this.props;\n\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n\n    private getWalletButtonPaymentMethodDerivedProps(): WalletButtonPaymentMethodDerivedProps {\n        const { checkoutState, method } = this.props;\n        const {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        } = checkoutState;\n        const billingAddress = getBillingAddress();\n        const checkout = getCheckout();\n\n        if (!billingAddress || !checkout) {\n            throw new Error('Unable to get checkout');\n        }\n\n        const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n        return {\n            ...walletPaymentData,\n            // FIXME: I'm not sure how this would work for non-English names.\n            cardName:\n                walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        };\n    }\n}\n\nexport default WalletButtonPaymentMethodComponent;\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    CheckoutButtonResolveId,\n    PaymentMethodId,\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst VisaCheckoutPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeVisaCheckoutPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const mergedOptions = {\n                ...defaultOptions,\n                braintreevisacheckout: {\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"visaCheckoutWalletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            editButtonClassName=\"v-button\"\n            initializePayment={initializeVisaCheckoutPayment}\n            method={method}\n            shouldShowEditButton\n            signInButtonClassName=\"v-button\"\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    VisaCheckoutPaymentMethod,\n    [{ id: PaymentMethodId.BraintreeVisaCheckout }],\n);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface TextFieldProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nexport interface TextFieldFormProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nconst TextField: FunctionComponent<TextFieldProps> = (props) => {\n    const { additionalClassName, autoComplete, labelId, name } = props;\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <TextInput {...field} autoComplete={autoComplete} id={field.name} />\n        ),\n        [autoComplete],\n    );\n\n    const labelContent = useMemo(() => <TranslatedString id={labelId} />, [labelId]);\n\n    return (\n        <FormField\n            additionalClassName={additionalClassName}\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nconst TextFieldForm: FunctionComponent<TextFieldFormProps> = ({\n    additionalClassName,\n    autoComplete,\n    labelId,\n    name,\n}) => (\n    <Fieldset>\n        <div className=\"form-ccFields\">\n            <TextField\n                additionalClassName={additionalClassName}\n                autoComplete={autoComplete}\n                labelId={labelId}\n                name={name}\n            />\n        </div>\n    </Fieldset>\n);\n\nexport default memo(TextFieldForm);\n","import { BillingAddress, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, {\n    FunctionComponent,\n    SyntheticEvent,\n    useCallback,\n    useContext,\n    useEffect,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nimport TextFieldForm from './checkoutcomFieldsets/TextFieldForm';\n\ninterface CheckoutcomAPMFormProps {\n    method: PaymentMethod;\n    debtor: BillingAddress;\n}\n\ninterface Issuer {\n    bic: string;\n    name: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: string;\n}\n\ninterface DropdownButtonProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface OptionButtonProps {\n    className?: string;\n    issuer: Issuer;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\ninterface SepaCreditor {\n    sepaCreditorAddress: string;\n    sepaCreditorCity: string;\n    sepaCreditorCompanyName: string;\n    sepaCreditorCountry: string;\n    sepaCreditorIdentifier: string;\n    sepaCreditorPostalCode: string;\n}\n\nconst Sepa: FunctionComponent<CheckoutcomAPMFormProps> = ({ method, debtor }) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const creditor: SepaCreditor = method.initializationData.sepaCreditor;\n\n    useEffect(() => {\n        paymentContext?.paymentForm.disableSubmit(method, true);\n\n        return () => paymentContext?.paymentForm.disableSubmit(method, false);\n    }, [paymentContext, method]);\n\n    function toggleSubmitButton(isChecked: boolean) {\n        paymentContext?.paymentForm.disableSubmit(method, !isChecked);\n    }\n\n    return (\n        <>\n            <div className=\"checkoutcom-sepa-column-container\">\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_creditor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{creditor.sepaCreditorCompanyName}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorAddress}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${creditor.sepaCreditorPostalCode} ${creditor.sepaCreditorCity}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorCountry}</p>\n                    <br />\n                    <p className=\"checkoutcom-sepa-line\">\n                        <TranslatedString\n                            data={{ creditorId: creditor.sepaCreditorIdentifier }}\n                            id=\"payment.checkoutcom_sepa_creditor_id\"\n                        />\n                    </p>\n                </div>\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_debtor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{`${debtor.firstName} ${debtor.lastName}`}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.address1}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${debtor.postalCode} ${debtor.city}, ${debtor.stateOrProvinceCode}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.countryCode}</p>\n                </div>\n            </div>\n            <p className=\"checkoutcom-sepa-line\">\n                <TranslatedString id=\"payment.checkoutcom_sepa_payment_type\" />\n            </p>\n            <br />\n\n            <TextFieldForm\n                additionalClassName=\"form-field--iban\"\n                autoComplete=\"iban\"\n                labelId=\"payment.sepa_account_number\"\n                name=\"iban\"\n            />\n            <CheckboxFormField\n                labelContent={\n                    <TranslatedString\n                        data={{ creditorName: creditor.sepaCreditorCompanyName }}\n                        id=\"payment.checkoutcom_sepa_mandate_disclaimer\"\n                    />\n                }\n                name=\"sepaMandate\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onChange={toggleSubmitButton}\n            />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    form,\n    selectedIssuer,\n}) => {\n    const Input = useCallback(() => <input {...restField} type=\"hidden\" />, [restField]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void form.setFieldValue(restField.name, selectedIssuer);\n    }, [value, form, selectedIssuer, restField.name]);\n\n    return <Input />;\n};\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...restProps }) => {\n    const { bic, name } = issuer;\n\n    return (\n        <button data-bic={bic} type=\"button\" {...restProps}>\n            <div className=\"instrumentSelect-details\">{`${bic} / ${name}`}</div>\n        </button>\n    );\n};\n\nconst DropdownButton: FunctionComponent<DropdownButtonProps> = ({ selectedIssuer }) => {\n    if (!selectedIssuer) {\n        return (\n            <button\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                type=\"button\"\n            >\n                <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n                    <div className=\"instrumentSelect-card\">Your bank</div>\n                </div>\n            </button>\n        );\n    }\n\n    return (\n        <OptionButton\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            issuer={selectedIssuer}\n        />\n    );\n};\n\nconst Fawry: FunctionComponent<CheckoutcomAPMFormProps> = () => {\n    return (\n        <>\n            <TextFieldForm\n                additionalClassName=\"form-field--customerMobile\"\n                autoComplete=\"tel\"\n                labelId=\"payment.checkoutcom_fawry_customer_mobile_label\"\n                name=\"customerMobile\"\n            />\n            <TextFieldForm\n                additionalClassName=\"form-field--customerEmail\"\n                autoComplete=\"email\"\n                labelId=\"payment.checkoutcom_fawry_customer_email_label\"\n                name=\"customerEmail\"\n            />\n        </>\n    );\n};\n\nconst Ideal: FunctionComponent<CheckoutcomAPMFormProps> = ({ method }) => {\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer | undefined>();\n    const [bicValue, setBicValue] = useState<string>('');\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={bicValue} />,\n        [bicValue],\n    );\n\n    const issuers: Issuer[] = method.initializationData.idealIssuers;\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        // eslint-disable-next-line no-underscore-dangle\n        const _selectedIssuer = issuers.find(({ bic }) => bic === currentTarget.dataset.bic);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n        setBicValue(_selectedIssuer.bic);\n    };\n\n    const issuersList = (\n        <ul className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\">\n            {issuers.map((issuer) => (\n                <li className=\"instrumentSelect-option dropdown-menu-item\" key={issuer.bic}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <DropdownButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"bic\" />\n        </>\n    );\n};\n\nconst checkoutcomCustomFormFields: CheckoutcomCustomFormFields = {\n    fawry: Fawry,\n    sepa: Sepa,\n    ideal: Ideal,\n};\n\ninterface CheckoutcomCustomFormFields {\n    [key: string]: React.FunctionComponent<CheckoutcomAPMFormProps>;\n}\n\nexport const ccDocumentField = ({ method }: CheckoutcomAPMFormProps) => (\n    <TextFieldForm\n        additionalClassName=\"form-field--ccDocument\"\n        autoComplete=\"cc-document\"\n        labelId={`payment.checkoutcom_document_label_${method.id}`}\n        name=\"ccDocument\"\n    />\n);\n\nexport default checkoutcomCustomFormFields;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { boolean, object, ObjectSchema, string } from 'yup';\n\nimport {\n    DocumentOnlyCustomFormFieldsetValues,\n    FawryCustomFormFieldsetValues,\n    IdealCustomFormFieldsetValues,\n    SepaCustomFormFieldsetValues,\n} from './CheckoutcomFormValues';\n\nexport type checkoutcomCustomPaymentMethods = 'fawry' | 'sepa';\nexport type documentPaymentMethods = 'oxxo' | 'qpay' | 'boleto' | 'ideal';\nexport type checkoutcomPaymentMethods = documentPaymentMethods | checkoutcomCustomPaymentMethods;\nexport const checkoutcomPaymentMethodsArray = ['fawry', 'sepa', 'oxxo', 'qpay', 'boleto', 'ideal'];\nexport interface CustomValidationSchemaOptions {\n    paymentMethod: checkoutcomPaymentMethods;\n    language: LanguageService;\n}\n\nconst checkoutComShemas: {\n    [key in checkoutcomPaymentMethods]: (language: LanguageService) => any;\n} = {\n    oxxo: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_oxxo'))\n            .length(18, language.translate('payment.checkoutcom_document_invalid_error_oxxo')),\n    }),\n    qpay: (language: LanguageService) => ({\n        ccDocument: string()\n            .notRequired()\n            .max(32, language.translate('payment.checkoutcom_document_invalid_error_qpay')),\n    }),\n    boleto: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .min(11, language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .max(14, language.translate('payment.checkoutcom_document_invalid_error_boleto')),\n    }),\n    sepa: (language: LanguageService) => ({\n        iban: string().required(language.translate('payment.sepa_account_number_required')),\n        sepaMandate: boolean().required(language.translate('payment.sepa_mandate_required')),\n    }),\n    ideal: (language: LanguageService) => ({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    }),\n    fawry: (language: LanguageService) => ({\n        customerMobile: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'))\n            .matches(\n                new RegExp(`^\\\\d{11}$`),\n                language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'),\n            ),\n        customerEmail: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error'))\n            .email(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error')),\n    }),\n};\n\nexport default memoize(function getCheckoutcomValidationSchemas({\n    paymentMethod,\n    language,\n}: CustomValidationSchemaOptions): ObjectSchema<\n    | DocumentOnlyCustomFormFieldsetValues\n    | FawryCustomFormFieldsetValues\n    | IdealCustomFormFieldsetValues\n    | SepaCustomFormFieldsetValues\n> {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return object(checkoutComShemas[paymentMethod](language));\n});\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport checkoutcomCustomFormFields, { ccDocumentField } from './CheckoutcomCustomFormFields';\nimport { checkoutcomPaymentMethods, getCheckoutcomValidationSchemas } from './checkoutcomFieldsets';\nimport { checkoutcomPaymentMethodsArray } from './checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas';\n\nexport interface CheckoutcomCustomPaymentMethodProps\n    extends Omit<CreditCardPaymentMethodProps, 'cardFieldset' | 'cardValidationSchema'> {\n    checkoutCustomMethod: string;\n}\n\nconst isCheckoutcomPaymentMethod = (methodId: string): methodId is checkoutcomPaymentMethods => {\n    return Object.values(checkoutcomPaymentMethodsArray).includes(methodId);\n};\nconst CheckoutcomCustomPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    method,\n    checkoutService,\n    checkoutState,\n    ...rest\n}) => {\n    const { getConfig } = checkoutState.data;\n    const isIdealHostedPageExperimentOn =\n        getConfig()?.checkoutSettings.features['PI-2979.checkoutcom_enable_ideal_hosted_page'];\n\n    const checkoutCustomMethod = method.id;\n    const CheckoutcomCustomFieldset =\n        checkoutCustomMethod in checkoutcomCustomFormFields\n            ? checkoutcomCustomFormFields[checkoutCustomMethod]\n            : ccDocumentField;\n\n    const billingAddress = checkoutState.data.getBillingAddress();\n\n    if (\n        !isCheckoutcomPaymentMethod(checkoutCustomMethod) ||\n        (checkoutCustomMethod === 'ideal' && isIdealHostedPageExperimentOn)\n    ) {\n        return null;\n    }\n\n    return (\n        <CreditCardPaymentMethodComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            {...rest}\n            cardFieldset={<CheckoutcomCustomFieldset debtor={billingAddress!} method={method} />}\n            cardValidationSchema={getCheckoutcomValidationSchemas({\n                paymentMethod: checkoutCustomMethod,\n                language,\n            })}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    CheckoutcomCustomPaymentMethod,\n    [\n        { gateway: 'checkoutcom', id: 'ideal' },\n        { gateway: 'checkoutcom', id: 'fawry' },\n        { gateway: 'checkoutcom', id: 'oxxo' },\n        { gateway: 'checkoutcom', id: 'boleto' },\n        { gateway: 'checkoutcom', id: 'sepa' },\n        { gateway: 'checkoutcom', id: 'qpay' },\n        { gateway: 'checkoutcom', id: 'p24' },\n    ],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ClearpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ClearpayPaymentMethod,\n    [{ gateway: 'clearpay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    CheckoutButtonResolveId,\n    PaymentMethodId,\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst GooglePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeGooglePayPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const loadingContainerId = 'checkout-app';\n            const mergedOptions = {\n                ...defaultOptions,\n                [PaymentMethodId.AdyenV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AdyenV3GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AuthorizeNetGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BNZGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BigCommercePaymentsGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BraintreeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.PayPalCommerceGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeUPEGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CybersourceV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.OrbitalGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CheckoutcomGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.WorldpayAccessGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.TdOnlineMartGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeOCSGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"walletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeGooglePayPayment}\n            method={method}\n            shouldShowEditButton\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    GooglePayPaymentMethod,\n    [\n        { id: PaymentMethodId.AdyenV2GooglePay },\n        { id: PaymentMethodId.AdyenV3GooglePay },\n        { id: PaymentMethodId.AuthorizeNetGooglePay },\n        { id: PaymentMethodId.BNZGooglePay },\n        { id: PaymentMethodId.BraintreeGooglePay },\n        { id: PaymentMethodId.PayPalCommerceGooglePay },\n        { id: PaymentMethodId.BigCommercePaymentsGooglePay },\n        { id: PaymentMethodId.CheckoutcomGooglePay },\n        { id: PaymentMethodId.CybersourceV2GooglePay },\n        { id: PaymentMethodId.OrbitalGooglePay },\n        { id: PaymentMethodId.StripeGooglePay },\n        { id: PaymentMethodId.StripeUPEGooglePay },\n        { id: PaymentMethodId.WorldpayAccessGooglePay },\n        { id: PaymentMethodId.TdOnlineMartGooglePay },\n        { id: PaymentMethodId.StripeOCSGooglePay },\n    ],\n);\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from './components';\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n    const {\n        config: { cardCode, showCardHolderName },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId = '';\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: isCardHolderNameRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_name_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccName'),\n                                }\n                              : undefined,\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const hostedFieldset = (\n        <HostedCreditCardFieldset\n            additionalFields={\n                method.config.requireCustomerCode && (\n                    <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                )\n            }\n            cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n            cardExpiryId={getHostedFieldId('ccExpiry')}\n            cardNameId={isCardHolderNameRequired ? getHostedFieldId('ccName') : undefined}\n            cardNumberId={getHostedFieldId('ccNumber')}\n            focusedFieldType={focusedFieldType}\n        />\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: {\n                        form: await getHostedFormOptions(selectedInstrument),\n                        bigpayToken: selectedInstrument?.bigpayToken,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const props = {\n        checkoutService,\n        checkoutState,\n        paymentForm,\n        language,\n        method,\n        onUnhandledError,\n    };\n\n    return (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedCreditCardPaymentMethod,\n    [\n        {\n            id: 'hosted-credit-card',\n        },\n        { id: 'credit_card', gateway: 'bluesnapdirect' },\n        { id: 'tdonlinemart' },\n    ],\n);\n","import { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaPayment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarna: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaPaymentMethod,\n    [{ id: 'klarna' }],\n);\n","import { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaV2Payment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarnav2: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaV2PaymentMethod,\n    [{ gateway: 'klarna' }],\n);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FieldProps, useField } from 'formik';\nimport React, { FunctionComponent, SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface MollieCustomCardFormProps {\n    method: PaymentMethod;\n}\n\nexport interface Issuer {\n    name: string;\n    image: {\n        size1x: string;\n    };\n    id: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface SelecteIssuerProp {\n    selectedIssuer: Issuer;\n}\n\ninterface OptionButtonProps {\n    issuer: Issuer;\n    className?: string;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\nconst MollieAPMCustomForm: FunctionComponent<MollieCustomCardFormProps & WithLanguageProps> = ({\n    method,\n    language,\n}) => {\n    const issuers: Issuer[] = method.initializationData?.paymentMethodsResponse;\n\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer>({\n        name: language.translate('payment.select_your_bank'),\n        id: '',\n        image: { size1x: '' },\n    });\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={selectedIssuer} />,\n        [selectedIssuer],\n    );\n\n    if (!issuers || issuers.length === 0) {\n        return <></>;\n    }\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        const _selectedIssuer = issuers.find(({ id }) => id === currentTarget.dataset.id);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n    };\n\n    const issuersList = (\n        <ul\n            className=\"dropdown-menu instrumentSelect-dropdownMenu mollie-instrument-card\"\n            id=\"issuersDropdown\"\n        >\n            {issuers.map((issuer) => (\n                <li className=\"dropdown-menu-item dropdown-menu-item--select\" key={issuer.id}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <IssuerSelectButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"issuer\" />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    selectedIssuer,\n}) => {\n    const [field, _, helpers] = useField(restField.name);\n    const Input = useCallback(() => <input {...field} type=\"hidden\" />, [field]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void helpers.setValue(selectedIssuer?.id);\n    }, [value, selectedIssuer, helpers]);\n\n    return <Input />;\n};\n\nexport const IssuerSelectButton: FunctionComponent<SelecteIssuerProp> = ({ selectedIssuer }) => (\n    <a\n        className=\"instrumentSelect instrumentSelect-card button dropdown-button dropdown-toogle--select\"\n        href=\"#\"\n        id=\"issuerToggle\"\n        onClick={preventDefault()}\n    >\n        {selectedIssuer.name}\n    </a>\n);\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...props }) => {\n    const { name, image, id } = issuer;\n\n    return (\n        <a className=\"instrumentSelect-details mollie-instrument-list\" {...props} data-id={id}>\n            <label className=\"mollie-instrument-left\">{name}</label>\n            <img alt={name} data-test=\"cart-item-image\" src={image.size1x} />\n        </a>\n    );\n};\n\nexport default withLanguage(MollieAPMCustomForm);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport MollieAPMCustomForm from './MollieAPMCustomForm';\n\nexport interface MollieCustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n        cardHolderElementOptions: {\n            containerId: string;\n        };\n    };\n    isCreditCard: boolean;\n    method: PaymentMethod;\n}\n\nconst MollieCustomCardForm: React.FunctionComponent<MollieCustomCardFormProps> = ({\n    options,\n    isCreditCard,\n    method,\n}) =>\n    !isCreditCard ? (\n        <MollieAPMCustomForm method={method} />\n    ) : (\n        <div className=\"form-ccFields\">\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardNumberElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_number_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input', 'has-icon')}\n                    data-cse=\"CardNumber\"\n                    id={options.cardNumberElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardHolderElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_name_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"CardHolder\"\n                    id={options.cardHolderElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside', 'mollie-paddingRight')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardCvcElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                    <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                        <span className=\"has-tip\">\n                            <IconHelp />\n                        </span>\n                    </TooltipTrigger>\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"SecurityCode\"\n                    id={options.cardCvcElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardExpiryElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"ExpiryDate\"\n                    id={options.cardExpiryElementOptions.containerId}\n                />\n            </div>\n        </div>\n    );\n\nexport default MollieCustomCardForm;\n","import {\n    CardInstrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn, some } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useContext, useState } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport MollieCustomCardForm from './MollieCustomCardForm';\n\nexport enum MolliePaymentMethodType {\n    creditcard = 'credit_card',\n}\n\nconst MolliePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutState,\n    checkoutService,\n    language,\n    paymentForm,\n    ...props\n}) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const localeContext = useContext(LocaleContext);\n    const containerId = `mollie-${method.method}`;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const {\n        setFieldTouched,\n        setFieldValue,\n        setSubmitted,\n        submitForm,\n        setSubmit,\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n    const initializeMolliePayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const mollieElements = getMolliesElementOptions();\n\n            return checkoutService.initializePayment({\n                ...options,\n                mollie: {\n                    containerId,\n                    cardNumberId: mollieElements.cardNumberElementOptions.containerId,\n                    cardCvcId: mollieElements.cardCvcElementOptions.containerId,\n                    cardHolderId: mollieElements.cardHolderElementOptions.containerId,\n                    cardExpiryId: mollieElements.cardExpiryElementOptions.containerId,\n                    styles: {\n                        base: {\n                            color: '#333333',\n                            '::placeholder': {\n                                color: '#999999',\n                            },\n                        },\n                        valid: {\n                            color: '#090',\n                        },\n                        invalid: {\n                            color: '#D14343',\n                        },\n                    },\n                    unsupportedMethodMessage: localeContext?.language.translate(\n                        'payment.mollie_unsupported_method_error',\n                    ),\n                    disableButton: (disabled: boolean) => {\n                        if (paymentContext) {\n                            disableSubmit(method, disabled);\n                        }\n                    },\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            disableSubmit,\n            localeContext?.language,\n            getHostedFormOptions,\n            paymentContext,\n            method,\n        ],\n    );\n\n    const getMolliesElementOptions = () => {\n        return {\n            cardNumberElementOptions: {\n                containerId: 'mollie-card-number-component-field',\n            },\n            cardExpiryElementOptions: {\n                containerId: 'mollie-card-expiry-component-field',\n            },\n            cardCvcElementOptions: {\n                containerId: 'mollie-card-cvc-component-field',\n            },\n            cardHolderElementOptions: {\n                containerId: 'mollie-card-holder-component-field',\n            },\n        };\n    };\n\n    function renderCustomPaymentForm() {\n        const options = getMolliesElementOptions();\n\n        return (\n            <MollieCustomCardForm isCreditCard={isCreditCard()} method={method} options={options} />\n        );\n    }\n\n    function isCreditCard(): boolean {\n        return method.method === MolliePaymentMethodType.creditcard;\n    }\n\n    function validateInstrument(_shouldShowNumber: boolean, selectedInstrument: CardInstrument) {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    }\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...props}\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hideContentWhenSignedOut\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMolliePayment}\n            instruments={instruments}\n            isAccountInstrument={!isCreditCard()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument={true}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n            validateInstrument={validateInstrument}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MolliePaymentMethod,\n    [{ gateway: 'mollie' }, { gateway: 'mollie', id: 'applepay' }],\n);\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    LanguageService,\n    LegacyHostedFormOptions,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n","import { CardInstrument, PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst MonerisPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const containerId = `moneris-iframe-container`;\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const initializeMonerisPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const paymentConfig = {\n                ...options,\n                moneris: {\n                    containerId,\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            };\n\n            return checkoutService.initializePayment(paymentConfig);\n        },\n        [containerId, getHostedFormOptions, checkoutService],\n    );\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMonerisPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n            validateInstrument={validateInstrument}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MonerisPaymentMethod,\n    [{ id: 'moneris' }],\n);\n","import { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst OfflinePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    return null;\n};\n\nexport default toResolvableComponent(OfflinePaymentMethod, [\n    {\n        type: 'PAYMENT_TYPE_OFFLINE',\n    },\n]);\n","import {\n    AccountInstrument,\n    HostedInstrument,\n    PayPalCommerceAlternativeMethodsPaymentOptions,\n    PayPalCommerceCreditPaymentInitializeOptions,\n    PayPalCommercePaymentInitializeOptions,\n    PayPalCommerceVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype PayPalCommerceProvidersPaymentInitializeOptions =\n    PayPalCommerceAlternativeMethodsPaymentOptions &\n        PayPalCommerceCreditPaymentInitializeOptions &\n        PayPalCommercePaymentInitializeOptions &\n        PayPalCommerceVenmoPaymentInitializeOptions;\n\ninterface PayPalCommercePaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<PayPalCommerceProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst PayPalCommercePaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & PayPalCommercePaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default PayPalCommercePaymentMethodComponent;\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const { id } = method;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"paypalcommercealternativemethods\"\n            {...props}\n        >\n            <div className={`widget widget--${id} payment-widget`} id={widgetContainerId} />\n        </PayPalCommercePaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceAPMsPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceCreditPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsKey=\"paypalcommercecredit\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditPaymentMethod,\n    [{ id: 'paypalcommercecredit' }],\n);\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst PayPalCommerceCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializePayPalCommerceCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    paypalcommercecreditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching PayPal Commerce Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditCardPaymentMethod,\n    [{ id: 'paypalcommercecreditcards' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneCreditCardForm.scss';\n\ninterface PayPalCommerceFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst PayPalCommerceFastlaneCreditCardForm: FunctionComponent<\n    PayPalCommerceFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#paypal-commerce-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-cc-form-container\"\n            data-test=\"paypal-commerce-fastlane-cc-form-container\"\n            id=\"paypal-commerce-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default PayPalCommerceFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface PayPalCommerceFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst PayPalCommerceFastlaneInstrumentsForm: FunctionComponent<\n    PayPalCommerceFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-instrument\"\n            data-test=\"paypal-commerce-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"paypal-commerce-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"paypal-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"paypal-commerce-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"paypal-commerce-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"paypal-commerce-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { usePayPalCommerceFastlaneInstruments } from '../hooks/usePayPalCommerceFastlaneInstruments';\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport PayPalCommerceFastlaneCreditCardForm from './PayPalCommerceFastlaneCreditCardForm';\nimport PayPalCommerceFastlaneInstrumentsForm from './PayPalCommerceFastlaneInstrumentsForm';\n\ninterface PayPalCommerceFastlaneFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst PayPalCommerceFastlaneForm: FunctionComponent<PayPalCommerceFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        usePayPalCommerceFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const usePayPalCommerceFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommerceFastlaneForm from './components/PayPalCommerceFastlaneForm';\n\nimport './PayPalCommerceFastlanePaymentMethod.scss';\nimport isErrorWithTranslationKey from './is-error-with-translation-key';\n\nexport interface PayPalFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst PayPalCommerceFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<PayPalFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                paypalcommercefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <PayPalCommerceFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceFastlanePaymentMethod,\n    [{ id: 'paypalcommerceacceleratedcheckout' }],\n);\n","import PayPalCommerceFastlanePaymentMethod from './PayPalCommerceFastlanePaymentMethod';\n\nexport default PayPalCommerceFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import { AccountInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst usePaypalCommerceInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default usePaypalCommerceInstrument;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nimport usePaypalCommerceInstrument from './hooks/usePaypalCommerceInstruments';\n\nconst PayPalCommercePaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = usePaypalCommerceInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <PayPalCommercePaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"paypalcommerce\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </PayPalCommercePaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommercePaymentMethod,\n    [{ id: 'paypalcommerce' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent providerOptionsKey=\"paypalcommercevenmo\" {...props} />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceVenmoPaymentMethod,\n    [{ id: 'paypalcommercevenmo' }],\n);\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, StringSchema } from 'yup';\n\nexport default memoize(function getPaypalCommerceRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    CountryData,\n    CustomError,\n    getCountryData,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    SpecificError,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getPaypalCommerceRatePayValidationSchema from './validation-schema/getPaypalCommerceRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst PaypalCommerceRatePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    const getCountryInfo = (): CountryData | undefined => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        if (billing && !billing.country) {\n            return getCountryData(billing.country)[0];\n        }\n    };\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                paypalcommerceratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => {\n                        // TODO: update PPCP Ratepay initialization data with getFieldsValues optional return data in checkout-sdk\n                        const defaultFieldValues = {\n                            ratepayBirthDate: {\n                                getDate: () => 0,\n                                getMonth: () => 0,\n                                getFullYear: () => 0,\n                            },\n                            ratepayPhoneCountryCode: '',\n                            ratepayPhoneNumber: '',\n                        };\n\n                        return {\n                            ...defaultFieldValues,\n                            ...fieldsValues.current,\n                        };\n                    },\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }): void => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    const validationSchema = useMemo(\n        () =>\n            getPaypalCommerceRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    useEffect(() => {\n        const countryInfo = getCountryInfo();\n\n        if (countryInfo) {\n            setFieldValue('ratepayPhoneCountryCode', countryInfo.dialCode);\n        }\n    }, []);\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const formContextProps = {\n        isSubmitted: isSubmitted(),\n        setSubmitted,\n    };\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={formContextProps}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalCommerceRatePayPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods', id: 'ratepay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaypalExpressPaymentMethodProps {\n    isEmbedded?: boolean;\n}\n\nconst PaypalExpressPaymentMethod: FunctionComponent<\n    PaymentMethodProps & PaypalExpressPaymentMethodProps\n> = ({ checkoutService, isEmbedded = false, ...rest }) => {\n    const initializePaypalExpressPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                paypalexpress: {\n                    useRedirectFlow: isEmbedded,\n                },\n            }),\n        [checkoutService, isEmbedded],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePaypalExpressPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalExpressPaymentMethod,\n    [{ id: 'paypalexpress' }],\n);\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    CheckoutService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport {\n    CardInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface SquareV2FormProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    containerId: string;\n    deinitializePayment: () => Promise<void>;\n    initializePayment: () => Promise<void>;\n    method: PaymentMethod;\n}\n\nconst SquareV2Form: FunctionComponent<SquareV2FormProps> = ({\n    checkoutService,\n    checkoutState,\n    containerId,\n    deinitializePayment,\n    initializePayment,\n    method,\n}) => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n\n    const { getCustomer, getInstruments } = checkoutState.data;\n    const isSignedIn = getCustomer()?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n\n    useEffect(() => {\n        if (isInstrumentFeatureAvailable) {\n            void checkoutService.loadInstruments();\n        }\n    }, [checkoutService, isInstrumentFeatureAvailable]);\n\n    const instruments = useMemo(() => getInstruments(method) || [], [getInstruments, method]);\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n\n    const getDefaultInstrumentId = useCallback(() => {\n        if (isAddingNewCard) {\n            return;\n        }\n\n        if (instruments.length > 0) {\n            const defaultInstrument =\n                instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n            return defaultInstrument.bigpayToken;\n        }\n    }, [instruments, isAddingNewCard]);\n\n    useEffect(() => {\n        const defaultInstrumentId = getDefaultInstrumentId() || undefined;\n\n        setSelectedInstrumentId(defaultInstrumentId);\n    }, [getDefaultInstrumentId, instruments]);\n\n    const { setFieldValue } = usePaymentFormContext().paymentForm;\n\n    const handleSelectInstrument: (id: string) => void = (id) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    };\n\n    const handleDeleteInstrument: (id: string) => void = (id) => {\n        if (instruments.length === 0) {\n            setIsAddingNewCard(true);\n            setSelectedInstrumentId(undefined);\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            setSelectedInstrumentId(getDefaultInstrumentId());\n\n            setFieldValue('instrumentId', getDefaultInstrumentId());\n        }\n    };\n\n    const handleUseNewCard: () => void = () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        void deinitializePayment();\n\n        void initializePayment();\n    };\n\n    const renderPlaceholderFields = () => {\n        return (\n            <div data-test=\"squarev2_placeholder_form\" style={{ display: 'none' }}>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-label optimizedCheckout-form-label\"\n                        id=\"messageIsDefault\"\n                    />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsDefault\" />\n                </div>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-input optimizedCheckout-form-input form-input--focus optimizedCheckout-form-input--focus\"\n                        id=\"inputIsFocus\"\n                    />\n                </div>\n                <div className=\"form-field form-field--error\">\n                    <div className=\"form-inlineMessage\" id=\"messageIsError\" />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsError\" />\n                </div>\n            </div>\n        );\n    };\n\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    return (\n        <LoadingOverlay\n            data-test=\"squarev2_loading_overlay\"\n            hideContentWhenLoading\n            isLoading={isLoadingInstruments()}\n        >\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                        instruments={instruments as CardInstrument[]}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={selectedInstrumentId || getDefaultInstrumentId()}\n                    />\n                )}\n                <div\n                    className={classNames('widget', `widget--${method.id}`, 'payment-widget')}\n                    data-test={containerId}\n                    style={{\n                        display: !shouldShowCreditCardFieldset ? 'none' : undefined,\n                    }}\n                    tabIndex={-1}\n                >\n                    {renderPlaceholderFields()}\n                    <div id={containerId} />\n                </div>\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={selectedInstrumentId}\n                        instruments={instruments}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default SquareV2Form;\n","import { difference } from 'lodash';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport SquareV2Form from './SquareV2Form';\n\nconst SquareV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n}) => {\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const container = document.querySelector<HTMLDivElement>(`#${id}`);\n\n        if (!container) {\n            throw new Error(\n                `Unable to retrieve input styles as the provided container ID \"${id}\" is not valid.`,\n            );\n        }\n\n        return getAppliedStyles(container, properties);\n    };\n\n    const copyStylesFromDummyFormFields = useCallback(() => {\n        const styleProps = [\n            'backgroundColor',\n            'borderColor',\n            'borderRadius',\n            'borderWidth',\n            'color',\n            'fontSize',\n            'fontWeight',\n        ];\n\n        return {\n            default: {\n                message: getStylesFromElement('messageIsDefault', ['color']),\n                input: getStylesFromElement('inputIsDefault', styleProps),\n            },\n            focus: {\n                input: getStylesFromElement(\n                    'inputIsFocus',\n                    difference(styleProps, ['borderRadius']),\n                ),\n            },\n            error: {\n                message: getStylesFromElement('messageIsError', ['color']),\n                input: getStylesFromElement('inputIsError', [\n                    'borderColor',\n                    'borderWidth',\n                    'color',\n                ]),\n            },\n        };\n    }, []);\n\n    const mapToSquareStyles = useCallback(\n        (styles: ReturnType<typeof copyStylesFromDummyFormFields>) => {\n            const { borderColor, borderRadius, borderWidth, ...input } = styles.default.input;\n            const {\n                borderColor: borderColorIsFocus,\n                borderWidth: borderWidthIsFocus,\n                ...inputIsFocus\n            } = styles.focus.input;\n            const {\n                borderColor: borderColorIsError,\n                borderWidth: borderWidthIsError,\n                color: colorIsError,\n            } = styles.error.input;\n\n            return {\n                input,\n                'input.is-focus': {\n                    ...inputIsFocus,\n                },\n                'input.is-error': {\n                    color: colorIsError,\n                },\n                '.input-container': {\n                    borderColor,\n                    borderRadius,\n                    borderWidth,\n                },\n                '.input-container.is-focus': {\n                    borderColor: borderColorIsFocus,\n                    borderWidth: borderWidthIsFocus,\n                },\n                '.input-container.is-error': {\n                    borderColor: borderColorIsError,\n                    borderWidth: borderWidthIsError,\n                },\n                '.message-text': {\n                    color: styles.default.message.color,\n                },\n                '.message-icon': {\n                    color: styles.default.message.color,\n                },\n                '.message-text.is-error': {\n                    color: styles.error.message.color,\n                },\n                '.message-icon.is-error': {\n                    color: styles.error.message.color,\n                },\n            };\n        },\n        [],\n    );\n\n    const containerId = 'squarev2_payment_element_container';\n\n    const initializePayment = useCallback(async () => {\n        let style;\n\n        try {\n            style = mapToSquareStyles(copyStylesFromDummyFormFields());\n        } catch {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        await checkoutService.initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n            squarev2: {\n                containerId,\n                style,\n            },\n        });\n    }, [\n        checkoutService,\n        copyStylesFromDummyFormFields,\n        mapToSquareStyles,\n        method.gateway,\n        method.id,\n    ]);\n\n    const deinitializePayment = useCallback(async () => {\n        await checkoutService.deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [checkoutService, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, [deinitializePayment, initializePayment]);\n\n    return (\n        <SquareV2Form\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            containerId={containerId}\n            deinitializePayment={deinitializePayment}\n            initializePayment={initializePayment}\n            method={method}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    SquareV2PaymentMethod,\n    [{ id: 'squarev2' }],\n);\n","import { StripeAppearanceOptions, StripeCustomFont } from '@bigcommerce/checkout-sdk';\nimport { isEmpty } from 'lodash';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nconst getStylesFromElement = (\n    selector: string,\n    properties: string[],\n    pseudoElementSelector?: string,\n) => {\n    const element = document.querySelector<HTMLElement>(selector);\n\n    return element ? getAppliedStyles(element, properties, pseudoElementSelector) : {};\n};\n\nconst parseRadioIconSize = (size: string | number = 0): number =>\n    typeof size !== 'number' ? parseInt(size, 10) : size;\n\nconst getRadioIconSizes = (sizes?: Record<string, string | number | undefined>) => {\n    const {\n        radioIconOuterWidth = 26,\n        radioIconOuterStrokeWidth = 1,\n        radioIconInnerWidth = 17,\n    } = sizes || {};\n    const stripeSVGSizeCoefficient = 0.88; // Provided by Stripe team for scaling SVGs.\n\n    const percentageCoefficient = stripeSVGSizeCoefficient * 100;\n    const outerWidth = parseRadioIconSize(radioIconOuterWidth);\n    const outerStrokeWidth = parseRadioIconSize(radioIconOuterStrokeWidth);\n    const innerWidth = parseRadioIconSize(radioIconInnerWidth);\n\n    const stripeEqualOuterWidth = (outerWidth / stripeSVGSizeCoefficient).toFixed(2);\n    const stripeEqualOuterStrokeWidth = (\n        (outerStrokeWidth / outerWidth) *\n        percentageCoefficient\n    ).toFixed(2);\n    const stripeEqualInnerRadius = (\n        ((innerWidth / outerWidth) * percentageCoefficient) /\n        2\n    ).toFixed(2);\n\n    return {\n        outerWidth: `${stripeEqualOuterWidth}px`,\n        outerStrokeWidth: `${stripeEqualOuterStrokeWidth}px`,\n        innerRadius: stripeEqualInnerRadius,\n    };\n};\n\nexport const getFonts = (selector = 'link[href*=\"font\"]'): StripeCustomFont[] => {\n    const elementsList: NodeListOf<Element> = document.querySelectorAll(selector);\n    const fonts: StripeCustomFont[] = [];\n\n    elementsList.forEach((element: Element | null) => {\n        const fontSrc = element?.getAttribute('href');\n\n        if (fontSrc) {\n            fonts.push({ cssSrc: fontSrc });\n        }\n    });\n\n    return fonts;\n};\n\nexport const getAppearanceForOCSElement = (containerId: string): StripeAppearanceOptions => {\n    const defaultAccordionPaddingHorizontal = '18px';\n    const defaultAccordionPaddingVertical = '13px';\n    const defaultRadioIconInnerScale = 0.66;\n\n    const formInputStyles = getStylesFromElement(`#${containerId}--input`, [\n        'color',\n        'background-color',\n        'border-color',\n        'box-shadow',\n        'font-family',\n    ]);\n    const formLabelStyles = getStylesFromElement(`#${containerId}--label`, ['color']);\n    const formErrorStyles = getStylesFromElement(`#${containerId}--error`, ['color']);\n    const accordionHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        [\n            'color',\n            'font-size',\n            'font-family',\n            'font-weight',\n            'padding-top',\n            'padding-right',\n            'padding-bottom',\n        ],\n    );\n    const accordionSelectedHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header-selected`,\n        ['background-color'],\n    );\n    const formChecklistStyles = getStylesFromElement(\n        `#${containerId}--accordion-header.optimizedCheckout-form-checklist-item`,\n        ['border-bottom', 'border-color'],\n    );\n    const {\n        color: accordionHeaderColor,\n        'font-size': accordionItemTitleFontSize,\n        'font-family': accordionHeaderFontFamily,\n        'font-weight': accordionItemTitleFontWeight,\n        'padding-top': accordionPaddingTop = defaultAccordionPaddingVertical,\n        'padding-right': accordionPaddingRight = defaultAccordionPaddingHorizontal,\n        'padding-bottom': accordionPaddingBottom = defaultAccordionPaddingVertical,\n    } = accordionHeaderStyles;\n    const accordionHeaderPadding = !isEmpty(accordionHeaderStyles)\n        ? `${accordionPaddingTop} ${accordionPaddingRight} ${accordionPaddingBottom} ${defaultAccordionPaddingHorizontal}`\n        : undefined;\n    const radioOuter = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        ['border-color', 'border-width', 'width'],\n        '::before',\n    );\n    const radioOuterChecked = getStylesFromElement(\n        `#${containerId}--accordion-header-selected .form-label`,\n        ['border-color'],\n        '::before',\n    );\n    const radioIconSize = getRadioIconSizes({\n        radioIconOuterWidth: radioOuter.width,\n        radioIconOuterStrokeWidth: radioOuter['border-width'],\n        radioIconInnerWidth:\n            radioOuter.width && parseRadioIconSize(radioOuter.width) * defaultRadioIconInnerScale,\n    });\n    const radioIconColor = radioOuter['border-color'];\n    const radioIconFocusColor = radioOuterChecked['border-color'];\n\n    return {\n        variables: {\n            colorPrimary: formInputStyles['box-shadow'],\n            colorBackground: formInputStyles['background-color'],\n            colorText: formLabelStyles.color,\n            colorDanger: formErrorStyles.color,\n            colorTextSecondary: formLabelStyles.color,\n            colorTextPlaceholder: formInputStyles.color,\n            colorIcon: formInputStyles.color,\n            fontFamily: accordionHeaderFontFamily || formInputStyles['font-family'],\n        },\n        rules: {\n            '.Input': {\n                borderColor: formInputStyles['border-color'],\n                color: formInputStyles.color,\n                boxShadow: formInputStyles['box-shadow'],\n            },\n            '.AccordionItem': {\n                borderRadius: 0,\n                borderWidth: 0,\n                borderBottom: formChecklistStyles['border-bottom'],\n                borderColor: formChecklistStyles['border-color'],\n                boxShadow: 'none',\n                fontSize: accordionItemTitleFontSize,\n                fontWeight: accordionItemTitleFontWeight,\n                color: accordionHeaderColor,\n                padding: accordionHeaderPadding,\n            },\n            '.AccordionItem:hover': {\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n                color: accordionHeaderColor,\n            },\n            '.AccordionItem--selected': {\n                fontWeight: 'bold',\n                color: accordionHeaderColor,\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n            },\n            '.TabLabel': {\n                color: accordionHeaderColor,\n            },\n            '.RadioIcon': {\n                width: radioIconSize.outerWidth,\n            },\n            '.RadioIconInner': {\n                r: radioIconSize.innerRadius,\n                fill: radioIconFocusColor,\n            },\n            '.RadioIconOuter': {\n                strokeWidth: radioIconSize.outerStrokeWidth,\n                stroke: radioIconColor,\n            },\n            '.RadioIconOuter--checked': {\n                stroke: radioIconFocusColor,\n            },\n        },\n    };\n};\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, {\n    FunctionComponent,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { AccordionContext, ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { getAppearanceForOCSElement, getFonts } from './getStripeOCSStyles';\n\nconst StripeOCSPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const collapseStripeElement = useRef<() => void>();\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const [isOCSLoading, setIsOCSLoading] = useState(false);\n    const methodSelector = `${method.gateway}-${method.id}`;\n    const containerId = `${methodSelector}-component-field`;\n    const paymentContext = paymentForm;\n\n    useEffect(() => {\n        if (selectedItemId?.includes(`${method.gateway}-`)) {\n            return;\n        }\n\n        collapseStripeElement.current?.();\n    }, [selectedItemId, method.gateway]);\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            setIsOCSLoading(true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeocs: {\n                    containerId,\n                    layout: {\n                        type: 'accordion',\n                        defaultCollapsed: selectedItemId !== methodSelector,\n                        radios: true,\n                        linkInAccordion: true,\n                        spacedAccordionItems: false,\n                        visibleAccordionItemsCount: 0,\n                    },\n                    appearance: getAppearanceForOCSElement(containerId),\n                    fonts: getFonts(),\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                    paymentMethodSelect: onToggle,\n                    handleClosePaymentMethod: (collapseElement: () => void) => {\n                        collapseStripeElement.current = collapseElement;\n                    },\n                    togglePreloader: setIsOCSLoading,\n                },\n            });\n        },\n        [\n            containerId,\n            selectedItemId,\n            methodSelector,\n            checkoutService,\n            onUnhandledError,\n            renderSubmitButton,\n            onToggle,\n            setIsOCSLoading,\n        ],\n    );\n\n    const renderCustomOCSSectionStyles = () => (\n        <style>\n            {`\n                .custom-checklist-item#radio-${methodSelector} {\n                    border-bottom: none;\n                }\n                .custom-checklist-item#radio-${methodSelector}:last-of-type {\n                    margin-bottom: -1px;\n                }\n            `}\n        </style>\n    );\n\n    const renderCheckoutElementsForStripeOCSStyling = () => (\n        <div style={{ display: 'none' }}>\n            <div\n                className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n                id={`${containerId}--accordion-header`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    id={`${containerId}-radio-input`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div\n                className=\"form-checklist-header--selected\"\n                id={`${containerId}--accordion-header-selected`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    defaultChecked\n                    id={`${containerId}-radio-input-selected`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        </div>\n    );\n\n    const renderPreloader = () => (\n        <div data-test=\"stripe-accordion-skeleton\" style={{ padding: '10px 18px' }}>\n            <ChecklistSkeleton />\n        </div>\n    );\n\n    return (\n        <>\n            {isOCSLoading ? renderPreloader() : renderCustomOCSSectionStyles()}\n\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={false}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutElementsForStripeOCSStyling()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeOCSPaymentMethod,\n    [{ gateway: 'stripeocs', id: 'optimized_checkout' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst StripeUPEPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const containerId = `stripe-${method.id}-component-field`;\n    const paymentContext = paymentForm;\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getPaymentProviderCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const isStripeLinkAuthenticated = paymentProviderCustomer?.stripeLinkAuthenticationState;\n    const isGuestCustomer = customer?.isGuest;\n    const shouldSavingCardsBeEnabled = useMemo((): boolean => {\n        if (!isGuestCustomer && isStripeLinkAuthenticated) {\n            return false;\n        }\n\n        return true;\n    }, [isGuestCustomer, isStripeLinkAuthenticated]);\n    const isInstrumentFeatureAvailable =\n        shouldSavingCardsBeEnabled && !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (!parentContainer) {\n            throw new Error(\n                'Unable to retrieve input styles as the provided container ID is not valid.',\n            );\n        }\n\n        return getAppliedStyles(parentContainer, properties);\n    };\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            const formInput = getStylesFromElement(`${containerId}--input`, [\n                'color',\n                'background-color',\n                'border-color',\n                'box-shadow',\n            ]);\n            const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n            const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n            paymentContext.hidePaymentSubmitButton(method, true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeupe: {\n                    containerId,\n                    style: {\n                        labelText: formLabel.color,\n                        fieldText: formInput.color,\n                        fieldPlaceholderText: formInput.color,\n                        fieldErrorText: formError.color,\n                        fieldBackground: formInput['background-color'],\n                        fieldInnerShadow: formInput['box-shadow'],\n                        fieldBorder: formInput['border-color'],\n                    },\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            onUnhandledError,\n            method,\n            paymentContext,\n            renderSubmitButton,\n        ],\n    );\n\n    const renderCheckoutThemeStylesForStripeUPE = () => {\n        return (\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        );\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutThemeStylesForStripeUPE()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeUPEPaymentMethod,\n    [{ gateway: 'stripeupe' }, { gateway: 'stripeupe', id: 'klarna' }],\n);\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, IconLock, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nexport interface StripeV3CustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n    };\n}\n\nconst StripeV3CustomCardForm: React.FunctionComponent<StripeV3CustomCardFormProps> = ({\n    options,\n}) => (\n    <div className=\"form-ccFields\">\n        <div className={classNames('form-field', 'form-field--stripe-ccNumber')}>\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardNumberElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_number_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"CardNumber\"\n                id={options.cardNumberElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n        <div className=\"form-field form-field--ccExpiry\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardExpiryElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_expiration_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"ExpiryDate\"\n                id={options.cardExpiryElementOptions.containerId}\n            />\n        </div>\n        <div className=\"form-field form-ccFields-field--ccCvv\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardCvcElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"SecurityCode\"\n                id={options.cardCvcElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n    </div>\n);\n\nexport default StripeV3CustomCardForm;\n","import {\n    CardInstrument,\n    CustomError,\n    PaymentInitializeOptions,\n    StripeElementOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { useHostedCreditCard } from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport StripeV3CustomCardForm from './StripeV3CustomCardForm';\n\nexport interface StripeOptions {\n    alipay?: StripeElementOptions;\n    card: StripeElementOptions;\n    cardCvc: StripeElementOptions;\n    cardExpiry: StripeElementOptions;\n    cardNumber: StripeElementOptions;\n    iban: StripeElementOptions;\n    idealBank: StripeElementOptions;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    Card = 'card',\n    CardCvc = 'cardCvc',\n    CardExpiry = 'cardExpiry',\n    CardNumber = 'cardNumber',\n    Iban = 'iban',\n    IdealBank = 'idealBank',\n}\n\nconst StripeV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const { useIndividualCardFields } = method.initializationData;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const paymentMethodType = method.id as StripeElementType;\n    const additionalStripeV3Classes =\n        paymentMethodType !== StripeElementType.Alipay\n            ? 'optimizedCheckout-form-input widget--stripev3'\n            : '';\n    const containerId = `stripe-${paymentMethodType}-component-field`;\n    const stripeOptions: StripeOptions = useMemo(() => {\n        const classes = {\n            base: 'form-input optimizedCheckout-form-input',\n        };\n\n        return {\n            [StripeElementType.Card]: {\n                classes,\n            },\n            [StripeElementType.CardCvc]: {\n                classes,\n                placeholder: '',\n            },\n            [StripeElementType.CardExpiry]: {\n                classes,\n            },\n            [StripeElementType.CardNumber]: {\n                classes,\n                showIcon: true,\n                placeholder: '',\n            },\n            [StripeElementType.Iban]: {\n                classes,\n                supportedCountries: ['SEPA'],\n            },\n            [StripeElementType.IdealBank]: {\n                classes,\n            },\n        };\n    }, []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer, getConfig },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const storeUrl = useMemo(() => {\n        if (!config) {\n            return null;\n        }\n\n        return config.links.siteLink;\n    }, [config]);\n\n    const onUnhandledStripeV3Error = useCallback(\n        (error: CustomError) => {\n            if (error.type === 'stripev3_error' && error.subtype === 'auth_failure') {\n                error.message = language.translate('payment.stripev3_auth_3ds_fail');\n            }\n\n            onUnhandledError(error);\n        },\n        [language, onUnhandledError],\n    );\n\n    const getIndividualCardElementOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            return {\n                cardNumberElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardNumber],\n                    containerId: 'stripe-card-number-component-field',\n                },\n                cardExpiryElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardExpiry],\n                    containerId: 'stripe-expiry-component-field',\n                },\n                cardCvcElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardCvc],\n                    containerId: 'stripe-cvc-component-field',\n                },\n            };\n        },\n        [],\n    );\n\n    const getStripeOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            if (useIndividualCardFields) {\n                return getIndividualCardElementOptions(stripeInitializeOptions);\n            }\n\n            return stripeInitializeOptions[paymentMethodType];\n        },\n        [paymentMethodType, getIndividualCardElementOptions, useIndividualCardFields],\n    );\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                stripev3: {\n                    containerId,\n                    options: getStripeOptions(stripeOptions),\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [containerId, getStripeOptions, stripeOptions, checkoutService, getHostedFormOptions],\n    );\n\n    const renderCustomPaymentForm = () => {\n        const optionsCustomForm = getIndividualCardElementOptions(stripeOptions);\n\n        return <StripeV3CustomCardForm options={optionsCustomForm} />;\n    };\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                additionalContainerClassName={additionalStripeV3Classes}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledStripeV3Error}\n                renderCustomPaymentForm={renderCustomPaymentForm}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldRenderCustomInstrument={useIndividualCardFields}\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            {method.id === 'iban' && (\n                <p className=\"stripe-sepa-mandate-disclaimer\">\n                    <TranslatedString\n                        data={{ storeUrl }}\n                        id=\"payment.stripe_sepa_mandate_disclaimer\"\n                    />\n                </p>\n            )}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeV3PaymentMethod,\n    [{ gateway: 'stripev3' }],\n);\n","import {\n    CardInstrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { CreditCardPaymentMethodComponent } from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\ninterface WorldpayPaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst WorldpayCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const [threeDSecureVerification, setThreeDSecureVerification] = useState<HTMLElement>();\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const { getHostedStoredCardValidationFieldset } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const ref = useRef<WorldpayPaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const cancelWorldpayModalFlow = useCallback(() => {\n        setThreeDSecureVerification(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n    const initializeWorldpayPayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                creditCard: {\n                    form: getHostedFormOptions && (await getHostedFormOptions(selectedInstrument)),\n                },\n                worldpay: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setThreeDSecureVerification(content);\n                        ref.current.cancelThreeDSecureVerification = cancel;\n                    },\n                },\n            });\n        },\n        [checkoutService, getHostedFormOptions],\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (threeDSecureVerification) {\n            ref.current.paymentPageContentRef.current?.appendChild(threeDSecureVerification);\n        }\n    }, [threeDSecureVerification]);\n\n    return (\n        <>\n            <CreditCardPaymentMethodComponent\n                {...rest}\n                cardFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                cardValidationSchema={hostedValidationSchema}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeWorldpayPayment}\n                language={language}\n                method={method}\n                paymentForm={paymentForm}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n            <Modal\n                isOpen={!!threeDSecureVerification}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelWorldpayModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div ref={ref.current.paymentPageContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    WorldpayCreditCardPaymentMethod,\n    [{ id: 'worldpayaccess' }],\n);\n","import { ComponentType } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { resolveComponent } from '../common/resolver';\nimport * as paymentMethods from '../generated/paymentIntegrations';\n\nexport default function resolvePaymentMethod(\n    query: PaymentMethodResolveId,\n): ComponentType<PaymentMethodProps> | undefined {\n    return resolveComponent<PaymentMethodResolveId, PaymentMethodProps>(query, paymentMethods);\n}\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\n\nimport PaymentContext, { PaymentContextProps } from './PaymentContext';\n\nexport type WithPaymentProps = PaymentContextProps;\n\nconst withPayment = createInjectHoc(PaymentContext, { displayNamePrefix: 'WithPayment' });\n\nexport default withPayment;\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { FormFieldContainer, TextInput } from '../../ui/form';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardCustomerCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCustomerCodeField: FunctionComponent<CreditCardCustomerCodeFieldProps> = ({\n    name,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_customer_code_label\" />{' '}\n                <small className=\"optimizedCheckout-contentSecondary\">\n                    <TranslatedString id=\"common.optional_text\" />\n                </small>\n            </>\n        ),\n        [],\n    );\n\n    return <FormField input={renderInput} labelContent={labelContent} name={name} />;\n};\n\nexport default memo(CreditCardCustomerCodeField);\n","import { CheckoutSettings, Customer, PaymentMethod, PaymentMethodConfig, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    paymentMethod: PaymentMethod;\n    shouldSavingCardsBeEnabled?: boolean;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    paymentMethod,\n    shouldSavingCardsBeEnabled = true,\n}: IsInstrumentFeatureAvailableState): boolean {\n    const { checkoutSettings } = config;\n\n    if (\n        isVaultingNotEnabled(checkoutSettings, paymentMethod.config) ||\n        customer.isGuest ||\n        !shouldSavingCardsBeEnabled\n    ) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction isVaultingNotEnabled(checkoutSettings: CheckoutSettings, paymentMethodConfig: PaymentMethodConfig): boolean {\n    return !checkoutSettings.isCardVaultingEnabled || !paymentMethodConfig.isVaultingEnabled;\n}\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass InstrumentSelect extends PureComponent<InstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<InstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            field,\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate = false,\n        } = this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <InstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideExpiryDate}\n                        />\n                    }\n                >\n                    <InstrumentSelectButton\n                        instrument={selectedInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" {...field} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{ cardTitle: cardInfo.niceType, endingIn: instrument.last4 }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default InstrumentSelect;\n","import { AccountInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is AccountInstrument {\n    return instrument.type === 'account';\n}\n","import { AchInstrument, BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isBankAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is BankInstrument | AchInstrument {\n    return instrument.type === 'bank';\n}\n","import { CardInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isCardInstrument(\n    instrument: PaymentInstrument,\n): instrument is CardInstrument {\n    return instrument.type === 'card';\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconPaypal: FunctionComponent = () => (\n    <svg height=\"300\" viewBox=\"0 0 255 300\" width=\"255\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M228.03 77.2c3.6-23.02-.03-38.7-12.48-52.89C201.83 8.7 177.07 2 145.4 2H53.4c-6.47 0-11.99 4.7-12.99 11.11L2.1 256.03a7.9 7.9 0 0 0 7.8 9.14h56.78c79.33-53.38 148.45-81.4 161.35-187.97z\"\n            fill=\"#253B80\"\n        />\n        <path\n            d=\"M228.02 77.2C124 73 95 98 80.5 177.52l-13.82 87.65-3.91 24.85a6.9 6.9 0 0 0 6.82 7.98h47.86c5.67 0 10.48-4.12 11.37-9.71l.48-2.43 9-57.2.59-3.15c.88-5.6 5.7-9.73 11.37-9.73h7.16c46.38 0 82.68-18.83 93.29-73.33 4.43-22.76 2.14-41.77-9.6-55.14a45.77 45.77 0 0 0-13.1-10.1z\"\n            fill=\"#179BD7\"\n        />\n        <path\n            d=\"M215.33 72.14c-3.88-1.12-7.82-2-11.8-2.62a149.83 149.83 0 0 0-23.79-1.73h-72.1a11.49 11.49 0 0 0-11.36 9.73l-15.34 97.16-.44 2.84a13.1 13.1 0 0 1 12.95-11.1h27c53 0 94.5-21.53 106.62-83.82.37-1.85.67-3.64.95-5.4a64.66 64.66 0 0 0-9.98-4.2c-.9-.3-1.8-.59-2.71-.86z\"\n            fill=\"#222D65\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconPaypal);\n","import { AccountInstrument, BankInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface ManageAccountInstrumentsTableProps {\n    instruments: Array<AccountInstrument | BankInstrument>;\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsTable: FunctionComponent<ManageAccountInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: AccountInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-accountExternalId\">\n                {isBankAccountInstrument(instrument) ? (\n                    <span className=\"instrumentModal-instrumentAccountNumber\">\n                        <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        <span>{` ${instrument.accountNumber}`}</span>\n                    </span>\n                ) : (\n                    <>\n                        <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n                        <span className=\"instrumentModal-instrumentAccountExternalId\">\n                            {instrument.externalId}\n                        </span>\n                    </>\n                )}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageInstrumentsTable);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface ManageCardInstrumentsTableProps {\n    instruments: CardInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageCardInstrumentsTable: FunctionComponent<ManageCardInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_expiry_date_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: CardInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired =\n        !expirationDate({\n            month: instrument.expiryMonth,\n            year: instrument.expiryYear,\n        }).isValid;\n\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-cardType\">\n                <CreditCardIcon cardType={cardType} />\n\n                {cardInfo && (\n                    <span className=\"instrumentModal-instrumentCardType\">{cardInfo.niceType}</span>\n                )}\n            </td>\n            <td data-test=\"manage-instrument-last4\">{instrument.last4}</td>\n            <td\n                className={classNames({ 'instrumentModal-instrumentExpiry--expired': isExpired })}\n                data-test=\"manage-instrument-expiry\"\n            >\n                {`${instrument.expiryMonth}/${instrument.expiryYear}`}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageCardInstrumentsTable);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Alert, AlertType } from '../../ui/alert';\n\nexport interface ManageInstrumentsAlertProps {\n    error: any; // TODO: Fix typing\n}\n\nconst ManageInstrumentsAlert: FunctionComponent<ManageInstrumentsAlertProps> = ({ error }) => {\n    const { status } = error;\n\n    if (status === 401) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_auth_error\" />\n            </Alert>\n        );\n    }\n\n    if (status >= 400 && status < 500) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_client_error\" />\n            </Alert>\n        );\n    }\n\n    return (\n        <Alert type={AlertType.Error}>\n            <TranslatedString id=\"payment.instrument_manage_delete_server_error\" />\n        </Alert>\n    );\n};\n\nexport default memo(ManageInstrumentsAlert);\n","import { CheckoutSelectors, PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../../ui/button';\nimport { Modal, ModalHeader } from '../../ui/modal';\n\nimport isAccountInstrument from './isAccountInstrument';\nimport isBankAccountInstrument from './isBankAccountInstrument';\nimport isCardInstrument from './isCardInstrument';\nimport ManageAccountInstrumentsTable from './ManageAccountInstrumentsTable';\nimport ManageCardInstrumentsTable from './ManageCardInstrumentsTable';\nimport ManageInstrumentsAlert from './ManageInstrumentsAlert';\n\nexport interface ManageInstrumentsModalProps {\n    isOpen: boolean;\n    instruments: PaymentInstrument[];\n    onAfterOpen?(): void;\n    onDeleteInstrument?(instrumentId: string): void;\n    onDeleteInstrumentError?(error: Error): void;\n    onRequestClose?(): void;\n}\n\nexport interface ManageInstrumentsModalState {\n    isConfirmingDelete: boolean;\n    selectedInstrumentId?: string;\n}\n\ninterface WithCheckoutProps {\n    deleteInstrumentError?: Error;\n    isDeletingInstrument: boolean;\n    isLoadingInstruments: boolean;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    deleteInstrument(id: string): Promise<CheckoutSelectors>;\n}\n\nclass ManageInstrumentsModal extends Component<\n    ManageInstrumentsModalProps & WithCheckoutProps,\n    ManageInstrumentsModalState\n> {\n    state: ManageInstrumentsModalState = {\n        isConfirmingDelete: false,\n    };\n\n    render(): ReactNode {\n        const { deleteInstrumentError, isOpen, onRequestClose } = this.props;\n\n        return (\n            <Modal\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                footer={this.renderFooter()}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"payment.instrument_manage_modal_title_text\" />\n                    </ModalHeader>\n                }\n                isOpen={isOpen}\n                onAfterOpen={this.handleAfterOpen}\n                onRequestClose={onRequestClose}\n            >\n                {deleteInstrumentError && <ManageInstrumentsAlert error={deleteInstrumentError} />}\n\n                {this.renderContent()}\n            </Modal>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { instruments, isDeletingInstrument } = this.props;\n\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <p>\n                    <TranslatedString id=\"payment.instrument_manage_modal_confirmation_label\" />\n                </p>\n            );\n        }\n\n        const cardInstruments = instruments.filter(isCardInstrument);\n        const bankInstruments = instruments.filter(isBankAccountInstrument);\n        const accountInstruments = instruments.filter(isAccountInstrument);\n\n        const bankAndAccountInstruments = [...bankInstruments, ...accountInstruments];\n\n        if (bankAndAccountInstruments.length) {\n            return (\n                <ManageAccountInstrumentsTable\n                    instruments={bankAndAccountInstruments}\n                    isDeletingInstrument={isDeletingInstrument}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        return (\n            <ManageCardInstrumentsTable\n                instruments={cardInstruments}\n                isDeletingInstrument={isDeletingInstrument}\n                onDeleteInstrument={this.handleDeleteInstrument}\n            />\n        );\n    }\n\n    private renderFooter(): ReactNode {\n        const { isDeletingInstrument, isLoadingInstruments, onRequestClose } = this.props;\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <>\n                    <Button\n                        data-test=\"manage-instrument-cancel-button\"\n                        onClick={this.handleCancel}\n                        size={ButtonSize.Small}\n                    >\n                        <TranslatedString id=\"common.cancel_action\" />\n                    </Button>\n\n                    <Button\n                        data-test=\"manage-instrument-confirm-button\"\n                        disabled={isDeletingInstrument || isLoadingInstruments}\n                        onClick={this.handleConfirmDelete}\n                        size={ButtonSize.Small}\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"payment.instrument_manage_modal_confirmation_action\" />\n                    </Button>\n                </>\n            );\n        }\n\n        return (\n            <Button\n                data-test=\"manage-instrument-close-button\"\n                onClick={onRequestClose}\n                size={ButtonSize.Small}\n            >\n                <TranslatedString id=\"common.close_action\" />\n            </Button>\n        );\n    }\n\n    private handleAfterOpen: () => void = () => {\n        const { onAfterOpen } = this.props;\n\n        this.setState(\n            {\n                isConfirmingDelete: false,\n            },\n            onAfterOpen,\n        );\n    };\n\n    private handleCancel: () => void = () => {\n        const { clearError, deleteInstrumentError } = this.props;\n\n        if (deleteInstrumentError) {\n            clearError(deleteInstrumentError);\n        }\n\n        this.setState({\n            isConfirmingDelete: false,\n        });\n    };\n\n    private handleConfirmDelete: () => void = async () => {\n        const {\n            deleteInstrument,\n            onDeleteInstrument = noop,\n            onDeleteInstrumentError = noop,\n            onRequestClose = noop,\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (!selectedInstrumentId) {\n            return;\n        }\n\n        try {\n            await deleteInstrument(selectedInstrumentId);\n            onDeleteInstrument(selectedInstrumentId);\n            onRequestClose();\n        } catch (error) {\n            onDeleteInstrumentError(error);\n        }\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isConfirmingDelete: true,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport function mapFromCheckoutProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutProps | null {\n    const {\n        errors: { getDeleteInstrumentError },\n        statuses: { isDeletingInstrument, isLoadingInstruments },\n    } = checkoutState;\n\n    return {\n        clearError: checkoutService.clearError,\n        deleteInstrument: checkoutService.deleteInstrument,\n        deleteInstrumentError: getDeleteInstrumentError(),\n        isDeletingInstrument: isDeletingInstrument(),\n        isLoadingInstruments: isLoadingInstruments(),\n    };\n}\n\nexport default withCheckout(mapFromCheckoutProps)(ManageInstrumentsModal);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, ModalTriggerModalProps } from '../../ui/modal';\n\nimport InstrumentSelect from './InstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan'\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import { LineItemMap, PaymentInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport { UntrustedShippingCardVerificationType } from './CardInstrumentFieldset';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    if (PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider)) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!paymentMethod.config.isVaultingCvvEnabled;\n    }\n\n    // If the shipping address is untrusted, card verficiation mode has set with cvv, card code is required\n    if ('untrustedShippingCardVerificationMode' in instrument && instrument.untrustedShippingCardVerificationMode === UntrustedShippingCardVerificationType.CVV) {\n        return true;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(paymentMethod.config.isVaultingCvvEnabled || paymentMethod.config.cardCode);\n}\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { CheckoutSelectors, Instrument } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { Instrument, LineItemMap } from '@bigcommerce/checkout-sdk';\n\nimport { UntrustedShippingCardVerificationType } from './CardInstrumentFieldset';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    if (lineItems.physicalItems.length === 0) {\n        return false;\n    }\n\n    if (instrument.trustedShippingAddress) {\n        return false;\n    }  \n    \n    return !(instrument.untrustedShippingCardVerificationMode === UntrustedShippingCardVerificationType.CVV);\n}\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object().required().shape<HostedCreditCardValidationSchemaShape[\"hostedForm\"]>({\n            errors: object().required().shape<HostedCreditCardValidationSchemaShape[\"hostedForm\"][\"errors\"]>({\n                cardCode: string()\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_invalid_error'),\n                        test: (value) => value !== 'invalid_card_code',\n                    }),\n\n                cardExpiry: string()\n                    .test({\n                        message: language.translate(\n                            'payment.credit_card_expiration_required_error',\n                        ),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_expiration_invalid_error'),\n                        test: (value) => value !== 'invalid_card_expiry',\n                    }),\n\n                cardName: string()\n                    .test({\n                        message: language.translate('payment.credit_card_name_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_name_invalid_error'),\n                        test: (value) => value !== 'invalid_card_name',\n                    }),\n\n                cardNumber: string()\n                    .test({\n                        message: language.translate('payment.credit_card_number_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_invalid_error'),\n                        test: (value) => value !== 'invalid_card_number',\n                    }),\n            }),\n        }),\n    });\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object().required().shape<HostedInstrumentValidationSchemaShape[\"hostedForm\"]>({\n            errors: object().required().shape<HostedInstrumentValidationSchemaShape[\"hostedForm\"][\"errors\"]>({\n                cardCodeVerification: string()\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_invalid_error'),\n                        test: (value) => value !== 'invalid_card_code',\n                    }),\n\n                cardNumberVerification: string()\n                    .test({\n                        message: language.translate('payment.credit_card_number_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_invalid_error'),\n                        test: (value) => value !== 'invalid_card_number',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_mismatch_error'),\n                        test: (value) => value !== 'mismatched_card_number',\n                    }),\n\n            ...(isCardExpiryRequired ? {\n                cardExpiryVerification: string()\n                    .test({\n                        message: language.translate(\n                            'payment.credit_card_expiration_required_error',\n                        ),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_expiration_invalid_error'),\n                        test: (value) => value !== 'invalid_card_expiry',\n                    }),\n            } : {})\n            }),\n        }),\n    });\n});\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconLock: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconLock);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","\nimport { Placement } from '@popperjs/core';\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children: ReactNode;\n}\n\nexport interface TooltipTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\n    static defaultProps = {\n        placement: 'bottom',\n    };\n\n    state: Readonly<TooltipTriggerState> = {\n        shouldShow: false,\n    };\n\n    render() {\n        const { children, placement, tooltip } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <span\n                            onBlur={this.handleHide}\n                            onFocus={this.handleShow}\n                            onMouseEnter={this.handleShow}\n                            onMouseLeave={this.handleHide}\n                            ref={ref}\n                        >\n                            {children}\n                        </span>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={[\n                        { name: 'hide', enabled: false },\n                        { name: 'flip', enabled: false },\n                        { name: 'preventOverflow', enabled: false },\n                    ]}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        shouldShow && (\n                            <div ref={ref} style={style}>\n                                {tooltip}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: true });\n    };\n\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: false });\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeVisa: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV visa, mc, disc</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <path d=\"M0 5h88v12H0z\" fill=\"#838383\" />\n            <path d=\"M3 23h82v10H3z\" fill=\"#FFF\" />\n            <path\n                d=\"M69.81 29.053c.015.297.13.502.343.616.11.058.233.088.37.088.258 0 .477-.107.66-.32.18-.215.31-.65.384-1.306-.12.19-.267.322-.444.4-.176.076-.366.114-.57.114-.412 0-.74-.13-.98-.386-.24-.257-.36-.588-.36-.993 0-.388.12-.73.357-1.025.237-.295.587-.443 1.05-.443.623 0 1.054.28 1.29.842.133.31.2.696.2 1.16 0 .525-.08.99-.238 1.394-.26.674-.703 1.01-1.327 1.01-.42 0-.737-.11-.954-.328-.217-.22-.325-.494-.325-.825h.544zm1.4-1.09c.176-.14.265-.387.265-.737 0-.315-.08-.55-.238-.705-.16-.153-.36-.23-.606-.23-.262 0-.47.088-.625.264-.155.177-.232.412-.232.707 0 .28.068.502.203.667.136.164.352.246.65.246.213 0 .408-.07.584-.21zm3.414-.563c.133-.132.2-.29.2-.474 0-.16-.064-.306-.19-.44-.13-.133-.323-.2-.585-.2-.26 0-.447.067-.563.2-.115.134-.173.29-.173.47 0 .202.075.36.224.473.15.112.326.17.53.17.237 0 .422-.067.556-.2zm.097 2.118c.165-.135.247-.336.247-.603 0-.277-.084-.487-.254-.63-.17-.144-.386-.216-.652-.216-.256 0-.466.072-.628.22-.163.145-.244.348-.244.607 0 .223.074.416.223.58.15.16.38.243.69.243.25 0 .456-.068.62-.202zm-1.735-1.937c-.158-.158-.236-.365-.236-.62 0-.32.114-.594.345-.823.232-.23.56-.344.984-.344.41 0 .732.108.965.325.233.216.35.47.35.758 0 .267-.068.483-.203.65-.076.092-.194.184-.353.274.176.08.316.175.418.28.19.2.284.46.284.778 0 .377-.127.697-.38.96-.253.26-.61.392-1.074.392-.416 0-.77-.113-1.057-.34-.287-.226-.43-.554-.43-.985 0-.253.06-.472.184-.656.124-.186.307-.327.55-.424-.15-.064-.265-.14-.35-.225zm5.614-1.42c.188.248.282.503.282.766h-.532c-.032-.17-.083-.302-.153-.397-.13-.18-.326-.27-.59-.27-.3 0-.54.14-.717.417-.177.278-.276.676-.296 1.194.124-.18.28-.316.467-.405.172-.08.364-.12.575-.12.36 0 .672.115.94.344.266.228.4.57.4 1.025 0 .388-.127.733-.38 1.033-.253.3-.614.45-1.083.45-.4 0-.746-.152-1.037-.456-.29-.304-.437-.816-.437-1.536 0-.532.065-.983.194-1.354.25-.71.705-1.065 1.367-1.065.478 0 .81.124 1 .372zm-.404 3.274c.14-.19.21-.415.21-.674 0-.22-.062-.43-.188-.627-.126-.198-.354-.297-.685-.297-.23 0-.434.076-.608.23-.175.153-.262.385-.262.694 0 .27.08.498.238.683.16.184.38.277.66.277.283 0 .495-.096.636-.286z\"\n                fill=\"#636363\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"19\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeVisa);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeAmex: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV amex</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <text\n                fill=\"#979BA1\"\n                fontFamily=\"Avenir Next\"\n                fontSize=\"6\"\n                fontWeight=\"420\"\n                letterSpacing=\".2\"\n            >\n                <tspan x=\"11\" y=\"35\">\n                    3712 567890 374\n                </tspan>\n                <tspan x=\"70.21\" y=\"35\">\n                    5\n                </tspan>\n            </text>\n            <path\n                d=\"M69.182 26.767h-.55v-3.35l-.762.635-.324-.38 1.142-.926h.494v4.02zm4.19 0H70.75v-.528l1.6-1.59c.122-.126.226-.257.313-.393s.13-.29.13-.46c0-.106-.018-.202-.056-.287-.038-.085-.09-.158-.153-.22-.065-.06-.14-.106-.228-.138-.087-.032-.18-.048-.278-.048-.204 0-.373.065-.505.196-.133.13-.216.298-.25.503l-.54-.09c.023-.153.07-.294.145-.424.074-.132.168-.246.28-.342.115-.097.246-.17.396-.224.15-.053.31-.08.48-.08.166 0 .326.025.48.074.153.05.288.12.406.216.117.094.21.214.28.357.07.145.106.31.106.496 0 .128-.017.248-.05.357-.035.11-.082.214-.14.313-.06.098-.128.192-.208.28-.08.09-.162.178-.25.265l-1.306 1.273h1.97v.494zm1.625-2.328h.176c.114 0 .225-.012.333-.033.107-.02.203-.056.286-.107.084-.052.15-.12.202-.208.05-.087.077-.195.077-.323 0-.104-.018-.196-.056-.277-.038-.08-.09-.15-.156-.207-.067-.057-.142-.102-.227-.134-.085-.032-.175-.048-.27-.048-.17 0-.314.044-.434.13-.12.088-.21.21-.27.364l-.5-.176c.1-.242.257-.433.475-.57.22-.14.47-.208.753-.208.167 0 .325.024.475.07.15.048.28.117.394.208.114.09.204.205.27.34.066.137.1.294.1.472 0 .114-.018.22-.054.318-.036.1-.086.188-.148.267-.063.08-.137.147-.224.204-.087.057-.182.098-.284.125v.01c.117.023.226.063.326.12.1.056.187.127.26.212.07.086.127.183.17.293.04.11.06.23.06.358 0 .2-.036.377-.112.53-.076.154-.176.282-.3.384-.126.102-.27.18-.433.233-.163.053-.33.08-.5.08-.318 0-.598-.073-.84-.216-.242-.144-.418-.368-.528-.67l.51-.17c.06.173.165.315.31.425.146.11.325.164.537.164.102 0 .202-.016.298-.05.097-.03.183-.08.26-.143.074-.064.135-.143.18-.238.046-.095.07-.206.07-.335 0-.14-.032-.257-.092-.352-.06-.095-.14-.17-.236-.23-.097-.06-.205-.1-.327-.125-.12-.025-.24-.037-.357-.037h-.17v-.454zm4.73.953h.58v.47h-.58v.904h-.533v-.903h-1.85v-.5l1.708-2.618h.676v2.647zm-.533-2.016h-.01l-1.273 2.016h1.284v-2.016z\"\n                fill=\"#636363\"\n                opacity=\".9\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"16\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeAmex);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconCardCodeAmex, IconCardCodeVisa, IconSize } from '../../ui/icon';\n\nimport './CreditCardCodeTooltip.scss';\n\nconst CreditCardCodeTooltip: FunctionComponent = () => (\n    <div className=\"dropdown-menu dropdown-menu--content dropdown-menu--card-code\">\n        <div className=\"form-ccFields-cvvExample\">\n            <div className=\"form-ccFields-cvvExampleDescription\">\n                <p>\n                    <TranslatedString id=\"payment.credit_card_cvv_help_text\" />\n                </p>\n            </div>\n\n            <div className=\"form-ccFields-cvvExampleFigures\">\n                <figure>\n                    <IconCardCodeVisa size={IconSize.Large} />\n                </figure>\n\n                <figure>\n                    <IconCardCodeAmex size={IconSize.Large} />\n                </figure>\n            </div>\n        </div>\n    </div>\n);\n\nexport default CreditCardCodeTooltip;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\nimport { IconHelp, IconLock } from '../../ui/icon';\nimport { TooltipTrigger } from '../../ui/tooltip';\nimport { CreditCardCodeTooltip } from '../creditCard';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\nimport { IconLock } from '../../ui/icon';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport HostedCreditCardCodeField from './HostedCreditCardCodeField';\nimport HostedCreditCardExpiryField from './HostedCreditCardExpiryField';\nimport HostedCreditCardNameField from './HostedCreditCardNameField';\nimport HostedCreditCardNumberField from './HostedCreditCardNumberField';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {cardNameId && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport HostedCreditCardCodeField from './HostedCreditCardCodeField';\nimport HostedCreditCardExpiryField from \"./HostedCreditCardExpiryField\";\nimport HostedCreditCardNumberField from './HostedCreditCardNumberField';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n","import {\n    CardInstrument,\n    Instrument,\n    LegacyHostedFormOptions,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { ComponentType, FunctionComponent, ReactNode, useCallback, useState } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n} from '../creditCard';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\n\nimport getHostedCreditCardValidationSchema, {\n    HostedCreditCardValidationSchemaShape,\n} from './getHostedCreditCardValidationSchema';\nimport getHostedInstrumentValidationSchema, {\n    HostedInstrumentValidationSchemaShape,\n} from './getHostedInstrumentValidationSchema';\nimport HostedCreditCardFieldset from './HostedCreditCardFieldset';\nimport HostedCreditCardValidation from './HostedCreditCardValidation';\n\nexport interface WithHostedCreditCardFieldsetProps {\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n}\n\nexport interface WithInjectedHostedCreditCardFieldsetProps {\n    hostedFieldset: ReactNode;\n    hostedStoredCardValidationSchema: ObjectSchema<HostedInstrumentValidationSchemaShape>;\n    hostedValidationSchema: ObjectSchema<HostedCreditCardValidationSchemaShape>;\n    getHostedFormOptions(selectedInstrument?: CardInstrument): Promise<LegacyHostedFormOptions>;\n    getHostedStoredCardValidationFieldset(selectedInstrument?: CardInstrument): ReactNode;\n}\n\ninterface WithCheckoutContextProps {\n    isCardCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n}\n\nexport default function withHostedCreditCardFieldset<\n    TProps extends WithHostedCreditCardFieldsetProps,\n>(\n    OriginalComponent: ComponentType<TProps & Partial<WithInjectedHostedCreditCardFieldsetProps>>,\n): ComponentType<Omit<TProps, keyof WithInjectedHostedCreditCardFieldsetProps>> {\n    const Component: FunctionComponent<\n        WithHostedCreditCardFieldsetProps &\n            WithCheckoutContextProps &\n            WithLanguageProps &\n            WithFormProps &\n            ConnectFormikProps<PaymentFormValues>\n    > = ({\n        formik: { setFieldValue, setFieldTouched, submitForm },\n        isCardCodeRequired,\n        isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n        isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        isSubmitted,\n        language,\n        method,\n        setSubmitted,\n        ...rest\n    }) => {\n        const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n        const getHostedFieldId: (name: string) => string = useCallback(\n            (name) => {\n                return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n            },\n            [method],\n        );\n\n        const getHostedFormOptions: (\n            selectedInstrument?: CardInstrument,\n        ) => Promise<LegacyHostedFormOptions> = useCallback(\n            async (selectedInstrument) => {\n                const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n                const styleContainerId = selectedInstrument\n                    ? isInstrumentCardCodeRequired\n                        ? getHostedFieldId('ccCvv')\n                        : undefined\n                    : getHostedFieldId('ccNumber');\n\n                return {\n                    fields: selectedInstrument\n                        ? {\n                              cardCodeVerification:\n                                  isInstrumentCardCodeRequired && selectedInstrument\n                                      ? {\n                                            accessibilityLabel: language.translate(\n                                                'payment.credit_card_cvv_label',\n                                            ),\n                                            containerId: getHostedFieldId('ccCvv'),\n                                            instrumentId: selectedInstrument.bigpayToken,\n                                        }\n                                      : undefined,\n                              cardNumberVerification:\n                                  isInstrumentCardNumberRequired && selectedInstrument\n                                      ? {\n                                            accessibilityLabel: language.translate(\n                                                'payment.credit_card_number_label',\n                                            ),\n                                            containerId: getHostedFieldId('ccNumber'),\n                                            instrumentId: selectedInstrument.bigpayToken,\n                                        }\n                                      : undefined,\n                          }\n                        : {\n                              cardCode: isCardCodeRequired\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                    }\n                                  : undefined,\n                              cardExpiry: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_expiration_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccExpiry'),\n                                  placeholder: language.translate(\n                                      'payment.credit_card_expiration_placeholder_text',\n                                  ),\n                              },\n                              cardName: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_name_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccName'),\n                              },\n                              cardNumber: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_number_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccNumber'),\n                              },\n                          },\n                    styles: styleContainerId\n                        ? {\n                              default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                              error: await getCreditCardInputStyles(\n                                  styleContainerId,\n                                  styleProps,\n                                  CreditCardInputStylesType.Error,\n                              ),\n                              focus: await getCreditCardInputStyles(\n                                  styleContainerId,\n                                  styleProps,\n                                  CreditCardInputStylesType.Focus,\n                              ),\n                          }\n                        : {},\n                    onBlur: ({ fieldType }) => {\n                        if (focusedFieldType === fieldType) {\n                            setFocusedFieldType(undefined);\n                        }\n                    },\n                    onCardTypeChange: ({ cardType }) => {\n                        setFieldValue('hostedForm.cardType', cardType);\n                    },\n                    onEnter: () => {\n                        setSubmitted(true);\n                        submitForm();\n                    },\n                    onFocus: ({ fieldType }) => {\n                        setFocusedFieldType(fieldType);\n                    },\n                    onValidate: ({ errors = {} }) => {\n                        forIn(errors, (fieldErrors = [], fieldType) => {\n                            const errorKey = `hostedForm.errors.${fieldType}`;\n\n                            setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                            if (fieldErrors[0]) {\n                                setFieldTouched(errorKey);\n                            }\n                        });\n                    },\n                };\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isCardCodeRequired,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                language,\n                method,\n                setFieldValue,\n                setFieldTouched,\n                setFocusedFieldType,\n                setSubmitted,\n                submitForm,\n            ],\n        );\n\n        const getHostedStoredCardValidationFieldset: (\n            selectedInstrument: CardInstrument,\n        ) => ReactNode = useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n        if (!method.config.isHostedFormEnabled) {\n            return <OriginalComponent {...(rest as TProps)} method={method} />;\n        }\n\n        return (\n            <OriginalComponent\n                {...(rest as TProps)}\n                getHostedFormOptions={getHostedFormOptions}\n                getHostedStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                hostedFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                hostedStoredCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n                hostedValidationSchema={getHostedCreditCardValidationSchema({ language })}\n                method={method}\n            />\n        );\n    };\n\n    return connectFormik(\n        withForm(withLanguage(withCheckout(mapFromCheckoutProps)(Component))),\n    ) as ComponentType<Omit<TProps, keyof WithInjectedHostedCreditCardFieldsetProps>>;\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutContextProps,\n    WithHostedCreditCardFieldsetProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    return ({ checkoutState }, { method }) => {\n        const {\n            data: { getConfig, getCustomer },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer) {\n            return null;\n        }\n\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            paymentMethod: method,\n        });\n\n        return {\n            method,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        };\n    };\n};\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconHelp, IconLock } from '../../ui/icon';\nimport { TooltipTrigger } from '../../ui/tooltip';\n\nimport CreditCardCodeTooltip from './CreditCardCodeTooltip';\n\nexport interface CreditCardCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCodeField: FunctionComponent<CreditCardCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-csc\"\n                    id={field.name}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardCodeField);\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport React, { ChangeEvent, FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nimport formatCreditCardExpiryDate from './formatCreditCardExpiryDate';\n\nexport interface CreditCardExpiryFieldProps {\n    name: string;\n}\n\nconst CreditCardExpiryField: FunctionComponent<CreditCardExpiryFieldProps & WithLanguageProps> = ({\n    language,\n    name,\n}) => {\n    const handleChange = useCallback(\n        memoizeOne((field: FieldProps['field'], form: FieldProps['form']) => {\n            return (event: ChangeEvent<any>) => {\n                form.setFieldValue(field.name, formatCreditCardExpiryDate(event.target.value));\n            };\n        }),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps) => (\n            <TextInput\n                {...field}\n                autoComplete=\"cc-exp\"\n                id={field.name}\n                onChange={handleChange(field, form)}\n                placeholder={language.translate('payment.credit_card_expiration_placeholder_text')}\n                type=\"tel\"\n            />\n        ),\n        [handleChange, language],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_expiration_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(withLanguage(CreditCardExpiryField));\n","export default function formatCreditCardExpiryDate(value: string): string {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n    const trimmedMonth = month.slice(0, 2);\n    const trimmedYear =\n        year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n    // i.e.: '1'\n    if (value.length < 2) {\n        return month;\n    }\n\n    // ie.: '10 /' (without trailing space)\n    if (value.length > 3 && !trimmedYear) {\n        return trimmedMonth;\n    }\n\n    return `${trimmedMonth} / ${trimmedYear}`;\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardNameFieldProps {\n    name: string;\n}\n\nconst CreditCardNameField: FunctionComponent<CreditCardNameFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"cc-name\" id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_name_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNameField);\n","import creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { max } from 'lodash';\nimport React, {\n    ChangeEventHandler,\n    FunctionComponent,\n    memo,\n    ReactElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconLock } from '../../ui/icon';\n\nimport formatCreditCardNumber from './formatCreditCardNumber';\n\nexport interface CreditCardNumberFieldProps {\n    name: string;\n}\n\nconst CreditCardNumberField: FunctionComponent<CreditCardNumberFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps<string>) => (\n            <CreditCardNumberInput field={field} form={form} />\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_number_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\ninterface CreditCardNumberInputProps {\n    field: FieldProps<string>['field'];\n    form: FieldProps<string>['form'];\n}\n\nconst CreditCardNumberInput: FunctionComponent<CreditCardNumberInputProps> = ({ field, form }): ReactElement => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const nextSelectionEndRef = useRef(0);\n\n    useEffect(() => {\n        if (inputRef.current && inputRef.current.selectionEnd !== nextSelectionEndRef.current) {\n            inputRef.current.setSelectionRange(nextSelectionEndRef.current, nextSelectionEndRef.current);\n        }\n    });\n\n    const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n        (event) => {\n            const separator = ' ';\n            const { value = '' } = event.target;\n            const { name, value: previousValue = '' } = field;\n            const selectionEnd = inputRef.current && inputRef.current.selectionEnd;\n\n            // Only allow digits and spaces\n            if (new RegExp(`[^\\\\d${separator}]`).test(value)) {\n                return form.setFieldValue(name, previousValue);\n            }\n\n            const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n\n            const formattedValue = formatCreditCardNumber(\n                value.replace(new RegExp(separator, 'g'), '').slice(0, maxLength),\n                separator,\n            );\n\n            if (selectionEnd === value.length && value.length < formattedValue.length) {\n                nextSelectionEndRef.current = formattedValue.length;\n            } else {\n                nextSelectionEndRef.current = selectionEnd || 0;\n            }\n\n            void form.setFieldValue(name, formattedValue);\n        },\n        [field, form],\n    );\n\n    return (\n        <>\n            <TextInput\n                {...field}\n                additionalClassName=\"has-icon\"\n                autoComplete=\"cc-number\"\n                id={field.name}\n                onChange={handleChange}\n                ref={inputRef}\n                type=\"tel\"\n            />\n\n            <IconLock />\n        </>\n    );\n};\n\nexport default memo(CreditCardNumberField);\n","import { number } from 'card-validator';\n\nimport unformatCreditCardNumber from './unformatCreditCardNumber';\n\nexport default function formatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    const unformattedValue = unformatCreditCardNumber(value, separator);\n\n    return card.gaps\n        .filter((gapIndex) => unformattedValue.length > gapIndex)\n        .reduce(\n            (output, gapIndex, index) =>\n                [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(separator),\n            unformattedValue,\n        );\n}\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport CreditCardCodeField from './CreditCardCodeField';\nimport CreditCardCustomerCodeField from './CreditCardCustomerCodeField';\nimport CreditCardExpiryField from './CreditCardExpiryField';\nimport CreditCardNameField from './CreditCardNameField';\nimport CreditCardNumberField from './CreditCardNumberField';\n\nexport interface CreditCardFieldsetProps {\n    shouldShowCardCodeField?: boolean;\n    shouldShowCustomerCodeField?: boolean;\n    shouldShowSaveCardField?: boolean;\n}\n\nconst CreditCardFieldset: FunctionComponent<CreditCardFieldsetProps> = ({\n    shouldShowCardCodeField,\n    shouldShowCustomerCodeField,\n}) => (\n    <Fieldset\n        additionalClassName=\"creditCardFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <CreditCardNumberField name=\"ccNumber\" />\n\n            <CreditCardExpiryField name=\"ccExpiry\" />\n\n            <CreditCardNameField name=\"ccName\" />\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n\n            {shouldShowCustomerCodeField && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />}\n        </div>\n    </Fieldset>\n);\n\nexport default memo(CreditCardFieldset);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, expirationDate, number } from 'card-validator';\nimport { object, ObjectSchema, string } from 'yup';\n\nimport { CreditCardFieldsetValues } from '../paymentMethod';\n\nexport interface CreditCardValidationSchemaOptions {\n    isCardCodeRequired: boolean;\n    language: LanguageService;\n}\n\nexport default memoize(function getCreditCardValidationSchema({\n    isCardCodeRequired,\n    language,\n}: CreditCardValidationSchemaOptions): ObjectSchema<CreditCardFieldsetValues> {\n    const schema = {\n        ccCustomerCode: string(),\n        ccCvv: string(),\n        ccExpiry: string()\n            .required(language.translate('payment.credit_card_expiration_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_expiration_invalid_error'),\n                test: (value) => expirationDate(value).isValid,\n            }),\n        ccName: string()\n            .max(200)\n            .required(language.translate('payment.credit_card_name_required_error')),\n        ccNumber: string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value) => number(value).isValid,\n            }),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value) {\n                    const { card } = number(this.parent.ccNumber);\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    return object(schema);\n});\n","import React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CreditCardCodeField, CreditCardNumberField } from '../creditCard';\n\ninterface CreditCardValidationProps {\n    shouldShowCardCodeField: boolean;\n    shouldShowNumberField: boolean;\n}\n\nconst CreditCardValidation: React.FunctionComponent<CreditCardValidationProps> = ({\n    shouldShowNumberField,\n    shouldShowCardCodeField,\n}) => (\n    <>\n        {shouldShowNumberField && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {shouldShowNumberField && <CreditCardNumberField name=\"ccNumber\" />}\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n        </div>\n    </>\n);\n\nexport default CreditCardValidation;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, number } from 'card-validator';\nimport creditCardType from 'credit-card-type';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport CardInstrumentFieldsetValues from './CardInstrumentFieldsetValues';\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface InstrumentValidationSchemaOptions {\n    instrumentBrand: string;\n    instrumentLast4: string;\n    isCardCodeRequired: boolean;\n    isCardNumberRequired: boolean;\n    language: LanguageService;\n}\n\ninterface InstrumentValidationSchema {\n    ccCvv?: StringSchema;\n    ccNumber?: StringSchema;\n    instrumentId: StringSchema;\n}\n\nexport default memoize(function getInstrumentValidationSchema({\n    instrumentBrand,\n    instrumentLast4,\n    isCardCodeRequired,\n    isCardNumberRequired,\n    language,\n}: InstrumentValidationSchemaOptions): ObjectSchema<CardInstrumentFieldsetValues> {\n    const schema: InstrumentValidationSchema = {\n        instrumentId: string().required(),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value = '') {\n                    const cardType = mapFromInstrumentCardType(instrumentBrand);\n                    const cardInfo = creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined)\n                        .isValid;\n                },\n            });\n    }\n\n    if (isCardNumberRequired) {\n        schema.ccNumber = string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: language.translate('payment.credit_card_number_mismatch_error'),\n                test: (value = '') => value.slice(-instrumentLast4.length) === instrumentLast4,\n            });\n    }\n\n    return object(schema);\n});\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../../ui/form';\n\ninterface InstrumentStorageFieldProps {\n    isAccountInstrument: boolean;\n}\n\nconst InstrumentStorageField: FunctionComponent<InstrumentStorageFieldProps> = ({\n    isAccountInstrument,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_payment_method_label'\n        : 'payment.instrument_save_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--saveInstrument\"\n            labelContent={labelContent}\n            name=\"shouldSaveInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStorageField);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../../ui/form';\n\ninterface InstrumentStoreAsDefaultFieldProps {\n    isAccountInstrument: boolean;\n    disabled?: boolean;\n}\n\nconst InstrumentStoreAsDefaultField: FunctionComponent<InstrumentStoreAsDefaultFieldProps> = ({\n    isAccountInstrument,\n    disabled = false,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_as_default_payment_method_label'\n        : 'payment.instrument_save_as_default_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--setAsDefaultInstrument\"\n            disabled={disabled}\n            labelContent={labelContent}\n            name=\"shouldSetAsDefaultInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStoreAsDefaultField);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport InstrumentStorageField from './InstrumentStorageField';\nimport InstrumentStoreAsDefaultField from './InstrumentStoreAsDefaultField';\n\ninterface StoreInstrumentFieldsetProps {\n    isAccountInstrument?: boolean;\n    instrumentId?: string;\n}\n\ninterface WithStorageSettings {\n    showSave: boolean;\n    showSetAsDefault: boolean;\n    setAsDefaultEnabled: boolean;\n}\n\ntype WithFormValues = ConnectFormikProps<{ shouldSaveInstrument: boolean }>;\n\nconst StoreInstrumentFieldset: FunctionComponent<\n    StoreInstrumentFieldsetProps & WithStorageSettings\n> = ({ showSave, showSetAsDefault, isAccountInstrument = false, setAsDefaultEnabled }) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.instrument_storage_options_text\" />\n            </Legend>\n        }\n    >\n        {showSave && <InstrumentStorageField isAccountInstrument={isAccountInstrument} />}\n\n        {showSetAsDefault && (\n            <InstrumentStoreAsDefaultField\n                disabled={!setAsDefaultEnabled}\n                isAccountInstrument={isAccountInstrument}\n            />\n        )}\n    </Fieldset>\n);\n\nconst mapToProps = (\n    context: CheckoutContextProps,\n    props: StoreInstrumentFieldsetProps & WithFormValues,\n): WithStorageSettings | null => {\n    const {\n        checkoutState: {\n            data: { getInstruments },\n        },\n    } = context;\n\n    const allInstruments = getInstruments();\n\n    const {\n        formik: {\n            values: { shouldSaveInstrument: saveIsChecked },\n        },\n        instrumentId,\n    } = props;\n\n    const addingNewInstrument = !instrumentId;\n    const hasAnyOtherInstruments = !!allInstruments && allInstruments.length > 0;\n    const instrument =\n        allInstruments && allInstruments.find(({ bigpayToken }) => bigpayToken === instrumentId);\n\n    return {\n        ...props,\n        showSave: addingNewInstrument,\n        showSetAsDefault:\n            (addingNewInstrument && hasAnyOtherInstruments) ||\n            Boolean(instrument && !instrument.defaultInstrument),\n        setAsDefaultEnabled: !addingNewInstrument || saveIsChecked,\n    };\n};\n\nexport default connectFormik(withCheckout(mapToProps)(StoreInstrumentFieldset));\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    HostedFieldType,\n    Instrument,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport {\n    configureCardValidator,\n    CreditCardFieldset,\n    getCreditCardValidationSchema,\n} from '../creditCard';\nimport {\n    CardInstrumentFieldset,\n    CardInstrumentFieldsetValues,\n    CreditCardValidation,\n    getInstrumentValidationSchema,\n    isCardInstrument,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport CreditCardFieldsetValues from './CreditCardFieldsetValues';\n\nexport interface CreditCardPaymentMethodProps {\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    cardFieldset?: ReactNode;\n    cardValidationSchema?: ObjectSchema;\n    storedCardValidationSchema?: ObjectSchema;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    getStoredCardValidationFieldset?(selectedInstrument?: CardInstrument): ReactNode;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nexport type CreditCardPaymentMethodValues = CreditCardFieldsetValues | CardInstrumentFieldsetValues;\n\ninterface WithCheckoutCreditCardPaymentMethodProps {\n    instruments: CardInstrument[];\n    isCardCodeRequired: boolean;\n    isCustomerCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    shouldShowInstrumentFieldset: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\ninterface CreditCardPaymentMethodState {\n    focusedHostedFieldType?: HostedFieldType;\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n    isPreloaderOn: boolean;\n}\n\nclass CreditCardPaymentMethod extends Component<\n    CreditCardPaymentMethodProps &\n        WithCheckoutCreditCardPaymentMethodProps &\n        WithFormProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    CreditCardPaymentMethodState\n> {\n    state: CreditCardPaymentMethodState = {\n        isAddingNewCard: false,\n        isPreloaderOn: true,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n        configureCardValidator();\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await initializePayment(\n                {\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                },\n                this.getSelectedInstrument(),\n            ).then(() => this.setState({ isPreloaderOn: false }));\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        _prevProps: Readonly<CreditCardPaymentMethodProps>,\n        prevState: Readonly<CreditCardPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            initializePayment,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            isAddingNewCard !== prevState.isAddingNewCard\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                await initializePayment(\n                    {\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    },\n                    this.getSelectedInstrument(),\n                );\n\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            cardFieldset,\n            getStoredCardValidationFieldset,\n            instruments,\n            isInitializing,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldShowInstrumentFieldset,\n            method,\n        } = this.props;\n\n        const { isAddingNewCard, isPreloaderOn } = this.state;\n\n        const selectedInstrument = this.getSelectedInstrument();\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments || isPreloaderOn;\n        const shouldShowNumberField = selectedInstrument\n            ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n            : false;\n        const shouldShowCardCodeField = selectedInstrument\n            ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n            : false;\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--creditCard\" data-test='credit-cart-payment-method'>\n                    {shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            instruments={instruments}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={\n                                selectedInstrument && selectedInstrument.bigpayToken\n                            }\n                            validateInstrument={\n                                getStoredCardValidationFieldset ? (\n                                    getStoredCardValidationFieldset(selectedInstrument)\n                                ) : (\n                                    <CreditCardValidation\n                                        shouldShowCardCodeField={shouldShowCardCodeField}\n                                        shouldShowNumberField={shouldShowNumberField}\n                                    />\n                                )\n                            }\n                        />\n                    )}\n\n                    {shouldShowCreditCardFieldset && !cardFieldset && (\n                        <CreditCardFieldset\n                            shouldShowCardCodeField={\n                                method.config.cardCode || method.config.cardCode === null\n                            }\n                            shouldShowCustomerCodeField={method.config.requireCustomerCode}\n                        />\n                    )}\n\n                    {shouldShowCreditCardFieldset && cardFieldset}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getSelectedInstrument(): CardInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            cardValidationSchema,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            language,\n            method,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return (\n                storedCardValidationSchema ||\n                getInstrumentValidationSchema({\n                    instrumentBrand: selectedInstrument.brand,\n                    instrumentLast4: selectedInstrument.last4,\n                    isCardCodeRequired: isInstrumentCardCodeRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    isCardNumberRequired: isInstrumentCardNumberRequiredProp(selectedInstrument),\n                    language,\n                })\n            );\n        }\n\n        return (\n            cardValidationSchema ||\n            getCreditCardValidationSchema({\n                isCardCodeRequired: method.config.cardCode === true,\n                language,\n            })\n        );\n    }\n\n    private handleUseNewCard: () => void = () => {\n        const {\n            formik: { setFieldValue },\n        } = this.props;\n\n        setFieldValue('hostedForm.cardType', '');\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const {\n            formik: { setFieldValue },\n        } = this.props;\n\n        setFieldValue('hostedForm.cardType', '');\n\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const {\n            instruments,\n            formik: { setFieldValue },\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutCreditCardPaymentMethodProps,\n    CreditCardPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isCardInstrument),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: { getConfig, getCustomer, getInstruments, isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer || !method) {\n            return null;\n        }\n\n        const instruments = filterInstruments(getInstruments(method));\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            paymentMethod: method,\n        });\n\n        return {\n            instruments,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isCustomerCodeRequired: !!method.config.requireCustomerCode,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n            shouldShowInstrumentFieldset:\n                isInstrumentFeatureAvailableProp && instruments.length > 0,\n        };\n    };\n};\n\nexport default connectFormik(\n    withForm(\n        withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(CreditCardPaymentMethod))),\n    ),\n);\n","import { creditCardType } from 'card-validator';\n\nexport default function configureCardValidator(): void {\n    const discoverInfo = creditCardType.getTypeInfo('discover');\n    const visaInfo = creditCardType.getTypeInfo('visa');\n\n    // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n    creditCardType.updateCard('visa', {\n        lengths: [13, ...(visaInfo.lengths || [])],\n    });\n\n    // Add support for 8-BIN Discover Cards.\n    creditCardType.updateCard('discover', {\n        patterns: [...(discoverInfo.patterns || []), [810, 817]],\n    });\n\n    // Add support for Mada-BIN Cards.\n    creditCardType.addCard({\n        niceType: 'Mada',\n        type: 'mada',\n        patterns: [\n            400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817, 422818,\n            422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954, 440533, 440647,\n            440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865, 458456, 462220, 468540,\n            468541, 468542, 468543, 483010, 483011, 483012, 484783, 486094, 486095, 486096, 489317,\n            489318, 489319, 493428, 504300, 506968, 508160, 513213, 520058, 521076, 524130, 524514,\n            529415, 529741, 530060, 530906, 531095, 531196, 532013, 535825, 535989, 536023, 537767,\n            539931, 543085, 543357, 549760, 554180, 557606, 558848, 585265, 588845, 588846, 588847,\n            588848, 588849, 588850, 588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120,\n            968201, 968202, 968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n        ],\n        gaps: [4, 8, 12],\n        lengths: [16, 18, 19],\n        code: {\n            name: 'CVV',\n            size: 3,\n        },\n    });\n}\n","import { noop } from 'lodash';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Modal } from '../../ui/modal';\nimport {\n    withHostedCreditCardFieldset,\n    WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type BraintreeCreditCardPaymentMethodProps = CreditCardPaymentMethodProps;\n\ninterface BraintreeCreditCardPaymentMethodRef {\n    threeDSecureContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst BraintreeCreditCardPaymentMethod: FunctionComponent<\n    BraintreeCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const [threeDSecureContent, setThreeDSecureContent] = useState<HTMLElement>();\n    const ref = useRef<BraintreeCreditCardPaymentMethodRef>({\n        threeDSecureContentRef: createRef(),\n    });\n\n    const initializeBraintreePayment: BraintreeCreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    braintree: {\n                        threeDSecure: {\n                            addFrame(error, content, cancel) {\n                                if (error) {\n                                    return onUnhandledError(error);\n                                }\n\n                                setThreeDSecureContent(content);\n                                ref.current.cancelThreeDSecureVerification = cancel;\n                            },\n                            removeFrame() {\n                                setThreeDSecureContent(undefined);\n                                ref.current.cancelThreeDSecureVerification = undefined;\n                            },\n                        },\n                        form:\n                            getHostedFormOptions &&\n                            (await getHostedFormOptions(selectedInstrument)),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment, onUnhandledError],\n        );\n\n    const appendThreeDSecureContent = useCallback(() => {\n        if (ref.current.threeDSecureContentRef.current && threeDSecureContent) {\n            ref.current.threeDSecureContentRef.current.appendChild(threeDSecureContent);\n        }\n    }, [threeDSecureContent]);\n\n    const cancelThreeDSecureModalFlow = useCallback(() => {\n        setThreeDSecureContent(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n\n    return (\n        <>\n            <CreditCardPaymentMethod\n                {...rest}\n                cardFieldset={hostedFieldset}\n                cardValidationSchema={hostedValidationSchema}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeBraintreePayment}\n                onUnhandledError={onUnhandledError}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                isOpen={!!threeDSecureContent}\n                onAfterOpen={appendThreeDSecureContent}\n                onRequestClose={cancelThreeDSecureModalFlow}\n            >\n                <div ref={ref.current.threeDSecureContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default withHostedCreditCardFieldset(BraintreeCreditCardPaymentMethod);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import { AccountInstrument, AchInstrument, BankInstrument, PayPalInstrument } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { IconNewAccount, IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument | AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default AccountInstrumentSelect;\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, ModalTriggerModalProps } from '../../ui/modal';\n\nimport AccountInstrumentSelect from './AccountInstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","import {\n    AccountInstrument,\n    CheckoutSelectors,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nexport interface HostedPaymentMethodProps {\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface WithCheckoutHostedPaymentMethodProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nclass HostedPaymentMethod extends Component<\n    HostedPaymentMethodProps &\n        WithCheckoutHostedPaymentMethodProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            description,\n            isInitializing = false,\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = this.props;\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n        const { instruments } = this.props;\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = this.props;\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutHostedPaymentMethodProps,\n    HostedPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n                isPaymentDataSubmitted,\n            },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const cart = getCart();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !cart || !customer || !method) {\n            return null;\n        }\n\n        const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n        const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n        return {\n            instruments: trustedInstruments,\n            isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n            isInstrumentFeatureAvailable:\n                !isPaymentDataSubmitted(method.id, method.gateway) &&\n                isInstrumentFeatureAvailable({\n                    config,\n                    customer,\n                    paymentMethod: method,\n                }),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n        };\n    };\n};\n\nexport default connectFormik(\n    withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(HostedPaymentMethod))),\n);\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { Omit } from 'utility-types';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport HostedPaymentMethod, { HostedPaymentMethodProps } from './HostedPaymentMethod';\n\nexport type CCAvenueMarsPaymentMethodProps = Omit<HostedPaymentMethodProps, 'description'>;\n\nconst CCAvenueMarsPaymentMethod: FunctionComponent<CCAvenueMarsPaymentMethodProps> = (props) => {\n    const description = useMemo(\n        () => <TranslatedString id=\"payment.ccavenuemars_description_text\" />,\n        [],\n    );\n\n    return <HostedPaymentMethod {...props} description={description} />;\n};\n\nexport default CCAvenueMarsPaymentMethod;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    withHostedCreditCardFieldset,\n    WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type HostedCreditCardPaymentMethodProps = Omit<\n    CreditCardPaymentMethodProps,\n    | 'cardFieldset'\n    | 'cardValidationSchema'\n    | 'storedCardValidationSchema'\n    | 'getStoredCardValidationFieldset'\n>;\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<\n    HostedCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    ...rest\n}) => {\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: getHostedFormOptions && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    return (\n        <CreditCardPaymentMethod\n            {...rest}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default withHostedCreditCardFieldset(HostedCreditCardPaymentMethod);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport getPaymentMethodName from './getPaymentMethodName';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps & WithLanguageProps> = ({\n    language,\n    method,\n    onSignOut,\n}) => (\n    <div className=\"signout-link\">\n        <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n        <a href=\"#\" onClick={preventDefault(onSignOut)}>\n            <TranslatedString\n                data={{ providerName: getPaymentMethodName(language)(method) }}\n                id=\"remote.sign_out_action\"\n            />\n        </a>{' '}\n        <TranslatedString id=\"remote.sign_out_after_action\" />\n    </div>\n);\n\nexport default withLanguage(SignOutLink);\n","import {\n    CheckoutSelectors,\n    CustomerRequestOptions,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport { noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport SignOutLink from './SignOutLink';\n\nexport interface WalletButtonPaymentMethodProps {\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutWalletButtonPaymentMethodProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentDataRequired: boolean;\n    isPaymentSelected: boolean;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nclass WalletButtonPaymentMethod extends Component<\n    WalletButtonPaymentMethodProps &\n        WithCheckoutWalletButtonPaymentMethodProps &\n        WithLanguageProps &\n        WithPaymentProps\n> {\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, disableSubmit, method, onUnhandledError = noop } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<\n            PaymentMethodProps &\n                WalletButtonPaymentMethodProps &\n                WithCheckoutWalletButtonPaymentMethodProps &\n                WithLanguageProps\n        >,\n    ): void {\n        const { method, isPaymentDataRequired } = this.props;\n        const { method: prevMethod, isPaymentDataRequired: prevIsPaymentDataRequired } = prevProps;\n\n        if (\n            method.initializationData !== prevMethod.initializationData ||\n            isPaymentDataRequired !== prevIsPaymentDataRequired\n        ) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const { isInitializing = false, isPaymentSelected } = this.props;\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    {isPaymentSelected ? this.renderPaymentView() : this.renderSignInView()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const { buttonId, language, signInButtonClassName, signInButtonLabel, method } = this.props;\n\n        return (\n            <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n                {signInButtonLabel || (\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_in_action\"\n                    />\n                )}\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const {\n            accountMask,\n            buttonId,\n            cardName,\n            cardType,\n            editButtonClassName,\n            editButtonLabel,\n            expiryMonth,\n            expiryYear,\n            shouldShowEditButton,\n            method,\n        } = this.props;\n\n        return (\n            <>\n                {cardName && (\n                    <p data-test=\"payment-method-wallet-card-name\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_name_label\" />:\n                        </strong>{' '}\n                        {cardName}\n                    </p>\n                )}\n\n                {accountMask && (\n                    <p data-test=\"payment-method-wallet-card-type\">\n                        <strong>{`${cardType}:`}</strong> {accountMask}\n                    </p>\n                )}\n\n                {expiryMonth && expiryYear && (\n                    <p data-test=\"payment-method-wallet-card-expiry\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                        </strong>{' '}\n                        {`${expiryMonth}/${expiryYear}`}\n                    </p>\n                )}\n\n                {shouldShowEditButton && (\n                    <p>\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    </p>\n                )}\n\n                <SignOutLink method={method} onSignOut={this.handleSignOut} />\n            </>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const { disableSubmit, method, isPaymentDataRequired } = this.props;\n\n        if (normalizeWalletPaymentData(method.initializationData) || !isPaymentDataRequired) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const { method, signOut, onSignOut = noop, onSignOutError = noop } = this.props;\n\n        try {\n            await signOut({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n}\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nfunction normalizeWalletPaymentData(data: any): WalletPaymentData | undefined {\n    if (!data) {\n        return;\n    }\n\n    if (data.card_information) {\n        return {\n            accountMask: formatAccountMask(data.card_information.number),\n            cardType: data.card_information.type,\n        };\n    }\n\n    if (data.cardData) {\n        return {\n            accountMask: formatAccountMask(data.cardData.accountMask),\n            cardType: data.cardData.cardType,\n            expiryMonth: data.cardData.expMonth,\n            expiryYear: data.cardData.expYear,\n        };\n    }\n\n    if (data.accountNum) {\n        const { card } = number(data.accountNum);\n\n        return {\n            accountMask: formatAccountMask(data.accountMask),\n            expiryMonth: data.expDate && `${data.expDate}`.substr(0, 2),\n            expiryYear: data.expDate && `${data.expDate}`.substr(2, 2),\n            cardType: card ? card.niceType : '',\n        };\n    }\n}\n\nfunction formatAccountMask(accountMask = '', padding = '****'): string {\n    return accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n}\n\nfunction mapFromCheckoutProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: WalletButtonPaymentMethodProps,\n): WithCheckoutWalletButtonPaymentMethodProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n    } = checkoutState;\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        return null;\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n    return {\n        ...walletPaymentData,\n        // FIXME: I'm not sure how this would work for non-English names.\n        cardName:\n            walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        signOut: checkoutService.signOutCustomer,\n    };\n}\n\nexport default withLanguage(\n    withPayment(withCheckout(mapFromCheckoutProps)(WalletButtonPaymentMethod)),\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { Omit } from 'utility-types';\n\nimport { masterpassFormatLocale, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nimport WalletButtonPaymentMethod, {\n    WalletButtonPaymentMethodProps,\n} from './WalletButtonPaymentMethod';\n\nexport type MasterpassPaymentMethodProps = Omit<WalletButtonPaymentMethodProps, 'buttonId'>;\n\ninterface WithCheckoutMasterpassProps {\n    storeLanguage: string;\n}\n\nconst MasterpassPaymentMethod: FunctionComponent<\n    MasterpassPaymentMethodProps & WithLanguageProps & WithCheckoutMasterpassProps\n> = ({ initializePayment, language, storeLanguage, ...rest }) => {\n    const initializeMasterpassPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            initializePayment({\n                ...options,\n                masterpass: {\n                    walletButton: 'walletButton',\n                },\n            }),\n        [initializePayment],\n    );\n\n    const {\n        config: { testMode },\n        initializationData: { checkoutId, isMasterpassSrcEnabled },\n    } = rest.method;\n\n    const locale = masterpassFormatLocale(storeLanguage);\n\n    const signInButtonLabel = useMemo(\n        () => (\n            <img\n                alt={language.translate('payment.masterpass_name_text')}\n                id=\"mpbutton\"\n                src={\n                    isMasterpassSrcEnabled\n                        ? `https://${\n                              testMode ? 'sandbox.' : ''\n                          }src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg?locale=${locale}&paymentmethod=master,visa,amex,discover&checkoutid=${checkoutId}`\n                        : `https://masterpass.com/dyn/img/btn/global/mp_chk_btn_126x030px.svg`\n                }\n            />\n        ),\n        [checkoutId, language, locale, testMode, isMasterpassSrcEnabled],\n    );\n\n    return (\n        <WalletButtonPaymentMethod\n            {...rest}\n            buttonId=\"walletButton\"\n            initializePayment={initializeMasterpassPayment}\n            signInButtonLabel={signInButtonLabel}\n        />\n    );\n};\n\nfunction mapFromCheckoutProps({ checkoutState }: CheckoutContextProps) {\n    const {\n        data: { getConfig },\n    } = checkoutState;\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        storeLanguage: config.storeProfile.storeLanguage,\n    };\n}\n\nexport default withCheckout(mapFromCheckoutProps)(withLanguage(MasterpassPaymentMethod));\n","export default function masterpassFormatLocale(localeLanguage: string): string {\n    return localeLanguage.replace('-', '_').toLowerCase();\n}\n","enum PaymentMethodProviderType {\n    Api = 'PAYMENT_TYPE_API',\n    Hosted = 'PAYMENT_TYPE_HOSTED',\n    Offline = 'PAYMENT_TYPE_OFFLINE',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n}\n\nexport default PaymentMethodProviderType;\n","import React, { FunctionComponent } from 'react';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { EMPTY_ARRAY } from '../../common/utility';\n\nimport HostedCreditCardPaymentMethod, {\n    HostedCreditCardPaymentMethodProps,\n} from './HostedCreditCardPaymentMethod';\nimport HostedPaymentMethod, { HostedPaymentMethodProps } from './HostedPaymentMethod';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\n\nexport type PaypalPaymentsProPaymentMethodProps =\n    | HostedPaymentMethodProps\n    | HostedCreditCardPaymentMethodProps;\n\ninterface WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    isHostedPayment: boolean;\n}\n\n/**\n * Paypal Payments Pro is a snowflake payment method - it can be a hosted\n * payment method or a credit card payment method depending on where the\n * checkout process is initiated. If it is started from the cart page via the\n * PayPal button, it behaves as a hosted payment method. But if it is started\n * from the checkout page, it behaves as a credit card payment method.\n */\nconst PaypalPaymentsProPaymentMethod: FunctionComponent<\n    PaypalPaymentsProPaymentMethodProps & WithCheckoutPaypalPaymentsProPaymentMethodProps\n> = ({ isHostedPayment, ...props }) => {\n    if (isHostedPayment) {\n        return <HostedPaymentMethod {...props} />;\n    }\n\n    return <HostedCreditCardPaymentMethod {...props} />;\n};\n\nfunction mapToPaypalPaymentsProPaymentMethodProps(\n    { checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    const {\n        data: { getCheckout },\n    } = checkoutState;\n    const { payments = EMPTY_ARRAY } = getCheckout() || {};\n    const selectedHostedMethod = payments.find(\n        ({ providerType }) => providerType === PaymentMethodProviderType.Hosted,\n    );\n\n    return {\n        isHostedPayment: selectedHostedMethod\n            ? selectedHostedMethod.providerId === method.id &&\n              selectedHostedMethod.gatewayId === method.gateway\n            : false,\n    };\n}\n\nexport default withCheckout(mapToPaypalPaymentsProPaymentMethodProps)(\n    PaypalPaymentsProPaymentMethod,\n);\n","import { CheckoutService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport { useCallback, useMemo } from 'react';\n\ntype CheckoutServiceInstance = InstanceType<typeof CheckoutService>;\n\ninterface Props {\n    method: PaymentMethod;\n    deinitializePayment: CheckoutServiceInstance['deinitializePayment'];\n    initializePayment: CheckoutServiceInstance['initializePayment'];\n    onUnhandledError?(error: Error): void;\n}\n\nexport const usePropsToOnMount = (props: Props): (() => () => void) => {\n    const { initializePayment, deinitializePayment, method, onUnhandledError = noop } = props;\n\n    const options = useMemo(\n        () => ({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        }),\n        [method.gateway, method.id],\n    );\n\n    const onInit = useCallback(() => initializePayment(options), [initializePayment, options]);\n    const onDeinit = useCallback(\n        () => deinitializePayment(options),\n        [deinitializePayment, options],\n    );\n\n    return useCallback(() => {\n        onInit().catch(onUnhandledError);\n\n        return () => {\n            onDeinit().catch(onUnhandledError);\n        };\n    }, [onInit, onUnhandledError, onDeinit]);\n};\n","import React, { FunctionComponent, useEffect } from 'react';\n\ninterface Props {\n    onMount(): () => void;\n    children?: React.ReactNode;\n}\n\nexport const Wrapper: FunctionComponent<Props> = (props) => {\n    const { children, onMount } = props;\n\n    useEffect(onMount, [onMount]);\n\n    return <>{children}</>;\n};\n","import { ComponentType } from 'react';\n\nimport HostedCreditCardPaymentMethod from '../HostedCreditCardPaymentMethod';\n\nimport { NoUI } from './NoUI';\n\ntype ComponentMap = Record<string, ComponentType<any>>;\n\nexport const initializationComponentMap: ComponentMap = {\n    card_ui: HostedCreditCardPaymentMethod,\n    none: NoUI,\n};\n","import React from 'react';\n\nimport { Props } from './PPSDKPaymentMethod';\nimport { usePropsToOnMount } from './usePropsToOnMount';\nimport { Wrapper } from './Wrapper';\n\nexport const NoUI = (props: Props) => {\n    const onMount = usePropsToOnMount(props);\n\n    return <Wrapper onMount={onMount} />;\n};\n","import { CheckoutService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent } from 'react';\n\nimport { initializationComponentMap } from './initializationComponentMap';\n\ntype CheckoutServiceInstance = InstanceType<typeof CheckoutService>;\n\nexport interface Props {\n    method: PaymentMethod;\n    deinitializePayment: CheckoutServiceInstance['deinitializePayment'];\n    initializePayment: CheckoutServiceInstance['initializePayment'];\n    onUnhandledError?(error: Error): void;\n}\n\nexport const PPSDKPaymentMethod: FunctionComponent<Props> = (props) => {\n    const { method, onUnhandledError = noop } = props;\n\n    const componentKey = method.initializationStrategy?.type || '';\n    const Component = initializationComponentMap[componentKey];\n\n    if (!Component) {\n        onUnhandledError(new Error('PPSDK initialization strategy not found'));\n\n        return null;\n    }\n\n    return <Component {...props} />;\n};\n","import {\n    CheckoutSelectors,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nimport BraintreeCreditCardPaymentMethod from './BraintreeCreditCardPaymentMethod';\nimport CCAvenueMarsPaymentMethod from './CCAvenueMarsPaymentMethod';\nimport HostedCreditCardPaymentMethod from './HostedCreditCardPaymentMethod';\nimport HostedPaymentMethod from './HostedPaymentMethod';\nimport MasterpassPaymentMethod from './MasterpassPaymentMethod';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\nimport PaymentMethodType from './PaymentMethodType';\nimport PaypalPaymentsProPaymentMethod from './PaypalPaymentsProPaymentMethod';\nimport PPSDKPaymentMethod from './PPSDKPaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError?(error: Error): void;\n    submitForm?(): void;\n}\n\nexport interface WithCheckoutPaymentMethodProps {\n    isInitializing: boolean;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n}\n\n/**\n * If possible, try to avoid having components that are specific to a specific\n * payment provider or method. Instead, try to generalise the requirements and\n * use components that can are reusable for multiple payment methods. i.e.:\n * CreditCardPaymentMethod, HostedPaymentMethod etc... If it is really necessary\n * for a particular payment method, you may write a method-specific component for\n * the purpose of configuring a general-purpose component in order to fulfill\n * its specific product or technical requirements.\n */\nconst PaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & WithCheckoutPaymentMethodProps\n> = (props) => {\n    const { method } = props;\n\n    if (method.type === PaymentMethodProviderType.PPSDK) {\n        return <PPSDKPaymentMethod {...props} />;\n    }\n\n    if (method.id === PaymentMethodId.CCAvenueMars) {\n        return <CCAvenueMarsPaymentMethod {...props} />;\n    }\n\n    if (method.id === PaymentMethodId.Masterpass) {\n        return <MasterpassPaymentMethod {...props} />;\n    }\n\n    if (method.id === PaymentMethodId.Braintree) {\n        return <BraintreeCreditCardPaymentMethod {...props} />;\n    }\n\n    if (\n        method.type !== PaymentMethodProviderType.Hosted &&\n        method.id === PaymentMethodId.PaypalPaymentsPro\n    ) {\n        return <PaypalPaymentsProPaymentMethod {...props} />;\n    }\n\n\n    if (\n        method.id === PaymentMethodId.BraintreeVenmo ||\n        method.id === PaymentMethodId.Humm ||\n        method.id === PaymentMethodId.Laybuy ||\n        method.id === PaymentMethodId.Quadpay ||\n        method.id === PaymentMethodId.Sezzle ||\n        method.id === PaymentMethodId.Zip ||\n        method.method === PaymentMethodType.Paypal ||\n        method.method === PaymentMethodType.PaypalCredit ||\n        method.type === PaymentMethodProviderType.Hosted\n    ) {\n        return <HostedPaymentMethod {...props} />;\n    }\n\n    // NOTE: Some payment methods have `method` as `credit-card` but they are\n    // actually not. Therefore, as a workaround, we are doing the following\n    // check last.\n    if (\n        method.method === PaymentMethodType.CreditCard ||\n        method.type === PaymentMethodProviderType.Api\n    ) {\n        return <HostedCreditCardPaymentMethod {...props} />;\n    }\n\n    return null;\n};\n\nfunction mapToWithCheckoutPaymentMethodProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaymentMethodProps {\n    const {\n        statuses: { isInitializingPayment },\n    } = checkoutState;\n\n    return {\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        deinitializePayment: checkoutService.deinitializePayment,\n        initializeCustomer: checkoutService.initializeCustomer,\n        initializePayment: checkoutService.initializePayment,\n        isInitializing: isInitializingPayment(method.id),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutPaymentMethodProps)(memo(PaymentMethodComponent));\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { ComponentType } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormProvider,\n    PaymentFormValues,\n    PaymentMethodResolveId,\n    PaymentMethodProps as ResolvedPaymentMethodProps,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout, WithCheckoutProps } from '../../checkout';\nimport { connectFormik, WithFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport createPaymentFormService from '../createPaymentFormService';\nimport resolvePaymentMethod from '../resolvePaymentMethod';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport { default as PaymentMethodV1 } from './PaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    resolveComponent?(\n        query: PaymentMethodResolveId,\n    ): ComponentType<ResolvedPaymentMethodProps> | undefined;\n    onUnhandledError(error: Error): void;\n}\n\nconst PaymentMethodContainer: ComponentType<\n    PaymentMethodProps &\n        WithCheckoutProps &\n        WithLanguageProps &\n        WithPaymentProps &\n        WithFormProps &\n        WithFormikProps<PaymentFormValues>\n> = ({\n    formik: formikContext,\n    checkoutService,\n    checkoutState,\n    disableSubmit,\n    hidePaymentSubmitButton,\n    isEmbedded,\n    isSubmitted,\n    isUsingMultiShipping,\n    language,\n    method,\n    onUnhandledError,\n    resolveComponent = resolvePaymentMethod,\n    setSubmit,\n    setSubmitted,\n    setValidationSchema,\n}) => {\n    const formContext = {\n        isSubmitted,\n        setSubmitted,\n    };\n\n    const paymentContext = {\n        disableSubmit,\n        hidePaymentSubmitButton,\n        setSubmit,\n        setValidationSchema,\n    };\n\n    const ResolvedPaymentMethod = resolveComponent({\n        id: method.id,\n        gateway: method.gateway,\n        type: method.type,\n    });\n\n    if (!ResolvedPaymentMethod) {\n        return (\n            <PaymentMethodV1\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    const paymentForm = createPaymentFormService(formikContext, formContext, paymentContext);\n\n    return (\n        <PaymentFormProvider paymentForm={paymentForm}>\n            <ResolvedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                language={language}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                paymentForm={paymentForm}\n            />\n        </PaymentFormProvider>\n    );\n};\n\nexport default withCheckout((props) => props)(\n    withLanguage(withPayment(withForm(connectFormik(PaymentMethodContainer)))),\n) as ComponentType<PaymentMethodProps>;\n","import { FormikContextType } from 'formik';\n\nimport {\n    PaymentFormService,\n    PaymentFormValues,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContextType } from '@bigcommerce/checkout/ui';\n\nimport { PaymentContextProps } from './PaymentContext';\n\nexport default function createPaymentFormService(\n    formikContext: FormikContextType<PaymentFormValues>,\n    formContext: FormContextType,\n    paymentContext: PaymentContextProps,\n): PaymentFormService {\n    const {\n        setFieldTouched,\n        setFieldValue,\n        submitForm,\n        validateForm,\n        values,\n    } = formikContext;\n\n    const { isSubmitted, setSubmitted } = formContext;\n\n    const { disableSubmit, setSubmit, setValidationSchema, hidePaymentSubmitButton } =\n        paymentContext;\n\n    const getFieldValue = <T>(key: string): T | unknown => values[key];\n\n    return {\n        disableSubmit,\n        getFieldValue,\n        getFormValues: () => values,\n        hidePaymentSubmitButton,\n        isSubmitted: () => isSubmitted,\n        setFieldTouched: setFieldTouched as PaymentFormService['setFieldTouched'],\n        setFieldValue: setFieldValue as PaymentFormService['setFieldValue'],\n        setSubmit,\n        setSubmitted,\n        setValidationSchema,\n        submitForm,\n        validateForm,\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find, get, noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { isMobile } from '../../common/utility';\nimport { Checklist, ChecklistItem, CustomChecklistItem } from '../../ui/form';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport getUniquePaymentMethodId, { parseUniquePaymentMethodId } from './getUniquePaymentMethodId';\nimport PaymentMethodTitle, { getPaymentMethodTitle } from './PaymentMethodTitle';\nimport PaymentMethodV2 from './PaymentMethodV2';\n\nexport interface PaymentMethodListProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    onSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n}\n\nfunction getPaymentMethodFromListValue(methods: PaymentMethod[], value: string): PaymentMethod {\n    const { gatewayId: gateway, methodId: id } = parseUniquePaymentMethodId(value);\n    const method = gateway ? find(methods, { gateway, id }) : find(methods, { id });\n\n    if (!method) {\n        throw new Error(`Unable to find payment method with id: ${id}`);\n    }\n\n    return method;\n}\n\nconst PaymentMethodList: FunctionComponent<\n    PaymentMethodListProps & ConnectFormikProps<{ paymentProviderRadio?: string }>\n> = ({\n    formik: { values },\n    isEmbedded,\n    isInitializingPayment,\n    isUsingMultiShipping,\n    methods,\n    onSelect = noop,\n    onUnhandledError,\n}) => {\n    const { language } = useLocale();\n    const {\n        checkoutState: {\n            data: { getConfig }\n        }\n    } = useCheckout();\n\n    const config = getConfig();\n\n    const titleText = useMemo(() => {\n        if (config && values.paymentProviderRadio) {\n            const checkoutSettings = config.checkoutSettings;\n            const cdnBasePath = config.cdnPath;\n            const storeCountryCode = config.storeProfile.storeCountryCode;\n            const paymentMethod = getPaymentMethodFromListValue(methods, values.paymentProviderRadio);\n            const methodName = getPaymentMethodName(language)(paymentMethod);\n            const { titleText } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(paymentMethod);\n\n            return titleText || methodName;\n        }\n\n        return '';\n    }, [config, values.paymentProviderRadio])\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelect(getPaymentMethodFromListValue(methods, value));\n        },\n        [methods, onSelect],\n    );\n\n    return (\n        <>\n            <div aria-live=\"assertive\" className='is-srOnly' role=\"status\">{titleText}</div>\n            <Checklist\n                defaultSelectedItemId={values.paymentProviderRadio}\n                isDisabled={isInitializingPayment}\n                name=\"paymentProviderRadio\"\n                onSelect={handleSelect}\n            >\n                {methods.map((method) => {\n                    const value = getUniquePaymentMethodId(method.id, method.gateway);\n                    const showOnlyOnMobileDevices = get(\n                        method,\n                        'initializationData.showOnlyOnMobileDevices',\n                        false,\n                    );\n\n                    if (showOnlyOnMobileDevices && !isMobile()) {\n                        return;\n                    }\n\n                    return (\n                        <PaymentMethodListItem\n                            isDisabled={isInitializingPayment}\n                            isEmbedded={isEmbedded}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            key={value}\n                            method={method}\n                            onUnhandledError={onUnhandledError}\n                            value={value}\n                        />\n                    );\n                })}\n            </Checklist>\n        </>\n    );\n};\n\ninterface PaymentMethodListItemProps {\n    isDisabled?: boolean;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    value: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentMethodListItem: FunctionComponent<PaymentMethodListItemProps> = ({\n    isDisabled,\n    isEmbedded,\n    isUsingMultiShipping,\n    method,\n    onUnhandledError,\n    value,\n}) => {\n    const renderPaymentMethod = useMemo(() => {\n        return (\n            <PaymentMethodV2\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError || noop}\n            />\n        );\n    }, [isEmbedded, isUsingMultiShipping, method, onUnhandledError]);\n\n    const renderPaymentMethodTitle = useCallback(\n        (isSelected: boolean) => <PaymentMethodTitle isSelected={isSelected} method={method} onUnhandledError={onUnhandledError} />,\n        [method],\n    );\n\n    if (method.initializationData?.isCustomChecklistItem) {\n        return (\n            <CustomChecklistItem\n                content={renderPaymentMethod}\n                htmlId={`radio-${value}`}\n            />\n        );\n    }\n\n    return (\n        <ChecklistItem\n            content={renderPaymentMethod}\n            htmlId={`radio-${value}`}\n            isDisabled={isDisabled}\n            label={renderPaymentMethodTitle}\n            value={value}\n        />\n    );\n};\n\nexport default connectFormik(memo(PaymentMethodList));\n","export default function isMobile(): boolean {\n    return /Android|iPhone|iPad|iPod/i.test(window.navigator.userAgent);\n}\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { mapToRedeemableProps, Redeemable, RedeemableProps } from '../cart';\nimport { withCheckout } from '../checkout';\nimport { Fieldset, Legend } from '../ui/form';\n\nconst PaymentRedeemables: FunctionComponent<RedeemableProps> = (redeemableProps) => (\n    <Fieldset \n        additionalClassName=\"redeemable-payments\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.redeemable_payments_text\" />\n            </Legend>\n        }\n    >\n        <Redeemable {...redeemableProps} showAppliedRedeemables={true} />\n    </Fieldset>\n);\n\nexport default withCheckout(mapToRedeemableProps)(memo(PaymentRedeemables));\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { withCheckout } from '../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { IconBolt } from '../ui/icon';\n\nimport { PaymentMethodId, PaymentMethodType } from './paymentMethod';\n\ninterface PaymentSubmitButtonTextProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodType?: string;\n    methodName?: string;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\nconst providersWithCustomClasses = [PaymentMethodId.Bolt];\n\nconst PaymentSubmitButtonText: FunctionComponent<PaymentSubmitButtonTextProps> = memo(\n    ({\n        methodId,\n        methodName,\n        methodType,\n        methodGateway,\n        initialisationStrategyType,\n        brandName,\n        isComplete,\n        isPaymentDataRequired,\n    }) => {\n        if (!isPaymentDataRequired) {\n            return <TranslatedString id=\"payment.place_order_action\" />;\n        }\n\n        if (methodName && initialisationStrategyType === 'none') {\n            return <TranslatedString data={{ methodName }} id=\"payment.ppsdk_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.AmazonPay) {\n            return <TranslatedString id=\"payment.amazonpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Bolt) {\n            return (\n                <>\n                    <IconBolt additionalClassName=\"payment-submit-button-bolt-icon\" />\n                    <TranslatedString id=\"payment.place_order_action\" />\n                </>\n            );\n        }\n\n        if (methodGateway === PaymentMethodId.Barclaycard) {\n            return <TranslatedString id=\"payment.barclaycard_continue_action\" />;\n        }\n\n        if (methodGateway === PaymentMethodId.BlueSnapV2) {\n            return <TranslatedString id=\"payment.bluesnap_v2_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.VisaCheckout) {\n            return <TranslatedString id=\"payment.visa_checkout_continue_action\" />;\n        }\n\n        if (\n            methodType === PaymentMethodType.PaypalVenmo ||\n            methodId === PaymentMethodId.BraintreeVenmo\n        ) {\n            return <TranslatedString id=\"payment.paypal_venmo_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.Paypal) {\n            const continueActionId = methodId === PaymentMethodId.PaypalCommerce\n                ? 'payment.place_order_action'\n                : 'payment.paypal_continue_action';\n\n            return <TranslatedString\n                data={{ isComplete }}\n                id={isComplete ? 'payment.paypal_complete_action' : continueActionId}\n            />;\n        }\n\n        if (methodType === PaymentMethodType.PaypalCredit) {\n            const continueTranslationId = brandName\n                ? 'payment.continue_with_brand'\n                : 'payment.paypal_pay_later_continue_action'\n            const completeTranslationId = brandName\n                ? 'payment.complete_with_brand'\n                : 'payment.paypal_pay_later_complete_action'\n\n            return (\n                <TranslatedString\n                    data={{ brandName, isComplete, continueTranslationId, completeTranslationId }}\n                    id={\n                        isComplete\n                            ? completeTranslationId\n                            : continueTranslationId\n                    }\n                />\n            );\n        }\n\n        if (methodId === PaymentMethodId.Quadpay) {\n            return <TranslatedString id=\"payment.quadpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Zip) {\n            return <TranslatedString id=\"payment.zip_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Klarna) {\n            return <TranslatedString id=\"payment.klarna_continue_action\" />;\n        }\n\n        return <TranslatedString id=\"payment.place_order_action\" />;\n    },\n);\n\nexport interface PaymentSubmitButtonProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodName?: string;\n    methodType?: string;\n    isDisabled?: boolean;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\ninterface WithCheckoutPaymentSubmitButtonProps {\n    isInitializing?: boolean;\n    isSubmitting?: boolean;\n}\n\nconst PaymentSubmitButton: FunctionComponent<\n    PaymentSubmitButtonProps & WithCheckoutPaymentSubmitButtonProps\n> = ({\n    isDisabled,\n    isInitializing,\n    isSubmitting,\n    isPaymentDataRequired,\n    methodGateway,\n    methodId,\n    methodName,\n    methodType,\n    initialisationStrategyType,\n    brandName,\n    isComplete,\n}) => (\n    <Button\n        className={\n            providersWithCustomClasses.includes(methodId as PaymentMethodId)\n                ? `payment-submit-button-${methodId}`\n                : undefined\n        }\n        data-test=\"payment-submit-button\"\n        disabled={isInitializing || isSubmitting || isDisabled}\n        id=\"checkout-payment-continue\"\n        isFullWidth\n        isLoading={isSubmitting}\n        size={ButtonSize.Large}\n        type=\"submit\"\n        variant={ButtonVariant.Action}\n    >\n        <PaymentSubmitButtonText\n            brandName={brandName}\n            initialisationStrategyType={initialisationStrategyType}\n            isComplete={isComplete}\n            isPaymentDataRequired={isPaymentDataRequired}\n            methodGateway={methodGateway}\n            methodId={methodId}\n            methodName={methodName}\n            methodType={methodType}\n        />\n    </Button>\n);\n\nexport default withCheckout(({ checkoutState }) => {\n    const {\n        data: { isPaymentDataRequired },\n        statuses: { isInitializingCustomer, isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    return {\n        isInitializing: isInitializingCustomer() || isInitializingPayment(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isSubmitting: isSubmittingOrder(),\n    };\n})(memo(PaymentSubmitButton));\n","import { CheckoutSelectors } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, MouseEvent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../checkout';\nimport { isErrorWithType } from '../common/error';\n\nexport interface SpamProtectionProps {\n    didExceedSpamLimit?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface SpamProtectionState {\n    shouldShowRetryButton: boolean;\n}\n\ninterface WithCheckoutSpamProtectionProps {\n    isExecutingSpamCheck: boolean;\n    executeSpamCheck(): Promise<CheckoutSelectors>;\n}\n\nfunction mapToSpamProtectionProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutSpamProtectionProps {\n    return {\n        isExecutingSpamCheck: checkoutState.statuses.isExecutingSpamCheck(),\n        executeSpamCheck: checkoutService.executeSpamCheck,\n    };\n}\n\nclass SpamProtectionField extends Component<\n    SpamProtectionProps & WithCheckoutSpamProtectionProps,\n    SpamProtectionState\n> {\n    state = {\n        shouldShowRetryButton: false,\n    };\n\n    async componentDidMount() {\n        const { didExceedSpamLimit } = this.props;\n\n        if (didExceedSpamLimit) {\n            return;\n        }\n\n        this.verify();\n    }\n\n    render() {\n        const { isExecutingSpamCheck } = this.props;\n\n        return (\n            <div className=\"spamProtection-container\">\n                <LoadingOverlay isLoading={isExecutingSpamCheck}>\n                    {this.renderContent()}\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { didExceedSpamLimit } = this.props;\n        const { shouldShowRetryButton } = this.state;\n\n        if (!didExceedSpamLimit && !shouldShowRetryButton) {\n            return;\n        }\n\n        return (\n            <div className=\"spamProtection-panel optimizedCheckout-overlay\">\n                <a\n                    className=\"spamProtection-panel-message optimizedCheckout-primaryContent\"\n                    data-test=\"spam-protection-verify-button\"\n                    onClick={this.handleRetry}\n                >\n                    <TranslatedString id=\"spam_protection.verify_action\" />\n                </a>\n            </div>\n        );\n    }\n\n    private async verify(): Promise<void> {\n        const { executeSpamCheck, onUnhandledError = noop } = this.props;\n\n        try {\n            await executeSpamCheck();\n        } catch (error) {\n            this.setState({ shouldShowRetryButton: true });\n\n            // Notify the parent component if the user experiences a problem other than cancelling the reCaptcha challenge.\n            if (\n                isErrorWithType(error) &&\n                error.type !== 'spam_protection_challenge_not_completed'\n            ) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    private handleRetry: (event: MouseEvent) => void = (event) => {\n        event.preventDefault();\n\n        this.verify();\n    };\n}\n\nexport default withCheckout(mapToSpamProtectionProps)(SpamProtectionField);\n","import { noop } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withCurrency, WithCurrencyProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { CheckboxInput } from '../../ui/form';\nimport { Tooltip, TooltipTrigger } from '../../ui/tooltip';\n\nexport interface StoreCreditFieldProps {\n    availableStoreCredit: number;\n    name: string;\n    usableStoreCredit: number;\n    isStoreCreditApplied: boolean;\n    onChange?(value: boolean): void;\n}\n\nconst StoreCreditField: FunctionComponent<StoreCreditFieldProps & WithCurrencyProps> = ({\n    availableStoreCredit,\n    currency,\n    name,\n    onChange = noop,\n    usableStoreCredit,\n    isStoreCreditApplied,\n}) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n\n    const handleChange = useCallback((event: any) => onChange(event.target.checked), [onChange]);\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"redeemable.apply_store_credit_before_action\" />{' '}\n                <TooltipTrigger\n                    placement=\"top-start\"\n                    tooltip={\n                        <Tooltip testId=\"payment-store-credit-tooltip\">\n                            <TranslatedString\n                                data={{\n                                    storeCredit: currency.toCustomerCurrency(availableStoreCredit),\n                                }}\n                                id=\"redeemable.store_credit_available_text\"\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <a href=\"#\" onClick={preventDefault()}>\n                        {currency.toCustomerCurrency(usableStoreCredit)}\n                    </a>\n                </TooltipTrigger>{' '}\n                <TranslatedString id=\"redeemable.apply_store_credit_after_action\" />\n            </>\n        ),\n        [availableStoreCredit, currency, usableStoreCredit],\n    );\n\n    return (\n        <CheckboxInput\n            checked={isStoreCreditApplied}\n            disabled={isSubmittingOrder()}\n            id={name}\n            label={labelContent}\n            name={name}\n            onChange={handleChange}\n            value={name}\n        />\n    );\n};\n\nexport default withCurrency(StoreCreditField);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst StoreCreditOverlay: FunctionComponent = () => (\n    <div className=\"storeCreditOverlay\" data-test=\"payment-store-credit-overlay\">\n        <p className=\"storeCreditOverlay-text\">\n            <TranslatedString id=\"payment.payment_not_required_text\" />\n        </p>\n    </div>\n);\n\nexport default StoreCreditOverlay;\n","import { ExtensionRegion, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, FormikState, withFormik, WithFormikConfig } from 'formik';\nimport { isNil, noop, omitBy } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useContext, useMemo } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { TermsConditions } from '../termsConditions';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getPaymentValidationSchema from './getPaymentValidationSchema';\nimport {\n    getPaymentMethodName,\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodList,\n} from './paymentMethod';\nimport PaymentRedeemables from './PaymentRedeemables';\nimport PaymentSubmitButton from './PaymentSubmitButton';\nimport SpamProtectionField from './SpamProtectionField';\nimport { StoreCreditField, StoreCreditOverlay } from './storeCredit';\n\nexport interface PaymentFormProps {\n    availableStoreCredit?: number;\n    defaultGatewayId?: string;\n    defaultMethodId: string;\n    didExceedSpamLimit?: boolean;\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isTermsConditionsRequired?: boolean;\n    isUsingMultiShipping?: boolean;\n    isStoreCreditApplied: boolean;\n    methods: PaymentMethod[];\n    selectedMethod?: PaymentMethod;\n    shouldShowStoreCredit?: boolean;\n    shouldDisableSubmit?: boolean;\n    shouldHidePaymentSubmitButton?: boolean;\n    shouldExecuteSpamCheck?: boolean;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit?: number;\n    validationSchema?: ObjectSchema<Partial<PaymentFormValues>>;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onStoreCreditChange?(useStoreCredit?: boolean): void;\n    onSubmit?(values: PaymentFormValues): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentForm: FunctionComponent<\n    PaymentFormProps & FormikProps<PaymentFormValues> & WithLanguageProps\n> = ({\n    availableStoreCredit = 0,\n    didExceedSpamLimit,\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isTermsConditionsRequired,\n    isStoreCreditApplied,\n    isUsingMultiShipping,\n    language,\n    methods,\n    onMethodSelect,\n    onStoreCreditChange,\n    onUnhandledError,\n    resetForm,\n    selectedMethod,\n    shouldDisableSubmit,\n    shouldHidePaymentSubmitButton,\n    shouldExecuteSpamCheck,\n    termsConditionsText = '',\n    termsConditionsUrl,\n    usableStoreCredit = 0,\n    values,\n}) => {\n    const selectedMethodId = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        switch (selectedMethod.id) {\n            case PaymentMethodId.AmazonPay:\n                if (selectedMethod.initializationData.paymentToken) {\n                    return;\n                }\n\n                return selectedMethod.id;\n\n            default:\n                return selectedMethod.id;\n        }\n    }, [selectedMethod]);\n\n    const brandName = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        return (\n            selectedMethod.initializationData?.payPalCreditProductBrandName?.credit ||\n            selectedMethod.initializationData?.payPalCreditProductBrandName\n        );\n    }, [selectedMethod]);\n\n    if (shouldExecuteSpamCheck) {\n        return (\n            <SpamProtectionField\n                didExceedSpamLimit={didExceedSpamLimit}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    return (\n        <Form className=\"checkout-form\" testId=\"payment-form\">\n            {usableStoreCredit > 0 && (\n                <StoreCreditField\n                    availableStoreCredit={availableStoreCredit}\n                    isStoreCreditApplied={isStoreCreditApplied}\n                    name=\"useStoreCredit\"\n                    onChange={onStoreCreditChange}\n                    usableStoreCredit={usableStoreCredit}\n                />\n            )}\n\n            <PaymentMethodListFieldset\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isPaymentDataRequired={isPaymentDataRequired}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onMethodSelect={onMethodSelect}\n                onUnhandledError={onUnhandledError}\n                resetForm={resetForm}\n                values={values}\n            />\n\n            <PaymentRedeemables />\n\n            {isTermsConditionsRequired && (\n                <TermsConditions\n                    termsConditionsText={termsConditionsText}\n                    termsConditionsUrl={termsConditionsUrl}\n                />\n            )}\n\n            <div className=\"form-actions\">\n                {shouldHidePaymentSubmitButton ? (\n                    <PaymentMethodSubmitButtonContainer />\n                ) : (\n                    <PaymentSubmitButton\n                        brandName={brandName}\n                        initialisationStrategyType={\n                            selectedMethod && selectedMethod.initializationStrategy?.type\n                        }\n                        isComplete={!!selectedMethod?.initializationData?.isComplete}\n                        isDisabled={shouldDisableSubmit}\n                        methodGateway={selectedMethod && selectedMethod.gateway}\n                        methodId={selectedMethodId}\n                        methodName={\n                            selectedMethod && getPaymentMethodName(language)(selectedMethod)\n                        }\n                        methodType={selectedMethod && selectedMethod.method}\n                    />\n                )}\n            </div>\n        </Form>\n    );\n};\n\nconst PaymentMethodSubmitButtonContainer: FunctionComponent = () => {\n    return <div className=\"submitButtonContainer\" id=\"checkout-payment-continue\" />;\n};\n\ninterface PaymentMethodListFieldsetProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    values: PaymentFormValues;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n    resetForm(nextValues?: Partial<FormikState<PaymentFormValues>>): void;\n}\n\nconst PaymentMethodListFieldset: FunctionComponent<PaymentMethodListFieldsetProps> = ({\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isUsingMultiShipping,\n    methods,\n    onMethodSelect = noop,\n    onUnhandledError,\n    resetForm,\n    values,\n}) => {\n    const { setSubmitted } = useContext(FormContext);\n\n    const handlePaymentMethodSelect = useCallback(\n        (method: PaymentMethod) => {\n            const updatedValues = {\n                ...values,\n                ccCustomerCode: '',\n                ccCvv: '',\n                ccDocument: '',\n                customerEmail: '',\n                customerMobile: '',\n                ccExpiry: '',\n                ccName: '',\n                ccNumber: '',\n                instrumentId: '',\n                paymentProviderRadio: getUniquePaymentMethodId(method.id, method.gateway),\n                shouldCreateAccount: true,\n                shouldSaveInstrument: false,\n            };\n\n            resetForm({ values: updatedValues });\n            setSubmitted(false);\n            onMethodSelect(method);\n        },\n        [values, onMethodSelect, resetForm, setSubmitted],\n    );\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.payment_methods_text\" />\n                </Legend>\n            }\n        >\n            {!isPaymentDataRequired() && <StoreCreditOverlay />}\n\n            <Extension region={ExtensionRegion.PaymentPaymentMethodListBefore}/>\n\n            <PaymentMethodList\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onSelect={handlePaymentMethodSelect}\n                onUnhandledError={onUnhandledError}\n            />\n        </Fieldset>\n    );\n};\n\nconst paymentFormConfig: WithFormikConfig<PaymentFormProps & WithLanguageProps, PaymentFormValues> =\n    {\n        mapPropsToValues: ({ defaultGatewayId, defaultMethodId }) => ({\n            ccCustomerCode: '',\n            ccCvv: '',\n            ccDocument: '',\n            customerEmail: '',\n            customerMobile: '',\n            ccExpiry: '',\n            ccName: '',\n            ccNumber: '',\n            paymentProviderRadio: getUniquePaymentMethodId(defaultMethodId, defaultGatewayId),\n            instrumentId: '',\n            shouldCreateAccount: true,\n            shouldSaveInstrument: false,\n            terms: false,\n            hostedForm: {\n                cardType: '',\n                errors: {\n                    cardCode: '',\n                    cardCodeVerification: '',\n                    cardExpiry: '',\n                    cardName: '',\n                    cardNumber: '',\n                    cardNumberVerification: '',\n                },\n            },\n            accountNumber: '',\n            routingNumber: '',\n        }),\n\n        handleSubmit: (values, { props: { onSubmit = noop } }) => {\n            onSubmit(\n                omitBy(\n                    values,\n                    (value, key) => isNil(value) || value === '' || key === 'hostedForm',\n                ),\n            );\n        },\n\n        validationSchema: ({\n            language,\n            isTermsConditionsRequired = false,\n            validationSchema,\n        }: PaymentFormProps & WithLanguageProps) =>\n            getPaymentValidationSchema({\n                additionalValidation: validationSchema,\n                isTermsConditionsRequired,\n                language,\n            }),\n    };\n\nexport default withLanguage(withFormik(paymentFormConfig)(memo(PaymentForm)));\n","import {\n    CartChangedError,\n    CheckoutSelectors,\n    CheckoutService,\n    CheckoutSettings,\n    OrderRequestBody,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { compact, find, isEmpty, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { ErrorLogger } from '@bigcommerce/checkout/error-handling-utils';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { withAnalytics } from '../analytics';\nimport { withCheckout } from '../checkout';\nimport {\n    ErrorModal,\n    ErrorModalOnCloseProps,\n    isCartChangedError,\n    isErrorWithType,\n} from '../common/error';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TermsConditionsType } from '../termsConditions';\n\nimport mapSubmitOrderErrorMessage, { mapSubmitOrderErrorTitle } from './mapSubmitOrderErrorMessage';\nimport mapToOrderRequestBody from './mapToOrderRequestBody';\nimport PaymentContext from './PaymentContext';\nimport PaymentForm from './PaymentForm';\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodProviderType,\n} from './paymentMethod';\n\nexport interface PaymentProps {\n    errorLogger: ErrorLogger;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void; // TODO: We're currently doing this check in multiple places, perhaps we should move it up so this check get be done in a single place instead.\n    onCartChangedError?(error: CartChangedError): void;\n    onFinalize?(): void;\n    onFinalizeError?(error: Error): void;\n    onReady?(): void;\n    onSubmit?(): void;\n    onSubmitError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutPaymentProps {\n    availableStoreCredit: number;\n    cartUrl: string;\n    defaultMethod?: PaymentMethod;\n    finalizeOrderError?: Error;\n    isInitializingPayment: boolean;\n    isSubmittingOrder: boolean;\n    isStoreCreditApplied: boolean;\n    isTermsConditionsRequired: boolean;\n    methods: PaymentMethod[];\n    shouldExecuteSpamCheck: boolean;\n    shouldLocaliseErrorMessages: boolean;\n    submitOrderError?: Error;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit: number;\n    applyStoreCredit(useStoreCredit: boolean): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n    finalizeOrderIfNeeded(): Promise<CheckoutSelectors>;\n    isPaymentDataRequired(): boolean;\n    loadCheckout(): Promise<CheckoutSelectors>;\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\n    submitOrder(values: OrderRequestBody): Promise<CheckoutSelectors>;\n    checkoutServiceSubscribe: CheckoutService['subscribe'];\n}\n\ninterface PaymentState {\n    didExceedSpamLimit: boolean;\n    isReady: boolean;\n    selectedMethod?: PaymentMethod;\n    shouldDisableSubmit: { [key: string]: boolean };\n    shouldHidePaymentSubmitButton: { [key: string]: boolean };\n    submitFunctions: { [key: string]: ((values: PaymentFormValues) => void) | null };\n    validationSchemas: { [key: string]: ObjectSchema<Partial<PaymentFormValues>> | null };\n}\n\nclass Payment extends Component<\n    PaymentProps & WithCheckoutPaymentProps & WithLanguageProps & AnalyticsContextProps,\n    PaymentState\n> {\n    state: PaymentState = {\n        didExceedSpamLimit: false,\n        isReady: false,\n        shouldDisableSubmit: {},\n        shouldHidePaymentSubmitButton: {},\n        validationSchemas: {},\n        submitFunctions: {},\n    };\n\n    private grandTotalChangeUnsubscribe?: () => void;\n\n    private getContextValue = memoizeOne(() => {\n        return {\n            disableSubmit: this.disableSubmit,\n            setSubmit: this.setSubmit,\n            setValidationSchema: this.setValidationSchema,\n            hidePaymentSubmitButton: this.hidePaymentSubmitButton,\n        };\n    });\n\n    async componentDidMount(): Promise<void> {\n        const {\n            finalizeOrderIfNeeded,\n            onFinalize = noop,\n            onFinalizeError = noop,\n            onReady = noop,\n            usableStoreCredit,\n            checkoutServiceSubscribe,\n        } = this.props;\n\n        if (usableStoreCredit) {\n            this.handleStoreCreditChange(true);\n        }\n\n        await this.loadPaymentMethodsOrThrow();\n\n        try {\n            const state = await finalizeOrderIfNeeded();\n            const order = state.data.getOrder();\n\n            onFinalize(order?.orderId);\n        } catch (error) {\n            if (isErrorWithType(error) && error.type !== 'order_finalization_not_required') {\n                onFinalizeError(error);\n            }\n        }\n\n        this.grandTotalChangeUnsubscribe = checkoutServiceSubscribe(\n            () => this.handleCartTotalChange(),\n            ({ data }) => data.getCheckout()?.grandTotal,\n            ({ data }) => data.getCheckout()?.outstandingBalance,\n        );\n\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        this.setState({ isReady: true });\n        onReady();\n    }\n\n    componentDidUpdate(): void {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        checkEmbeddedSupport(methods.map(({ id }) => id));\n    }\n\n    componentWillUnmount(): void {\n        if (this.grandTotalChangeUnsubscribe) {\n            this.grandTotalChangeUnsubscribe();\n            this.grandTotalChangeUnsubscribe = undefined;\n        }\n\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n    }\n\n    render(): ReactNode {\n        const {\n            defaultMethod,\n            finalizeOrderError,\n            isInitializingPayment,\n            isUsingMultiShipping,\n            methods,\n            applyStoreCredit,\n            ...rest\n        } = this.props;\n\n        const {\n            didExceedSpamLimit,\n            isReady,\n            selectedMethod = defaultMethod,\n            shouldDisableSubmit,\n            validationSchemas,\n            shouldHidePaymentSubmitButton,\n        } = this.state;\n\n        const uniqueSelectedMethodId =\n            selectedMethod && getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway);\n\n        return (\n            <PaymentContext.Provider value={this.getContextValue()}>\n                <ChecklistSkeleton isLoading={!isReady}>\n                    {!isEmpty(methods) && defaultMethod && (\n                        <PaymentForm\n                            {...rest}\n                            defaultGatewayId={defaultMethod.gateway}\n                            defaultMethodId={defaultMethod.id}\n                            didExceedSpamLimit={didExceedSpamLimit}\n                            isInitializingPayment={isInitializingPayment}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            methods={methods}\n                            onMethodSelect={this.setSelectedMethod}\n                            onStoreCreditChange={this.handleStoreCreditChange}\n                            onSubmit={this.handleSubmit}\n                            onUnhandledError={this.handleError}\n                            selectedMethod={selectedMethod}\n                            shouldDisableSubmit={\n                                (uniqueSelectedMethodId &&\n                                    shouldDisableSubmit[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            shouldHidePaymentSubmitButton={\n                                (uniqueSelectedMethodId &&\n                                    rest.isPaymentDataRequired() &&\n                                    shouldHidePaymentSubmitButton[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            validationSchema={\n                                (uniqueSelectedMethodId &&\n                                    validationSchemas[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                        />\n                    )}\n                </ChecklistSkeleton>\n\n                {this.renderOrderErrorModal()}\n                {this.renderEmbeddedSupportErrorModal()}\n            </PaymentContext.Provider>\n        );\n    }\n\n    private renderOrderErrorModal(): ReactNode {\n        const { finalizeOrderError, language, shouldLocaliseErrorMessages, submitOrderError } =\n            this.props;\n\n        // FIXME: Export correct TS interface\n        const error: any = submitOrderError || finalizeOrderError;\n\n        if (\n            !error ||\n            error.type === 'order_finalization_not_required' ||\n            error.type === 'payment_cancelled' ||\n            error.type === 'payment_invalid_form' ||\n            error.type === 'spam_protection_not_completed' ||\n            error.type === 'invalid_hosted_form_value'\n        ) {\n            return null;\n        }\n\n        return (\n            <ErrorModal\n                error={error}\n                message={mapSubmitOrderErrorMessage(\n                    error,\n                    language.translate.bind(language),\n                    shouldLocaliseErrorMessages,\n                )}\n                onClose={this.handleCloseModal}\n                title={mapSubmitOrderErrorTitle(error, language.translate.bind(language))}\n            />\n        );\n    }\n\n    private renderEmbeddedSupportErrorModal(): ReactNode {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        try {\n            checkEmbeddedSupport(methods.map(({ id }) => id));\n        } catch (error) {\n            if (error instanceof Error) {\n                return <ErrorModal error={error} onClose={this.handleCloseModal} />;\n            }\n        }\n\n        return null;\n    }\n\n    private disableSubmit: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldDisableSubmit } = this.state;\n\n        if (shouldDisableSubmit[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldDisableSubmit: {\n                ...shouldDisableSubmit,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private hidePaymentSubmitButton: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldHidePaymentSubmitButton } = this.state;\n\n        if (shouldHidePaymentSubmitButton[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldHidePaymentSubmitButton: {\n                ...shouldHidePaymentSubmitButton,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private handleBeforeUnload: (event: BeforeUnloadEvent) => string | undefined = (event) => {\n        const { defaultMethod, isSubmittingOrder, language } = this.props;\n        const { selectedMethod = defaultMethod } = this.state;\n\n        if (\n            !isSubmittingOrder ||\n            !selectedMethod ||\n            selectedMethod.type === PaymentMethodProviderType.Hosted ||\n            selectedMethod.type === PaymentMethodProviderType.PPSDK ||\n            selectedMethod.skipRedirectConfirmationAlert\n        ) {\n            return;\n        }\n\n        const message = language.translate('common.leave_warning');\n\n        event.returnValue = message;\n\n        return message;\n    };\n\n    private handleCloseModal: (event: Event, props: ErrorModalOnCloseProps) => Promise<void> =\n        async (_, { error }) => {\n            if (!error) {\n                return;\n            }\n\n            const { cartUrl, clearError, loadCheckout } = this.props;\n            const { type: errorType } = error as any; // FIXME: Export correct TS interface\n\n            if (\n                errorType === 'provider_fatal_error' ||\n                errorType === 'order_could_not_be_finalized_error'\n            ) {\n                window.location.replace(cartUrl || '/');\n            }\n\n            if (errorType === 'tax_provider_unavailable') {\n                window.location.reload();\n            }\n\n            if (errorType === 'cart_consistency') {\n                await loadCheckout();\n            }\n\n            if (isErrorWithType(error) && error.body) {\n                const { body, headers, status } = error;\n\n                if (body.type === 'provider_error' && headers.location) {\n                    window.top?.location.assign(headers.location);\n                }\n\n                // Reload the checkout object to get the latest `shouldExecuteSpamCheck` value,\n                // which will in turn make `SpamProtectionField` visible again.\n                // NOTE: As a temporary fix, we're checking the status code instead of the error\n                // type because of an issue with Nginx config, which causes the server to return\n                // HTML page instead of JSON response when there is a 429 error.\n                if (\n                    status === 429 ||\n                    body.type === 'spam_protection_expired' ||\n                    body.type === 'spam_protection_failed'\n                ) {\n                    this.setState({ didExceedSpamLimit: true });\n\n                    await loadCheckout();\n                }\n            }\n\n            clearError(error);\n        };\n\n    private handleStoreCreditChange: (useStoreCredit: boolean) => void = async (useStoreCredit) => {\n        const { applyStoreCredit, onUnhandledError = noop } = this.props;\n\n        try {\n            await applyStoreCredit(useStoreCredit);\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    };\n\n    private handleError: (error: Error) => void = (error: Error) => {\n        const { onUnhandledError = noop, errorLogger } = this.props;\n\n        const { type } = error as any;\n\n        if (type === 'unexpected_detachment') {\n            errorLogger.log(error);\n\n            return;\n        }\n\n        return onUnhandledError(error);\n    };\n\n    private handleSubmit: (values: PaymentFormValues) => void = async (values) => {\n        const {\n            defaultMethod,\n            loadPaymentMethods,\n            isPaymentDataRequired,\n            onCartChangedError = noop,\n            onSubmit = noop,\n            onSubmitError = noop,\n            submitOrder,\n            analyticsTracker\n        } = this.props;\n\n        const { selectedMethod = defaultMethod, submitFunctions } = this.state;\n\n        analyticsTracker.clickPayButton({shouldCreateAccount: values.shouldCreateAccount});\n\n        const customSubmit =\n            selectedMethod &&\n            submitFunctions[getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway)];\n\n        if (customSubmit) {\n            return customSubmit(values);\n        }\n\n        try {\n            const state = await submitOrder(mapToOrderRequestBody(values, isPaymentDataRequired()));\n            const order = state.data.getOrder();\n\n            analyticsTracker.paymentComplete();\n\n            onSubmit(order?.orderId);\n        } catch (error) {\n            analyticsTracker.paymentRejected();\n\n            if (isErrorWithType(error) && error.type === 'payment_method_invalid') {\n                return loadPaymentMethods();\n            }\n\n            if (isCartChangedError(error)) {\n                return onCartChangedError(error);\n            }\n\n            onSubmitError(error);\n        }\n    };\n\n    private setSelectedMethod: (method?: PaymentMethod) => void = (method) => {\n        const { selectedMethod } = this.state;\n\n        if (selectedMethod === method) {\n            return;\n        }\n\n        if (method) {\n            this.trackSelectedPaymentMethod(method);\n        }\n\n        this.setState({ selectedMethod: method });\n    };\n\n    private setSubmit: (\n        method: PaymentMethod,\n        fn: (values: PaymentFormValues) => void | null,\n    ) => void = (method, fn) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { submitFunctions } = this.state;\n\n        if (submitFunctions[uniqueId] === fn) {\n            return;\n        }\n\n        this.setState({\n            submitFunctions: {\n                ...submitFunctions,\n                [uniqueId]: fn,\n            },\n        });\n    };\n\n    private setValidationSchema: (\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ) => void = (method, schema) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { validationSchemas } = this.state;\n\n        if (validationSchemas[uniqueId] === schema) {\n            return;\n        }\n\n        this.setState({\n            validationSchemas: {\n                ...validationSchemas,\n                [uniqueId]: schema,\n            },\n        });\n    };\n\n    private trackSelectedPaymentMethod(method: PaymentMethod) {\n        const { analyticsTracker } = this.props;\n\n        const methodName = method.config.displayName || method.id;\n        const methodId = method.id;\n\n        analyticsTracker.selectedPaymentMethod(methodName, methodId);\n    }\n\n    private async loadPaymentMethodsOrThrow(): Promise<void> {\n        const {\n            loadPaymentMethods,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await loadPaymentMethods();\n\n            const selectedMethod = this.state.selectedMethod || this.props.defaultMethod;\n\n            if (selectedMethod) {\n                this.trackSelectedPaymentMethod(selectedMethod);\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    private async handleCartTotalChange(): Promise<void> {\n        const { isReady } = this.state;\n\n        if (!isReady) {\n            return;\n        }\n\n        this.setState({ isReady: false });\n\n        await this.loadPaymentMethodsOrThrow();\n\n        this.setState({ isReady: true });\n    }\n}\n\nexport function mapToPaymentProps({\n        checkoutService,\n        checkoutState,\n}: CheckoutContextProps): WithCheckoutPaymentProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getOrder,\n            getPaymentMethod,\n            getPaymentMethods,\n            isPaymentDataRequired,\n            getPaymentProviderCustomer,\n        },\n        errors: { getFinalizeOrderError, getSubmitOrderError },\n        statuses: { isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const customer = getCustomer();\n    const consignments = getConsignments();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n\n    const { isComplete = false } = getOrder() || {};\n    let methods = getPaymentMethods() || EMPTY_ARRAY;\n\n    // TODO: In accordance with the checkout team, this functionality is temporary and will be implemented in the backend instead.\n    if (paymentProviderCustomer?.stripeLinkAuthenticationState) {\n        const stripeUpePaymentMethod = methods.filter(method =>\n            method.id === 'card' && method.gateway === PaymentMethodId.StripeUPE\n        );\n\n        methods = stripeUpePaymentMethod.length ? stripeUpePaymentMethod : methods;\n    }\n\n    if (!checkout || !config || !customer || isComplete) {\n        return null;\n    }\n\n    const {\n        enableTermsAndConditions: isTermsConditionsEnabled,\n        features,\n        orderTermsAndConditionsType: termsConditionsType,\n        orderTermsAndConditions: termsCondtitionsText,\n        orderTermsAndConditionsLink: termsCondtitionsUrl,\n    } = config.checkoutSettings as CheckoutSettings & { orderTermsAndConditionsLocation: string };\n\n    const isTermsConditionsRequired = isTermsConditionsEnabled;\n    const selectedPayment = find(checkout.payments, {\n        providerType: PaymentMethodProviderType.Hosted,\n    });\n\n    const { isStoreCreditApplied } = checkout;\n\n    let selectedPaymentMethod;\n    let filteredMethods;\n\n    filteredMethods = methods.filter((method: PaymentMethod) => {\n        if (method.id === PaymentMethodId.Bolt && method.initializationData) {\n            return !!method.initializationData.showInCheckout;\n        }\n\n        if (method.id === PaymentMethodId.BraintreeLocalPaymentMethod) {\n            return false;\n        }\n\n        return true;\n    });\n\n    if (consignments && consignments.length > 1) {\n        const multiShippingIncompatibleMethodIds: string[] = [\n            PaymentMethodId.AmazonPay,\n        ];\n\n        filteredMethods = methods.filter((method: PaymentMethod) => {\n            return !multiShippingIncompatibleMethodIds.includes(method.id);\n        });\n    }\n\n    if (selectedPayment) {\n        selectedPaymentMethod = getPaymentMethod(\n            selectedPayment.providerId,\n            selectedPayment.gatewayId,\n        );\n        filteredMethods = selectedPaymentMethod\n            ? compact([selectedPaymentMethod])\n            : filteredMethods;\n    } else {\n        selectedPaymentMethod = find(filteredMethods, {\n            config: { hasDefaultStoredInstrument: true },\n        });\n        // eslint-disable-next-line no-self-assign\n        filteredMethods = filteredMethods;\n    }\n\n    return {\n        applyStoreCredit: checkoutService.applyStoreCredit,\n        availableStoreCredit: customer.storeCredit,\n        cartUrl: config.links.cartLink,\n        clearError: checkoutService.clearError,\n        defaultMethod: selectedPaymentMethod || filteredMethods[0],\n        finalizeOrderError: getFinalizeOrderError(),\n        finalizeOrderIfNeeded: checkoutService.finalizeOrderIfNeeded,\n        loadCheckout: checkoutService.loadCheckout,\n        isInitializingPayment: isInitializingPayment(),\n        isPaymentDataRequired,\n        isStoreCreditApplied,\n        isSubmittingOrder: isSubmittingOrder(),\n        isTermsConditionsRequired,\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\n        methods: filteredMethods,\n        shouldExecuteSpamCheck: checkout.shouldExecuteSpamCheck,\n        shouldLocaliseErrorMessages:\n            features['PAYMENTS-6799.localise_checkout_payment_error_messages'],\n        submitOrder: checkoutService.submitOrder,\n        submitOrderError: getSubmitOrderError(),\n        checkoutServiceSubscribe: checkoutService.subscribe,\n        termsConditionsText:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.TextArea\n                ? termsCondtitionsText\n                : undefined,\n        termsConditionsUrl:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.Link\n                ? termsCondtitionsUrl\n                : undefined,\n        usableStoreCredit:\n            checkout.grandTotal > 0 ? Math.min(checkout.grandTotal, customer.storeCredit || 0) : 0,\n    };\n}\n\nexport default withAnalytics(withLanguage(withCheckout(mapToPaymentProps)(Payment)));\n","import { CartChangedError } from '@bigcommerce/checkout-sdk';\n\nexport default function isCartChangedError(error: unknown): error is CartChangedError {\n    const requestError = error as CartChangedError;\n\n    return requestError.type === 'cart_changed';\n}\n","import React, {\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactElement,\n    ReactNode,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler<HTMLDivElement> }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nconst ModalTrigger = ({ children, modal }: ModalTriggerProps): ReactElement => {\n    const [isOpen, setIsOpen] = useState(false);\n    const canHandleEventRef = useRef(false);\n\n    useEffect(() => {\n        canHandleEventRef.current = true;\n\n        return () => {\n            canHandleEventRef.current = false;\n        };\n    }, []);\n\n    const handleOpen = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(true);\n    };\n\n    const handleClose = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(false);\n    };\n\n    const handleKeyOpen = (keyboardEvent: KeyboardEvent<HTMLElement>): void => {\n        if (keyboardEvent.key === 'Enter') {\n            handleOpen();\n        }\n    };\n\n    return (\n        <>\n            {children({\n                onClick: handleOpen,\n                onKeyPress: handleKeyOpen,\n            })}\n\n            {modal({\n                isOpen,\n                onRequestClose: handleClose,\n            })}\n        </>\n    );\n};\n\nexport default ModalTrigger;\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n"],"names":["placement","dropdown","children","useState","shouldShow","setShouldShow","getRootElement","useCallback","document","getElementById","handleClose","handleOpen","handleClick","useEffect","rootElement","addEventListener","removeEventListener","ref","className","onClick","modifiers","name","enabled","style","width","zIndex","body","header","renderModal","props","Modal","additionalBodyClassName","footer","Button","onRequestClose","size","Small","TranslatedString","id","shouldShowCloseButton","ModalTrigger","modal","preventDefault","split","map","line","key","Fragment","TermsConditionsType","TermsConditionsModalCheckboxField","withLanguage","language","terms","translatedLabel","translate","url","parsedLabel","parseAnchor","labelContent","ModalHeader","CheckboxFormField","TermsConditionsCheckboxField","useMemo","TranslatedHtml","data","TermsConditionsTextField","renderInput","field","TextArea","defaultValue","readOnly","FormField","input","memo","type","Fieldset","additionalClassName","legend","Legend","isTermsConditionsTextArea","isTermsConditionModal","mapSubmitOrderErrorMessage","error","shouldLocalise","subtype","includes","message","errors","length","err","code","join","mapSubmitOrderErrorTitle","unformatCreditCardExpiryDate","value","RegExp","month","year","test","slice","unformatCreditCardNumber","separator","number","replace","getUniquePaymentMethodId","methodId","gatewayId","compact","parseUniquePaymentMethodId","undefined","hasCreditCardNumber","values","Object","hasCreditCardExpiry","mapToOrderRequestBody","isPaymentDataRequired","paymentProviderRadio","rest","payload","payment","paymentData","omitBy","ccExpiry","ccNumber","isNil","isEmpty","createContext","TermsConditions","termsConditionsUrl","termsConditionsText","TermsConditionsField","Link","getPaymentValidationSchema","additionalValidation","isTermsConditionsRequired","schemaFields","required","schemaFieldsWithTerms","concat","oneOf","getTermsConditionsValidationSchema","PaymentMethodType","getPaymentMethodName","method","translations","PaymentMethodId","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","config","displayName","capitalize","get","content","htmlId","onUnhandledError","checkoutService","initializePayment","BigCommercePaymentsPayLater","bigcommerce_payments_paylater","bannerContainerId","deinitializePayment","Error","BraintreePaypalCredit","braintree","containerId","instrumentTypeMap","AMEX","instrument","component","lazy","BITCOIN","BITCOIN_CASH","BANCONTACT","CARNET","CB","DINERS","DANKORT","DISCOVER","DOGECOIN","ELECTRON","ELO","ETHEREUM","HIPER","JCB","LITECOIN","MADA","MAESTRO","MC","SHIBA_INU","TROY","CUP","USD_COIN","VISA","mapFromPaymentMethodCardType","filterInstrumentTypes","instrumentTypes","supportedInstrumentTypes","record","filter","cardType","iconProps","Medium","testId","IconComponent","instrumentType","find","getPaymentMethodIconComponent","Suspense","selectedCardType","filteredCardTypes","getPaymentMethodTitle","basePath","checkoutSettings","storeCountryCode","cdnPath","path","paymentWithLogo","initializationData","methodsWithLogo","methodName","methodDisplayName","isCreditCard","toLowerCase","PaypalCommerceCredit","payPalCreditProductBrandName","credit","AdyenV2","AdyenV3","getPaymentMethodDisplayName","customTitles","CreditCard","logoUrl","titleText","BraintreeVenmo","subtitle","BraintreeAch","BraintreeLocalPaymentMethod","BigCommercePaymentsPayPal","BigCommercePaymentsAlternativeMethod","PaypalCommerce","PaypalCommerceAlternativeMethod","isExperimentEnabled","ApplePay","PayWithGoogle","Humm","enableBillie","Laybuy","Masterpass","Quadpay","Sezzle","Zip","Barclaycard","Mollie","Checkoutcom","StripeV3","StripeUPE","WorldpayAccess","gateway","BlueSnapDirect","PaypalCommerceVenmo","BigCommercePaymentsVenmo","PaypalPaymentsPro","Ratepay","connectFormik","withCheckout","getConfig","getInstruments","instruments","storeProfile","cdnBasePath","node","isSelected","themeV2","alt","src","Function","cardTypes","supportedCards","instrumentSelected","provider","bigpayToken","instrumentId","getInstrumentForMethod","hostedForm","card","brand","getSelectedCardType","PaymentFormContext","usePaymentFormContext","context","useContext","PaymentFormProvider","paymentForm","Provider","createInjectHoc","FormContext","displayNamePrefix","AdyenCardFields","getInitialValidationState","shouldShowNumberField","validationState","CardNumber","valid","SecurityCode","ExpiryDate","isFieldInvalid","fieldKey","fieldsValidation","verificationFieldsContainerId","selectedInstrument","paymentMethod","cardValidationState","setFieldsValidation","fieldType","endDigits","last4","showValidationIcon","transform","right","htmlFor","isBankAccountInstrument","hidden","state","isOpen","canHandleEvent","setState","handleKeyOpen","keyboardEvent","componentDidMount","this","componentWillUnmount","render","onKeyPress","Component","withIconContainer","height","viewBox","xmlns","clipRule","d","fill","fillRule","xmlSpace","rx","stroke","x","y","maskUnits","maskType","mask","event","nativeEvent","defaultProps","isAchInstrument","isSepaInstrument","AccountInstrumentUseNewButton","noop","AccountInstrumentMenuItem","externalId","AchInstrumentMenuItem","accountNumber","issuer","SepaInstrumentMenuItem","BankInstrumentMenuItem","AccountInstrumentOption","AccountInstrumentMenu","selectedInstrumentId","onSelectInstrument","onUseNewInstrument","AccountInstrumentSelectButton","setTimeout","updateFieldValue","componentDidUpdate","prevProps","prevSelectedInstrumentId","otherFieldProps","form","setFieldValue","PureComponent","isCardInstrument","isAccountInstrument","ManageInstrumentsRow","onDeleteInstrument","handleDelete","isDeletingInstrument","LoadingOverlay","isLoading","mapFromInstrumentCardType","cardInfo","isExpired","expirationDate","expiryMonth","expiryYear","isValid","niceType","status","Alert","A","isConfirmingDelete","handleAfterOpen","onAfterOpen","handleCancel","getDeleteInstrumentError","clearError","deleteInstrumentError","handleConfirmDelete","deleteInstrument","onDeleteInstrumentError","handleDeleteInstrument","closeButtonLabel","renderFooter","renderContent","cardInstruments","bankInstruments","accountInstruments","achInstrument","bankAndAccountInstruments","ManageAccountInstrumentsTable","isLoadingInstruments","disabled","variant","Primary","contextType","CheckoutContext","BasicFormField","InstrumentMenuItem","shouldHideExpiryDate","cardTitle","endingIn","expiryDate","InstrumentOption","InstrumentUseNewButton","InstrumentMenu","InstrumentSelectButton","validateInstrument","display","onChange","renderField","CheckboxInput","checked","label","FormFieldError","errorId","kebabCase","translationId","saveIsChecked","Boolean","getFieldValue","addingNewInstrument","hasAnyOtherInstruments","showSave","showSetAsDefault","defaultInstrument","setAsDefaultEnabled","useProps","isAddingNewCard","getDefaultInstrumentId","handleUseNewCard","handleSelectInstrument","isInstrumentFeatureAvailableProp","loadInstruments","setValidationSchema","getValidationSchema","initializeMethod","prevState","deinitializeCustomer","setSubmit","hideWidget","isInitializing","shouldHideInstrumentExpiryDate","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","hideContentWhenLoading","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","renderEditButtonIfAvailable","hideVerificationFields","isInstrumentCardNumberRequiredProp","assertIsCardInstrument","hideContentWhenSignedOut","isSignInRequired","isSignedIn","additionalContainerClassName","shouldRenderCustomInstrument","renderCustomPaymentForm","tabIndex","storedCardValidationSchema","getSelectedInstrument","shouldShowEditButton","buttonId","translatedString","shouldShowDescriptor","paymentDescriptor","initializeCustomer","signInCustomer","Promise","resolve","PROVIDERS_WITHOUT_CARD_CODE","createSelector","cart","getCart","lineItems","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","digitalItems","giftCertificates","trustedShippingAddress","isInstrumentCardCodeRequired","isVaultingCardNumberValidationAvailable","physicalItems","isInstrumentCardNumberRequired","showAdditionalActionContent","cancelAdditionalActionModalFlow","additionalActionContainerId","checkoutState","hidePaymentSubmitButton","disableSubmit","customer","getCustomer","statuses","isGuest","isInstrumentFeatureAvailable","isVaultingEnabled","signOut","signOutCustomer","AdyenV2PaymentMethodType","toResolvableComponent","useRef","shouldShowModal","setShowAdditionalActionContent","setCardValidationState","cardVerificationContainerId","threeDS2ContainerId","bcmc","onBeforeLoad","shopperInteraction","current","onComplete","cancelAdditionalAction","onLoad","cancel","initializeAdyenPayment","options","scheme","hasHolderName","holderNameRequired","ideal","showImage","adyenOptions","adyenv2","hasVaultedInstruments","additionalActionOptions","widgetSize","validateCardFields","isLoadingPaymentMethod","formContextProps","isSubmitted","setSubmitted","LocaleProvider","UntrustedShippingCardVerificationType","shouldRenderAdditionalActionContentModal","isModalVisible","overlay","AdyenV3PaymentMethodType","setShouldRenderAdditionalActionContentModal","isAdditionalActionContentModalVisible","setIsAdditionalActionContentModalVisible","onActionHandled","adyenv3","isUsingMultiShipping","isCardVaultingEnabled","getHostedPaymentMethodDerivedProps","filterAccountInstruments","memoizeOne","filterTrustedInstruments","isPaymentDataSubmitted","currentMethodInstruments","trustedInstruments","isNewAddress","isAddingNewInstrument","handleUseNewInstrument","description","getDefaultInstrument","HostedPaymentComponent","paymentToken","initializeAmazonPayV2Payment","amazonpay","editButtonId","reload","window","location","getCheckout","checkout","some","payments","providerId","onSignOut","applepay","shippingLabel","subtotalLabel","providerOptionsKey","providerOptionsData","currentInstrument","shouldConfirmInstrument","buttonActionsRef","fieldsValuesRef","renderButtonRef","hasPayPalButton","termsValue","shouldSaveInstrument","validateForm","validationErrors","keys","validateButton","disable","enable","togglePaypalButton","container","shouldRenderPayPalButtonOnInitialization","onRenderButton","onInit","submitForm","onError","onValidate","reject","keysValidation","forEach","setFieldTouched","onInitButton","actions","getFieldsValues","setCurrentInstrument","trustedAccountInstruments","hasAccountInstruments","isComplete","shouldCreateNewInstrument","defaultAccountInstrument","allInstruments","widgetContainerId","extraOptions","apmFieldsContainer","apmFieldsStyles","variables","fontFamily","colorBackground","textColor","fontSizeBase","spacingUnit","borderColor","borderRadius","borderWidth","rules","backgroundColor","color","fontSize","formatCreditCardNumber","unformattedValue","gaps","gapIndex","reduce","output","index","inputRef","createRef","nextSelectionEnd","handleChange","target","previousValue","selectionEnd","maxLength","max","info","lengths","formattedValue","setSelectionRange","TextInput","autoComplete","meta","CreditCardNumberInput","strokeWidth","fontWeight","letterSpacing","opacity","Large","TooltipTrigger","tooltip","IconHelp","shouldShowCardCodeField","trimmedMonth","trimmedYear","formatCreditCardExpiryDate","placeholder","shouldShowCustomerCodeField","memoize","instrumentBrand","instrumentLast4","isCardCodeRequired","isCardNumberRequired","schema","ccCvv","cvv","ccCustomerCode","ccName","parent","createLocaleContext","inputDateFormat","currency","createCurrencyService","date","inputFormat","getLanguageService","filterInstruments","getCreditCardPaymentMethodDerivedProps","discoverInfo","creditCardType","getTypeInfo","visaInfo","updateCard","patterns","addCard","_prevProps","cardFieldset","getStoredCardValidationFieldset","isInstrumentCardCodeRequiredProp","storeConfig","LocaleContext","requireCustomerCode","cardValidationSchema","getInstrumentValidationSchema","getCreditCardValidationSchema","isCustomerCodeRequired","appearFocused","cardCodeId","cardNumberId","cardExpiryId","focusedFieldType","additionalFields","cardNameId","shape","cardExpiry","cardName","cardNumber","isCardExpiryRequired","cardCodeVerification","cardNumberVerification","cardExpiryVerification","CreditCardInputStylesType","getCreditCardInputStyles","properties","Default","createElement","parentContainer","appendChild","FormFieldContainer","hasError","Focus","element","getAppliedStyles","parentElement","removeChild","showCardHolderName","isHostedFormEnabled","setFocusedFieldType","isCardHolderNameRequired","getHostedFieldId","getHostedFormOptions","styleProps","shouldRenderHostedFields","styleContainerId","fields","accessibilityLabel","default","focus","styles","onBlur","onCardTypeChange","onEnter","onFocus","forIn","fieldErrors","errorKey","getHostedStoredCardValidationFieldset","initializeBigCommercePaymentsCreditCardPayment","bigcommerce_payments_creditcards","getHostedCreditCardValidationSchema","getHostedInstrumentValidationSchema","renderPayPalCardComponent","PoweredByPayPalFastlaneLabel","result","Tiny","Secondary","showPayPalCardSelector","setSelectedInstrument","paymentProviderCustomer","getPaymentProviderCustomer","paypalFastlaneCustomer","useBigCommercePaymentsFastlaneInstruments","shouldShowInstrumentsForm","paypalCardComponentRef","isInitializingPayment","bigcommerce_payments_fastlane","finalError","isErrorWithTranslationKey","translationKey","COUNTRY_DATA","dialCode","getCountryData","countryName","country","formFieldData","requiredFieldErrorTranslationIds","ratepayPhoneCountryCode","ratepayPhoneNumber","ratepayBirthDate","nullable","fieldName","matches","ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE","custom","DynamicFormFieldType","DATE","TEXT","fieldsValues","bigcommerce_payments_ratepay","legalTextContainer","loadingContainerId","ratepaySpecificError","e","provider_error","translationCode","ratepayError","ratepaySpecificErrorCode","CustomError","shouldBeTranslatedAsHtml","fieldId","validationSchema","getBigCommercePaymentsRatePayValidationSchema","billing","getBillingAddress","marginBottom","DynamicFormField","extraClass","BluesnapECPAccountType","useFloatingLabel","DynamicInput","TELEPHONE","isFloatingLabelEnabled","helperLabel","items","rows","renderSelect","DROPDOWM","shouldRenderCompanyName","ConsumerChecking","ConsumerSavings","CorporateChecking","CorporateSavings","shouldRenderFields","min","routingNumber","companyName","accountType","getFormValues","setDisabled","shopperPermission","initializeEcp","deinitializeEcp","shouldShowForm","company","getEcpValidationSchema","paddingBottom","isBlueSnapDirectInitializationData","object","sepaCreditorCompanyName","array","idealIssuers","Array","isArray","iban","firstName","lastName","toggleSubmitButton","initializeSepa","deinitializeSepa","getSepaValidationSchema","creditorName","bic","idealIssuersSelectOptions","issuerId","issuerName","initializeIdeal","getIdealValidationSchema","deinitializeIdeal","isLoadingIframe","setisLoadingIframe","paymentPageContent","setPaymentPageContent","paymentPageContentRef","cancelBlueSnapV2ModalFlow","cancelBlueSnapV2Payment","initializeBlueSnapV2Payment","bluesnapv2","border","appendPaymentPageContent","additionalModalClassName","initializePayByBank","getPayByBankValidationSchema","deinitializePayByBank","initializeBoltPayment","bolt","useBigCommerceCheckout","agreementTranslationOptions","privacyPolicyUrl","termsUrl","benefitsList","BoltCreateAccountCheckbox","showCreateAccountCheckbox","setShowCreateAccountCheckbox","boltEmbeddedContainerId","onPaymentSelect","hasBoltAccount","isGuestCustomer","embeddedOneClickEnabled","BraintreeAchFieldType","OwnershipTypes","AccountTypes","accountTypeOptions","Savings","Checking","ownershipTypeOptions","Personal","Business","defaultBraintreeAchFormFields","AccountType","AccountNumber","RoutingNumber","OwnershipType","personalBraintreeAchFormFields","FirstName","LastName","businessBraintreeAchFormFields","BusinessName","formFields","validateBraintreeAchForm","braintreeAchFormValues","businessName","ownershipType","all","isValidAccountNumber","isValidRoutingNumber","isValidFirstName","isValidLastName","isValidBusinessName","isValidDepositoryName","resetFormValidation","getTranslatedLabelByFieldName","braintreeAchFormLabelsMap","isBraintreeAchFormFieldName","fieldValues","updateMandateText","fullName","String","depositoryName","outstandingBalance","storeName","symbol","mandateTextTranslationKey","formattedDate","Date","now","toJSON","reverse","mandateTextTranslationProps","currentDate","mandateText","isValidForm","setIsValidForm","defaultFormValues","shouldSetAsDefaultInstrument","orderConsent","entries","resetFormValues","shouldShowMandateTextCheckbox","mandateTextConfirmationCheckboxValue","currentMandateTextRef","braintreeach","getMandateText","currentMandateText","useBraintreeFastlaneInstruments","paypalFastlaneComponentRef","braintreefastlane","braintreelocalmethods","buttonText","brandName","initializeBraintreePaypalPaymentMethod","defaultOptions","href","providerName","formatAccountMask","accountMask","padding","card_information","cardData","isWalletButtonInitializationData","expMonth","expYear","accountNum","expDate","substr","handleSignOut","onSignOutError","toggleSubmit","getWalletButtonPaymentMethodDerivedProps","prevMethod","prevIsPaymentDataRequired","isPaymentSelected","renderPaymentView","renderSignInView","signInButtonClassName","signInButtonLabel","editButtonClassName","editButtonLabel","billingAddress","walletPaymentData","initializeVisaCheckoutPayment","mergedOptions","braintreevisacheckout","BraintreeVisaCheckout","TextField","labelId","HiddenInput","restField","selectedIssuer","Input","OptionButton","restProps","DropdownButton","ccDocumentField","fawry","sepa","debtor","paymentContext","creditor","sepaCreditor","sepaCreditorAddress","sepaCreditorPostalCode","sepaCreditorCity","sepaCreditorCountry","creditorId","sepaCreditorIdentifier","address1","postalCode","city","stateOrProvinceCode","countryCode","isChecked","setSelectedIssuer","bicValue","setBicValue","issuers","currentTarget","_selectedIssuer","dataset","issuersList","checkoutcomPaymentMethodsArray","checkoutComShemas","oxxo","ccDocument","qpay","notRequired","boleto","sepaMandate","customerMobile","customerEmail","email","isIdealHostedPageExperimentOn","features","checkoutCustomMethod","CheckoutcomCustomFieldset","initializeGooglePayPayment","reinitializePayment","AdyenV2GooglePay","walletButton","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BigCommercePaymentsGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","StripeGooglePay","StripeUPEGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","CheckoutcomGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay","hostedFieldset","hostedValidationSchema","initializeHostedCreditCardPayment","creditCard","hostedStoredCardValidationSchema","initializeKlarnaPayment","klarna","initializeKlarnaV2Payment","klarnav2","helpers","setValue","IssuerSelectButton","image","size1x","paymentMethodsResponse","cardNumberElementOptions","cardHolderElementOptions","cardCvcElementOptions","cardExpiryElementOptions","MolliePaymentMethodType","localeContext","initializeMolliePayment","mollieElements","getMolliesElementOptions","cardCvcId","cardHolderId","base","invalid","unsupportedMethodMessage","disableButton","mollie","creditcard","_shouldShowNumber","useHostedCreditCard","requireCardCode","initializeMonerisPayment","paymentConfig","moneris","initializePayPalCommerceCreditCardPayment","paypalcommercecreditcards","usePayPalCommerceFastlaneInstruments","paypalcommercefastlane","paypalcommerceratepay","getDate","getMonth","getFullYear","getPaypalCommerceRatePayValidationSchema","countryInfo","getCountryInfo","isEmbedded","initializePaypalExpressPayment","paypalexpress","useRedirectFlow","setIsAddingNewCard","setSelectedInstrumentId","defaultInstrumentId","getStylesFromElement","querySelector","copyStylesFromDummyFormFields","difference","mapToSquareStyles","borderColorIsFocus","borderWidthIsFocus","inputIsFocus","borderColorIsError","borderWidthIsError","colorIsError","squarev2","selector","pseudoElementSelector","parseRadioIconSize","parseInt","getFonts","elementsList","querySelectorAll","fonts","fontSrc","getAttribute","push","cssSrc","getAppearanceForOCSElement","defaultAccordionPaddingHorizontal","defaultAccordionPaddingVertical","formInputStyles","formLabelStyles","formErrorStyles","accordionHeaderStyles","accordionSelectedHeaderStyles","formChecklistStyles","accordionHeaderColor","accordionItemTitleFontSize","accordionHeaderFontFamily","accordionItemTitleFontWeight","accordionPaddingTop","accordionPaddingRight","accordionPaddingBottom","accordionHeaderPadding","radioOuter","radioOuterChecked","radioIconSize","sizes","radioIconOuterWidth","radioIconOuterStrokeWidth","radioIconInnerWidth","outerWidth","outerStrokeWidth","innerWidth","stripeEqualOuterWidth","toFixed","stripeEqualOuterStrokeWidth","stripeSVGSizeCoefficient","stripeEqualInnerRadius","innerRadius","getRadioIconSizes","radioIconColor","radioIconFocusColor","colorPrimary","colorText","colorDanger","colorTextSecondary","colorTextPlaceholder","colorIcon","boxShadow","borderBottom","r","collapseStripeElement","AccordionContext","onToggle","selectedItemId","isOCSLoading","setIsOCSLoading","methodSelector","renderSubmitButton","initializeStripePayment","stripeocs","layout","defaultCollapsed","radios","linkInAccordion","spacedAccordionItems","visibleAccordionItemsCount","appearance","paymentMethodSelect","handleClosePaymentMethod","collapseElement","togglePreloader","ChecklistSkeleton","defaultChecked","isStripeLinkAuthenticated","stripeLinkAuthenticationState","formInput","formLabel","formError","stripeupe","labelText","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","StripeElementType","useIndividualCardFields","paymentMethodType","additionalStripeV3Classes","Alipay","stripeOptions","classes","Card","CardCvc","CardExpiry","showIcon","Iban","supportedCountries","IdealBank","storeUrl","links","siteLink","onUnhandledStripeV3Error","getIndividualCardElementOptions","stripeInitializeOptions","getStripeOptions","stripev3","optionsCustomForm","threeDSecureVerification","setThreeDSecureVerification","cancelWorldpayModalFlow","cancelThreeDSecureVerification","initializeWorldpayPayment","worldpay","resolvePaymentMethod","query","resolveComponent","shouldSavingCardsBeEnabled","paymentMethodConfig","isVaultingNotEnabled","untrustedShippingCardVerificationMode","CVV","handleShow","handleHide","onMouseEnter","onMouseLeave","withHostedCreditCardFieldset","OriginalComponent","formik","nextSelectionEndRef","isPreloaderOn","then","CreditCardPaymentMethod","threeDSecureContent","setThreeDSecureContent","threeDSecureContentRef","initializeBraintreePayment","threeDSecure","addFrame","removeFrame","appendThreeDSecureContent","cancelThreeDSecureModalFlow","HostedPaymentMethod","WalletButtonPaymentMethod","storeLanguage","initializeMasterpassPayment","masterpass","testMode","checkoutId","isMasterpassSrcEnabled","locale","PaymentMethodProviderType","selectedHostedMethod","Hosted","isHostedPayment","Wrapper","onMount","initializationComponentMap","card_ui","none","onDeinit","catch","usePropsToOnMount","PPSDKPaymentMethod","componentKey","initializationStrategy","PPSDK","CCAvenueMars","Braintree","Api","formikContext","formContext","ResolvedPaymentMethod","PaymentMethod","createPaymentFormService","getPaymentMethodFromListValue","methods","PaymentMethodListItem","isDisabled","renderPaymentMethod","PaymentMethodV2","renderPaymentMethodTitle","isCustomChecklistItem","ChecklistItem","onSelect","handleSelect","role","Checklist","defaultSelectedItemId","navigator","userAgent","mapToRedeemableProps","redeemableProps","Redeemable","showAppliedRedeemables","providersWithCustomClasses","PaymentSubmitButtonText","methodType","methodGateway","initialisationStrategyType","IconBolt","BlueSnapV2","PaypalVenmo","continueActionId","continueTranslationId","completeTranslationId","isInitializingCustomer","isSubmittingOrder","isSubmitting","isFullWidth","Action","shouldShowRetryButton","handleRetry","verify","isExecutingSpamCheck","didExceedSpamLimit","executeSpamCheck","isErrorWithType","SpamProtectionField","withCurrency","availableStoreCredit","usableStoreCredit","isStoreCreditApplied","Tooltip","storeCredit","toCustomerCurrency","PaymentMethodSubmitButtonContainer","PaymentMethodListFieldset","onMethodSelect","resetForm","handlePaymentMethodSelect","updatedValues","shouldCreateAccount","Extension","region","paymentFormConfig","mapPropsToValues","defaultGatewayId","handleSubmit","onSubmit","onStoreCreditChange","selectedMethod","shouldDisableSubmit","shouldHidePaymentSubmitButton","shouldExecuteSpamCheck","selectedMethodId","Form","isReady","validationSchemas","submitFunctions","getContextValue","uniqueId","handleBeforeUnload","defaultMethod","skipRedirectConfirmationAlert","returnValue","handleCloseModal","_","cartUrl","loadCheckout","errorType","headers","top","assign","handleStoreCreditChange","useStoreCredit","applyStoreCredit","handleError","errorLogger","log","loadPaymentMethods","onCartChangedError","onSubmitError","submitOrder","analyticsTracker","clickPayButton","customSubmit","order","getOrder","paymentComplete","orderId","paymentRejected","setSelectedMethod","trackSelectedPaymentMethod","fn","finalizeOrderIfNeeded","onFinalize","onFinalizeError","onReady","checkoutServiceSubscribe","loadPaymentMethodsOrThrow","grandTotalChangeUnsubscribe","handleCartTotalChange","grandTotal","checkEmbeddedSupport","uniqueSelectedMethodId","defaultMethodId","renderOrderErrorModal","renderEmbeddedSupportErrorModal","finalizeOrderError","shouldLocaliseErrorMessages","ErrorModal","bind","onClose","title","selectedPaymentMethod","mapToPaymentProps","getConsignments","getPaymentMethod","getPaymentMethods","getFinalizeOrderError","getSubmitOrderError","consignments","stripeUpePaymentMethod","filteredMethods","isTermsConditionsEnabled","termsConditionsType","termsCondtitionsText","termsCondtitionsUrl","selectedPayment","providerType","showInCheckout","hasDefaultStoredInstrument","cartLink","submitOrderError","subscribe","Math","withAnalytics","Payment","setIsOpen","canHandleEventRef","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID"],"sourceRoot":""}