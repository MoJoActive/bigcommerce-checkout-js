{"version":3,"file":"hosted-credit-card-payment-method-a7aa2b1c.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx"],"sourcesContent":["import React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    withHostedCreditCardFieldset,\n    type WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { type CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type HostedCreditCardPaymentMethodProps = Omit<\n    CreditCardPaymentMethodProps,\n    | 'cardFieldset'\n    | 'cardValidationSchema'\n    | 'storedCardValidationSchema'\n    | 'getStoredCardValidationFieldset'\n>;\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<\n    HostedCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    ...rest\n}) => {\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: getHostedFormOptions && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    return (\n        <CreditCardPaymentMethod\n            {...rest}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default withHostedCreditCardFieldset(HostedCreditCardPaymentMethod);\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type LanguageService,\n    type LegacyHostedFormOptions,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n"],"names":["getHostedFormOptions","getHostedStoredCardValidationFieldset","hostedFieldset","hostedStoredCardValidationSchema","hostedValidationSchema","initializePayment","rest","initializeHostedCreditCardPayment","useCallback","options","selectedInstrument","creditCard","form","cardFieldset","cardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema","useHostedCreditCard","checkoutState","method","language","paymentForm","setFieldTouched","setFieldValue","setSubmitted","submitForm","config","cardCode","requireCardCode","isCardCodeRequired","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","getHostedFieldId","name","compact","gateway","id","join","focusedFieldType","setFocusedFieldType","useState","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","cardCodeId","undefined","cardNumberId","styleProps","styleContainerId","fields","cardCodeVerification","accessibilityLabel","translate","containerId","instrumentId","bigpayToken","cardNumberVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","error","Error","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","errors","forIn","fieldErrors","errorKey","type"],"sourceRoot":""}