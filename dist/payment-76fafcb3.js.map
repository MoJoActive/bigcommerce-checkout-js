{"version":3,"file":"payment-76fafcb3.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/core/src/app/coupon/AppliedCoupon.tsx","webpack://checkout/./packages/core/src/app/giftCertificate/AppliedGiftCertificate.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconRemove.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemable.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemables.tsx","webpack://checkout/./packages/core/src/app/cart/Redeemable.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentContext.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/core/src/app/ui/form/withForm.tsx","webpack://checkout/./packages/core/src/app/cart/mapToRedeemableProps.ts","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormContext.tsx","webpack://checkout/./packages/core/src/app/ui/form/TextArea.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalLink.tsx","webpack://checkout/./packages/core/src/app/ui/text/MultiLineText.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditionsField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getUniquePaymentMethodId.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardFieldsetValues.ts","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditions.tsx","webpack://checkout/./packages/core/src/app/payment/getPaymentValidationSchema.ts","webpack://checkout/./packages/core/src/app/termsConditions/getTermsConditionsValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodType.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodName.ts","webpack://checkout/./packages/core/src/app/ui/form/CustomChecklistItem.tsx","webpack://checkout/./packages/bigcommerce-payments-utils/src/BigCommercePaymentsPayLaterBanner.tsx","webpack://checkout/./packages/paypal-utils/src/BraintreePaypalCreditBanner.tsx","webpack://checkout/./packages/paypal-utils/src/PaypalCommerceCreditBanner.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIconList.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodTitle.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodDisplayName.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardFieldsetValues.ts","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormProvider.tsx","webpack://checkout/./packages/core/src/app/generated/paymentIntegrations/index.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodProviderType.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodV2.tsx","webpack://checkout/./packages/core/src/app/payment/resolvePaymentMethod.ts","webpack://checkout/./packages/core/src/app/payment/createPaymentFormService.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodList.tsx","webpack://checkout/./packages/core/src/app/common/utility/isMobile.ts","webpack://checkout/./packages/core/src/app/payment/PaymentRedeemables.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentSubmitButton.tsx","webpack://checkout/./packages/core/src/app/payment/SpamProtectionField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditOverlay.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentForm.tsx","webpack://checkout/./packages/core/src/app/payment/Payment/EmbeddedSupportErrorModa.tsx","webpack://checkout/./packages/core/src/app/payment/mapSubmitOrderErrorMessage.ts","webpack://checkout/./packages/core/src/app/payment/Payment/OrderErrorModal.tsx","webpack://checkout/./packages/core/src/app/payment/Payment/index.ts","webpack://checkout/./packages/core/src/app/payment/Payment/Payment.tsx","webpack://checkout/./packages/core/src/app/payment/Payment/getDefaultPaymentMethodAndFilteredMethods.ts","webpack://checkout/./packages/core/src/app/payment/mapToOrderRequestBody.ts","webpack://checkout/./packages/core/src/app/common/error/isCartChangedError.ts","webpack://checkout/./packages/core/src/app/payment/withPayment.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIcon.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx","webpack://checkout/./packages/ui/src/icon/mapFromPaymentMethodCardType.ts"],"sourcesContent":["import classNames from 'classnames';\nimport React, {\n    type FunctionComponent,\n    memo,\n    type ReactNode,\n    useCallback,\n    useContext,\n} from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node: Node, done: () => void) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children ? (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div aria-live=\"polite\" className={bodyClassName}>\n                        {children}\n                    </div>\n                </CSSTransition>\n            ) : null}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { type FunctionComponent, type InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { type FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, type AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { type Placement } from '@popperjs/core';\nimport React, { type ReactEventHandler, type ReactNode, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children: ReactNode;\n}\n\nconst TooltipTrigger: React.FC<TooltipTriggerProps> = ({\n    placement = 'bottom',\n    tooltip,\n    children,\n}) => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const handleShow: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(true);\n    };\n\n    const handleHide: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(false);\n    };\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <span\n                        onBlur={handleHide}\n                        onFocus={handleShow}\n                        onMouseEnter={handleShow}\n                        onMouseLeave={handleHide}\n                        ref={ref}\n                    >\n                        {children}\n                    </span>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    shouldShow && (\n                        <div ref={ref} style={style}>\n                            {tooltip}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default TooltipTrigger;\n","import { type Coupon } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface AppliedCouponProps {\n    coupon: Coupon;\n}\n\nconst AppliedCoupon: FunctionComponent<AppliedCouponProps> = ({ coupon }) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--coupon\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"coupon-amount\">\n                {coupon.displayName}\n            </span>{' '}\n            <TranslatedString id=\"redeemable.coupon_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\" data-test=\"coupon-code\">\n            {coupon.code}\n        </span>\n    </div>\n);\n\nexport default memo(AppliedCoupon);\n","import { type GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { ShopperCurrency } from '../currency';\n\nexport interface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n}\n\nconst AppliedGiftCertificate: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n}) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--giftCertificate\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"giftCertificate-amount\">\n                <ShopperCurrency amount={giftCertificate.used} />\n            </span>{' '}\n            <TranslatedString id=\"redeemable.gift_certificate_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\">\n            {giftCertificate.remaining > 0 && (\n                <span className=\"redeemable-info-subHeader--remaining\">\n                    <TranslatedString id=\"redeemable.gift_certificate_remaining_text\" />{' '}\n                    <span data-test=\"giftCertificate-remaining\">\n                        <ShopperCurrency amount={giftCertificate.remaining} />\n                    </span>\n                </span>\n            )}\n\n            <span data-test=\"giftCertificate-code\">{giftCertificate.code}</span>\n        </span>\n    </div>\n);\n\nexport default memo(AppliedGiftCertificate);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconRemove: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconRemove);\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconRemove } from '../ui/icon';\n\nimport './AppliedRedeemable.scss';\n\nexport interface AppliedRedeemableProps {\n    children: ReactNode;\n    isRemoving: boolean;\n    onRemove(): void;\n}\n\nconst AppliedRedeemable: FunctionComponent<AppliedRedeemableProps> = ({\n    children,\n    isRemoving,\n    onRemove,\n}) => (\n    <div className=\"form-checklist-header\">\n        <div className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\">\n            <span className=\"is-srOnly\">\n                <TranslatedString id=\"redeemable.applied_text\" />\n            </span>\n        </div>\n\n        <div className=\"form-label form-label-redeemable\">\n            <div className=\"redeemable\">\n                {children}\n                <div className=\"redeemable-column redeemable-actions\">\n                    <button\n                        className={classNames('redeemable-remove', { 'is-loading': isRemoving })}\n                        data-test=\"redeemable-remove\"\n                        disabled={isRemoving}\n                        onClick={onRemove}\n                        type=\"button\"\n                    >\n                        <IconRemove />\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default AppliedRedeemable;\n","import { type Coupon, type GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { AppliedCoupon } from '../coupon';\nimport { AppliedGiftCertificate } from '../giftCertificate';\n\nimport AppliedRedeemable from './AppliedRedeemable';\n\ninterface AppliedCouponProps {\n    coupon: Coupon;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedCouponChecklistItem: FunctionComponent<AppliedCouponProps> = ({\n    coupon,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(coupon.code);\n    }, [coupon, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedCoupon coupon={coupon} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\ninterface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedGiftCertificateChecklistItem: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(giftCertificate.code);\n    }, [giftCertificate, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedGiftCertificate giftCertificate={giftCertificate} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\nexport interface AppliedRedeemablesProps {\n    coupons?: Coupon[];\n    giftCertificates?: GiftCertificate[];\n    isRemovingGiftCertificate?: boolean;\n    isRemovingCoupon?: boolean;\n    onRemovedCoupon(code: string): void;\n    onRemovedGiftCertificate(code: string): void;\n}\n\nconst AppliedRedeemables: FunctionComponent<AppliedRedeemablesProps> = ({\n    coupons = [],\n    giftCertificates = [],\n    isRemovingCoupon = false,\n    isRemovingGiftCertificate = false,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n}) => {\n    if (!coupons.length && !giftCertificates.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"form-checklist optimizedCheckout-form-checklist\"\n            data-test=\"redeemables-list\"\n        >\n            {coupons.map((coupon) => (\n                <AppliedCouponChecklistItem\n                    coupon={coupon}\n                    isRemoving={isRemovingCoupon}\n                    key={coupon.code}\n                    onRemoved={onRemovedCoupon}\n                />\n            ))}\n\n            {giftCertificates.map((giftCertificate) => (\n                <AppliedGiftCertificateChecklistItem\n                    giftCertificate={giftCertificate}\n                    isRemoving={isRemovingGiftCertificate}\n                    key={giftCertificate.code}\n                    onRemoved={onRemovedGiftCertificate}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(AppliedRedeemables);\n","import { type CheckoutSelectors, type RequestError } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport classNames from 'classnames';\nimport { type FieldProps, type FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { type FunctionComponent, type KeyboardEvent, memo, type ReactNode, useCallback } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { type FormContextType, FormProvider, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { FormField, Label, TextInput } from '../ui/form';\nimport { Toggle } from '../ui/toggle';\n\nimport AppliedRedeemables, { type AppliedRedeemablesProps } from './AppliedRedeemables';\n\nexport interface RedeemableFormValues {\n    redeemableCode: string;\n}\n\nexport type ReedemableChildrenProps = Pick<\n    RedeemableProps,\n    | 'onRemovedCoupon'\n    | 'onRemovedGiftCertificate'\n    | 'isRemovingGiftCertificate'\n    | 'isRemovingCoupon'\n    | 'coupons'\n    | 'giftCertificates'\n>;\n\nexport type RedeemableProps = {\n    appliedRedeemableError?: RequestError;\n    isApplyingRedeemable?: boolean;\n    isRemovingRedeemable?: boolean;\n    removedRedeemableError?: RequestError;\n    showAppliedRedeemables?: boolean;\n    shouldCollapseCouponCode?: boolean;\n    applyCoupon(code: string): Promise<CheckoutSelectors>;\n    applyGiftCertificate(code: string): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n} & AppliedRedeemablesProps;\n\nconst Redeemable: FunctionComponent<\n    RedeemableProps & WithLanguageProps & FormikProps<RedeemableFormValues>\n    > = ({ shouldCollapseCouponCode, showAppliedRedeemables, ...formProps }) => {\n        const { themeV2 } = useThemeContext();\n\n        return (\n            <Toggle openByDefault={!shouldCollapseCouponCode}>\n                {({ toggle, isOpen }): ReactNode => (\n                    <>\n                        {shouldCollapseCouponCode && (\n                            <a\n                                aria-controls=\"redeemable-collapsable\"\n                                aria-expanded={isOpen}\n                                className={classNames('redeemable-label', { 'body-cta': themeV2 })}\n                                data-test=\"redeemable-label\"\n                                href=\"#\"\n                                onClick={preventDefault(toggle)}\n                            >\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </a>\n                        )}\n                        {!shouldCollapseCouponCode && (\n                            <div className={classNames('redeemable-label', { 'body-cta': themeV2 })}>\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </div>\n                        )}\n                        {(isOpen || !shouldCollapseCouponCode) && (\n                            <div data-test=\"redeemable-collapsable\" id=\"redeemable-collapsable\">\n                                <RedeemableForm {...formProps} />\n                                {showAppliedRedeemables && <AppliedRedeemables {...formProps} />}\n                            </div>\n                        )}\n                    </>\n                )}\n            </Toggle>\n        );\n    }\n\nconst RedeemableForm: FunctionComponent<\n    Partial<RedeemableProps> & FormikProps<RedeemableFormValues> & WithLanguageProps\n> = ({ appliedRedeemableError, isApplyingRedeemable, clearError = noop, submitForm, language }) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const handleSubmitForm = (setSubmitted: FormContextType['setSubmitted']) => {\n        if (isSubmittingOrder()) {\n            return;\n        }\n\n        setSubmitted(true);\n        submitForm();\n    }\n\n    const handleKeyDown = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => (event: KeyboardEvent) => {\n            if (appliedRedeemableError) {\n                clearError(appliedRedeemableError);\n            }\n\n            // note: to prevent submitting main form, we manually intercept\n            // the enter key event and submit the \"subform\".\n            if (event.keyCode === 13 || event.key === 'Enter') {\n                handleSubmitForm(setSubmitted);\n                event.preventDefault();\n            }\n        }),\n        [appliedRedeemableError, clearError, submitForm],\n    );\n\n    const handleSubmit = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => () => {\n            handleSubmitForm(setSubmitted);\n        }),\n        [],\n    );\n\n    const renderLabel = useCallback(\n        (name: string) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"redeemable.code_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderErrorMessage = useCallback((errorCode: string, errorMessage?: string) => {\n        switch (errorCode) {\n            case 'min_purchase':\n                return <TranslatedString id=\"redeemable.coupon_min_order_total\" />;\n\n            case 'not_applicable':\n                return <TranslatedString id=\"redeemable.coupon_location_error\" />;\n\n            default:\n                return errorMessage || <TranslatedString id=\"redeemable.code_invalid_error\" />;\n        }\n    }, []);\n\n    const renderInput = useCallback(\n        (setSubmitted: FormContextType['setSubmitted']) =>\n            ({ field }: FieldProps) =>\n                (\n                    <>\n                        {appliedRedeemableError &&\n                            appliedRedeemableError.errors &&\n                            appliedRedeemableError.errors[0] && (\n                                <Alert type={AlertType.Error}>\n                                    {renderErrorMessage(appliedRedeemableError.errors[0].code, appliedRedeemableError.errors[0].message)}\n                                </Alert>\n                            )}\n\n                        <div className=\"form-prefixPostfix\">\n                            <TextInput\n                                {...field}\n                                aria-label={language.translate('redeemable.code_label')}\n                                className=\"form-input optimizedCheckout-form-input\"\n                                onKeyDown={handleKeyDown(setSubmitted)}\n                                testId=\"redeemableEntry-input\"\n                                themeV2={themeV2}\n                            />\n\n                            <Button\n                                className={classNames('form-prefixPostfix-button--postfix', {\n                                    'body-bold': themeV2,\n                                })}\n                                disabled={isSubmittingOrder()}\n                                id=\"applyRedeemableButton\"\n                                isLoading={isApplyingRedeemable}\n                                onClick={handleSubmit(setSubmitted)}\n                                testId=\"redeemableEntry-submit\"\n                                variant={ButtonVariant.Secondary}\n                            >\n                                <TranslatedString id=\"redeemable.apply_action\" />\n                            </Button>\n                        </div>\n                    </>\n                ),\n        [\n            appliedRedeemableError,\n            handleKeyDown,\n            handleSubmit,\n            isApplyingRedeemable,\n            language,\n            isSubmittingOrder,\n            renderErrorMessage,\n        ],\n    );\n\n    const renderContent = useCallback(\n        memoizeOne(({ setSubmitted }: FormContextType) => (\n            <FormField\n                input={renderInput(setSubmitted)}\n                label={renderLabel}\n                name=\"redeemableCode\"\n            />\n        )),\n        [renderLabel, renderInput],\n    );\n\n    return (\n        <fieldset className=\"form-fieldset redeemable-entry\">\n            <FormProvider>{renderContent}</FormProvider>\n        </fieldset>\n    );\n};\n\nexport default withLanguage(\n    withFormik<RedeemableProps & WithLanguageProps, RedeemableFormValues>({\n        mapPropsToValues() {\n            return {\n                redeemableCode: '',\n            };\n        },\n\n        async handleSubmit(\n            { redeemableCode },\n            { props: { applyCoupon, applyGiftCertificate, clearError } },\n        ) {\n            const code = redeemableCode.trim();\n\n            try {\n                await applyGiftCertificate(code);\n            } catch (error) {\n                if (error instanceof Error) {\n                    clearError(error);\n                }\n\n                applyCoupon(code);\n            }\n        },\n\n        validationSchema({ language }: RedeemableProps & WithLanguageProps) {\n            return object({\n                redeemableCode: string().required(\n                    language.translate('redeemable.code_required_error'),\n                ),\n            });\n        },\n    })(memo(Redeemable)),\n);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createContext } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nconst PaymentContext = createContext<PaymentContextProps | undefined>(undefined);\n\nexport default PaymentContext;\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","import React, { type FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    children: React.ReactNode;\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\n        {children}\n    </span>\n);\n\nexport default Tooltip;\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\nimport { FormContext, type FormContextType } from '@bigcommerce/checkout/ui';\n\nexport type WithFormProps = FormContextType;\n\nconst withForm = createInjectHoc(FormContext, { displayNamePrefix: 'WithForm' });\n\nexport default withForm;\n","import { type CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { EMPTY_ARRAY } from '../common/utility';\n\nimport { type RedeemableProps } from './Redeemable';\n\nexport default function mapToRedeemableProps(\n    context: CheckoutContextProps,\n): RedeemableProps | null {\n    const {\n        checkoutService,\n        checkoutState: {\n            data: { getConfig, getCoupons, getGiftCertificates },\n            statuses: {\n                isApplyingCoupon,\n                isApplyingGiftCertificate,\n                isRemovingCoupon,\n                isRemovingGiftCertificate,\n            },\n            errors: {\n                getApplyCouponError,\n                getApplyGiftCertificateError,\n                getRemoveCouponError,\n                getRemoveGiftCertificateError,\n            },\n        },\n    } = context;\n\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        appliedRedeemableError: getApplyCouponError() || getApplyGiftCertificateError(),\n        applyCoupon: checkoutService.applyCoupon,\n        applyGiftCertificate: checkoutService.applyGiftCertificate,\n        clearError: checkoutService.clearError,\n        coupons: getCoupons() || EMPTY_ARRAY,\n        giftCertificates: getGiftCertificates() || EMPTY_ARRAY,\n        isApplyingRedeemable: isApplyingCoupon() || isApplyingGiftCertificate(),\n        isRemovingCoupon: isRemovingCoupon(),\n        isRemovingGiftCertificate: isRemovingGiftCertificate(),\n        onRemovedCoupon: checkoutService.removeCoupon,\n        onRemovedGiftCertificate: checkoutService.removeGiftCertificate,\n        removedRedeemableError: getRemoveCouponError() || getRemoveGiftCertificateError(),\n        shouldCollapseCouponCode: config.checkoutSettings.isCouponCodeCollapsed,\n    };\n}\n","import { createContext, useContext } from 'react';\n\nimport type PaymentMethodProps from '../../PaymentMethodProps';\n\nexport type PaymentFormContextProps = Pick<PaymentMethodProps, 'paymentForm'>;\n\nexport const PaymentFormContext = createContext<PaymentFormContextProps | undefined>(undefined);\n\nexport function usePaymentFormContext() {\n    const context = useContext(PaymentFormContext);\n\n    if (!context) {\n        throw new Error('usePaymentFormContext must be used within a PaymentFormContextProvider');\n    }\n\n    return context;\n}\n","import classNames from 'classnames';\nimport React, { forwardRef, type Ref, type TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n    isFloatingLabelEnabled?: boolean;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, isFloatingLabelEnabled, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => {\n        return (\n            <textarea\n                {...rest}\n                className={\n                    className ||\n                    classNames(\n                        { 'floating-textarea': isFloatingLabelEnabled },\n                        'form-input',\n                        'optimizedCheckout-form-input',\n                        additionalClassName,\n                    )\n                }\n                data-test={testId}\n                ref={ref}\n            />\n        );\n    },\n);\n\nexport default TextArea;\n","import React, { type FunctionComponent, type ReactNode, useCallback } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize } from '../button';\n\nimport Modal from './Modal';\nimport './ModalLink.scss';\nimport ModalTrigger, { type ModalTriggerModalProps } from './ModalTrigger';\n\nexport interface ModalLinkProps {\n    header: ReactNode;\n    body: ReactNode;\n    children?: ReactNode;\n}\n\nconst ModalLink: FunctionComponent<ModalLinkProps> = ({ children, body, header }) => {\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <Modal\n                {...props}\n                additionalBodyClassName=\"modal--withText\"\n                footer={\n                    <Button onClick={props.onRequestClose} size={ButtonSize.Small}>\n                        <TranslatedString id=\"common.ok_action\" />\n                    </Button>\n                }\n                header={header}\n                shouldShowCloseButton={true}\n            >\n                {body}\n            </Modal>\n        ),\n        [header, body],\n    );\n\n    return (\n        <ModalTrigger modal={renderModal}>\n            { }\n            {({ onClick }) => <a onClick={preventDefault(onClick)}>{children}</a>}\n        </ModalTrigger>\n    );\n};\n\nexport default ModalLink;\n","import React, { Fragment, type FunctionComponent } from 'react';\n\nconst MultiLineText: FunctionComponent<{ children: string }> = ({ children }) => (\n    <>\n        {children.split('\\n').map((line, key) => (\n            <Fragment key={key}>\n                {line}\n                <br />\n            </Fragment>\n        ))}\n    </>\n);\n\nexport default MultiLineText;\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { parseAnchor } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedHtml, TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField, Fieldset, FormField, Legend, TextArea } from '../ui/form';\nimport { ModalHeader, ModalLink } from '../ui/modal';\nimport { MultiLineText } from '../ui/text';\n\nexport enum TermsConditionsType {\n    Link = 'link',\n    TextArea = 'textarea',\n    Modal = 'modal',\n}\n\nexport type TermsConditionsFieldProps =\n    | TermsConditionsLinkFieldProps\n    | TermsConditionsTextAreaFieldProps;\n\ninterface TermsConditionsLinkFieldProps {\n    name: string;\n    type: TermsConditionsType.Link;\n    url: string;\n}\n\ninterface TermsConditionsTextAreaFieldProps {\n    name: string;\n    terms: string;\n    type: TermsConditionsType.TextArea | TermsConditionsType.Modal;\n}\n\ninterface TermsConditionsTextFieldProps {\n    name: string;\n    terms: string;\n}\n\nconst BaseTermsConditionsModalCheckboxField: FunctionComponent<\n    TermsConditionsTextFieldProps & WithLanguageProps\n> = ({ language, name, terms }) => {\n    const translatedLabel = language.translate('terms_and_conditions.agreement_with_link_text', {\n        url: '',\n    });\n    const parsedLabel = parseAnchor(translatedLabel);\n\n    const labelContent = parsedLabel ? (\n        <>\n            {parsedLabel[0]}\n            <ModalLink\n                body={<MultiLineText>{terms}</MultiLineText>}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"terms_and_conditions.heading\" />\n                    </ModalHeader>\n                }\n            >\n                {parsedLabel[1]}\n            </ModalLink>\n            {parsedLabel[2]}\n        </>\n    ) : (\n        translatedLabel\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsModalCheckboxField = withLanguage(BaseTermsConditionsModalCheckboxField);\n\ninterface TermsConditionsCheckboxFieldProps {\n    name: string;\n    type: TermsConditionsType;\n    url?: string;\n}\n\nconst TermsConditionsCheckboxField: FunctionComponent<TermsConditionsCheckboxFieldProps> = ({\n    name,\n    url,\n}) => {\n    const labelContent = useMemo(\n        () =>\n            url ? (\n                <TranslatedHtml data={{ url }} id=\"terms_and_conditions.agreement_with_link_text\" />\n            ) : (\n                <TranslatedString id=\"terms_and_conditions.agreement_text\" />\n            ),\n        [url],\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsTextField: FunctionComponent<TermsConditionsTextFieldProps> = ({\n    name,\n    terms,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextArea defaultValue={terms} name={field.name} readOnly />,\n        [terms],\n    );\n\n    return <FormField input={renderInput} name={`${name}Text`} />;\n};\n\nconst TermsConditionsFieldset: FunctionComponent<TermsConditionsFieldProps> = (props) => {\n    const { type } = props;\n\n    return (\n        <Fieldset\n            additionalClassName=\"checkout-terms\"\n            legend={\n                <Legend>\n                    <TranslatedString id=\"terms_and_conditions.terms_and_conditions_heading\" />\n                </Legend>\n            }\n        >\n            {isTermsConditionsTextArea(props) && <TermsConditionsTextField {...props} />}\n            {isTermsConditionModal(props) && type === TermsConditionsType.Modal ? (\n                <TermsConditionsModalCheckboxField {...props} />\n            ) : (\n                <TermsConditionsCheckboxField {...props} />\n            )}\n        </Fieldset>\n    );\n};\n\nfunction isTermsConditionsTextArea(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.TextArea;\n}\n\nfunction isTermsConditionModal(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.Modal;\n}\n\nexport default memo(TermsConditionsFieldset);\n","export interface ExpiryDate {\n    month: string;\n    year: string;\n}\n\nexport default function unformatCreditCardExpiryDate(value: string): ExpiryDate {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n\n    if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n        return { month: '', year: '' };\n    }\n\n    return {\n        month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n        year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n    };\n}\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n\nexport function parseUniquePaymentMethodId(value: string): {\n    methodId: string;\n    gatewayId?: string;\n} {\n    const [gatewayId, methodId] = value.includes('-') ? value.split('-') : [undefined, value];\n\n    return { gatewayId, methodId };\n}\n","import { type CardInstrumentFieldsetValues } from '../storedInstrument';\n\nexport default interface CreditCardFieldsetValues {\n    ccCustomerCode?: string;\n    ccCvv?: string;\n    ccExpiry: string;\n    ccName: string;\n    ccNumber: string;\n    shouldSaveInstrument?: boolean;\n}\n\nexport interface CreditCardValidationValues extends CardInstrumentFieldsetValues {\n    ccCvv?: string;\n    ccNumber?: string;\n}\n\nexport function hasCreditCardNumber(values: unknown): values is { ccNumber: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccNumber' in values;\n}\n\nexport function hasCreditCardExpiry(values: unknown): values is { ccExpiry: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccExpiry' in values;\n}\n","import React, { type FunctionComponent } from 'react';\n\nimport TermsConditionsField, { TermsConditionsType } from './TermsConditionsField';\n\nexport interface TermsConditionsProps {\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n}\n\nexport const TermsConditions: FunctionComponent<TermsConditionsProps> = ({\n    termsConditionsUrl,\n    termsConditionsText = '',\n}) => (\n    <>\n        {termsConditionsUrl ? (\n            <TermsConditionsField\n                name=\"terms\"\n                type={TermsConditionsType.Link}\n                url={termsConditionsUrl}\n            />\n        ) : (\n            <TermsConditionsField\n                name=\"terms\"\n                terms={termsConditionsText}\n                type={TermsConditionsType.TextArea}\n            />\n        )}\n    </>\n);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, type ObjectSchema, string, type StringSchema } from 'yup';\n\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { getTermsConditionsValidationSchema } from '../termsConditions';\n\nexport interface PaymentValidationSchemaOptions {\n    additionalValidation?: ObjectSchema<Partial<PaymentFormValues>>;\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPaymentValidationSchema({\n    additionalValidation,\n    isTermsConditionsRequired,\n    language,\n}: PaymentValidationSchemaOptions): ObjectSchema<PaymentFormValues> {\n    const schemaFields: {\n        paymentProviderRadio: StringSchema;\n    } = {\n        paymentProviderRadio: string().required(),\n    };\n\n    const schemaFieldsWithTerms = object(schemaFields).concat(\n        getTermsConditionsValidationSchema({ isTermsConditionsRequired, language }),\n    );\n\n    return additionalValidation\n        ? schemaFieldsWithTerms.concat(additionalValidation as any)\n        : schemaFieldsWithTerms;\n}\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, type BooleanSchema, object, type ObjectSchema } from 'yup';\n\nexport interface TermsConditionValidationSchemaOptions {\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getTermsConditionsValidationSchema({\n    isTermsConditionsRequired,\n    language,\n}: TermsConditionValidationSchemaOptions): ObjectSchema<{ terms?: boolean }> {\n    const schemaFields: {\n        terms?: BooleanSchema;\n    } = {};\n\n    if (isTermsConditionsRequired) {\n        schemaFields.terms = boolean().oneOf(\n            [true],\n            language.translate('terms_and_conditions.agreement_required_error'),\n        );\n    }\n\n    return object(schemaFields);\n}\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config && method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import React, { type FunctionComponent, memo, type ReactNode } from 'react';\n\nexport interface CustomChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n}\n\nconst CustomChecklistItem: FunctionComponent<CustomChecklistItemProps> = ({\n    content,\n    htmlId,\n}) => {\n    return (\n        <li\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item custom-checklist-item\"\n            id={htmlId}\n        >\n            {content}\n        </li>\n    );\n};\n\nexport default memo(CustomChecklistItem);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsPayLaterBanner: FunctionComponent<{\n    onUnhandledError?(error: Error): void\n}> = ({ onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n                bigcommerce_payments_paylater: {\n                    bannerContainerId: 'bigcommerce-payments-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n    }, []);\n\n    return (\n        <div\n            data-test='bigcommerce-payments-banner-container'\n            id='bigcommerce-payments-banner-container'\n        />\n    );\n};\n\nexport default BigCommercePaymentsPayLaterBanner;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\ninterface BraintreePaypalCreditBannerProps {\n    methodId: string;\n    containerId: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst BraintreePaypalCreditBanner: FunctionComponent<BraintreePaypalCreditBannerProps> = ({\n    methodId,\n    containerId,\n    onUnhandledError,\n}) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId,\n                braintree: {\n                    bannerContainerId: containerId,\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n\n        return () => {\n            try {\n                void checkoutService.deinitializePayment({\n                    methodId,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError?.(error);\n                }\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default BraintreePaypalCreditBanner;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst PaypalCommerceCreditBanner: FunctionComponent<{\n    methodId: string;\n    containerId: string;\n    onUnhandledError?(error: Error): void;\n}> = ({ methodId, containerId, onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId,\n                [methodId]: {\n                    bannerContainerId: containerId,\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default PaypalCommerceCreditBanner;\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { CreditCardIcon, filterInstrumentTypes } from './';\n\nexport interface CreditCardIconListProps {\n    selectedCardType?: string;\n    cardTypes: string[];\n}\n\nconst CreditCardIconList: FunctionComponent<CreditCardIconListProps> = ({\n    selectedCardType,\n    cardTypes,\n}) => {\n    const filteredCardTypes = filterInstrumentTypes(cardTypes);\n\n    if (!filteredCardTypes.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"creditCardTypes-list\">\n            {filteredCardTypes.map((type) => (\n                <li\n                    className={classNames(\n                        'creditCardTypes-list-item',\n                        { 'is-active': selectedCardType === type },\n                        { 'not-active': selectedCardType && selectedCardType !== type },\n                    )}\n                    data-test={`${type}-icon`}\n                    key={type}\n                >\n                    <span className=\"cardIcon\">\n                        <CreditCardIcon cardType={type} />\n                    </span>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(CreditCardIconList);\n","import { type CardInstrument, type CheckoutSettings, type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport classNames from 'classnames';\nimport { compact } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode } from 'react';\n\nimport { BigCommercePaymentsPayLaterBanner } from '@bigcommerce/checkout/bigcommerce-payments-utils'\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps , type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { BraintreePaypalCreditBanner, PaypalCommerceCreditBanner } from '@bigcommerce/checkout/paypal-utils';\nimport { CreditCardIconList, mapFromPaymentMethodCardType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport { isExperimentEnabled } from '../../common/utility';\n\nimport { hasCreditCardNumber } from './CreditCardFieldsetValues';\nimport getPaymentMethodDisplayName from './getPaymentMethodDisplayName';\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { isHostedCreditCardFieldsetValues } from './HostedCreditCardFieldsetValues';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodTitleProps {\n    method: PaymentMethod;\n    isSelected?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithPaymentTitleProps {\n    instruments: CardInstrument[];\n    checkoutSettings: CheckoutSettings;\n    storeCountryCode: string;\n    cdnBasePath: string;\n}\n\ninterface PaymentMethodSubtitleProps {\n    onUnhandledError?(error: Error): void;\n    methodId: string;\n}\n\ntype SubtitleType = ReactNode | ((subtitleProps?: PaymentMethodSubtitleProps) => ReactNode);\n\nexport function getPaymentMethodTitle(\n    language: LanguageService,\n    basePath: string,\n    checkoutSettings: CheckoutSettings,\n    storeCountryCode: string,\n): (method: PaymentMethod) => {\n    logoUrl: string;\n    titleText: string,\n    subtitle?: SubtitleType\n} {\n    const cdnPath = (path: string) => `${basePath}${path}`;\n\n    return (method) => {\n        const paymentWithLogo = method.initializationData?.methodsWithLogo\n            ? method.initializationData.methodsWithLogo\n            : [];\n        const methodName = getPaymentMethodName(language)(method);\n        const methodDisplayName = getPaymentMethodDisplayName(language)(method);\n        // TODO: API could provide the data below so UI can read simply read it.\n        // However, I'm not sure how we deal with translation yet. TBC.\n        const customTitles: { [key: string]: { logoUrl: string; titleText: string, subtitle?: ReactNode | ((props: any) => ReactNode) } } = {\n            [PaymentMethodType.CreditCard]: {\n                logoUrl: '',\n                titleText: methodName,\n            },\n            [PaymentMethodId.BraintreeVenmo]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.BraintreePaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps): ReactNode => (\n                    <BraintreePaypalCreditBanner containerId='braintree-credit-banner-container' {...props} />\n                ),\n            },\n            [PaymentMethodType.PaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeAch]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeLocalPaymentMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BigCommercePaymentsPayPal]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsPayLater]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.PaypalCommerce]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-credit-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodType.VisaCheckout]: {\n                logoUrl: cdnPath('/img/payment-providers/visa-checkout.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.Affirm]: {\n                logoUrl: cdnPath('/img/payment-providers/affirm-checkout-header.png'),\n                titleText: language.translate('payment.affirm_display_name_text'),\n            },\n            [PaymentMethodId.Afterpay]: {\n                logoUrl: isExperimentEnabled(checkoutSettings, 'PROJECT-6993.change_afterpay_logo_for_us_stores') && storeCountryCode === 'US' ? cdnPath('/img/payment-providers/afterpay-new-us.svg') : cdnPath('/img/payment-providers/afterpay-badge-blackonmint.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.AmazonPay]: {\n                logoUrl: cdnPath('/img/payment-providers/amazon-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.ApplePay]: {\n                logoUrl: cdnPath('/modules/checkout/applepay/images/applepay-header@2x.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Bolt]: {\n                logoUrl: '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Clearpay]: {\n                logoUrl: cdnPath('/img/payment-providers/clearpay-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.GooglePay]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.PayWithGoogle]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Humm]: {\n                logoUrl: cdnPath('/img/payment-providers/humm-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Klarna]: {\n                logoUrl: method.initializationData?.enableBillie\n                        ? cdnPath('/img/payment-providers/klarna-billie-header.png')\n                        : cdnPath('/img/payment-providers/klarna-header.png'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Laybuy]: {\n                logoUrl: cdnPath('/img/payment-providers/laybuy-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Masterpass]: {\n                logoUrl: 'https://masterpass.com/dyn/img/acc/global/mp_mark_hor_blk.svg',\n                titleText: '',\n            },\n            [PaymentMethodType.Paypal]: {\n                // TODO: method.id === PaymentMethodId.BraintreeVenmo should be removed after the PAYPAL-1380.checkout_button_strategies_update experiment removal\n                logoUrl:\n                    method.id === PaymentMethodId.BraintreeVenmo && method.logoUrl\n                        ? method.logoUrl\n                        : cdnPath('/img/payment-providers/paypalpaymentsprouk.png'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps): ReactNode => (\n                    <BraintreePaypalCreditBanner containerId='braintree-banner-container' {...props} />\n                ),\n            },\n            [PaymentMethodId.Quadpay]: {\n                logoUrl: cdnPath('/img/payment-providers/quadpay.png'),\n                titleText: language.translate('payment.quadpay_display_name_text'),\n            },\n            [PaymentMethodId.Sezzle]: {\n                logoUrl: cdnPath('/img/payment-providers/sezzle-checkout-header.png'),\n                titleText: language.translate('payment.sezzle_display_name_text'),\n            },\n            [PaymentMethodId.Zip]: {\n                logoUrl: cdnPath('/img/payment-providers/zip.png'),\n                titleText: language.translate('payment.zip_display_name_text'),\n            },\n            [PaymentMethodType.Barclaycard]: {\n                logoUrl: cdnPath(\n                    `/img/payment-providers/barclaycard_${method.id.toLowerCase()}.png`,\n                ),\n                titleText: '',\n            },\n            [PaymentMethodId.AdyenV2]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.AdyenV3]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Mollie]: {\n                logoUrl:\n                    method.method === 'credit_card'\n                        ? ''\n                        : cdnPath(`/img/payment-providers/mollie_${method.method}.svg`),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Checkoutcom]: {\n                logoUrl: ['credit_card', 'card', 'checkoutcom'].includes(method.id)\n                    ? ''\n                    : cdnPath(`/img/payment-providers/checkoutcom_${method.id.toLowerCase()}.svg`),\n                titleText: methodName,\n            },\n            [PaymentMethodId.StripeV3]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.StripeUPE]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.WorldpayAccess]: {\n                logoUrl: '',\n                titleText: language.translate('payment.credit_debit_card_text'),\n            },\n        };\n\n        if (method.gateway === PaymentMethodId.BlueSnapDirect) {\n            if (method.id === 'credit_card') {\n                return { logoUrl: '', titleText: language.translate('payment.credit_card_text') };\n            }\n\n            if (method.id === 'ecp') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_electronic_check_label') };\n            }\n\n            if (method.id === 'banktransfer') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_local_bank_transfer_label') };\n            }\n        }\n\n        if (method.id === PaymentMethodId.PaypalCommerceVenmo) {\n            return customTitles[PaymentMethodId.PaypalCommerceAlternativeMethod];\n        }\n\n        if (method.id === PaymentMethodId.BigCommercePaymentsVenmo) {\n            return customTitles[PaymentMethodId.BigCommercePaymentsAlternativeMethod];\n        }\n\n        // KLUDGE: 'paypal' is actually a credit card method. It is the only\n        // exception to the rule below. We should probably fix it on API level,\n        // but apparently it would break LCO if we are not careful.\n        if (\n            method.id === PaymentMethodId.PaypalPaymentsPro &&\n            method.method === PaymentMethodType.CreditCard\n        ) {\n            return customTitles[PaymentMethodType.CreditCard];\n        }\n\n        if (method.id === PaymentMethodId.Ratepay) {\n            return { logoUrl: method.logoUrl || '', titleText: language.translate('payment.ratepay.payment_method_title') };\n        }\n\n        return (\n            customTitles[method.gateway || ''] ||\n            customTitles[method.id] ||\n            customTitles[method.method] ||\n            customTitles[PaymentMethodType.CreditCard]\n        );\n    };\n}\n\nfunction getInstrumentForMethod(\n    instruments: CardInstrument[],\n    method: PaymentMethod,\n    values: PaymentFormValues\n): CardInstrument | undefined {\n    const instrumentsForMethod = instruments.filter(instrument => instrument.provider === method.id);\n    const selectedInstrument = instrumentsForMethod.find(instrument => instrument.bigpayToken === values.instrumentId);\n\n    return selectedInstrument;\n}\n\nconst PaymentMethodTitle: FunctionComponent<\n    PaymentMethodTitleProps &\n        WithLanguageProps &\n        WithPaymentTitleProps &\n        ConnectFormikProps<PaymentFormValues>\n> = ({ cdnBasePath, checkoutSettings, storeCountryCode, onUnhandledError, formik: { values }, instruments, isSelected, language, method }) => {\n    const methodName = getPaymentMethodName(language)(method);\n    const { logoUrl, titleText, subtitle } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(method);\n    const { themeV2 } = useThemeContext();\n\n    const getSelectedCardType = () => {\n        if (!isSelected) {\n            return;\n        }\n\n        const instrumentSelected = getInstrumentForMethod(instruments, method, values);\n\n        if (isHostedCreditCardFieldsetValues(values) && values.hostedForm.cardType) {\n            return values.hostedForm.cardType;\n        }\n\n        if (hasCreditCardNumber(values) && values.ccNumber) {\n            const { card } = number(values.ccNumber);\n\n            if (!card) {\n                return;\n            }\n\n            return card.type;\n        }\n\n        if (instrumentSelected) {\n            return instrumentSelected.brand;\n        }\n    };\n\n    const getSubtitle = () => {\n        const node = subtitle instanceof Function ? subtitle({ onUnhandledError, methodId: method.id }) : subtitle;\n\n        return node ? <div className=\"paymentProviderHeader-subtitleContainer\">\n            {node}\n        </div> : null\n    }\n\n    return (\n        <div className={\n            classNames(\n                'paymentProviderHeader-container',\n                { 'paymentProviderHeader-container-googlePay': method.id.includes('googlepay') },\n            )\n        }>\n            <div\n                className=\"paymentProviderHeader-nameContainer\"\n                data-test={`payment-method-${method.id}`}\n            >\n                {logoUrl && (\n                    <img\n                        alt={`${methodName} icon`}\n                        className={classNames(\n                            'paymentProviderHeader-img',\n                            { 'paymentProviderHeader-img-applePay': method.id === 'applepay' },\n                            { 'paymentProviderHeader-img-googlePay': method.id.includes('googlepay') },\n                        )}\n                        data-test=\"payment-method-logo\"\n                        src={logoUrl}\n                    />\n                )}\n\n                {titleText && (\n                    <div className={classNames('paymentProviderHeader-name',\n                        { 'sub-header': themeV2 })}\n                        data-test=\"payment-method-name\">\n                        {titleText}\n                    </div>\n                )}\n                {getSubtitle()}\n            </div>\n            <div className=\"paymentProviderHeader-cc\">\n                <CreditCardIconList\n                    cardTypes={compact(method.supportedCards.map(mapFromPaymentMethodCardType))}\n                    selectedCardType={getSelectedCardType()}\n                />\n            </div>\n        </div>\n    );\n};\n\nfunction mapToCheckoutProps({ checkoutState }: CheckoutContextProps): WithPaymentTitleProps | null {\n    const {\n        data: { getConfig, getInstruments },\n    } = checkoutState;\n    const config = getConfig();\n\n    const instruments = getInstruments() || [];\n\n    if (!config) {\n        return null;\n    }\n\n    const storeCountryCode = config.storeProfile.storeCountryCode\n\n    return {\n        instruments,\n        checkoutSettings: config.checkoutSettings,\n        storeCountryCode,\n        cdnBasePath: config.cdnPath,\n    };\n}\n\nexport default connectFormik(\n    withLanguage(withCheckout(mapToCheckoutProps)(memo(PaymentMethodTitle))),\n);\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport PaymentMethodId from './PaymentMethodId';\n\nexport default function getPaymentMethodDisplayName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        const { displayName } = method.config;\n\n        const isCreditCard = displayName?.toLowerCase() === 'credit card';\n\n        if (\n            method.id === PaymentMethodId.PaypalCommerceCredit ||\n            method.id === PaymentMethodId.BigCommercePaymentsPayLater ||\n            method.id === PaymentMethodId.BraintreePaypalCredit\n        ) {\n            const { payPalCreditProductBrandName } = method.initializationData;\n\n            if (payPalCreditProductBrandName) {\n                return payPalCreditProductBrandName.credit || payPalCreditProductBrandName;\n            }\n\n            return 'Pay Later';\n        }\n\n        if (\n            (isCreditCard && method.id === PaymentMethodId.AdyenV2) ||\n            method.id === PaymentMethodId.AdyenV3\n        ) {\n            return language.translate('payment.credit_debit_card_text');\n        }\n\n        if (isCreditCard) {\n            return language.translate('payment.credit_card_text');\n        }\n\n        return displayName || '';\n    };\n}\n","interface HostedCreditCardFieldsetValues {\n    hostedForm: {\n        cardType?: string;\n        errors?: {\n            cardCode?: string;\n            cardExpiry?: string;\n            cardName?: string;\n            cardNumber?: string;\n        };\n    };\n}\n\nexport function isHostedCreditCardFieldsetValues(\n    value: unknown,\n): value is HostedCreditCardFieldsetValues {\n    if (!(value instanceof Object)) {\n        return false;\n    }\n\n    if (!('hostedForm' in value)) {\n        return false;\n    }\n\n    return true;\n}\n","import React, { type ReactNode } from 'react';\n\nimport type PaymentFormService from '../../PaymentFormService';\n\nimport { PaymentFormContext } from './PaymentFormContext';\n\ninterface PaymentFormProviderProps {\n    children?: ReactNode;\n    paymentForm: PaymentFormService;\n}\n\nexport const PaymentFormProvider = ({ children, paymentForm }: PaymentFormProviderProps) => {\n    return (\n        <PaymentFormContext.Provider value={{ paymentForm }}>\n            {children}\n        </PaymentFormContext.Provider>\n    );\n};\n","import { lazy } from 'react';\n\nconst AdyenV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"adyen-v2-payment-method\" */'@bigcommerce/checkout/adyen-integration').then(module => ({ default: module.AdyenV2PaymentMethod })));\nconst AdyenV3PaymentMethod = lazy(() => import(/* webpackChunkName: \"adyen-v3-payment-method\" */'@bigcommerce/checkout/adyen-integration').then(module => ({ default: module.AdyenV3PaymentMethod })));\nconst AffirmPaymentMethod = lazy(() => import(/* webpackChunkName: \"affirm-payment-method\" */'@bigcommerce/checkout/affirm-integration').then(module => ({ default: module.AffirmPaymentMethod })));\nconst AmazonPayV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"amazon-pay-v2-payment-method\" */'@bigcommerce/checkout/amazon-pay-v2-integration').then(module => ({ default: module.AmazonPayV2PaymentMethod })));\nconst ApplePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"apple-pay-payment-method\" */'@bigcommerce/checkout/apple-pay-integration').then(module => ({ default: module.ApplePayPaymentMethod })));\nconst BarclaycardPaymentMethod = lazy(() => import(/* webpackChunkName: \"barclaycard-payment-method\" */'@bigcommerce/checkout/barclay-integration').then(module => ({ default: module.BarclaycardPaymentMethod })));\nconst BigCommercePaymentsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsPaymentMethod })));\nconst BigCommercePaymentsAPMsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-apms-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsAPMsPaymentMethod })));\nconst BigCommercePaymentsCreditCardsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-credit-cards-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsCreditCardsPaymentMethod })));\nconst BigCommercePaymentsFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-fastlane-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsFastlanePaymentMethod })));\nconst BigCommercePaymentsPayLaterPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-pay-later-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsPayLaterPaymentMethod })));\nconst BigCommercePaymentsVenmoPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-venmo-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsVenmoPaymentMethod })));\nconst BigCommercePaymentsRatePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-rate-pay-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsRatePayPaymentMethod })));\nconst BlueSnapDirectEcpPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-ecp-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectEcpPaymentMethod })));\nconst BlueSnapDirectAlternativePaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-alternative-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectAlternativePaymentMethod })));\nconst BlueSnapDirectSepaPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-sepa-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectSepaPaymentMethod })));\nconst BlueSnapDirectIdealPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-ideal-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectIdealPaymentMethod })));\nconst BlueSnapV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-v2-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapV2PaymentMethod })));\nconst BlueSnapDirectPayByBankPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-pay-by-bank-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectPayByBankPaymentMethod })));\nconst BoltClientPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-client-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltClientPaymentMethod })));\nconst BoltEmbeddedPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-embedded-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltEmbeddedPaymentMethod })));\nconst BoltPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltPaymentMethod })));\nconst BraintreeAchPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-ach-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeAchPaymentMethod })));\nconst BraintreeFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-fastlane-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeFastlanePaymentMethod })));\nconst BraintreeLocalPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-local-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeLocalPaymentMethod })));\nconst BraintreePaypalPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-paypal-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreePaypalPaymentMethod })));\nconst VisaCheckoutPaymentMethod = lazy(() => import(/* webpackChunkName: \"visa-checkout-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.VisaCheckoutPaymentMethod })));\nconst BraintreeVenmoPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-venmo-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeVenmoPaymentMethod })));\nconst CheckoutcomCustomPaymentMethod = lazy(() => import(/* webpackChunkName: \"checkoutcom-custom-payment-method\" */'@bigcommerce/checkout/checkoutcom-integration').then(module => ({ default: module.CheckoutcomCustomPaymentMethod })));\nconst ClearpayPaymentMethod = lazy(() => import(/* webpackChunkName: \"clearpay-payment-method\" */'@bigcommerce/checkout/clearpay-integration').then(module => ({ default: module.ClearpayPaymentMethod })));\nconst GooglePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"google-pay-payment-method\" */'@bigcommerce/checkout/google-pay-integration').then(module => ({ default: module.GooglePayPaymentMethod })));\nconst HostedCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-credit-card-payment-method\" */'@bigcommerce/checkout/hosted-credit-card-integration').then(module => ({ default: module.HostedCreditCardPaymentMethod })));\nconst HostedPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-payment-method\" */'@bigcommerce/checkout/hosted-payment-integration').then(module => ({ default: module.HostedPaymentMethod })));\nconst KlarnaPaymentMethod = lazy(() => import(/* webpackChunkName: \"klarna-payment-method\" */'@bigcommerce/checkout/klarna-integration').then(module => ({ default: module.KlarnaPaymentMethod })));\nconst KlarnaV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"klarna-v2-payment-method\" */'@bigcommerce/checkout/klarna-integration').then(module => ({ default: module.KlarnaV2PaymentMethod })));\nconst MolliePaymentMethod = lazy(() => import(/* webpackChunkName: \"mollie-payment-method\" */'@bigcommerce/checkout/mollie-integration').then(module => ({ default: module.MolliePaymentMethod })));\nconst MonerisPaymentMethod = lazy(() => import(/* webpackChunkName: \"moneris-payment-method\" */'@bigcommerce/checkout/moneris-integration').then(module => ({ default: module.MonerisPaymentMethod })));\nconst OfflinePaymentMethod = lazy(() => import(/* webpackChunkName: \"offline-payment-method\" */'@bigcommerce/checkout/offline-payment-integration').then(module => ({ default: module.OfflinePaymentMethod })));\nconst PayPalCommerceAPMsPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-apms-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceAPMsPaymentMethod })));\nconst PayPalCommerceCreditPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-credit-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceCreditPaymentMethod })));\nconst PayPalCommerceCreditCardsPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-credit-cards-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceCreditCardsPaymentMethod })));\nconst PayPalCommerceFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-fastlane-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceFastlanePaymentMethod })));\nconst PayPalCommercePaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommercePaymentMethod })));\nconst PayPalCommerceVenmoPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-venmo-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceVenmoPaymentMethod })));\nconst PaypalCommerceRatePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"paypal-commerce-rate-pay-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PaypalCommerceRatePayPaymentMethod })));\nconst PaypalExpressPaymentMethod = lazy(() => import(/* webpackChunkName: \"paypal-express-payment-method\" */'@bigcommerce/checkout/paypal-express-integration').then(module => ({ default: module.PaypalExpressPaymentMethod })));\nconst PayPalPaymentsProPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-payments-pro-payment-method\" */'@bigcommerce/checkout/paypal-payments-pro-integration').then(module => ({ default: module.PayPalPaymentsProPaymentMethod })));\nconst PPSDKPaymentMethod = lazy(() => import(/* webpackChunkName: \"ppsdkpayment-method\" */'@bigcommerce/checkout/ppsdk-integration').then(module => ({ default: module.PPSDKPaymentMethod })));\nconst SquareV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"square-v2-payment-method\" */'@bigcommerce/checkout/squarev2-integration').then(module => ({ default: module.SquareV2PaymentMethod })));\nconst StripeOCSPaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-ocspayment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeOCSPaymentMethod })));\nconst StripeUPEPaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-upepayment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeUPEPaymentMethod })));\nconst StripeV3PaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-v3-payment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeV3PaymentMethod })));\nconst WorldpayCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"worldpay-credit-card-payment-method\" */'@bigcommerce/checkout/worldpay-access-integration').then(module => ({ default: module.WorldpayCreditCardPaymentMethod })));\n\nexport {\n  AdyenV2PaymentMethod,\n  AdyenV3PaymentMethod,\n  AffirmPaymentMethod,\n  AmazonPayV2PaymentMethod,\n  ApplePayPaymentMethod,\n  BarclaycardPaymentMethod,\n  BigCommercePaymentsPaymentMethod,\n  BigCommercePaymentsAPMsPaymentMethod,\n  BigCommercePaymentsCreditCardsPaymentMethod,\n  BigCommercePaymentsFastlanePaymentMethod,\n  BigCommercePaymentsPayLaterPaymentMethod,\n  BigCommercePaymentsVenmoPaymentMethod,\n  BigCommercePaymentsRatePayPaymentMethod,\n  BlueSnapDirectEcpPaymentMethod,\n  BlueSnapDirectAlternativePaymentMethod,\n  BlueSnapDirectSepaPaymentMethod,\n  BlueSnapDirectIdealPaymentMethod,\n  BlueSnapV2PaymentMethod,\n  BlueSnapDirectPayByBankPaymentMethod,\n  BoltClientPaymentMethod,\n  BoltEmbeddedPaymentMethod,\n  BoltPaymentMethod,\n  BraintreeAchPaymentMethod,\n  BraintreeFastlanePaymentMethod,\n  BraintreeLocalPaymentMethod,\n  BraintreePaypalPaymentMethod,\n  VisaCheckoutPaymentMethod,\n  BraintreeVenmoPaymentMethod,\n  CheckoutcomCustomPaymentMethod,\n  ClearpayPaymentMethod,\n  GooglePayPaymentMethod,\n  HostedCreditCardPaymentMethod,\n  HostedPaymentMethod,\n  KlarnaPaymentMethod,\n  KlarnaV2PaymentMethod,\n  MolliePaymentMethod,\n  MonerisPaymentMethod,\n  OfflinePaymentMethod,\n  PayPalCommerceAPMsPaymentMethod,\n  PayPalCommerceCreditPaymentMethod,\n  PayPalCommerceCreditCardsPaymentMethod,\n  PayPalCommerceFastlanePaymentMethod,\n  PayPalCommercePaymentMethod,\n  PayPalCommerceVenmoPaymentMethod,\n  PaypalCommerceRatePayPaymentMethod,\n  PaypalExpressPaymentMethod,\n  PayPalPaymentsProPaymentMethod,\n  PPSDKPaymentMethod,\n  SquareV2PaymentMethod,\n  StripeOCSPaymentMethod,\n  StripeUPEPaymentMethod,\n  StripeV3PaymentMethod,\n  WorldpayCreditCardPaymentMethod,\n};\n\nimport { PaymentMethodId } from '@bigcommerce/checkout/payment-integration-api';\n\nexport const ComponentRegistry = {\n  'AdyenV2PaymentMethod': [\n    { \"gateway\": \"adyenv2\" }\n  ],\n  'AdyenV3PaymentMethod': [\n    { \"gateway\": \"adyenv3\" }\n  ],\n  'AffirmPaymentMethod': [\n    { \"id\": \"affirm\" }\n  ],\n  'AmazonPayV2PaymentMethod': [\n    { \"id\": \"amazonpay\" }\n  ],\n  'ApplePayPaymentMethod': [\n    { \"id\": \"applepay\" }\n  ],\n  'BarclaycardPaymentMethod': [\n    { \"gateway\": \"barclaycard\" }\n  ],\n  'BigCommercePaymentsAPMsPaymentMethod': [\n    { \"gateway\": \"bigcommerce_payments_apms\" }\n  ],\n  'BigCommercePaymentsCreditCardsPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_creditcards\" }\n  ],\n  'BigCommercePaymentsFastlanePaymentMethod': [\n    { \"id\": \"bigcommerce_payments_fastlane\" }\n  ],\n  'BigCommercePaymentsPayLaterPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_paylater\" }\n  ],\n  'BigCommercePaymentsPaymentMethod': [\n    { \"id\": \"bigcommerce_payments\" }\n  ],\n  'BigCommercePaymentsRatePayPaymentMethod': [\n    { \"gateway\": \"bigcommerce_payments_apms\", \"id\": \"ratepay\" }\n  ],\n  'BigCommercePaymentsVenmoPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_venmo\" }\n  ],\n  'BlueSnapDirectAlternativePaymentMethod': [\n    { \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectEcpPaymentMethod': [\n    { \"id\": \"ecp\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectIdealPaymentMethod': [\n    { \"id\": \"ideal\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectPayByBankPaymentMethod': [\n    { \"id\": \"pay_by_bank\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectSepaPaymentMethod': [\n    { \"id\": \"sepa_direct_debit\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapV2PaymentMethod': [\n    { \"gateway\": \"bluesnapv2\" }\n  ],\n  'BoltPaymentMethod': [\n    { \"id\": \"bolt\" }\n  ],\n  'BraintreeAchPaymentMethod': [\n    { \"id\": \"braintreeach\" }\n  ],\n  'BraintreeFastlanePaymentMethod': [\n    { \"id\": \"braintreeacceleratedcheckout\" }\n  ],\n  'BraintreeLocalPaymentMethod': [\n    { \"gateway\": \"braintreelocalmethods\" }\n  ],\n  'BraintreePaypalPaymentMethod': [\n    { \"id\": \"braintreepaypal\" }\n  ],\n  'BraintreeVenmoPaymentMethod': [\n    { \"id\": \"braintreevenmo\" }\n  ],\n  'CheckoutcomCustomPaymentMethod': [\n    { \"gateway\": \"checkoutcom\" }\n  ],\n  'ClearpayPaymentMethod': [\n    { \"gateway\": \"clearpay\" }\n  ],\n  'GooglePayPaymentMethod': [\n    { \"id\": PaymentMethodId.AdyenV2GooglePay },\n    { \"id\": PaymentMethodId.AdyenV3GooglePay },\n    { \"id\": PaymentMethodId.AuthorizeNetGooglePay },\n    { \"id\": PaymentMethodId.BNZGooglePay },\n    { \"id\": PaymentMethodId.BraintreeGooglePay },\n    { \"id\": PaymentMethodId.PayPalCommerceGooglePay },\n    { \"id\": PaymentMethodId.BigCommercePaymentsGooglePay },\n    { \"id\": PaymentMethodId.CheckoutcomGooglePay },\n    { \"id\": PaymentMethodId.CybersourceV2GooglePay },\n    { \"id\": PaymentMethodId.OrbitalGooglePay },\n    { \"id\": PaymentMethodId.StripeGooglePay },\n    { \"id\": PaymentMethodId.StripeUPEGooglePay },\n    { \"id\": PaymentMethodId.WorldpayAccessGooglePay },\n    { \"id\": PaymentMethodId.TdOnlineMartGooglePay },\n    { \"id\": PaymentMethodId.StripeOCSGooglePay }\n  ],\n  'HostedCreditCardPaymentMethod': [\n    { \"id\": \"hosted-credit-card\" },\n    { \"id\": \"credit_card\", \"gateway\": \"bluesnapdirect\" },\n    { \"id\": \"credit_card\", \"gateway\": \"checkoutcom\" },\n    { \"id\": \"tdonlinemart\" }\n  ],\n  'HostedPaymentMethod': [\n    { \"gateway\": \"afterpay\" },\n    { \"id\": \"quadpay\" },\n    { \"id\": \"sezzle\" },\n    { \"id\": \"zip\" }\n  ],\n  'KlarnaPaymentMethod': [\n    { \"id\": \"klarna\" }\n  ],\n  'KlarnaV2PaymentMethod': [\n    { \"gateway\": \"klarna\" }\n  ],\n  'MolliePaymentMethod': [\n    { \"gateway\": \"mollie\" },\n    { \"gateway\": \"mollie\", \"id\": \"applepay\" }\n  ],\n  'MonerisPaymentMethod': [\n    { \"id\": \"moneris\" }\n  ],\n  'OfflinePaymentMethod': [\n    { \"type\": \"PAYMENT_TYPE_OFFLINE\" }\n  ],\n  'PayPalCommerceAPMsPaymentMethod': [\n    { \"gateway\": \"paypalcommercealternativemethods\" }\n  ],\n  'PayPalCommerceCreditCardsPaymentMethod': [\n    { \"id\": \"paypalcommercecreditcards\" }\n  ],\n  'PayPalCommerceCreditPaymentMethod': [\n    { \"id\": \"paypalcommercecredit\" }\n  ],\n  'PayPalCommerceFastlanePaymentMethod': [\n    { \"id\": \"paypalcommerceacceleratedcheckout\" }\n  ],\n  'PayPalCommercePaymentMethod': [\n    { \"id\": \"paypalcommerce\" }\n  ],\n  'PaypalCommerceRatePayPaymentMethod': [\n    { \"gateway\": \"paypalcommercealternativemethods\", \"id\": \"ratepay\" }\n  ],\n  'PayPalCommerceVenmoPaymentMethod': [\n    { \"id\": \"paypalcommercevenmo\" }\n  ],\n  'PaypalExpressPaymentMethod': [\n    { \"id\": \"paypalexpress\" }\n  ],\n  'PayPalPaymentsProPaymentMethod': [\n    { \"id\": \"paypal\" }\n  ],\n  'PPSDKPaymentMethod': [\n    { \"type\": \"PAYMENT_TYPE_SDK\" }\n  ],\n  'SquareV2PaymentMethod': [\n    { \"id\": \"squarev2\" }\n  ],\n  'StripeOCSPaymentMethod': [\n    { \"gateway\": \"stripeocs\", \"id\": \"optimized_checkout\" }\n  ],\n  'StripeUPEPaymentMethod': [\n    { \"gateway\": \"stripeupe\" },\n    { \"gateway\": \"stripeupe\", \"id\": \"klarna\" }\n  ],\n  'StripeV3PaymentMethod': [\n    { \"gateway\": \"stripev3\" }\n  ],\n  'VisaCheckoutPaymentMethod': [\n    { \"id\": PaymentMethodId.BraintreeVisaCheckout }\n  ],\n  'WorldpayCreditCardPaymentMethod': [\n    { \"id\": \"worldpayaccess\" }\n  ]\n} as const;\n\n    \n","enum PaymentMethodProviderType {\n    Api = 'PAYMENT_TYPE_API',\n    Hosted = 'PAYMENT_TYPE_HOSTED',\n    Offline = 'PAYMENT_TYPE_OFFLINE',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n}\n\nexport default PaymentMethodProviderType;\n","import {\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type PaymentInitializeOptions,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, lazy, memo, Suspense } from 'react';\n\nimport { type CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nconst BraintreeCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-credit-card-payment-method\" */'./BraintreeCreditCardPaymentMethod'));\nconst HostedCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-credit-card-payment-method\" */'./HostedCreditCardPaymentMethod'));\nconst HostedPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-payment-method\" */'./HostedPaymentMethod'));\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError?(error: Error): void;\n    submitForm?(): void;\n}\n\nexport interface WithCheckoutPaymentMethodProps {\n    isInitializing: boolean;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n}\n\n/**\n * If possible, try to avoid having components that are specific to a specific\n * payment provider or method. Instead, try to generalise the requirements and\n * use components that can are reusable for multiple payment methods. i.e.:\n * CreditCardPaymentMethod, HostedPaymentMethod etc... If it is really necessary\n * for a particular payment method, you may write a method-specific component for\n * the purpose of configuring a general-purpose component in order to fulfill\n * its specific product or technical requirements.\n */\nconst PaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & WithCheckoutPaymentMethodProps\n> = (props) => {\n    const { method } = props;\n\n    if (method.id === PaymentMethodId.Braintree) {\n        return <Suspense><BraintreeCreditCardPaymentMethod {...props} /></Suspense>;\n    }\n\n    if (\n        method.id === PaymentMethodId.Humm ||\n        method.id === PaymentMethodId.Laybuy ||\n        method.method === PaymentMethodType.Paypal ||\n        method.method === PaymentMethodType.PaypalCredit ||\n        method.type === PaymentMethodProviderType.Hosted\n    ) {\n        return <Suspense><HostedPaymentMethod {...props} /></Suspense>;\n    }\n\n    // NOTE: Some payment methods have `method` as `credit-card` but they are\n    // actually not. Therefore, as a workaround, we are doing the following\n    // check last.\n    if (\n        method.method === PaymentMethodType.CreditCard ||\n        method.type === PaymentMethodProviderType.Api\n    ) {\n        return <Suspense><HostedCreditCardPaymentMethod {...props} /></Suspense>;\n    }\n\n    return null;\n};\n\nfunction mapToWithCheckoutPaymentMethodProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaymentMethodProps {\n    const {\n        statuses: { isInitializingPayment },\n    } = checkoutState;\n\n    return {\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        deinitializePayment: checkoutService.deinitializePayment,\n        initializeCustomer: checkoutService.initializeCustomer,\n        initializePayment: checkoutService.initializePayment,\n        isInitializing: isInitializingPayment(method.id),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutPaymentMethodProps)(memo(PaymentMethodComponent));\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ComponentType, Suspense } from 'react';\n\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { PaymentFormProvider, type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout, type WithCheckoutProps } from '../../checkout';\nimport { connectFormik, type WithFormikProps } from '../../common/form';\nimport { withForm, type WithFormProps } from '../../ui/form';\nimport createPaymentFormService from '../createPaymentFormService';\nimport resolvePaymentMethod from '../resolvePaymentMethod';\nimport withPayment, { type WithPaymentProps } from '../withPayment';\n\nimport { default as PaymentMethodV1 } from './PaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError(error: Error): void;\n}\n\nconst PaymentMethodContainer: ComponentType<\n    PaymentMethodProps &\n        WithCheckoutProps &\n        WithLanguageProps &\n        WithPaymentProps &\n        WithFormProps &\n        WithFormikProps<PaymentFormValues>\n> = ({\n    formik: formikContext,\n    checkoutService,\n    checkoutState,\n    disableSubmit,\n    hidePaymentSubmitButton,\n    isEmbedded,\n    isSubmitted,\n    isUsingMultiShipping,\n    language,\n    method,\n    onUnhandledError,\n    setSubmit,\n    setSubmitted,\n    setValidationSchema,\n}) => {\n    const formContext = {\n        isSubmitted,\n        setSubmitted,\n    };\n\n    const paymentContext = {\n        disableSubmit,\n        hidePaymentSubmitButton,\n        setSubmit,\n        setValidationSchema,\n    };\n\n    const ResolvedPaymentMethod = resolvePaymentMethod(\n        {\n            id: method.id,\n            gateway: method.gateway,\n            type: method.type,\n        },\n    );\n\n    if (!ResolvedPaymentMethod) {\n        return (\n            <PaymentMethodV1\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    const paymentForm = createPaymentFormService(formikContext, formContext, paymentContext);\n\n    return (\n        <PaymentFormProvider paymentForm={paymentForm}>\n            <Suspense>\n                <ResolvedPaymentMethod\n                    checkoutService={checkoutService}\n                    checkoutState={checkoutState}\n                    language={language}\n                    method={method}\n                    onUnhandledError={onUnhandledError}\n                    paymentForm={paymentForm}\n                />\n            </Suspense>\n        </PaymentFormProvider>\n    );\n};\n\nexport default withCheckout((props) => props)(\n    withLanguage(withPayment(withForm(connectFormik(PaymentMethodContainer)))),\n) as ComponentType<PaymentMethodProps>;\n","import { type ComponentType } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { resolveLazyComponent } from '../common/resolver';\nimport * as lazyPaymentMethods from '../generated/paymentIntegrations';\n\nexport default function resolvePaymentMethod(\n    query: PaymentMethodResolveId\n): ComponentType<PaymentMethodProps> | undefined {\n    const { ComponentRegistry, ...components } = lazyPaymentMethods;\n\n    return resolveLazyComponent<PaymentMethodResolveId, PaymentMethodProps>(\n        query, \n        components, \n        ComponentRegistry,\n    );\n}\n","import { type FormikContextType } from 'formik';\n\nimport {\n    type PaymentFormService,\n    type PaymentFormValues,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { type FormContextType } from '@bigcommerce/checkout/ui';\n\nimport { type PaymentContextProps } from './PaymentContext';\n\nexport default function createPaymentFormService(\n    formikContext: FormikContextType<PaymentFormValues>,\n    formContext: FormContextType,\n    paymentContext: PaymentContextProps,\n): PaymentFormService {\n    const {\n        setFieldTouched,\n        setFieldValue,\n        submitForm,\n        validateForm,\n        values,\n    } = formikContext;\n\n    const { isSubmitted, setSubmitted } = formContext;\n\n    const { disableSubmit, setSubmit, setValidationSchema, hidePaymentSubmitButton } =\n        paymentContext;\n\n    const getFieldValue = <T>(key: string): T | unknown => values[key];\n\n    return {\n        disableSubmit,\n        getFieldValue,\n        getFormValues: () => values,\n        hidePaymentSubmitButton,\n        isSubmitted: () => isSubmitted,\n        setFieldTouched: setFieldTouched as PaymentFormService['setFieldTouched'],\n        setFieldValue: setFieldValue as PaymentFormService['setFieldValue'],\n        setSubmit,\n        setSubmitted,\n        setValidationSchema,\n        submitForm,\n        validateForm,\n    };\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find, get, noop } from 'lodash';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport { isMobile } from '../../common/utility';\nimport { Checklist, ChecklistItem, CustomChecklistItem } from '../../ui/form';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport getUniquePaymentMethodId, { parseUniquePaymentMethodId } from './getUniquePaymentMethodId';\nimport PaymentMethodTitle, { getPaymentMethodTitle } from './PaymentMethodTitle';\nimport PaymentMethodV2 from './PaymentMethodV2';\n\nexport interface PaymentMethodListProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    onSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n}\n\nfunction getPaymentMethodFromListValue(methods: PaymentMethod[], value: string): PaymentMethod {\n    const { gatewayId: gateway, methodId: id } = parseUniquePaymentMethodId(value);\n    const method = gateway ? find(methods, { gateway, id }) : find(methods, { id });\n\n    if (!method) {\n        throw new Error(`Unable to find payment method with id: ${id}`);\n    }\n\n    return method;\n}\n\nconst PaymentMethodList: FunctionComponent<\n    PaymentMethodListProps & ConnectFormikProps<{ paymentProviderRadio?: string }>\n> = ({\n    formik: { values },\n    isEmbedded,\n    isInitializingPayment,\n    isUsingMultiShipping,\n    methods,\n    onSelect = noop,\n    onUnhandledError,\n}) => {\n    const { language } = useLocale();\n    const {\n        checkoutState: {\n            data: { getConfig }\n        }\n    } = useCheckout();\n\n    const config = getConfig();\n\n    const titleText = useMemo(() => {\n        if (config && values.paymentProviderRadio) {\n            const checkoutSettings = config.checkoutSettings;\n            const cdnBasePath = config.cdnPath;\n            const storeCountryCode = config.storeProfile.storeCountryCode;\n            const paymentMethod = getPaymentMethodFromListValue(methods, values.paymentProviderRadio);\n            const methodName = getPaymentMethodName(language)(paymentMethod);\n            const { titleText } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(paymentMethod);\n\n            return titleText || methodName;\n        }\n\n        return '';\n    }, [config, values.paymentProviderRadio])\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelect(getPaymentMethodFromListValue(methods, value));\n        },\n        [methods, onSelect],\n    );\n\n    return (\n        <>\n            <div aria-live=\"assertive\" className='is-srOnly' role=\"status\">{titleText}</div>\n            <Checklist\n                defaultSelectedItemId={values.paymentProviderRadio}\n                isDisabled={isInitializingPayment}\n                name=\"paymentProviderRadio\"\n                onSelect={handleSelect}\n            >\n                {methods.map((method) => {\n                    const value = getUniquePaymentMethodId(method.id, method.gateway);\n                    const showOnlyOnMobileDevices = get(\n                        method,\n                        'initializationData.showOnlyOnMobileDevices',\n                        false,\n                    );\n\n                    if (showOnlyOnMobileDevices && !isMobile()) {\n                        return;\n                    }\n\n                    return (\n                        <PaymentMethodListItem\n                            isDisabled={isInitializingPayment}\n                            isEmbedded={isEmbedded}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            key={value}\n                            method={method}\n                            onUnhandledError={onUnhandledError}\n                            value={value}\n                        />\n                    );\n                })}\n            </Checklist>\n        </>\n    );\n};\n\ninterface PaymentMethodListItemProps {\n    isDisabled?: boolean;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    value: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentMethodListItem: FunctionComponent<PaymentMethodListItemProps> = ({\n    isDisabled,\n    isEmbedded,\n    isUsingMultiShipping,\n    method,\n    onUnhandledError,\n    value,\n}) => {\n    const renderPaymentMethod = useMemo(() => {\n        return (\n            <PaymentMethodV2\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError || noop}\n            />\n        );\n    }, [isEmbedded, isUsingMultiShipping, method, onUnhandledError]);\n\n    const renderPaymentMethodTitle = useCallback(\n        (isSelected: boolean) => <PaymentMethodTitle isSelected={isSelected} method={method} onUnhandledError={onUnhandledError} />,\n        [method],\n    );\n\n    if (method.initializationData?.isCustomChecklistItem) {\n        return (\n            <CustomChecklistItem\n                content={renderPaymentMethod}\n                htmlId={`radio-${value}`}\n            />\n        );\n    }\n\n    return (\n        <ChecklistItem\n            content={renderPaymentMethod}\n            htmlId={`radio-${value}`}\n            isDisabled={isDisabled}\n            label={renderPaymentMethodTitle}\n            value={value}\n        />\n    );\n};\n\nexport default connectFormik(memo(PaymentMethodList));\n","export default function isMobile(): boolean {\n    return /Android|iPhone|iPad|iPod/i.test(window.navigator.userAgent);\n}\n","import React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { mapToRedeemableProps, Redeemable, type RedeemableProps } from '../cart';\nimport { withCheckout } from '../checkout';\nimport { Fieldset, Legend } from '../ui/form';\n\nconst PaymentRedeemables: FunctionComponent<RedeemableProps> = (redeemableProps) => (\n    <Fieldset \n        additionalClassName=\"redeemable-payments\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.redeemable_payments_text\" />\n            </Legend>\n        }\n    >\n        <Redeemable {...redeemableProps} showAppliedRedeemables={true} />\n    </Fieldset>\n);\n\nexport default withCheckout(mapToRedeemableProps)(memo(PaymentRedeemables));\n","import React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { withCheckout } from '../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { IconBolt } from '../ui/icon';\n\nimport { PaymentMethodId, PaymentMethodType } from './paymentMethod';\n\ninterface PaymentSubmitButtonTextProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodType?: string;\n    methodName?: string;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\nconst providersWithCustomClasses = [PaymentMethodId.Bolt];\n\nconst PaymentSubmitButtonText: FunctionComponent<PaymentSubmitButtonTextProps> = memo(\n    ({\n        methodId,\n        methodName,\n        methodType,\n        methodGateway,\n        initialisationStrategyType,\n        brandName,\n        isComplete,\n        isPaymentDataRequired,\n    }) => {\n        if (!isPaymentDataRequired) {\n            return <TranslatedString id=\"payment.place_order_action\" />;\n        }\n\n        if (methodName && initialisationStrategyType === 'none') {\n            return <TranslatedString data={{ methodName }} id=\"payment.ppsdk_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.AmazonPay) {\n            return <TranslatedString id=\"payment.amazonpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Bolt) {\n            return (\n                <>\n                    <IconBolt additionalClassName=\"payment-submit-button-bolt-icon\" />\n                    <TranslatedString id=\"payment.place_order_action\" />\n                </>\n            );\n        }\n\n        if (methodGateway === PaymentMethodId.Barclaycard) {\n            return <TranslatedString id=\"payment.barclaycard_continue_action\" />;\n        }\n\n        if (methodGateway === PaymentMethodId.BlueSnapV2) {\n            return <TranslatedString id=\"payment.bluesnap_v2_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.VisaCheckout) {\n            return <TranslatedString id=\"payment.visa_checkout_continue_action\" />;\n        }\n\n        if (\n            methodType === PaymentMethodType.PaypalVenmo ||\n            methodId === PaymentMethodId.BraintreeVenmo\n        ) {\n            return <TranslatedString id=\"payment.paypal_venmo_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.Paypal) {\n            const continueActionId = methodId === PaymentMethodId.PaypalCommerce\n                ? 'payment.place_order_action'\n                : 'payment.paypal_continue_action';\n\n            return <TranslatedString\n                data={{ isComplete }}\n                id={isComplete ? 'payment.paypal_complete_action' : continueActionId}\n            />;\n        }\n\n        if (methodType === PaymentMethodType.PaypalCredit) {\n            const continueTranslationId = brandName\n                ? 'payment.continue_with_brand'\n                : 'payment.paypal_pay_later_continue_action'\n            const completeTranslationId = brandName\n                ? 'payment.complete_with_brand'\n                : 'payment.paypal_pay_later_complete_action'\n\n            return (\n                <TranslatedString\n                    data={{ brandName, isComplete, continueTranslationId, completeTranslationId }}\n                    id={\n                        isComplete\n                            ? completeTranslationId\n                            : continueTranslationId\n                    }\n                />\n            );\n        }\n\n        if (methodId === PaymentMethodId.Quadpay) {\n            return <TranslatedString id=\"payment.quadpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Zip) {\n            return <TranslatedString id=\"payment.zip_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Klarna) {\n            return <TranslatedString id=\"payment.klarna_continue_action\" />;\n        }\n\n        return <TranslatedString id=\"payment.place_order_action\" />;\n    },\n);\n\nexport interface PaymentSubmitButtonProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodName?: string;\n    methodType?: string;\n    isDisabled?: boolean;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\ninterface WithCheckoutPaymentSubmitButtonProps {\n    isInitializing?: boolean;\n    isSubmitting?: boolean;\n}\n\nconst PaymentSubmitButton: FunctionComponent<\n    PaymentSubmitButtonProps & WithCheckoutPaymentSubmitButtonProps\n> = ({\n    isDisabled,\n    isInitializing,\n    isSubmitting,\n    isPaymentDataRequired,\n    methodGateway,\n    methodId,\n    methodName,\n    methodType,\n    initialisationStrategyType,\n    brandName,\n    isComplete,\n}) => (\n    <Button\n        className={\n            providersWithCustomClasses.includes(methodId as PaymentMethodId)\n                ? `payment-submit-button-${methodId}`\n                : undefined\n        }\n        data-test=\"payment-submit-button\"\n        disabled={isInitializing || isSubmitting || isDisabled}\n        id=\"checkout-payment-continue\"\n        isFullWidth\n        isLoading={isSubmitting}\n        size={ButtonSize.Large}\n        type=\"submit\"\n        variant={ButtonVariant.Action}\n    >\n        <PaymentSubmitButtonText\n            brandName={brandName}\n            initialisationStrategyType={initialisationStrategyType}\n            isComplete={isComplete}\n            isPaymentDataRequired={isPaymentDataRequired}\n            methodGateway={methodGateway}\n            methodId={methodId}\n            methodName={methodName}\n            methodType={methodType}\n        />\n    </Button>\n);\n\nexport default withCheckout(({ checkoutState }) => {\n    const {\n        data: { isPaymentDataRequired },\n        statuses: { isInitializingCustomer, isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    return {\n        isInitializing: isInitializingCustomer() || isInitializingPayment(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isSubmitting: isSubmittingOrder(),\n    };\n})(memo(PaymentSubmitButton));\n","import React, { type MouseEvent, useEffect, useState } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isErrorWithType } from '../common/error';\n\n\ninterface SpamProtectionFieldProps {\n    didExceedSpamLimit?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\nconst SpamProtectionField = ({\n    didExceedSpamLimit,\n    onUnhandledError\n}: SpamProtectionFieldProps): JSX.Element => {\n    const [shouldShowRetryButton, setShouldShowRetryButton] = useState(false);\n\n    const {\n        checkoutService: { executeSpamCheck },\n        checkoutState: { statuses }\n    } = useCheckout();\n\n    const isExecutingSpamCheck = statuses.isExecutingSpamCheck();\n\n    const verify: () => void = async () => {\n        try {\n            await executeSpamCheck();\n        } catch (error) {\n            setShouldShowRetryButton(true);\n\n            // Notify the parent component if the user experiences a problem other than cancelling the reCaptcha challenge.\n            if (isErrorWithType(error) && error.type !== 'spam_protection_challenge_not_completed' && onUnhandledError) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (didExceedSpamLimit) {\n            return;\n        }\n\n        verify();\n    }, []);\n\n    const handleRetry = (event: MouseEvent) => {\n        event.preventDefault();\n\n        verify();\n    };\n\n    return (\n        <div className=\"spamProtection-container\">\n            <LoadingOverlay isLoading={isExecutingSpamCheck}>\n                {(didExceedSpamLimit || shouldShowRetryButton) && (\n                    <div className=\"spamProtection-panel optimizedCheckout-overlay\">\n                        <a\n                            className=\"spamProtection-panel-message optimizedCheckout-primaryContent\"\n                            data-test=\"spam-protection-verify-button\"\n                            onClick={handleRetry}\n                        >\n                            <TranslatedString id=\"spam_protection.verify_action\" />\n                        </a>\n                    </div>\n                )}\n            </LoadingOverlay >\n        </div >\n    );\n};\n\nexport default SpamProtectionField;\n","import { noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withCurrency, type WithCurrencyProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { CheckboxInput } from '../../ui/form';\nimport { Tooltip, TooltipTrigger } from '../../ui/tooltip';\n\nexport interface StoreCreditFieldProps {\n    availableStoreCredit: number;\n    name: string;\n    usableStoreCredit: number;\n    isStoreCreditApplied: boolean;\n    onChange?(value: boolean): void;\n}\n\nconst StoreCreditField: FunctionComponent<StoreCreditFieldProps & WithCurrencyProps> = ({\n    availableStoreCredit,\n    currency,\n    name,\n    onChange = noop,\n    usableStoreCredit,\n    isStoreCreditApplied,\n}) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n\n    const handleChange = useCallback((event: any) => onChange(event.target.checked), [onChange]);\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"redeemable.apply_store_credit_before_action\" />{' '}\n                <TooltipTrigger\n                    placement=\"top-start\"\n                    tooltip={\n                        <Tooltip testId=\"payment-store-credit-tooltip\">\n                            <TranslatedString\n                                data={{\n                                    storeCredit: currency.toCustomerCurrency(availableStoreCredit),\n                                }}\n                                id=\"redeemable.store_credit_available_text\"\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <a href=\"#\" onClick={preventDefault()}>\n                        {currency.toCustomerCurrency(usableStoreCredit)}\n                    </a>\n                </TooltipTrigger>{' '}\n                <TranslatedString id=\"redeemable.apply_store_credit_after_action\" />\n            </>\n        ),\n        [availableStoreCredit, currency, usableStoreCredit],\n    );\n\n    return (\n        <CheckboxInput\n            checked={isStoreCreditApplied}\n            disabled={isSubmittingOrder()}\n            id={name}\n            label={labelContent}\n            name={name}\n            onChange={handleChange}\n            value={name}\n        />\n    );\n};\n\nexport default withCurrency(StoreCreditField);\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst StoreCreditOverlay: FunctionComponent = () => (\n    <div className=\"storeCreditOverlay\" data-test=\"payment-store-credit-overlay\">\n        <p className=\"storeCreditOverlay-text\">\n            <TranslatedString id=\"payment.payment_not_required_text\" />\n        </p>\n    </div>\n);\n\nexport default StoreCreditOverlay;\n","import { ExtensionRegion, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { type FormikProps, type FormikState, withFormik, type WithFormikConfig } from 'formik';\nimport { isNil, noop, omitBy } from 'lodash';\nimport React, { type FunctionComponent, memo, useCallback, useContext, useMemo } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { TermsConditions } from '../termsConditions';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getPaymentValidationSchema from './getPaymentValidationSchema';\nimport {\n    getPaymentMethodName,\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodList,\n} from './paymentMethod';\nimport PaymentRedeemables from './PaymentRedeemables';\nimport PaymentSubmitButton from './PaymentSubmitButton';\nimport SpamProtectionField from './SpamProtectionField';\nimport { StoreCreditField, StoreCreditOverlay } from './storeCredit';\n\nexport interface PaymentFormProps {\n    availableStoreCredit?: number;\n    defaultGatewayId?: string;\n    defaultMethodId: string;\n    didExceedSpamLimit?: boolean;\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isTermsConditionsRequired?: boolean;\n    isUsingMultiShipping?: boolean;\n    isStoreCreditApplied: boolean;\n    methods: PaymentMethod[];\n    selectedMethod?: PaymentMethod;\n    shouldShowStoreCredit?: boolean;\n    shouldDisableSubmit?: boolean;\n    shouldHidePaymentSubmitButton?: boolean;\n    shouldExecuteSpamCheck?: boolean;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit?: number;\n    validationSchema?: ObjectSchema<Partial<PaymentFormValues>>;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onStoreCreditChange?(useStoreCredit?: boolean): void;\n    onSubmit?(values: PaymentFormValues): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentForm: FunctionComponent<\n    PaymentFormProps & FormikProps<PaymentFormValues> & WithLanguageProps\n> = ({\n    availableStoreCredit = 0,\n    didExceedSpamLimit,\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isTermsConditionsRequired,\n    isStoreCreditApplied,\n    isUsingMultiShipping,\n    language,\n    methods,\n    onMethodSelect,\n    onStoreCreditChange,\n    onUnhandledError,\n    resetForm,\n    selectedMethod,\n    shouldDisableSubmit,\n    shouldHidePaymentSubmitButton,\n    shouldExecuteSpamCheck,\n    termsConditionsText = '',\n    termsConditionsUrl,\n    usableStoreCredit = 0,\n    values,\n}) => {\n    const selectedMethodId = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        switch (selectedMethod.id) {\n            case PaymentMethodId.AmazonPay:\n                if (selectedMethod.initializationData.paymentToken) {\n                    return;\n                }\n\n                return selectedMethod.id;\n\n            default:\n                return selectedMethod.id;\n        }\n    }, [selectedMethod]);\n\n    const brandName = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        return (\n            selectedMethod.initializationData?.payPalCreditProductBrandName?.credit ||\n            selectedMethod.initializationData?.payPalCreditProductBrandName\n        );\n    }, [selectedMethod]);\n\n    if (shouldExecuteSpamCheck) {\n        return (\n            <SpamProtectionField\n                didExceedSpamLimit={didExceedSpamLimit}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    return (\n        <Form className=\"checkout-form\" testId=\"payment-form\">\n            {usableStoreCredit > 0 && (\n                <StoreCreditField\n                    availableStoreCredit={availableStoreCredit}\n                    isStoreCreditApplied={isStoreCreditApplied}\n                    name=\"useStoreCredit\"\n                    onChange={onStoreCreditChange}\n                    usableStoreCredit={usableStoreCredit}\n                />\n            )}\n\n            <PaymentMethodListFieldset\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isPaymentDataRequired={isPaymentDataRequired}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onMethodSelect={onMethodSelect}\n                onUnhandledError={onUnhandledError}\n                resetForm={resetForm}\n                values={values}\n            />\n\n            <PaymentRedeemables />\n\n            {isTermsConditionsRequired && (\n                <TermsConditions\n                    termsConditionsText={termsConditionsText}\n                    termsConditionsUrl={termsConditionsUrl}\n                />\n            )}\n\n            <div className=\"form-actions\">\n                {shouldHidePaymentSubmitButton ? (\n                    <PaymentMethodSubmitButtonContainer />\n                ) : (\n                    <PaymentSubmitButton\n                        brandName={brandName}\n                        initialisationStrategyType={\n                            selectedMethod && selectedMethod.initializationStrategy?.type\n                        }\n                        isComplete={!!selectedMethod?.initializationData?.isComplete}\n                        isDisabled={shouldDisableSubmit}\n                        methodGateway={selectedMethod && selectedMethod.gateway}\n                        methodId={selectedMethodId}\n                        methodName={\n                            selectedMethod && getPaymentMethodName(language)(selectedMethod)\n                        }\n                        methodType={selectedMethod && selectedMethod.method}\n                    />\n                )}\n            </div>\n        </Form>\n    );\n};\n\nconst PaymentMethodSubmitButtonContainer: FunctionComponent = () => {\n    return <div className=\"submitButtonContainer\" id=\"checkout-payment-continue\" />;\n};\n\ninterface PaymentMethodListFieldsetProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    values: PaymentFormValues;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n    resetForm(nextValues?: Partial<FormikState<PaymentFormValues>>): void;\n}\n\nconst PaymentMethodListFieldset: FunctionComponent<PaymentMethodListFieldsetProps> = ({\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isUsingMultiShipping,\n    methods,\n    onMethodSelect = noop,\n    onUnhandledError,\n    resetForm,\n    values,\n}) => {\n    const { setSubmitted } = useContext(FormContext);\n\n    const handlePaymentMethodSelect = useCallback(\n        (method: PaymentMethod) => {\n            const updatedValues = {\n                ...values,\n                ccCustomerCode: '',\n                ccCvv: '',\n                ccDocument: '',\n                customerEmail: '',\n                customerMobile: '',\n                ccExpiry: '',\n                ccName: '',\n                ccNumber: '',\n                instrumentId: '',\n                paymentProviderRadio: getUniquePaymentMethodId(method.id, method.gateway),\n                shouldCreateAccount: true,\n                shouldSaveInstrument: false,\n            };\n\n            resetForm({ values: updatedValues });\n            setSubmitted(false);\n            onMethodSelect(method);\n        },\n        [values, onMethodSelect, resetForm, setSubmitted],\n    );\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.payment_methods_text\" />\n                </Legend>\n            }\n        >\n            {!isPaymentDataRequired() && <StoreCreditOverlay />}\n\n            <Extension region={ExtensionRegion.PaymentPaymentMethodListBefore}/>\n\n            <PaymentMethodList\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onSelect={handlePaymentMethodSelect}\n                onUnhandledError={onUnhandledError}\n            />\n        </Fieldset>\n    );\n};\n\nconst paymentFormConfig: WithFormikConfig<PaymentFormProps & WithLanguageProps, PaymentFormValues> =\n    {\n        mapPropsToValues: ({ defaultGatewayId, defaultMethodId }) => ({\n            ccCustomerCode: '',\n            ccCvv: '',\n            ccDocument: '',\n            customerEmail: '',\n            customerMobile: '',\n            ccExpiry: '',\n            ccName: '',\n            ccNumber: '',\n            paymentProviderRadio: getUniquePaymentMethodId(defaultMethodId, defaultGatewayId),\n            instrumentId: '',\n            shouldCreateAccount: true,\n            shouldSaveInstrument: false,\n            terms: false,\n            hostedForm: {\n                cardType: '',\n                errors: {\n                    cardCode: '',\n                    cardCodeVerification: '',\n                    cardExpiry: '',\n                    cardName: '',\n                    cardNumber: '',\n                    cardNumberVerification: '',\n                },\n            },\n            accountNumber: '',\n            routingNumber: '',\n        }),\n\n        handleSubmit: (values, { props: { onSubmit = noop } }) => {\n            onSubmit(\n                omitBy(\n                    values,\n                    (value, key) => isNil(value) || value === '' || key === 'hostedForm',\n                ),\n            );\n        },\n\n        validationSchema: ({\n            language,\n            isTermsConditionsRequired = false,\n            validationSchema,\n        }: PaymentFormProps & WithLanguageProps) =>\n            getPaymentValidationSchema({\n                additionalValidation: validationSchema,\n                isTermsConditionsRequired,\n                language,\n            }),\n    };\n\nexport default withLanguage(withFormik(paymentFormConfig)(memo(PaymentForm)));\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactElement } from 'react';\n\nimport { ErrorModal, type ErrorModalOnCloseProps } from '../../common/error';\n\nexport interface EmbeddedSupportErrorModalProps {\n    methods: PaymentMethod[];\n    checkEmbeddedSupport(methodIds: string[]): void;\n    onClose(event: Event, props: ErrorModalOnCloseProps): void;\n}\n\nexport const EmbeddedSupportErrorModal = ({\n    methods,\n    checkEmbeddedSupport,\n    onClose,\n}: EmbeddedSupportErrorModalProps): ReactElement | null => {\n    try {\n        checkEmbeddedSupport(methods.map(({ id }) => id));\n    } catch (error) {\n        if (error instanceof Error) {\n            return <ErrorModal error={error} onClose={onClose} />;\n        }\n    }\n\n    return null;\n};\n\n","import { type TranslationData } from '@bigcommerce/checkout-sdk';\nimport { includes } from 'lodash';\n\nexport default function mapSubmitOrderErrorMessage(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n    shouldLocalise: boolean,\n): string {\n    switch (error.type) {\n        case 'not_initialized':\n            return translate('payment.payment_error');\n\n        case 'custom_provider_execute_error':\n            return translate(error.subtype);\n\n        case 'payment_cancelled':\n            return translate('payment.payment_cancelled');\n\n        case 'payment_method_invalid':\n            return translate('payment.payment_method_disabled_error');\n\n        case 'tax_provider_unavailable':\n            return translate('payment.tax_provider_unavailable');\n\n        case 'cart_changed':\n            return translate('shipping.cart_change_error');\n\n        case 'cart_consistency':\n            return translate('cart.consistency_error');\n        \n        case 'empty_cart':\n            return translate('cart.empty_cart_error_message');\n\n        default:\n            if (\n                includes(\n                    [\n                        'order_could_not_be_finalized_error',\n                        'provider_fatal_error',\n                        'payment_invalid',\n                        'provider_error',\n                        'provider_widget_error',\n                        'user_payment_error',\n                    ],\n                    error.body && error.body.type,\n                )\n            ) {\n                return translate('payment.payment_method_error', { message: error.message });\n            }\n\n            if (shouldLocalise && error.body && error.body.errors && error.body.errors.length) {\n                const messages = error.body.errors.map((err: { code: any }) =>\n                    translate(`payment.errors.${err.code}`),\n                );\n\n                return messages.join(' ');\n            }\n\n            if (error.message) {\n                return error.message;\n            }\n\n            return error.type === 'unrecoverable'\n                ? translate('common.unavailable_error')\n                : translate('payment.place_order_error');\n    }\n}\n\nexport function mapSubmitOrderErrorTitle(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n): string {\n    if (error.type === 'unrecoverable') {\n        return translate('common.unavailable_heading');\n    }\n\n    if (error.type === 'missing_shipping_method') {\n        return translate('common.missing_shipping_method_heading');\n    }\n\n    if (error.type === 'invalid_shipping_address') {\n        return translate('common.invalid_shipping_address');\n    }\n\n    return translate('common.error_heading');\n}\n","import type { LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactElement } from 'react';\n\nimport {\n    ErrorModal,\n    type ErrorModalOnCloseProps,\n} from '../../common/error';\nimport mapSubmitOrderErrorMessage, { mapSubmitOrderErrorTitle } from '../mapSubmitOrderErrorMessage';\n\nexport interface OrderErrorModalProps {\n    submitOrderError: Error | undefined;\n    finalizeOrderError: Error | undefined;\n    language: LanguageService;\n    onClose(event: Event, props: ErrorModalOnCloseProps): void;\n}\n\nexport const OrderErrorModal = ({\n    submitOrderError,\n    finalizeOrderError,\n    language,\n    onClose,\n}: OrderErrorModalProps): ReactElement | null => {\n    const error = submitOrderError || finalizeOrderError;\n\n    if (!error || ('type' in error &&(\n        error.type === 'order_finalization_not_required' ||\n        error.type === 'payment_cancelled' ||\n        error.type === 'payment_invalid_form' ||\n        error.type === 'spam_protection_not_completed' ||\n        error.type === 'invalid_hosted_form_value'\n    ))) {\n        return null;\n    }\n\n    return (\n        <ErrorModal\n            error={error}\n            message={mapSubmitOrderErrorMessage(\n                error,\n                language.translate.bind(language),\n                true,\n            )}\n            onClose={onClose}\n            title={mapSubmitOrderErrorTitle(error, language.translate.bind(language))}\n        />\n    );\n};\n\n","import { default as Payment } from './Payment';\n\nexport default Payment;\n","import {\n    type CartChangedError,\n    type CheckoutSettings,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { isEmpty, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { useAnalytics } from '@bigcommerce/checkout/analytics';\nimport { type ErrorLogger } from '@bigcommerce/checkout/error-handling-utils';\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { type PaymentFormValues, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport {\n    type ErrorModalOnCloseProps,\n    isCartChangedError,\n    isErrorWithType,\n} from '../../common/error';\nimport { TermsConditionsType } from '../../termsConditions';\nimport mapToOrderRequestBody from '../mapToOrderRequestBody';\nimport PaymentContext from '../PaymentContext';\nimport PaymentForm from '../PaymentForm';\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodProviderType,\n} from '../paymentMethod';\n\nimport { EmbeddedSupportErrorModal } from './EmbeddedSupportErrorModa';\nimport { getDefaultPaymentMethodAndFilteredMethods } from './getDefaultPaymentMethodAndFilteredMethods';\nimport { OrderErrorModal } from './OrderErrorModal';\n\ninterface PaymentProps {\n    errorLogger: ErrorLogger;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onCartChangedError?(error: CartChangedError): void;\n    onFinalize?(orderId?: number): void;\n    onFinalizeError?(error: Error): void;\n    onReady?(): void;\n    onSubmit?(orderId?: number): void;\n    onSubmitError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst Payment = (\n    {\n        errorLogger,\n        onFinalize = noop,\n        onFinalizeError = noop,\n        onReady = noop,\n        isEmbedded,\n        isUsingMultiShipping,\n        onCartChangedError = noop,\n        onSubmit = noop,\n        onSubmitError = noop,\n        onUnhandledError = noop,\n        checkEmbeddedSupport = noop,\n    }: PaymentProps,\n): ReactNode => {\n    const [didExceedSpamLimit, setDidExceedSpamLimit] = useState(false);\n    const [isReady, setIsReady] = useState(false);\n    const [selectedMethod, setSelectedMethodState] = useState<PaymentMethod | undefined>();\n    const [shouldDisableSubmit, setShouldDisableSubmit] = useState<Record<string, boolean>>({});\n    const [shouldHidePaymentSubmitButton, setShouldHidePaymentSubmitButton] = useState<Record<string, boolean>>({});\n    const [submitFunctions, setSubmitFunctions] = useState<Record<string, ((values: PaymentFormValues) => void) | null>>({});\n    const [validationSchemas, setValidationSchemas] = useState<Record<string, ObjectSchema<Partial<PaymentFormValues>> | null>>({});\n\n    const componentDidMountRef = useRef(false);\n    const grandTotalChangeUnsubscribeRef = useRef<(() => void) | undefined>();\n\n    const { checkoutState, checkoutService } = useCheckout();\n    const { analyticsTracker } = useAnalytics();\n    const { language } = useLocale();\n\n    const {\n        data: {\n            getCheckout,\n            getCustomer,\n            getConfig,\n            isPaymentDataRequired,\n            getPaymentMethod,\n            getPaymentMethods,\n            getConsignments,\n            getPaymentProviderCustomer,\n            getOrder,\n        },\n        errors: { getFinalizeOrderError,  getSubmitOrderError },\n        statuses: { isInitializingPayment: getIsInitializingPayment, isSubmittingOrder: getIsSubmittingOrder },\n    } = checkoutState;\n    const {\n        clearError,\n        finalizeOrderIfNeeded,\n        loadCheckout,\n        loadPaymentMethods,\n        submitOrder,\n        subscribe: checkoutServiceSubscribe,\n    } = checkoutService;\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n    const consignments = getConsignments();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const { isComplete = false } = getOrder() || {};\n\n    if (!checkout || !customer || !config || !consignments) {\n        throw new Error('Checkout data is not available');\n    }\n\n    const paymentMethods = getPaymentMethods();\n    const { defaultMethod, methods } = useMemo(()=>getDefaultPaymentMethodAndFilteredMethods(\n        checkout,\n        consignments,\n        paymentProviderCustomer,\n        getPaymentMethod,\n        paymentMethods,\n    ),[paymentMethods, paymentProviderCustomer]);\n\n    const { isStoreCreditApplied, shouldExecuteSpamCheck } = checkout;\n    const applyStoreCredit = checkoutService.applyStoreCredit;\n    const availableStoreCredit = customer.storeCredit;\n    const cartUrl = config.links.cartLink;\n    const finalizeOrderError = getFinalizeOrderError();\n    const isInitializingPayment = getIsInitializingPayment();\n    const isSubmittingOrder = getIsSubmittingOrder();\n    const {\n        enableTermsAndConditions,\n        orderTermsAndConditions,\n        orderTermsAndConditionsType: termsConditionsType,\n        orderTermsAndConditionsLink: termsCondtitionsUrl,\n    } = config.checkoutSettings as CheckoutSettings & { orderTermsAndConditionsLocation: string };\n    const isTermsConditionsRequired = enableTermsAndConditions;\n    const submitOrderError = getSubmitOrderError();\n    const termsConditionsText =\n        isTermsConditionsRequired && termsConditionsType === TermsConditionsType.TextArea\n            ? orderTermsAndConditions\n            : undefined;\n    const termsConditionsUrl =\n        isTermsConditionsRequired && termsConditionsType === TermsConditionsType.Link\n            ? termsCondtitionsUrl\n            : undefined;\n    const usableStoreCredit =\n        checkout.grandTotal > 0 ? Math.min(checkout.grandTotal, customer.storeCredit || 0) : 0;\n\n    const trackSelectedPaymentMethod = useCallback((method: PaymentMethod) => {\n        const methodName = method.config.displayName || method.id;\n\n        analyticsTracker.selectedPaymentMethod(methodName, method.id);\n    }, []);\n\n    const loadPaymentMethodsOrThrow = useCallback(async () => {\n        try {\n            await loadPaymentMethods();\n\n            const method = selectedMethod || defaultMethod;\n\n            if (method) {\n                trackSelectedPaymentMethod(method);\n            }\n        } catch (error) {\n            onUnhandledError(error as Error);\n        }\n    }, [defaultMethod, selectedMethod]);\n\n    const handleCartTotalChange = useCallback(async () => {\n        if (!isReady) {\n            return;\n        }\n\n        setIsReady(false);\n        await loadPaymentMethodsOrThrow();\n        setIsReady(true);\n    }, [isReady]);\n\n    const handleStoreCreditChange = useCallback(async (useStoreCredit: boolean) => {\n        try {\n            await applyStoreCredit(useStoreCredit);\n        } catch (e) {\n            onUnhandledError(e as Error);\n        }\n    }, []);\n\n    const handleError = useCallback((error: Error) => {\n        const { type } = error as any;\n\n        if (type === 'unexpected_detachment') {\n            errorLogger.log(error);\n\n            return;\n        }\n\n        onUnhandledError(error);\n    }, []);\n\n    const setSelectedMethod = useCallback((method?: PaymentMethod) => {\n        if (selectedMethod === method) {\n            return;\n        }\n\n        if (method) {\n            trackSelectedPaymentMethod(method);\n        }\n\n        setSelectedMethodState(method);\n    }, [selectedMethod]);\n\n    const setSubmit = useCallback((method: PaymentMethod, fn: (values: PaymentFormValues) => void | null) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n\n        setSubmitFunctions(prev => {\n            if (prev[uniqueId] === fn) {\n                return prev;\n            }\n\n            return { ...prev, [uniqueId]: fn };\n        });\n    }, []);\n\n    const setValidationSchema = useCallback((method: PaymentMethod, schema: ObjectSchema<Partial<PaymentFormValues>> | null) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n\n        setValidationSchemas(prev => {\n            if (prev[uniqueId] === schema) {\n                return prev;\n            }\n\n            return { ...prev, [uniqueId]: schema };\n        });\n    }, []);\n\n    const disableSubmit = useCallback((method: PaymentMethod, disabled = true) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n\n        setShouldDisableSubmit(prev => {\n            if (prev[uniqueId] === disabled) {\n                return prev;\n            }\n\n            return { ...prev, [uniqueId]: disabled };\n        });\n    }, []);\n\n    const hidePaymentSubmitButton = useCallback((method: PaymentMethod, disabled = true) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n\n        setShouldHidePaymentSubmitButton(prev => {\n            if (prev[uniqueId] === disabled) {\n                return prev;\n            }\n\n            return { ...prev, [uniqueId]: disabled };\n        });\n    }, []);\n\n    const handleBeforeUnload = useCallback((event: BeforeUnloadEvent) => {\n        const currentSelected = selectedMethod || defaultMethod;\n\n        if (!isSubmittingOrder || !currentSelected ||\n            currentSelected.type === PaymentMethodProviderType.Hosted ||\n            currentSelected.type === PaymentMethodProviderType.PPSDK ||\n            currentSelected.skipRedirectConfirmationAlert) {\n            return;\n        }\n\n        const message = language.translate('common.leave_warning');\n\n        event.returnValue = message;\n\n        return message;\n    }, [defaultMethod, selectedMethod, isSubmittingOrder]);\n\n    const handleSubmit = useCallback(async (values: PaymentFormValues) => {\n        const method = selectedMethod || defaultMethod;\n\n        analyticsTracker.clickPayButton({ shouldCreateAccount: values.shouldCreateAccount });\n\n        const customSubmit = method && submitFunctions[getUniquePaymentMethodId(method.id, method.gateway)];\n\n        if (customSubmit) {\n            return customSubmit(values);\n        }\n\n        try {\n            const state = await submitOrder(mapToOrderRequestBody(values, isPaymentDataRequired()));\n            const order = state.data.getOrder();\n\n            analyticsTracker.paymentComplete();\n            onSubmit(order?.orderId);\n        } catch (error) {\n            analyticsTracker.paymentRejected();\n\n            if (isErrorWithType(error) && error.type === 'payment_method_invalid') {\n                return loadPaymentMethods();\n            }\n\n            if (isCartChangedError(error)) {\n                return onCartChangedError(error);\n            }\n\n            onSubmitError(error as Error);\n        }\n    }, [defaultMethod, selectedMethod]);\n\n    const handleCloseModal = useCallback(async (_: Event, { error }: ErrorModalOnCloseProps) => {\n        if (!error) {\n            return;\n        }\n\n        const { type: errorType } = error as any;\n\n        if (errorType === 'provider_fatal_error' || errorType === 'order_could_not_be_finalized_error') {\n            window.location.replace(cartUrl || '/');\n        }\n\n        if (errorType === 'tax_provider_unavailable') {\n            window.location.reload();\n        }\n\n        if (errorType === 'cart_consistency') {\n            await loadCheckout();\n        }\n\n        if (isErrorWithType(error) && error.body) {\n            const { body, headers, status } = error;\n\n            if (body.type === 'provider_error' && headers.location) {\n                window.top?.location.assign(headers.location);\n            }\n\n            if (status === 429 || body.type === 'spam_protection_expired' || body.type === 'spam_protection_failed') {\n                setDidExceedSpamLimit(true);\n                await loadCheckout();\n            }\n        }\n\n        void clearError(error);\n    }, []);\n\n    const paymentContextValue = useMemo(() => ({\n        disableSubmit,\n        setSubmit,\n        setValidationSchema,\n        hidePaymentSubmitButton,\n    }), [disableSubmit, setSubmit, setValidationSchema, hidePaymentSubmitButton]);\n    const uniqueSelectedMethodId = selectedMethod && getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway);\n\n    useEffect(() => {\n        (async () => {\n            if (usableStoreCredit) {\n                await handleStoreCreditChange(true);\n            }\n\n            await loadPaymentMethodsOrThrow();\n\n            try {\n                const state = await finalizeOrderIfNeeded();\n                const order = state.data.getOrder();\n\n                onFinalize(order?.orderId);\n            } catch (error) {\n                if (isErrorWithType(error) && (error as any).type !== 'order_finalization_not_required') {\n                    onFinalizeError(error as Error);\n                }\n            }\n\n            grandTotalChangeUnsubscribeRef.current = checkoutServiceSubscribe(\n                () => handleCartTotalChange(),\n                ({ data }) => data.getCheckout()?.grandTotal,\n                ({ data }) => data.getCheckout()?.outstandingBalance,\n            );\n            window.addEventListener('beforeunload', handleBeforeUnload);\n            setIsReady(true);\n            onReady();\n        })();\n\n        return () => {\n            if (grandTotalChangeUnsubscribeRef.current) {\n                grandTotalChangeUnsubscribeRef.current();\n                grandTotalChangeUnsubscribeRef.current = undefined;\n            }\n\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!componentDidMountRef.current) {\n            componentDidMountRef.current = true;\n\n            return;\n        }\n\n        checkEmbeddedSupport(methods.map(({ id }) => id));\n    }, [methods]);\n\n    if (isComplete) {\n        return null;\n    }\n\n    return (\n        <PaymentContext.Provider value={paymentContextValue}>\n            <ChecklistSkeleton isLoading={!isReady}>\n                {!isEmpty(methods) && defaultMethod && (\n                    <PaymentForm\n                        availableStoreCredit={availableStoreCredit}\n                        defaultGatewayId={defaultMethod.gateway}\n                        defaultMethodId={defaultMethod.id}\n                        didExceedSpamLimit={didExceedSpamLimit}\n                        isEmbedded={isEmbedded}\n                        isInitializingPayment={isInitializingPayment}\n                        isPaymentDataRequired={isPaymentDataRequired}\n                        isStoreCreditApplied = {isStoreCreditApplied}\n                        isTermsConditionsRequired={isTermsConditionsRequired}\n                        isUsingMultiShipping={isUsingMultiShipping}\n                        methods={methods}\n                        onMethodSelect={setSelectedMethod}\n                        onStoreCreditChange={handleStoreCreditChange}\n                        onSubmit={handleSubmit}\n                        onUnhandledError={handleError}\n                        selectedMethod={selectedMethod}\n                        shouldDisableSubmit={(uniqueSelectedMethodId && shouldDisableSubmit[uniqueSelectedMethodId]) || undefined}\n                        shouldExecuteSpamCheck = {shouldExecuteSpamCheck}\n                        shouldHidePaymentSubmitButton={(uniqueSelectedMethodId && isPaymentDataRequired() && shouldHidePaymentSubmitButton[uniqueSelectedMethodId]) || undefined}\n                        termsConditionsText={termsConditionsText}\n                        termsConditionsUrl={termsConditionsUrl}\n                        usableStoreCredit={usableStoreCredit}\n                        validationSchema={(uniqueSelectedMethodId && validationSchemas[uniqueSelectedMethodId]) || undefined}\n                    />\n                )}\n            </ChecklistSkeleton>\n\n            <OrderErrorModal\n                finalizeOrderError={finalizeOrderError}\n                language={language}\n                onClose={handleCloseModal}\n                submitOrderError={submitOrderError}\n            />\n\n            <EmbeddedSupportErrorModal\n                checkEmbeddedSupport={checkEmbeddedSupport}\n                methods={methods}\n                onClose={handleCloseModal}\n            />\n        </PaymentContext.Provider>\n    );\n};\n\nexport default Payment;\n","import type {\n  Checkout,\n  Consignment,\n  PaymentMethod,\n  PaymentProviderCustomer,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, find } from 'lodash';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { PaymentMethodId, PaymentMethodProviderType } from '../paymentMethod';\n\nexport const getDefaultPaymentMethodAndFilteredMethods = (\n    checkout: Checkout,\n    consignments: Consignment[],\n    paymentProviderCustomer: PaymentProviderCustomer | undefined,\n    getPaymentMethod: (providerId: string, gatewayId?: string) => PaymentMethod | undefined,\n    paymentMethods?: PaymentMethod[],\n): {\n    defaultMethod?: PaymentMethod;\n    methods: PaymentMethod[];\n} => {\n    if (!paymentMethods) {\n        return {\n            methods: EMPTY_ARRAY,\n        }\n    }\n\n    let methods = paymentMethods;\n\n    if (paymentProviderCustomer?.stripeLinkAuthenticationState) {\n        const stripeUpePaymentMethod = methods.filter(method =>\n            method.id === 'card' && method.gateway === PaymentMethodId.StripeUPE\n        );\n\n        methods = stripeUpePaymentMethod.length ? stripeUpePaymentMethod : methods;\n    }\n\n    const selectedPayment = find(checkout.payments, {\n        providerType: PaymentMethodProviderType.Hosted,\n    });\n\n    let selectedPaymentMethod;\n    let filteredMethods;\n\n    filteredMethods = methods.filter((method: PaymentMethod) => {\n        if (method.id === PaymentMethodId.Bolt && method.initializationData) {\n            return Boolean(method.initializationData.showInCheckout);\n        }\n\n        return method.id !== PaymentMethodId.BraintreeLocalPaymentMethod;\n    });\n\n    if (consignments && consignments.length > 1) {\n        const multiShippingIncompatibleMethodIds: string[] = [\n            PaymentMethodId.AmazonPay,\n        ];\n\n        filteredMethods = methods.filter((method: PaymentMethod) => {\n            return !multiShippingIncompatibleMethodIds.includes(method.id);\n        });\n    }\n\n    if (selectedPayment) {\n        selectedPaymentMethod = getPaymentMethod(\n            selectedPayment.providerId,\n            selectedPayment.gatewayId,\n        );\n        filteredMethods = selectedPaymentMethod\n            ? compact([selectedPaymentMethod])\n            : filteredMethods;\n    } else {\n        selectedPaymentMethod = find(filteredMethods, {\n            config: { hasDefaultStoredInstrument: true },\n        });\n    }\n\n    return {\n        defaultMethod: selectedPaymentMethod || filteredMethods[0],\n        methods: filteredMethods,\n    };\n}\n","import { type OrderPaymentRequestBody, type OrderRequestBody } from '@bigcommerce/checkout-sdk';\nimport { isEmpty, isNil, omitBy } from 'lodash';\n\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { unformatCreditCardExpiryDate, unformatCreditCardNumber } from './creditCard';\nimport {\n    hasCreditCardExpiry,\n    hasCreditCardNumber,\n    parseUniquePaymentMethodId,\n} from './paymentMethod';\n\nexport default function mapToOrderRequestBody(\n    values: PaymentFormValues,\n    isPaymentDataRequired: boolean,\n): OrderRequestBody {\n    if (!isPaymentDataRequired) {\n        return {};\n    }\n\n    const { paymentProviderRadio, ...rest } = values;\n    const { methodId, gatewayId } = parseUniquePaymentMethodId(paymentProviderRadio);\n    const payload: OrderRequestBody = {\n        payment: { gatewayId, methodId },\n    };\n    const paymentData = omitBy(\n        {\n            ...rest,\n            ccExpiry: hasCreditCardExpiry(values)\n                ? unformatCreditCardExpiryDate(values.ccExpiry)\n                : null,\n            ccNumber: hasCreditCardNumber(values)\n                ? unformatCreditCardNumber(values.ccNumber)\n                : null,\n        },\n        isNil,\n    ) as OrderPaymentRequestBody['paymentData'];\n\n    if (payload.payment && !isEmpty(paymentData)) {\n        payload.payment.paymentData = paymentData;\n    }\n\n    return payload;\n}\n","import { type CartChangedError } from '@bigcommerce/checkout-sdk';\n\nexport default function isCartChangedError(error: unknown): error is CartChangedError {\n    const requestError = error as CartChangedError;\n\n    return requestError.type === 'cart_changed';\n}\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\n\nimport PaymentContext, { type PaymentContextProps } from './PaymentContext';\n\nexport type WithPaymentProps = PaymentContextProps;\n\nconst withPayment = createInjectHoc(PaymentContext, { displayNamePrefix: 'WithPayment' });\n\nexport default withPayment;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { type ReactNode, useState } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children?: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nconst Accordion = ({\n    children,\n    className = 'accordion',\n    defaultSelectedItemId,\n    isDisabled,\n    onSelect = noop,\n}: AccordionProps) => {\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\n\n    const handleToggleItem: (id: string) => void = (id) => {\n        if (isDisabled) {\n            return;\n        }\n\n        setSelectedItemId(id);\n        onSelect(id);\n    };\n\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\n        return {\n            onToggle: handleToggleItem,\n            selectedItemId: newSelectedItemId,\n        };\n    });\n\n    return (\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\n            <ul className={className}>{children}</ul>\n        </AccordionContext.Provider>\n    );\n};\n\nexport default Accordion;\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    type FunctionComponent,\n    memo,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useMemo,\n} from 'react';\n\nimport { Accordion } from '@bigcommerce/checkout/ui';\n\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\n\nexport interface ChecklistProps {\n    children?: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    useEffect(() => {\n        return () => {\n            setFieldValue(name, '');\n        };\n    }, []);\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { connect } from 'formik';\nimport React, { type ComponentType, type FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport type ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import React, { type FunctionComponent, memo, Suspense } from 'react';\n\nimport { getPaymentMethodIconComponent } from './mapFromPaymentMethodCardType';\nimport { IconSize } from './withIconContainer';\n\nexport interface CreditCardIconProps {\n    cardType?: string;\n}\n\nconst CreditCardIcon: FunctionComponent<CreditCardIconProps> = ({ cardType }) => {\n    const iconProps = {\n        additionalClassName: 'cardIcon-icon',\n        size: IconSize.Medium,\n        testId: `credit-card-icon-${cardType || 'default'}`,\n    };\n\n    const IconComponent = getPaymentMethodIconComponent(cardType);\n\n    return IconComponent ? (\n        <Suspense>\n            <IconComponent {...iconProps} />\n        </Suspense>\n    ) : (\n        <div className=\"cardIcon-icon cardIcon-icon--default icon icon--medium\" />\n    );\n};\n\nexport default memo(CreditCardIcon);\n","import React, {\n    type KeyboardEvent,\n    type KeyboardEventHandler,\n    type MouseEventHandler,\n    type ReactElement,\n    type ReactNode,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler<HTMLDivElement> }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nconst ModalTrigger = ({ children, modal }: ModalTriggerProps): ReactElement => {\n    const [isOpen, setIsOpen] = useState(false);\n    const canHandleEventRef = useRef(false);\n\n    useEffect(() => {\n        canHandleEventRef.current = true;\n\n        return () => {\n            canHandleEventRef.current = false;\n        };\n    }, []);\n\n    const handleOpen = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(true);\n    };\n\n    const handleClose = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(false);\n    };\n\n    const handleKeyOpen = (keyboardEvent: KeyboardEvent<HTMLElement>): void => {\n        if (keyboardEvent.key === 'Enter') {\n            handleOpen();\n        }\n    };\n\n    return (\n        <>\n            {children({\n                onClick: handleOpen,\n                onKeyPress: handleKeyOpen,\n            })}\n\n            {modal({\n                isOpen,\n                onRequestClose: handleClose,\n            })}\n        </>\n    );\n};\n\nexport default ModalTrigger;\n","import { type ComponentType, lazy } from 'react';\n\nimport { type IconProps } from './';\n\ninterface InstrumentComponent {\n    instrument: string;\n    component: ComponentType<IconProps>;\n}\n\nconst instrumentTypeMap: Record<string, InstrumentComponent> = {\n    AMEX: {\n        instrument: 'american-express',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-amex\" */ './IconCardAmex')),\n    },\n    BITCOIN: {\n        instrument: 'bitcoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-bitcoin\" */ './IconBitCoin')),\n    },\n    BITCOIN_CASH: {\n        instrument: 'bitcoin-cash',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-bitcoin-cash\" */ './IconBitCoinCash'),\n        ),\n    },\n    BANCONTACT: {\n        instrument: 'bancontact',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-bancontact\" */ './IconCardBancontact'),\n        ),\n    },\n    CARNET: {\n        instrument: 'carnet',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-carnet\" */ './IconCardCarnet'),\n        ),\n    },\n    CB: {\n        instrument: 'cb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-cb\" */ './IconCardCB')),\n    },\n    DINERS: {\n        instrument: 'diners-club',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-diners-club\" */ './IconCardDinersClub'),\n        ),\n    },\n    DANKORT: {\n        instrument: 'dankort',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-dankort\" */ './IconCardDankort'),\n        ),\n    },\n    DISCOVER: {\n        instrument: 'discover',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-discover\" */ './IconCardDiscover'),\n        ),\n    },\n    DOGECOIN: {\n        instrument: 'dogecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-dogecoin\" */ './IconDogeCoin')),\n    },\n    ELECTRON: {\n        instrument: 'electron',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-electron\" */ './IconCardElectron'),\n        ),\n    },\n    ELO: {\n        instrument: 'elo',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-elo\" */ './IconCardElo')),\n    },\n    ETHEREUM: {\n        instrument: 'ethereum',\n        component: lazy(() => import(/* webpackChunkName: \"icon-ethereum\" */ './IconEthereum')),\n    },\n    HIPER: {\n        instrument: 'hiper',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-hipercard\" */ './IconCardHipercard'),\n        ),\n    },\n    JCB: {\n        instrument: 'jcb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-jcb\" */ './IconCardJCB')),\n    },\n    LITECOIN: {\n        instrument: 'litecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-litecoin\" */ './IconLiteCoin')),\n    },\n    MADA: {\n        instrument: 'mada',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-mada\" */ './IconCardMada')),\n    },\n    MAESTRO: {\n        instrument: 'maestro',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-maestro\" */ './IconCardMaestro'),\n        ),\n    },\n    MC: {\n        instrument: 'mastercard',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-mastercard\" */ './IconCardMastercard'),\n        ),\n    },\n    SHIBA_INU: {\n        instrument: 'shiba-inu',\n        component: lazy(() => import(/* webpackChunkName: \"icon-shiba-inu\" */ './IconShibaInu')),\n    },\n    TROY: {\n        instrument: 'troy',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-troy\" */ './IconCardTroy')),\n    },\n    CUP: {\n        instrument: 'unionpay',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-unionpay\" */ './IconCardUnionPay'),\n        ),\n    },\n    USD_COIN: {\n        instrument: 'usd-coin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-usd-coin\" */ './IconUsdCoin')),\n    },\n    VISA: {\n        instrument: 'visa',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-visa\" */ './IconCardVisa')),\n    },\n};\n\nexport default function mapFromPaymentMethodCardType(type: string): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return instrumentTypeMap[type]?.instrument || undefined;\n}\n\nexport function getPaymentMethodIconComponent(type?: string): ComponentType<IconProps> | undefined {\n    if (!type) {\n        return undefined;\n    }\n\n    const instrumentType = Object.values(instrumentTypeMap).find(\n        (record) => record.instrument === type,\n    );\n\n    return instrumentType ? instrumentType.component : undefined;\n}\n\nfunction getSupportedInstrumentTypes() {\n    return Object.values(instrumentTypeMap).map((record) => record.instrument);\n}\n\nexport function filterInstrumentTypes(instrumentTypes: string[]) {\n    const supportedInstrumentTypes = getSupportedInstrumentTypes();\n\n    return instrumentTypes.filter((type) => supportedInstrumentTypes.includes(type));\n}\n"],"names":["memo","bodyClassName","children","className","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","onToggle","selectedItemId","useContext","AccordionContext","A","isSelected","transitionEndListener","useCallback","node","done","addEventListener","target","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","id","props","Input","checked","type","Label","htmlFor","isDisabled","value","content","htmlId","kebabCase","label","rest","name","Checklist","C","renderInput","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","render","placement","tooltip","shouldShow","setShouldShow","useState","handleShow","handleHide","ref","onBlur","onFocus","onMouseEnter","onMouseLeave","modifiers","enabled","style","coupon","displayName","TranslatedString","code","giftCertificate","ShopperCurrency","amount","used","remaining","height","viewBox","width","xmlns","d","isRemoving","onRemove","onClick","AppliedCouponChecklistItem","onRemoved","handleRemove","AppliedGiftCertificateChecklistItem","coupons","giftCertificates","isRemovingCoupon","isRemovingGiftCertificate","onRemovedCoupon","onRemovedGiftCertificate","length","map","key","RedeemableForm","appliedRedeemableError","isApplyingRedeemable","clearError","noop","submitForm","language","checkoutState","statuses","isSubmittingOrder","themeV2","handleSubmitForm","setSubmitted","handleKeyDown","event","keyCode","preventDefault","handleSubmit","renderLabel","hidden","renderErrorMessage","errorCode","errorMessage","errors","Alert","Error","message","TextInput","translate","onKeyDown","testId","Button","isLoading","variant","Secondary","renderContent","FormField","input","withLanguage","mapPropsToValues","redeemableCode","applyCoupon","applyGiftCertificate","trim","error","validationSchema","required","shouldCollapseCouponCode","showAppliedRedeemables","formProps","Toggle","openByDefault","toggle","isOpen","href","createContext","undefined","unformatCreditCardNumber","separator","card","number","replace","RegExp","displayNamePrefix","mapToRedeemableProps","context","checkoutService","data","getConfig","getCoupons","getGiftCertificates","isApplyingCoupon","isApplyingGiftCertificate","getApplyCouponError","getApplyGiftCertificateError","getRemoveCouponError","getRemoveGiftCertificateError","config","removeCoupon","removeGiftCertificate","removedRedeemableError","checkoutSettings","isCouponCodeCollapsed","PaymentFormContext","usePaymentFormContext","forwardRef","additionalClassName","isFloatingLabelEnabled","body","header","renderModal","Modal","additionalBodyClassName","footer","onRequestClose","size","Small","shouldShowCloseButton","ModalTrigger","modal","split","line","Fragment","TermsConditionsType","TermsConditionsModalCheckboxField","terms","translatedLabel","url","parsedLabel","parseAnchor","labelContent","ModalHeader","CheckboxFormField","TermsConditionsCheckboxField","useMemo","TranslatedHtml","TermsConditionsTextField","defaultValue","readOnly","Fieldset","legend","Legend","TextArea","isTermsConditionsTextArea","isTermsConditionModal","unformatCreditCardExpiryDate","month","year","test","slice","getUniquePaymentMethodId","methodId","gatewayId","compact","join","parseUniquePaymentMethodId","includes","hasCreditCardNumber","values","Object","hasCreditCardExpiry","TermsConditions","termsConditionsUrl","termsConditionsText","TermsConditionsField","Link","getPaymentValidationSchema","additionalValidation","isTermsConditionsRequired","schemaFields","paymentProviderRadio","schemaFieldsWithTerms","concat","oneOf","getTermsConditionsValidationSchema","PaymentMethodType","getPaymentMethodName","method","translations","PaymentMethodId","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","capitalize","get","onUnhandledError","useEffect","initializePayment","BigCommercePaymentsPayLater","bigcommerce_payments_paylater","bannerContainerId","deinitializePayment","containerId","braintree","selectedCardType","cardTypes","filteredCardTypes","CreditCardIcon","cardType","getPaymentMethodTitle","basePath","storeCountryCode","cdnPath","path","paymentWithLogo","initializationData","methodsWithLogo","methodName","methodDisplayName","isCreditCard","toLowerCase","PaypalCommerceCredit","BraintreePaypalCredit","payPalCreditProductBrandName","credit","AdyenV2","AdyenV3","getPaymentMethodDisplayName","customTitles","CreditCard","logoUrl","titleText","BraintreeVenmo","subtitle","BraintreeAch","BraintreeLocalPaymentMethod","BigCommercePaymentsPayPal","BigCommercePaymentsAlternativeMethod","PaypalCommerce","PaypalCommerceAlternativeMethod","isExperimentEnabled","ApplePay","PayWithGoogle","Humm","enableBillie","Laybuy","Masterpass","Quadpay","Sezzle","Zip","Barclaycard","Mollie","Checkoutcom","StripeV3","StripeUPE","WorldpayAccess","gateway","BlueSnapDirect","PaypalCommerceVenmo","BigCommercePaymentsVenmo","PaypalPaymentsPro","Ratepay","connectFormik","withCheckout","getInstruments","instruments","storeProfile","cdnBasePath","formik","alt","src","getSubtitle","supportedCards","mapFromPaymentMethodCardType","instrumentSelected","filter","instrument","provider","find","bigpayToken","instrumentId","getInstrumentForMethod","hostedForm","ccNumber","brand","getSelectedCardType","PaymentFormProvider","paymentForm","Provider","AdyenV2PaymentMethod","lazy","then","module","default","AdyenV3PaymentMethod","AffirmPaymentMethod","AmazonPayV2PaymentMethod","ApplePayPaymentMethod","BarclaycardPaymentMethod","BigCommercePaymentsPaymentMethod","BigCommercePaymentsAPMsPaymentMethod","BigCommercePaymentsCreditCardsPaymentMethod","BigCommercePaymentsFastlanePaymentMethod","BigCommercePaymentsPayLaterPaymentMethod","BigCommercePaymentsVenmoPaymentMethod","BigCommercePaymentsRatePayPaymentMethod","BlueSnapDirectEcpPaymentMethod","BlueSnapDirectAlternativePaymentMethod","BlueSnapDirectSepaPaymentMethod","BlueSnapDirectIdealPaymentMethod","BlueSnapV2PaymentMethod","BlueSnapDirectPayByBankPaymentMethod","BoltClientPaymentMethod","BoltEmbeddedPaymentMethod","BoltPaymentMethod","BraintreeAchPaymentMethod","BraintreeFastlanePaymentMethod","BraintreePaypalPaymentMethod","VisaCheckoutPaymentMethod","BraintreeVenmoPaymentMethod","CheckoutcomCustomPaymentMethod","ClearpayPaymentMethod","GooglePayPaymentMethod","HostedCreditCardPaymentMethod","HostedPaymentMethod","KlarnaPaymentMethod","KlarnaV2PaymentMethod","MolliePaymentMethod","MonerisPaymentMethod","OfflinePaymentMethod","PayPalCommerceAPMsPaymentMethod","PayPalCommerceCreditPaymentMethod","PayPalCommerceCreditCardsPaymentMethod","PayPalCommerceFastlanePaymentMethod","PayPalCommercePaymentMethod","PayPalCommerceVenmoPaymentMethod","PaypalCommerceRatePayPaymentMethod","PaypalExpressPaymentMethod","PayPalPaymentsProPaymentMethod","PPSDKPaymentMethod","SquareV2PaymentMethod","StripeOCSPaymentMethod","StripeUPEPaymentMethod","StripeV3PaymentMethod","WorldpayCreditCardPaymentMethod","ComponentRegistry","AdyenV2GooglePay","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","BigCommercePaymentsGooglePay","CheckoutcomGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","StripeGooglePay","StripeUPEGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay","BraintreeVisaCheckout","PaymentMethodProviderType","BraintreeCreditCardPaymentMethod","isInitializingPayment","deinitializeCustomer","initializeCustomer","isInitializing","Braintree","Suspense","Hosted","Api","withPayment","withForm","formikContext","disableSubmit","hidePaymentSubmitButton","isEmbedded","isSubmitted","isUsingMultiShipping","setSubmit","setValidationSchema","formContext","paymentContext","ResolvedPaymentMethod","query","components","resolveLazyComponent","resolvePaymentMethod","PaymentMethod","setFieldTouched","setFieldValue","validateForm","getFieldValue","getFormValues","createPaymentFormService","getPaymentMethodFromListValue","methods","PaymentMethodListItem","renderPaymentMethod","PaymentMethodV2","renderPaymentMethodTitle","isCustomChecklistItem","ChecklistItem","onSelect","paymentMethod","handleSelect","role","defaultSelectedItemId","window","navigator","userAgent","redeemableProps","Redeemable","providersWithCustomClasses","PaymentSubmitButtonText","methodType","methodGateway","initialisationStrategyType","brandName","isComplete","isPaymentDataRequired","IconBolt","BlueSnapV2","PaypalVenmo","continueActionId","continueTranslationId","completeTranslationId","isInitializingCustomer","isSubmitting","isFullWidth","Large","Action","didExceedSpamLimit","shouldShowRetryButton","setShouldShowRetryButton","executeSpamCheck","isExecutingSpamCheck","verify","isErrorWithType","LoadingOverlay","withCurrency","availableStoreCredit","currency","usableStoreCredit","isStoreCreditApplied","TooltipTrigger","Tooltip","storeCredit","toCustomerCurrency","CheckboxInput","PaymentMethodSubmitButtonContainer","PaymentMethodListFieldset","onMethodSelect","resetForm","FormContext","handlePaymentMethodSelect","updatedValues","ccCustomerCode","ccCvv","ccDocument","customerEmail","customerMobile","ccExpiry","ccName","shouldCreateAccount","shouldSaveInstrument","Extension","region","paymentFormConfig","defaultGatewayId","defaultMethodId","cardCode","cardCodeVerification","cardExpiry","cardName","cardNumber","cardNumberVerification","accountNumber","routingNumber","onSubmit","omitBy","isNil","onStoreCreditChange","selectedMethod","shouldDisableSubmit","shouldHidePaymentSubmitButton","shouldExecuteSpamCheck","selectedMethodId","paymentToken","Form","initializationStrategy","EmbeddedSupportErrorModal","checkEmbeddedSupport","onClose","ErrorModal","mapSubmitOrderErrorMessage","shouldLocalise","subtype","err","mapSubmitOrderErrorTitle","OrderErrorModal","submitOrderError","finalizeOrderError","bind","title","errorLogger","onFinalize","onFinalizeError","onReady","onCartChangedError","onSubmitError","setDidExceedSpamLimit","isReady","setIsReady","setSelectedMethodState","setShouldDisableSubmit","setShouldHidePaymentSubmitButton","submitFunctions","setSubmitFunctions","validationSchemas","setValidationSchemas","componentDidMountRef","useRef","grandTotalChangeUnsubscribeRef","analyticsTracker","useAnalytics","getCheckout","getCustomer","getPaymentMethod","getPaymentMethods","getConsignments","getPaymentProviderCustomer","getOrder","getFinalizeOrderError","getSubmitOrderError","getIsInitializingPayment","getIsSubmittingOrder","finalizeOrderIfNeeded","loadCheckout","loadPaymentMethods","submitOrder","subscribe","checkoutServiceSubscribe","checkout","customer","consignments","paymentProviderCustomer","paymentMethods","defaultMethod","stripeLinkAuthenticationState","stripeUpePaymentMethod","selectedPayment","payments","providerType","selectedPaymentMethod","filteredMethods","Boolean","showInCheckout","multiShippingIncompatibleMethodIds","providerId","hasDefaultStoredInstrument","getDefaultPaymentMethodAndFilteredMethods","applyStoreCredit","cartUrl","links","cartLink","enableTermsAndConditions","orderTermsAndConditions","orderTermsAndConditionsType","termsConditionsType","orderTermsAndConditionsLink","termsCondtitionsUrl","grandTotal","Math","min","trackSelectedPaymentMethod","loadPaymentMethodsOrThrow","handleCartTotalChange","handleStoreCreditChange","useStoreCredit","e","handleError","log","setSelectedMethod","fn","uniqueId","prev","schema","handleBeforeUnload","currentSelected","PPSDK","skipRedirectConfirmationAlert","returnValue","clickPayButton","customSubmit","state","payload","payment","paymentData","isEmpty","mapToOrderRequestBody","order","paymentComplete","orderId","paymentRejected","isCartChangedError","handleCloseModal","_","errorType","location","reload","headers","status","top","assign","paymentContextValue","uniqueSelectedMethodId","current","outstandingBalance","removeEventListener","PaymentContext","ChecklistSkeleton","setSelectedItemId","handleToggleItem","getContextValue","newSelectedItemId","ChecklistContext","contextValue","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","iconProps","Medium","IconComponent","setIsOpen","canHandleEventRef","handleOpen","onKeyPress","keyboardEvent","instrumentTypeMap","AMEX","component","BITCOIN","BITCOIN_CASH","BANCONTACT","CARNET","CB","DINERS","DANKORT","DISCOVER","DOGECOIN","ELECTRON","ELO","ETHEREUM","HIPER","JCB","LITECOIN","MADA","MAESTRO","MC","SHIBA_INU","TROY","CUP","USD_COIN","VISA","getPaymentMethodIconComponent","instrumentType","record","filterInstrumentTypes","instrumentTypes","supportedInstrumentTypes"],"sourceRoot":""}