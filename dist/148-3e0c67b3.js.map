{"version":3,"file":"148-3e0c67b3.js","mappings":"gKAQA,MAcA,EAd8C,I,IAAA,SAAEA,EAAQ,UAAEC,EAAS,OAAEC,EAAM,OAAEC,GAAM,EAAKC,GAAI,cAA9C,4CAAqD,OAC/F,yCACQA,EAAI,CACRH,UAAW,IACPA,GAAa,aACb,CAAE,YAAaC,GACf,gCACH,YACUC,IAEVH,G,iDCdT,MAMA,GAAe,E,QAAA,IANqB,IAChC,uBAAKK,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,mR,2FCKhB,MAoBA,GApBkB,IAAAC,aACd,CACI,EACAC,K,IADA,oBAAEC,EAAmB,cAAEC,EAAa,KAAEC,EAAO,QAAM,EAAKV,GAAI,cAA5D,gDAEC,OACD,gBAAC,IAAK,iBACEA,EAAI,CACRH,UAAW,IACP,aACA,+BACA,CAAE,oBAAqBY,GACvB,CAAE,sCAAuCA,GACzCD,GAEJD,IAAKA,EACLG,KAAMA,O,4HCJlB,MA6CA,GAAe,IAAAC,OA7C8C,EACzDC,gBAAgB,sBAChBhB,WACAC,YAAY,iBACZgB,oBAAoB,2BACpBC,kBAAkB,wBAClBC,0BAA0B,kCAC1BC,gBACAC,aAEA,MAAM,SAAEC,EAAQ,eAAEC,IAAmB,IAAAC,YAAWC,EAAAC,GAC1CC,EAAaJ,IAAmBF,EAEhCO,GAAwB,IAAAC,cAAY,CAACC,EAAYC,KACnDD,EAAKE,iBAAiB,iBAAiB,EAAGC,aAClCA,IAAWH,GACXC,SAGT,IAEH,OACI,sBAAI9B,UAAW,IAAWA,EAAW,CAAE,CAACgB,GAAoBU,KACxD,uBAAK1B,UAAW,IAAWiB,EAAiB,CAAE,CAACC,GAA0BQ,KACpEP,EAAc,CAAEO,aAAYL,cAGhCtB,EACG,gBAACkC,EAAA,EAAa,CACVC,eAAgBP,EAChBQ,WAAYpB,EACZqB,GAAIV,EACJW,cAAY,EACZC,QAAS,CAAC,EACVC,eAAa,GAEb,mCAAe,SAASvC,UAAWe,GAC9BhB,IAGT,S,gDCrDhB,MAmBA,EAnBwE,I,IAAA,GACpEyC,EAAE,WACFd,EAAU,SACV3B,GAAQ,EACL0C,GAAK,cAJ4D,gCAKlE,OACF,gCACI,gBAACC,EAAA,EAAK,iBACED,EAAK,CACTE,QAASjB,EACT1B,UAAU,oEACVwC,GAAIA,EACJ3B,KAAK,WAGT,gBAAC+B,EAAA,EAAK,CAACC,QAASL,GAAKzC,KCyD7B,GAAe,IAAAe,OA9D+C,I,IAAA,WAC1DgC,EAAU,MACVC,EAAK,QACLC,EAAO,OACPC,GAAS,IAAAC,WAAUH,GAAM,MACzBI,GAAK,EACFhD,GAAI,cANmD,mDAQ1D,MAAM,KAAEiD,EAAO,KAAO,IAAA7B,YAAW8B,EAAAC,IAAqB,CAAC,EAEjDC,GAAc,IAAA3B,cAChB,IAAA4B,aAAY9B,GAAwB,EAAG+B,WACnC,gBAAC,EAAkB,iBACXA,EAAK,CACTC,SAAUZ,EACVN,GAAIS,EACJvB,WAAY+B,EAAMV,QAAUA,EAC5BA,MAAOA,IAENI,aAAiBQ,SAAWR,EAAMzB,GAAcyB,KAGzD,CAACF,EAAQH,EAAYK,EAAOJ,IAG1Ba,GAAe,IAAAhC,cACjB,IAAA4B,aAAYnC,GAAoCwC,IACxCd,IAAUc,GACVxC,EAAS0B,MAGjB,IAGEe,GAAsB,IAAAlC,cACxB,EAAGF,aAAYL,cACX,gBAAC0C,EAAA,EAAc,CACX/D,UAAU,wBACVoD,KAAMA,EACNY,SAAUJ,EAAavC,GACvB4C,OAAQV,EAAY7B,MAG5B,CAACkC,EAAcR,EAAMG,IAGzB,OACI,gBAAC,EAAa,iBACNpD,EAAI,CACRY,cAAc,sBACdf,UAAU,4DACVgB,kBAAkB,gFAClBC,gBAAgB,wBAChBC,wBAAwB,kCACxBC,cAAe2C,EACf1C,OAAQ2B,IAEPC,K,6DCtEb,MAIA,GAJc,IAAAvC,aAAW,CAAC,EAAiCC,K,IAAjC,OAAER,GAAM,EAAKC,GAAI,cAAjB,YAAgE,OACtF,yCAAWA,EAAI,aAAaD,EAAQQ,IAAKA,O,0HCH7C,MAMA,GAAe,E,QAAA,IANsB,IACjC,uBAAKN,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,6GC+FhB,EA7E8C,I,IAAA,SAC1CT,EAAQ,iBACRmE,EAAmB,QAAO,OAC1BC,EAAM,OACNC,EAAM,0BACNC,EAAyB,wBACzBC,EAAuB,yBACvBC,EAAwB,eACxBC,EAAiB,EAAAC,KAAI,sBACrBC,GAAwB,GAAK,EAC1BvE,GAAI,cAVmC,6KAY1C,MAAMwE,GAAc,IAAA/C,cACfgD,IACGJ,EAAeI,KAEnB,CAACJ,IAGL,OACI,gBAAC,IAAU,iBACHrE,EAAI,CACR0E,aAAa,EACbC,kBAAkB,kBAClB9E,UAAW,CACP+E,KAAM,IACF,yCACAR,GAEJS,UAAW,mBACXC,YAAa,sBAEjBC,eAAgB,IAChBV,eAAgBA,EAChBW,iBAAkB,CACdJ,KAAM,eACNC,UAAW,0BACXC,YAAa,6BAEjBG,kBAAkB,EAClBC,2BAA2B,IAE3B,uBAAKrF,UAAW,IAAW,eAAgBqE,IACtCD,EAEAM,GACG,qBACI1E,UAAU,cAAa,YACb,qBACVsF,KAAK,IACLC,SAAS,EAAAC,EAAA,GAAeb,IAEvBc,QAAQvB,IACL,wBAAMlE,UAAU,aAAakE,GAGjC,gBAAC,EAAS,QAKtB,uBACIlE,UAAW,IAAW,aAAcsE,GAAwB,YAClD,cAETvE,GAGJ0F,QAAQtB,IACL,uBAAKnE,UAAU,eAAc,YAAW,gBACnCmE,I,gFCrFrB,MAkBA,GAlBiB,IAAA1D,aACb,CACI,EACAC,K,IADA,oBAAEC,EAAmB,SAAEZ,EAAQ,UAAEC,EAAS,OAAE0F,EAAM,OAAExF,GAAM,EAAKC,GAAI,cAAnE,kEAEC,OACD,4CACQA,EAAI,CACRH,UAAWA,GAAa,IAAW,gBAAiBW,GAAoB,YAC7DT,EACXQ,IAAKA,IAEJgF,EAED,uBAAK1F,UAAU,aAAaD,M,oGCTxC,MAwBA,GAxBmB,IAAAU,aACf,CACI,EACAC,K,IADA,oBAAEC,EAAmB,MAAEwC,EAAK,MAAEJ,EAAK,QAAEJ,EAAO,GAAEH,GAAE,EAAKrC,GAAI,cAAzD,wDAEC,OACD,gCACI,gBAAC,IAAK,iBACEA,EAAI,CACRwC,QAASA,EACT3C,UAAW,IACP,aACA,+BACAW,GAEJ6B,GAAIA,EACJ9B,IAAKA,EACLG,KAAK,QACLkC,MAAOA,KAEX,gBAAC,IAAK,CAACF,QAASL,GAAKW,M,uECrBjC,MA6BA,GAAe,IAAArC,OA7BgD,EAAGsC,OAAMlD,SAAQyF,cAC5E,MAAMC,GAAgB,IAAAhE,cACjBiE,GACG,sBAAI7F,UAAU,oBAAmB,YAAYE,GACzC,sBAAIF,UAAU,oBACV,qCACc,SACVA,UAAU,qBACV6C,QAASO,EACTZ,GAAImD,EACJG,KAAK,SAEJD,MAKjB,CAACF,EAASvC,EAAMlD,IAGpB,OACI,gBAAC,KAAY6F,SAAQ,MAChB,EAAGC,iBACAA,GAAe,gBAAC,KAAY,CAAC5C,KAAMA,EAAMa,OAAQ2B,Q,4FCfjE,MA6CA,GAAe,IAAA9E,OA7CsC,EACjDH,sBACAsF,eACA9C,QACAa,WACAG,SACA+B,QACA9C,OACAZ,SAEA,MAAM2D,GAAc,IAAAvE,cACfa,GACG,gCACKgD,QAAQtC,KAA4B,mBAAVA,EAAuBA,EAAMC,GAAQD,GAE/DsC,QAAQQ,IAAiB9C,IACtB,gBAAC,IAAK,CAACN,QAASO,EAAMZ,GAAI,GAAGA,QAAAA,EAAMY,WAC9B6C,GAIRC,EAAMzD,GAEP,gBAAC,IAAc,CACXkD,QAAS,GAAGnD,QAAAA,EAAMY,wBAClBA,KAAMA,EACNlD,OAAQ,IAAG,IAAAgD,WAAUE,2BAGxBe,IAGT,CAAChB,EAAO8C,EAAczD,EAAI0D,EAAO9C,EAAMe,IAG3C,OACI,gBAAC,IAAc,CACXxD,oBAAqBA,EACrByC,KAAMA,EACNY,SAAUA,EACVC,OAAQkC,M,kDCnDpB,MAEA,GAFyB,E,SAAAC,eAAqC,CAAE/E,SAAU,EAAAoD,M,kBCR1E,IAAK4B,E,iBAAL,SAAKA,GACD,kBACA,sBACA,kBACA,sBACA,sBACA,wBACA,cACA,gBACA,aACH,CAVD,CAAKA,IAAAA,EAAoB,KAYzB,S,mJCEA,MAkDA,GAAe,IAAAvF,OAlD4D,EACvEZ,SACAoG,gBACAC,qBAEA,MAAMC,GAAuB,IAAA5E,cACxBgD,IACGA,EAAMY,iBACNc,MAEJ,CAACA,IAGCG,GAAwB,IAAA7E,cACzBgD,IACGA,EAAMY,iBACNe,MAEJ,CAACA,IAGL,OACI,sBAAIvG,UAAU,2BACV,sBAAIA,UAAU,0BACV,gBAAC0G,EAAA,EAAgB,CAAClE,GAAG,oBAGzB,sBAAIxC,UAAU,0BACV,iCACe,GAAGE,GAAU,wBACxBoF,KAAK,IACLC,QAASiB,GAET,gBAACE,EAAA,EAAgB,CAAClE,GAAG,yBAI7B,sBAAIxC,UAAU,0BACV,iCACe,GAAGE,GAAU,yBACxBoF,KAAK,IACLC,QAASkB,GAET,gBAACC,EAAA,EAAgB,CAAClE,GAAG,8BChCnCmE,EAAyE,EAC3EC,MAAQC,SAAQC,UAChBtE,KACAW,QACAC,OACAY,WAAW,EAAAS,KACXsC,UACAC,OACAC,aAEA,MAAMC,GAAkB,IAAAtF,cAAY,KAEhC,MAAMuF,GAA0B,QAAMN,EAAQzD,IAAS,IAEvD,IAAAgE,YACIL,EAAQM,KAAI,EAAGtE,WAAYA,IAC3BoE,GACFG,SAASC,GAAQP,EAAKO,KAExBvD,GAAS,QAAM6C,EAAQzD,MACxB,CAACA,EAAMY,EAAU+C,EAASC,EAAMH,IAE7BW,GAAmB,IAAA5F,cAAY,OAED,QAAMiF,EAAQzD,IAAS,IAEzCkE,SAAQ,IAAML,EAAO,KAEnCjD,GAAS,QAAM6C,EAAQzD,MACxB,CAACA,EAAMY,EAAUiD,EAAQJ,IAEtBY,GAAoB,IAAA7F,cACrBgD,IAEG,MAAMuC,GAA0B,QAAMN,EAAQzD,IAAS,IACjD,MAAEL,EAAK,QAAEJ,GAAYiC,EAAM5C,OAE7BW,EACAqE,EAAKjE,GAELkE,EAAOE,EAAcO,QAAQ3E,IAGjCiB,GAAS,QAAM6C,EAAQzD,MAE3B,CAACA,EAAMY,EAAUgD,EAAMC,EAAQJ,IAGnC,OAEI,gBAACc,EAAA,EAAkB,CAACC,UAAU,QAAMd,EAAQ1D,KAAS,QAAM0D,EAAQ1D,GAAMyE,QACpE1E,EAEA4D,EAAQc,OAAS,GACd,gBAAC,EAAoB,CACjBvB,cAAeY,EACfX,eAAgBiB,EAChBtH,OAAQsC,IAIhB,gBAACsF,EAAA,EAAY,CACTC,UAAW1B,EAAA,EAAqB2B,SAChCxF,GAAIA,EACJY,KAAMA,EACNY,SAAUyD,EACVV,QAASA,EAEThE,OAAO,QAAM8D,EAAQzD,IAAS,KAGlC,gBAAC6E,EAAA,E,CAEGtC,QAAS,GAAGnD,QAAAA,EAAMY,wBAClBA,KAAMA,EACNlD,OAAQ,IAAG,IAAAgD,WAAUE,6BA8BrC,GAAe,IAAAtC,OAxBgE,EAC3E0B,KACAW,QACAC,OACAY,WACA+C,cAEA,MAAMZ,GAAc,IAAAvE,cACfsG,GACG,gBAACvB,EAAsB,eACnBnE,GAAIA,EACJW,MAAOA,EACPC,KAAMA,EACNY,SAAUA,EACV+C,QAASA,IACL,IAAAoB,MAAKD,EAAa,CAAC,OAAQ,MAAO,OAAQ,cAGtD,CAAC1F,EAAIW,EAAOC,EAAMY,EAAU+C,IAGhC,OAAO,gBAAC,KAAU,CAAC3D,KAAMA,EAAMa,OAAQkC,OCc3C,GAAe,IAAArF,OA/GoD,EAC/D2C,OACIsE,YACAlH,OACAuH,SACAhF,OACAD,MAAOkF,EACPC,WACAvB,UACAwB,MACAC,MACAC,YACAC,mBAEJC,kBACA3E,WACA4E,cACAC,UACAC,eACA3F,QACA4F,iBAEA,MAAMC,EAAeH,GAAWzF,EAC1B6F,EAAYN,EAAkB,GAAGA,KAAmBvF,IAASA,EAE7D8F,GAAiB,IAAAC,UACnB,IACI,gBAACvG,EAAA,EAAK,CAACC,QAASmG,EAAcxG,GAAI,GAAGwG,WAChC7F,GAASkF,GACRC,GACE,gCACK,IACD,yBAAOtI,UAAU,sCACb,gBAAC0G,EAAA,EAAgB,CAAClE,GAAG,6BAMzC,CAACwG,EAAcX,EAAYC,EAAUnF,IAGnCiG,GAAuB,IAAAD,UAAQ,IACf,SAAdpB,EACa,YAATlH,EACOwF,EAAA,EAAqBgD,QAG5B,IAAAC,UAASlG,EAAM,WAAY,IAAAkG,UAASlG,EAAM,OACnCiD,EAAA,EAAqBkD,UAGzBnB,EAAS/B,EAAA,EAAqBmD,SAAWnD,EAAA,EAAqBoD,KAGlE1B,GACR,CAACA,EAAWlH,EAAMuC,EAAMgF,IAErB7E,GAAc,IAAA3B,cAChB,EAAG6B,WACC,gBAACqE,EAAA,EAAY,iBACLrE,EAAK,mBACQ,GAAGuF,WAAsBA,wBAC1CU,aAAcZ,EACdf,UAAWqB,EACX5G,GAAIwG,EACJN,gBAAiBA,EACjBH,IAAKA,EACLE,UAAWA,QAAakB,EACxBnB,IAAKA,EACLzB,QAASA,GAAWA,EAAQ6C,MAC5BhB,YAAaA,GAAgB7B,GAAWA,EAAQ8C,YAChDC,KAAM/C,GAAWA,EAAQ+C,SAGjC,CACIpB,EACAM,EACAF,EACAM,EACAb,EACAE,EACAD,EACAzB,EACA6B,IAIR,OACI,uBAAK5I,UAAW,sBAAsB+I,GAAc,MAC/ChB,IAAc1B,EAAA,EAAqB2B,SAChC,gBAAC,EAAsB,CACnBxF,GAAIwG,EACJ7F,MAAO+F,EACP9F,KAAM6F,EACNjF,SAAUA,EACV+C,QAAUA,GAAWA,EAAQ6C,OAAU,KAG3C,gBAACG,EAAA,EAAS,CACNvH,GAAIwG,EACJ9C,MAAO3C,EACPJ,MAAO+F,EACP9F,KAAM6F,EACNjF,SAAUA,O,kDC7H9B,MAMA,EANiD,EAAGjE,WAAUG,YAC1D,wBAAMF,UAAU,yBAAwB,YAAYE,GAC/CH,E,uFCPT,MAMA,GAAe,EAAAiK,EAAA,IANsB,IACjC,uBAAK5J,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,wGCIhB,GAAe,EAAAwJ,EAAA,IANwB,IACnC,uBAAK5J,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,6HCIhB,GAAe,EAAAwJ,EAAA,IANqB,IAChC,uBAAK5J,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,wGCOhB,IAAYyJ,GAAZ,SAAYA,GACR,gBACA,cACA,oBACA,mBACH,CALD,CAAYA,IAAAA,EAAS,KAsBrB,MAoCA,EApC6C,EACzCtJ,sBACAZ,WACAmK,OACAhK,SACAW,WAEA,MAAMsJ,GAAc,IAAAC,SAEpB,OACI,0CACsBD,EAClBnK,UAAW,IACP,WACAW,EACA,CAAE,iBAAkBE,IAASoJ,EAAUI,OAASxJ,GAChD,CAAE,kBAAmBA,IAASoJ,EAAUK,OACxC,CAAE,oBAAqBzJ,IAASoJ,EAAUM,SAC1C,CAAE,oBAAqB1J,IAASoJ,EAAUO,UAC7C,YACUtK,GAEX,uBAAKF,UAAU,iCAAiCkK,GArC5D,SAA2BrJ,GACvB,OAAQA,GACJ,KAAKoJ,EAAUK,MACf,KAAKL,EAAUO,QACX,OAAO,gBAAC,EAAS,MAErB,KAAKP,EAAUM,QACX,OAAO,gBAAC,EAAW,MAEvB,KAAKN,EAAUI,KACf,QACI,OAAO,gBAAC,EAAQ,MAE5B,CAwBoEI,CAAkB5J,IAE1E,mCACeA,IAASoJ,EAAUK,MAAQ,YAAc,SACpDtK,UAAU,mCACVwC,GAAI2H,EACJrE,KAAMjF,IAASoJ,EAAUK,MAAQ,QAAU,UAE1CvK,I,oGCpDjB,MAsBA,GAtBsB,IAAAU,aAClB,CACI,EACAC,K,IADA,oBAAEC,EAAmB,MAAEwC,EAAK,GAAEX,GAAE,EAAKrC,GAAI,cAAzC,sCAEC,OACD,gCACI,gBAAC,IAAK,iBACEA,EAAI,CACRH,UAAW,IACP,gBACA,kCACAW,GAEJ6B,GAAIA,EACJ9B,IAAKA,EACLG,KAAK,cAET,gBAAC,IAAK,CAACgC,QAASL,GAAKW,M,8FCfjC,MA0FA,EA1FwB,EACpBuH,YAAY,eACZC,WACA5K,eAEA,MAAO6K,EAAYC,IAAiB,IAAAC,WAAS,GAEvCC,GAAiB,IAAAnJ,cAAY,IAE3BoJ,SAASC,eAAe,MACxBD,SAASC,eAAe,MAE7B,IAEGtG,GAAc,IAAA/C,cAAY,KACvBgJ,GAILC,GAAc,KACf,CAACD,IAEEM,GAAa,IAAAtJ,cAAY,KACvBgJ,GAIJC,GAAc,KACf,CAACD,IAEEO,GAA8C,IAAAvJ,cAAY,KACxDgJ,EACAjG,IAEAuG,MAEL,CAACN,EAAYjG,EAAauG,IAgB7B,OAdA,IAAAE,YAAU,KACN,MAAMC,EAAcN,IAQpB,OANIH,EACAS,SAAAA,EAAatJ,iBAAiB,QAAS4C,GAEvC0G,SAAAA,EAAaC,oBAAoB,QAAS3G,GAGvC,KACH0G,SAAAA,EAAaC,oBAAoB,QAAS3G,MAE/C,CAACiG,EAAYjG,EAAaoG,IAGzB,gBAAC,KAAO,KACJ,gBAAC,IAAS,MACL,EAAGrK,SACA,uBAAKV,UAAU,kBAAkBuF,QAAS4F,EAAazK,IAAKA,GACvDX,KAKb,gBAAC,IAAM,CACHwL,UAAW,CACP,CAAEnI,KAAM,OAAQoI,SAAS,GACzB,CAAEpI,KAAM,OAAQoI,SAAS,GACzB,CAAEpI,KAAM,kBAAmBoI,SAAS,IAExCd,UAAWA,IAEV,EAAGhK,MAAK+K,WACJb,EACG,uBACI5K,UAAU,eACVU,IAAKA,EACL+K,MAAK,+BACEA,GAAK,CACRnL,MAAO,OACPoL,OAAQ,KAGXf,GAVK,Q,yHClFlC,MAMA,GAAe,E,QAAA,IAN4B,IACvC,uBAAKvK,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,oD,0BCEhB,MAiBA,GAjBiB,IAAAC,aACb,CACI,EACAC,K,IADA,oBAAEC,EAAmB,OAAET,EAAM,UAAEF,GAAS,EAAKG,GAAI,cAAjD,8CAEC,OACD,4CACQA,EAAI,CACRH,UACIA,GACA,IAAW,aAAc,+BAAgCW,GAAoB,YAEtET,EACXQ,IAAKA,Q,0BCWjB,MAkKA,GAAe,IAAAI,OAAK,EAAA6K,EAAA,IAlKwC,I,IAAA,UACxD5D,EAAS,GACTvF,EAAE,KACFY,EAAI,SACJY,EAAW,EAAAS,KAAI,QACfsC,EAAO,YACP6B,EAAW,MACX7F,EAAK,uBACL6I,EAAsB,KACtBC,EAAI,gBACJnD,GAAe,EACZvI,GAAI,cAXiD,wHAaxD,MAAM2L,EAAcpD,IAAmBmD,aAAI,EAAJA,EAAMC,cAAe,GAEtDC,GAAmB,IAAAnK,cACrB,CAACoK,EAAmBpH,IAChBZ,EAAS,OAAD,wBACDY,GAAK,CACR5C,OAAQ,CACJoB,OACAL,MAAOiJ,OAGnB,CAAChI,EAAUZ,IAGf,OAAQ2E,GACJ,KAAK1B,EAAA,EAAqB4F,SACtB,OACI,gCACI,uBACIjM,UAAW,IACP,CAAE,oBAAqB4L,GACvB,CAAE,0BAA2BA,KAGjC,gBAAC,EAAe,OAEpB,0CACSzL,EAAY,CACjBH,UAAW,IACP,CAAE,kBAAmB4L,GACrB,6CACH,YACU,GAAGpJ,WACdA,GAAIA,EACJY,KAAMA,EACNY,SAAUA,EACVjB,MAAOA,QAAAA,EAAS,OAEb6F,GAAe,0BAAQ7F,MAAM,IAAI6F,GACnC7B,GACGA,EAAQM,KAAI,EAAGlE,QAAOJ,MAAOmJ,KACzB,0BAAQC,IAAKD,EAAanJ,MAAOmJ,GAC5B/I,OAO7B,KAAKkD,EAAA,EAAqB+F,MACtB,OAAKrF,GAAYA,EAAQc,OAKrB,gCACKd,EAAQM,KAAI,EAAGlE,QAAOJ,MAAOmJ,KAC1B,gBAACG,EAAA,EAAU,iBACHlM,EAAI,CACRwC,QAASuJ,IAAgBnJ,EACzBP,GAAI,GAAGA,KAAM0J,IACbC,IAAKD,EACL/I,MAAOA,EACPC,KAAMA,EACNY,SAAUA,EACV9D,OAAQ,GAAGsC,KAAM0J,UACjBnJ,MAAOmJ,QAfZ,KAqBf,KAAK7F,EAAA,EAAqB2B,SACtB,OAAKjB,GAAYA,EAAQc,OAKrB,gCACKd,EAAQM,KAAI,EAAGlE,QAAOJ,MAAOmJ,KAC1B,gBAACI,EAAA,EAAa,iBACNnM,EAAI,CACRwC,UAAS4J,MAAMC,QAAQzJ,IAASA,EAAMuG,SAAS4C,GAC/C1J,GAAI,GAAGA,KAAM0J,IACbC,IAAKD,EACL/I,MAAOA,EACPC,KAAMA,EACNY,SAAUA,EACV9D,OAAQ,GAAGsC,KAAM0J,aACjBnJ,MAAOmJ,QAfZ,KAqBf,KAAK7F,EAAA,EAAqBoG,KACtB,OACI,gBAAC,I,iBAEQtM,EAAY,CACjBuJ,aAAa,MAIbgD,kBAAkB,mCAClB1M,UAAU,0CACV2M,WAAYb,EACZc,QAASzM,EAAKoI,IAAM,IAAIsE,KAAK,GAAG1M,EAAKoI,sBAAmBoB,EACxDmD,QAAS3M,EAAKqI,IAAM,IAAIqE,KAAK,GAAG1M,EAAKqI,sBAAmBmB,EACxDvG,KAAMA,EACNY,SAAU+H,EACVgB,gBAAiBjB,EAAYkB,cAC7BC,gBAAgB,mCAChBC,UAAU,IAAAC,QAAOpK,GAASA,OAAQ4G,KAI9C,KAAKtD,EAAA,EAAqB+G,UACtB,OACI,gBAAC,E,iBAEQjN,EAAY,CACjBqC,GAAIA,EACJY,KAAMA,EACNY,SAAUA,EACV9D,OAAQ,GAAGsC,SACX3B,KAAMkH,EACNhF,MAAOA,KAInB,QACI,OACI,gBAACsK,EAAA,EAAS,iBACFlN,EAAI,CACRqC,GAAIA,EACJY,KAAMA,EACNY,SAAUA,EACV4E,YAAaA,EACb1I,OAAQ,GAAGsC,KACPuF,IAAc1B,EAAA,EAAqBmD,SAAW,WAAa,SAE/D3I,KAAMkH,EACNhF,MAAOA,S,qECnL3B,MAYA,EAZyD,EAAGhD,WAAUY,yBAClE,sBACIX,UAAW,IACP,wDACAW,GACH,YACS,iBAETZ,E,sGCFT,MAgCA,EAhCkB,EACdA,WACAC,YAAY,YACZsN,wBACAxK,aACAyK,WAAW,EAAA9I,SAEX,MAAOnD,EAAgBkM,IAAqB,IAAA1C,UAA6BwC,GAEnEG,EAA0CjL,IACxCM,IAIJ0K,EAAkBhL,GAClB+K,EAAS/K,KAGPkL,GAAkB,IAAAlK,aAAYmK,IACzB,CACHtM,SAAUoM,EACVnM,eAAgBqM,MAIxB,OACI,gBAACnM,EAAAC,EAAiBmM,SAAQ,CAAC7K,MAAO2K,EAAgBpM,IAC9C,sBAAItB,UAAWA,GAAYD,K,eCdhC,MAAM8N,GAAmB,IAAAzH,oBAAiDuD,GAgCjF,GAAe,EAAAmE,EAAA,IAAc,IAAAhN,OA5BxB,I,IAAEiN,QAAQ,cAAEC,GAAe,KAAE5K,EAAI,SAAEmK,EAAW,EAAA9I,MAAI,EAAKhC,GAAK,cAA5D,+BACD,IAAA2I,YAAU,IACC,KACH4C,EAAc5K,EAAM,MAEzB,IAEH,MAAM6K,GAAe,IAAArM,cAChBmB,IACGiL,EAAc5K,EAAML,GACpBwK,EAASxK,KAEb,CAACK,EAAMmK,EAAUS,IAGfE,GAAe,IAAA/E,UAAQ,KAAM,CAAG/F,UAAS,CAACA,IAEhD,OACI,gBAACyK,EAAiBD,SAAQ,CAAC7K,MAAOmL,GAC9B,gBAAC,EAAS,iBACFzL,EAAK,CACTzC,UAAU,kDACVuN,SAAUU,S,4FC/CX,SAASH,EACpBK,GAEA,MAAMC,GAA4C,IAAAtN,OAC7C2B,GAAU,gBAAC0L,EAAiB,iBAAK1L,MAClC,CAAC,EAAsC,K,IAApCsL,OAAQM,GAAU,EAAKC,GAAS,cAAlC,YAAgDC,EAAU,SAAKC,GAAS,cAAlC,YACnC,WAAaH,EAAYE,IAAe,IAAaD,EAAWE,MAGlEC,GAAqB,QAAyBL,GAQpD,OAJAK,EAAmBC,YAAc,iBAC7BP,EAAkBO,aAAeP,EAAkB/K,QAGhDqL,CACX,C,+ECXA,MAwBA,GAAe,IAAA3N,OAxBwD,EACnEH,sBACAZ,WACAC,YACA4H,WACA1H,YAEA,gBAAC,KAAY6F,SAAQ,MAChB,EAAGC,iBACA,uBACIhG,UACIA,GACA,IAAW,aAAcW,EAAqB,CAC1C,oBAAqBiH,GAAY5B,IACnC,YAEK9F,GAEVH,M,2CC/BV,MAAM4O,EAAwB,eACxBC,EAAqC,uB,mFCclD,MAAqBC,UAAuB,EAAAC,UAA5C,c,oBAKI,KAAAC,MAAuC,CACnCnE,YAAY,GA2CR,KAAAoE,WAA6C,KACjDC,KAAKC,SAAS,CAAEtE,YAAY,KAGxB,KAAAuE,WAA6C,KACjDF,KAAKC,SAAS,CAAEtE,YAAY,IAEpC,CA/CI,MAAA3G,GACI,MAAM,SAAElE,EAAQ,UAAE2K,EAAS,QAAE0E,GAAYH,KAAKxM,OACxC,WAAEmI,GAAeqE,KAAKF,MAE5B,OACI,gBAAC,KAAO,KACJ,gBAAC,IAAS,MACL,EAAGrO,SACA,wBACI2O,OAAQJ,KAAKE,WACbG,QAASL,KAAKD,WACdO,aAAcN,KAAKD,WACnBQ,aAAcP,KAAKE,WACnBzO,IAAKA,GAEJX,KAKb,gBAAC,IAAM,CACHwL,UAAW,CACP,CAAEnI,KAAM,OAAQoI,SAAS,GACzB,CAAEpI,KAAM,OAAQoI,SAAS,GACzB,CAAEpI,KAAM,kBAAmBoI,SAAS,IAExCd,UAAWA,IAEV,EAAGhK,MAAK+K,WACLb,GACI,uBAAKlK,IAAKA,EAAK+K,MAAOA,GACjB2D,KAO7B,EA9CO,EAAAK,aAAe,CAClB/E,UAAW,U,2HCWnB,MAAMgF,UAAwB,EAAAZ,UAC1B,kBAAAa,EAAqBlM,MAAOmM,IACxB,MAEInM,OAAO,MAAEV,GAAO,SAChBiB,EAAW,EAAAS,MACXwK,KAAKxM,QAGe,IAAA0K,QAAOpK,GAASA,EAAM8M,UAAY9M,OAE9B,IAAAoK,QAAOyC,EAAU7M,OACvC6M,EAAU7M,MAAM8M,UAChBD,EAAU7M,QAGZiB,EAASjB,EAEjB,CAEA,MAAAkB,GACI,MAAM,UAAE6L,EAAY,QAAO,MAAErM,EAAK,OAAEQ,GAAWgL,KAAKxM,MAEpD,OAAIwB,EACOA,EAAOgL,KAAKxM,OAGE,iBAAdqN,GACA,IAAAC,eAAcD,EAAWrM,IAI7B,IAAAsM,eAAcD,EAAkBb,KAAKxM,MAChD,EAGJ,MAAMuN,GAAiD,IAAAlP,OACnD,EAAGH,sBAAqBmP,YAAWrM,QAAOmD,OAAM5C,WAAUC,SAAQ/D,aAC9D,MAAMgG,GAAQ,IAAAiD,UACV,IACI,gBAACuG,EAAe,CACZI,UAAWA,EACXrM,MAAOA,EACPmD,KAAMA,EACNqJ,KAAMrJ,EAAKsJ,aAAazM,EAAML,MAC9BY,SAAUA,EACVC,OAAQA,KAGhB,CAACR,EAAOmD,EAAM5C,EAAU8L,EAAW7L,IAGvC,OACI,gBAAC,IAAkB,CACftD,oBAAqBA,EAErBiH,UAAU,QAAMhB,EAAKE,OAAQrD,EAAML,MACnClD,OAAQA,GAEPgG,MAIb,CACI,EACA,K,IADEU,KAAMuJ,EAAU1M,MAAOmM,GAAS,EAAKtB,GAAS,cAAhD,kBACQ8B,EAAQ,OAASC,EAAS,QAAK7B,GAAS,cAAhD,kBAEA,WAAaF,EAAWE,IACxB,IAAa2B,EAAUC,IACvB,IAAaR,EAAWS,MA8BhC,GAAe,IAAAvP,OA3BiD,I,IAAA,oBAC5DH,EAAmB,UACnBX,EAAS,UACT8P,EAAS,OACT7L,EAAM,OACN/D,EAAM,SACN8D,GAAQ,EACL7D,GAAI,cAPqD,8EAS5D,MAAMmQ,GAAmB,IAAA1O,cACpBa,GACG,gBAACuN,EAAU,iBACHvN,EAAK,CACT9B,oBAAqBA,EACrBX,UAAWA,EACX8P,UAAWA,EACX9L,SAAUA,EACVC,OAAQA,EACR/D,OAAQA,MAGhB,CAACS,EAAqBX,EAAW8P,EAAW7L,EAAQ/D,EAAQ8D,IAGhE,OAAO,gBAAC,KAAK,iBAAK7D,GAAOmQ,K","sources":["webpack://checkout/./packages/ui/src/form/Label/Label.tsx","webpack://checkout/./packages/ui/src/icon/IconHelp.tsx","webpack://checkout/./packages/ui/src/form/TextInput/TextInput.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/ui/src/form/Input/Input.tsx","webpack://checkout/./packages/ui/src/icon/IconClose.tsx","webpack://checkout/./packages/ui/src/modal/Modal.tsx","webpack://checkout/./packages/ui/src/form/Fieldset/Fieldset.tsx","webpack://checkout/./packages/ui/src/form/RadioInput/RadioInput.tsx","webpack://checkout/./packages/ui/src/form/FormFieldError/FormFieldError.tsx","webpack://checkout/./packages/ui/src/form/FormField/FormField.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormFieldType.ts","webpack://checkout/./packages/ui/src/form/DynamicFormField/MultiCheckboxControl.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/CheckboxGroupFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormField.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/ui/src/icon/IconError.tsx","webpack://checkout/./packages/ui/src/icon/IconSuccess.tsx","webpack://checkout/./packages/ui/src/icon/IconInfo.tsx","webpack://checkout/./packages/ui/src/alert/Alert.tsx","webpack://checkout/./packages/ui/src/form/CheckboxInput/CheckboxInput.tsx","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/ui/src/icon/IconChevronDown.tsx","webpack://checkout/./packages/ui/src/form/TextArea/TextArea.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicInput.tsx","webpack://checkout/./packages/ui/src/modal/ModalHeader.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/ui/src/form/FormFieldContainer/FormFieldContainer.tsx","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts","webpack://checkout/./packages/ui/src/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/ui/src/form/BasicFormField/BasicFormField.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { FunctionComponent, LabelHTMLAttributes } from 'react';\n\nexport interface LabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n    testId?: string;\n    hidden?: boolean;\n}\n\nconst Label: FunctionComponent<LabelProps> = ({ children, className, hidden, testId, ...rest }) => (\n    <label\n        {...rest}\n        className={classNames(\n            className || 'form-label',\n            { 'is-srOnly': hidden },\n            'optimizedCheckout-form-label',\n        )}\n        data-test={testId}\n    >\n        {children}\n    </label>\n);\n\nexport default Label;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref } from 'react';\n\nimport { Input, InputProps } from '../Input';\n\nexport interface TextInputProps extends InputProps {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    type?: 'text' | 'password' | 'tel' | 'email' | 'number';\n}\n\nconst TextInput = forwardRef(\n    (\n        { additionalClassName, appearFocused, type = 'text', ...rest }: TextInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <Input\n            {...rest}\n            className={classNames(\n                'form-input',\n                'optimizedCheckout-form-input',\n                { 'form-input--focus': appearFocused },\n                { 'optimizedCheckout-form-input--focus': appearFocused },\n                additionalClassName,\n            )}\n            ref={ref}\n            type={type}\n        />\n    ),\n);\n\nexport default TextInput;\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node: Node, done: () => void) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children ? (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div aria-live=\"polite\" className={bodyClassName}>\n                        {children}\n                    </div>\n                </CSSTransition>\n            ) : null}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    testId?: string;\n}\n\nconst Input = forwardRef(({ testId, ...rest }: InputProps, ref: Ref<HTMLInputElement>) => (\n    <input {...rest} data-test={testId} ref={ref} />\n));\n\nexport default Input;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconClose: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconClose);\n","import classNames from 'classnames';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent, KeyboardEvent, MouseEvent, ReactNode, useCallback } from 'react';\nimport ReactModal from 'react-modal';\nimport { Omit } from 'utility-types';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\n\nimport { IconClose } from '../icon';\n\nexport type ModalProps = Omit<\n    ReactModal.Props,\n    'bodyOpenClassName' | 'className' | 'closeTimeoutMS' | 'overlayClassName'\n> & {\n    children?: ReactNode;\n    closeButtonLabel?: string | ReactNode;\n    footer?: ReactNode;\n    header?: ReactNode;\n    additionalHeaderClassName?: string;\n    additionalBodyClassName?: string;\n    additionalModalClassName?: string;\n    shouldShowCloseButton?: boolean;\n};\n\nconst Modal: FunctionComponent<ModalProps> = ({\n    children,\n    closeButtonLabel = 'Close',\n    footer,\n    header,\n    additionalHeaderClassName,\n    additionalBodyClassName,\n    additionalModalClassName,\n    onRequestClose = noop,\n    shouldShowCloseButton = false,\n    ...rest\n}) => {\n    const handleClose = useCallback(\n        (event: MouseEvent | KeyboardEvent) => {\n            onRequestClose(event);\n        },\n        [onRequestClose],\n    );\n\n    return (\n        <ReactModal\n            {...rest}\n            ariaHideApp={process.env.NODE_ENV !== 'test'}\n            bodyOpenClassName=\"has-activeModal\"\n            className={{\n                base: classNames(\n                    'modal optimizedCheckout-contentPrimary',\n                    additionalModalClassName,\n                ),\n                afterOpen: 'modal--afterOpen',\n                beforeClose: 'modal--beforeClose',\n            }}\n            closeTimeoutMS={200}\n            onRequestClose={onRequestClose}\n            overlayClassName={{\n                base: 'modalOverlay',\n                afterOpen: 'modalOverlay--afterOpen',\n                beforeClose: 'modalOverlay--beforeClose',\n            }}\n            shouldCloseOnEsc={true}\n            shouldCloseOnOverlayClick={false}\n        >\n            <div className={classNames('modal-header', additionalHeaderClassName)}>\n                {header}\n\n                {shouldShowCloseButton && (\n                    <a\n                        className=\"modal-close\"\n                        data-test=\"modal-close-button\"\n                        href=\"#\"\n                        onClick={preventDefault(handleClose)}\n                    >\n                        {Boolean(closeButtonLabel) && (\n                            <span className=\"is-srOnly\">{closeButtonLabel}</span>\n                        )}\n\n                        <IconClose />\n                    </a>\n                )}\n            </div>\n\n            <div\n                className={classNames('modal-body', additionalBodyClassName)}\n                data-test=\"modal-body\"\n            >\n                {children}\n            </div>\n\n            {Boolean(footer) && (\n                <div className=\"modal-footer\" data-test=\"modal-footer\">\n                    {footer}\n                </div>\n            )}\n        </ReactModal>\n    );\n};\n\nexport default Modal;\n","import classNames from 'classnames';\nimport React, { FieldsetHTMLAttributes, forwardRef, ReactNode, Ref } from 'react';\n\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\n    additionalClassName?: string;\n    testId?: string;\n    legend?: ReactNode;\n}\n\nconst Fieldset = forwardRef(\n    (\n        { additionalClassName, children, className, legend, testId, ...rest }: FieldsetProps,\n        ref: Ref<HTMLFieldSetElement>,\n    ) => (\n        <fieldset\n            {...rest}\n            className={className || classNames('form-fieldset', additionalClassName)}\n            data-test={testId}\n            ref={ref}\n        >\n            {legend}\n\n            <div className=\"form-body\">{children}</div>\n        </fieldset>\n    ),\n);\n\nexport default Fieldset;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from '../Input/Input';\nimport Label from '../Label/Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef(\n    (\n        { additionalClassName, label, value, checked, id, ...rest }: RadioInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                checked={checked}\n                className={classNames(\n                    'form-radio',\n                    'optimizedCheckout-form-radio',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"radio\"\n                value={value}\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default RadioInput;\n","import { ErrorMessage } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldErrorProps {\n    name: string;\n    testId?: string;\n    errorId: string;\n}\n\nconst FormFieldError: FunctionComponent<FormFieldErrorProps> = ({ name, testId, errorId }) => {\n    const renderMessage = useCallback(\n        (message: string) => (\n            <ul className=\"form-field-errors\" data-test={testId}>\n                <li className=\"form-field-error\">\n                    <label\n                        aria-live=\"polite\"\n                        className=\"form-inlineMessage\"\n                        htmlFor={name}\n                        id={errorId}\n                        role=\"alert\"\n                    >\n                        {message}\n                    </label>\n                </li>\n            </ul>\n        ),\n        [errorId, name, testId],\n    );\n\n    return (\n        <FormContext.Consumer>\n            {({ isSubmitted }) =>\n                isSubmitted && <ErrorMessage name={name} render={renderMessage} />\n            }\n        </FormContext.Consumer>\n    );\n};\n\nexport default memo(FormFieldError);\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { BasicFormField } from '../BasicFormField';\nimport { FormFieldError } from '../FormFieldError';\nimport { Label } from '../Label';\n\nexport interface FormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    label?: ReactNode | ((fieldName: string) => ReactNode);\n    labelContent?: ReactNode;\n    footer?: ReactNode;\n    id?: string;\n    input(field: FieldProps<string>): ReactNode;\n    onChange?(value: string): void;\n}\n\nconst FormField: FunctionComponent<FormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    label,\n    onChange,\n    footer,\n    input,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(\n        (props: FieldProps<string>) => (\n            <>\n                {Boolean(label) && (typeof label === 'function' ? label(name) : label)}\n\n                {Boolean(labelContent && !label) && (\n                    <Label htmlFor={name} id={`${id ?? name}-label`}>\n                        {labelContent}\n                    </Label>\n                )}\n\n                {input(props)}\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n\n                {footer}\n            </>\n        ),\n        [label, labelContent, id, input, name, footer],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(FormField);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","enum DynamicFormFieldType {\n    TELEPHONE = 'tel',\n    DROPDOWM = 'dropdown',\n    NUMBER = 'number',\n    PASSWORD = 'password',\n    CHECKBOX = 'checkbox',\n    MULTILINE = 'multiline',\n    DATE = 'date',\n    RADIO = 'radio',\n    TEXT = 'text',\n}\n\nexport default DynamicFormFieldType;\n","/* istanbul ignore file */\n\nimport React, { FunctionComponent, memo, MouseEvent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedAll();\n        },\n        [onSelectedAll],\n    );\n\n    const handleSelectNoneClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedNone();\n        },\n        [onSelectedNone],\n    );\n\n    return (\n        <ul className=\"multiCheckbox--controls\">\n            <li className=\"multiCheckbox--control\">\n                <TranslatedString id=\"address.select\" />\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId || ''}Checkbox-all-button`}\n                    href=\"#\"\n                    onClick={handleSelectAllClick}\n                >\n                    <TranslatedString id=\"address.select_all\" />\n                </a>\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId || ''}Checkbox-none-button`}\n                    href=\"#\"\n                    onClick={handleSelectNoneClick}\n                >\n                    <TranslatedString id=\"address.select_none\" />\n                </a>\n            </li>\n        </ul>\n    );\n};\n\nexport default memo(MultiCheckboxControl);\n","/* istanbul ignore file */\n\nimport { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { FieldArray, FieldArrayRenderProps, getIn } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { ChangeEvent, FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\nimport { FormFieldError } from '../FormFieldError';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(\n            options.map(({ value }) => value),\n            checkedValues,\n        ).forEach((val) => push(val));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, options, push, values]);\n\n    const handleSelectNone = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, remove, values]);\n\n    const handleInputChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const checkedValues: string[] = getIn(values, name) || [];\n            const { value, checked } = event.target;\n\n            if (checked) {\n                push(value);\n            } else {\n                remove(checkedValues.indexOf(value));\n            }\n\n            onChange(getIn(values, name));\n        },\n        [name, onChange, push, remove, values],\n    );\n\n    return (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\n            {label}\n\n            {options.length > 1 && (\n                <MultiCheckboxControl\n                    onSelectedAll={handleSelectAll}\n                    onSelectedNone={handleSelectNone}\n                    testId={id}\n                />\n            )}\n\n            <DynamicInput\n                fieldType={DynamicFormFieldType.CHECKBOX}\n                id={id}\n                name={name}\n                onChange={handleInputChange}\n                options={options}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                value={getIn(values, name) || []}\n            />\n\n            <FormFieldError\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                errorId={`${id ?? name}-field-error-message`}\n                name={name}\n                testId={`${kebabCase(name)}-field-error-message`}\n            />\n        </FormFieldContainer>\n    );\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback(\n        (renderProps: FieldArrayRenderProps) => (\n            <MultiCheckboxFormField\n                id={id}\n                label={label}\n                name={name}\n                onChange={onChange}\n                options={options}\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\n            />\n        ),\n        [id, label, name, onChange, options],\n    );\n\n    return <FieldArray name={name} render={renderField} />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport { includes } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField } from '../FormField';\nimport { Label } from '../Label';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n        inputDateFormat,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(\n        () => (\n            <Label htmlFor={fieldInputId} id={`${fieldInputId}-label`}>\n                {label || fieldLabel}\n                {!required && (\n                    <>\n                        {' '}\n                        <small className=\"optimizedCheckout-contentSecondary\">\n                            <TranslatedString id=\"common.optional_text\" />\n                        </small>\n                    </>\n                )}\n            </Label>\n        ),\n        [fieldInputId, fieldLabel, required, label],\n    );\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.NUMBER;\n            }\n\n            if (includes(name, 'phone') || includes(name, 'tel')) {\n                return DynamicFormFieldType.TELEPHONE;\n            }\n\n            return secret ? DynamicFormFieldType.PASSWORD : DynamicFormFieldType.TEXT;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, name, secret]);\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\n                autoComplete={autocomplete}\n                fieldType={dynamicFormFieldType}\n                id={fieldInputId}\n                inputDateFormat={inputDateFormat}\n                max={max}\n                maxLength={maxLength || undefined}\n                min={min}\n                options={options && options.items}\n                placeholder={placeholder || (options && options.helperLabel)}\n                rows={options && options.rows}\n            />\n        ),\n        [\n            inputDateFormat,\n            fieldInputId,\n            autocomplete,\n            dynamicFormFieldType,\n            max,\n            maxLength,\n            min,\n            options,\n            placeholder,\n        ],\n    );\n\n    return (\n        <div className={`dynamic-form-field ${extraClass || ''}`}>\n            {fieldType === DynamicFormFieldType.CHECKBOX ? (\n                <CheckboxGroupFormField\n                    id={fieldInputId}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                    options={(options && options.items) || []}\n                />\n            ) : (\n                <FormField\n                    id={fieldInputId}\n                    input={renderInput}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import React, { FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    children: React.ReactNode;\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\n        {children}\n    </span>\n);\n\nexport default Tooltip;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconError: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconError);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSuccess: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconSuccess);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconInfo: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconInfo);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode, useId } from 'react';\n\nimport { IconError, IconInfo, IconSuccess } from '../icon';\n\nexport interface AlertProps {\n    additionalClassName?: string;\n    icon?: ReactNode;\n    testId?: string;\n    type?: AlertType;\n    children?: ReactNode;\n}\n\nexport enum AlertType {\n    Error = 'error',\n    Info = 'info',\n    Success = 'success',\n    Warning = 'warning',\n}\n\nfunction renderDefaultIcon(type?: AlertType): ReactNode {\n    switch (type) {\n        case AlertType.Error:\n        case AlertType.Warning:\n            return <IconError />;\n\n        case AlertType.Success:\n            return <IconSuccess />;\n\n        case AlertType.Info:\n        default:\n            return <IconInfo />;\n    }\n}\n\nconst Alert: FunctionComponent<AlertProps> = ({\n    additionalClassName,\n    children,\n    icon,\n    testId,\n    type,\n}) => {\n    const describedBy = useId();\n\n    return (\n        <div\n            aria-describedby={describedBy}\n            className={classNames(\n                'alertBox',\n                additionalClassName,\n                { 'alertBox--info': type === AlertType.Info || !type },\n                { 'alertBox--error': type === AlertType.Error },\n                { 'alertBox--success': type === AlertType.Success },\n                { 'alertBox--warning': type === AlertType.Warning },\n            )}\n            data-test={testId}\n        >\n            <div className=\"alertBox-column alertBox-icon\">{icon || renderDefaultIcon(type)}</div>\n\n            <div\n                aria-live={type === AlertType.Error ? 'assertive' : 'polite'}\n                className=\"alertBox-column alertBox-message\"\n                id={describedBy}\n                role={type === AlertType.Error ? 'alert' : 'status'}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default Alert;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport { Input, InputProps } from '../Input';\nimport { Label } from '../Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef(\n    (\n        { additionalClassName, label, id, ...rest }: CheckboxInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                className={classNames(\n                    'form-checkbox',\n                    'optimizedCheckout-form-checkbox',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"checkbox\"\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default CheckboxInput;\n","import { Placement } from '@popperjs/core';\nimport React, { MouseEventHandler, ReactElement, ReactNode, useCallback, useEffect, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n    children?: ReactNode;\n}\n\nconst DropdownTrigger = ({\n    placement = 'bottom-start',\n    dropdown,\n    children\n}: DropdownTriggerProps): ReactElement => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const getRootElement = useCallback(() => {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }, []);\n\n    const handleClose = useCallback(() => {\n        if (!shouldShow) {\n            return;\n        }\n\n        setShouldShow(false);\n    }, [shouldShow]);\n\n    const handleOpen = useCallback(() => {\n        if (shouldShow) {\n            return;\n        }\n\n        setShouldShow(true);\n    }, [shouldShow]);\n\n    const handleClick: MouseEventHandler<HTMLElement> = useCallback(() => {\n        if (shouldShow) {\n            handleClose();\n        } else {\n            handleOpen();\n        }\n    }, [shouldShow, handleClose, handleOpen]);\n\n    useEffect(() => {\n        const rootElement = getRootElement();\n\n        if (shouldShow) {\n            rootElement?.addEventListener('click', handleClose);\n        } else {\n            rootElement?.removeEventListener('click', handleClose);\n        }\n\n        return () => {\n            rootElement?.removeEventListener('click', handleClose);\n        };\n    }, [shouldShow, handleClose, getRootElement]);\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <div className=\"dropdownTrigger\" onClick={handleClick} ref={ref}>\n                        {children}\n                    </div>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ref}\n                            style={{\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            }}\n                        >\n                            {dropdown}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default DropdownTrigger;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronDown: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronDown);\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => (\n        <textarea\n            {...rest}\n            className={\n                className ||\n                classNames('form-input', 'optimizedCheckout-form-input', additionalClassName)\n            }\n            data-test={testId}\n            ref={ref}\n        />\n    ),\n);\n\nexport default TextArea;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { isDate, noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate } from '@bigcommerce/checkout/locale';\n\nimport { IconChevronDown } from '../../icon';\nimport { CheckboxInput } from '../CheckboxInput';\nimport { InputProps } from '../Input';\nimport { RadioInput } from '../RadioInput';\nimport { TextArea } from '../TextArea';\nimport { TextInput } from '../TextInput';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n    isFloatingLabelEnabled?: boolean;\n    inputDateFormat?: string;\n    date?: {\n        inputFormat: string;\n    };\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    isFloatingLabelEnabled,\n    date,\n    inputDateFormat,\n    ...rest\n}) => {\n    const inputFormat = inputDateFormat || date?.inputFormat || '';\n\n    const handleDateChange = useCallback(\n        (dateValue: string, event: any) =>\n            onChange({\n                ...event,\n                target: {\n                    name,\n                    value: dateValue,\n                },\n            }),\n        [onChange, name],\n    );\n\n    switch (fieldType) {\n        case DynamicFormFieldType.DROPDOWM:\n            return (\n                <>\n                    <div\n                        className={classNames(\n                            { 'dropdown-chevron': !isFloatingLabelEnabled },\n                            { 'floating-select-chevron': isFloatingLabelEnabled },\n                        )}\n                    >\n                        <IconChevronDown />\n                    </div>\n                    <select\n                        {...(rest as any)}\n                        className={classNames(\n                            { 'floating-select': isFloatingLabelEnabled },\n                            'form-select optimizedCheckout-form-select',\n                        )}\n                        data-test={`${id}-select`}\n                        id={id}\n                        name={name}\n                        onChange={onChange}\n                        value={value ?? ''}\n                    >\n                        {!!placeholder && <option value=\"\">{placeholder}</option>}\n                        {options &&\n                            options.map(({ label, value: optionValue }) => (\n                                <option key={optionValue} value={optionValue}>\n                                    {label}\n                                </option>\n                            ))}\n                    </select>\n                </>\n            );\n\n        case DynamicFormFieldType.RADIO:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <RadioInput\n                            {...rest}\n                            checked={optionValue === value}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-radio`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.CHECKBOX:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <CheckboxInput\n                            {...rest}\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-checkbox`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.DATE:\n            return (\n                <ReactDatePicker\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    autoComplete=\"off\"\n                    // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                    // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                    // onChangeRaw={ rest.onChange }\n                    calendarClassName=\"optimizedCheckout-contentPrimary\"\n                    className=\"form-input optimizedCheckout-form-input\"\n                    dateFormat={inputFormat}\n                    maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\n                    minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\n                    name={name}\n                    onChange={handleDateChange}\n                    placeholderText={inputFormat.toUpperCase()}\n                    popperClassName=\"optimizedCheckout-contentPrimary\"\n                    selected={isDate(value) ? value : undefined}\n                />\n            );\n\n        case DynamicFormFieldType.MULTILINE:\n            return (\n                <TextArea\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    testId={`${id}-text`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n\n        default:\n            return (\n                <TextInput\n                    {...rest}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    placeholder={placeholder}\n                    testId={`${id}-${\n                        fieldType === DynamicFormFieldType.PASSWORD ? 'password' : 'text'\n                    }`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import classNames from 'classnames';\nimport React, { FunctionComponent } from 'react';\n\ninterface ModalHeaderProps {\n    children: React.ReactNode;\n    additionalClassName?: string;\n}\n\nconst ModalHeader: FunctionComponent<ModalHeaderProps> = ({ children, additionalClassName }) => (\n    <h2\n        className={classNames(\n            'modal-header-title optimizedCheckout-headingSecondary',\n            additionalClassName,\n        )}\n        data-test=\"modal-heading\"\n    >\n        {children}\n    </h2>\n);\n\nexport default ModalHeader;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { ReactNode, useState } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children?: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nconst Accordion = ({\n    children,\n    className = 'accordion',\n    defaultSelectedItemId,\n    isDisabled,\n    onSelect = noop,\n}: AccordionProps) => {\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\n\n    const handleToggleItem: (id: string) => void = (id) => {\n        if (isDisabled) {\n            return;\n        }\n\n        setSelectedItemId(id);\n        onSelect(id);\n    };\n\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\n        return {\n            onToggle: handleToggleItem,\n            selectedItemId: newSelectedItemId,\n        };\n    });\n\n    return (\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\n            <ul className={className}>{children}</ul>\n        </AccordionContext.Provider>\n    );\n};\n\nexport default Accordion;\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useEffect,\n    useMemo,\n} from 'react';\n\nimport { Accordion } from '@bigcommerce/checkout/ui';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\n\nexport interface ChecklistProps {\n    children?: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    useEffect(() => {\n        return () => {\n            setFieldValue(name, '');\n        };\n    }, []);\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldContainerProps {\n    additionalClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    hasError?: boolean;\n    testId?: string;\n}\n\nconst FormFieldContainer: FunctionComponent<FormFieldContainerProps> = ({\n    additionalClassName,\n    children,\n    className,\n    hasError,\n    testId,\n}) => (\n    <FormContext.Consumer>\n        {({ isSubmitted }) => (\n            <div\n                className={\n                    className ||\n                    classNames('form-field', additionalClassName, {\n                        'form-field--error': hasError && isSubmitted,\n                    })\n                }\n                data-test={testId}\n            >\n                {children}\n            </div>\n        )}\n    </FormContext.Consumer>\n);\n\nexport default memo(FormFieldContainer);\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Placement } from '@popperjs/core';\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children?: ReactNode;\n}\n\nexport interface TooltipTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\n    static defaultProps = {\n        placement: 'bottom',\n    };\n\n    state: Readonly<TooltipTriggerState> = {\n        shouldShow: false,\n    };\n\n    render() {\n        const { children, placement, tooltip } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <span\n                            onBlur={this.handleHide}\n                            onFocus={this.handleShow}\n                            onMouseEnter={this.handleShow}\n                            onMouseLeave={this.handleHide}\n                            ref={ref}\n                        >\n                            {children}\n                        </span>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={[\n                        { name: 'hide', enabled: false },\n                        { name: 'flip', enabled: false },\n                        { name: 'preventOverflow', enabled: false },\n                    ]}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        shouldShow && (\n                            <div ref={ref} style={style}>\n                                {tooltip}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: true });\n    };\n\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: false });\n    };\n}\n","import { Field, FieldConfig, FieldProps, getIn } from 'formik';\nimport { isDate, noop } from 'lodash';\nimport React, {\n    Component,\n    createElement,\n    FunctionComponent,\n    memo,\n    useCallback,\n    useMemo,\n} from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\n\nexport interface BasicFormFieldProps extends FieldConfig {\n    additionalClassName?: string;\n    className?: string;\n    testId?: string;\n    onChange?(value: unknown): void;\n}\n\ntype InnerFieldInputProps = FieldProps &\n    Pick<FieldConfig, 'component' | 'render'> & {\n        onChange?(value: string): void;\n    };\n\ntype InnerFieldProps = Omit<BasicFormFieldProps, keyof FieldConfig> & InnerFieldInputProps;\n\nclass InnerFieldInput extends Component<InnerFieldInputProps> {\n    componentDidUpdate({ field: prevField }: InnerFieldInputProps) {\n        const {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            field: { value },\n            onChange = noop,\n        } = this.props;\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const comparableValue = isDate(value) ? value.getTime() : value;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const comparablePrevValue = isDate(prevField.value)\n            ? prevField.value.getTime()\n            : prevField.value;\n\n        if (comparableValue !== comparablePrevValue) {\n            onChange(value);\n        }\n    }\n\n    render() {\n        const { component = 'input', field, render } = this.props;\n\n        if (render) {\n            return render(this.props);\n        }\n\n        if (typeof component === 'string') {\n            return createElement(component, field);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n        return createElement(component as any, this.props);\n    }\n}\n\nconst InnerField: FunctionComponent<InnerFieldProps> = memo(\n    ({ additionalClassName, component, field, form, onChange, render, testId }) => {\n        const input = useMemo(\n            () => (\n                <InnerFieldInput\n                    component={component}\n                    field={field}\n                    form={form}\n                    meta={form.getFieldMeta(field.name)}\n                    onChange={onChange}\n                    render={render}\n                />\n            ),\n            [field, form, onChange, component, render],\n        );\n\n        return (\n            <FormFieldContainer\n                additionalClassName={additionalClassName}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                hasError={getIn(form.errors, field.name)}\n                testId={testId}\n            >\n                {input}\n            </FormFieldContainer>\n        );\n    },\n    (\n        { form: prevForm, field: prevField, ...prevProps },\n        { form: nextForm, field: nextField, ...nextProps },\n    ) =>\n        shallowEqual(prevProps, nextProps) &&\n        shallowEqual(prevForm, nextForm) &&\n        shallowEqual(prevField, nextField),\n);\n\nconst BasicFormField: FunctionComponent<BasicFormFieldProps> = ({\n    additionalClassName,\n    className,\n    component,\n    render,\n    testId,\n    onChange,\n    ...rest\n}) => {\n    const renderInnerField = useCallback(\n        (props: FieldProps) => (\n            <InnerField\n                {...props}\n                additionalClassName={additionalClassName}\n                className={className}\n                component={component}\n                onChange={onChange}\n                render={render}\n                testId={testId}\n            />\n        ),\n        [additionalClassName, className, component, render, testId, onChange],\n    );\n\n    return <Field {...rest}>{renderInnerField}</Field>;\n};\n\nexport default memo(BasicFormField);\n"],"names":["children","className","hidden","testId","rest","height","viewBox","width","xmlns","d","forwardRef","ref","additionalClassName","appearFocused","type","memo","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","onToggle","selectedItemId","useContext","AccordionContext","A","isSelected","transitionEndListener","useCallback","node","done","addEventListener","target","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","id","props","Input","checked","Label","htmlFor","isDisabled","value","content","htmlId","kebabCase","label","name","Checklist","C","renderInput","memoizeOne","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","render","closeButtonLabel","footer","header","additionalHeaderClassName","additionalBodyClassName","additionalModalClassName","onRequestClose","noop","shouldShowCloseButton","handleClose","event","ariaHideApp","bodyOpenClassName","base","afterOpen","beforeClose","closeTimeoutMS","overlayClassName","shouldCloseOnEsc","shouldCloseOnOverlayClick","href","onClick","preventDefault","Boolean","legend","errorId","renderMessage","message","role","Consumer","isSubmitted","labelContent","input","renderField","createContext","DynamicFormFieldType","onSelectedAll","onSelectedNone","handleSelectAllClick","handleSelectNoneClick","TranslatedString","MultiCheckboxFormField","form","values","errors","options","push","remove","handleSelectAll","checkedValues","difference","map","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","length","DynamicInput","fieldType","CHECKBOX","FormFieldError","renderProps","pick","secret","fieldLabel","required","max","min","maxLength","inputDateFormat","parentFieldName","placeholder","inputId","autocomplete","extraClass","fieldInputId","fieldName","labelComponent","useMemo","dynamicFormFieldType","NUMBER","includes","TELEPHONE","PASSWORD","TEXT","autoComplete","undefined","items","helperLabel","rows","FormField","withIconContainer","AlertType","icon","describedBy","useId","Info","Error","Success","Warning","renderDefaultIcon","placement","dropdown","shouldShow","setShouldShow","useState","getRootElement","document","getElementById","handleOpen","handleClick","useEffect","rootElement","removeEventListener","modifiers","enabled","style","zIndex","withDate","isFloatingLabelEnabled","date","inputFormat","handleDateChange","dateValue","DROPDOWM","optionValue","key","RADIO","RadioInput","CheckboxInput","Array","isArray","DATE","calendarClassName","dateFormat","maxDate","Date","minDate","placeholderText","toUpperCase","popperClassName","selected","isDate","MULTILINE","TextInput","defaultSelectedItemId","onSelect","setSelectedItemId","handleToggleItem","getContextValue","newSelectedItemId","Provider","ChecklistContext","connectFormik","formik","setFieldValue","handleSelect","contextValue","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","displayName","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID","TooltipTrigger","Component","state","handleShow","this","setState","handleHide","tooltip","onBlur","onFocus","onMouseEnter","onMouseLeave","defaultProps","InnerFieldInput","componentDidUpdate","prevField","getTime","component","createElement","InnerField","meta","getFieldMeta","prevForm","nextForm","nextField","renderInnerField"],"sourceRoot":""}