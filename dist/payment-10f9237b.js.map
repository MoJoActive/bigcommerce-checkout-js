{"version":3,"file":"payment-10f9237b.js","mappings":"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","sources":["webpack://checkout/./packages/paypal-express-integration/src/PaypalExpressPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreePaypalPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getIdealValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectIdealPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/constants.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchValidation.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchFormFields.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchMandateText.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchPaymentForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/BraintreeAchPaymentMethod.tsx","webpack://checkout/./packages/ppsdk-integration/src/usePropsToOnMount.ts","webpack://checkout/./packages/ppsdk-integration/src/initializationComponentMap.ts","webpack://checkout/./packages/ppsdk-integration/src/NoUI.tsx","webpack://checkout/./packages/ppsdk-integration/src/PPSDKPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/ui/form/TextArea.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalLink.tsx","webpack://checkout/./packages/core/src/app/ui/text/MultiLineText.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditionsField.tsx","webpack://checkout/./packages/core/src/app/payment/mapSubmitOrderErrorMessage.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getUniquePaymentMethodId.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardFieldsetValues.ts","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditions.tsx","webpack://checkout/./packages/core/src/app/payment/getPaymentValidationSchema.ts","webpack://checkout/./packages/core/src/app/termsConditions/getTermsConditionsValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodType.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodName.ts","webpack://checkout/./packages/core/src/app/ui/form/CustomChecklistItem.tsx","webpack://checkout/./packages/bigcommerce-payments-utils/src/BigCommercePaymentsPayLaterBanner.tsx","webpack://checkout/./packages/paypal-utils/src/BraintreePaypalCreditBanner.tsx","webpack://checkout/./packages/paypal-utils/src/PaypalCommerceCreditBanner.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIconList.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodTitle.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodDisplayName.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardFieldsetValues.ts","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormProvider.tsx","webpack://checkout/./packages/core/src/app/generated/paymentIntegrations/lazy.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodV2.tsx","webpack://checkout/./packages/core/src/app/payment/resolvePaymentMethod.ts","webpack://checkout/./packages/core/src/app/payment/createPaymentFormService.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodList.tsx","webpack://checkout/./packages/core/src/app/common/utility/isMobile.ts","webpack://checkout/./packages/core/src/app/payment/PaymentRedeemables.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentSubmitButton.tsx","webpack://checkout/./packages/core/src/app/payment/SpamProtectionField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditOverlay.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentForm.tsx","webpack://checkout/./packages/core/src/app/payment/Payment.tsx","webpack://checkout/./packages/core/src/app/payment/mapToOrderRequestBody.ts","webpack://checkout/./packages/core/src/app/common/error/isCartChangedError.ts","webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/bolt-integration/src/BoltClientPaymentMethod.tsx","webpack://checkout/./packages/clearpay-integration/src/ClearpayPaymentMethod.tsx","webpack://checkout/./packages/apple-pay-integration/src/ApplePayPaymentMethod.tsx","webpack://checkout/./packages/barclay-integration/src/BarclaycardPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/hooks/useBraintreeFastlaneInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneCreditCardForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/index.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/BraintreeFastlanePaymentMethod.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2Form.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2PaymentMethod.tsx","webpack://checkout/./packages/affirm-integration/src/AffirmPaymentMethod.tsx","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2PaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/VisaCheckout/VisaCheckoutPaymentMethod.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3PaymentMethod.tsx","webpack://checkout/./packages/hosted-payment-integration/src/HostedPaymentMethod.tsx","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/core/src/app/coupon/AppliedCoupon.tsx","webpack://checkout/./packages/core/src/app/giftCertificate/AppliedGiftCertificate.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconRemove.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemable.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemables.tsx","webpack://checkout/./packages/core/src/app/cart/Redeemable.tsx","webpack://checkout/./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentContext.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodProviderType.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectAlternativePaymentMethod.tsx","webpack://checkout/./packages/moneris-integration/src/MonerisPaymentMethod.tsx","webpack://checkout/./packages/offline-payment-integration/src/OfflinePaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapV2PaymentMethod.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectTextField.tsx","webpack://checkout/./packages/mollie-integration/src/MollieAPMCustomForm.tsx","webpack://checkout/./packages/mollie-integration/src/MollieCustomCardForm.tsx","webpack://checkout/./packages/mollie-integration/src/MolliePaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarna/KlarnaPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectInitializationData.ts","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas.tsx","webpack://checkout/./packages/core/src/app/ui/form/withForm.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useSepaInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getSepaValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectSepaPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/cart/mapToRedeemableProps.ts","webpack://checkout/./packages/core/src/app/payment/withPayment.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeLocalPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltCustomForm.tsx","webpack://checkout/./packages/bolt-integration/src/BoltEmbeddedPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getPayByBankValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectPayByBankPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/constants.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectNumberField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectEcpFieldset.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useEcpInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getEcpValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectEcpPaymentMethod.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeVenmo/BraintreeVenmoPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2PaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectSelectField.tsx","webpack://checkout/./packages/klarna-integration/src/klarnav2/KlarnaV2PaymentMethod.tsx","webpack://checkout/./packages/afterpay-integration/src/AfterpayPaymentMethod.tsx","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/PaymentView.tsx","webpack://checkout/./packages/wallet-button-integration/src/SignInView.tsx","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/TextFieldForm.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomFormFields.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomPaymentMethod.tsx","webpack://checkout/./packages/worldpay-access-integration/src/WorldpayCreditCardPaymentMethod.tsx"],"sourcesContent":["import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaypalExpressPaymentMethodProps {\n    isEmbedded?: boolean;\n}\n\nconst PaypalExpressPaymentMethod: FunctionComponent<\n    PaymentMethodProps & PaypalExpressPaymentMethodProps\n> = ({ checkoutService, isEmbedded = false, ...rest }) => {\n    const initializePaypalExpressPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                paypalexpress: {\n                    useRedirectFlow: isEmbedded,\n                },\n            }),\n        [checkoutService, isEmbedded],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePaypalExpressPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalExpressPaymentMethod,\n    [{ id: 'paypalexpress' }],\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const initializeBraintreePaypalPaymentMethod = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const { onUnhandledError, language, method, paymentForm } = rest;\n\n            return checkoutService.initializePayment({\n                ...defaultOptions,\n                braintree: {\n                    containerId: '#checkout-payment-continue',\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError?.(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError?.(error);\n                        }\n                    },\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                },\n            });\n        },\n        [rest, checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBraintreePaypalPaymentMethod}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreePaypalPaymentMethod,\n    [{ id: 'braintreepaypal' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltClientPaymentMethod from './BoltClientPaymentMethod';\nimport BoltEmbeddedPaymentMethod from './BoltEmbeddedPaymentMethod';\n\nconst BoltPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const useBoltEmbedded = method.initializationData?.embeddedOneClickEnabled;\n\n    if (useBoltEmbedded) {\n        return (\n            <BoltEmbeddedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                method={method}\n                paymentForm={paymentForm}\n                {...rest}\n            />\n        );\n    }\n\n    return (\n        <BoltClientPaymentMethod\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            method={method}\n            paymentForm={paymentForm}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BoltPaymentMethod,\n    [{ id: 'bolt' }],\n);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport default memoize(function getIdealValidationSchema(language: LanguageService): ObjectSchema {\n    return object({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    });\n});\n","import React, { type FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectSelectField from './fields/BlueSnapDirectSelectField';\nimport getIdealValidationSchema from './validation-schemas/getIdealValidationSchema';\n\nconst BlueSnapDirectIdealPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment },\n    paymentForm: { setValidationSchema },\n    language,\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const { idealIssuers } = method.initializationData;\n\n    const idealIssuersSelectOptions = idealIssuers.map((issuer) => ({\n        value: issuer.issuerId,\n        label: issuer.issuerName,\n    }));\n\n    const initializeIdeal = useCallback(async () => {\n        setValidationSchema(method, getIdealValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method, setValidationSchema, language]);\n\n    const deinitializeIdeal = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeIdeal();\n\n        return () => {\n            void deinitializeIdeal();\n        };\n    }, [deinitializeIdeal, initializeIdeal]);\n\n    return (\n        <Fieldset\n            legend={<Legend hidden>{language.translate('payment.ideal.label')}</Legend>}\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.ideal.label')}\n                name=\"bic\"\n                options={{\n                    helperLabel: language.translate('payment.select_your_bank'),\n                    items: idealIssuersSelectOptions,\n                }}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectIdealPaymentMethod,\n    [{ id: 'ideal', gateway: 'bluesnapdirect' }],\n);\n","import { type FormField } from '@bigcommerce/checkout-sdk';\n\nimport { DynamicFormFieldType } from '@bigcommerce/checkout/ui';\n\nexport enum BraintreeAchFieldType {\n    BusinessName = 'businessName',\n    AccountType = 'accountType',\n    AccountNumber = 'accountNumber',\n    RoutingNumber = 'routingNumber',\n    OwnershipType = 'ownershipType',\n    FirstName = 'firstName',\n    LastName = 'lastName',\n}\n\nexport enum OwnershipTypes {\n    Personal = 'Personal',\n    Business = 'Business',\n}\n\nexport enum AccountTypes {\n    Savings = 'Savings',\n    Checking = 'Checking',\n}\n\nconst accountTypeOptions = [\n    {\n        value: AccountTypes.Savings,\n        label: AccountTypes.Savings,\n    },\n    {\n        value: AccountTypes.Checking,\n        label: AccountTypes.Checking,\n    },\n];\n\nexport const ownershipTypeOptions = [\n    {\n        value: OwnershipTypes.Personal,\n        label: OwnershipTypes.Personal,\n    },\n    {\n        value: OwnershipTypes.Business,\n        label: OwnershipTypes.Business,\n    },\n];\n\nexport const defaultBraintreeAchFormFields: FormField[] = [\n    {\n        name: BraintreeAchFieldType.AccountType,\n        custom: false,\n        id: BraintreeAchFieldType.AccountType,\n        label: 'Account Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: accountTypeOptions,\n        },\n    },\n    {\n        name: BraintreeAchFieldType.AccountNumber,\n        custom: false,\n        id: BraintreeAchFieldType.AccountNumber,\n        label: 'Account Number',\n        required: true,\n        max: 9,\n        min: 8,\n    },\n    {\n        name: BraintreeAchFieldType.RoutingNumber,\n        custom: false,\n        id: BraintreeAchFieldType.RoutingNumber,\n        label: 'Routing Number',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.OwnershipType,\n        custom: false,\n        id: BraintreeAchFieldType.OwnershipType,\n        label: 'Ownership Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: ownershipTypeOptions,\n        },\n    },\n];\n\nexport const personalBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.FirstName,\n        custom: false,\n        id: BraintreeAchFieldType.FirstName,\n        label: 'First Name',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.LastName,\n        custom: false,\n        id: BraintreeAchFieldType.LastName,\n        label: 'Last Name',\n        required: true,\n    },\n];\n\nexport const businessBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.BusinessName,\n        custom: false,\n        id: BraintreeAchFieldType.BusinessName,\n        label: 'Business Name',\n        required: true,\n    },\n];\n","import { type AchInstrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBraintreeAchInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => instruments.filter(isAchInstrument), [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset &&\n        !!currentInstrument &&\n        !currentInstrument.trustedShippingAddress;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBraintreeAchInstruments;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { useCallback } from 'react';\nimport { object, string, type StringSchema } from 'yup';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport {\n    type PaymentFormValues,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst useBraintreeAchValidation = (method: PaymentMethod) => {\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const getValidationSchema = () => {\n        const ownershipType = paymentForm.getFieldValue('ownershipType');\n        const formFields =\n            ownershipType === OwnershipTypes.Business\n                ? businessBraintreeAchFormFields\n                : personalBraintreeAchFormFields;\n\n        const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n            [BraintreeAchFieldType.FirstName]: 'address.first_name',\n            [BraintreeAchFieldType.LastName]: 'address.last_name',\n            [BraintreeAchFieldType.AccountNumber]: 'payment.errors.account_number',\n            [BraintreeAchFieldType.RoutingNumber]: 'payment.errors.routing_number',\n            [BraintreeAchFieldType.BusinessName]: 'payment.errors.business_name',\n        };\n\n        return object(\n            formFields.reduce(\n                (schema, { id, required }) => {\n                    if (required) {\n                        if (requiredFieldErrorTranslationIds[id]) {\n                            schema[id] = string().required(\n                                language.translate(\n                                    `${requiredFieldErrorTranslationIds[id]}_required_error`,\n                                ),\n                            );\n\n                            if (id === BraintreeAchFieldType.AccountNumber) {\n                                schema[id] = schema[id].matches(\n                                    /^\\d+$/,\n                                    language.translate('payment.errors.only_numbers_error', {\n                                        label: language.translate('payment.account_number_label'),\n                                    }),\n                                );\n                            }\n\n                            if (id === BraintreeAchFieldType.RoutingNumber) {\n                                schema[id] = schema[id]\n                                    .matches(\n                                        /^\\d+$/,\n                                        language.translate('payment.errors.only_numbers_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                        }),\n                                    )\n                                    .min(\n                                        8,\n                                        language.translate('customer.min_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            min: 8,\n                                        }),\n                                    )\n                                    .max(\n                                        9,\n                                        language.translate('customer.max_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            max: 9,\n                                        }),\n                                    );\n                            }\n                        }\n                    }\n\n                    return schema;\n                },\n                // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n                {} as { [key: string]: StringSchema },\n            ),\n        );\n    };\n\n    const validateBraintreeAchForm = useCallback(\n        async (braintreeAchFormValues: PaymentFormValues): Promise<boolean> => {\n            const {\n                accountNumber,\n                businessName,\n                routingNumber,\n                ownershipType,\n                firstName,\n                lastName,\n            } = braintreeAchFormValues;\n\n            const validationSchema = getValidationSchema();\n\n            paymentForm.setValidationSchema(method, validationSchema);\n\n            const [\n                isValidAccountNumber,\n                isValidRoutingNumber,\n                isValidFirstName,\n                isValidLastName,\n                isValidBusinessName,\n            ] = await Promise.all([\n                await validationSchema.fields.accountNumber?.isValid(accountNumber),\n                await validationSchema.fields.routingNumber?.isValid(routingNumber),\n                await validationSchema.fields.firstName?.isValid(firstName),\n                await validationSchema.fields.lastName?.isValid(lastName),\n                await validationSchema.fields.businessName?.isValid(businessName),\n            ]);\n\n            const isValidDepositoryName =\n                ownershipType === OwnershipTypes.Business\n                    ? isValidBusinessName\n                    : isValidFirstName && isValidLastName;\n\n            return isValidRoutingNumber && isValidAccountNumber && isValidDepositoryName;\n        },\n        [getValidationSchema],\n    );\n\n    const resetFormValidation = useCallback(() => {\n        paymentForm.setValidationSchema(method, null);\n    }, [paymentForm, method]);\n\n    return {\n        validateBraintreeAchForm,\n        resetFormValidation,\n    };\n};\n\nexport default useBraintreeAchValidation;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField } from '@bigcommerce/checkout/ui';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst isBraintreeAchFormFieldName = (fieldName: string): fieldName is BraintreeAchFieldType => {\n    return Object.values(BraintreeAchFieldType).includes(fieldName as BraintreeAchFieldType);\n};\n\nconst getTranslatedLabelByFieldName = (fieldName: string, language: LanguageService) => {\n    const braintreeAchFormLabelsMap = {\n        firstName: language.translate('address.first_name_label'),\n        lastName: language.translate('address.last_name_label'),\n        accountNumber: language.translate('payment.account_number_label'),\n        routingNumber: language.translate('payment.account_routing_label'),\n        businessName: language.translate('payment.business_name_label'),\n        ownershipType: language.translate('payment.ownership_type_label'),\n        accountType: language.translate('payment.account_type_label'),\n    };\n\n    return isBraintreeAchFormFieldName(fieldName)\n        ? braintreeAchFormLabelsMap[fieldName]\n        : fieldName;\n};\n\nconst BraintreeAchFormFields: FunctionComponent = () => {\n    const { language } = useLocale();\n    const { paymentForm } = usePaymentFormContext();\n    const { getFieldValue, setFieldValue } = paymentForm;\n\n    const ownershipTypeValue = getFieldValue(BraintreeAchFieldType.OwnershipType);\n    const fieldValues =\n        ownershipTypeValue === OwnershipTypes.Business\n            ? businessBraintreeAchFormFields\n            : personalBraintreeAchFormFields;\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n        },\n        [setFieldValue],\n    );\n\n    return (\n        <>\n            {fieldValues.map((field) => (\n                <DynamicFormField\n                    extraClass={`dynamic-form-field--${field.id}`}\n                    field={field}\n                    key={field.id}\n                    label={getTranslatedLabelByFieldName(field.name, language)}\n                    onChange={handleChange(field.id)}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default BraintreeAchFormFields;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nimport { OwnershipTypes } from '../constants';\n\nexport interface BraintreeAchMandateTextProps {\n    isInstrumentFeatureAvailable?: boolean;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchMandateText: FunctionComponent<BraintreeAchMandateTextProps> = ({\n    isInstrumentFeatureAvailable,\n    updateMandateText,\n}) => {\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const {\n        businessName,\n        accountType,\n        accountNumber,\n        routingNumber,\n        ownershipType,\n        firstName,\n        lastName,\n    } = paymentForm.getFormValues();\n\n    const fullName = `${String(firstName)} ${String(lastName)}`;\n\n    const depositoryName = ownershipType === OwnershipTypes.Business ? businessName : fullName;\n    const outstandingBalance = checkoutState.data.getCheckout()?.outstandingBalance;\n    const storeName = checkoutState.data.getConfig()?.storeProfile.storeName;\n    const symbol = checkoutState.data.getCart()?.currency.symbol;\n\n    const mandateTextTranslationKey = isInstrumentFeatureAvailable\n        ? 'payment.braintreeach_vaulting_mandate_text'\n        : 'payment.braintreeach_mandate_text';\n\n    const currentDate = new Date(Date.now()).toJSON().slice(0, 10); // yyyy-mm-dd\n    const formattedDate = currentDate.split('-').reverse().join('.'); // dd.mm.yyyy\n\n    const mandateTextTranslationProps = {\n        accountType: String(accountType).toLowerCase(),\n        accountNumber: String(accountNumber),\n        currentDate: formattedDate,\n        depositoryName: String(depositoryName),\n        routingNumber: String(routingNumber),\n        outstandingBalance: `${symbol || ''}${outstandingBalance || ''}`,\n        storeName: String(storeName),\n    };\n\n    const mandateText = language.translate(mandateTextTranslationKey, mandateTextTranslationProps);\n\n    useEffect(() => {\n        updateMandateText(mandateText);\n    }, [mandateText, updateMandateText]);\n\n    const handleChange = (value: boolean) => {\n        paymentForm.setFieldValue('orderConsent', value);\n    };\n\n    return (\n        <div className=\"mandate-text\" data-test=\"mandate-text\">\n            <CheckboxFormField\n                labelContent={mandateText}\n                name=\"orderConsent\"\n                onChange={handleChange}\n            />\n        </div>\n    );\n};\n\nexport default BraintreeAchMandateText;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { AccountTypes, OwnershipTypes } from '../constants';\nimport useBraintreeAchInstruments from '../hooks/useBraintreeAchInstruments';\nimport useBraintreeAchValidation from '../hooks/useBraintreeAchValidation';\n\nimport BraintreeAchFormFields from './BraintreeAchFormFields';\nimport BraintreeAchMandateText from './BraintreeAchMandateText';\n\nexport interface BraintreeAchPaymentFormProps {\n    method: PaymentMethod;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchPaymentForm: FunctionComponent<BraintreeAchPaymentFormProps> = ({\n    method,\n    updateMandateText,\n}) => {\n    const [isValidForm, setIsValidForm] = useState(false);\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { disableSubmit, getFieldValue, getFormValues, setFieldValue } = paymentForm;\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    } = useBraintreeAchInstruments(method);\n    const { validateBraintreeAchForm, resetFormValidation } = useBraintreeAchValidation(method);\n\n    const resetFormValues = () => {\n        const { firstName, lastName } = checkoutState.data.getBillingAddress() || {};\n\n        const defaultFormValues = {\n            ownershipType: OwnershipTypes.Personal,\n            accountType: AccountTypes.Savings,\n            accountNumber: '',\n            routingNumber: '',\n            businessName: '',\n            firstName: firstName || '',\n            lastName: lastName || '',\n            shouldSaveInstrument: false,\n            shouldSetAsDefaultInstrument: false,\n            instrumentId: currentInstrument?.bigpayToken || '',\n            orderConsent: false,\n        };\n\n        for (const [key, value] of Object.entries(defaultFormValues)) {\n            setFieldValue(key, value);\n        }\n    };\n\n    useEffect(() => {\n        resetFormValues();\n    }, [currentInstrument?.bigpayToken]);\n\n    const shouldShowForm =\n        !shouldShowInstrumentFieldset || shouldCreateNewInstrument || shouldConfirmInstrument;\n    const shouldShowMandateTextCheckbox = shouldShowForm && isValidForm && !shouldConfirmInstrument;\n\n    useEffect(() => {\n        if (shouldShowForm) {\n            const validate = async () => {\n                const braintreeAchFormValues = getFormValues();\n                const isValid = await validateBraintreeAchForm(braintreeAchFormValues);\n\n                if (!isValid && getFieldValue('orderConsent')) {\n                    setFieldValue('orderConsent', false);\n                }\n\n                setIsValidForm(isValid);\n            };\n\n            void validate();\n        } else {\n            resetFormValidation();\n        }\n    }, [\n        getFormValues,\n        setFieldValue,\n        setIsValidForm,\n        shouldShowForm,\n        validateBraintreeAchForm,\n        resetFormValidation,\n    ]);\n\n    useEffect(() => {\n        const mandateTextConfirmationCheckboxValue = getFieldValue('orderConsent');\n\n        const inValidForInstrumentConfirmation = shouldConfirmInstrument && !isValidForm;\n        const inValidForDefaultTransactions =\n            shouldShowMandateTextCheckbox && !mandateTextConfirmationCheckboxValue;\n\n        const shouldDisableSubmit = shouldShowForm\n            ? inValidForInstrumentConfirmation || inValidForDefaultTransactions\n            : false;\n\n        disableSubmit(method, shouldDisableSubmit);\n    }, [disableSubmit, getFieldValue, isValidForm, method, shouldShowMandateTextCheckbox]);\n\n    return (\n        <div className=\"checkout-ach-form\" data-test=\"checkout-ach-form\">\n            {shouldShowInstrumentFieldset && (\n                <div className=\"checkout-ach-form__instrument\">\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                </div>\n            )}\n\n            {shouldConfirmInstrument && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            {shouldShowForm && <BraintreeAchFormFields />}\n\n            {isInstrumentFeatureAvailable && (\n                <StoreInstrumentFieldset\n                    instrumentId={currentInstrument?.bigpayToken}\n                    instruments={accountInstruments}\n                    isAccountInstrument\n                />\n            )}\n\n            {shouldShowMandateTextCheckbox && (\n                <BraintreeAchMandateText\n                    isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                    updateMandateText={updateMandateText}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeAchPaymentForm;\n","import React, { type FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeAchPaymentForm from './components/BraintreeAchPaymentForm';\n\nconst BraintreeAchPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const currentMandateTextRef = useRef('');\n    const updateMandateText = (currentMandateText: string) => {\n        currentMandateTextRef.current = currentMandateText;\n    };\n\n    useEffect(() => {\n        const initializePaymentOrThrow = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    braintreeach: {\n                        getMandateText: () => currentMandateTextRef.current,\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePaymentOrThrow();\n\n        return () => {\n            const deinitializePaymentOrThrow = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePaymentOrThrow();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = checkoutState.data.getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeAchPaymentForm\n                                method={method}\n                                updateMandateText={updateMandateText}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeAchPaymentMethod,\n    [{ id: 'braintreeach' }],\n);\n","import { noop } from 'lodash';\nimport { useCallback, useMemo } from 'react';\n\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nexport const usePropsToOnMount = (props: PaymentMethodProps): (() => () => void) => {\n    const { checkoutService, method, onUnhandledError = noop } = props;\n    const { initializePayment, deinitializePayment } = checkoutService;\n\n    const options = useMemo(\n        () => ({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        }),\n        [method.gateway, method.id],\n    );\n\n    const onInit = useCallback(() => initializePayment(options), [initializePayment, options]);\n    const onDeinit = useCallback(\n        () => deinitializePayment(options),\n        [deinitializePayment, options],\n    );\n\n    return useCallback(() => {\n        onInit().catch(onUnhandledError);\n\n        return () => {\n            onDeinit().catch(onUnhandledError);\n        };\n    }, [onInit, onUnhandledError, onDeinit]);\n};\n","import { type ComponentType } from 'react';\n\nimport { HostedCreditCardPaymentMethod } from '@bigcommerce/checkout/hosted-credit-card-integration';\n\nimport { NoUI } from './NoUI';\n\ntype ComponentMap = Record<string, ComponentType<any>>;\n\nexport const initializationComponentMap: ComponentMap = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    card_ui: HostedCreditCardPaymentMethod,\n    none: NoUI,\n};\n","import React, { useEffect } from 'react';\n\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { usePropsToOnMount } from './usePropsToOnMount';\n\nexport const NoUI = (props: PaymentMethodProps) => {\n    const onMount = usePropsToOnMount(props);\n\n    useEffect(onMount, [onMount]);\n\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n};\n","import { noop } from 'lodash';\nimport React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { initializationComponentMap } from './initializationComponentMap';\n\nconst PPSDKPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, onUnhandledError = noop } = props;\n\n    const componentKey = method.initializationStrategy?.type || '';\n    const Component = initializationComponentMap[componentKey];\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!Component) {\n        onUnhandledError(new Error('PPSDK initialization strategy not found'));\n\n        return null;\n    }\n\n    return <Component {...props} />;\n};\n\nexport default toResolvableComponent(PPSDKPaymentMethod, [\n    {\n        type: 'PAYMENT_TYPE_SDK',\n    },\n]);\n","import classNames from 'classnames';\nimport React, { forwardRef, type Ref, type TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n    isFloatingLabelEnabled?: boolean;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, isFloatingLabelEnabled, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => {\n        return (\n            <textarea\n                {...rest}\n                className={\n                    className ||\n                    classNames(\n                        { 'floating-textarea': isFloatingLabelEnabled },\n                        'form-input',\n                        'optimizedCheckout-form-input',\n                        additionalClassName,\n                    )\n                }\n                data-test={testId}\n                ref={ref}\n            />\n        );\n    },\n);\n\nexport default TextArea;\n","import React, { type FunctionComponent, type ReactNode, useCallback } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize } from '../button';\n\nimport Modal from './Modal';\nimport './ModalLink.scss';\nimport ModalTrigger, { type ModalTriggerModalProps } from './ModalTrigger';\n\nexport interface ModalLinkProps {\n    header: ReactNode;\n    body: ReactNode;\n    children?: ReactNode;\n}\n\nconst ModalLink: FunctionComponent<ModalLinkProps> = ({ children, body, header }) => {\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <Modal\n                {...props}\n                additionalBodyClassName=\"modal--withText\"\n                footer={\n                    <Button onClick={props.onRequestClose} size={ButtonSize.Small}>\n                        <TranslatedString id=\"common.ok_action\" />\n                    </Button>\n                }\n                header={header}\n                shouldShowCloseButton={true}\n            >\n                {body}\n            </Modal>\n        ),\n        [header, body],\n    );\n\n    return (\n        <ModalTrigger modal={renderModal}>\n            { }\n            {({ onClick }) => <a onClick={preventDefault(onClick)}>{children}</a>}\n        </ModalTrigger>\n    );\n};\n\nexport default ModalLink;\n","import React, { Fragment, type FunctionComponent } from 'react';\n\nconst MultiLineText: FunctionComponent<{ children: string }> = ({ children }) => (\n    <>\n        {children.split('\\n').map((line, key) => (\n            <Fragment key={key}>\n                {line}\n                <br />\n            </Fragment>\n        ))}\n    </>\n);\n\nexport default MultiLineText;\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { parseAnchor } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedHtml, TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField, Fieldset, FormField, Legend, TextArea } from '../ui/form';\nimport { ModalHeader, ModalLink } from '../ui/modal';\nimport { MultiLineText } from '../ui/text';\n\nexport enum TermsConditionsType {\n    Link = 'link',\n    TextArea = 'textarea',\n    Modal = 'modal',\n}\n\nexport type TermsConditionsFieldProps =\n    | TermsConditionsLinkFieldProps\n    | TermsConditionsTextAreaFieldProps;\n\ninterface TermsConditionsLinkFieldProps {\n    name: string;\n    type: TermsConditionsType.Link;\n    url: string;\n}\n\ninterface TermsConditionsTextAreaFieldProps {\n    name: string;\n    terms: string;\n    type: TermsConditionsType.TextArea | TermsConditionsType.Modal;\n}\n\ninterface TermsConditionsTextFieldProps {\n    name: string;\n    terms: string;\n}\n\nconst BaseTermsConditionsModalCheckboxField: FunctionComponent<\n    TermsConditionsTextFieldProps & WithLanguageProps\n> = ({ language, name, terms }) => {\n    const translatedLabel = language.translate('terms_and_conditions.agreement_with_link_text', {\n        url: '',\n    });\n    const parsedLabel = parseAnchor(translatedLabel);\n\n    const labelContent = parsedLabel ? (\n        <>\n            {parsedLabel[0]}\n            <ModalLink\n                body={<MultiLineText>{terms}</MultiLineText>}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"terms_and_conditions.heading\" />\n                    </ModalHeader>\n                }\n            >\n                {parsedLabel[1]}\n            </ModalLink>\n            {parsedLabel[2]}\n        </>\n    ) : (\n        translatedLabel\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsModalCheckboxField = withLanguage(BaseTermsConditionsModalCheckboxField);\n\ninterface TermsConditionsCheckboxFieldProps {\n    name: string;\n    type: TermsConditionsType;\n    url?: string;\n}\n\nconst TermsConditionsCheckboxField: FunctionComponent<TermsConditionsCheckboxFieldProps> = ({\n    name,\n    url,\n}) => {\n    const labelContent = useMemo(\n        () =>\n            url ? (\n                <TranslatedHtml data={{ url }} id=\"terms_and_conditions.agreement_with_link_text\" />\n            ) : (\n                <TranslatedString id=\"terms_and_conditions.agreement_text\" />\n            ),\n        [url],\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsTextField: FunctionComponent<TermsConditionsTextFieldProps> = ({\n    name,\n    terms,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextArea defaultValue={terms} name={field.name} readOnly />,\n        [terms],\n    );\n\n    return <FormField input={renderInput} name={`${name}Text`} />;\n};\n\nconst TermsConditionsFieldset: FunctionComponent<TermsConditionsFieldProps> = (props) => {\n    const { type } = props;\n\n    return (\n        <Fieldset\n            additionalClassName=\"checkout-terms\"\n            legend={\n                <Legend>\n                    <TranslatedString id=\"terms_and_conditions.terms_and_conditions_heading\" />\n                </Legend>\n            }\n        >\n            {isTermsConditionsTextArea(props) && <TermsConditionsTextField {...props} />}\n            {isTermsConditionModal(props) && type === TermsConditionsType.Modal ? (\n                <TermsConditionsModalCheckboxField {...props} />\n            ) : (\n                <TermsConditionsCheckboxField {...props} />\n            )}\n        </Fieldset>\n    );\n};\n\nfunction isTermsConditionsTextArea(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.TextArea;\n}\n\nfunction isTermsConditionModal(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.Modal;\n}\n\nexport default memo(TermsConditionsFieldset);\n","import { type TranslationData } from '@bigcommerce/checkout-sdk';\nimport { includes } from 'lodash';\n\nexport default function mapSubmitOrderErrorMessage(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n    shouldLocalise: boolean,\n): string {\n    switch (error.type) {\n        case 'not_initialized':\n            return translate('payment.payment_error');\n\n        case 'custom_provider_execute_error':\n            return translate(error.subtype);\n\n        case 'payment_cancelled':\n            return translate('payment.payment_cancelled');\n\n        case 'payment_method_invalid':\n            return translate('payment.payment_method_disabled_error');\n\n        case 'tax_provider_unavailable':\n            return translate('payment.tax_provider_unavailable');\n\n        case 'cart_changed':\n            return translate('shipping.cart_change_error');\n\n        case 'cart_consistency':\n            return translate('cart.consistency_error');\n\n        default:\n            if (\n                includes(\n                    [\n                        'order_could_not_be_finalized_error',\n                        'provider_fatal_error',\n                        'payment_invalid',\n                        'provider_error',\n                        'provider_widget_error',\n                        'user_payment_error',\n                    ],\n                    error.body && error.body.type,\n                )\n            ) {\n                return translate('payment.payment_method_error', { message: error.message });\n            }\n\n            if (shouldLocalise && error.body && error.body.errors && error.body.errors.length) {\n                const messages = error.body.errors.map((err: { code: any }) =>\n                    translate(`payment.errors.${err.code}`),\n                );\n\n                return messages.join(' ');\n            }\n\n            if (error.message) {\n                return error.message;\n            }\n\n            return error.type === 'unrecoverable'\n                ? translate('common.unavailable_error')\n                : translate('payment.place_order_error');\n    }\n}\n\nexport function mapSubmitOrderErrorTitle(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n): string {\n    if (error.type === 'unrecoverable') {\n        return translate('common.unavailable_heading');\n    }\n\n    if (error.type === 'missing_shipping_method') {\n        return translate('common.missing_shipping_method_heading');\n    }\n\n    if (error.type === 'invalid_shipping_address') {\n        return translate('common.invalid_shipping_address');\n    }\n\n    return translate('common.error_heading');\n}\n","export interface ExpiryDate {\n    month: string;\n    year: string;\n}\n\nexport default function unformatCreditCardExpiryDate(value: string): ExpiryDate {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n\n    if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n        return { month: '', year: '' };\n    }\n\n    return {\n        month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n        year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n    };\n}\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n\nexport function parseUniquePaymentMethodId(value: string): {\n    methodId: string;\n    gatewayId?: string;\n} {\n    const [gatewayId, methodId] = value.includes('-') ? value.split('-') : [undefined, value];\n\n    return { gatewayId, methodId };\n}\n","import { type CardInstrumentFieldsetValues } from '../storedInstrument';\n\nexport default interface CreditCardFieldsetValues {\n    ccCustomerCode?: string;\n    ccCvv?: string;\n    ccExpiry: string;\n    ccName: string;\n    ccNumber: string;\n    shouldSaveInstrument?: boolean;\n}\n\nexport interface CreditCardValidationValues extends CardInstrumentFieldsetValues {\n    ccCvv?: string;\n    ccNumber?: string;\n}\n\nexport function hasCreditCardNumber(values: unknown): values is { ccNumber: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccNumber' in values;\n}\n\nexport function hasCreditCardExpiry(values: unknown): values is { ccExpiry: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccExpiry' in values;\n}\n","import React, { type FunctionComponent } from 'react';\n\nimport TermsConditionsField, { TermsConditionsType } from './TermsConditionsField';\n\nexport interface TermsConditionsProps {\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n}\n\nexport const TermsConditions: FunctionComponent<TermsConditionsProps> = ({\n    termsConditionsUrl,\n    termsConditionsText = '',\n}) => (\n    <>\n        {termsConditionsUrl ? (\n            <TermsConditionsField\n                name=\"terms\"\n                type={TermsConditionsType.Link}\n                url={termsConditionsUrl}\n            />\n        ) : (\n            <TermsConditionsField\n                name=\"terms\"\n                terms={termsConditionsText}\n                type={TermsConditionsType.TextArea}\n            />\n        )}\n    </>\n);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, type ObjectSchema, string, type StringSchema } from 'yup';\n\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { getTermsConditionsValidationSchema } from '../termsConditions';\n\nexport interface PaymentValidationSchemaOptions {\n    additionalValidation?: ObjectSchema<Partial<PaymentFormValues>>;\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPaymentValidationSchema({\n    additionalValidation,\n    isTermsConditionsRequired,\n    language,\n}: PaymentValidationSchemaOptions): ObjectSchema<PaymentFormValues> {\n    const schemaFields: {\n        paymentProviderRadio: StringSchema;\n    } = {\n        paymentProviderRadio: string().required(),\n    };\n\n    const schemaFieldsWithTerms = object(schemaFields).concat(\n        getTermsConditionsValidationSchema({ isTermsConditionsRequired, language }),\n    );\n\n    return additionalValidation\n        ? schemaFieldsWithTerms.concat(additionalValidation as any)\n        : schemaFieldsWithTerms;\n}\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, type BooleanSchema, object, type ObjectSchema } from 'yup';\n\nexport interface TermsConditionValidationSchemaOptions {\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getTermsConditionsValidationSchema({\n    isTermsConditionsRequired,\n    language,\n}: TermsConditionValidationSchemaOptions): ObjectSchema<{ terms?: boolean }> {\n    const schemaFields: {\n        terms?: BooleanSchema;\n    } = {};\n\n    if (isTermsConditionsRequired) {\n        schemaFields.terms = boolean().oneOf(\n            [true],\n            language.translate('terms_and_conditions.agreement_required_error'),\n        );\n    }\n\n    return object(schemaFields);\n}\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config && method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import React, { type FunctionComponent, memo, type ReactNode } from 'react';\n\nexport interface CustomChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n}\n\nconst CustomChecklistItem: FunctionComponent<CustomChecklistItemProps> = ({\n    content,\n    htmlId,\n}) => {\n    return (\n        <li\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item custom-checklist-item\"\n            id={htmlId}\n        >\n            {content}\n        </li>\n    );\n};\n\nexport default memo(CustomChecklistItem);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsPayLaterBanner: FunctionComponent<{\n    onUnhandledError?(error: Error): void\n}> = ({ onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n                bigcommerce_payments_paylater: {\n                    bannerContainerId: 'bigcommerce-payments-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n    }, []);\n\n    return (\n        <div\n            data-test='bigcommerce-payments-banner-container'\n            id='bigcommerce-payments-banner-container'\n        />\n    );\n};\n\nexport default BigCommercePaymentsPayLaterBanner;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\ninterface BraintreePaypalCreditBannerProps {\n    methodId: string;\n    containerId: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst BraintreePaypalCreditBanner: FunctionComponent<BraintreePaypalCreditBannerProps> = ({\n    methodId,\n    containerId,\n    onUnhandledError,\n}) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId,\n                braintree: {\n                    bannerContainerId: containerId,\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n\n        return () => {\n            try {\n                void checkoutService.deinitializePayment({\n                    methodId,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError?.(error);\n                }\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default BraintreePaypalCreditBanner;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst PaypalCommerceCreditBanner: FunctionComponent<{\n    methodId: string;\n    containerId: string;\n    onUnhandledError?(error: Error): void;\n}> = ({ methodId, containerId, onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId,\n                [methodId]: {\n                    bannerContainerId: containerId,\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default PaypalCommerceCreditBanner;\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { CreditCardIcon, filterInstrumentTypes } from './';\n\nexport interface CreditCardIconListProps {\n    selectedCardType?: string;\n    cardTypes: string[];\n}\n\nconst CreditCardIconList: FunctionComponent<CreditCardIconListProps> = ({\n    selectedCardType,\n    cardTypes,\n}) => {\n    const filteredCardTypes = filterInstrumentTypes(cardTypes);\n\n    if (!filteredCardTypes.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"creditCardTypes-list\">\n            {filteredCardTypes.map((type) => (\n                <li\n                    className={classNames(\n                        'creditCardTypes-list-item',\n                        { 'is-active': selectedCardType === type },\n                        { 'not-active': selectedCardType && selectedCardType !== type },\n                    )}\n                    data-test={`${type}-icon`}\n                    key={type}\n                >\n                    <span className=\"cardIcon\">\n                        <CreditCardIcon cardType={type} />\n                    </span>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(CreditCardIconList);\n","import { type CardInstrument, type CheckoutSettings, type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport classNames from 'classnames';\nimport { compact } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode } from 'react';\n\nimport { BigCommercePaymentsPayLaterBanner } from '@bigcommerce/checkout/bigcommerce-payments-utils'\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps , type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { BraintreePaypalCreditBanner, PaypalCommerceCreditBanner } from '@bigcommerce/checkout/paypal-utils';\nimport { CreditCardIconList, mapFromPaymentMethodCardType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport { isExperimentEnabled } from '../../common/utility';\n\nimport { hasCreditCardNumber } from './CreditCardFieldsetValues';\nimport getPaymentMethodDisplayName from './getPaymentMethodDisplayName';\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { isHostedCreditCardFieldsetValues } from './HostedCreditCardFieldsetValues';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodTitleProps {\n    method: PaymentMethod;\n    isSelected?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithPaymentTitleProps {\n    instruments: CardInstrument[];\n    checkoutSettings: CheckoutSettings;\n    storeCountryCode: string;\n    cdnBasePath: string;\n}\n\ninterface PaymentMethodSubtitleProps {\n    onUnhandledError?(error: Error): void;\n    methodId: string;\n}\n\ntype SubtitleType = ReactNode | ((subtitleProps?: PaymentMethodSubtitleProps) => ReactNode);\n\nexport function getPaymentMethodTitle(\n    language: LanguageService,\n    basePath: string,\n    checkoutSettings: CheckoutSettings,\n    storeCountryCode: string,\n): (method: PaymentMethod) => {\n    logoUrl: string;\n    titleText: string,\n    subtitle?: SubtitleType\n} {\n    const cdnPath = (path: string) => `${basePath}${path}`;\n\n    return (method) => {\n        const paymentWithLogo = method.initializationData?.methodsWithLogo\n            ? method.initializationData.methodsWithLogo\n            : [];\n        const methodName = getPaymentMethodName(language)(method);\n        const methodDisplayName = getPaymentMethodDisplayName(language)(method);\n        // TODO: API could provide the data below so UI can read simply read it.\n        // However, I'm not sure how we deal with translation yet. TBC.\n        const customTitles: { [key: string]: { logoUrl: string; titleText: string, subtitle?: ReactNode | ((props: any) => ReactNode) } } = {\n            [PaymentMethodType.CreditCard]: {\n                logoUrl: '',\n                titleText: methodName,\n            },\n            [PaymentMethodId.BraintreeVenmo]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.BraintreePaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps): ReactNode => (\n                    <BraintreePaypalCreditBanner containerId='braintree-credit-banner-container' {...props} />\n                ),\n            },\n            [PaymentMethodType.PaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeAch]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeLocalPaymentMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BigCommercePaymentsPayPal]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsPayLater]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.PaypalCommerce]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-credit-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodType.VisaCheckout]: {\n                logoUrl: cdnPath('/img/payment-providers/visa-checkout.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.Affirm]: {\n                logoUrl: cdnPath('/img/payment-providers/affirm-checkout-header.png'),\n                titleText: language.translate('payment.affirm_display_name_text'),\n            },\n            [PaymentMethodId.Afterpay]: {\n                logoUrl: isExperimentEnabled(checkoutSettings, 'PROJECT-6993.change_afterpay_logo_for_us_stores') && storeCountryCode === 'US' ? cdnPath('/img/payment-providers/afterpay-new-us.svg') : cdnPath('/img/payment-providers/afterpay-badge-blackonmint.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.AmazonPay]: {\n                logoUrl: cdnPath('/img/payment-providers/amazon-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.ApplePay]: {\n                logoUrl: cdnPath('/modules/checkout/applepay/images/applepay-header@2x.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Bolt]: {\n                logoUrl: '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Clearpay]: {\n                logoUrl: cdnPath('/img/payment-providers/clearpay-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.GooglePay]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.PayWithGoogle]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Humm]: {\n                logoUrl: cdnPath('/img/payment-providers/humm-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Klarna]: {\n                logoUrl: method.initializationData?.enableBillie\n                        ? cdnPath('/img/payment-providers/klarna-billie-header.png')\n                        : cdnPath('/img/payment-providers/klarna-header.png'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Laybuy]: {\n                logoUrl: cdnPath('/img/payment-providers/laybuy-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Masterpass]: {\n                logoUrl: 'https://masterpass.com/dyn/img/acc/global/mp_mark_hor_blk.svg',\n                titleText: '',\n            },\n            [PaymentMethodType.Paypal]: {\n                // TODO: method.id === PaymentMethodId.BraintreeVenmo should be removed after the PAYPAL-1380.checkout_button_strategies_update experiment removal\n                logoUrl:\n                    method.id === PaymentMethodId.BraintreeVenmo && method.logoUrl\n                        ? method.logoUrl\n                        : cdnPath('/img/payment-providers/paypalpaymentsprouk.png'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps): ReactNode => (\n                    <BraintreePaypalCreditBanner containerId='braintree-banner-container' {...props} />\n                ),\n            },\n            [PaymentMethodId.Quadpay]: {\n                logoUrl: cdnPath('/img/payment-providers/quadpay.png'),\n                titleText: language.translate('payment.quadpay_display_name_text'),\n            },\n            [PaymentMethodId.Sezzle]: {\n                logoUrl: cdnPath('/img/payment-providers/sezzle-checkout-header.png'),\n                titleText: language.translate('payment.sezzle_display_name_text'),\n            },\n            [PaymentMethodId.Zip]: {\n                logoUrl: cdnPath('/img/payment-providers/zip.png'),\n                titleText: language.translate('payment.zip_display_name_text'),\n            },\n            [PaymentMethodType.Barclaycard]: {\n                logoUrl: cdnPath(\n                    `/img/payment-providers/barclaycard_${method.id.toLowerCase()}.png`,\n                ),\n                titleText: '',\n            },\n            [PaymentMethodId.AdyenV2]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.AdyenV3]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Mollie]: {\n                logoUrl:\n                    method.method === 'credit_card'\n                        ? ''\n                        : cdnPath(`/img/payment-providers/mollie_${method.method}.svg`),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Checkoutcom]: {\n                logoUrl: ['credit_card', 'card', 'checkoutcom'].includes(method.id)\n                    ? ''\n                    : cdnPath(`/img/payment-providers/checkoutcom_${method.id.toLowerCase()}.svg`),\n                titleText: methodName,\n            },\n            [PaymentMethodId.StripeV3]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.StripeUPE]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.WorldpayAccess]: {\n                logoUrl: '',\n                titleText: language.translate('payment.credit_debit_card_text'),\n            },\n        };\n\n        if (method.gateway === PaymentMethodId.BlueSnapDirect) {\n            if (method.id === 'credit_card') {\n                return { logoUrl: '', titleText: language.translate('payment.credit_card_text') };\n            }\n\n            if (method.id === 'ecp') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_electronic_check_label') };\n            }\n\n            if (method.id === 'banktransfer') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_local_bank_transfer_label') };\n            }\n        }\n\n        if (method.id === PaymentMethodId.PaypalCommerceVenmo) {\n            return customTitles[PaymentMethodId.PaypalCommerceAlternativeMethod];\n        }\n\n        if (method.id === PaymentMethodId.BigCommercePaymentsVenmo) {\n            return customTitles[PaymentMethodId.BigCommercePaymentsAlternativeMethod];\n        }\n\n        // KLUDGE: 'paypal' is actually a credit card method. It is the only\n        // exception to the rule below. We should probably fix it on API level,\n        // but apparently it would break LCO if we are not careful.\n        if (\n            method.id === PaymentMethodId.PaypalPaymentsPro &&\n            method.method === PaymentMethodType.CreditCard\n        ) {\n            return customTitles[PaymentMethodType.CreditCard];\n        }\n\n        if (method.id === PaymentMethodId.Ratepay) {\n            return { logoUrl: method.logoUrl || '', titleText: language.translate('payment.ratepay.payment_method_title')};\n        }\n\n        return (\n            customTitles[method.gateway || ''] ||\n            customTitles[method.id] ||\n            customTitles[method.method] ||\n            customTitles[PaymentMethodType.CreditCard]\n        );\n    };\n}\n\nfunction getInstrumentForMethod(\n    instruments: CardInstrument[],\n    method: PaymentMethod,\n    values: PaymentFormValues\n): CardInstrument | undefined {\n    const instrumentsForMethod = instruments.filter(instrument => instrument.provider === method.id);\n    const selectedInstrument = instrumentsForMethod.find(instrument => instrument.bigpayToken === values.instrumentId);\n\n    return selectedInstrument;\n}\n\nconst PaymentMethodTitle: FunctionComponent<\n    PaymentMethodTitleProps &\n        WithLanguageProps &\n        WithPaymentTitleProps &\n        ConnectFormikProps<PaymentFormValues>\n> = ({ cdnBasePath, checkoutSettings, storeCountryCode, onUnhandledError, formik: { values }, instruments, isSelected, language, method }) => {\n    const methodName = getPaymentMethodName(language)(method);\n    const { logoUrl, titleText, subtitle } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(method);\n    const { themeV2 } = useThemeContext();\n\n    const getSelectedCardType = () => {\n        if (!isSelected) {\n            return;\n        }\n\n        const instrumentSelected = getInstrumentForMethod(instruments, method, values);\n\n        if (isHostedCreditCardFieldsetValues(values) && values.hostedForm.cardType) {\n            return values.hostedForm.cardType;\n        }\n\n        if (hasCreditCardNumber(values) && values.ccNumber) {\n            const { card } = number(values.ccNumber);\n\n            if (!card) {\n                return;\n            }\n\n            return card.type;\n        }\n\n        if (instrumentSelected) {\n            return instrumentSelected.brand;\n        }\n    };\n\n    const getSubtitle = () => {\n        const node = subtitle instanceof Function ? subtitle({ onUnhandledError, methodId: method.id }) : subtitle;\n\n        return node ? <div className=\"paymentProviderHeader-subtitleContainer\">\n            {node}\n        </div> : null\n    }\n\n    return (\n        <div className={\n            classNames(\n                'paymentProviderHeader-container',\n                {'paymentProviderHeader-container-googlePay': method.id.includes('googlepay')},\n            )\n        }>\n            <div\n                className=\"paymentProviderHeader-nameContainer\"\n                data-test={`payment-method-${method.id}`}\n            >\n                {logoUrl && (\n                    <img\n                        alt={`${methodName} icon`}\n                        className={classNames(\n                            'paymentProviderHeader-img',\n                            {'paymentProviderHeader-img-applePay': method.id === 'applepay'},\n                            {'paymentProviderHeader-img-googlePay': method.id.includes('googlepay')},\n                        )}\n                        data-test=\"payment-method-logo\"\n                        src={logoUrl}\n                    />\n                )}\n\n                {titleText && (\n                    <div className={classNames('paymentProviderHeader-name',\n                        { 'sub-header': themeV2 })}\n                        data-test=\"payment-method-name\">\n                        {titleText}\n                    </div>\n                )}\n                {getSubtitle()}\n            </div>\n            <div className=\"paymentProviderHeader-cc\">\n                <CreditCardIconList\n                    cardTypes={compact(method.supportedCards.map(mapFromPaymentMethodCardType))}\n                    selectedCardType={getSelectedCardType()}\n                />\n            </div>\n        </div>\n    );\n};\n\nfunction mapToCheckoutProps({ checkoutState }: CheckoutContextProps): WithPaymentTitleProps | null {\n    const {\n        data: { getConfig, getInstruments },\n    } = checkoutState;\n    const config = getConfig();\n\n    const instruments = getInstruments() || [];\n\n    if (!config) {\n        return null;\n    }\n\n    const storeCountryCode = config.storeProfile.storeCountryCode\n\n    return {\n        instruments,\n        checkoutSettings: config.checkoutSettings,\n        storeCountryCode,\n        cdnBasePath: config.cdnPath,\n    };\n}\n\nexport default connectFormik(\n    withLanguage(withCheckout(mapToCheckoutProps)(memo(PaymentMethodTitle))),\n);\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport PaymentMethodId from './PaymentMethodId';\n\nexport default function getPaymentMethodDisplayName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        const { displayName } = method.config;\n\n        const isCreditCard = displayName?.toLowerCase() === 'credit card';\n\n        if (\n            method.id === PaymentMethodId.PaypalCommerceCredit ||\n            method.id === PaymentMethodId.BigCommercePaymentsPayLater ||\n            method.id === PaymentMethodId.BraintreePaypalCredit\n        ) {\n            const { payPalCreditProductBrandName } = method.initializationData;\n\n            if (payPalCreditProductBrandName) {\n                return payPalCreditProductBrandName.credit || payPalCreditProductBrandName;\n            }\n\n            return 'Pay Later';\n        }\n\n        if (\n            (isCreditCard && method.id === PaymentMethodId.AdyenV2) ||\n            method.id === PaymentMethodId.AdyenV3\n        ) {\n            return language.translate('payment.credit_debit_card_text');\n        }\n\n        if (isCreditCard) {\n            return language.translate('payment.credit_card_text');\n        }\n\n        return displayName || '';\n    };\n}\n","interface HostedCreditCardFieldsetValues {\n    hostedForm: {\n        cardType?: string;\n        errors?: {\n            cardCode?: string;\n            cardExpiry?: string;\n            cardName?: string;\n            cardNumber?: string;\n        };\n    };\n}\n\nexport function isHostedCreditCardFieldsetValues(\n    value: unknown,\n): value is HostedCreditCardFieldsetValues {\n    if (!(value instanceof Object)) {\n        return false;\n    }\n\n    if (!('hostedForm' in value)) {\n        return false;\n    }\n\n    return true;\n}\n","import React, { type ReactNode } from 'react';\n\nimport type PaymentFormService from '../../PaymentFormService';\n\nimport { PaymentFormContext } from './PaymentFormContext';\n\ninterface PaymentFormProviderProps {\n    children?: ReactNode;\n    paymentForm: PaymentFormService;\n}\n\nexport const PaymentFormProvider = ({ children, paymentForm }: PaymentFormProviderProps) => {\n    return (\n        <PaymentFormContext.Provider value={{ paymentForm }}>\n            {children}\n        </PaymentFormContext.Provider>\n    );\n};\n","import { lazy } from 'react';\n\nconst AdyenV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"adyen-v2-payment-method\" */'@bigcommerce/checkout/adyen-integration').then(module => ({ default: module.AdyenV2PaymentMethod })));\nconst AdyenV3PaymentMethod = lazy(() => import(/* webpackChunkName: \"adyen-v3-payment-method\" */'@bigcommerce/checkout/adyen-integration').then(module => ({ default: module.AdyenV3PaymentMethod })));\nconst AffirmPaymentMethod = lazy(() => import(/* webpackChunkName: \"affirm-payment-method\" */'@bigcommerce/checkout/affirm-integration').then(module => ({ default: module.AffirmPaymentMethod })));\nconst AfterpayPaymentMethod = lazy(() => import(/* webpackChunkName: \"afterpay-payment-method\" */'@bigcommerce/checkout/afterpay-integration').then(module => ({ default: module.AfterpayPaymentMethod })));\nconst AmazonPayV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"amazon-pay-v2-payment-method\" */'@bigcommerce/checkout/amazon-pay-v2-integration').then(module => ({ default: module.AmazonPayV2PaymentMethod })));\nconst ApplePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"apple-pay-payment-method\" */'@bigcommerce/checkout/apple-pay-integration').then(module => ({ default: module.ApplePayPaymentMethod })));\nconst BarclaycardPaymentMethod = lazy(() => import(/* webpackChunkName: \"barclaycard-payment-method\" */'@bigcommerce/checkout/barclay-integration').then(module => ({ default: module.BarclaycardPaymentMethod })));\nconst BigCommercePaymentsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsPaymentMethod })));\nconst BigCommercePaymentsAPMsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-apms-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsAPMsPaymentMethod })));\nconst BigCommercePaymentsCreditCardsPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-credit-cards-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsCreditCardsPaymentMethod })));\nconst BigCommercePaymentsFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-fastlane-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsFastlanePaymentMethod })));\nconst BigCommercePaymentsPayLaterPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-pay-later-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsPayLaterPaymentMethod })));\nconst BigCommercePaymentsVenmoPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-venmo-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsVenmoPaymentMethod })));\nconst BigCommercePaymentsRatePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"big-commerce-payments-rate-pay-payment-method\" */'@bigcommerce/checkout/bigcommerce-payments-integration').then(module => ({ default: module.BigCommercePaymentsRatePayPaymentMethod })));\nconst BlueSnapDirectEcpPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-ecp-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectEcpPaymentMethod })));\nconst BlueSnapDirectAlternativePaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-alternative-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectAlternativePaymentMethod })));\nconst BlueSnapDirectSepaPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-sepa-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectSepaPaymentMethod })));\nconst BlueSnapDirectIdealPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-ideal-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectIdealPaymentMethod })));\nconst BlueSnapV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-v2-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapV2PaymentMethod })));\nconst BlueSnapDirectPayByBankPaymentMethod = lazy(() => import(/* webpackChunkName: \"blue-snap-direct-pay-by-bank-payment-method\" */'@bigcommerce/checkout/bluesnap-direct-integration').then(module => ({ default: module.BlueSnapDirectPayByBankPaymentMethod })));\nconst BoltClientPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-client-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltClientPaymentMethod })));\nconst BoltEmbeddedPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-embedded-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltEmbeddedPaymentMethod })));\nconst BoltPaymentMethod = lazy(() => import(/* webpackChunkName: \"bolt-payment-method\" */'@bigcommerce/checkout/bolt-integration').then(module => ({ default: module.BoltPaymentMethod })));\nconst BraintreeAchPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-ach-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeAchPaymentMethod })));\nconst BraintreeFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-fastlane-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeFastlanePaymentMethod })));\nconst BraintreeLocalPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-local-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeLocalPaymentMethod })));\nconst BraintreePaypalPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-paypal-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreePaypalPaymentMethod })));\nconst VisaCheckoutPaymentMethod = lazy(() => import(/* webpackChunkName: \"visa-checkout-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.VisaCheckoutPaymentMethod })));\nconst BraintreeVenmoPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-venmo-payment-method\" */'@bigcommerce/checkout/braintree-integration').then(module => ({ default: module.BraintreeVenmoPaymentMethod })));\nconst CheckoutcomCustomPaymentMethod = lazy(() => import(/* webpackChunkName: \"checkoutcom-custom-payment-method\" */'@bigcommerce/checkout/checkoutcom-integration').then(module => ({ default: module.CheckoutcomCustomPaymentMethod })));\nconst ClearpayPaymentMethod = lazy(() => import(/* webpackChunkName: \"clearpay-payment-method\" */'@bigcommerce/checkout/clearpay-integration').then(module => ({ default: module.ClearpayPaymentMethod })));\nconst GooglePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"google-pay-payment-method\" */'@bigcommerce/checkout/google-pay-integration').then(module => ({ default: module.GooglePayPaymentMethod })));\nconst HostedCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-credit-card-payment-method\" */'@bigcommerce/checkout/hosted-credit-card-integration').then(module => ({ default: module.HostedCreditCardPaymentMethod })));\nconst HostedPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-payment-method\" */'@bigcommerce/checkout/hosted-payment-integration').then(module => ({ default: module.HostedPaymentMethod })));\nconst KlarnaPaymentMethod = lazy(() => import(/* webpackChunkName: \"klarna-payment-method\" */'@bigcommerce/checkout/klarna-integration').then(module => ({ default: module.KlarnaPaymentMethod })));\nconst KlarnaV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"klarna-v2-payment-method\" */'@bigcommerce/checkout/klarna-integration').then(module => ({ default: module.KlarnaV2PaymentMethod })));\nconst MolliePaymentMethod = lazy(() => import(/* webpackChunkName: \"mollie-payment-method\" */'@bigcommerce/checkout/mollie-integration').then(module => ({ default: module.MolliePaymentMethod })));\nconst MonerisPaymentMethod = lazy(() => import(/* webpackChunkName: \"moneris-payment-method\" */'@bigcommerce/checkout/moneris-integration').then(module => ({ default: module.MonerisPaymentMethod })));\nconst OfflinePaymentMethod = lazy(() => import(/* webpackChunkName: \"offline-payment-method\" */'@bigcommerce/checkout/offline-payment-integration').then(module => ({ default: module.OfflinePaymentMethod })));\nconst PayPalCommerceAPMsPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-apms-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceAPMsPaymentMethod })));\nconst PayPalCommerceCreditPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-credit-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceCreditPaymentMethod })));\nconst PayPalCommerceCreditCardsPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-credit-cards-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceCreditCardsPaymentMethod })));\nconst PayPalCommerceFastlanePaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-fastlane-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceFastlanePaymentMethod })));\nconst PayPalCommercePaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommercePaymentMethod })));\nconst PayPalCommerceVenmoPaymentMethod = lazy(() => import(/* webpackChunkName: \"pay-pal-commerce-venmo-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PayPalCommerceVenmoPaymentMethod })));\nconst PaypalCommerceRatePayPaymentMethod = lazy(() => import(/* webpackChunkName: \"paypal-commerce-rate-pay-payment-method\" */'@bigcommerce/checkout/paypal-commerce-integration').then(module => ({ default: module.PaypalCommerceRatePayPaymentMethod })));\nconst PaypalExpressPaymentMethod = lazy(() => import(/* webpackChunkName: \"paypal-express-payment-method\" */'@bigcommerce/checkout/paypal-express-integration').then(module => ({ default: module.PaypalExpressPaymentMethod })));\nconst PPSDKPaymentMethod = lazy(() => import(/* webpackChunkName: \"ppsdkpayment-method\" */'@bigcommerce/checkout/ppsdk-integration').then(module => ({ default: module.PPSDKPaymentMethod })));\nconst SquareV2PaymentMethod = lazy(() => import(/* webpackChunkName: \"square-v2-payment-method\" */'@bigcommerce/checkout/squarev2-integration').then(module => ({ default: module.SquareV2PaymentMethod })));\nconst StripeOCSPaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-ocspayment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeOCSPaymentMethod })));\nconst StripeUPEPaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-upepayment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeUPEPaymentMethod })));\nconst StripeV3PaymentMethod = lazy(() => import(/* webpackChunkName: \"stripe-v3-payment-method\" */'@bigcommerce/checkout/stripe-integration').then(module => ({ default: module.StripeV3PaymentMethod })));\nconst WorldpayCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"worldpay-credit-card-payment-method\" */'@bigcommerce/checkout/worldpay-access-integration').then(module => ({ default: module.WorldpayCreditCardPaymentMethod })));\n\nexport {\n  AdyenV2PaymentMethod,\n  AdyenV3PaymentMethod,\n  AffirmPaymentMethod,\n  AfterpayPaymentMethod,\n  AmazonPayV2PaymentMethod,\n  ApplePayPaymentMethod,\n  BarclaycardPaymentMethod,\n  BigCommercePaymentsPaymentMethod,\n  BigCommercePaymentsAPMsPaymentMethod,\n  BigCommercePaymentsCreditCardsPaymentMethod,\n  BigCommercePaymentsFastlanePaymentMethod,\n  BigCommercePaymentsPayLaterPaymentMethod,\n  BigCommercePaymentsVenmoPaymentMethod,\n  BigCommercePaymentsRatePayPaymentMethod,\n  BlueSnapDirectEcpPaymentMethod,\n  BlueSnapDirectAlternativePaymentMethod,\n  BlueSnapDirectSepaPaymentMethod,\n  BlueSnapDirectIdealPaymentMethod,\n  BlueSnapV2PaymentMethod,\n  BlueSnapDirectPayByBankPaymentMethod,\n  BoltClientPaymentMethod,\n  BoltEmbeddedPaymentMethod,\n  BoltPaymentMethod,\n  BraintreeAchPaymentMethod,\n  BraintreeFastlanePaymentMethod,\n  BraintreeLocalPaymentMethod,\n  BraintreePaypalPaymentMethod,\n  VisaCheckoutPaymentMethod,\n  BraintreeVenmoPaymentMethod,\n  CheckoutcomCustomPaymentMethod,\n  ClearpayPaymentMethod,\n  GooglePayPaymentMethod,\n  HostedCreditCardPaymentMethod,\n  HostedPaymentMethod,\n  KlarnaPaymentMethod,\n  KlarnaV2PaymentMethod,\n  MolliePaymentMethod,\n  MonerisPaymentMethod,\n  OfflinePaymentMethod,\n  PayPalCommerceAPMsPaymentMethod,\n  PayPalCommerceCreditPaymentMethod,\n  PayPalCommerceCreditCardsPaymentMethod,\n  PayPalCommerceFastlanePaymentMethod,\n  PayPalCommercePaymentMethod,\n  PayPalCommerceVenmoPaymentMethod,\n  PaypalCommerceRatePayPaymentMethod,\n  PaypalExpressPaymentMethod,\n  PPSDKPaymentMethod,\n  SquareV2PaymentMethod,\n  StripeOCSPaymentMethod,\n  StripeUPEPaymentMethod,\n  StripeV3PaymentMethod,\n  WorldpayCreditCardPaymentMethod,\n};\n\nimport { PaymentMethodId } from '@bigcommerce/checkout/payment-integration-api';\n\nexport const ComponentRegistry = {\n  'AdyenV2PaymentMethod': [\n    { \"gateway\": \"adyenv2\" }\n  ],\n  'AdyenV3PaymentMethod': [\n    { \"gateway\": \"adyenv3\" }\n  ],\n  'AffirmPaymentMethod': [\n    { \"id\": \"affirm\" }\n  ],\n  'AfterpayPaymentMethod': [\n    { \"gateway\": \"afterpay\" }\n  ],\n  'AmazonPayV2PaymentMethod': [\n    { \"id\": \"amazonpay\" }\n  ],\n  'ApplePayPaymentMethod': [\n    { \"id\": \"applepay\" }\n  ],\n  'BarclaycardPaymentMethod': [\n    { \"gateway\": \"barclaycard\" }\n  ],\n  'BigCommercePaymentsAPMsPaymentMethod': [\n    { \"gateway\": \"bigcommerce_payments_apms\" }\n  ],\n  'BigCommercePaymentsCreditCardsPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_creditcards\" }\n  ],\n  'BigCommercePaymentsFastlanePaymentMethod': [\n    { \"id\": \"bigcommerce_payments_fastlane\" }\n  ],\n  'BigCommercePaymentsPayLaterPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_paylater\" }\n  ],\n  'BigCommercePaymentsPaymentMethod': [\n    { \"id\": \"bigcommerce_payments\" }\n  ],\n  'BigCommercePaymentsRatePayPaymentMethod': [\n    { \"gateway\": \"bigcommerce_payments_apms\", \"id\": \"ratepay\" }\n  ],\n  'BigCommercePaymentsVenmoPaymentMethod': [\n    { \"id\": \"bigcommerce_payments_venmo\" }\n  ],\n  'BlueSnapDirectAlternativePaymentMethod': [\n    { \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectEcpPaymentMethod': [\n    { \"id\": \"ecp\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectIdealPaymentMethod': [\n    { \"id\": \"ideal\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectPayByBankPaymentMethod': [\n    { \"id\": \"pay_by_bank\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapDirectSepaPaymentMethod': [\n    { \"id\": \"sepa_direct_debit\", \"gateway\": \"bluesnapdirect\" }\n  ],\n  'BlueSnapV2PaymentMethod': [\n    { \"gateway\": \"bluesnapv2\" }\n  ],\n  'BoltPaymentMethod': [\n    { \"id\": \"bolt\" }\n  ],\n  'BraintreeAchPaymentMethod': [\n    { \"id\": \"braintreeach\" }\n  ],\n  'BraintreeFastlanePaymentMethod': [\n    { \"id\": \"braintreeacceleratedcheckout\" }\n  ],\n  'BraintreeLocalPaymentMethod': [\n    { \"gateway\": \"braintreelocalmethods\" }\n  ],\n  'BraintreePaypalPaymentMethod': [\n    { \"id\": \"braintreepaypal\" }\n  ],\n  'BraintreeVenmoPaymentMethod': [\n    { \"id\": \"braintreevenmo\" }\n  ],\n  'CheckoutcomCustomPaymentMethod': [\n    { \"gateway\": \"checkoutcom\", \"id\": \"ideal\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"fawry\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"oxxo\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"boleto\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"sepa\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"qpay\" },\n    { \"gateway\": \"checkoutcom\", \"id\": \"p24\" }\n  ],\n  'ClearpayPaymentMethod': [\n    { \"gateway\": \"clearpay\" }\n  ],\n  'GooglePayPaymentMethod': [\n    { \"id\": PaymentMethodId.AdyenV2GooglePay },\n    { \"id\": PaymentMethodId.AdyenV3GooglePay },\n    { \"id\": PaymentMethodId.AuthorizeNetGooglePay },\n    { \"id\": PaymentMethodId.BNZGooglePay },\n    { \"id\": PaymentMethodId.BraintreeGooglePay },\n    { \"id\": PaymentMethodId.PayPalCommerceGooglePay },\n    { \"id\": PaymentMethodId.BigCommercePaymentsGooglePay },\n    { \"id\": PaymentMethodId.CheckoutcomGooglePay },\n    { \"id\": PaymentMethodId.CybersourceV2GooglePay },\n    { \"id\": PaymentMethodId.OrbitalGooglePay },\n    { \"id\": PaymentMethodId.StripeGooglePay },\n    { \"id\": PaymentMethodId.StripeUPEGooglePay },\n    { \"id\": PaymentMethodId.WorldpayAccessGooglePay },\n    { \"id\": PaymentMethodId.TdOnlineMartGooglePay },\n    { \"id\": PaymentMethodId.StripeOCSGooglePay }\n  ],\n  'HostedCreditCardPaymentMethod': [\n    { \"id\": \"hosted-credit-card\" },\n    { \"id\": \"credit_card\", \"gateway\": \"bluesnapdirect\" },\n    { \"id\": \"tdonlinemart\" }\n  ],\n  'HostedPaymentMethod': [\n    { \"id\": \"quadpay\" },\n    { \"id\": \"sezzle\" },\n    { \"id\": \"zip\" }\n  ],\n  'KlarnaPaymentMethod': [\n    { \"id\": \"klarna\" }\n  ],\n  'KlarnaV2PaymentMethod': [\n    { \"gateway\": \"klarna\" }\n  ],\n  'MolliePaymentMethod': [\n    { \"gateway\": \"mollie\" },\n    { \"gateway\": \"mollie\", \"id\": \"applepay\" }\n  ],\n  'MonerisPaymentMethod': [\n    { \"id\": \"moneris\" }\n  ],\n  'OfflinePaymentMethod': [\n    { \"type\": \"PAYMENT_TYPE_OFFLINE\" }\n  ],\n  'PayPalCommerceAPMsPaymentMethod': [\n    { \"gateway\": \"paypalcommercealternativemethods\" }\n  ],\n  'PayPalCommerceCreditCardsPaymentMethod': [\n    { \"id\": \"paypalcommercecreditcards\" }\n  ],\n  'PayPalCommerceCreditPaymentMethod': [\n    { \"id\": \"paypalcommercecredit\" }\n  ],\n  'PayPalCommerceFastlanePaymentMethod': [\n    { \"id\": \"paypalcommerceacceleratedcheckout\" }\n  ],\n  'PayPalCommercePaymentMethod': [\n    { \"id\": \"paypalcommerce\" }\n  ],\n  'PaypalCommerceRatePayPaymentMethod': [\n    { \"gateway\": \"paypalcommercealternativemethods\", \"id\": \"ratepay\" }\n  ],\n  'PayPalCommerceVenmoPaymentMethod': [\n    { \"id\": \"paypalcommercevenmo\" }\n  ],\n  'PaypalExpressPaymentMethod': [\n    { \"id\": \"paypalexpress\" }\n  ],\n  'PPSDKPaymentMethod': [\n    { \"type\": \"PAYMENT_TYPE_SDK\" }\n  ],\n  'SquareV2PaymentMethod': [\n    { \"id\": \"squarev2\" }\n  ],\n  'StripeOCSPaymentMethod': [\n    { \"gateway\": \"stripeocs\", \"id\": \"optimized_checkout\" }\n  ],\n  'StripeUPEPaymentMethod': [\n    { \"gateway\": \"stripeupe\" },\n    { \"gateway\": \"stripeupe\", \"id\": \"klarna\" }\n  ],\n  'StripeV3PaymentMethod': [\n    { \"gateway\": \"stripev3\" }\n  ],\n  'VisaCheckoutPaymentMethod': [\n    { \"id\": PaymentMethodId.BraintreeVisaCheckout }\n  ],\n  'WorldpayCreditCardPaymentMethod': [\n    { \"id\": \"worldpayaccess\" }\n  ]\n} as const;\n\n        \n","import {\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type PaymentInitializeOptions,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, lazy, memo, Suspense } from 'react';\n\nimport { type CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nconst BraintreeCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-credit-card-payment-method\" */'./BraintreeCreditCardPaymentMethod'));\nconst HostedCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-credit-card-payment-method\" */'./HostedCreditCardPaymentMethod'));\nconst HostedPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-payment-method\" */'./HostedPaymentMethod'));\nconst PaypalPaymentsProPaymentMethod = lazy(() => import(/* webpackChunkName: \"paypal-payments-pro-payment-method\" */'./PaypalPaymentsProPaymentMethod'));\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError?(error: Error): void;\n    submitForm?(): void;\n}\n\nexport interface WithCheckoutPaymentMethodProps {\n    isInitializing: boolean;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n}\n\n/**\n * If possible, try to avoid having components that are specific to a specific\n * payment provider or method. Instead, try to generalise the requirements and\n * use components that can are reusable for multiple payment methods. i.e.:\n * CreditCardPaymentMethod, HostedPaymentMethod etc... If it is really necessary\n * for a particular payment method, you may write a method-specific component for\n * the purpose of configuring a general-purpose component in order to fulfill\n * its specific product or technical requirements.\n */\nconst PaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & WithCheckoutPaymentMethodProps\n> = (props) => {\n    const { method } = props;\n\n    if (method.id === PaymentMethodId.Braintree) {\n        return <Suspense><BraintreeCreditCardPaymentMethod {...props} /></Suspense>;\n    }\n\n    if (\n        method.type !== PaymentMethodProviderType.Hosted &&\n        method.id === PaymentMethodId.PaypalPaymentsPro\n    ) {\n        return <Suspense><PaypalPaymentsProPaymentMethod {...props} /></Suspense>;\n    }\n\n    if (\n        method.id === PaymentMethodId.Humm ||\n        method.id === PaymentMethodId.Laybuy ||\n        method.method === PaymentMethodType.Paypal ||\n        method.method === PaymentMethodType.PaypalCredit ||\n        method.type === PaymentMethodProviderType.Hosted\n    ) {\n        return <Suspense><HostedPaymentMethod {...props} /></Suspense>;\n    }\n\n    // NOTE: Some payment methods have `method` as `credit-card` but they are\n    // actually not. Therefore, as a workaround, we are doing the following\n    // check last.\n    if (\n        method.method === PaymentMethodType.CreditCard ||\n        method.type === PaymentMethodProviderType.Api\n    ) {\n        return <Suspense><HostedCreditCardPaymentMethod {...props} /></Suspense>;\n    }\n\n    return null;\n};\n\nfunction mapToWithCheckoutPaymentMethodProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaymentMethodProps {\n    const {\n        statuses: { isInitializingPayment },\n    } = checkoutState;\n\n    return {\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        deinitializePayment: checkoutService.deinitializePayment,\n        initializeCustomer: checkoutService.initializeCustomer,\n        initializePayment: checkoutService.initializePayment,\n        isInitializing: isInitializingPayment(method.id),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutPaymentMethodProps)(memo(PaymentMethodComponent));\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ComponentType, Suspense } from 'react';\n\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { PaymentFormProvider, type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout, type WithCheckoutProps } from '../../checkout';\nimport { connectFormik, type WithFormikProps } from '../../common/form';\nimport { isExperimentEnabled } from '../../common/utility';\nimport { withForm, type WithFormProps } from '../../ui/form';\nimport createPaymentFormService from '../createPaymentFormService';\nimport resolvePaymentMethod from '../resolvePaymentMethod';\nimport withPayment, { type WithPaymentProps } from '../withPayment';\n\nimport { default as PaymentMethodV1 } from './PaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError(error: Error): void;\n}\n\nconst PaymentMethodContainer: ComponentType<\n    PaymentMethodProps &\n        WithCheckoutProps &\n        WithLanguageProps &\n        WithPaymentProps &\n        WithFormProps &\n        WithFormikProps<PaymentFormValues>\n> = ({\n    formik: formikContext,\n    checkoutService,\n    checkoutState,\n    disableSubmit,\n    hidePaymentSubmitButton,\n    isEmbedded,\n    isSubmitted,\n    isUsingMultiShipping,\n    language,\n    method,\n    onUnhandledError,\n    setSubmit,\n    setSubmitted,\n    setValidationSchema,\n}) => {\n    const formContext = {\n        isSubmitted,\n        setSubmitted,\n    };\n\n    const paymentContext = {\n        disableSubmit,\n        hidePaymentSubmitButton,\n        setSubmit,\n        setValidationSchema,\n    };\n\n    const { getConfig } = checkoutState.data;\n\n    const ResolvedPaymentMethod = resolvePaymentMethod(\n        {\n            id: method.id,\n            gateway: method.gateway,\n            type: method.type,\n        },\n        isExperimentEnabled(getConfig()?.checkoutSettings, 'CHECKOUT-9432.lazy_load_payment_components', false)\n    );\n\n    if (!ResolvedPaymentMethod) {\n        return (\n            <PaymentMethodV1\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    const paymentForm = createPaymentFormService(formikContext, formContext, paymentContext);\n\n    return (\n        <PaymentFormProvider paymentForm={paymentForm}>\n            <Suspense>\n                <ResolvedPaymentMethod\n                    checkoutService={checkoutService}\n                    checkoutState={checkoutState}\n                    language={language}\n                    method={method}\n                    onUnhandledError={onUnhandledError}\n                    paymentForm={paymentForm}\n                />\n            </Suspense>\n        </PaymentFormProvider>\n    );\n};\n\nexport default withCheckout((props) => props)(\n    withLanguage(withPayment(withForm(connectFormik(PaymentMethodContainer)))),\n) as ComponentType<PaymentMethodProps>;\n","import { type ComponentType } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { resolveComponent , resolveLazyComponent } from '../common/resolver';\nimport * as paymentMethods from '../generated/paymentIntegrations';\nimport * as lazyPaymentMethods from '../generated/paymentIntegrations/lazy';\n\nexport default function resolvePaymentMethod(\n    query: PaymentMethodResolveId,\n    useLazyLoad: boolean,\n): ComponentType<PaymentMethodProps> | undefined {\n    if (useLazyLoad) {\n        const { ComponentRegistry, ...components } = lazyPaymentMethods;\n\n        return resolveLazyComponent<PaymentMethodResolveId, PaymentMethodProps>(\n            query, \n            components, \n            ComponentRegistry,\n        );\n    }\n\n    return resolveComponent<PaymentMethodResolveId, PaymentMethodProps>(query, paymentMethods);\n}\n","import { type FormikContextType } from 'formik';\n\nimport {\n    type PaymentFormService,\n    type PaymentFormValues,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { type FormContextType } from '@bigcommerce/checkout/ui';\n\nimport { type PaymentContextProps } from './PaymentContext';\n\nexport default function createPaymentFormService(\n    formikContext: FormikContextType<PaymentFormValues>,\n    formContext: FormContextType,\n    paymentContext: PaymentContextProps,\n): PaymentFormService {\n    const {\n        setFieldTouched,\n        setFieldValue,\n        submitForm,\n        validateForm,\n        values,\n    } = formikContext;\n\n    const { isSubmitted, setSubmitted } = formContext;\n\n    const { disableSubmit, setSubmit, setValidationSchema, hidePaymentSubmitButton } =\n        paymentContext;\n\n    const getFieldValue = <T>(key: string): T | unknown => values[key];\n\n    return {\n        disableSubmit,\n        getFieldValue,\n        getFormValues: () => values,\n        hidePaymentSubmitButton,\n        isSubmitted: () => isSubmitted,\n        setFieldTouched: setFieldTouched as PaymentFormService['setFieldTouched'],\n        setFieldValue: setFieldValue as PaymentFormService['setFieldValue'],\n        setSubmit,\n        setSubmitted,\n        setValidationSchema,\n        submitForm,\n        validateForm,\n    };\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find, get, noop } from 'lodash';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport { isMobile } from '../../common/utility';\nimport { Checklist, ChecklistItem, CustomChecklistItem } from '../../ui/form';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport getUniquePaymentMethodId, { parseUniquePaymentMethodId } from './getUniquePaymentMethodId';\nimport PaymentMethodTitle, { getPaymentMethodTitle } from './PaymentMethodTitle';\nimport PaymentMethodV2 from './PaymentMethodV2';\n\nexport interface PaymentMethodListProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    onSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n}\n\nfunction getPaymentMethodFromListValue(methods: PaymentMethod[], value: string): PaymentMethod {\n    const { gatewayId: gateway, methodId: id } = parseUniquePaymentMethodId(value);\n    const method = gateway ? find(methods, { gateway, id }) : find(methods, { id });\n\n    if (!method) {\n        throw new Error(`Unable to find payment method with id: ${id}`);\n    }\n\n    return method;\n}\n\nconst PaymentMethodList: FunctionComponent<\n    PaymentMethodListProps & ConnectFormikProps<{ paymentProviderRadio?: string }>\n> = ({\n    formik: { values },\n    isEmbedded,\n    isInitializingPayment,\n    isUsingMultiShipping,\n    methods,\n    onSelect = noop,\n    onUnhandledError,\n}) => {\n    const { language } = useLocale();\n    const {\n        checkoutState: {\n            data: { getConfig }\n        }\n    } = useCheckout();\n\n    const config = getConfig();\n\n    const titleText = useMemo(() => {\n        if (config && values.paymentProviderRadio) {\n            const checkoutSettings = config.checkoutSettings;\n            const cdnBasePath = config.cdnPath;\n            const storeCountryCode = config.storeProfile.storeCountryCode;\n            const paymentMethod = getPaymentMethodFromListValue(methods, values.paymentProviderRadio);\n            const methodName = getPaymentMethodName(language)(paymentMethod);\n            const { titleText } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(paymentMethod);\n\n            return titleText || methodName;\n        }\n\n        return '';\n    }, [config, values.paymentProviderRadio])\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelect(getPaymentMethodFromListValue(methods, value));\n        },\n        [methods, onSelect],\n    );\n\n    return (\n        <>\n            <div aria-live=\"assertive\" className='is-srOnly' role=\"status\">{titleText}</div>\n            <Checklist\n                defaultSelectedItemId={values.paymentProviderRadio}\n                isDisabled={isInitializingPayment}\n                name=\"paymentProviderRadio\"\n                onSelect={handleSelect}\n            >\n                {methods.map((method) => {\n                    const value = getUniquePaymentMethodId(method.id, method.gateway);\n                    const showOnlyOnMobileDevices = get(\n                        method,\n                        'initializationData.showOnlyOnMobileDevices',\n                        false,\n                    );\n\n                    if (showOnlyOnMobileDevices && !isMobile()) {\n                        return;\n                    }\n\n                    return (\n                        <PaymentMethodListItem\n                            isDisabled={isInitializingPayment}\n                            isEmbedded={isEmbedded}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            key={value}\n                            method={method}\n                            onUnhandledError={onUnhandledError}\n                            value={value}\n                        />\n                    );\n                })}\n            </Checklist>\n        </>\n    );\n};\n\ninterface PaymentMethodListItemProps {\n    isDisabled?: boolean;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    value: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentMethodListItem: FunctionComponent<PaymentMethodListItemProps> = ({\n    isDisabled,\n    isEmbedded,\n    isUsingMultiShipping,\n    method,\n    onUnhandledError,\n    value,\n}) => {\n    const renderPaymentMethod = useMemo(() => {\n        return (\n            <PaymentMethodV2\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError || noop}\n            />\n        );\n    }, [isEmbedded, isUsingMultiShipping, method, onUnhandledError]);\n\n    const renderPaymentMethodTitle = useCallback(\n        (isSelected: boolean) => <PaymentMethodTitle isSelected={isSelected} method={method} onUnhandledError={onUnhandledError} />,\n        [method],\n    );\n\n    if (method.initializationData?.isCustomChecklistItem) {\n        return (\n            <CustomChecklistItem\n                content={renderPaymentMethod}\n                htmlId={`radio-${value}`}\n            />\n        );\n    }\n\n    return (\n        <ChecklistItem\n            content={renderPaymentMethod}\n            htmlId={`radio-${value}`}\n            isDisabled={isDisabled}\n            label={renderPaymentMethodTitle}\n            value={value}\n        />\n    );\n};\n\nexport default connectFormik(memo(PaymentMethodList));\n","export default function isMobile(): boolean {\n    return /Android|iPhone|iPad|iPod/i.test(window.navigator.userAgent);\n}\n","import React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { mapToRedeemableProps, Redeemable, type RedeemableProps } from '../cart';\nimport { withCheckout } from '../checkout';\nimport { Fieldset, Legend } from '../ui/form';\n\nconst PaymentRedeemables: FunctionComponent<RedeemableProps> = (redeemableProps) => (\n    <Fieldset \n        additionalClassName=\"redeemable-payments\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.redeemable_payments_text\" />\n            </Legend>\n        }\n    >\n        <Redeemable {...redeemableProps} showAppliedRedeemables={true} />\n    </Fieldset>\n);\n\nexport default withCheckout(mapToRedeemableProps)(memo(PaymentRedeemables));\n","import React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { withCheckout } from '../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { IconBolt } from '../ui/icon';\n\nimport { PaymentMethodId, PaymentMethodType } from './paymentMethod';\n\ninterface PaymentSubmitButtonTextProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodType?: string;\n    methodName?: string;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\nconst providersWithCustomClasses = [PaymentMethodId.Bolt];\n\nconst PaymentSubmitButtonText: FunctionComponent<PaymentSubmitButtonTextProps> = memo(\n    ({\n        methodId,\n        methodName,\n        methodType,\n        methodGateway,\n        initialisationStrategyType,\n        brandName,\n        isComplete,\n        isPaymentDataRequired,\n    }) => {\n        if (!isPaymentDataRequired) {\n            return <TranslatedString id=\"payment.place_order_action\" />;\n        }\n\n        if (methodName && initialisationStrategyType === 'none') {\n            return <TranslatedString data={{ methodName }} id=\"payment.ppsdk_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.AmazonPay) {\n            return <TranslatedString id=\"payment.amazonpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Bolt) {\n            return (\n                <>\n                    <IconBolt additionalClassName=\"payment-submit-button-bolt-icon\" />\n                    <TranslatedString id=\"payment.place_order_action\" />\n                </>\n            );\n        }\n\n        if (methodGateway === PaymentMethodId.Barclaycard) {\n            return <TranslatedString id=\"payment.barclaycard_continue_action\" />;\n        }\n\n        if (methodGateway === PaymentMethodId.BlueSnapV2) {\n            return <TranslatedString id=\"payment.bluesnap_v2_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.VisaCheckout) {\n            return <TranslatedString id=\"payment.visa_checkout_continue_action\" />;\n        }\n\n        if (\n            methodType === PaymentMethodType.PaypalVenmo ||\n            methodId === PaymentMethodId.BraintreeVenmo\n        ) {\n            return <TranslatedString id=\"payment.paypal_venmo_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.Paypal) {\n            const continueActionId = methodId === PaymentMethodId.PaypalCommerce\n                ? 'payment.place_order_action'\n                : 'payment.paypal_continue_action';\n\n            return <TranslatedString\n                data={{ isComplete }}\n                id={isComplete ? 'payment.paypal_complete_action' : continueActionId}\n            />;\n        }\n\n        if (methodType === PaymentMethodType.PaypalCredit) {\n            const continueTranslationId = brandName\n                ? 'payment.continue_with_brand'\n                : 'payment.paypal_pay_later_continue_action'\n            const completeTranslationId = brandName\n                ? 'payment.complete_with_brand'\n                : 'payment.paypal_pay_later_complete_action'\n\n            return (\n                <TranslatedString\n                    data={{ brandName, isComplete, continueTranslationId, completeTranslationId }}\n                    id={\n                        isComplete\n                            ? completeTranslationId\n                            : continueTranslationId\n                    }\n                />\n            );\n        }\n\n        if (methodId === PaymentMethodId.Quadpay) {\n            return <TranslatedString id=\"payment.quadpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Zip) {\n            return <TranslatedString id=\"payment.zip_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Klarna) {\n            return <TranslatedString id=\"payment.klarna_continue_action\" />;\n        }\n\n        return <TranslatedString id=\"payment.place_order_action\" />;\n    },\n);\n\nexport interface PaymentSubmitButtonProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodName?: string;\n    methodType?: string;\n    isDisabled?: boolean;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\ninterface WithCheckoutPaymentSubmitButtonProps {\n    isInitializing?: boolean;\n    isSubmitting?: boolean;\n}\n\nconst PaymentSubmitButton: FunctionComponent<\n    PaymentSubmitButtonProps & WithCheckoutPaymentSubmitButtonProps\n> = ({\n    isDisabled,\n    isInitializing,\n    isSubmitting,\n    isPaymentDataRequired,\n    methodGateway,\n    methodId,\n    methodName,\n    methodType,\n    initialisationStrategyType,\n    brandName,\n    isComplete,\n}) => (\n    <Button\n        className={\n            providersWithCustomClasses.includes(methodId as PaymentMethodId)\n                ? `payment-submit-button-${methodId}`\n                : undefined\n        }\n        data-test=\"payment-submit-button\"\n        disabled={isInitializing || isSubmitting || isDisabled}\n        id=\"checkout-payment-continue\"\n        isFullWidth\n        isLoading={isSubmitting}\n        size={ButtonSize.Large}\n        type=\"submit\"\n        variant={ButtonVariant.Action}\n    >\n        <PaymentSubmitButtonText\n            brandName={brandName}\n            initialisationStrategyType={initialisationStrategyType}\n            isComplete={isComplete}\n            isPaymentDataRequired={isPaymentDataRequired}\n            methodGateway={methodGateway}\n            methodId={methodId}\n            methodName={methodName}\n            methodType={methodType}\n        />\n    </Button>\n);\n\nexport default withCheckout(({ checkoutState }) => {\n    const {\n        data: { isPaymentDataRequired },\n        statuses: { isInitializingCustomer, isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    return {\n        isInitializing: isInitializingCustomer() || isInitializingPayment(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isSubmitting: isSubmittingOrder(),\n    };\n})(memo(PaymentSubmitButton));\n","import { type CheckoutSelectors } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, type MouseEvent, type ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../checkout';\nimport { isErrorWithType } from '../common/error';\n\nexport interface SpamProtectionProps {\n    didExceedSpamLimit?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface SpamProtectionState {\n    shouldShowRetryButton: boolean;\n}\n\ninterface WithCheckoutSpamProtectionProps {\n    isExecutingSpamCheck: boolean;\n    executeSpamCheck(): Promise<CheckoutSelectors>;\n}\n\nfunction mapToSpamProtectionProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutSpamProtectionProps {\n    return {\n        isExecutingSpamCheck: checkoutState.statuses.isExecutingSpamCheck(),\n        executeSpamCheck: checkoutService.executeSpamCheck,\n    };\n}\n\nclass SpamProtectionField extends Component<\n    SpamProtectionProps & WithCheckoutSpamProtectionProps,\n    SpamProtectionState\n> {\n    state = {\n        shouldShowRetryButton: false,\n    };\n\n    async componentDidMount() {\n        const { didExceedSpamLimit } = this.props;\n\n        if (didExceedSpamLimit) {\n            return;\n        }\n\n        this.verify();\n    }\n\n    render() {\n        const { isExecutingSpamCheck } = this.props;\n\n        return (\n            <div className=\"spamProtection-container\">\n                <LoadingOverlay isLoading={isExecutingSpamCheck}>\n                    {this.renderContent()}\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { didExceedSpamLimit } = this.props;\n        const { shouldShowRetryButton } = this.state;\n\n        if (!didExceedSpamLimit && !shouldShowRetryButton) {\n            return;\n        }\n\n        return (\n            <div className=\"spamProtection-panel optimizedCheckout-overlay\">\n                <a\n                    className=\"spamProtection-panel-message optimizedCheckout-primaryContent\"\n                    data-test=\"spam-protection-verify-button\"\n                    onClick={this.handleRetry}\n                >\n                    <TranslatedString id=\"spam_protection.verify_action\" />\n                </a>\n            </div>\n        );\n    }\n\n    private async verify(): Promise<void> {\n        const { executeSpamCheck, onUnhandledError = noop } = this.props;\n\n        try {\n            await executeSpamCheck();\n        } catch (error) {\n            this.setState({ shouldShowRetryButton: true });\n\n            // Notify the parent component if the user experiences a problem other than cancelling the reCaptcha challenge.\n            if (\n                isErrorWithType(error) &&\n                error.type !== 'spam_protection_challenge_not_completed'\n            ) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    private handleRetry: (event: MouseEvent) => void = (event) => {\n        event.preventDefault();\n\n        this.verify();\n    };\n}\n\nexport default withCheckout(mapToSpamProtectionProps)(SpamProtectionField);\n","import { noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withCurrency, type WithCurrencyProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { CheckboxInput } from '../../ui/form';\nimport { Tooltip, TooltipTrigger } from '../../ui/tooltip';\n\nexport interface StoreCreditFieldProps {\n    availableStoreCredit: number;\n    name: string;\n    usableStoreCredit: number;\n    isStoreCreditApplied: boolean;\n    onChange?(value: boolean): void;\n}\n\nconst StoreCreditField: FunctionComponent<StoreCreditFieldProps & WithCurrencyProps> = ({\n    availableStoreCredit,\n    currency,\n    name,\n    onChange = noop,\n    usableStoreCredit,\n    isStoreCreditApplied,\n}) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n\n    const handleChange = useCallback((event: any) => onChange(event.target.checked), [onChange]);\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"redeemable.apply_store_credit_before_action\" />{' '}\n                <TooltipTrigger\n                    placement=\"top-start\"\n                    tooltip={\n                        <Tooltip testId=\"payment-store-credit-tooltip\">\n                            <TranslatedString\n                                data={{\n                                    storeCredit: currency.toCustomerCurrency(availableStoreCredit),\n                                }}\n                                id=\"redeemable.store_credit_available_text\"\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <a href=\"#\" onClick={preventDefault()}>\n                        {currency.toCustomerCurrency(usableStoreCredit)}\n                    </a>\n                </TooltipTrigger>{' '}\n                <TranslatedString id=\"redeemable.apply_store_credit_after_action\" />\n            </>\n        ),\n        [availableStoreCredit, currency, usableStoreCredit],\n    );\n\n    return (\n        <CheckboxInput\n            checked={isStoreCreditApplied}\n            disabled={isSubmittingOrder()}\n            id={name}\n            label={labelContent}\n            name={name}\n            onChange={handleChange}\n            value={name}\n        />\n    );\n};\n\nexport default withCurrency(StoreCreditField);\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst StoreCreditOverlay: FunctionComponent = () => (\n    <div className=\"storeCreditOverlay\" data-test=\"payment-store-credit-overlay\">\n        <p className=\"storeCreditOverlay-text\">\n            <TranslatedString id=\"payment.payment_not_required_text\" />\n        </p>\n    </div>\n);\n\nexport default StoreCreditOverlay;\n","import { ExtensionRegion, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { type FormikProps, type FormikState, withFormik, type WithFormikConfig } from 'formik';\nimport { isNil, noop, omitBy } from 'lodash';\nimport React, { type FunctionComponent, memo, useCallback, useContext, useMemo } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { TermsConditions } from '../termsConditions';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getPaymentValidationSchema from './getPaymentValidationSchema';\nimport {\n    getPaymentMethodName,\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodList,\n} from './paymentMethod';\nimport PaymentRedeemables from './PaymentRedeemables';\nimport PaymentSubmitButton from './PaymentSubmitButton';\nimport SpamProtectionField from './SpamProtectionField';\nimport { StoreCreditField, StoreCreditOverlay } from './storeCredit';\n\nexport interface PaymentFormProps {\n    availableStoreCredit?: number;\n    defaultGatewayId?: string;\n    defaultMethodId: string;\n    didExceedSpamLimit?: boolean;\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isTermsConditionsRequired?: boolean;\n    isUsingMultiShipping?: boolean;\n    isStoreCreditApplied: boolean;\n    methods: PaymentMethod[];\n    selectedMethod?: PaymentMethod;\n    shouldShowStoreCredit?: boolean;\n    shouldDisableSubmit?: boolean;\n    shouldHidePaymentSubmitButton?: boolean;\n    shouldExecuteSpamCheck?: boolean;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit?: number;\n    validationSchema?: ObjectSchema<Partial<PaymentFormValues>>;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onStoreCreditChange?(useStoreCredit?: boolean): void;\n    onSubmit?(values: PaymentFormValues): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentForm: FunctionComponent<\n    PaymentFormProps & FormikProps<PaymentFormValues> & WithLanguageProps\n> = ({\n    availableStoreCredit = 0,\n    didExceedSpamLimit,\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isTermsConditionsRequired,\n    isStoreCreditApplied,\n    isUsingMultiShipping,\n    language,\n    methods,\n    onMethodSelect,\n    onStoreCreditChange,\n    onUnhandledError,\n    resetForm,\n    selectedMethod,\n    shouldDisableSubmit,\n    shouldHidePaymentSubmitButton,\n    shouldExecuteSpamCheck,\n    termsConditionsText = '',\n    termsConditionsUrl,\n    usableStoreCredit = 0,\n    values,\n}) => {\n    const selectedMethodId = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        switch (selectedMethod.id) {\n            case PaymentMethodId.AmazonPay:\n                if (selectedMethod.initializationData.paymentToken) {\n                    return;\n                }\n\n                return selectedMethod.id;\n\n            default:\n                return selectedMethod.id;\n        }\n    }, [selectedMethod]);\n\n    const brandName = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        return (\n            selectedMethod.initializationData?.payPalCreditProductBrandName?.credit ||\n            selectedMethod.initializationData?.payPalCreditProductBrandName\n        );\n    }, [selectedMethod]);\n\n    if (shouldExecuteSpamCheck) {\n        return (\n            <SpamProtectionField\n                didExceedSpamLimit={didExceedSpamLimit}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    return (\n        <Form className=\"checkout-form\" testId=\"payment-form\">\n            {usableStoreCredit > 0 && (\n                <StoreCreditField\n                    availableStoreCredit={availableStoreCredit}\n                    isStoreCreditApplied={isStoreCreditApplied}\n                    name=\"useStoreCredit\"\n                    onChange={onStoreCreditChange}\n                    usableStoreCredit={usableStoreCredit}\n                />\n            )}\n\n            <PaymentMethodListFieldset\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isPaymentDataRequired={isPaymentDataRequired}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onMethodSelect={onMethodSelect}\n                onUnhandledError={onUnhandledError}\n                resetForm={resetForm}\n                values={values}\n            />\n\n            <PaymentRedeemables />\n\n            {isTermsConditionsRequired && (\n                <TermsConditions\n                    termsConditionsText={termsConditionsText}\n                    termsConditionsUrl={termsConditionsUrl}\n                />\n            )}\n\n            <div className=\"form-actions\">\n                {shouldHidePaymentSubmitButton ? (\n                    <PaymentMethodSubmitButtonContainer />\n                ) : (\n                    <PaymentSubmitButton\n                        brandName={brandName}\n                        initialisationStrategyType={\n                            selectedMethod && selectedMethod.initializationStrategy?.type\n                        }\n                        isComplete={!!selectedMethod?.initializationData?.isComplete}\n                        isDisabled={shouldDisableSubmit}\n                        methodGateway={selectedMethod && selectedMethod.gateway}\n                        methodId={selectedMethodId}\n                        methodName={\n                            selectedMethod && getPaymentMethodName(language)(selectedMethod)\n                        }\n                        methodType={selectedMethod && selectedMethod.method}\n                    />\n                )}\n            </div>\n        </Form>\n    );\n};\n\nconst PaymentMethodSubmitButtonContainer: FunctionComponent = () => {\n    return <div className=\"submitButtonContainer\" id=\"checkout-payment-continue\" />;\n};\n\ninterface PaymentMethodListFieldsetProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    values: PaymentFormValues;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n    resetForm(nextValues?: Partial<FormikState<PaymentFormValues>>): void;\n}\n\nconst PaymentMethodListFieldset: FunctionComponent<PaymentMethodListFieldsetProps> = ({\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isUsingMultiShipping,\n    methods,\n    onMethodSelect = noop,\n    onUnhandledError,\n    resetForm,\n    values,\n}) => {\n    const { setSubmitted } = useContext(FormContext);\n\n    const handlePaymentMethodSelect = useCallback(\n        (method: PaymentMethod) => {\n            const updatedValues = {\n                ...values,\n                ccCustomerCode: '',\n                ccCvv: '',\n                ccDocument: '',\n                customerEmail: '',\n                customerMobile: '',\n                ccExpiry: '',\n                ccName: '',\n                ccNumber: '',\n                instrumentId: '',\n                paymentProviderRadio: getUniquePaymentMethodId(method.id, method.gateway),\n                shouldCreateAccount: true,\n                shouldSaveInstrument: false,\n            };\n\n            resetForm({ values: updatedValues });\n            setSubmitted(false);\n            onMethodSelect(method);\n        },\n        [values, onMethodSelect, resetForm, setSubmitted],\n    );\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.payment_methods_text\" />\n                </Legend>\n            }\n        >\n            {!isPaymentDataRequired() && <StoreCreditOverlay />}\n\n            <Extension region={ExtensionRegion.PaymentPaymentMethodListBefore}/>\n\n            <PaymentMethodList\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onSelect={handlePaymentMethodSelect}\n                onUnhandledError={onUnhandledError}\n            />\n        </Fieldset>\n    );\n};\n\nconst paymentFormConfig: WithFormikConfig<PaymentFormProps & WithLanguageProps, PaymentFormValues> =\n    {\n        mapPropsToValues: ({ defaultGatewayId, defaultMethodId }) => ({\n            ccCustomerCode: '',\n            ccCvv: '',\n            ccDocument: '',\n            customerEmail: '',\n            customerMobile: '',\n            ccExpiry: '',\n            ccName: '',\n            ccNumber: '',\n            paymentProviderRadio: getUniquePaymentMethodId(defaultMethodId, defaultGatewayId),\n            instrumentId: '',\n            shouldCreateAccount: true,\n            shouldSaveInstrument: false,\n            terms: false,\n            hostedForm: {\n                cardType: '',\n                errors: {\n                    cardCode: '',\n                    cardCodeVerification: '',\n                    cardExpiry: '',\n                    cardName: '',\n                    cardNumber: '',\n                    cardNumberVerification: '',\n                },\n            },\n            accountNumber: '',\n            routingNumber: '',\n        }),\n\n        handleSubmit: (values, { props: { onSubmit = noop } }) => {\n            onSubmit(\n                omitBy(\n                    values,\n                    (value, key) => isNil(value) || value === '' || key === 'hostedForm',\n                ),\n            );\n        },\n\n        validationSchema: ({\n            language,\n            isTermsConditionsRequired = false,\n            validationSchema,\n        }: PaymentFormProps & WithLanguageProps) =>\n            getPaymentValidationSchema({\n                additionalValidation: validationSchema,\n                isTermsConditionsRequired,\n                language,\n            }),\n    };\n\nexport default withLanguage(withFormik(paymentFormConfig)(memo(PaymentForm)));\n","import {\n    type CartChangedError,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type CheckoutSettings,\n    type OrderRequestBody,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { compact, find, isEmpty, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { type AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { type ErrorLogger } from '@bigcommerce/checkout/error-handling-utils';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps, type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { withAnalytics } from '../analytics';\nimport { withCheckout } from '../checkout';\nimport {\n    ErrorModal,\n    type ErrorModalOnCloseProps,\n    isCartChangedError,\n    isErrorWithType,\n} from '../common/error';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TermsConditionsType } from '../termsConditions';\n\nimport mapSubmitOrderErrorMessage, { mapSubmitOrderErrorTitle } from './mapSubmitOrderErrorMessage';\nimport mapToOrderRequestBody from './mapToOrderRequestBody';\nimport PaymentContext from './PaymentContext';\nimport PaymentForm from './PaymentForm';\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodProviderType,\n} from './paymentMethod';\n\nexport interface PaymentProps {\n    errorLogger: ErrorLogger;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void; // TODO: We're currently doing this check in multiple places, perhaps we should move it up so this check get be done in a single place instead.\n    onCartChangedError?(error: CartChangedError): void;\n    onFinalize?(): void;\n    onFinalizeError?(error: Error): void;\n    onReady?(): void;\n    onSubmit?(): void;\n    onSubmitError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutPaymentProps {\n    availableStoreCredit: number;\n    cartUrl: string;\n    defaultMethod?: PaymentMethod;\n    finalizeOrderError?: Error;\n    isInitializingPayment: boolean;\n    isSubmittingOrder: boolean;\n    isStoreCreditApplied: boolean;\n    isTermsConditionsRequired: boolean;\n    methods: PaymentMethod[];\n    shouldExecuteSpamCheck: boolean;\n    shouldLocaliseErrorMessages: boolean;\n    submitOrderError?: Error;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit: number;\n    applyStoreCredit(useStoreCredit: boolean): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n    finalizeOrderIfNeeded(): Promise<CheckoutSelectors>;\n    isPaymentDataRequired(): boolean;\n    loadCheckout(): Promise<CheckoutSelectors>;\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\n    submitOrder(values: OrderRequestBody): Promise<CheckoutSelectors>;\n    checkoutServiceSubscribe: CheckoutService['subscribe'];\n}\n\ninterface PaymentState {\n    didExceedSpamLimit: boolean;\n    isReady: boolean;\n    selectedMethod?: PaymentMethod;\n    shouldDisableSubmit: { [key: string]: boolean };\n    shouldHidePaymentSubmitButton: { [key: string]: boolean };\n    submitFunctions: { [key: string]: ((values: PaymentFormValues) => void) | null };\n    validationSchemas: { [key: string]: ObjectSchema<Partial<PaymentFormValues>> | null };\n}\n\nclass Payment extends Component<\n    PaymentProps & WithCheckoutPaymentProps & WithLanguageProps & AnalyticsContextProps,\n    PaymentState\n> {\n    state: PaymentState = {\n        didExceedSpamLimit: false,\n        isReady: false,\n        shouldDisableSubmit: {},\n        shouldHidePaymentSubmitButton: {},\n        validationSchemas: {},\n        submitFunctions: {},\n    };\n\n    private grandTotalChangeUnsubscribe?: () => void;\n\n    private getContextValue = memoizeOne(() => {\n        return {\n            disableSubmit: this.disableSubmit,\n            setSubmit: this.setSubmit,\n            setValidationSchema: this.setValidationSchema,\n            hidePaymentSubmitButton: this.hidePaymentSubmitButton,\n        };\n    });\n\n    async componentDidMount(): Promise<void> {\n        const {\n            finalizeOrderIfNeeded,\n            onFinalize = noop,\n            onFinalizeError = noop,\n            onReady = noop,\n            usableStoreCredit,\n            checkoutServiceSubscribe,\n        } = this.props;\n\n        if (usableStoreCredit) {\n            this.handleStoreCreditChange(true);\n        }\n\n        await this.loadPaymentMethodsOrThrow();\n\n        try {\n            const state = await finalizeOrderIfNeeded();\n            const order = state.data.getOrder();\n\n            onFinalize(order?.orderId);\n        } catch (error) {\n            if (isErrorWithType(error) && error.type !== 'order_finalization_not_required') {\n                onFinalizeError(error);\n            }\n        }\n\n        this.grandTotalChangeUnsubscribe = checkoutServiceSubscribe(\n            () => this.handleCartTotalChange(),\n            ({ data }) => data.getCheckout()?.grandTotal,\n            ({ data }) => data.getCheckout()?.outstandingBalance,\n        );\n\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        this.setState({ isReady: true });\n        onReady();\n    }\n\n    componentDidUpdate(): void {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        checkEmbeddedSupport(methods.map(({ id }) => id));\n    }\n\n    componentWillUnmount(): void {\n        if (this.grandTotalChangeUnsubscribe) {\n            this.grandTotalChangeUnsubscribe();\n            this.grandTotalChangeUnsubscribe = undefined;\n        }\n\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n    }\n\n    render(): ReactNode {\n        const {\n            defaultMethod,\n            finalizeOrderError,\n            isInitializingPayment,\n            isUsingMultiShipping,\n            methods,\n            applyStoreCredit,\n            ...rest\n        } = this.props;\n\n        const {\n            didExceedSpamLimit,\n            isReady,\n            selectedMethod = defaultMethod,\n            shouldDisableSubmit,\n            validationSchemas,\n            shouldHidePaymentSubmitButton,\n        } = this.state;\n\n        const uniqueSelectedMethodId =\n            selectedMethod && getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway);\n\n        return (\n            <PaymentContext.Provider value={this.getContextValue()}>\n                <ChecklistSkeleton isLoading={!isReady}>\n                    {!isEmpty(methods) && defaultMethod && (\n                        <PaymentForm\n                            {...rest}\n                            defaultGatewayId={defaultMethod.gateway}\n                            defaultMethodId={defaultMethod.id}\n                            didExceedSpamLimit={didExceedSpamLimit}\n                            isInitializingPayment={isInitializingPayment}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            methods={methods}\n                            onMethodSelect={this.setSelectedMethod}\n                            onStoreCreditChange={this.handleStoreCreditChange}\n                            onSubmit={this.handleSubmit}\n                            onUnhandledError={this.handleError}\n                            selectedMethod={selectedMethod}\n                            shouldDisableSubmit={\n                                (uniqueSelectedMethodId &&\n                                    shouldDisableSubmit[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            shouldHidePaymentSubmitButton={\n                                (uniqueSelectedMethodId &&\n                                    rest.isPaymentDataRequired() &&\n                                    shouldHidePaymentSubmitButton[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            validationSchema={\n                                (uniqueSelectedMethodId &&\n                                    validationSchemas[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                        />\n                    )}\n                </ChecklistSkeleton>\n\n                {this.renderOrderErrorModal()}\n                {this.renderEmbeddedSupportErrorModal()}\n            </PaymentContext.Provider>\n        );\n    }\n\n    private renderOrderErrorModal(): ReactNode {\n        const { finalizeOrderError, language, shouldLocaliseErrorMessages, submitOrderError } =\n            this.props;\n\n        // FIXME: Export correct TS interface\n        const error: any = submitOrderError || finalizeOrderError;\n\n        if (\n            !error ||\n            error.type === 'order_finalization_not_required' ||\n            error.type === 'payment_cancelled' ||\n            error.type === 'payment_invalid_form' ||\n            error.type === 'spam_protection_not_completed' ||\n            error.type === 'invalid_hosted_form_value'\n        ) {\n            return null;\n        }\n\n        return (\n            <ErrorModal\n                error={error}\n                message={mapSubmitOrderErrorMessage(\n                    error,\n                    language.translate.bind(language),\n                    shouldLocaliseErrorMessages,\n                )}\n                onClose={this.handleCloseModal}\n                title={mapSubmitOrderErrorTitle(error, language.translate.bind(language))}\n            />\n        );\n    }\n\n    private renderEmbeddedSupportErrorModal(): ReactNode {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        try {\n            checkEmbeddedSupport(methods.map(({ id }) => id));\n        } catch (error) {\n            if (error instanceof Error) {\n                return <ErrorModal error={error} onClose={this.handleCloseModal} />;\n            }\n        }\n\n        return null;\n    }\n\n    private disableSubmit: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldDisableSubmit } = this.state;\n\n        if (shouldDisableSubmit[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldDisableSubmit: {\n                ...shouldDisableSubmit,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private hidePaymentSubmitButton: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldHidePaymentSubmitButton } = this.state;\n\n        if (shouldHidePaymentSubmitButton[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldHidePaymentSubmitButton: {\n                ...shouldHidePaymentSubmitButton,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private handleBeforeUnload: (event: BeforeUnloadEvent) => string | undefined = (event) => {\n        const { defaultMethod, isSubmittingOrder, language } = this.props;\n        const { selectedMethod = defaultMethod } = this.state;\n\n        if (\n            !isSubmittingOrder ||\n            !selectedMethod ||\n            selectedMethod.type === PaymentMethodProviderType.Hosted ||\n            selectedMethod.type === PaymentMethodProviderType.PPSDK ||\n            selectedMethod.skipRedirectConfirmationAlert\n        ) {\n            return;\n        }\n\n        const message = language.translate('common.leave_warning');\n\n        event.returnValue = message;\n\n        return message;\n    };\n\n    private handleCloseModal: (event: Event, props: ErrorModalOnCloseProps) => Promise<void> =\n        async (_, { error }) => {\n            if (!error) {\n                return;\n            }\n\n            const { cartUrl, clearError, loadCheckout } = this.props;\n            const { type: errorType } = error as any; // FIXME: Export correct TS interface\n\n            if (\n                errorType === 'provider_fatal_error' ||\n                errorType === 'order_could_not_be_finalized_error'\n            ) {\n                window.location.replace(cartUrl || '/');\n            }\n\n            if (errorType === 'tax_provider_unavailable') {\n                window.location.reload();\n            }\n\n            if (errorType === 'cart_consistency') {\n                await loadCheckout();\n            }\n\n            if (isErrorWithType(error) && error.body) {\n                const { body, headers, status } = error;\n\n                if (body.type === 'provider_error' && headers.location) {\n                    window.top?.location.assign(headers.location);\n                }\n\n                // Reload the checkout object to get the latest `shouldExecuteSpamCheck` value,\n                // which will in turn make `SpamProtectionField` visible again.\n                // NOTE: As a temporary fix, we're checking the status code instead of the error\n                // type because of an issue with Nginx config, which causes the server to return\n                // HTML page instead of JSON response when there is a 429 error.\n                if (\n                    status === 429 ||\n                    body.type === 'spam_protection_expired' ||\n                    body.type === 'spam_protection_failed'\n                ) {\n                    this.setState({ didExceedSpamLimit: true });\n\n                    await loadCheckout();\n                }\n            }\n\n            clearError(error);\n        };\n\n    private handleStoreCreditChange: (useStoreCredit: boolean) => void = async (useStoreCredit) => {\n        const { applyStoreCredit, onUnhandledError = noop } = this.props;\n\n        try {\n            await applyStoreCredit(useStoreCredit);\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    };\n\n    private handleError: (error: Error) => void = (error: Error) => {\n        const { onUnhandledError = noop, errorLogger } = this.props;\n\n        const { type } = error as any;\n\n        if (type === 'unexpected_detachment') {\n            errorLogger.log(error);\n\n            return;\n        }\n\n        return onUnhandledError(error);\n    };\n\n    private handleSubmit: (values: PaymentFormValues) => void = async (values) => {\n        const {\n            defaultMethod,\n            loadPaymentMethods,\n            isPaymentDataRequired,\n            onCartChangedError = noop,\n            onSubmit = noop,\n            onSubmitError = noop,\n            submitOrder,\n            analyticsTracker\n        } = this.props;\n\n        const { selectedMethod = defaultMethod, submitFunctions } = this.state;\n\n        analyticsTracker.clickPayButton({shouldCreateAccount: values.shouldCreateAccount});\n\n        const customSubmit =\n            selectedMethod &&\n            submitFunctions[getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway)];\n\n        if (customSubmit) {\n            return customSubmit(values);\n        }\n\n        try {\n            const state = await submitOrder(mapToOrderRequestBody(values, isPaymentDataRequired()));\n            const order = state.data.getOrder();\n\n            analyticsTracker.paymentComplete();\n\n            onSubmit(order?.orderId);\n        } catch (error) {\n            analyticsTracker.paymentRejected();\n\n            if (isErrorWithType(error) && error.type === 'payment_method_invalid') {\n                return loadPaymentMethods();\n            }\n\n            if (isCartChangedError(error)) {\n                return onCartChangedError(error);\n            }\n\n            onSubmitError(error);\n        }\n    };\n\n    private setSelectedMethod: (method?: PaymentMethod) => void = (method) => {\n        const { selectedMethod } = this.state;\n\n        if (selectedMethod === method) {\n            return;\n        }\n\n        if (method) {\n            this.trackSelectedPaymentMethod(method);\n        }\n\n        this.setState({ selectedMethod: method });\n    };\n\n    private setSubmit: (\n        method: PaymentMethod,\n        fn: (values: PaymentFormValues) => void | null,\n    ) => void = (method, fn) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { submitFunctions } = this.state;\n\n        if (submitFunctions[uniqueId] === fn) {\n            return;\n        }\n\n        this.setState({\n            submitFunctions: {\n                ...submitFunctions,\n                [uniqueId]: fn,\n            },\n        });\n    };\n\n    private setValidationSchema: (\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ) => void = (method, schema) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { validationSchemas } = this.state;\n\n        if (validationSchemas[uniqueId] === schema) {\n            return;\n        }\n\n        this.setState({\n            validationSchemas: {\n                ...validationSchemas,\n                [uniqueId]: schema,\n            },\n        });\n    };\n\n    private trackSelectedPaymentMethod(method: PaymentMethod) {\n        const { analyticsTracker } = this.props;\n\n        const methodName = method.config.displayName || method.id;\n        const methodId = method.id;\n\n        analyticsTracker.selectedPaymentMethod(methodName, methodId);\n    }\n\n    private async loadPaymentMethodsOrThrow(): Promise<void> {\n        const {\n            loadPaymentMethods,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await loadPaymentMethods();\n\n            const selectedMethod = this.state.selectedMethod || this.props.defaultMethod;\n\n            if (selectedMethod) {\n                this.trackSelectedPaymentMethod(selectedMethod);\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    private async handleCartTotalChange(): Promise<void> {\n        const { isReady } = this.state;\n\n        if (!isReady) {\n            return;\n        }\n\n        this.setState({ isReady: false });\n\n        await this.loadPaymentMethodsOrThrow();\n\n        this.setState({ isReady: true });\n    }\n}\n\nexport function mapToPaymentProps({\n        checkoutService,\n        checkoutState,\n}: CheckoutContextProps): WithCheckoutPaymentProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getOrder,\n            getPaymentMethod,\n            getPaymentMethods,\n            isPaymentDataRequired,\n            getPaymentProviderCustomer,\n        },\n        errors: { getFinalizeOrderError, getSubmitOrderError },\n        statuses: { isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const customer = getCustomer();\n    const consignments = getConsignments();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n\n    const { isComplete = false } = getOrder() || {};\n    let methods = getPaymentMethods() || EMPTY_ARRAY;\n\n    // TODO: In accordance with the checkout team, this functionality is temporary and will be implemented in the backend instead.\n    if (paymentProviderCustomer?.stripeLinkAuthenticationState) {\n        const stripeUpePaymentMethod = methods.filter(method =>\n            method.id === 'card' && method.gateway === PaymentMethodId.StripeUPE\n        );\n\n        methods = stripeUpePaymentMethod.length ? stripeUpePaymentMethod : methods;\n    }\n\n    if (!checkout || !config || !customer || isComplete) {\n        return null;\n    }\n\n    const {\n        enableTermsAndConditions: isTermsConditionsEnabled,\n        features,\n        orderTermsAndConditionsType: termsConditionsType,\n        orderTermsAndConditions: termsCondtitionsText,\n        orderTermsAndConditionsLink: termsCondtitionsUrl,\n    } = config.checkoutSettings as CheckoutSettings & { orderTermsAndConditionsLocation: string };\n\n    const isTermsConditionsRequired = isTermsConditionsEnabled;\n    const selectedPayment = find(checkout.payments, {\n        providerType: PaymentMethodProviderType.Hosted,\n    });\n\n    const { isStoreCreditApplied } = checkout;\n\n    let selectedPaymentMethod;\n    let filteredMethods;\n\n    filteredMethods = methods.filter((method: PaymentMethod) => {\n        if (method.id === PaymentMethodId.Bolt && method.initializationData) {\n            return !!method.initializationData.showInCheckout;\n        }\n\n        if (method.id === PaymentMethodId.BraintreeLocalPaymentMethod) {\n            return false;\n        }\n\n        return true;\n    });\n\n    if (consignments && consignments.length > 1) {\n        const multiShippingIncompatibleMethodIds: string[] = [\n            PaymentMethodId.AmazonPay,\n        ];\n\n        filteredMethods = methods.filter((method: PaymentMethod) => {\n            return !multiShippingIncompatibleMethodIds.includes(method.id);\n        });\n    }\n\n    if (selectedPayment) {\n        selectedPaymentMethod = getPaymentMethod(\n            selectedPayment.providerId,\n            selectedPayment.gatewayId,\n        );\n        filteredMethods = selectedPaymentMethod\n            ? compact([selectedPaymentMethod])\n            : filteredMethods;\n    } else {\n        selectedPaymentMethod = find(filteredMethods, {\n            config: { hasDefaultStoredInstrument: true },\n        });\n        // eslint-disable-next-line no-self-assign\n        filteredMethods = filteredMethods;\n    }\n\n    return {\n        applyStoreCredit: checkoutService.applyStoreCredit,\n        availableStoreCredit: customer.storeCredit,\n        cartUrl: config.links.cartLink,\n        clearError: checkoutService.clearError,\n        defaultMethod: selectedPaymentMethod || filteredMethods[0],\n        finalizeOrderError: getFinalizeOrderError(),\n        finalizeOrderIfNeeded: checkoutService.finalizeOrderIfNeeded,\n        loadCheckout: checkoutService.loadCheckout,\n        isInitializingPayment: isInitializingPayment(),\n        isPaymentDataRequired,\n        isStoreCreditApplied,\n        isSubmittingOrder: isSubmittingOrder(),\n        isTermsConditionsRequired,\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\n        methods: filteredMethods,\n        shouldExecuteSpamCheck: checkout.shouldExecuteSpamCheck,\n        shouldLocaliseErrorMessages:\n            features['PAYMENTS-6799.localise_checkout_payment_error_messages'],\n        submitOrder: checkoutService.submitOrder,\n        submitOrderError: getSubmitOrderError(),\n        checkoutServiceSubscribe: checkoutService.subscribe,\n        termsConditionsText:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.TextArea\n                ? termsCondtitionsText\n                : undefined,\n        termsConditionsUrl:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.Link\n                ? termsCondtitionsUrl\n                : undefined,\n        usableStoreCredit:\n            checkout.grandTotal > 0 ? Math.min(checkout.grandTotal, customer.storeCredit || 0) : 0,\n    };\n}\n\nexport default withAnalytics(withLanguage(withCheckout(mapToPaymentProps)(Payment)));\n","import { type OrderPaymentRequestBody, type OrderRequestBody } from '@bigcommerce/checkout-sdk';\nimport { isEmpty, isNil, omitBy } from 'lodash';\n\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { unformatCreditCardExpiryDate, unformatCreditCardNumber } from './creditCard';\nimport {\n    hasCreditCardExpiry,\n    hasCreditCardNumber,\n    parseUniquePaymentMethodId,\n} from './paymentMethod';\n\nexport default function mapToOrderRequestBody(\n    values: PaymentFormValues,\n    isPaymentDataRequired: boolean,\n): OrderRequestBody {\n    if (!isPaymentDataRequired) {\n        return {};\n    }\n\n    const { paymentProviderRadio, ...rest } = values;\n    const { methodId, gatewayId } = parseUniquePaymentMethodId(paymentProviderRadio);\n    const payload: OrderRequestBody = {\n        payment: { gatewayId, methodId },\n    };\n    const paymentData = omitBy(\n        {\n            ...rest,\n            ccExpiry: hasCreditCardExpiry(values)\n                ? unformatCreditCardExpiryDate(values.ccExpiry)\n                : null,\n            ccNumber: hasCreditCardNumber(values)\n                ? unformatCreditCardNumber(values.ccNumber)\n                : null,\n        },\n        isNil,\n    ) as OrderPaymentRequestBody['paymentData'];\n\n    if (payload.payment && !isEmpty(paymentData)) {\n        payload.payment.paymentData = paymentData;\n    }\n\n    return payload;\n}\n","import { type CartChangedError } from '@bigcommerce/checkout-sdk';\n\nexport default function isCartChangedError(error: unknown): error is CartChangedError {\n    const requestError = error as CartChangedError;\n\n    return requestError.type === 'cart_changed';\n}\n","import classNames from 'classnames';\nimport React, {\n    type FunctionComponent,\n    memo,\n    type ReactNode,\n    useCallback,\n    useContext,\n} from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node: Node, done: () => void) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children ? (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div aria-live=\"polite\" className={bodyClassName}>\n                        {children}\n                    </div>\n                </CSSTransition>\n            ) : null}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { type FunctionComponent, type InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { type FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, type AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { type Placement } from '@popperjs/core';\nimport React, { type ReactEventHandler, type ReactNode, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children: ReactNode;\n}\n\nconst TooltipTrigger: React.FC<TooltipTriggerProps> = ({\n    placement = 'bottom',\n    tooltip,\n    children,\n}) => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const handleShow: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(true);\n    };\n\n    const handleHide: ReactEventHandler<HTMLElement> = () => {\n        setShouldShow(false);\n    };\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <span\n                        onBlur={handleHide}\n                        onFocus={handleShow}\n                        onMouseEnter={handleShow}\n                        onMouseLeave={handleHide}\n                        ref={ref}\n                    >\n                        {children}\n                    </span>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    shouldShow && (\n                        <div ref={ref} style={style}>\n                            {tooltip}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default TooltipTrigger;\n","import { type CheckoutService, type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BoltClientPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    ...rest\n}) => {\n    const initializeBoltPayment: CheckoutService['initializePayment'] = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    useBigCommerceCheckout: true,\n                },\n            }),\n        [checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBoltPayment}\n            method={method}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltClientPaymentMethod;\n","import React, { type FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ClearpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ClearpayPaymentMethod,\n    [{ gateway: 'clearpay' }],\n);\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ApplePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    language,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    applepay: {\n                        shippingLabel: language.translate('cart.shipping_text'),\n                        subtotalLabel: language.translate('cart.subtotal_text'),\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, language, method, onUnhandledError]);\n\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ApplePayPaymentMethod,\n    [{ id: 'applepay' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BarclaycardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BarclaycardPaymentMethod,\n    [{ gateway: 'barclaycard' }],\n);\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBraintreeFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneCreditCardForm.scss';\n\ninterface BraintreeFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n}\n\nconst BraintreeFastlaneCreditCardForm: FunctionComponent<BraintreeFastlaneCreditCardFormProps> = ({\n    renderPayPalCardComponent,\n}) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#braintree-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"braintree-fastlane-cc-form-container\"\n            data-test=\"braintree-fastlane-cc-form-container\"\n            id=\"braintree-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BraintreeFastlaneCreditCardForm;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BraintreeFastlaneInstrumentsFormProps {\n    onChange: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n    selectedInstrument: CardInstrument;\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BraintreeFastlaneInstrumentsForm: FunctionComponent<\n    BraintreeFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"braintree-fastlane-instrument\"\n            data-test=\"braintree-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"braintree-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"braintree-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"braintree-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"braintree-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"braintree-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneInstrumentsForm;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\nimport { useBraintreeFastlaneInstruments } from '../hooks/useBraintreeFastlaneInstruments';\n\nimport BraintreFastlaneCreditCardForm from './BraintreeFastlaneCreditCardForm';\nimport BraintreeFastlaneInstrumentsForm from './BraintreeFastlaneInstrumentsForm';\n\ninterface BraintreeFastlaneFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n}\n\nconst BraintreeFastlaneForm: FunctionComponent<BraintreeFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBraintreeFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\" id=\"braintree-fastlane\">\n            {shouldShowInstrumentsForm && (\n                <BraintreeFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BraintreFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneForm;\n","import BraintreeFastlanePaymentMethod from './BraintreeFastlanePaymentMethod';\n\nexport default BraintreeFastlanePaymentMethod;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeFastlaneForm from './components/BraintreeFastlaneForm';\n\nimport './BraintreeFastlanePaymentMethod.scss';\n\nexport interface BraintreeFastlaneComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BraintreeFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const paypalFastlaneComponentRef = useRef<BraintreeFastlaneComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                braintreefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalFastlaneComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalFastlaneComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: Error) => {\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalFastlaneComponentRef?.current?.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalFastlaneComponentRef.current?.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeFastlanePaymentMethod,\n    [{ id: 'braintreeacceleratedcheckout' }],\n);\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport {\n    CardInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface SquareV2FormProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    containerId: string;\n    deinitializePayment: () => Promise<void>;\n    initializePayment: () => Promise<void>;\n    method: PaymentMethod;\n}\n\nconst SquareV2Form: FunctionComponent<SquareV2FormProps> = ({\n    checkoutService,\n    checkoutState,\n    containerId,\n    deinitializePayment,\n    initializePayment,\n    method,\n}) => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n\n    const { getCustomer, getInstruments } = checkoutState.data;\n    const isSignedIn = getCustomer()?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n\n    useEffect(() => {\n        if (isInstrumentFeatureAvailable) {\n            void checkoutService.loadInstruments();\n        }\n    }, [checkoutService, isInstrumentFeatureAvailable]);\n\n    const instruments = useMemo(() => getInstruments(method) || [], [getInstruments, method]);\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n\n    const getDefaultInstrumentId = useCallback(() => {\n        if (isAddingNewCard) {\n            return;\n        }\n\n        if (instruments.length > 0) {\n            const defaultInstrument =\n                instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n            return defaultInstrument.bigpayToken;\n        }\n    }, [instruments, isAddingNewCard]);\n\n    useEffect(() => {\n        const defaultInstrumentId = getDefaultInstrumentId() || undefined;\n\n        setSelectedInstrumentId(defaultInstrumentId);\n    }, [getDefaultInstrumentId, instruments]);\n\n    const { setFieldValue } = usePaymentFormContext().paymentForm;\n\n    const handleSelectInstrument: (id: string) => void = (id) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    };\n\n    const handleDeleteInstrument: (id: string) => void = (id) => {\n        if (instruments.length === 0) {\n            setIsAddingNewCard(true);\n            setSelectedInstrumentId(undefined);\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            setSelectedInstrumentId(getDefaultInstrumentId());\n\n            setFieldValue('instrumentId', getDefaultInstrumentId());\n        }\n    };\n\n    const handleUseNewCard: () => void = () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        void deinitializePayment();\n\n        void initializePayment();\n    };\n\n    const renderPlaceholderFields = () => {\n        return (\n            <div data-test=\"squarev2_placeholder_form\" style={{ display: 'none' }}>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-label optimizedCheckout-form-label\"\n                        id=\"messageIsDefault\"\n                    />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsDefault\" />\n                </div>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-input optimizedCheckout-form-input form-input--focus optimizedCheckout-form-input--focus\"\n                        id=\"inputIsFocus\"\n                    />\n                </div>\n                <div className=\"form-field form-field--error\">\n                    <div className=\"form-inlineMessage\" id=\"messageIsError\" />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsError\" />\n                </div>\n            </div>\n        );\n    };\n\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    return (\n        <LoadingOverlay\n            data-test=\"squarev2_loading_overlay\"\n            hideContentWhenLoading\n            isLoading={isLoadingInstruments()}\n        >\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                        instruments={instruments as CardInstrument[]}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={selectedInstrumentId || getDefaultInstrumentId()}\n                    />\n                )}\n                <div\n                    className={classNames('widget', `widget--${method.id}`, 'payment-widget')}\n                    data-test={containerId}\n                    style={{\n                        display: !shouldShowCreditCardFieldset ? 'none' : undefined,\n                    }}\n                    tabIndex={-1}\n                >\n                    {renderPlaceholderFields()}\n                    <div id={containerId} />\n                </div>\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={selectedInstrumentId}\n                        instruments={instruments}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default SquareV2Form;\n","import { difference } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport SquareV2Form from './SquareV2Form';\n\nconst SquareV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n}) => {\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const container = document.querySelector<HTMLDivElement>(`#${id}`);\n\n        if (!container) {\n            throw new Error(\n                `Unable to retrieve input styles as the provided container ID \"${id}\" is not valid.`,\n            );\n        }\n\n        return getAppliedStyles(container, properties);\n    };\n\n    const copyStylesFromDummyFormFields = useCallback(() => {\n        const styleProps = [\n            'backgroundColor',\n            'borderColor',\n            'borderRadius',\n            'borderWidth',\n            'color',\n            'fontSize',\n            'fontWeight',\n        ];\n\n        return {\n            default: {\n                message: getStylesFromElement('messageIsDefault', ['color']),\n                input: getStylesFromElement('inputIsDefault', styleProps),\n            },\n            focus: {\n                input: getStylesFromElement(\n                    'inputIsFocus',\n                    difference(styleProps, ['borderRadius']),\n                ),\n            },\n            error: {\n                message: getStylesFromElement('messageIsError', ['color']),\n                input: getStylesFromElement('inputIsError', [\n                    'borderColor',\n                    'borderWidth',\n                    'color',\n                ]),\n            },\n        };\n    }, []);\n\n    const mapToSquareStyles = useCallback(\n        (styles: ReturnType<typeof copyStylesFromDummyFormFields>) => {\n            const { borderColor, borderRadius, borderWidth, ...input } = styles.default.input;\n            const {\n                borderColor: borderColorIsFocus,\n                borderWidth: borderWidthIsFocus,\n                ...inputIsFocus\n            } = styles.focus.input;\n            const {\n                borderColor: borderColorIsError,\n                borderWidth: borderWidthIsError,\n                color: colorIsError,\n            } = styles.error.input;\n\n            return {\n                input,\n                'input.is-focus': {\n                    ...inputIsFocus,\n                },\n                'input.is-error': {\n                    color: colorIsError,\n                },\n                '.input-container': {\n                    borderColor,\n                    borderRadius,\n                    borderWidth,\n                },\n                '.input-container.is-focus': {\n                    borderColor: borderColorIsFocus,\n                    borderWidth: borderWidthIsFocus,\n                },\n                '.input-container.is-error': {\n                    borderColor: borderColorIsError,\n                    borderWidth: borderWidthIsError,\n                },\n                '.message-text': {\n                    color: styles.default.message.color,\n                },\n                '.message-icon': {\n                    color: styles.default.message.color,\n                },\n                '.message-text.is-error': {\n                    color: styles.error.message.color,\n                },\n                '.message-icon.is-error': {\n                    color: styles.error.message.color,\n                },\n            };\n        },\n        [],\n    );\n\n    const containerId = 'squarev2_payment_element_container';\n\n    const initializePayment = useCallback(async () => {\n        let style;\n\n        try {\n            style = mapToSquareStyles(copyStylesFromDummyFormFields());\n        } catch {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        await checkoutService.initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n            squarev2: {\n                containerId,\n                style,\n            },\n        });\n    }, [\n        checkoutService,\n        copyStylesFromDummyFormFields,\n        mapToSquareStyles,\n        method.gateway,\n        method.id,\n    ]);\n\n    const deinitializePayment = useCallback(async () => {\n        await checkoutService.deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [checkoutService, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, [deinitializePayment, initializePayment]);\n\n    return (\n        <SquareV2Form\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            containerId={containerId}\n            deinitializePayment={deinitializePayment}\n            initializePayment={initializePayment}\n            method={method}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    SquareV2PaymentMethod,\n    [{ id: 'squarev2' }],\n);\n","import React, { type FunctionComponent, useMemo } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AffirmPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const description = useMemo(() => <TranslatedString id=\"payment.affirm_body_text\" />, []);\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            description={description}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AffirmPaymentMethod,\n    [{ id: 'affirm' }],\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AmazonPayV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    method: {\n        initializationData: { paymentDescriptor, paymentToken },\n    },\n    ...rest\n}) => {\n    const initializeAmazonPayV2Payment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                amazonpay: {\n                    editButtonId: 'editButtonId',\n                },\n            }),\n        [checkoutService],\n    );\n\n    const reload = useCallback(() => window.location.reload(), []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...rest}\n            buttonId=\"editButtonId\"\n            containerId=\"paymentWidget\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            hideWidget\n            initializePayment={initializeAmazonPayV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignInRequired={false}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            onSignOut={reload}\n            paymentDescriptor={paymentDescriptor}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldShow={!!paymentToken}\n            shouldShowDescriptor={!!paymentToken}\n            shouldShowEditButton={!!paymentToken}\n            signOut={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AmazonPayV2PaymentMethod,\n    [{ id: 'amazonpay' }],\n);\n","import { type CardInstrument, type LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { type FunctionComponent, type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    type CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from './components';\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n    const {\n        config: { cardCode, showCardHolderName },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId = '';\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: isCardHolderNameRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_name_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccName'),\n                                }\n                              : undefined,\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const hostedFieldset = (\n        <HostedCreditCardFieldset\n            additionalFields={\n                method.config.requireCustomerCode && (\n                    <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                )\n            }\n            cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n            cardExpiryId={getHostedFieldId('ccExpiry')}\n            cardNameId={isCardHolderNameRequired ? getHostedFieldId('ccName') : undefined}\n            cardNumberId={getHostedFieldId('ccNumber')}\n            focusedFieldType={focusedFieldType}\n        />\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: {\n                        form: await getHostedFormOptions(selectedInstrument),\n                        bigpayToken: selectedInstrument?.bigpayToken,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const props = {\n        checkoutService,\n        checkoutState,\n        paymentForm,\n        language,\n        method,\n        onUnhandledError,\n    };\n\n    return (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedCreditCardPaymentMethod,\n    [\n        {\n            id: 'hosted-credit-card',\n        },\n        { id: 'credit_card', gateway: 'bluesnapdirect' },\n        { id: 'tdonlinemart' },\n    ],\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    type CheckoutButtonResolveId,\n    PaymentMethodId,\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst VisaCheckoutPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeVisaCheckoutPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const mergedOptions = {\n                ...defaultOptions,\n                braintreevisacheckout: {\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"visaCheckoutWalletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            editButtonClassName=\"v-button\"\n            initializePayment={initializeVisaCheckoutPayment}\n            method={method}\n            shouldShowEditButton\n            signInButtonClassName=\"v-button\"\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    VisaCheckoutPaymentMethod,\n    [{ id: PaymentMethodId.BraintreeVisaCheckout }],\n);\n","import {\n    type AdyenValidationState,\n    type CardInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, useEffect, useState } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV3CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV3CardValidation: FunctionComponent<AdyenV3CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            <TranslatedString id=\"payment.credit_card_number_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV3CardValidation;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\nimport { type Omit } from 'utility-types';\n\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport type AdyenV3FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    shouldRenderAdditionalActionContentModal: boolean;\n    isModalVisible: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV3Form: FunctionComponent<AdyenV3FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    shouldRenderAdditionalActionContentModal,\n    isModalVisible,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    checkoutState,\n    checkoutService,\n    onUnhandledError,\n    ...rest\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={shouldRenderAdditionalActionContentModal}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n                style={\n                    !isModalVisible && method.id === 'scheme'\n                        ? {\n                              overlay: {\n                                  display: 'none',\n                              },\n                          }\n                        : {}\n                }\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!shouldRenderAdditionalActionContentModal && <div id={additionalActionContainerId} />}\n        </>\n    );\n};\n\nexport default AdyenV3Form;\n","import {\n    type AdyenCreditCardComponentOptions,\n    type AdyenValidationState,\n    type CardInstrument,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { type HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV3CardValidation from './AdyenV3CardValidation';\nimport AdyenV3Form from './AdyenV3Form';\n\nexport interface AdyenOptions {\n    [key: string]: AdyenCreditCardComponentOptions;\n}\n\nexport enum AdyenV3PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    onUnhandledError,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n\n    const [shouldRenderAdditionalActionContentModal, setShouldRenderAdditionalActionContentModal] =\n        useState<boolean>(false);\n    const [isAdditionalActionContentModalVisible, setIsAdditionalActionContentModalVisible] =\n        useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const component = method.id;\n    const shouldHideInstrumentExpiryDate = component === AdyenV3PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShouldRenderAdditionalActionContentModal(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onActionHandled = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(true);\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            const adyenOptions: AdyenOptions = {\n                [AdyenV3PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv3: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                        onActionHandled,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            onActionHandled,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV3CardValidation\n                cardValidationState={cardValidationState}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV3Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                hideContentWhenSignedOut\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                isModalVisible={isAdditionalActionContentModalVisible}\n                                language={language}\n                                method={method}\n                                onUnhandledError={onUnhandledError}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                shouldRenderAdditionalActionContentModal={\n                                    shouldRenderAdditionalActionContentModal\n                                }\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV3PaymentMethod,\n    [{ gateway: 'adyenv3' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedPaymentComponent } from './components';\n\nconst HostedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    onUnhandledError,\n    language,\n    paymentForm,\n}) => {\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            onUnhandledError={onUnhandledError}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedPaymentMethod,\n    [{ id: 'quadpay' }, { id: 'sezzle' }, { id: 'zip' }],\n);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await derivedProps.loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n    }, [\n        initializePayment,\n        method.gateway,\n        method.id,\n        isInstrumentFeatureAvailableProp,\n        derivedProps,\n        onUnhandledError,\n    ]);\n\n    useEffect(() => {\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n    }, [deinitializePayment, method.gateway, method.id, onUnhandledError]);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import { type Coupon } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface AppliedCouponProps {\n    coupon: Coupon;\n}\n\nconst AppliedCoupon: FunctionComponent<AppliedCouponProps> = ({ coupon }) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--coupon\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"coupon-amount\">\n                {coupon.displayName}\n            </span>{' '}\n            <TranslatedString id=\"redeemable.coupon_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\" data-test=\"coupon-code\">\n            {coupon.code}\n        </span>\n    </div>\n);\n\nexport default memo(AppliedCoupon);\n","import { type GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { ShopperCurrency } from '../currency';\n\nexport interface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n}\n\nconst AppliedGiftCertificate: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n}) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--giftCertificate\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"giftCertificate-amount\">\n                <ShopperCurrency amount={giftCertificate.used} />\n            </span>{' '}\n            <TranslatedString id=\"redeemable.gift_certificate_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\">\n            {giftCertificate.remaining > 0 && (\n                <span className=\"redeemable-info-subHeader--remaining\">\n                    <TranslatedString id=\"redeemable.gift_certificate_remaining_text\" />{' '}\n                    <span data-test=\"giftCertificate-remaining\">\n                        <ShopperCurrency amount={giftCertificate.remaining} />\n                    </span>\n                </span>\n            )}\n\n            <span data-test=\"giftCertificate-code\">{giftCertificate.code}</span>\n        </span>\n    </div>\n);\n\nexport default memo(AppliedGiftCertificate);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconRemove: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconRemove);\n","import classNames from 'classnames';\nimport React, {type FunctionComponent, type ReactNode} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconRemove } from '../ui/icon';\n\nimport './AppliedRedeemable.scss';\n\nexport interface AppliedRedeemableProps {\n    children: ReactNode;\n    isRemoving: boolean;\n    onRemove(): void;\n}\n\nconst AppliedRedeemable: FunctionComponent<AppliedRedeemableProps> = ({\n    children,\n    isRemoving,\n    onRemove,\n}) => (\n    <div className=\"form-checklist-header\">\n        <div className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\">\n            <span className=\"is-srOnly\">\n                <TranslatedString id=\"redeemable.applied_text\" />\n            </span>\n        </div>\n\n        <div className=\"form-label form-label-redeemable\">\n            <div className=\"redeemable\">\n                {children}\n                <div className=\"redeemable-column redeemable-actions\">\n                    <button\n                        className={classNames('redeemable-remove', { 'is-loading': isRemoving })}\n                        data-test=\"redeemable-remove\"\n                        disabled={isRemoving}\n                        onClick={onRemove}\n                        type=\"button\"\n                    >\n                        <IconRemove />\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default AppliedRedeemable;\n","import { type Coupon, type GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { AppliedCoupon } from '../coupon';\nimport { AppliedGiftCertificate } from '../giftCertificate';\n\nimport AppliedRedeemable from './AppliedRedeemable';\n\ninterface AppliedCouponProps {\n    coupon: Coupon;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedCouponChecklistItem: FunctionComponent<AppliedCouponProps> = ({\n    coupon,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(coupon.code);\n    }, [coupon, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedCoupon coupon={coupon} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\ninterface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedGiftCertificateChecklistItem: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(giftCertificate.code);\n    }, [giftCertificate, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedGiftCertificate giftCertificate={giftCertificate} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\nexport interface AppliedRedeemablesProps {\n    coupons?: Coupon[];\n    giftCertificates?: GiftCertificate[];\n    isRemovingGiftCertificate?: boolean;\n    isRemovingCoupon?: boolean;\n    onRemovedCoupon(code: string): void;\n    onRemovedGiftCertificate(code: string): void;\n}\n\nconst AppliedRedeemables: FunctionComponent<AppliedRedeemablesProps> = ({\n    coupons = [],\n    giftCertificates = [],\n    isRemovingCoupon = false,\n    isRemovingGiftCertificate = false,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n}) => {\n    if (!coupons.length && !giftCertificates.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"form-checklist optimizedCheckout-form-checklist\"\n            data-test=\"redeemables-list\"\n        >\n            {coupons.map((coupon) => (\n                <AppliedCouponChecklistItem\n                    coupon={coupon}\n                    isRemoving={isRemovingCoupon}\n                    key={coupon.code}\n                    onRemoved={onRemovedCoupon}\n                />\n            ))}\n\n            {giftCertificates.map((giftCertificate) => (\n                <AppliedGiftCertificateChecklistItem\n                    giftCertificate={giftCertificate}\n                    isRemoving={isRemovingGiftCertificate}\n                    key={giftCertificate.code}\n                    onRemoved={onRemovedGiftCertificate}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(AppliedRedeemables);\n","import { type CheckoutSelectors, type RequestError } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport classNames from 'classnames';\nimport { type FieldProps, type FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, {type FunctionComponent, type KeyboardEvent, memo, type ReactNode, useCallback} from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { type FormContextType, FormProvider, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { FormField, Label, TextInput } from '../ui/form';\nimport { Toggle } from '../ui/toggle';\n\nimport AppliedRedeemables, { type AppliedRedeemablesProps } from './AppliedRedeemables';\n\nexport interface RedeemableFormValues {\n    redeemableCode: string;\n}\n\nexport type ReedemableChildrenProps = Pick<\n    RedeemableProps,\n    | 'onRemovedCoupon'\n    | 'onRemovedGiftCertificate'\n    | 'isRemovingGiftCertificate'\n    | 'isRemovingCoupon'\n    | 'coupons'\n    | 'giftCertificates'\n>;\n\nexport type RedeemableProps = {\n    appliedRedeemableError?: RequestError;\n    isApplyingRedeemable?: boolean;\n    isRemovingRedeemable?: boolean;\n    removedRedeemableError?: RequestError;\n    showAppliedRedeemables?: boolean;\n    shouldCollapseCouponCode?: boolean;\n    applyCoupon(code: string): Promise<CheckoutSelectors>;\n    applyGiftCertificate(code: string): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n} & AppliedRedeemablesProps;\n\nconst Redeemable: FunctionComponent<\n    RedeemableProps & WithLanguageProps & FormikProps<RedeemableFormValues>\n    > = ({ shouldCollapseCouponCode, showAppliedRedeemables, ...formProps }) => {\n        const { themeV2 } = useThemeContext();\n\n        return (\n            <Toggle openByDefault={!shouldCollapseCouponCode}>\n                {({ toggle, isOpen }): ReactNode => (\n                    <>\n                        {shouldCollapseCouponCode && (\n                            <a\n                                aria-controls=\"redeemable-collapsable\"\n                                aria-expanded={isOpen}\n                                className={classNames('redeemable-label', { 'body-cta': themeV2 })}\n                                data-test=\"redeemable-label\"\n                                href=\"#\"\n                                onClick={preventDefault(toggle)}\n                            >\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </a>\n                        )}\n                        {!shouldCollapseCouponCode && (\n                            <div className={classNames('redeemable-label', { 'body-cta': themeV2 })}>\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </div>\n                        )}\n                        {(isOpen || !shouldCollapseCouponCode) && (\n                            <div data-test=\"redeemable-collapsable\" id=\"redeemable-collapsable\">\n                                <RedeemableForm {...formProps} />\n                                {showAppliedRedeemables && <AppliedRedeemables {...formProps} />}\n                            </div>\n                        )}\n                    </>\n                )}\n            </Toggle>\n        );\n    }\n\nconst RedeemableForm: FunctionComponent<\n    Partial<RedeemableProps> & FormikProps<RedeemableFormValues> & WithLanguageProps\n> = ({ appliedRedeemableError, isApplyingRedeemable, clearError = noop, submitForm, language }) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const handleSubmitForm = (setSubmitted: FormContextType['setSubmitted']) => {\n        if (isSubmittingOrder()) {\n            return;\n        }\n\n        setSubmitted(true);\n        submitForm();\n    }\n\n    const handleKeyDown = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => (event: KeyboardEvent) => {\n            if (appliedRedeemableError) {\n                clearError(appliedRedeemableError);\n            }\n\n            // note: to prevent submitting main form, we manually intercept\n            // the enter key event and submit the \"subform\".\n            if (event.keyCode === 13 || event.key === 'Enter') {\n                handleSubmitForm(setSubmitted);\n                event.preventDefault();\n            }\n        }),\n        [appliedRedeemableError, clearError, submitForm],\n    );\n\n    const handleSubmit = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => () => {\n            handleSubmitForm(setSubmitted);\n        }),\n        [],\n    );\n\n    const renderLabel = useCallback(\n        (name: string) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"redeemable.code_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderErrorMessage = useCallback((errorCode: string, errorMessage?: string) => {\n        switch (errorCode) {\n            case 'min_purchase':\n                return <TranslatedString id=\"redeemable.coupon_min_order_total\" />;\n\n            case 'not_applicable':\n                return <TranslatedString id=\"redeemable.coupon_location_error\" />;\n\n            default:\n                return errorMessage || <TranslatedString id=\"redeemable.code_invalid_error\" />;\n        }\n    }, []);\n\n    const renderInput = useCallback(\n        (setSubmitted: FormContextType['setSubmitted']) =>\n            ({ field }: FieldProps) =>\n                (\n                    <>\n                        {appliedRedeemableError &&\n                            appliedRedeemableError.errors &&\n                            appliedRedeemableError.errors[0] && (\n                                <Alert type={AlertType.Error}>\n                                    {renderErrorMessage(appliedRedeemableError.errors[0].code, appliedRedeemableError.errors[0].message)}\n                                </Alert>\n                            )}\n\n                        <div className=\"form-prefixPostfix\">\n                            <TextInput\n                                {...field}\n                                aria-label={language.translate('redeemable.code_label')}\n                                className=\"form-input optimizedCheckout-form-input\"\n                                onKeyDown={handleKeyDown(setSubmitted)}\n                                testId=\"redeemableEntry-input\"\n                                themeV2={themeV2}\n                            />\n\n                            <Button\n                                className={classNames('form-prefixPostfix-button--postfix', {\n                                    'body-bold': themeV2,\n                                })}\n                                disabled={isSubmittingOrder()}\n                                id=\"applyRedeemableButton\"\n                                isLoading={isApplyingRedeemable}\n                                onClick={handleSubmit(setSubmitted)}\n                                testId=\"redeemableEntry-submit\"\n                                variant={ButtonVariant.Secondary}\n                            >\n                                <TranslatedString id=\"redeemable.apply_action\" />\n                            </Button>\n                        </div>\n                    </>\n                ),\n        [\n            appliedRedeemableError,\n            handleKeyDown,\n            handleSubmit,\n            isApplyingRedeemable,\n            language,\n            isSubmittingOrder,\n            renderErrorMessage,\n        ],\n    );\n\n    const renderContent = useCallback(\n        memoizeOne(({ setSubmitted }: FormContextType) => (\n            <FormField\n                input={renderInput(setSubmitted)}\n                label={renderLabel}\n                name=\"redeemableCode\"\n            />\n        )),\n        [renderLabel, renderInput],\n    );\n\n    return (\n        <fieldset className=\"form-fieldset redeemable-entry\">\n            <FormProvider>{renderContent}</FormProvider>\n        </fieldset>\n    );\n};\n\nexport default withLanguage(\n    withFormik<RedeemableProps & WithLanguageProps, RedeemableFormValues>({\n        mapPropsToValues() {\n            return {\n                redeemableCode: '',\n            };\n        },\n\n        async handleSubmit(\n            { redeemableCode },\n            { props: { applyCoupon, applyGiftCertificate, clearError } },\n        ) {\n            const code = redeemableCode.trim();\n\n            try {\n                await applyGiftCertificate(code);\n            } catch (error) {\n                if (error instanceof Error) {\n                    clearError(error);\n                }\n\n                applyCoupon(code);\n            }\n        },\n\n        validationSchema({ language }: RedeemableProps & WithLanguageProps) {\n            return object({\n                redeemableCode: string().required(\n                    language.translate('redeemable.code_required_error'),\n                ),\n            });\n        },\n    })(memo(Redeemable)),\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    type CheckoutButtonResolveId,\n    PaymentMethodId,\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst GooglePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeGooglePayPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const loadingContainerId = 'checkout-app';\n            const mergedOptions = {\n                ...defaultOptions,\n                [PaymentMethodId.AdyenV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AdyenV3GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AuthorizeNetGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BNZGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BigCommercePaymentsGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BraintreeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.PayPalCommerceGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeUPEGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CybersourceV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.OrbitalGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CheckoutcomGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.WorldpayAccessGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.TdOnlineMartGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeOCSGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"walletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeGooglePayPayment}\n            method={method}\n            shouldShowEditButton\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    GooglePayPaymentMethod,\n    [\n        { id: PaymentMethodId.AdyenV2GooglePay },\n        { id: PaymentMethodId.AdyenV3GooglePay },\n        { id: PaymentMethodId.AuthorizeNetGooglePay },\n        { id: PaymentMethodId.BNZGooglePay },\n        { id: PaymentMethodId.BraintreeGooglePay },\n        { id: PaymentMethodId.PayPalCommerceGooglePay },\n        { id: PaymentMethodId.BigCommercePaymentsGooglePay },\n        { id: PaymentMethodId.CheckoutcomGooglePay },\n        { id: PaymentMethodId.CybersourceV2GooglePay },\n        { id: PaymentMethodId.OrbitalGooglePay },\n        { id: PaymentMethodId.StripeGooglePay },\n        { id: PaymentMethodId.StripeUPEGooglePay },\n        { id: PaymentMethodId.WorldpayAccessGooglePay },\n        { id: PaymentMethodId.TdOnlineMartGooglePay },\n        { id: PaymentMethodId.StripeOCSGooglePay },\n    ],\n);\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createContext } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nconst PaymentContext = createContext<PaymentContextProps | undefined>(undefined);\n\nexport default PaymentContext;\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","enum PaymentMethodProviderType {\n    Api = 'PAYMENT_TYPE_API',\n    Hosted = 'PAYMENT_TYPE_HOSTED',\n    Offline = 'PAYMENT_TYPE_OFFLINE',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n}\n\nexport default PaymentMethodProviderType;\n","import React, { type FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BlueSnapDirectAlternativePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectAlternativePaymentMethod,\n    [{ gateway: 'bluesnapdirect' }],\n);\n","import { type CardInstrument, type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst MonerisPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const containerId = `moneris-iframe-container`;\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const initializeMonerisPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const paymentConfig = {\n                ...options,\n                moneris: {\n                    containerId,\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            };\n\n            return checkoutService.initializePayment(paymentConfig);\n        },\n        [containerId, getHostedFormOptions, checkoutService],\n    );\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMonerisPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n            validateInstrument={validateInstrument}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MonerisPaymentMethod,\n    [{ id: 'moneris' }],\n);\n","import { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst OfflinePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    return null;\n};\n\nexport default toResolvableComponent(OfflinePaymentMethod, [\n    {\n        type: 'PAYMENT_TYPE_OFFLINE',\n    },\n]);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, {\n    createRef,\n    type FunctionComponent,\n    type RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport {\n    HostedPaymentComponent,\n    type HostedPaymentComponentProps,\n} from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay, Modal } from '@bigcommerce/checkout/ui';\n\nexport type BlueSnapV2PaymentMethodProps = HostedPaymentComponentProps;\n\ninterface BlueSnapV2PaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelBlueSnapV2Payment?(): void;\n}\n\nconst BlueSnapV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [isLoadingIframe, setisLoadingIframe] = useState<boolean>(false);\n    const [paymentPageContent, setPaymentPageContent] = useState<HTMLElement>();\n    const ref = useRef<BlueSnapV2PaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n\n    const cancelBlueSnapV2ModalFlow = useCallback(() => {\n        setPaymentPageContent(undefined);\n\n        if (ref.current.cancelBlueSnapV2Payment) {\n            ref.current.cancelBlueSnapV2Payment();\n            ref.current.cancelBlueSnapV2Payment = undefined;\n        }\n    }, []);\n\n    const initializeBlueSnapV2Payment = useCallback(\n        (options: PaymentInitializeOptions) => {\n            return checkoutService.initializePayment({\n                ...options,\n                bluesnapv2: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setPaymentPageContent(content);\n                        setisLoadingIframe(true);\n                        ref.current.cancelBlueSnapV2Payment = cancel;\n                    },\n                    style: {\n                        border: '1px solid lightgray',\n                        height: '60vh',\n                        width: '100%',\n                    },\n                },\n            });\n        },\n        [checkoutService],\n    );\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (ref.current.paymentPageContentRef.current && paymentPageContent) {\n            paymentPageContent.addEventListener('load', () => {\n                setisLoadingIframe(false);\n            });\n            ref.current.paymentPageContentRef.current.appendChild(paymentPageContent);\n        }\n    }, [paymentPageContent]);\n\n    return (\n        <>\n            <HostedPaymentComponent\n                {...rest}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                initializePayment={initializeBlueSnapV2Payment}\n                method={method}\n                paymentForm={paymentForm}\n            />\n            <Modal\n                additionalModalClassName=\"modal--bluesnap\"\n                isOpen={!!paymentPageContent}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelBlueSnapV2ModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <LoadingOverlay isLoading={isLoadingIframe}>\n                    <div ref={ref.current.paymentPageContentRef} />\n                </LoadingOverlay>\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapV2PaymentMethod,\n    [{ gateway: 'bluesnapv2' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    children: React.ReactNode;\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\n        {children}\n    </span>\n);\n\nexport default Tooltip;\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectTextFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    autoComplete?: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectTextField: FunctionComponent<BlueSnapDirectTextFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    autoComplete,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete={autoComplete}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel, autoComplete],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectTextField);\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps, useField } from 'formik';\nimport React, {\n    type FunctionComponent,\n    type SyntheticEvent,\n    useCallback,\n    useEffect,\n    useState,\n} from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface MollieCustomCardFormProps {\n    method: PaymentMethod;\n}\n\nexport interface Issuer {\n    name: string;\n    image: {\n        size1x: string;\n    };\n    id: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface SelecteIssuerProp {\n    selectedIssuer: Issuer;\n}\n\ninterface OptionButtonProps {\n    issuer: Issuer;\n    className?: string;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\nconst MollieAPMCustomForm: FunctionComponent<MollieCustomCardFormProps & WithLanguageProps> = ({\n    method,\n    language,\n}) => {\n    const issuers: Issuer[] = method.initializationData?.paymentMethodsResponse;\n\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer>({\n        name: language.translate('payment.select_your_bank'),\n        id: '',\n        image: { size1x: '' },\n    });\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={selectedIssuer} />,\n        [selectedIssuer],\n    );\n\n    if (!issuers || issuers.length === 0) {\n        return <></>;\n    }\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        const _selectedIssuer = issuers.find(({ id }) => id === currentTarget.dataset.id);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n    };\n\n    const issuersList = (\n        <ul\n            className=\"dropdown-menu instrumentSelect-dropdownMenu mollie-instrument-card\"\n            id=\"issuersDropdown\"\n        >\n            {issuers.map((issuer) => (\n                <li className=\"dropdown-menu-item dropdown-menu-item--select\" key={issuer.id}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <IssuerSelectButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"issuer\" />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    selectedIssuer,\n}) => {\n    const [field, _, helpers] = useField(restField.name);\n    const Input = useCallback(() => <input {...field} type=\"hidden\" />, [field]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void helpers.setValue(selectedIssuer?.id);\n    }, [value, selectedIssuer, helpers]);\n\n    return <Input />;\n};\n\nexport const IssuerSelectButton: FunctionComponent<SelecteIssuerProp> = ({ selectedIssuer }) => (\n    <a\n        className=\"instrumentSelect instrumentSelect-card button dropdown-button dropdown-toogle--select\"\n        href=\"#\"\n        id=\"issuerToggle\"\n        onClick={preventDefault()}\n    >\n        {selectedIssuer.name}\n    </a>\n);\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...props }) => {\n    const { name, image, id } = issuer;\n\n    return (\n        <a className=\"instrumentSelect-details mollie-instrument-list\" {...props} data-id={id}>\n            <label className=\"mollie-instrument-left\">{name}</label>\n            <img alt={name} data-test=\"cart-item-image\" src={image.size1x} />\n        </a>\n    );\n};\n\nexport default withLanguage(MollieAPMCustomForm);\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport MollieAPMCustomForm from './MollieAPMCustomForm';\n\nexport interface MollieCustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n        cardHolderElementOptions: {\n            containerId: string;\n        };\n    };\n    isCreditCard: boolean;\n    method: PaymentMethod;\n}\n\nconst MollieCustomCardForm: React.FunctionComponent<MollieCustomCardFormProps> = ({\n    options,\n    isCreditCard,\n    method,\n}) =>\n    !isCreditCard ? (\n        <MollieAPMCustomForm method={method} />\n    ) : (\n        <div className=\"form-ccFields\">\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardNumberElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_number_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input', 'has-icon')}\n                    data-cse=\"CardNumber\"\n                    id={options.cardNumberElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardHolderElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_name_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"CardHolder\"\n                    id={options.cardHolderElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside', 'mollie-paddingRight')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardCvcElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                    <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                        <span className=\"has-tip\">\n                            <IconHelp />\n                        </span>\n                    </TooltipTrigger>\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"SecurityCode\"\n                    id={options.cardCvcElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardExpiryElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"ExpiryDate\"\n                    id={options.cardExpiryElementOptions.containerId}\n                />\n            </div>\n        </div>\n    );\n\nexport default MollieCustomCardForm;\n","import {\n    type CardInstrument,\n    type LegacyHostedFormOptions,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn, some } from 'lodash';\nimport React, {\n    type FunctionComponent,\n    type ReactNode,\n    useCallback,\n    useContext,\n    useState,\n} from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport MollieCustomCardForm from './MollieCustomCardForm';\n\nexport enum MolliePaymentMethodType {\n    creditcard = 'credit_card',\n}\n\nconst MolliePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutState,\n    checkoutService,\n    language,\n    paymentForm,\n    ...props\n}) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const localeContext = useContext(LocaleContext);\n    const containerId = `mollie-${method.method}`;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const {\n        setFieldTouched,\n        setFieldValue,\n        setSubmitted,\n        submitForm,\n        setSubmit,\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n    const initializeMolliePayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const mollieElements = getMolliesElementOptions();\n\n            return checkoutService.initializePayment({\n                ...options,\n                mollie: {\n                    containerId,\n                    cardNumberId: mollieElements.cardNumberElementOptions.containerId,\n                    cardCvcId: mollieElements.cardCvcElementOptions.containerId,\n                    cardHolderId: mollieElements.cardHolderElementOptions.containerId,\n                    cardExpiryId: mollieElements.cardExpiryElementOptions.containerId,\n                    styles: {\n                        base: {\n                            color: '#333333',\n                            '::placeholder': {\n                                color: '#999999',\n                            },\n                        },\n                        valid: {\n                            color: '#090',\n                        },\n                        invalid: {\n                            color: '#D14343',\n                        },\n                    },\n                    unsupportedMethodMessage: localeContext?.language.translate(\n                        'payment.mollie_unsupported_method_error',\n                    ),\n                    disableButton: (disabled: boolean) => {\n                        if (paymentContext) {\n                            disableSubmit(method, disabled);\n                        }\n                    },\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            disableSubmit,\n            localeContext?.language,\n            getHostedFormOptions,\n            paymentContext,\n            method,\n        ],\n    );\n\n    const getMolliesElementOptions = () => {\n        return {\n            cardNumberElementOptions: {\n                containerId: 'mollie-card-number-component-field',\n            },\n            cardExpiryElementOptions: {\n                containerId: 'mollie-card-expiry-component-field',\n            },\n            cardCvcElementOptions: {\n                containerId: 'mollie-card-cvc-component-field',\n            },\n            cardHolderElementOptions: {\n                containerId: 'mollie-card-holder-component-field',\n            },\n        };\n    };\n\n    function renderCustomPaymentForm() {\n        const options = getMolliesElementOptions();\n\n        return (\n            <MollieCustomCardForm isCreditCard={isCreditCard()} method={method} options={options} />\n        );\n    }\n\n    function isCreditCard(): boolean {\n        return method.method === MolliePaymentMethodType.creditcard;\n    }\n\n    function validateInstrument(_shouldShowNumber: boolean, selectedInstrument: CardInstrument) {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    }\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...props}\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hideContentWhenSignedOut\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMolliePayment}\n            instruments={instruments}\n            isAccountInstrument={!isCreditCard()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument={true}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n            validateInstrument={validateInstrument}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MolliePaymentMethod,\n    [{ gateway: 'mollie' }, { gateway: 'mollie', id: 'applepay' }],\n);\n","import { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaPayment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarna: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaPaymentMethod,\n    [{ id: 'klarna' }],\n);\n","export interface BlueSnapDirectInitializationData {\n    sepaCreditorCompanyName: string;\n    idealIssuers: IdealIssuer[];\n}\n\ninterface IdealIssuer {\n    issuerId: string;\n    issuerName: string;\n}\n\nexport const isBlueSnapDirectIdealIssuerList = (array: unknown): array is IdealIssuer[] => {\n    if (\n        !(\n            Array.isArray(array) &&\n            array.length &&\n            'issuerId' in array[0] &&\n            'issuerName' in array[0]\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const isBlueSnapDirectInitializationData = (\n    object: unknown,\n): object is BlueSnapDirectInitializationData => {\n    if (\n        !(\n            typeof object === 'object' &&\n            object !== null &&\n            (('sepaCreditorCompanyName' in object &&\n                typeof object.sepaCreditorCompanyName === 'string') ||\n                ('idealIssuers' in object && isBlueSnapDirectIdealIssuerList(object.idealIssuers)))\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { boolean, object, type ObjectSchema, string } from 'yup';\n\nimport {\n    type DocumentOnlyCustomFormFieldsetValues,\n    type FawryCustomFormFieldsetValues,\n    type IdealCustomFormFieldsetValues,\n    type SepaCustomFormFieldsetValues,\n} from './CheckoutcomFormValues';\n\nexport type checkoutcomCustomPaymentMethods = 'fawry' | 'sepa';\nexport type documentPaymentMethods = 'oxxo' | 'qpay' | 'boleto' | 'ideal';\nexport type checkoutcomPaymentMethods = documentPaymentMethods | checkoutcomCustomPaymentMethods;\nexport const checkoutcomPaymentMethodsArray = ['fawry', 'sepa', 'oxxo', 'qpay', 'boleto', 'ideal'];\nexport interface CustomValidationSchemaOptions {\n    paymentMethod: checkoutcomPaymentMethods;\n    language: LanguageService;\n}\n\nconst checkoutComShemas: {\n    [key in checkoutcomPaymentMethods]: (language: LanguageService) => any;\n} = {\n    oxxo: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_oxxo'))\n            .length(18, language.translate('payment.checkoutcom_document_invalid_error_oxxo')),\n    }),\n    qpay: (language: LanguageService) => ({\n        ccDocument: string()\n            .notRequired()\n            .max(32, language.translate('payment.checkoutcom_document_invalid_error_qpay')),\n    }),\n    boleto: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .min(11, language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .max(14, language.translate('payment.checkoutcom_document_invalid_error_boleto')),\n    }),\n    sepa: (language: LanguageService) => ({\n        iban: string().required(language.translate('payment.sepa_account_number_required')),\n        sepaMandate: boolean().required(language.translate('payment.sepa_mandate_required')),\n    }),\n    ideal: (language: LanguageService) => ({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    }),\n    fawry: (language: LanguageService) => ({\n        customerMobile: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'))\n            .matches(\n                new RegExp(`^\\\\d{11}$`),\n                language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'),\n            ),\n        customerEmail: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error'))\n            .email(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error')),\n    }),\n};\n\nexport default memoize(function getCheckoutcomValidationSchemas({\n    paymentMethod,\n    language,\n}: CustomValidationSchemaOptions): ObjectSchema<\n    | DocumentOnlyCustomFormFieldsetValues\n    | FawryCustomFormFieldsetValues\n    | IdealCustomFormFieldsetValues\n    | SepaCustomFormFieldsetValues\n> {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return object(checkoutComShemas[paymentMethod](language));\n});\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\nimport { FormContext, type FormContextType } from '@bigcommerce/checkout/ui';\n\nexport type WithFormProps = FormContextType;\n\nconst withForm = createInjectHoc(FormContext, { displayNamePrefix: 'WithForm' });\n\nexport default withForm;\n","import { type BankInstrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isSepaInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useSepaInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<BankInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isSepaInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): BankInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useSepaInstruments;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport default memoize(function getSepaValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  iban: string()\n                      .matches(\n                          /^[a-zA-Z0-9]+$/i,\n                          language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n                      )\n                      .required(language.translate('payment.sepa_account_number_required')),\n                  firstName: string().required(\n                      language.translate('address.first_name_required_error'),\n                  ),\n                  lastName: string().required(\n                      language.translate('address.last_name_required_error'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { type FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport useSepaInstruments from './hooks/useSepaInstruments';\nimport getSepaValidationSchema from './validation-schemas/getSepaValidationSchema';\n\nconst BlueSnapDirectSepaPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        method,\n        checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n        checkoutState: {\n            data: { isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        },\n        paymentForm: { disableSubmit, setValidationSchema },\n        language,\n        onUnhandledError,\n    } = props;\n\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const [disabled, setDisabled] = useState(true);\n    const toggleSubmitButton = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeSepa = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeSepa = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeSepa();\n\n        return () => {\n            void deinitializeSepa();\n        };\n    }, [deinitializeSepa, initializeSepa]);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useSepaInstruments(method);\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n\n    useEffect(() => {\n        setValidationSchema(method, getSepaValidationSchema(language, shouldShowForm));\n    }, [language, shouldShowForm, setValidationSchema, method]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (isInstrumentFeatureAvailable) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const isLoading = isLoadingInstruments();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_sepa_direct_debit')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <>\n                        <BlueSnapDirectTextField\n                            autoComplete=\"iban\"\n                            labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                            name=\"iban\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.first_name_label')}\n                            name=\"firstName\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.last_name_label')}\n                            name=\"lastName\"\n                            useFloatingLabel={true}\n                        />\n                    </>\n                )}\n\n                <CheckboxFormField\n                    labelContent={language.translate(\n                        'payment.bluesnap_direct_sepa_mandate_disclaimer',\n                        {\n                            creditorName: method.initializationData.sepaCreditorCompanyName,\n                        },\n                    )}\n                    name=\"shopperPermission\"\n                    onChange={toggleSubmitButton}\n                />\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectSepaPaymentMethod,\n    [{ id: 'sepa_direct_debit', gateway: 'bluesnapdirect' }],\n);\n","import { type CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { EMPTY_ARRAY } from '../common/utility';\n\nimport { type RedeemableProps } from './Redeemable';\n\nexport default function mapToRedeemableProps(\n    context: CheckoutContextProps,\n): RedeemableProps | null {\n    const {\n        checkoutService,\n        checkoutState: {\n            data: { getConfig, getCoupons, getGiftCertificates },\n            statuses: {\n                isApplyingCoupon,\n                isApplyingGiftCertificate,\n                isRemovingCoupon,\n                isRemovingGiftCertificate,\n            },\n            errors: {\n                getApplyCouponError,\n                getApplyGiftCertificateError,\n                getRemoveCouponError,\n                getRemoveGiftCertificateError,\n            },\n        },\n    } = context;\n\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        appliedRedeemableError: getApplyCouponError() || getApplyGiftCertificateError(),\n        applyCoupon: checkoutService.applyCoupon,\n        applyGiftCertificate: checkoutService.applyGiftCertificate,\n        clearError: checkoutService.clearError,\n        coupons: getCoupons() || EMPTY_ARRAY,\n        giftCertificates: getGiftCertificates() || EMPTY_ARRAY,\n        isApplyingRedeemable: isApplyingCoupon() || isApplyingGiftCertificate(),\n        isRemovingCoupon: isRemovingCoupon(),\n        isRemovingGiftCertificate: isRemovingGiftCertificate(),\n        onRemovedCoupon: checkoutService.removeCoupon,\n        onRemovedGiftCertificate: checkoutService.removeGiftCertificate,\n        removedRedeemableError: getRemoveCouponError() || getRemoveGiftCertificateError(),\n        shouldCollapseCouponCode: config.checkoutSettings.isCouponCodeCollapsed,\n    };\n}\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\n\nimport PaymentContext, { type PaymentContextProps } from './PaymentContext';\n\nexport type WithPaymentProps = PaymentContextProps;\n\nconst withPayment = createInjectHoc(PaymentContext, { displayNamePrefix: 'WithPayment' });\n\nexport default withPayment;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreeLocalPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const methodId = method.id;\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                braintreelocalmethods: {\n                    container: '#checkout-payment-continue',\n                    buttonText: language.translate('payment.continue_with_brand', {\n                        brandName: methodId,\n                    }),\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeLocalPaymentMethod,\n    [{ gateway: 'braintreelocalmethods' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nexport interface BoltCustomFormProps {\n    containerId: string;\n    showCreateAccountCheckbox: boolean;\n}\n\nconst agreementTranslationOptions = {\n    privacyPolicyUrl: 'https://www.bolt.com/privacy/',\n    termsUrl: 'https://www.bolt.com/end-user-terms/',\n};\n\nconst benefitsList = [\n    { id: 'payment.bolt_benefit_1' },\n    { id: 'payment.bolt_benefit_2' },\n    { id: 'payment.bolt_benefit_3' },\n];\n\nconst BoltCreateAccountCheckbox: FunctionComponent = () => {\n    const labelContent = (\n        <>\n            <TranslatedHtml\n                data={agreementTranslationOptions}\n                id=\"payment.bolt_checkbox_agreement\"\n            />\n            <ul>\n                {benefitsList.map(({ id }, key) => (\n                    <li key={key}>\n                        <TranslatedString id={id} />\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-checkbox form-field--createAccount\"\n            labelContent={labelContent}\n            name=\"shouldCreateAccount\"\n        />\n    );\n};\n\nconst BoltCustomForm: FunctionComponent<BoltCustomFormProps> = ({\n    containerId,\n    showCreateAccountCheckbox,\n}) => {\n    return (\n        <div className=\"form-ccFields\">\n            <div className=\"form-field form-field--bolt-embed\" id={containerId} />\n            {showCreateAccountCheckbox ? <BoltCreateAccountCheckbox /> : null}\n        </div>\n    );\n};\n\nexport default BoltCustomForm;\n","import React, { type FunctionComponent, useCallback, useState } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltCustomForm from './BoltCustomForm';\n\nconst BoltEmbeddedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [showCreateAccountCheckbox, setShowCreateAccountCheckbox] = useState(false);\n\n    const boltEmbeddedContainerId = 'bolt-embedded';\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const initializeBoltPayment = useCallback(\n        (options: any) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    containerId: boltEmbeddedContainerId,\n                    useBigCommerceCheckout: true,\n                    onPaymentSelect: (hasBoltAccount: boolean) => {\n                        setShowCreateAccountCheckbox(!hasBoltAccount);\n\n                        if (hasBoltAccount) {\n                            setFieldValue('shouldCreateAccount', false);\n                        }\n                    },\n                },\n            }),\n        [checkoutService, boltEmbeddedContainerId, setFieldValue],\n    );\n\n    const renderCustomPaymentForm = useCallback(\n        () => (\n            <BoltCustomForm\n                containerId={boltEmbeddedContainerId}\n                showCreateAccountCheckbox={showCreateAccountCheckbox}\n            />\n        ),\n        [boltEmbeddedContainerId, showCreateAccountCheckbox],\n    );\n\n    const { getInstruments, isPaymentDataRequired } = checkoutState.data;\n    const { isInitializingPayment, isLoadingInstruments } = checkoutState.statuses;\n    const instruments = getInstruments(method) || [];\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId=\"boltEmbeddedOneClick\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeBoltPayment}\n            instruments={instruments}\n            isInitializing={isInitializingPayment()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={!isGuestCustomer}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltEmbeddedPaymentMethod;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport default memoize(function getPayByBankValidationSchema(\n    language: LanguageService,\n): ObjectSchema {\n    return object({\n        iban: string()\n            .matches(\n                /^[a-zA-Z0-9]+$/i,\n                language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n            )\n            .required(language.translate('payment.pay_by_bank_iban_required')),\n    });\n});\n","import React, { type FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport getPayByBankValidationSchema from './validation-schemas/getPayByBankValidationSchema';\n\nconst BlueSnapDirectPayByBankPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    language,\n    paymentForm: { setValidationSchema },\n    checkoutService: { initializePayment, deinitializePayment },\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const initializePayByBank = useCallback(async () => {\n        setValidationSchema(method, getPayByBankValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, language, method, setValidationSchema]);\n\n    const deinitializePayByBank = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayByBank();\n\n        return () => {\n            void deinitializePayByBank();\n        };\n    }, [deinitializePayByBank, initializePayByBank]);\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>{language.translate('payment.bluesnap_direct_iban.label')}</Legend>\n            }\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectTextField\n                autoComplete=\"iban\"\n                labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                name=\"iban\"\n                useFloatingLabel={true}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectPayByBankPaymentMethod,\n    [{ id: 'pay_by_bank', gateway: 'bluesnapdirect' }],\n);\n","export enum BluesnapECPAccountType {\n    ConsumerChecking = 'CONSUMER_CHECKING',\n    ConsumerSavings = 'CONSUMER_SAVINGS',\n    CorporateChecking = 'CORPORATE_CHECKING',\n    CorporateSavings = 'CORPORATE_SAVINGS',\n}\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectNumberFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectNumberField: FunctionComponent<BlueSnapDirectNumberFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete=\"cc-number\"\n                fieldType={DynamicFormFieldType.TELEPHONE}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectNumberField);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { BluesnapECPAccountType } from '../constants';\n\nimport BlueSnapDirectNumberField from './BlueSnapDirectNumberField';\nimport BlueSnapDirectSelectField from './BlueSnapDirectSelectField';\nimport BlueSnapDirectTextField from './BlueSnapDirectTextField';\n\nexport interface BlueSnapDirectEcpFieldsetProps {\n    language: LanguageService;\n    useFloatingLabel?: boolean;\n    shouldRenderCompanyName: boolean;\n}\n\nconst BlueSnapDirectEcpFieldset: FunctionComponent<BlueSnapDirectEcpFieldsetProps> = ({\n    language,\n    useFloatingLabel,\n    shouldRenderCompanyName,\n}) => {\n    const options = {\n        helperLabel: language.translate('payment.bluesnap_direct_account_type_select.label'),\n        items: [\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_checking',\n                ),\n                value: BluesnapECPAccountType.ConsumerChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_savings',\n                ),\n                value: BluesnapECPAccountType.ConsumerSavings,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_checking',\n                ),\n                value: BluesnapECPAccountType.CorporateChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_savings',\n                ),\n                value: BluesnapECPAccountType.CorporateSavings,\n            },\n        ],\n    };\n\n    return (\n        <>\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_account_number.label')}\n                maxLength={17}\n                name=\"accountNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_routing_number.label')}\n                maxLength={9}\n                name=\"routingNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.bluesnap_direct_account_type.label')}\n                name=\"accountType\"\n                options={options}\n                useFloatingLabel={useFloatingLabel}\n            />\n            {shouldRenderCompanyName && (\n                <BlueSnapDirectTextField\n                    labelContent={language.translate('address.company_name_label')}\n                    name=\"companyName\"\n                    useFloatingLabel={useFloatingLabel}\n                />\n            )}\n        </>\n    );\n};\n\nexport default memo(BlueSnapDirectEcpFieldset);\n","import { type AchInstrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useEcpInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isAchInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useEcpInstruments;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport default memoize(function getEcpValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n    shouldRenderCompanyName: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  accountNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_account_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_account_number.only_numbers'),\n                      )\n                      .min(4, language.translate('payment.bluesnap_direct_account_number.length'))\n                      .max(\n                          17,\n                          language.translate('payment.bluesnap_direct_account_number.length_max'),\n                      ),\n                  routingNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_routing_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_routing_number.only_numbers'),\n                      )\n                      .length(\n                          9,\n                          language.translate('payment.bluesnap_direct_routing_number.length'),\n                      ),\n                  ...(shouldRenderCompanyName\n                      ? {\n                            companyName: string()\n                                .required(language.translate('address.company_name_required_error'))\n                                .max(\n                                    50,\n                                    language.translate(\n                                        'payment.bluesnap_direct_company_name.length_max',\n                                    ),\n                                ),\n                        }\n                      : {}),\n                  accountType: string().required(\n                      language.translate('payment.bluesnap_direct_account_type.is_required'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { type FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { BluesnapECPAccountType } from './constants';\nimport BlueSnapDirectEcpFieldset from './fields/BlueSnapDirectEcpFieldset';\nimport useEcpInstruments from './hooks/useEcpInstruments';\nimport getEcpValidationSchema from './validation-schemas/getEcpValidationSchema';\n\nconst BlueSnapDirectEcpPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n    checkoutState: {\n        data: { isPaymentDataRequired, getCustomer, getBillingAddress },\n        statuses: { isLoadingInstruments },\n    },\n    paymentForm: { disableSubmit, setValidationSchema, setFieldValue, getFormValues },\n    language,\n    onUnhandledError,\n}) => {\n    const [disabled, setDisabled] = useState(true);\n    const onChange = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeEcp = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeEcp = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeEcp();\n\n        return () => {\n            void deinitializeEcp();\n        };\n    }, [deinitializeEcp, initializeEcp]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useEcpInstruments(method);\n\n    const isLoading = isLoadingInstruments();\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n    const accountType = getFormValues().accountType;\n    const shouldRenderCompanyName =\n        accountType === BluesnapECPAccountType.CorporateChecking ||\n        accountType === BluesnapECPAccountType.CorporateSavings;\n\n    useEffect(() => {\n        if (shouldRenderCompanyName) {\n            setFieldValue('companyName', getBillingAddress()?.company);\n        } else {\n            setFieldValue('companyName', undefined);\n        }\n    }, [shouldRenderCompanyName, setFieldValue, getBillingAddress]);\n\n    useEffect(() => {\n        setValidationSchema(\n            method,\n            getEcpValidationSchema(language, shouldShowForm, shouldRenderCompanyName),\n        );\n    }, [language, shouldShowForm, shouldRenderCompanyName, setValidationSchema, method]);\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_electronic_check_label')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <BlueSnapDirectEcpFieldset\n                        language={language}\n                        shouldRenderCompanyName={shouldRenderCompanyName}\n                    />\n                )}\n                <CheckboxFormField\n                    labelContent={language.translate('payment.bluesnap_direct_permission')}\n                    name=\"shopperPermission\"\n                    onChange={onChange}\n                />\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectEcpPaymentMethod,\n    [{ id: 'ecp', gateway: 'bluesnapdirect' }],\n);\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { type ReactNode, useState } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children?: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nconst Accordion = ({\n    children,\n    className = 'accordion',\n    defaultSelectedItemId,\n    isDisabled,\n    onSelect = noop,\n}: AccordionProps) => {\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\n\n    const handleToggleItem: (id: string) => void = (id) => {\n        if (isDisabled) {\n            return;\n        }\n\n        setSelectedItemId(id);\n        onSelect(id);\n    };\n\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\n        return {\n            onToggle: handleToggleItem,\n            selectedItemId: newSelectedItemId,\n        };\n    });\n\n    return (\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\n            <ul className={className}>{children}</ul>\n        </AccordionContext.Provider>\n    );\n};\n\nexport default Accordion;\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    type FunctionComponent,\n    memo,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useMemo,\n} from 'react';\n\nimport { Accordion } from '@bigcommerce/checkout/ui';\n\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\n\nexport interface ChecklistProps {\n    children?: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    useEffect(() => {\n        return () => {\n            setFieldValue(name, '');\n        };\n    }, []);\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\n\nconst BraintreeVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    language,\n    method,\n    paymentForm,\n}) => {\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeVenmoPaymentMethod,\n    [{ id: 'braintreevenmo' }],\n);\n","import { connect } from 'formik';\nimport React, { type ComponentType, type FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport type ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import React, {\n    type KeyboardEvent,\n    type KeyboardEventHandler,\n    type MouseEventHandler,\n    type ReactElement,\n    type ReactNode,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler<HTMLDivElement> }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nconst ModalTrigger = ({ children, modal }: ModalTriggerProps): ReactElement => {\n    const [isOpen, setIsOpen] = useState(false);\n    const canHandleEventRef = useRef(false);\n\n    useEffect(() => {\n        canHandleEventRef.current = true;\n\n        return () => {\n            canHandleEventRef.current = false;\n        };\n    }, []);\n\n    const handleOpen = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(true);\n    };\n\n    const handleClose = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(false);\n    };\n\n    const handleKeyOpen = (keyboardEvent: KeyboardEvent<HTMLElement>): void => {\n        if (keyboardEvent.key === 'Enter') {\n            handleOpen();\n        }\n    };\n\n    return (\n        <>\n            {children({\n                onClick: handleOpen,\n                onKeyPress: handleKeyOpen,\n            })}\n\n            {modal({\n                isOpen,\n                onRequestClose: handleClose,\n            })}\n        </>\n    );\n};\n\nexport default ModalTrigger;\n","import {\n    type AdyenValidationState,\n    type CardInstrument,\n    type LanguageService,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, useEffect, useState } from 'react';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV2CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n    language?: LanguageService;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV2CardValidation: FunctionComponent<AdyenV2CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n    language,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        {language?.translate(\n                            'payment.instrument_trusted_shipping_address_title_text',\n                        )}\n                    </strong>\n\n                    <br />\n\n                    {language?.translate('payment.instrument_trusted_shipping_address_text')}\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            {language?.translate('payment.credit_card_number_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            {language?.translate('payment.credit_card_cvv_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            {language?.translate('payment.credit_card_expiration_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV2CardValidation;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    useCheckout,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport type AdyenV2FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    showAdditionalActionContent: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV2Form: FunctionComponent<AdyenV2FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    showAdditionalActionContent,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    onUnhandledError,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    ...rest\n}) => {\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired },\n        },\n    } = useCheckout();\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={showAdditionalActionContent}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!showAdditionalActionContent && (\n                <div id={additionalActionContainerId} style={{ display: 'none' }} />\n            )}\n        </>\n    );\n};\n\nexport default AdyenV2Form;\n","import {\n    type AdyenCreditCardComponentOptions,\n    type AdyenIdealComponentOptions,\n    type AdyenValidationState,\n    type CardInstrument,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { type HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV2CardValidation from './AdyenV2CardValidation';\nimport AdyenV2Form from './AdyenV2Form';\n\nexport interface AdyenOptions {\n    scheme: AdyenCreditCardComponentOptions;\n    bcmc: AdyenCreditCardComponentOptions;\n    ideal: AdyenIdealComponentOptions;\n}\n\nexport enum AdyenV2PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    ideal = 'ideal',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n    const [showAdditionalActionContent, setShowAdditionalActionContent] = useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const threeDS2ContainerId = `adyen-${method.id}-additional-action-component-field`;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const component = method.id as AdyenV2PaymentMethodType;\n    const shouldHideInstrumentExpiryDate = component === AdyenV2PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShowAdditionalActionContent(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setShowAdditionalActionContent(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setShowAdditionalActionContent(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n            const adyenOptions: AdyenOptions = {\n                [AdyenV2PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n                [AdyenV2PaymentMethodType.bcmc]: {\n                    hasHolderName: false,\n                },\n                [AdyenV2PaymentMethodType.ideal]: {\n                    showImage: true,\n                },\n            };\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv2: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    threeDS2ContainerId,\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            threeDS2ContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV2CardValidation\n                cardValidationState={cardValidationState}\n                language={language}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV2Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                language={language}\n                                method={method}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                showAdditionalActionContent={showAdditionalActionContent}\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV2PaymentMethod,\n    [{ gateway: 'adyenv2' }],\n);\n","import { type FormFieldOptions } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectSelectFieldProps {\n    labelContent: string;\n    name: string;\n    options: FormFieldOptions;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectSelectField: FunctionComponent<BlueSnapDirectSelectFieldProps> = ({\n    options: { helperLabel, items, rows },\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderSelect = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                fieldType={DynamicFormFieldType.DROPDOWM}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                options={items}\n                placeholder={helperLabel}\n                rows={rows}\n            />\n        ),\n        [helperLabel, items, rows, useFloatingLabel],\n    );\n\n    return <FormField {...rest} input={renderSelect} />;\n};\n\nexport default memo(BlueSnapDirectSelectField);\n","import { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaV2Payment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarnav2: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaV2PaymentMethod,\n    [{ gateway: 'klarna' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AfterpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AfterpayPaymentMethod,\n    [{ gateway: 'afterpay' }],\n);\n","import { number } from 'card-validator';\n\nimport { type WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface PaymentViewProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    shouldShowEditButton?: boolean;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    buttonId: string;\n    method: PaymentMethod;\n    onSignOut: () => void;\n}\n\nconst PaymentView: React.FC<PaymentViewProps> = ({\n    accountMask,\n    cardName,\n    cardType,\n    expiryMonth,\n    expiryYear,\n    shouldShowEditButton,\n    editButtonClassName,\n    editButtonLabel,\n    buttonId,\n    method,\n    onSignOut,\n}) => {\n    return (\n        <>\n            {!!cardName && (\n                <p data-test=\"payment-method-wallet-card-name\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_name_label\" />:\n                    </strong>{' '}\n                    {cardName}\n                </p>\n            )}\n\n            {!!accountMask && !!cardType && (\n                <p data-test=\"payment-method-wallet-card-type\">\n                    <strong>{`${cardType}:`}</strong> {accountMask}\n                </p>\n            )}\n\n            {!!expiryMonth && !!expiryYear && (\n                <p data-test=\"payment-method-wallet-card-expiry\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                    </strong>{' '}\n                    {`${expiryMonth}/${expiryYear}`}\n                </p>\n            )}\n\n            {!!shouldShowEditButton && (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    }\n                </p>\n            )}\n\n            <SignOutLink method={method} onSignOut={onSignOut} />\n        </>\n    );\n};\n\nexport default PaymentView;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignInViewProps {\n    buttonId: string;\n    method: PaymentMethod;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n}\n\nconst SignInView: React.FC<SignInViewProps> = ({\n    buttonId,\n    method,\n    signInButtonClassName,\n    signInButtonLabel,\n}) => {\n    const { language } = useLocale();\n\n    return (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n            {signInButtonLabel || (\n                <TranslatedString\n                    data={{ providerName: getPaymentMethodName(language)(method) }}\n                    id=\"remote.sign_in_action\"\n                />\n            )}\n        </a>\n    );\n};\n\nexport default SignInView;\n","import {\n    type CheckoutSelectors,\n    type CustomerRequestOptions,\n    type PaymentInitializeOptions,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect } from 'react';\n\nimport {\n    type PaymentFormService,\n    useCheckout,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\nimport PaymentView from './PaymentView';\nimport SignInView from './SignInView';\n\nexport interface WalletButtonPaymentMethodProps {\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst WalletButtonPaymentMethodComponent: React.FC<WalletButtonPaymentMethodProps> = ({\n    paymentForm,\n    buttonId,\n    editButtonClassName,\n    editButtonLabel,\n    isInitializing = false,\n    method,\n    shouldShowEditButton,\n    signInButtonClassName,\n    signInButtonLabel,\n    signOutCustomer,\n    deinitializePayment,\n    initializePayment,\n    onSignOut = noop,\n    onSignOutError = noop,\n    onUnhandledError = noop,\n}) => {\n    const {\n        checkoutState: {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        },\n    } = useCheckout();\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n    const isPaymentSelected = some(checkout.payments, { providerId: method.id });\n    // FIXME: I'm not sure how this would work for non-English names.\n    const cardName =\n        walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' ');\n\n    const toggleSubmit = () => {\n        const { disableSubmit } = paymentForm;\n        const currentIsPaymentDataRequired = isPaymentDataRequired();\n\n        if (\n            normalizeWalletPaymentData(method.initializationData) ||\n            !currentIsPaymentDataRequired\n        ) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    };\n\n    const handleSignOut = useCallback(async () => {\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    }, [signOutCustomer, method.id, onSignOut, onSignOutError]);\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            toggleSubmit();\n\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                const { disableSubmit } = paymentForm;\n\n                disableSubmit(method, false);\n\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        toggleSubmit();\n    });\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n            <div className=\"paymentMethod paymentMethod--walletButton\">\n                {isPaymentSelected ? (\n                    <PaymentView\n                        {...walletPaymentData}\n                        buttonId={buttonId}\n                        cardName={cardName}\n                        editButtonClassName={editButtonClassName}\n                        editButtonLabel={editButtonLabel}\n                        method={method}\n                        onSignOut={handleSignOut}\n                        shouldShowEditButton={shouldShowEditButton}\n                    />\n                ) : (\n                    <SignInView\n                        buttonId={buttonId}\n                        method={method}\n                        signInButtonClassName={signInButtonClassName}\n                        signInButtonLabel={signInButtonLabel}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default WalletButtonPaymentMethodComponent;\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface TextFieldProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nexport interface TextFieldFormProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nconst TextField: FunctionComponent<TextFieldProps> = (props) => {\n    const { additionalClassName, autoComplete, labelId, name } = props;\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <TextInput {...field} autoComplete={autoComplete} id={field.name} />\n        ),\n        [autoComplete],\n    );\n\n    const labelContent = useMemo(() => <TranslatedString id={labelId} />, [labelId]);\n\n    return (\n        <FormField\n            additionalClassName={additionalClassName}\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nconst TextFieldForm: FunctionComponent<TextFieldFormProps> = ({\n    additionalClassName,\n    autoComplete,\n    labelId,\n    name,\n}) => (\n    <Fieldset>\n        <div className=\"form-ccFields\">\n            <TextField\n                additionalClassName={additionalClassName}\n                autoComplete={autoComplete}\n                labelId={labelId}\n                name={name}\n            />\n        </div>\n    </Fieldset>\n);\n\nexport default memo(TextFieldForm);\n","import { type BillingAddress, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, {\n    type FunctionComponent,\n    type SyntheticEvent,\n    useCallback,\n    useContext,\n    useEffect,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nimport TextFieldForm from './checkoutcomFieldsets/TextFieldForm';\n\ninterface CheckoutcomAPMFormProps {\n    method: PaymentMethod;\n    debtor: BillingAddress;\n}\n\ninterface Issuer {\n    bic: string;\n    name: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: string;\n}\n\ninterface DropdownButtonProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface OptionButtonProps {\n    className?: string;\n    issuer: Issuer;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\ninterface SepaCreditor {\n    sepaCreditorAddress: string;\n    sepaCreditorCity: string;\n    sepaCreditorCompanyName: string;\n    sepaCreditorCountry: string;\n    sepaCreditorIdentifier: string;\n    sepaCreditorPostalCode: string;\n}\n\nconst Sepa: FunctionComponent<CheckoutcomAPMFormProps> = ({ method, debtor }) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const creditor: SepaCreditor = method.initializationData.sepaCreditor;\n\n    useEffect(() => {\n        paymentContext?.paymentForm.disableSubmit(method, true);\n\n        return () => paymentContext?.paymentForm.disableSubmit(method, false);\n    }, [paymentContext, method]);\n\n    function toggleSubmitButton(isChecked: boolean) {\n        paymentContext?.paymentForm.disableSubmit(method, !isChecked);\n    }\n\n    return (\n        <>\n            <div className=\"checkoutcom-sepa-column-container\">\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_creditor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{creditor.sepaCreditorCompanyName}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorAddress}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${creditor.sepaCreditorPostalCode} ${creditor.sepaCreditorCity}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorCountry}</p>\n                    <br />\n                    <p className=\"checkoutcom-sepa-line\">\n                        <TranslatedString\n                            data={{ creditorId: creditor.sepaCreditorIdentifier }}\n                            id=\"payment.checkoutcom_sepa_creditor_id\"\n                        />\n                    </p>\n                </div>\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_debtor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{`${debtor.firstName} ${debtor.lastName}`}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.address1}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${debtor.postalCode} ${debtor.city}, ${debtor.stateOrProvinceCode}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.countryCode}</p>\n                </div>\n            </div>\n            <p className=\"checkoutcom-sepa-line\">\n                <TranslatedString id=\"payment.checkoutcom_sepa_payment_type\" />\n            </p>\n            <br />\n\n            <TextFieldForm\n                additionalClassName=\"form-field--iban\"\n                autoComplete=\"iban\"\n                labelId=\"payment.sepa_account_number\"\n                name=\"iban\"\n            />\n            <CheckboxFormField\n                labelContent={\n                    <TranslatedString\n                        data={{ creditorName: creditor.sepaCreditorCompanyName }}\n                        id=\"payment.checkoutcom_sepa_mandate_disclaimer\"\n                    />\n                }\n                name=\"sepaMandate\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onChange={toggleSubmitButton}\n            />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    form,\n    selectedIssuer,\n}) => {\n    const Input = useCallback(() => <input {...restField} type=\"hidden\" />, [restField]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void form.setFieldValue(restField.name, selectedIssuer);\n    }, [value, form, selectedIssuer, restField.name]);\n\n    return <Input />;\n};\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...restProps }) => {\n    const { bic, name } = issuer;\n\n    return (\n        <button data-bic={bic} type=\"button\" {...restProps}>\n            <div className=\"instrumentSelect-details\">{`${bic} / ${name}`}</div>\n        </button>\n    );\n};\n\nconst DropdownButton: FunctionComponent<DropdownButtonProps> = ({ selectedIssuer }) => {\n    if (!selectedIssuer) {\n        return (\n            <button\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                type=\"button\"\n            >\n                <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n                    <div className=\"instrumentSelect-card\">Your bank</div>\n                </div>\n            </button>\n        );\n    }\n\n    return (\n        <OptionButton\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            issuer={selectedIssuer}\n        />\n    );\n};\n\nconst Fawry: FunctionComponent<CheckoutcomAPMFormProps> = () => {\n    return (\n        <>\n            <TextFieldForm\n                additionalClassName=\"form-field--customerMobile\"\n                autoComplete=\"tel\"\n                labelId=\"payment.checkoutcom_fawry_customer_mobile_label\"\n                name=\"customerMobile\"\n            />\n            <TextFieldForm\n                additionalClassName=\"form-field--customerEmail\"\n                autoComplete=\"email\"\n                labelId=\"payment.checkoutcom_fawry_customer_email_label\"\n                name=\"customerEmail\"\n            />\n        </>\n    );\n};\n\nconst Ideal: FunctionComponent<CheckoutcomAPMFormProps> = ({ method }) => {\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer | undefined>();\n    const [bicValue, setBicValue] = useState<string>('');\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={bicValue} />,\n        [bicValue],\n    );\n\n    const issuers: Issuer[] = method.initializationData.idealIssuers;\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        // eslint-disable-next-line no-underscore-dangle\n        const _selectedIssuer = issuers.find(({ bic }) => bic === currentTarget.dataset.bic);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n        setBicValue(_selectedIssuer.bic);\n    };\n\n    const issuersList = (\n        <ul className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\">\n            {issuers.map((issuer) => (\n                <li className=\"instrumentSelect-option dropdown-menu-item\" key={issuer.bic}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <DropdownButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"bic\" />\n        </>\n    );\n};\n\nconst checkoutcomCustomFormFields: CheckoutcomCustomFormFields = {\n    fawry: Fawry,\n    sepa: Sepa,\n    ideal: Ideal,\n};\n\ninterface CheckoutcomCustomFormFields {\n    [key: string]: React.FunctionComponent<CheckoutcomAPMFormProps>;\n}\n\nexport const ccDocumentField = ({ method }: CheckoutcomAPMFormProps) => (\n    <TextFieldForm\n        additionalClassName=\"form-field--ccDocument\"\n        autoComplete=\"cc-document\"\n        labelId={`payment.checkoutcom_document_label_${method.id}`}\n        name=\"ccDocument\"\n    />\n);\n\nexport default checkoutcomCustomFormFields;\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    type CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport checkoutcomCustomFormFields, { ccDocumentField } from './CheckoutcomCustomFormFields';\nimport {\n    type checkoutcomPaymentMethods,\n    getCheckoutcomValidationSchemas,\n} from './checkoutcomFieldsets';\nimport { checkoutcomPaymentMethodsArray } from './checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas';\n\nexport interface CheckoutcomCustomPaymentMethodProps\n    extends Omit<CreditCardPaymentMethodProps, 'cardFieldset' | 'cardValidationSchema'> {\n    checkoutCustomMethod: string;\n}\n\nconst isCheckoutcomPaymentMethod = (methodId: string): methodId is checkoutcomPaymentMethods => {\n    return Object.values(checkoutcomPaymentMethodsArray).includes(methodId);\n};\nconst CheckoutcomCustomPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    method,\n    checkoutService,\n    checkoutState,\n    ...rest\n}) => {\n    const { getConfig } = checkoutState.data;\n    const isIdealHostedPageExperimentOn =\n        getConfig()?.checkoutSettings.features['PI-2979.checkoutcom_enable_ideal_hosted_page'];\n\n    const checkoutCustomMethod = method.id;\n    const CheckoutcomCustomFieldset =\n        checkoutCustomMethod in checkoutcomCustomFormFields\n            ? checkoutcomCustomFormFields[checkoutCustomMethod]\n            : ccDocumentField;\n\n    const billingAddress = checkoutState.data.getBillingAddress();\n\n    if (\n        !isCheckoutcomPaymentMethod(checkoutCustomMethod) ||\n        (checkoutCustomMethod === 'ideal' && isIdealHostedPageExperimentOn)\n    ) {\n        return null;\n    }\n\n    return (\n        <CreditCardPaymentMethodComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            {...rest}\n            cardFieldset={<CheckoutcomCustomFieldset debtor={billingAddress!} method={method} />}\n            cardValidationSchema={getCheckoutcomValidationSchemas({\n                paymentMethod: checkoutCustomMethod,\n                language,\n            })}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    CheckoutcomCustomPaymentMethod,\n    [\n        { gateway: 'checkoutcom', id: 'ideal' },\n        { gateway: 'checkoutcom', id: 'fawry' },\n        { gateway: 'checkoutcom', id: 'oxxo' },\n        { gateway: 'checkoutcom', id: 'boleto' },\n        { gateway: 'checkoutcom', id: 'sepa' },\n        { gateway: 'checkoutcom', id: 'qpay' },\n        { gateway: 'checkoutcom', id: 'p24' },\n    ],\n);\n","import {\n    type CardInstrument,\n    type LegacyHostedFormOptions,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, {\n    createRef,\n    type FunctionComponent,\n    type RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { CreditCardPaymentMethodComponent } from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\ninterface WorldpayPaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst WorldpayCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const [threeDSecureVerification, setThreeDSecureVerification] = useState<HTMLElement>();\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const { getHostedStoredCardValidationFieldset } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const ref = useRef<WorldpayPaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const cancelWorldpayModalFlow = useCallback(() => {\n        setThreeDSecureVerification(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n    const initializeWorldpayPayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                creditCard: {\n                    form: getHostedFormOptions && (await getHostedFormOptions(selectedInstrument)),\n                },\n                worldpay: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setThreeDSecureVerification(content);\n                        ref.current.cancelThreeDSecureVerification = cancel;\n                    },\n                },\n            });\n        },\n        [checkoutService, getHostedFormOptions],\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (threeDSecureVerification) {\n            ref.current.paymentPageContentRef.current?.appendChild(threeDSecureVerification);\n        }\n    }, [threeDSecureVerification]);\n\n    return (\n        <>\n            <CreditCardPaymentMethodComponent\n                {...rest}\n                cardFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                cardValidationSchema={hostedValidationSchema}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeWorldpayPayment}\n                language={language}\n                method={method}\n                paymentForm={paymentForm}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n            <Modal\n                isOpen={!!threeDSecureVerification}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelWorldpayModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div ref={ref.current.paymentPageContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    WorldpayCreditCardPaymentMethod,\n    [{ id: 'worldpayaccess' }],\n);\n"],"names":["checkoutService","isEmbedded","rest","initializePaypalExpressPayment","useCallback","options","initializePayment","paypalexpress","useRedirectFlow","deinitializePayment","id","initializeBraintreePaypalPaymentMethod","defaultOptions","onUnhandledError","language","method","paymentForm","braintree","containerId","submitForm","setSubmitted","onError","error","message","Error","translate","onRenderButton","hidePaymentSubmitButton","checkoutState","initializationData","embeddedOneClickEnabled","memoize","bic","required","toResolvableComponent","setValidationSchema","idealIssuers","idealIssuersSelectOptions","map","issuer","value","issuerId","label","issuerName","initializeIdeal","getIdealValidationSchema","gatewayId","gateway","methodId","deinitializeIdeal","useEffect","Fieldset","legend","Legend","hidden","style","paddingBottom","BlueSnapDirectSelectField","labelContent","name","helperLabel","items","BraintreeAchFieldType","OwnershipTypes","AccountTypes","accountTypeOptions","Savings","Checking","ownershipTypeOptions","Personal","Business","defaultBraintreeAchFormFields","AccountType","custom","fieldType","DynamicFormFieldType","DROPDOWM","AccountNumber","max","min","RoutingNumber","OwnershipType","personalBraintreeAchFormFields","FirstName","LastName","businessBraintreeAchFormFields","BusinessName","currentInstrument","setCurrentInstrument","useState","customer","data","getCustomer","instruments","getInstruments","setFieldValue","accountInstruments","useMemo","filter","isAchInstrument","isInstrumentFeatureAvailable","isGuest","Boolean","config","isVaultingEnabled","shouldShowInstrumentFieldset","length","shouldCreateNewInstrument","shouldConfirmInstrument","trustedShippingAddress","getDefaultInstrument","defaultInstrument","undefined","handleSelectInstrument","find","bigpayToken","handleUseNewInstrument","getValidationSchema","formFields","getFieldValue","requiredFieldErrorTranslationIds","reduce","schema","matches","validateBraintreeAchForm","braintreeAchFormValues","accountNumber","businessName","routingNumber","ownershipType","firstName","lastName","validationSchema","isValidAccountNumber","isValidRoutingNumber","isValidFirstName","isValidLastName","isValidBusinessName","Promise","all","fields","isValid","isValidDepositoryName","resetFormValidation","getTranslatedLabelByFieldName","fieldName","braintreeAchFormLabelsMap","accountType","Object","values","includes","isBraintreeAchFormFieldName","fieldValues","handleChange","fieldId","field","DynamicFormField","extraClass","key","onChange","updateMandateText","getFormValues","fullName","String","depositoryName","outstandingBalance","getCheckout","storeName","getConfig","storeProfile","symbol","getCart","currency","mandateTextTranslationKey","formattedDate","Date","now","toJSON","slice","split","reverse","join","mandateTextTranslationProps","toLowerCase","currentDate","mandateText","className","CheckboxFormField","isValidForm","setIsValidForm","disableSubmit","getBillingAddress","defaultFormValues","shouldSaveInstrument","shouldSetAsDefaultInstrument","instrumentId","orderConsent","entries","resetFormValues","shouldShowForm","shouldShowMandateTextCheckbox","validate","mandateTextConfirmationCheckboxValue","AccountInstrumentFieldset","A","onSelectInstrument","onUseNewInstrument","selectedInstrument","TranslatedString","StoreInstrumentFieldset","isAccountInstrument","currentMandateTextRef","useRef","braintreeach","getMandateText","current","loadInstruments","isLoading","statuses","isLoadingInstruments","isLoadingPaymentMethod","formContextProps","isSubmitted","FormContext","Provider","CheckoutContext","LocaleProvider","PaymentFormContext","LoadingOverlay","hideContentWhenLoading","currentMandateText","initializationComponentMap","card_ui","HostedCreditCardPaymentMethod","none","props","onMount","noop","onInit","onDeinit","catch","usePropsToOnMount","componentKey","initializationStrategy","type","Component","forwardRef","ref","additionalClassName","testId","isFloatingLabelEnabled","children","body","header","renderModal","Modal","additionalBodyClassName","footer","Button","onClick","onRequestClose","size","Small","shouldShowCloseButton","ModalTrigger","modal","preventDefault","line","Fragment","TermsConditionsType","TermsConditionsModalCheckboxField","withLanguage","terms","translatedLabel","url","parsedLabel","parseAnchor","ModalHeader","TermsConditionsCheckboxField","TranslatedHtml","TermsConditionsTextField","renderInput","defaultValue","readOnly","FormField","input","memo","TextArea","isTermsConditionsTextArea","isTermsConditionModal","mapSubmitOrderErrorMessage","shouldLocalise","subtype","errors","err","code","mapSubmitOrderErrorTitle","unformatCreditCardExpiryDate","month","year","RegExp","test","getUniquePaymentMethodId","compact","parseUniquePaymentMethodId","hasCreditCardNumber","hasCreditCardExpiry","TermsConditions","termsConditionsUrl","termsConditionsText","TermsConditionsField","Link","getPaymentValidationSchema","additionalValidation","isTermsConditionsRequired","schemaFields","paymentProviderRadio","schemaFieldsWithTerms","concat","oneOf","getTermsConditionsValidationSchema","PaymentMethodType","getPaymentMethodName","translations","PaymentMethodId","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","displayName","capitalize","get","content","htmlId","BigCommercePaymentsPayLater","bigcommerce_payments_paylater","bannerContainerId","selectedCardType","cardTypes","filteredCardTypes","CreditCardIcon","cardType","getPaymentMethodTitle","basePath","checkoutSettings","storeCountryCode","cdnPath","path","paymentWithLogo","methodsWithLogo","methodName","methodDisplayName","isCreditCard","PaypalCommerceCredit","BraintreePaypalCredit","payPalCreditProductBrandName","credit","AdyenV2","AdyenV3","getPaymentMethodDisplayName","customTitles","CreditCard","logoUrl","titleText","BraintreeVenmo","subtitle","BraintreeAch","BraintreeLocalPaymentMethod","BigCommercePaymentsPayPal","BigCommercePaymentsAlternativeMethod","PaypalCommerce","PaypalCommerceAlternativeMethod","isExperimentEnabled","ApplePay","PayWithGoogle","Humm","enableBillie","Laybuy","Masterpass","Quadpay","Sezzle","Zip","Barclaycard","Mollie","Checkoutcom","StripeV3","StripeUPE","WorldpayAccess","BlueSnapDirect","PaypalCommerceVenmo","BigCommercePaymentsVenmo","PaypalPaymentsPro","Ratepay","connectFormik","withCheckout","cdnBasePath","formik","isSelected","themeV2","alt","src","node","Function","getSubtitle","supportedCards","mapFromPaymentMethodCardType","instrumentSelected","instrument","provider","getInstrumentForMethod","hostedForm","ccNumber","card","number","brand","getSelectedCardType","PaymentFormProvider","lazy","then","module","default","AdyenV2PaymentMethod","AdyenV3PaymentMethod","AffirmPaymentMethod","AfterpayPaymentMethod","AmazonPayV2PaymentMethod","ApplePayPaymentMethod","BarclaycardPaymentMethod","BigCommercePaymentsPaymentMethod","BigCommercePaymentsAPMsPaymentMethod","BigCommercePaymentsCreditCardsPaymentMethod","BigCommercePaymentsFastlanePaymentMethod","BigCommercePaymentsPayLaterPaymentMethod","BigCommercePaymentsVenmoPaymentMethod","BigCommercePaymentsRatePayPaymentMethod","BlueSnapDirectEcpPaymentMethod","BlueSnapDirectAlternativePaymentMethod","BlueSnapDirectSepaPaymentMethod","BlueSnapDirectIdealPaymentMethod","BlueSnapV2PaymentMethod","BlueSnapDirectPayByBankPaymentMethod","BoltClientPaymentMethod","BoltEmbeddedPaymentMethod","BoltPaymentMethod","BraintreeAchPaymentMethod","BraintreeFastlanePaymentMethod","BraintreePaypalPaymentMethod","VisaCheckoutPaymentMethod","BraintreeVenmoPaymentMethod","CheckoutcomCustomPaymentMethod","ClearpayPaymentMethod","GooglePayPaymentMethod","HostedPaymentMethod","KlarnaPaymentMethod","KlarnaV2PaymentMethod","MolliePaymentMethod","MonerisPaymentMethod","OfflinePaymentMethod","PayPalCommerceAPMsPaymentMethod","PayPalCommerceCreditPaymentMethod","PayPalCommerceCreditCardsPaymentMethod","PayPalCommerceFastlanePaymentMethod","PayPalCommercePaymentMethod","PayPalCommerceVenmoPaymentMethod","PaypalCommerceRatePayPaymentMethod","PaypalExpressPaymentMethod","PPSDKPaymentMethod","SquareV2PaymentMethod","StripeOCSPaymentMethod","StripeUPEPaymentMethod","StripeV3PaymentMethod","WorldpayCreditCardPaymentMethod","ComponentRegistry","AdyenV2GooglePay","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","BigCommercePaymentsGooglePay","CheckoutcomGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","StripeGooglePay","StripeUPEGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay","BraintreeVisaCheckout","BraintreeCreditCardPaymentMethod","PaypalPaymentsProPaymentMethod","isInitializingPayment","deinitializeCustomer","initializeCustomer","isInitializing","Braintree","Suspense","PaymentMethodProviderType","Hosted","Api","withPayment","withForm","formikContext","isUsingMultiShipping","setSubmit","formContext","paymentContext","ResolvedPaymentMethod","query","useLazyLoad","components","resolveLazyComponent","resolveComponent","resolvePaymentMethod","PaymentMethod","setFieldTouched","validateForm","createPaymentFormService","getPaymentMethodFromListValue","methods","PaymentMethodListItem","isDisabled","renderPaymentMethod","PaymentMethodV2","renderPaymentMethodTitle","isCustomChecklistItem","ChecklistItem","onSelect","paymentMethod","handleSelect","role","Checklist","defaultSelectedItemId","window","navigator","userAgent","mapToRedeemableProps","redeemableProps","Redeemable","showAppliedRedeemables","providersWithCustomClasses","PaymentSubmitButtonText","methodType","methodGateway","initialisationStrategyType","brandName","isComplete","isPaymentDataRequired","IconBolt","BlueSnapV2","PaypalVenmo","continueActionId","continueTranslationId","completeTranslationId","isInitializingCustomer","isSubmittingOrder","isSubmitting","disabled","isFullWidth","Large","variant","Action","SpamProtectionField","state","shouldShowRetryButton","handleRetry","event","this","verify","componentDidMount","didExceedSpamLimit","render","isExecutingSpamCheck","renderContent","executeSpamCheck","setState","isErrorWithType","withCurrency","availableStoreCredit","usableStoreCredit","isStoreCreditApplied","target","checked","TooltipTrigger","placement","tooltip","Tooltip","storeCredit","toCustomerCurrency","href","CheckboxInput","PaymentMethodSubmitButtonContainer","PaymentMethodListFieldset","onMethodSelect","resetForm","useContext","handlePaymentMethodSelect","updatedValues","ccCustomerCode","ccCvv","ccDocument","customerEmail","customerMobile","ccExpiry","ccName","shouldCreateAccount","Extension","region","paymentFormConfig","mapPropsToValues","defaultGatewayId","defaultMethodId","cardCode","cardCodeVerification","cardExpiry","cardName","cardNumber","cardNumberVerification","handleSubmit","onSubmit","omitBy","isNil","onStoreCreditChange","selectedMethod","shouldDisableSubmit","shouldHidePaymentSubmitButton","shouldExecuteSpamCheck","selectedMethodId","paymentToken","Form","Payment","isReady","validationSchemas","submitFunctions","getContextValue","memoizeOne","uniqueId","handleBeforeUnload","defaultMethod","PPSDK","skipRedirectConfirmationAlert","returnValue","handleCloseModal","_","cartUrl","clearError","loadCheckout","errorType","location","replace","reload","headers","status","top","assign","handleStoreCreditChange","useStoreCredit","applyStoreCredit","e","handleError","errorLogger","log","loadPaymentMethods","onCartChangedError","onSubmitError","submitOrder","analyticsTracker","clickPayButton","customSubmit","payload","payment","paymentData","unformatCreditCardNumber","isEmpty","mapToOrderRequestBody","order","getOrder","paymentComplete","orderId","paymentRejected","isCartChangedError","setSelectedMethod","trackSelectedPaymentMethod","fn","finalizeOrderIfNeeded","onFinalize","onFinalizeError","onReady","checkoutServiceSubscribe","loadPaymentMethodsOrThrow","grandTotalChangeUnsubscribe","handleCartTotalChange","grandTotal","addEventListener","componentDidUpdate","checkEmbeddedSupport","componentWillUnmount","removeEventListener","finalizeOrderError","uniqueSelectedMethodId","PaymentContext","ChecklistSkeleton","renderOrderErrorModal","renderEmbeddedSupportErrorModal","shouldLocaliseErrorMessages","submitOrderError","ErrorModal","bind","onClose","title","selectedPaymentMethod","mapToPaymentProps","getConsignments","getPaymentMethod","getPaymentMethods","getPaymentProviderCustomer","getFinalizeOrderError","getSubmitOrderError","checkout","consignments","paymentProviderCustomer","stripeLinkAuthenticationState","stripeUpePaymentMethod","enableTermsAndConditions","isTermsConditionsEnabled","features","orderTermsAndConditionsType","termsConditionsType","orderTermsAndConditions","termsCondtitionsText","orderTermsAndConditionsLink","termsCondtitionsUrl","selectedPayment","payments","providerType","filteredMethods","showInCheckout","multiShippingIncompatibleMethodIds","providerId","hasDefaultStoredInstrument","links","cartLink","subscribe","Math","withAnalytics","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","onToggle","selectedItemId","AccordionContext","transitionEndListener","done","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","Label","htmlFor","kebabCase","C","selectedValue","renderHeaderContent","BasicFormField","shouldShow","setShouldShow","handleShow","handleHide","onBlur","onFocus","onMouseEnter","onMouseLeave","modifiers","enabled","initializeBoltPayment","bolt","useBigCommerceCheckout","applepay","shippingLabel","subtotalLabel","renderPayPalCardComponent","mapFromInstrumentCardType","last4","PoweredByPayPalFastlaneLabel","result","Tiny","Secondary","showPayPalCardSelector","setSelectedInstrument","paypalFastlaneCustomer","useBraintreeFastlaneInstruments","shouldShowInstrumentsForm","paypalFastlaneComponentRef","braintreefastlane","isAddingNewCard","setIsAddingNewCard","selectedInstrumentId","setSelectedInstrumentId","shouldShowCreditCardFieldset","getDefaultInstrumentId","defaultInstrumentId","CardInstrumentFieldset","onDeleteInstrument","display","tabIndex","getStylesFromElement","properties","container","document","querySelector","getAppliedStyles","copyStylesFromDummyFormFields","styleProps","focus","difference","mapToSquareStyles","styles","borderColor","borderRadius","borderWidth","borderColorIsFocus","borderWidthIsFocus","inputIsFocus","borderColorIsError","borderWidthIsError","color","colorIsError","squarev2","description","paymentDescriptor","initializeAmazonPayV2Payment","amazonpay","editButtonId","buttonId","hideWidget","isInstrumentCardCodeRequired","isInstrumentCardNumberRequired","isSignInRequired","isSignedIn","some","onSignOut","shouldShowDescriptor","shouldShowEditButton","signOut","signOutCustomer","focusedFieldType","setFocusedFieldType","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","showCardHolderName","isCardCodeRequired","isCardHolderNameRequired","getHostedFieldId","getHostedFormOptions","styleContainerId","accessibilityLabel","placeholder","Focus","onCardTypeChange","onEnter","onValidate","forIn","fieldErrors","errorKey","hostedFieldset","additionalFields","requireCustomerCode","cardCodeId","cardExpiryId","cardNameId","cardNumberId","hostedValidationSchema","getHostedStoredCardValidationFieldset","initializeHostedCreditCardPayment","creditCard","form","hostedStoredCardValidationSchema","cardFieldset","cardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema","initializeVisaCheckoutPayment","mergedOptions","braintreevisacheckout","onPaymentSelect","reinitializePayment","editButtonClassName","signInButtonClassName","AdyenCardFields","getInitialValidationState","shouldShowNumberField","validationState","CardNumber","valid","SecurityCode","ExpiryDate","isFieldInvalid","fieldKey","fieldsValidation","verificationFieldsContainerId","cardValidationState","setFieldsValidation","endDigits","showValidationIcon","transform","right","UntrustedShippingCardVerificationType","shouldHideInstrumentExpiryDate","validateInstrument","shouldRenderAdditionalActionContentModal","isModalVisible","cancelAdditionalActionModalFlow","additionalActionContainerId","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","HostedWidgetPaymentComponent","hideContentWhenSignedOut","shouldRenderCustomInstrument","closeButtonLabel","isOpen","overlay","width","AdyenV3PaymentMethodType","shouldShowModal","setShouldRenderAdditionalActionContentModal","isAdditionalActionContentModalVisible","setIsAdditionalActionContentModalVisible","setCardValidationState","cardVerificationContainerId","component","bcmc","onBeforeLoad","shopperInteraction","onComplete","cancelAdditionalAction","onActionHandled","onLoad","cancel","initializeAdyenPayment","adyenOptions","scheme","hasHolderName","holderNameRequired","adyenv3","hasVaultedInstruments","additionalActionOptions","widgetSize","validateCardFields","isAddingNewInstrument","setIsAddingNewInstrument","derivedProps","filterAccountInstruments","filterTrustedInstruments","isPaymentDataSubmitted","cart","currentMethodInstruments","trustedInstruments","isNewAddress","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","currentSelectedInstrument","coupon","giftCertificate","ShopperCurrency","amount","used","remaining","height","viewBox","xmlns","d","isRemoving","onRemove","AppliedCouponChecklistItem","onRemoved","handleRemove","AppliedGiftCertificateChecklistItem","coupons","giftCertificates","isRemovingCoupon","isRemovingGiftCertificate","onRemovedCoupon","onRemovedGiftCertificate","RedeemableForm","appliedRedeemableError","isApplyingRedeemable","handleSubmitForm","handleKeyDown","keyCode","renderLabel","renderErrorMessage","errorCode","errorMessage","Alert","TextInput","onKeyDown","redeemableCode","applyCoupon","applyGiftCertificate","trim","shouldCollapseCouponCode","formProps","Toggle","openByDefault","toggle","initializeGooglePayPayment","loadingContainerId","walletButton","createContext","separator","initializeMonerisPayment","paymentConfig","moneris","_shouldShowNumber","isLoadingIframe","setisLoadingIframe","paymentPageContent","setPaymentPageContent","paymentPageContentRef","createRef","cancelBlueSnapV2ModalFlow","cancelBlueSnapV2Payment","initializeBlueSnapV2Payment","bluesnapv2","border","appendPaymentPageContent","appendChild","additionalModalClassName","onAfterOpen","maxLength","useFloatingLabel","autoComplete","HiddenInput","restField","selectedIssuer","helpers","setValue","IssuerSelectButton","OptionButton","image","size1x","issuers","paymentMethodsResponse","setSelectedIssuer","handleClick","currentTarget","_selectedIssuer","dataset","issuersList","DropdownTrigger","dropdown","cardNumberElementOptions","cardHolderElementOptions","cardCvcElementOptions","CreditCardCodeTooltip","IconHelp","cardExpiryElementOptions","MolliePaymentMethodType","localeContext","LocaleContext","getCreditCardInputStyles","HostedCreditCardValidation","initializeMolliePayment","mollieElements","getMolliesElementOptions","mollie","cardCvcId","cardHolderId","base","invalid","unsupportedMethodMessage","disableButton","creditcard","renderCustomPaymentForm","getHostedInstrumentValidationSchema","initializeKlarnaPayment","klarna","isBlueSnapDirectInitializationData","object","sepaCreditorCompanyName","array","Array","isArray","checkoutcomPaymentMethodsArray","checkoutComShemas","oxxo","qpay","notRequired","boleto","sepa","iban","sepaMandate","ideal","fawry","email","displayNamePrefix","isSepaInstrument","shouldRenderFields","setDisabled","toggleSubmitButton","shopperPermission","initializeSepa","deinitializeSepa","getSepaValidationSchema","BlueSnapDirectTextField","creditorName","context","getCoupons","getGiftCertificates","isApplyingCoupon","isApplyingGiftCertificate","getApplyCouponError","getApplyGiftCertificateError","getRemoveCouponError","getRemoveGiftCertificateError","removeCoupon","removeGiftCertificate","removedRedeemableError","isCouponCodeCollapsed","braintreelocalmethods","buttonText","agreementTranslationOptions","privacyPolicyUrl","termsUrl","benefitsList","BoltCreateAccountCheckbox","showCreateAccountCheckbox","setShowCreateAccountCheckbox","boltEmbeddedContainerId","hasBoltAccount","isGuestCustomer","initializePayByBank","getPayByBankValidationSchema","deinitializePayByBank","BluesnapECPAccountType","DynamicInput","TELEPHONE","shouldRenderCompanyName","ConsumerChecking","ConsumerSavings","CorporateChecking","CorporateSavings","companyName","initializeEcp","deinitializeEcp","company","getEcpValidationSchema","setSelectedItemId","handleToggleItem","newSelectedItemId","ChecklistContext","contextValue","OriginalComponent","InnerComponent","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","setIsOpen","canHandleEventRef","handleOpen","onKeyPress","keyboardEvent","showAdditionalActionContent","AdyenV2PaymentMethodType","setShowAdditionalActionContent","threeDS2ContainerId","showImage","adyenv2","rows","renderSelect","initializeKlarnaV2Payment","klarnav2","formatAccountMask","accountMask","padding","card_information","cardData","isWalletButtonInitializationData","expiryMonth","expMonth","expiryYear","expYear","accountNum","expDate","substr","niceType","providerName","editButtonLabel","signInButtonLabel","onSignOutError","billingAddress","walletPaymentData","isPaymentSelected","toggleSubmit","currentIsPaymentDataRequired","handleSignOut","TextField","labelId","restProps","DropdownButton","ccDocumentField","debtor","creditor","sepaCreditor","sepaCreditorAddress","sepaCreditorPostalCode","sepaCreditorCity","sepaCreditorCountry","creditorId","sepaCreditorIdentifier","address1","postalCode","city","stateOrProvinceCode","countryCode","isChecked","bicValue","setBicValue","isIdealHostedPageExperimentOn","checkoutCustomMethod","CheckoutcomCustomFieldset","CreditCardPaymentMethodComponent","threeDSecureVerification","setThreeDSecureVerification","cancelWorldpayModalFlow","cancelThreeDSecureVerification","initializeWorldpayPayment","worldpay"],"sourceRoot":""}