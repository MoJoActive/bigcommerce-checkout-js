{"version":3,"file":"9557-0bae2ac7.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/getStripeOCSStyles.ts","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/StripeOCSPaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-upe/StripeUPEPaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3CustomCardForm.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3PaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/StripeLinkV2Button.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/checkout-button-integration/src/CheckoutButton.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx"],"sourcesContent":["import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import { type StripeAppearanceOptions, type StripeCustomFont } from '@bigcommerce/checkout-sdk';\nimport { isEmpty } from 'lodash';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nconst getStylesFromElement = (\n    selector: string,\n    properties: string[],\n    pseudoElementSelector?: string,\n) => {\n    const element = document.querySelector<HTMLElement>(selector);\n\n    return element ? getAppliedStyles(element, properties, pseudoElementSelector) : {};\n};\n\nconst parseRadioIconSize = (size: string | number = 0): number =>\n    typeof size !== 'number' ? parseInt(size, 10) : size;\n\nconst getRadioIconSizes = (sizes?: Record<string, string | number | undefined>) => {\n    const {\n        radioIconOuterWidth = 26,\n        radioIconOuterStrokeWidth = 1,\n        radioIconInnerWidth = 17,\n    } = sizes || {};\n    const stripeSVGSizeCoefficient = 0.88; // Provided by Stripe team for scaling SVGs.\n\n    const percentageCoefficient = stripeSVGSizeCoefficient * 100;\n    const outerWidth = parseRadioIconSize(radioIconOuterWidth);\n    const outerStrokeWidth = parseRadioIconSize(radioIconOuterStrokeWidth);\n    const innerWidth = parseRadioIconSize(radioIconInnerWidth);\n\n    const stripeEqualOuterWidth = (outerWidth / stripeSVGSizeCoefficient).toFixed(2);\n    const stripeEqualOuterStrokeWidth = (\n        (outerStrokeWidth / outerWidth) *\n        percentageCoefficient\n    ).toFixed(2);\n    const stripeEqualInnerRadius = (\n        ((innerWidth / outerWidth) * percentageCoefficient) /\n        2\n    ).toFixed(2);\n\n    return {\n        outerWidth: `${stripeEqualOuterWidth}px`,\n        outerStrokeWidth: `${stripeEqualOuterStrokeWidth}px`,\n        innerRadius: stripeEqualInnerRadius,\n    };\n};\n\nexport const getFonts = (selector = 'link[href*=\"font\"]'): StripeCustomFont[] => {\n    const elementsList: NodeListOf<Element> = document.querySelectorAll(selector);\n    const fonts: StripeCustomFont[] = [];\n\n    elementsList.forEach((element: Element | null) => {\n        const fontSrc = element?.getAttribute('href');\n\n        if (fontSrc) {\n            fonts.push({ cssSrc: fontSrc });\n        }\n    });\n\n    return fonts;\n};\n\nexport const getAppearanceForOCSElement = (containerId: string): StripeAppearanceOptions => {\n    const defaultAccordionPaddingHorizontal = '18px';\n    const defaultAccordionPaddingVertical = '13px';\n    const defaultRadioIconInnerScale = 0.66;\n\n    const formInputStyles = getStylesFromElement(`#${containerId}--input`, [\n        'color',\n        'background-color',\n        'border-color',\n        'box-shadow',\n        'font-family',\n    ]);\n    const formLabelStyles = getStylesFromElement(`#${containerId}--label`, ['color']);\n    const formErrorStyles = getStylesFromElement(`#${containerId}--error`, ['color']);\n    const accordionHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        [\n            'color',\n            'font-size',\n            'font-family',\n            'font-weight',\n            'padding-top',\n            'padding-right',\n            'padding-bottom',\n        ],\n    );\n    const accordionSelectedHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header-selected`,\n        ['background-color'],\n    );\n    const formChecklistStyles = getStylesFromElement(\n        `#${containerId}--accordion-header.optimizedCheckout-form-checklist-item`,\n        ['border-bottom', 'border-color'],\n    );\n    const {\n        color: accordionHeaderColor,\n        'font-size': accordionItemTitleFontSize,\n        'font-family': accordionHeaderFontFamily,\n        'font-weight': accordionItemTitleFontWeight,\n        'padding-top': accordionPaddingTop = defaultAccordionPaddingVertical,\n        'padding-right': accordionPaddingRight = defaultAccordionPaddingHorizontal,\n        'padding-bottom': accordionPaddingBottom = defaultAccordionPaddingVertical,\n    } = accordionHeaderStyles;\n    const accordionHeaderPadding = !isEmpty(accordionHeaderStyles)\n        ? `${accordionPaddingTop} ${accordionPaddingRight} ${accordionPaddingBottom} ${defaultAccordionPaddingHorizontal}`\n        : undefined;\n    const radioOuter = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        ['border-color', 'border-width', 'width'],\n        '::before',\n    );\n    const radioOuterChecked = getStylesFromElement(\n        `#${containerId}--accordion-header-selected .form-label`,\n        ['border-color'],\n        '::before',\n    );\n    const radioIconSize = getRadioIconSizes({\n        radioIconOuterWidth: radioOuter.width,\n        radioIconOuterStrokeWidth: radioOuter['border-width'],\n        radioIconInnerWidth:\n            radioOuter.width && parseRadioIconSize(radioOuter.width) * defaultRadioIconInnerScale,\n    });\n    const radioIconColor = radioOuter['border-color'];\n    const radioIconFocusColor = radioOuterChecked['border-color'];\n\n    return {\n        variables: {\n            colorPrimary: formInputStyles['box-shadow'],\n            colorBackground: formInputStyles['background-color'],\n            colorText: formLabelStyles.color,\n            colorDanger: formErrorStyles.color,\n            colorTextSecondary: formLabelStyles.color,\n            colorTextPlaceholder: formInputStyles.color,\n            colorIcon: formInputStyles.color,\n            fontFamily: accordionHeaderFontFamily || formInputStyles['font-family'],\n        },\n        rules: {\n            '.Input': {\n                borderColor: formInputStyles['border-color'],\n                color: formInputStyles.color,\n                boxShadow: formInputStyles['box-shadow'],\n            },\n            '.AccordionItem': {\n                borderRadius: 0,\n                borderWidth: 0,\n                borderBottom: formChecklistStyles['border-bottom'],\n                borderColor: formChecklistStyles['border-color'],\n                boxShadow: 'none',\n                fontSize: accordionItemTitleFontSize,\n                fontWeight: accordionItemTitleFontWeight,\n                color: accordionHeaderColor,\n                padding: accordionHeaderPadding,\n            },\n            '.AccordionItem:hover': {\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n                color: accordionHeaderColor,\n            },\n            '.AccordionItem--selected': {\n                fontWeight: 'bold',\n                color: accordionHeaderColor,\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n            },\n            '.TabLabel': {\n                color: accordionHeaderColor,\n            },\n            '.RadioIcon': {\n                width: radioIconSize.outerWidth,\n            },\n            '.RadioIconInner': {\n                r: radioIconSize.innerRadius,\n                fill: radioIconFocusColor,\n            },\n            '.RadioIconOuter': {\n                strokeWidth: radioIconSize.outerStrokeWidth,\n                stroke: radioIconColor,\n            },\n            '.RadioIconOuter--checked': {\n                stroke: radioIconFocusColor,\n            },\n        },\n    };\n};\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, {\n    type FunctionComponent,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { AccordionContext, ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { getAppearanceForOCSElement, getFonts } from './getStripeOCSStyles';\n\nconst StripeOCSPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const collapseStripeElement = useRef<() => void>();\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const [selectedPaymentMethodId, setSelectedPaymentMethodId] = useState<string | undefined>(\n        selectedItemId,\n    );\n    const [isOCSLoading, setIsOCSLoading] = useState(false);\n    const methodSelector = `${method.gateway}-${method.id}`;\n    const containerId = `${methodSelector}-component-field`;\n    const paymentContext = paymentForm;\n\n    useEffect(() => {\n        if (selectedItemId === methodSelector) {\n            return;\n        }\n\n        setSelectedPaymentMethodId(selectedItemId);\n        collapseStripeElement.current?.();\n    }, [selectedItemId, methodSelector]);\n\n    useEffect(() => {\n        if (selectedPaymentMethodId !== methodSelector) {\n            return;\n        }\n\n        onToggle(selectedPaymentMethodId);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedPaymentMethodId, methodSelector]);\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            setIsOCSLoading(true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeocs: {\n                    containerId,\n                    layout: {\n                        type: 'accordion',\n                        defaultCollapsed: selectedItemId !== methodSelector,\n                        radios: true,\n                        linkInAccordion: true,\n                        spacedAccordionItems: false,\n                        visibleAccordionItemsCount: 0,\n                    },\n                    appearance: getAppearanceForOCSElement(containerId),\n                    fonts: getFonts(),\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                    paymentMethodSelect: setSelectedPaymentMethodId,\n                    handleClosePaymentMethod: (collapseElement: () => void) => {\n                        collapseStripeElement.current = collapseElement;\n                    },\n                    togglePreloader: setIsOCSLoading,\n                },\n            });\n        },\n        [\n            containerId,\n            selectedItemId,\n            methodSelector,\n            checkoutService,\n            onUnhandledError,\n            renderSubmitButton,\n            setSelectedPaymentMethodId,\n            setIsOCSLoading,\n        ],\n    );\n\n    const renderCustomOCSSectionStyles = () => (\n        <style>\n            {`\n                .custom-checklist-item#radio-${methodSelector} {\n                    border-bottom: none;\n                }\n                .custom-checklist-item#radio-${methodSelector}:last-of-type {\n                    margin-bottom: -1px;\n                }\n            `}\n        </style>\n    );\n\n    const renderCheckoutElementsForStripeOCSStyling = () => (\n        <div style={{ display: 'none' }}>\n            <div\n                className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n                id={`${containerId}--accordion-header`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    id={`${containerId}-radio-input`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div\n                className=\"form-checklist-header--selected\"\n                id={`${containerId}--accordion-header-selected`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    defaultChecked\n                    id={`${containerId}-radio-input-selected`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        </div>\n    );\n\n    const renderPreloader = () => (\n        <div data-test=\"stripe-accordion-skeleton\" style={{ padding: '10px 18px' }}>\n            <ChecklistSkeleton />\n        </div>\n    );\n\n    return (\n        <>\n            {isOCSLoading ? renderPreloader() : renderCustomOCSSectionStyles()}\n\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={false}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutElementsForStripeOCSStyling()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeOCSPaymentMethod,\n    [{ gateway: 'stripeocs', id: 'optimized_checkout' }],\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst StripeUPEPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const containerId = `stripe-${method.id}-component-field`;\n    const paymentContext = paymentForm;\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getPaymentProviderCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const isStripeLinkAuthenticated = paymentProviderCustomer?.stripeLinkAuthenticationState;\n    const isGuestCustomer = customer?.isGuest;\n    const shouldSavingCardsBeEnabled = useMemo((): boolean => {\n        if (!isGuestCustomer && isStripeLinkAuthenticated) {\n            return false;\n        }\n\n        return true;\n    }, [isGuestCustomer, isStripeLinkAuthenticated]);\n    const isInstrumentFeatureAvailable =\n        shouldSavingCardsBeEnabled && !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (!parentContainer) {\n            throw new Error(\n                'Unable to retrieve input styles as the provided container ID is not valid.',\n            );\n        }\n\n        return getAppliedStyles(parentContainer, properties);\n    };\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            const formInput = getStylesFromElement(`${containerId}--input`, [\n                'color',\n                'background-color',\n                'border-color',\n                'box-shadow',\n            ]);\n            const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n            const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n            paymentContext.hidePaymentSubmitButton(method, true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeupe: {\n                    containerId,\n                    style: {\n                        labelText: formLabel.color,\n                        fieldText: formInput.color,\n                        fieldPlaceholderText: formInput.color,\n                        fieldErrorText: formError.color,\n                        fieldBackground: formInput['background-color'],\n                        fieldInnerShadow: formInput['box-shadow'],\n                        fieldBorder: formInput['border-color'],\n                    },\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            onUnhandledError,\n            method,\n            paymentContext,\n            renderSubmitButton,\n        ],\n    );\n\n    const renderCheckoutThemeStylesForStripeUPE = () => {\n        return (\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        );\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutThemeStylesForStripeUPE()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeUPEPaymentMethod,\n    [{ gateway: 'stripeupe' }, { gateway: 'stripeupe', id: 'klarna' }],\n);\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, IconLock, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nexport interface StripeV3CustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n    };\n}\n\nconst StripeV3CustomCardForm: React.FunctionComponent<StripeV3CustomCardFormProps> = ({\n    options,\n}) => (\n    <div className=\"form-ccFields\">\n        <div className={classNames('form-field', 'form-field--stripe-ccNumber')}>\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardNumberElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_number_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"CardNumber\"\n                id={options.cardNumberElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n        <div className=\"form-field form-field--ccExpiry\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardExpiryElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_expiration_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"ExpiryDate\"\n                id={options.cardExpiryElementOptions.containerId}\n            />\n        </div>\n        <div className=\"form-field form-ccFields-field--ccCvv\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardCvcElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"SecurityCode\"\n                id={options.cardCvcElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n    </div>\n);\n\nexport default StripeV3CustomCardForm;\n","import {\n    type CardInstrument,\n    type CustomError,\n    type PaymentInitializeOptions,\n    type StripeElementOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { useHostedCreditCard } from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport StripeV3CustomCardForm from './StripeV3CustomCardForm';\n\nexport interface StripeOptions {\n    alipay?: StripeElementOptions;\n    card: StripeElementOptions;\n    cardCvc: StripeElementOptions;\n    cardExpiry: StripeElementOptions;\n    cardNumber: StripeElementOptions;\n    iban: StripeElementOptions;\n    idealBank: StripeElementOptions;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    Card = 'card',\n    CardCvc = 'cardCvc',\n    CardExpiry = 'cardExpiry',\n    CardNumber = 'cardNumber',\n    Iban = 'iban',\n    IdealBank = 'idealBank',\n}\n\nconst StripeV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const { useIndividualCardFields } = method.initializationData;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const paymentMethodType = method.id as StripeElementType;\n    const additionalStripeV3Classes =\n        paymentMethodType !== StripeElementType.Alipay\n            ? 'optimizedCheckout-form-input widget--stripev3'\n            : '';\n    const containerId = `stripe-${paymentMethodType}-component-field`;\n    const stripeOptions: StripeOptions = useMemo(() => {\n        const classes = {\n            base: 'form-input optimizedCheckout-form-input',\n        };\n\n        return {\n            [StripeElementType.Card]: {\n                classes,\n            },\n            [StripeElementType.CardCvc]: {\n                classes,\n                placeholder: '',\n            },\n            [StripeElementType.CardExpiry]: {\n                classes,\n            },\n            [StripeElementType.CardNumber]: {\n                classes,\n                showIcon: true,\n                placeholder: '',\n            },\n            [StripeElementType.Iban]: {\n                classes,\n                supportedCountries: ['SEPA'],\n            },\n            [StripeElementType.IdealBank]: {\n                classes,\n            },\n        };\n    }, []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer, getConfig },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const storeUrl = useMemo(() => {\n        if (!config) {\n            return null;\n        }\n\n        return config.links.siteLink;\n    }, [config]);\n\n    const onUnhandledStripeV3Error = useCallback(\n        (error: CustomError) => {\n            if (error.type === 'stripev3_error' && error.subtype === 'auth_failure') {\n                error.message = language.translate('payment.stripev3_auth_3ds_fail');\n            }\n\n            onUnhandledError(error);\n        },\n        [language, onUnhandledError],\n    );\n\n    const getIndividualCardElementOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            return {\n                cardNumberElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardNumber],\n                    containerId: 'stripe-card-number-component-field',\n                },\n                cardExpiryElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardExpiry],\n                    containerId: 'stripe-expiry-component-field',\n                },\n                cardCvcElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardCvc],\n                    containerId: 'stripe-cvc-component-field',\n                },\n            };\n        },\n        [],\n    );\n\n    const getStripeOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            if (useIndividualCardFields) {\n                return getIndividualCardElementOptions(stripeInitializeOptions);\n            }\n\n            return stripeInitializeOptions[paymentMethodType];\n        },\n        [paymentMethodType, getIndividualCardElementOptions, useIndividualCardFields],\n    );\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                stripev3: {\n                    containerId,\n                    options: getStripeOptions(stripeOptions),\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [containerId, getStripeOptions, stripeOptions, checkoutService, getHostedFormOptions],\n    );\n\n    const renderCustomPaymentForm = () => {\n        const optionsCustomForm = getIndividualCardElementOptions(stripeOptions);\n\n        return <StripeV3CustomCardForm options={optionsCustomForm} />;\n    };\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                additionalContainerClassName={additionalStripeV3Classes}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledStripeV3Error}\n                renderCustomPaymentForm={renderCustomPaymentForm}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldRenderCustomInstrument={useIndividualCardFields}\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            {method.id === 'iban' && (\n                <p className=\"stripe-sepa-mandate-disclaimer\">\n                    <TranslatedString\n                        data={{ storeUrl }}\n                        id=\"payment.stripe_sepa_mandate_disclaimer\"\n                    />\n                </p>\n            )}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeV3PaymentMethod,\n    [{ gateway: 'stripev3' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport { CheckoutButton } from '@bigcommerce/checkout/checkout-button-integration';\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { navigateToOrderConfirmation } from '@bigcommerce/checkout/utility';\n\nconst StripeLinkV2Button: FunctionComponent<CheckoutButtonProps> = (props) => {\n    const additionalInitializationOptions = {\n        onComplete: navigateToOrderConfirmation,\n        loadingContainerId: 'checkout-app',\n        methodId: 'optimized_checkout',\n        gatewayId: 'stripeocs',\n    };\n\n    return (\n        <CheckoutButton\n            additionalInitializationOptions={additionalInitializationOptions}\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    StripeLinkV2Button,\n    [{ id: 'stripeocs' }],\n);\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type LanguageService,\n    type LegacyHostedFormOptions,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst CheckoutButton: FunctionComponent<CheckoutButtonProps> = ({\n    checkoutService: { deinitializeCustomer, initializeCustomer },\n    checkoutButtonContainerClass,\n    containerId,\n    methodId,\n    onUnhandledError,\n    onWalletButtonClick,\n    additionalInitializationOptions,\n}) => {\n    const initializeCustomerStrategyOrThrow = async () => {\n        try {\n            await initializeCustomer({\n                methodId,\n                [methodId]: {\n                    container: containerId,\n                    onUnhandledError,\n                    onClick: () => onWalletButtonClick(methodId),\n                    ...additionalInitializationOptions,\n                },\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeCustomerStrategyOrThrow = async () => {\n        try {\n            await deinitializeCustomer({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeCustomerStrategyOrThrow();\n\n        return () => {\n            void deinitializeCustomerStrategyOrThrow();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className={checkoutButtonContainerClass} data-test={containerId} id={containerId} />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    CheckoutButton,\n    [],\n);\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n"],"names":["appearFocused","id","name","renderInput","useCallback","additionalClassName","input","labelContent","getStylesFromElement","selector","properties","pseudoElementSelector","element","document","querySelector","getAppliedStyles","parseRadioIconSize","size","parseInt","getFonts","elementsList","querySelectorAll","fonts","forEach","fontSrc","getAttribute","push","cssSrc","getAppearanceForOCSElement","containerId","defaultAccordionPaddingHorizontal","defaultAccordionPaddingVertical","formInputStyles","formLabelStyles","formErrorStyles","accordionHeaderStyles","accordionSelectedHeaderStyles","formChecklistStyles","color","accordionHeaderColor","accordionItemTitleFontSize","accordionHeaderFontFamily","accordionItemTitleFontWeight","accordionPaddingTop","accordionPaddingRight","accordionPaddingBottom","accordionHeaderPadding","isEmpty","undefined","radioOuter","radioOuterChecked","radioIconSize","sizes","radioIconOuterWidth","radioIconOuterStrokeWidth","radioIconInnerWidth","outerWidth","outerStrokeWidth","innerWidth","toFixed","stripeSVGSizeCoefficient","innerRadius","getRadioIconSizes","width","radioIconColor","radioIconFocusColor","variables","colorPrimary","colorBackground","colorText","colorDanger","colorTextSecondary","colorTextPlaceholder","colorIcon","fontFamily","rules","borderColor","boxShadow","borderRadius","borderWidth","borderBottom","fontSize","fontWeight","padding","backgroundColor","r","fill","strokeWidth","stroke","toResolvableComponent","paymentForm","checkoutState","checkoutService","method","onUnhandledError","noop","rest","collapseStripeElement","useRef","onToggle","selectedItemId","useContext","AccordionContext","A","selectedPaymentMethodId","setSelectedPaymentMethodId","useState","isOCSLoading","setIsOCSLoading","methodSelector","gateway","paymentContext","useEffect","current","renderSubmitButton","hidePaymentSubmitButton","disableSubmit","setFieldValue","setSubmit","setValidationSchema","instruments","data","getInstruments","getCheckout","isPaymentDataRequired","statuses","isLoadingInstruments","checkout","initializeStripePayment","options","initializePayment","stripeocs","layout","type","defaultCollapsed","radios","linkInAccordion","spacedAccordionItems","visibleAccordionItemsCount","appearance","onError","render","paymentMethodSelect","handleClosePaymentMethod","collapseElement","togglePreloader","style","ChecklistSkeleton","HostedWidgetPaymentComponent","deinitializePayment","hideContentWhenSignedOut","isInstrumentCardCodeRequired","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequired","isInstrumentCardNumberRequiredSelector","isInstrumentFeatureAvailable","isSignedIn","some","payments","providerId","loadInstruments","signOut","signOutCustomer","display","className","defaultChecked","getPaymentProviderCustomer","customer","getCustomer","paymentProviderCustomer","isStripeLinkAuthenticated","stripeLinkAuthenticationState","isGuestCustomer","isGuest","useMemo","Boolean","config","isVaultingEnabled","parentContainer","getElementById","Error","formInput","formLabel","formError","stripeupe","labelText","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","htmlFor","cardNumberElementOptions","TranslatedString","IconLock","cardExpiryElementOptions","cardCvcElementOptions","TooltipTrigger","placement","tooltip","CreditCardCodeTooltip","IconHelp","StripeElementType","language","useIndividualCardFields","initializationData","paymentMethodType","additionalStripeV3Classes","Alipay","stripeOptions","classes","base","Card","CardCvc","placeholder","CardExpiry","CardNumber","showIcon","Iban","supportedCountries","IdealBank","getConfig","storeUrl","links","siteLink","onUnhandledStripeV3Error","error","subtype","message","translate","getIndividualCardElementOptions","stripeInitializeOptions","getStripeOptions","getHostedStoredCardValidationFieldset","getHostedFormOptions","useHostedCreditCard","selectedInstrument","stripev3","form","additionalContainerClassName","renderCustomPaymentForm","optionsCustomForm","shouldRenderCustomInstrument","validateInstrument","_shouldShowNumber","props","additionalInitializationOptions","onComplete","navigateToOrderConfirmation","loadingContainerId","methodId","gatewayId","CheckoutButton","setFieldTouched","setSubmitted","submitForm","cardCode","requireCardCode","isCardCodeRequired","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","getHostedFieldId","compact","join","focusedFieldType","setFocusedFieldType","cardCodeId","cardNumberId","styleProps","styleContainerId","fields","cardCodeVerification","accessibilityLabel","instrumentId","bigpayToken","cardNumberVerification","cardExpiry","cardName","cardNumber","styles","default","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","errors","forIn","fieldErrors","errorKey","Component","state","isAddingNewCard","handleDeleteInstrument","this","selectedInstrumentId","length","setState","getDefaultInstrumentId","handleUseNewCard","handleSelectInstrument","componentDidMount","isInstrumentFeatureAvailableProp","getValidationSchema","initializeMethod","componentDidUpdate","prevProps","prevState","componentWillUnmount","deinitializeCustomer","hideWidget","isInitializing","isAccountInstrument","shouldHideInstrumentExpiryDate","shouldShow","find","instrument","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","isLoading","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","hideContentWhenLoading","onSelectInstrument","onUseNewInstrument","onDeleteInstrument","shouldHideExpiryDate","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","renderEditButtonIfAvailable","hideVerificationFields","shouldShowNumberField","isSignInRequired","tabIndex","storedCardValidationSchema","getSelectedInstrument","shouldShowEditButton","buttonId","translatedString","onClick","shouldShowDescriptor","paymentDescriptor","initializeCustomer","signInCustomer","Promise","resolve","defaultInstrument","checkoutButtonContainerClass","onWalletButtonClick","container","CreditCardInputStylesType","getCreditCardInputStyles","Default","createElement","appendChild","Provider","value","isSubmitted","hasError","ref","parentElement","removeChild","testId","cardExpiryId"],"sourceRoot":""}