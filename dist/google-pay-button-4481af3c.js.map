{"version":3,"file":"google-pay-button-4481af3c.js","mappings":"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","sources":["webpack://checkout/./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/PaymentView.tsx","webpack://checkout/./packages/wallet-button-integration/src/SignInView.tsx","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx"],"sourcesContent":["import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    type CheckoutButtonResolveId,\n    PaymentMethodId,\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst GooglePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeGooglePayPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const loadingContainerId = 'checkout-app';\n            const mergedOptions = {\n                ...defaultOptions,\n                [PaymentMethodId.AdyenV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AdyenV3GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AuthorizeNetGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BNZGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BigCommercePaymentsGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BraintreeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.PayPalCommerceGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeUPEGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CybersourceV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.OrbitalGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CheckoutcomGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.WorldpayAccessGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.TdOnlineMartGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeOCSGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"walletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeGooglePayPayment}\n            method={method}\n            shouldShowEditButton\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    GooglePayPaymentMethod,\n    [\n        { id: PaymentMethodId.AdyenV2GooglePay },\n        { id: PaymentMethodId.AdyenV3GooglePay },\n        { id: PaymentMethodId.AuthorizeNetGooglePay },\n        { id: PaymentMethodId.BNZGooglePay },\n        { id: PaymentMethodId.BraintreeGooglePay },\n        { id: PaymentMethodId.PayPalCommerceGooglePay },\n        { id: PaymentMethodId.BigCommercePaymentsGooglePay },\n        { id: PaymentMethodId.CheckoutcomGooglePay },\n        { id: PaymentMethodId.CybersourceV2GooglePay },\n        { id: PaymentMethodId.OrbitalGooglePay },\n        { id: PaymentMethodId.StripeGooglePay },\n        { id: PaymentMethodId.StripeUPEGooglePay },\n        { id: PaymentMethodId.WorldpayAccessGooglePay },\n        { id: PaymentMethodId.TdOnlineMartGooglePay },\n        { id: PaymentMethodId.StripeOCSGooglePay },\n    ],\n);\n","import { number } from 'card-validator';\n\nimport { type WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface PaymentViewProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    shouldShowEditButton?: boolean;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    buttonId: string;\n    method: PaymentMethod;\n    onSignOut: () => void;\n}\n\nconst PaymentView: React.FC<PaymentViewProps> = ({\n    accountMask,\n    cardName,\n    cardType,\n    expiryMonth,\n    expiryYear,\n    shouldShowEditButton,\n    editButtonClassName,\n    editButtonLabel,\n    buttonId,\n    method,\n    onSignOut,\n}) => {\n    return (\n        <>\n            {!!cardName && (\n                <p data-test=\"payment-method-wallet-card-name\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_name_label\" />:\n                    </strong>{' '}\n                    {cardName}\n                </p>\n            )}\n\n            {!!accountMask && !!cardType && (\n                <p data-test=\"payment-method-wallet-card-type\">\n                    <strong>{`${cardType}:`}</strong> {accountMask}\n                </p>\n            )}\n\n            {!!expiryMonth && !!expiryYear && (\n                <p data-test=\"payment-method-wallet-card-expiry\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                    </strong>{' '}\n                    {`${expiryMonth}/${expiryYear}`}\n                </p>\n            )}\n\n            {!!shouldShowEditButton && (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    }\n                </p>\n            )}\n\n            <SignOutLink method={method} onSignOut={onSignOut} />\n        </>\n    );\n};\n\nexport default PaymentView;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignInViewProps {\n    buttonId: string;\n    method: PaymentMethod;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n}\n\nconst SignInView: React.FC<SignInViewProps> = ({\n    buttonId,\n    method,\n    signInButtonClassName,\n    signInButtonLabel,\n}) => {\n    const { language } = useLocale();\n\n    return (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n            {signInButtonLabel || (\n                <TranslatedString\n                    data={{ providerName: getPaymentMethodName(language)(method) }}\n                    id=\"remote.sign_in_action\"\n                />\n            )}\n        </a>\n    );\n};\n\nexport default SignInView;\n","import {\n    type CheckoutSelectors,\n    type CustomerRequestOptions,\n    type PaymentInitializeOptions,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect } from 'react';\n\nimport {\n    type PaymentFormService,\n    useCheckout,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\nimport PaymentView from './PaymentView';\nimport SignInView from './SignInView';\n\nexport interface WalletButtonPaymentMethodProps {\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst WalletButtonPaymentMethodComponent: React.FC<WalletButtonPaymentMethodProps> = ({\n    paymentForm,\n    buttonId,\n    editButtonClassName,\n    editButtonLabel,\n    isInitializing = false,\n    method,\n    shouldShowEditButton,\n    signInButtonClassName,\n    signInButtonLabel,\n    signOutCustomer,\n    deinitializePayment,\n    initializePayment,\n    onSignOut = noop,\n    onSignOutError = noop,\n    onUnhandledError = noop,\n}) => {\n    const {\n        checkoutState: {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        },\n    } = useCheckout();\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n    const isPaymentSelected = some(checkout.payments, { providerId: method.id });\n    // FIXME: I'm not sure how this would work for non-English names.\n    const cardName =\n        walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' ');\n\n    const toggleSubmit = () => {\n        const { disableSubmit } = paymentForm;\n        const currentIsPaymentDataRequired = isPaymentDataRequired();\n\n        if (\n            normalizeWalletPaymentData(method.initializationData) ||\n            !currentIsPaymentDataRequired\n        ) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    };\n\n    const handleSignOut = useCallback(async () => {\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    }, [signOutCustomer, method.id, onSignOut, onSignOutError]);\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            toggleSubmit();\n\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                const { disableSubmit } = paymentForm;\n\n                disableSubmit(method, false);\n\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        toggleSubmit();\n    });\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n            <div className=\"paymentMethod paymentMethod--walletButton\">\n                {isPaymentSelected ? (\n                    <PaymentView\n                        {...walletPaymentData}\n                        buttonId={buttonId}\n                        cardName={cardName}\n                        editButtonClassName={editButtonClassName}\n                        editButtonLabel={editButtonLabel}\n                        method={method}\n                        onSignOut={handleSignOut}\n                        shouldShowEditButton={shouldShowEditButton}\n                    />\n                ) : (\n                    <SignInView\n                        buttonId={buttonId}\n                        method={method}\n                        signInButtonClassName={signInButtonClassName}\n                        signInButtonLabel={signInButtonLabel}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default WalletButtonPaymentMethodComponent;\n"],"names":["checkoutService","method","onUnhandledError","rest","initializeGooglePayPayment","useCallback","defaultOptions","reinitializePayment","options","deinitializePayment","gatewayId","gateway","methodId","id","initializePayment","error","Error","loadingContainerId","mergedOptions","AdyenV2GooglePay","walletButton","onError","onPaymentSelect","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BigCommercePaymentsGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","StripeGooglePay","StripeUPEGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","CheckoutcomGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay","buttonId","shouldShowEditButton","signOutCustomer","formatAccountMask","accountMask","padding","includes","data","object","card_information","cardData","isWalletButtonInitializationData","number","cardType","type","expiryMonth","expMonth","expiryYear","expYear","accountNum","card","expDate","substr","niceType","PaymentMethodType","getPaymentMethodName","language","name","translations","PaymentMethodId","Affirm","translate","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","config","displayName","capitalize","get","onSignOut","className","TranslatedString","href","onClick","preventDefault","providerName","cardName","editButtonClassName","editButtonLabel","signInButtonClassName","signInButtonLabel","paymentForm","isInitializing","noop","onSignOutError","checkoutState","getBillingAddress","getCheckout","isPaymentDataRequired","billingAddress","checkout","walletPaymentData","initializationData","isPaymentSelected","some","payments","providerId","firstName","lastName","join","toggleSubmit","disableSubmit","currentIsPaymentDataRequired","handleSignOut","window","location","reload","useEffect","LoadingOverlay","hideContentWhenLoading","isLoading"],"sourceRoot":""}