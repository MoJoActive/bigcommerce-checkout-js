{"version":3,"file":"payment-a9436a0b.js","mappings":"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,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,kCACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,yBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,iCACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,oBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,eACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,KACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,iBACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,2BACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,OACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,mBACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,0BACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,8CACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,eACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,gBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,OACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,iBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,qBACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,cACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,oBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,8BACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,gBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,OACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,gBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,mBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,OACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,gBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,gCACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,4BACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,OACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,cACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,KACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,+CACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,iCACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,OACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,yBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,gBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,OACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,mBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,6CACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,cACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,uBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,gBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,cACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,OACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,iBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,2BACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,OACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,kCACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,mBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,OACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,cACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,cACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,KACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,mBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,+CACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,wBACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,cACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,eACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,4BACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,mCACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,wBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,eACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,eACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,kBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,eACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,cACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,+CACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,yBACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,YACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,cACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,uBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,wCACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,WACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,cACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,OACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,QACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,sBACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,eACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,2BACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,SACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,uBACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,iBACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,gBACN0yB,SAAU,KACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,aACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,OACV71B,KAAM,MAEV,CACImD,KAAM,8CACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,UACN0yB,SAAU,MACV71B,KAAM,MAEV,CACImD,KAAM,0BACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,uBACN0yB,SAAU,QACV71B,KAAM,MAEV,CACImD,KAAM,oBACN0yB,SAAU,OACV71B,K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","sources":["webpack://checkout/./packages/core/src/app/coupon/AppliedCoupon.tsx","webpack://checkout/./packages/core/src/app/giftCertificate/AppliedGiftCertificate.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconRemove.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemable.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemables.tsx","webpack://checkout/./packages/core/src/app/cart/Redeemable.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalLink.tsx","webpack://checkout/./packages/core/src/app/ui/text/MultiLineText.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditionsField.tsx","webpack://checkout/./packages/core/src/app/payment/mapSubmitOrderErrorMessage.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getUniquePaymentMethodId.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardFieldsetValues.ts","webpack://checkout/./packages/core/src/app/payment/PaymentContext.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditions.tsx","webpack://checkout/./packages/core/src/app/payment/getPaymentValidationSchema.ts","webpack://checkout/./packages/core/src/app/termsConditions/getTermsConditionsValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodType.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodName.ts","webpack://checkout/./packages/core/src/app/ui/form/CustomChecklistItem.tsx","webpack://checkout/./packages/bigcommerce-payments-utils/src/BigCommercePaymentsPayLaterBanner.tsx","webpack://checkout/./packages/paypal-utils/src/BraintreePaypalCreditBanner.tsx","webpack://checkout/./packages/paypal-utils/src/PaypalCommerceCreditBanner.tsx","webpack://checkout/./packages/ui/src/icon/mapFromPaymentMethodCardType.ts","webpack://checkout/./packages/ui/src/icon/CreditCardIcon.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIconList.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodTitle.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodDisplayName.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardFieldsetValues.ts","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormContext.tsx","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormProvider.tsx","webpack://checkout/./packages/core/src/app/ui/form/withForm.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2CardValidation.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isBankInstrument/isBankInstrument.ts","webpack://checkout/./packages/ui/src/form/Legend/Legend.tsx","webpack://checkout/./packages/ui/src/modal/ModalTrigger.tsx","webpack://checkout/./packages/ui/src/icon/IconNewAccount.tsx","webpack://checkout/./packages/ui/src/icon/IconPaypal.tsx","webpack://checkout/./packages/ui/src/icon/IconAch.tsx","webpack://checkout/./packages/ui/src/icon/IconSepa.tsx","webpack://checkout/./packages/ui/src/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isAchInstrument/isAchInstrument.ts","webpack://checkout/./packages/instrument-utils/src/guards/isSepaInstrument/isSepaInstrument.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/AccountInstrumentSelect/AccountInstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isCardInstrument/isCardInstrument.ts","webpack://checkout/./packages/instrument-utils/src/guards/isAccountInstrument/isAccountInstrument.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageAccountInstrumentsTable/ManageAccountInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageAchInstrumentsTable/ManageAchInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageCardInstrumentsTable/ManageCardInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageInstrumentsAlert/ManageInstrumentsAlert.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageInstrumentsModal/ManageInstrumentsModal.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/AccountInstrumentFieldset/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/ui/src/form/CheckboxFormField/CheckboxFormField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentStorageField/InstrumentStorageField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentStoreAsDefaultField/InstrumentStoreAsDefaultField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/StoreInstrumentFieldset/StoreInstrumentFieldset.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2PaymentMethod.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3PaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts","webpack://checkout/./packages/hosted-payment-integration/src/HostedPaymentComponent.tsx","webpack://checkout/./packages/affirm-integration/src/AffirmPaymentMethod.tsx","webpack://checkout/./packages/afterpay-integration/src/AfterpayPaymentMethod.tsx","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2PaymentMethod.tsx","webpack://checkout/./packages/apple-pay-integration/src/ApplePayPaymentMethod.tsx","webpack://checkout/./packages/barclay-integration/src/BarclaycardPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/components/BigCommercePaymentsPaymentMethodComponent.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/hooks/useBigCommercePaymentsInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePayments/BigCommercePaymentsPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/getUniquePaymentMethodId.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsAPMs/BigCommercePaymentsAPMsPaymentMethod.tsx","webpack://checkout/./packages/ui/src/icon/IconLock.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/formatCreditCardNumber/formatCreditCardNumber.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/unformatCreditCardNumber/unformatCreditCardNumber.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardNumberField/CreditCardNumberField.tsx","webpack://checkout/./packages/ui/src/icon/IconCardCodeVisa.tsx","webpack://checkout/./packages/ui/src/icon/IconCardCodeAmex.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCodeTooltip.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCodeField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardValidation/CreditCardValidation.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardExpiryField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/formatCreditCardExpiryDate/formatCreditCardExpiryDate.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardNameField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCustomerCodeField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardFieldset/CreditCardFieldset.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/getInstrumentValidationSchema/getInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardValidationSchema/getCreditCardValidationSchema.ts","webpack://checkout/./packages/locale/src/createLocaleContext.ts","webpack://checkout/./packages/credit-card-integration/src/CreditCardPaymentMethodComponent.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/configureCardValidator.ts","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNameField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardFieldset/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedCreditCardValidationSchema/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentCreditCards/BigCommercePaymentsCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/hooks/useBigCommercePaymentsFastlaneInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneCreditCardForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/BigCommercePaymentsFastlanePaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/index.ts","webpack://checkout/./packages/utility/src/is-error-with-translation-key.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsPayLater/BigCommercePaymentsPayLaterPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsVenmo/BigCommercePaymentsVenmoPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/CountryData.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/validation-schemas/getBigCommercePaymentsRatePayValidationSchema.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsRatePay/BigCommercePaymentsRatePayPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/constants.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectNumberField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectSelectField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectTextField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectEcpFieldset.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useEcpInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getEcpValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectEcpPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectAlternativePaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectInitializationData.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useSepaInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getSepaValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectSepaPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getIdealValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectIdealPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapV2PaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getPayByBankValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectPayByBankPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltClientPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltCustomForm.tsx","webpack://checkout/./packages/bolt-integration/src/BoltEmbeddedPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/constants.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchValidation.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchFormFields.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchMandateText.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchPaymentForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/BraintreeAchPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneCreditCardForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/hooks/useBraintreeFastlaneInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/index.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/BraintreeFastlanePaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeLocalPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreePaypalPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx","webpack://checkout/./packages/braintree-integration/src/VisaCheckout/VisaCheckoutPaymentMethod.tsx","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/TextFieldForm.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomFormFields.tsx","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomPaymentMethod.tsx","webpack://checkout/./packages/clearpay-integration/src/ClearpayPaymentMethod.tsx","webpack://checkout/./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarna/KlarnaPaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarnav2/KlarnaV2PaymentMethod.tsx","webpack://checkout/./packages/mollie-integration/src/MollieAPMCustomForm.tsx","webpack://checkout/./packages/mollie-integration/src/MollieCustomCardForm.tsx","webpack://checkout/./packages/mollie-integration/src/MolliePaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx","webpack://checkout/./packages/moneris-integration/src/MonerisPaymentMethod.tsx","webpack://checkout/./packages/offline-payment-integration/src/OfflinePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/components/PayPalCommercePaymentMethodComponent.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceAPMs/PayPalCommerceAPMsPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCredit/PayPalCommerceCreditPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCreditCards/PayPalCommerceCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneCreditCardForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/hooks/usePayPalCommerceFastlaneInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/PayPalCommerceFastlanePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/index.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/is-error-with-translation-key.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/hooks/usePaypalCommerceInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/PayPalCommercePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceVenmo/PayPalCommerceVenmoPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/validation-schema/getPaypalCommerceRatePayValidationSchema.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/PaypalCommerceRatePayPaymentMethod.tsx","webpack://checkout/./packages/paypal-express-integration/src/PaypalExpressPaymentMethod.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2Form.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2PaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/getStripeOCSStyles.ts","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/StripeOCSPaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-upe/StripeUPEPaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3CustomCardForm.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3PaymentMethod.tsx","webpack://checkout/./packages/worldpay-access-integration/src/WorldpayCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/resolvePaymentMethod.ts","webpack://checkout/./packages/core/src/app/payment/withPayment.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/getCreditCardInputStyles.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCustomerCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentFeatureAvailable.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/mapFromInstrumentCardType.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/InstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isAccountInstrument.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isBankAccountInstrument.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isCardInstrument.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconPaypal.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageAccountInstrumentsTable.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageCardInstrumentsTable.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageInstrumentsAlert.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageInstrumentsModal.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/CardInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/core/src/app/ui/form/TextInputIframeContainer.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconLock.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconHelp.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconCardCodeVisa.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconCardCodeAmex.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCodeTooltip.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardNameField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardValidation.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/withHostedCreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardExpiryField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/formatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardNameField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardNumberField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/formatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/getCreditCardValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/CreditCardValidation.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/getInstrumentValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/InstrumentStorageField.tsx","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/InstrumentStoreAsDefaultField.tsx","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/StoreInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/configureCardValidator.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/BraintreeCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconNewAccount.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/SignOutLink.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/WalletButtonPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/MasterpassPaymentMethod.tsx","webpack://checkout/./packages/locale/src/masterpassFormatLocale.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodProviderType.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaypalPaymentsProPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/Wrapper.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/initializationComponentMap.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/NoUI.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/usePropsToOnMount.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/PPSDKPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodV2.tsx","webpack://checkout/./packages/core/src/app/payment/createPaymentFormService.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodList.tsx","webpack://checkout/./packages/core/src/app/common/utility/isMobile.ts","webpack://checkout/./packages/core/src/app/payment/PaymentRedeemables.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentSubmitButton.tsx","webpack://checkout/./packages/core/src/app/payment/SpamProtectionField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditOverlay.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentForm.tsx","webpack://checkout/./packages/core/src/app/payment/Payment.tsx","webpack://checkout/./packages/core/src/app/payment/mapToOrderRequestBody.ts","webpack://checkout/./packages/core/src/app/common/error/isCartChangedError.ts","webpack://checkout/./packages/core/src/app/cart/mapToRedeemableProps.ts","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx"],"sourcesContent":["import { Coupon } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface AppliedCouponProps {\n    coupon: Coupon;\n}\n\nconst AppliedCoupon: FunctionComponent<AppliedCouponProps> = ({ coupon }) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--coupon\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"coupon-amount\">\n                {coupon.displayName}\n            </span>{' '}\n            <TranslatedString id=\"redeemable.coupon_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\" data-test=\"coupon-code\">\n            {coupon.code}\n        </span>\n    </div>\n);\n\nexport default memo(AppliedCoupon);\n","import { GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { ShopperCurrency } from '../currency';\n\nexport interface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n}\n\nconst AppliedGiftCertificate: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n}) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--giftCertificate\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"giftCertificate-amount\">\n                <ShopperCurrency amount={giftCertificate.used} />\n            </span>{' '}\n            <TranslatedString id=\"redeemable.gift_certificate_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\">\n            {giftCertificate.remaining > 0 && (\n                <span className=\"redeemable-info-subHeader--remaining\">\n                    <TranslatedString id=\"redeemable.gift_certificate_remaining_text\" />{' '}\n                    <span data-test=\"giftCertificate-remaining\">\n                        <ShopperCurrency amount={giftCertificate.remaining} />\n                    </span>\n                </span>\n            )}\n\n            <span data-test=\"giftCertificate-code\">{giftCertificate.code}</span>\n        </span>\n    </div>\n);\n\nexport default memo(AppliedGiftCertificate);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconRemove: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconRemove);\n","import classNames from 'classnames';\nimport React, {FunctionComponent, ReactNode} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconRemove } from '../ui/icon';\n\nimport './AppliedRedeemable.scss';\n\nexport interface AppliedRedeemableProps {\n    children: ReactNode;\n    isRemoving: boolean;\n    onRemove(): void;\n}\n\nconst AppliedRedeemable: FunctionComponent<AppliedRedeemableProps> = ({\n    children,\n    isRemoving,\n    onRemove,\n}) => (\n    <div className=\"form-checklist-header\">\n        <div className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\">\n            <span className=\"is-srOnly\">\n                <TranslatedString id=\"redeemable.applied_text\" />\n            </span>\n        </div>\n\n        <div className=\"form-label form-label-redeemable\">\n            <div className=\"redeemable\">\n                {children}\n                <div className=\"redeemable-column redeemable-actions\">\n                    <button\n                        className={classNames('redeemable-remove', { 'is-loading': isRemoving })}\n                        data-test=\"redeemable-remove\"\n                        disabled={isRemoving}\n                        onClick={onRemove}\n                        type=\"button\"\n                    >\n                        <IconRemove />\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default AppliedRedeemable;\n","import { Coupon, GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AppliedCoupon } from '../coupon';\nimport { AppliedGiftCertificate } from '../giftCertificate';\n\nimport AppliedRedeemable from './AppliedRedeemable';\n\ninterface AppliedCouponProps {\n    coupon: Coupon;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedCouponChecklistItem: FunctionComponent<AppliedCouponProps> = ({\n    coupon,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(coupon.code);\n    }, [coupon, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedCoupon coupon={coupon} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\ninterface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedGiftCertificateChecklistItem: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(giftCertificate.code);\n    }, [giftCertificate, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedGiftCertificate giftCertificate={giftCertificate} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\nexport interface AppliedRedeemablesProps {\n    coupons?: Coupon[];\n    giftCertificates?: GiftCertificate[];\n    isRemovingGiftCertificate?: boolean;\n    isRemovingCoupon?: boolean;\n    onRemovedCoupon(code: string): void;\n    onRemovedGiftCertificate(code: string): void;\n}\n\nconst AppliedRedeemables: FunctionComponent<AppliedRedeemablesProps> = ({\n    coupons = [],\n    giftCertificates = [],\n    isRemovingCoupon = false,\n    isRemovingGiftCertificate = false,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n}) => {\n    if (!coupons.length && !giftCertificates.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"form-checklist optimizedCheckout-form-checklist\"\n            data-test=\"redeemables-list\"\n        >\n            {coupons.map((coupon) => (\n                <AppliedCouponChecklistItem\n                    coupon={coupon}\n                    isRemoving={isRemovingCoupon}\n                    key={coupon.code}\n                    onRemoved={onRemovedCoupon}\n                />\n            ))}\n\n            {giftCertificates.map((giftCertificate) => (\n                <AppliedGiftCertificateChecklistItem\n                    giftCertificate={giftCertificate}\n                    isRemoving={isRemovingGiftCertificate}\n                    key={giftCertificate.code}\n                    onRemoved={onRemovedGiftCertificate}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(AppliedRedeemables);\n","import { CheckoutSelectors, RequestError } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport classNames from 'classnames';\nimport { FieldProps, FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, {FunctionComponent, KeyboardEvent, memo, ReactNode, useCallback} from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContextType, FormProvider, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { FormField, Label, TextInput } from '../ui/form';\nimport { Toggle } from '../ui/toggle';\n\nimport AppliedRedeemables, { AppliedRedeemablesProps } from './AppliedRedeemables';\n\nexport interface RedeemableFormValues {\n    redeemableCode: string;\n}\n\nexport type ReedemableChildrenProps = Pick<\n    RedeemableProps,\n    | 'onRemovedCoupon'\n    | 'onRemovedGiftCertificate'\n    | 'isRemovingGiftCertificate'\n    | 'isRemovingCoupon'\n    | 'coupons'\n    | 'giftCertificates'\n>;\n\nexport type RedeemableProps = {\n    appliedRedeemableError?: RequestError;\n    isApplyingRedeemable?: boolean;\n    isRemovingRedeemable?: boolean;\n    removedRedeemableError?: RequestError;\n    showAppliedRedeemables?: boolean;\n    shouldCollapseCouponCode?: boolean;\n    applyCoupon(code: string): Promise<CheckoutSelectors>;\n    applyGiftCertificate(code: string): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n} & AppliedRedeemablesProps;\n\nconst Redeemable: FunctionComponent<\n    RedeemableProps & WithLanguageProps & FormikProps<RedeemableFormValues>\n    > = ({ shouldCollapseCouponCode, showAppliedRedeemables, ...formProps }) => {\n        const { themeV2 } = useThemeContext();\n\n        return (\n            <Toggle openByDefault={!shouldCollapseCouponCode}>\n                {({ toggle, isOpen }): ReactNode => (\n                    <>\n                        {shouldCollapseCouponCode && (\n                            <a\n                                aria-controls=\"redeemable-collapsable\"\n                                aria-expanded={isOpen}\n                                className={classNames('redeemable-label', { 'body-cta': themeV2 })}\n                                data-test=\"redeemable-label\"\n                                href=\"#\"\n                                onClick={preventDefault(toggle)}\n                            >\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </a>\n                        )}\n                        {!shouldCollapseCouponCode && (\n                            <div className={classNames('redeemable-label', { 'body-cta': themeV2 })}>\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </div>\n                        )}\n                        {(isOpen || !shouldCollapseCouponCode) && (\n                            <div data-test=\"redeemable-collapsable\" id=\"redeemable-collapsable\">\n                                <RedeemableForm {...formProps} />\n                                {showAppliedRedeemables && <AppliedRedeemables {...formProps} />}\n                            </div>\n                        )}\n                    </>\n                )}\n            </Toggle>\n        );\n    }\n\nconst RedeemableForm: FunctionComponent<\n    Partial<RedeemableProps> & FormikProps<RedeemableFormValues> & WithLanguageProps\n> = ({ appliedRedeemableError, isApplyingRedeemable, clearError = noop, submitForm, language }) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const handleSubmitForm = (setSubmitted: FormContextType['setSubmitted']) => {\n        if (isSubmittingOrder()) {\n            return;\n        }\n\n        setSubmitted(true);\n        submitForm();\n    }\n\n    const handleKeyDown = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => (event: KeyboardEvent) => {\n            if (appliedRedeemableError) {\n                clearError(appliedRedeemableError);\n            }\n\n            // note: to prevent submitting main form, we manually intercept\n            // the enter key event and submit the \"subform\".\n            if (event.keyCode === 13 || event.key === 'Enter') {\n                handleSubmitForm(setSubmitted);\n                event.preventDefault();\n            }\n        }),\n        [appliedRedeemableError, clearError, submitForm],\n    );\n\n    const handleSubmit = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => () => {\n            handleSubmitForm(setSubmitted);\n        }),\n        [],\n    );\n\n    const renderLabel = useCallback(\n        (name: string) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"redeemable.code_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderErrorMessage = useCallback((errorCode: string, errorMessage?: string) => {\n        switch (errorCode) {\n            case 'min_purchase':\n                return <TranslatedString id=\"redeemable.coupon_min_order_total\" />;\n\n            case 'not_applicable':\n                return <TranslatedString id=\"redeemable.coupon_location_error\" />;\n\n            default:\n                return errorMessage || <TranslatedString id=\"redeemable.code_invalid_error\" />;\n        }\n    }, []);\n\n    const renderInput = useCallback(\n        (setSubmitted: FormContextType['setSubmitted']) =>\n            ({ field }: FieldProps) =>\n                (\n                    <>\n                        {appliedRedeemableError &&\n                            appliedRedeemableError.errors &&\n                            appliedRedeemableError.errors[0] && (\n                                <Alert type={AlertType.Error}>\n                                    {renderErrorMessage(appliedRedeemableError.errors[0].code, appliedRedeemableError.errors[0].message)}\n                                </Alert>\n                            )}\n\n                        <div className=\"form-prefixPostfix\">\n                            <TextInput\n                                {...field}\n                                aria-label={language.translate('redeemable.code_label')}\n                                className=\"form-input optimizedCheckout-form-input\"\n                                onKeyDown={handleKeyDown(setSubmitted)}\n                                testId=\"redeemableEntry-input\"\n                                themeV2={themeV2}\n                            />\n\n                            <Button\n                                className={classNames('form-prefixPostfix-button--postfix', {\n                                    'body-bold': themeV2,\n                                })}\n                                disabled={isSubmittingOrder()}\n                                id=\"applyRedeemableButton\"\n                                isLoading={isApplyingRedeemable}\n                                onClick={handleSubmit(setSubmitted)}\n                                testId=\"redeemableEntry-submit\"\n                                variant={ButtonVariant.Secondary}\n                            >\n                                <TranslatedString id=\"redeemable.apply_action\" />\n                            </Button>\n                        </div>\n                    </>\n                ),\n        [\n            appliedRedeemableError,\n            handleKeyDown,\n            handleSubmit,\n            isApplyingRedeemable,\n            language,\n            isSubmittingOrder,\n            renderErrorMessage,\n        ],\n    );\n\n    const renderContent = useCallback(\n        memoizeOne(({ setSubmitted }: FormContextType) => (\n            <FormField\n                input={renderInput(setSubmitted)}\n                label={renderLabel}\n                name=\"redeemableCode\"\n            />\n        )),\n        [renderLabel, renderInput],\n    );\n\n    return (\n        <fieldset className=\"form-fieldset redeemable-entry\">\n            <FormProvider>{renderContent}</FormProvider>\n        </fieldset>\n    );\n};\n\nexport default withLanguage(\n    withFormik<RedeemableProps & WithLanguageProps, RedeemableFormValues>({\n        mapPropsToValues() {\n            return {\n                redeemableCode: '',\n            };\n        },\n\n        async handleSubmit(\n            { redeemableCode },\n            { props: { applyCoupon, applyGiftCertificate, clearError } },\n        ) {\n            const code = redeemableCode.trim();\n\n            try {\n                await applyGiftCertificate(code);\n            } catch (error) {\n                if (error instanceof Error) {\n                    clearError(error);\n                }\n\n                applyCoupon(code);\n            }\n        },\n\n        validationSchema({ language }: RedeemableProps & WithLanguageProps) {\n            return object({\n                redeemableCode: string().required(\n                    language.translate('redeemable.code_required_error'),\n                ),\n            });\n        },\n    })(memo(Redeemable)),\n);\n","import React, { FunctionComponent, ReactNode, useCallback } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize } from '../button';\n\nimport Modal from './Modal';\nimport './ModalLink.scss';\nimport ModalTrigger, { ModalTriggerModalProps } from './ModalTrigger';\n\nexport interface ModalLinkProps {\n    header: ReactNode;\n    body: ReactNode;\n    children?: ReactNode;\n}\n\nconst ModalLink: FunctionComponent<ModalLinkProps> = ({ children, body, header }) => {\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <Modal\n                {...props}\n                additionalBodyClassName=\"modal--withText\"\n                footer={\n                    <Button onClick={props.onRequestClose} size={ButtonSize.Small}>\n                        <TranslatedString id=\"common.ok_action\" />\n                    </Button>\n                }\n                header={header}\n                shouldShowCloseButton={true}\n            >\n                {body}\n            </Modal>\n        ),\n        [header, body],\n    );\n\n    return (\n        <ModalTrigger modal={renderModal}>\n            { }\n            {({ onClick }) => <a onClick={preventDefault(onClick)}>{children}</a>}\n        </ModalTrigger>\n    );\n};\n\nexport default ModalLink;\n","import React, { Fragment, FunctionComponent } from 'react';\n\nconst MultiLineText: FunctionComponent<{ children: string }> = ({ children }) => (\n    <>\n        {children.split('\\n').map((line, key) => (\n            <Fragment key={key}>\n                {line}\n                <br />\n            </Fragment>\n        ))}\n    </>\n);\n\nexport default MultiLineText;\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { parseAnchor } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedHtml, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField, Fieldset, FormField, Legend, TextArea } from '../ui/form';\nimport { ModalHeader, ModalLink } from '../ui/modal';\nimport { MultiLineText } from '../ui/text';\n\nexport enum TermsConditionsType {\n    Link = 'link',\n    TextArea = 'textarea',\n    Modal = 'modal',\n}\n\nexport type TermsConditionsFieldProps =\n    | TermsConditionsLinkFieldProps\n    | TermsConditionsTextAreaFieldProps;\n\ninterface TermsConditionsLinkFieldProps {\n    name: string;\n    type: TermsConditionsType.Link;\n    url: string;\n}\n\ninterface TermsConditionsTextAreaFieldProps {\n    name: string;\n    terms: string;\n    type: TermsConditionsType.TextArea | TermsConditionsType.Modal;\n}\n\ninterface TermsConditionsTextFieldProps {\n    name: string;\n    terms: string;\n}\n\nconst BaseTermsConditionsModalCheckboxField: FunctionComponent<\n    TermsConditionsTextFieldProps & WithLanguageProps\n> = ({ language, name, terms }) => {\n    const translatedLabel = language.translate('terms_and_conditions.agreement_with_link_text', {\n        url: '',\n    });\n    const parsedLabel = parseAnchor(translatedLabel);\n\n    const labelContent = parsedLabel ? (\n        <>\n            {parsedLabel[0]}\n            <ModalLink\n                body={<MultiLineText>{terms}</MultiLineText>}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"terms_and_conditions.heading\" />\n                    </ModalHeader>\n                }\n            >\n                {parsedLabel[1]}\n            </ModalLink>\n            {parsedLabel[2]}\n        </>\n    ) : (\n        translatedLabel\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsModalCheckboxField = withLanguage(BaseTermsConditionsModalCheckboxField);\n\ninterface TermsConditionsCheckboxFieldProps {\n    name: string;\n    type: TermsConditionsType;\n    url?: string;\n}\n\nconst TermsConditionsCheckboxField: FunctionComponent<TermsConditionsCheckboxFieldProps> = ({\n    name,\n    url,\n}) => {\n    const labelContent = useMemo(\n        () =>\n            url ? (\n                <TranslatedHtml data={{ url }} id=\"terms_and_conditions.agreement_with_link_text\" />\n            ) : (\n                <TranslatedString id=\"terms_and_conditions.agreement_text\" />\n            ),\n        [url],\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsTextField: FunctionComponent<TermsConditionsTextFieldProps> = ({\n    name,\n    terms,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextArea defaultValue={terms} name={field.name} readOnly />,\n        [terms],\n    );\n\n    return <FormField input={renderInput} name={`${name}Text`} />;\n};\n\nconst TermsConditionsFieldset: FunctionComponent<TermsConditionsFieldProps> = (props) => {\n    const { type } = props;\n\n    return (\n        <Fieldset\n            additionalClassName=\"checkout-terms\"\n            legend={\n                <Legend>\n                    <TranslatedString id=\"terms_and_conditions.terms_and_conditions_heading\" />\n                </Legend>\n            }\n        >\n            {isTermsConditionsTextArea(props) && <TermsConditionsTextField {...props} />}\n            {isTermsConditionModal(props) && type === TermsConditionsType.Modal ? (\n                <TermsConditionsModalCheckboxField {...props} />\n            ) : (\n                <TermsConditionsCheckboxField {...props} />\n            )}\n        </Fieldset>\n    );\n};\n\nfunction isTermsConditionsTextArea(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.TextArea;\n}\n\nfunction isTermsConditionModal(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.Modal;\n}\n\nexport default memo(TermsConditionsFieldset);\n","import { TranslationData } from '@bigcommerce/checkout-sdk';\nimport { includes } from 'lodash';\n\nexport default function mapSubmitOrderErrorMessage(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n    shouldLocalise: boolean,\n): string {\n    switch (error.type) {\n        case 'not_initialized':\n            return translate('payment.payment_error');\n\n        case 'custom_provider_execute_error':\n            return translate(error.subtype);\n\n        case 'payment_cancelled':\n            return translate('payment.payment_cancelled');\n\n        case 'payment_method_invalid':\n            return translate('payment.payment_method_disabled_error');\n\n        case 'tax_provider_unavailable':\n            return translate('payment.tax_provider_unavailable');\n\n        case 'cart_changed':\n            return translate('shipping.cart_change_error');\n\n        case 'cart_consistency':\n            return translate('cart.consistency_error');\n\n        default:\n            if (\n                includes(\n                    [\n                        'order_could_not_be_finalized_error',\n                        'provider_fatal_error',\n                        'payment_invalid',\n                        'provider_error',\n                        'provider_widget_error',\n                        'user_payment_error',\n                    ],\n                    error.body && error.body.type,\n                )\n            ) {\n                return translate('payment.payment_method_error', { message: error.message });\n            }\n\n            if (shouldLocalise && error.body && error.body.errors && error.body.errors.length) {\n                const messages = error.body.errors.map((err: { code: any }) =>\n                    translate(`payment.errors.${err.code}`),\n                );\n\n                return messages.join(' ');\n            }\n\n            if (error.message) {\n                return error.message;\n            }\n\n            return error.type === 'unrecoverable'\n                ? translate('common.unavailable_error')\n                : translate('payment.place_order_error');\n    }\n}\n\nexport function mapSubmitOrderErrorTitle(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n): string {\n    if (error.type === 'unrecoverable') {\n        return translate('common.unavailable_heading');\n    }\n\n    if (error.type === 'missing_shipping_method') {\n        return translate('common.missing_shipping_method_heading');\n    }\n\n    if (error.type === 'invalid_shipping_address') {\n        return translate('common.invalid_shipping_address');\n    }\n\n    return translate('common.error_heading');\n}\n","export interface ExpiryDate {\n    month: string;\n    year: string;\n}\n\nexport default function unformatCreditCardExpiryDate(value: string): ExpiryDate {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n\n    if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n        return { month: '', year: '' };\n    }\n\n    return {\n        month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n        year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n    };\n}\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n\nexport function parseUniquePaymentMethodId(value: string): {\n    methodId: string;\n    gatewayId?: string;\n} {\n    const [gatewayId, methodId] = value.includes('-') ? value.split('-') : [undefined, value];\n\n    return { gatewayId, methodId };\n}\n","import { CardInstrumentFieldsetValues } from '../storedInstrument';\n\nexport default interface CreditCardFieldsetValues {\n    ccCustomerCode?: string;\n    ccCvv?: string;\n    ccExpiry: string;\n    ccName: string;\n    ccNumber: string;\n    shouldSaveInstrument?: boolean;\n}\n\nexport interface CreditCardValidationValues extends CardInstrumentFieldsetValues {\n    ccCvv?: string;\n    ccNumber?: string;\n}\n\nexport function hasCreditCardNumber(values: unknown): values is { ccNumber: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccNumber' in values;\n}\n\nexport function hasCreditCardExpiry(values: unknown): values is { ccExpiry: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccExpiry' in values;\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createContext } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nconst PaymentContext = createContext<PaymentContextProps | undefined>(undefined);\n\nexport default PaymentContext;\n","import React, { FunctionComponent } from 'react';\n\nimport TermsConditionsField, { TermsConditionsType } from './TermsConditionsField';\n\nexport interface TermsConditionsProps {\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n}\n\nexport const TermsConditions: FunctionComponent<TermsConditionsProps> = ({\n    termsConditionsUrl,\n    termsConditionsText = '',\n}) => (\n    <>\n        {termsConditionsUrl ? (\n            <TermsConditionsField\n                name=\"terms\"\n                type={TermsConditionsType.Link}\n                url={termsConditionsUrl}\n            />\n        ) : (\n            <TermsConditionsField\n                name=\"terms\"\n                terms={termsConditionsText}\n                type={TermsConditionsType.TextArea}\n            />\n        )}\n    </>\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { getTermsConditionsValidationSchema } from '../termsConditions';\n\nexport interface PaymentValidationSchemaOptions {\n    additionalValidation?: ObjectSchema<Partial<PaymentFormValues>>;\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPaymentValidationSchema({\n    additionalValidation,\n    isTermsConditionsRequired,\n    language,\n}: PaymentValidationSchemaOptions): ObjectSchema<PaymentFormValues> {\n    const schemaFields: {\n        paymentProviderRadio: StringSchema;\n    } = {\n        paymentProviderRadio: string().required(),\n    };\n\n    const schemaFieldsWithTerms = object(schemaFields).concat(\n        getTermsConditionsValidationSchema({ isTermsConditionsRequired, language }),\n    );\n\n    return additionalValidation\n        ? schemaFieldsWithTerms.concat(additionalValidation as any)\n        : schemaFieldsWithTerms;\n}\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, BooleanSchema, object, ObjectSchema } from 'yup';\n\nexport interface TermsConditionValidationSchemaOptions {\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getTermsConditionsValidationSchema({\n    isTermsConditionsRequired,\n    language,\n}: TermsConditionValidationSchemaOptions): ObjectSchema<{ terms?: boolean }> {\n    const schemaFields: {\n        terms?: BooleanSchema;\n    } = {};\n\n    if (isTermsConditionsRequired) {\n        schemaFields.terms = boolean().oneOf(\n            [true],\n            language.translate('terms_and_conditions.agreement_required_error'),\n        );\n    }\n\n    return object(schemaFields);\n}\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config && method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import React, { FunctionComponent, memo, ReactNode } from 'react';\n\nexport interface CustomChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n}\n\nconst CustomChecklistItem: FunctionComponent<CustomChecklistItemProps> = ({\n    content,\n    htmlId,\n}) => {\n    return (\n        <li\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item custom-checklist-item\"\n            id={htmlId}\n        >\n            {content}\n        </li>\n    );\n};\n\nexport default memo(CustomChecklistItem);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsPayLaterBanner: FunctionComponent<{\n    onUnhandledError?(error: Error): void\n}> = ({ onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n                bigcommerce_payments_paylater: {\n                    bannerContainerId: 'bigcommerce-payments-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n    }, []);\n\n    return (\n        <div\n            data-test='bigcommerce-payments-banner-container'\n            id='bigcommerce-payments-banner-container'\n        />\n    );\n};\n\nexport default BigCommercePaymentsPayLaterBanner;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalCreditBanner: FunctionComponent<{ onUnhandledError?(error: Error): void }> = ({\n    onUnhandledError,\n}) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BraintreePaypalCredit,\n                braintree: {\n                    bannerContainerId: 'braintree-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BraintreePaypalCredit,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n\n        return () => {\n            try {\n                void checkoutService.deinitializePayment({\n                    methodId: PaymentMethodId.BraintreePaypalCredit,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError?.(error);\n                }\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test=\"braintree-banner-container\" id=\"braintree-banner-container\" />;\n};\n\nexport default BraintreePaypalCreditBanner;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst PaypalCommerceCreditBanner: FunctionComponent<{\n    methodId: string;\n    containerId: string;\n    onUnhandledError?(error: Error): void;\n}> = ({ methodId, containerId, onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId,\n                [methodId]: {\n                    bannerContainerId: containerId,\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default PaypalCommerceCreditBanner;\n","import { ComponentType, lazy } from 'react';\n\nimport { IconProps } from './';\n\ninterface InstrumentComponent {\n    instrument: string;\n    component: ComponentType<IconProps>;\n}\n\nconst instrumentTypeMap: Record<string, InstrumentComponent> = {\n    AMEX: {\n        instrument: 'american-express',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-amex\" */ './IconCardAmex')),\n    },\n    BITCOIN: {\n        instrument: 'bitcoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-bitcoin\" */ './IconBitCoin')),\n    },\n    BITCOIN_CASH: {\n        instrument: 'bitcoin-cash',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-bitcoin-cash\" */ './IconBitCoinCash'),\n        ),\n    },\n    BANCONTACT: {\n        instrument: 'bancontact',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-bancontact\" */ './IconCardBancontact'),\n        ),\n    },\n    CARNET: {\n        instrument: 'carnet',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-carnet\" */ './IconCardCarnet'),\n        ),\n    },\n    CB: {\n        instrument: 'cb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-cb\" */ './IconCardCB')),\n    },\n    DINERS: {\n        instrument: 'diners-club',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-diners-club\" */ './IconCardDinersClub'),\n        ),\n    },\n    DANKORT: {\n        instrument: 'dankort',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-dankort\" */ './IconCardDankort'),\n        ),\n    },\n    DISCOVER: {\n        instrument: 'discover',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-discover\" */ './IconCardDiscover'),\n        ),\n    },\n    DOGECOIN: {\n        instrument: 'dogecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-dogecoin\" */ './IconDogeCoin')),\n    },\n    ELECTRON: {\n        instrument: 'electron',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-electron\" */ './IconCardElectron'),\n        ),\n    },\n    ELO: {\n        instrument: 'elo',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-elo\" */ './IconCardElo')),\n    },\n    ETHEREUM: {\n        instrument: 'ethereum',\n        component: lazy(() => import(/* webpackChunkName: \"icon-ethereum\" */ './IconEthereum')),\n    },\n    HIPER: {\n        instrument: 'hiper',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-hipercard\" */ './IconCardHipercard'),\n        ),\n    },\n    JCB: {\n        instrument: 'jcb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-jcb\" */ './IconCardJCB')),\n    },\n    LITECOIN: {\n        instrument: 'litecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-litecoin\" */ './IconLiteCoin')),\n    },\n    MADA: {\n        instrument: 'mada',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-mada\" */ './IconCardMada')),\n    },\n    MAESTRO: {\n        instrument: 'maestro',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-maestro\" */ './IconCardMaestro'),\n        ),\n    },\n    MC: {\n        instrument: 'mastercard',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-mastercard\" */ './IconCardMastercard'),\n        ),\n    },\n    SHIBA_INU: {\n        instrument: 'shiba-inu',\n        component: lazy(() => import(/* webpackChunkName: \"icon-shiba-inu\" */ './IconShibaInu')),\n    },\n    TROY: {\n        instrument: 'troy',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-troy\" */ './IconCardTroy')),\n    },\n    CUP: {\n        instrument: 'unionpay',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-unionpay\" */ './IconCardUnionPay'),\n        ),\n    },\n    USD_COIN: {\n        instrument: 'usd-coin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-usd-coin\" */ './IconUsdCoin')),\n    },\n    VISA: {\n        instrument: 'visa',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-visa\" */ './IconCardVisa')),\n    },\n};\n\nexport default function mapFromPaymentMethodCardType(type: string): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return instrumentTypeMap[type]?.instrument || undefined;\n}\n\nexport function getPaymentMethodIconComponent(type?: string): ComponentType<IconProps> | undefined {\n    if (!type) {\n        return undefined;\n    }\n\n    const instrumentType = Object.values(instrumentTypeMap).find(\n        (record) => record.instrument === type,\n    );\n\n    return instrumentType ? instrumentType.component : undefined;\n}\n\nfunction getSupportedInstrumentTypes() {\n    return Object.values(instrumentTypeMap).map((record) => record.instrument);\n}\n\nexport function filterInstrumentTypes(instrumentTypes: string[]) {\n    const supportedInstrumentTypes = getSupportedInstrumentTypes();\n\n    return instrumentTypes.filter((type) => supportedInstrumentTypes.includes(type));\n}\n","import React, { FunctionComponent, memo, Suspense } from 'react';\n\nimport { getPaymentMethodIconComponent } from './mapFromPaymentMethodCardType';\nimport { IconSize } from './withIconContainer';\n\nexport interface CreditCardIconProps {\n    cardType?: string;\n}\n\nconst CreditCardIcon: FunctionComponent<CreditCardIconProps> = ({ cardType }) => {\n    const iconProps = {\n        additionalClassName: 'cardIcon-icon',\n        size: IconSize.Medium,\n        testId: `credit-card-icon-${cardType || 'default'}`,\n    };\n\n    const IconComponent = getPaymentMethodIconComponent(cardType);\n\n    return IconComponent ? (\n        <Suspense>\n            <IconComponent {...iconProps} />\n        </Suspense>\n    ) : (\n        <div className=\"cardIcon-icon cardIcon-icon--default icon icon--medium\" />\n    );\n};\n\nexport default memo(CreditCardIcon);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { CreditCardIcon, filterInstrumentTypes } from './';\n\nexport interface CreditCardIconListProps {\n    selectedCardType?: string;\n    cardTypes: string[];\n}\n\nconst CreditCardIconList: FunctionComponent<CreditCardIconListProps> = ({\n    selectedCardType,\n    cardTypes,\n}) => {\n    const filteredCardTypes = filterInstrumentTypes(cardTypes);\n\n    if (!filteredCardTypes.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"creditCardTypes-list\">\n            {filteredCardTypes.map((type) => (\n                <li\n                    className={classNames(\n                        'creditCardTypes-list-item',\n                        { 'is-active': selectedCardType === type },\n                        { 'not-active': selectedCardType && selectedCardType !== type },\n                    )}\n                    data-test={`${type}-icon`}\n                    key={type}\n                >\n                    <span className=\"cardIcon\">\n                        <CreditCardIcon cardType={type} />\n                    </span>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(CreditCardIconList);\n","import { CardInstrument, CheckoutSettings, LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport classNames from 'classnames';\nimport { compact } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { BigCommercePaymentsPayLaterBanner } from '@bigcommerce/checkout/bigcommerce-payments-utils'\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps , PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { BraintreePaypalCreditBanner, PaypalCommerceCreditBanner } from '@bigcommerce/checkout/paypal-utils';\nimport { CreditCardIconList, mapFromPaymentMethodCardType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { isExperimentEnabled } from '../../common/utility';\n\nimport { hasCreditCardNumber } from './CreditCardFieldsetValues';\nimport getPaymentMethodDisplayName from './getPaymentMethodDisplayName';\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { isHostedCreditCardFieldsetValues } from './HostedCreditCardFieldsetValues';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodTitleProps {\n    method: PaymentMethod;\n    isSelected?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithPaymentTitleProps {\n    instruments: CardInstrument[];\n    checkoutSettings: CheckoutSettings;\n    storeCountryCode: string;\n    cdnBasePath: string;\n}\n\ninterface PaymentMethodSubtitleProps {\n    onUnhandledError?(error: Error): void;\n    methodId: string;\n}\n\ntype SubtitleType = ReactNode | ((subtitleProps?: PaymentMethodSubtitleProps) => ReactNode);\n\nexport function getPaymentMethodTitle(\n    language: LanguageService,\n    basePath: string,\n    checkoutSettings: CheckoutSettings,\n    storeCountryCode: string,\n): (method: PaymentMethod) => {\n    logoUrl: string;\n    titleText: string,\n    subtitle?: SubtitleType\n} {\n    const cdnPath = (path: string) => `${basePath}${path}`;\n\n    return (method) => {\n        const paymentWithLogo = method.initializationData?.methodsWithLogo\n            ? method.initializationData.methodsWithLogo\n            : [];\n        const methodName = getPaymentMethodName(language)(method);\n        const methodDisplayName = getPaymentMethodDisplayName(language)(method);\n        // TODO: API could provide the data below so UI can read simply read it.\n        // However, I'm not sure how we deal with translation yet. TBC.\n        const customTitles: { [key: string]: { logoUrl: string; titleText: string, subtitle?: ReactNode | ((props: any) => ReactNode) } } = {\n            [PaymentMethodType.CreditCard]: {\n                logoUrl: '',\n                titleText: methodName,\n            },\n            [PaymentMethodId.BraintreeVenmo]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.BraintreePaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: { onUnhandledError?(error: Error): void }): ReactNode => <BraintreePaypalCreditBanner {...props} />\n            },\n            [PaymentMethodType.PaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeAch]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeLocalPaymentMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BigCommercePaymentsPayPal]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsPayLater]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.PaypalCommerce]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-credit-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodType.VisaCheckout]: {\n                logoUrl: cdnPath('/img/payment-providers/visa-checkout.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.Affirm]: {\n                logoUrl: cdnPath('/img/payment-providers/affirm-checkout-header.png'),\n                titleText: language.translate('payment.affirm_display_name_text'),\n            },\n            [PaymentMethodId.Afterpay]: {\n                logoUrl: isExperimentEnabled(checkoutSettings, 'PROJECT-6993.change_afterpay_logo_for_us_stores') && storeCountryCode === 'US' ? cdnPath('/img/payment-providers/afterpay-new-us.svg') : cdnPath('/img/payment-providers/afterpay-badge-blackonmint.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.AmazonPay]: {\n                logoUrl: cdnPath('/img/payment-providers/amazon-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.ApplePay]: {\n                logoUrl: cdnPath('/modules/checkout/applepay/images/applepay-header@2x.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Bolt]: {\n                logoUrl: '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Clearpay]: {\n                logoUrl: cdnPath('/img/payment-providers/clearpay-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.GooglePay]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.PayWithGoogle]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Humm]: {\n                logoUrl: cdnPath('/img/payment-providers/humm-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Klarna]: {\n                logoUrl: method.initializationData?.enableBillie\n                        ? cdnPath('/img/payment-providers/klarna-billie-header.png')\n                        : cdnPath('/img/payment-providers/klarna-header.png'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Laybuy]: {\n                logoUrl: cdnPath('/img/payment-providers/laybuy-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Masterpass]: {\n                logoUrl: 'https://masterpass.com/dyn/img/acc/global/mp_mark_hor_blk.svg',\n                titleText: '',\n            },\n            [PaymentMethodType.Paypal]: {\n                // TODO: method.id === PaymentMethodId.BraintreeVenmo should be removed after the PAYPAL-1380.checkout_button_strategies_update experiment removal\n                logoUrl:\n                    method.id === PaymentMethodId.BraintreeVenmo && method.logoUrl\n                        ? method.logoUrl\n                        : cdnPath('/img/payment-providers/paypalpaymentsprouk.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Quadpay]: {\n                logoUrl: cdnPath('/img/payment-providers/quadpay.png'),\n                titleText: language.translate('payment.quadpay_display_name_text'),\n            },\n            [PaymentMethodId.Sezzle]: {\n                logoUrl: cdnPath('/img/payment-providers/sezzle-checkout-header.png'),\n                titleText: language.translate('payment.sezzle_display_name_text'),\n            },\n            [PaymentMethodId.Zip]: {\n                logoUrl: cdnPath('/img/payment-providers/zip.png'),\n                titleText: language.translate('payment.zip_display_name_text'),\n            },\n            [PaymentMethodType.Barclaycard]: {\n                logoUrl: cdnPath(\n                    `/img/payment-providers/barclaycard_${method.id.toLowerCase()}.png`,\n                ),\n                titleText: '',\n            },\n            [PaymentMethodId.AdyenV2]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.AdyenV3]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Mollie]: {\n                logoUrl:\n                    method.method === 'credit_card'\n                        ? ''\n                        : cdnPath(`/img/payment-providers/mollie_${method.method}.svg`),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Checkoutcom]: {\n                logoUrl: ['credit_card', 'card', 'checkoutcom'].includes(method.id)\n                    ? ''\n                    : cdnPath(`/img/payment-providers/checkoutcom_${method.id.toLowerCase()}.svg`),\n                titleText: methodName,\n            },\n            [PaymentMethodId.StripeV3]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.StripeUPE]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.WorldpayAccess]: {\n                logoUrl: '',\n                titleText: language.translate('payment.credit_debit_card_text'),\n            },\n        };\n\n        if (method.gateway === PaymentMethodId.BlueSnapDirect) {\n            if (method.id === 'credit_card') {\n                return { logoUrl: '', titleText: language.translate('payment.credit_card_text') };\n            }\n\n            if (method.id === 'ecp') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_electronic_check_label') };\n            }\n\n            if (method.id === 'banktransfer') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_local_bank_transfer_label') };\n            }\n        }\n\n        if (method.id === PaymentMethodId.PaypalCommerceVenmo) {\n            return customTitles[PaymentMethodId.PaypalCommerceAlternativeMethod];\n        }\n\n        if (method.id === PaymentMethodId.BigCommercePaymentsVenmo) {\n            return customTitles[PaymentMethodId.BigCommercePaymentsAlternativeMethod];\n        }\n\n        // KLUDGE: 'paypal' is actually a credit card method. It is the only\n        // exception to the rule below. We should probably fix it on API level,\n        // but apparently it would break LCO if we are not careful.\n        if (\n            method.id === PaymentMethodId.PaypalPaymentsPro &&\n            method.method === PaymentMethodType.CreditCard\n        ) {\n            return customTitles[PaymentMethodType.CreditCard];\n        }\n\n        if (method.id === PaymentMethodId.Ratepay) {\n            return { logoUrl: method.logoUrl || '', titleText: language.translate('payment.ratepay.payment_method_title')};\n        }\n\n        return (\n            customTitles[method.gateway || ''] ||\n            customTitles[method.id] ||\n            customTitles[method.method] ||\n            customTitles[PaymentMethodType.CreditCard]\n        );\n    };\n}\n\nfunction getInstrumentForMethod(\n    instruments: CardInstrument[],\n    method: PaymentMethod,\n    values: PaymentFormValues\n): CardInstrument | undefined {\n    const instrumentsForMethod = instruments.filter(instrument => instrument.provider === method.id);\n    const selectedInstrument = instrumentsForMethod.find(instrument => instrument.bigpayToken === values.instrumentId);\n\n    return selectedInstrument;\n}\n\nconst PaymentMethodTitle: FunctionComponent<\n    PaymentMethodTitleProps &\n        WithLanguageProps &\n        WithPaymentTitleProps &\n        ConnectFormikProps<PaymentFormValues>\n> = ({ cdnBasePath, checkoutSettings, storeCountryCode, onUnhandledError, formik: { values }, instruments, isSelected, language, method }) => {\n    const methodName = getPaymentMethodName(language)(method);\n    const { logoUrl, titleText, subtitle } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(method);\n    const { themeV2 } = useThemeContext();\n\n    const getSelectedCardType = () => {\n        if (!isSelected) {\n            return;\n        }\n\n        const instrumentSelected = getInstrumentForMethod(instruments, method, values);\n\n        if (isHostedCreditCardFieldsetValues(values) && values.hostedForm.cardType) {\n            return values.hostedForm.cardType;\n        }\n\n        if (hasCreditCardNumber(values) && values.ccNumber) {\n            const { card } = number(values.ccNumber);\n\n            if (!card) {\n                return;\n            }\n\n            return card.type;\n        }\n\n        if (instrumentSelected) {\n            return instrumentSelected.brand;\n        }\n    };\n\n    const getSubtitle = () => {\n        const node = subtitle instanceof Function ? subtitle({ onUnhandledError, methodId: method.id }) : subtitle;\n\n        return node ? <div className=\"paymentProviderHeader-subtitleContainer\">\n            {node}\n        </div> : null\n    }\n\n    return (\n        <div className={\n            classNames(\n                'paymentProviderHeader-container',\n                {'paymentProviderHeader-container-googlePay': method.id.includes('googlepay')},\n            )\n        }>\n            <div\n                className=\"paymentProviderHeader-nameContainer\"\n                data-test={`payment-method-${method.id}`}\n            >\n                {logoUrl && (\n                    <img\n                        alt={`${methodName} icon`}\n                        className={classNames(\n                            'paymentProviderHeader-img',\n                            {'paymentProviderHeader-img-applePay': method.id === 'applepay'},\n                            {'paymentProviderHeader-img-googlePay': method.id.includes('googlepay')},\n                        )}\n                        data-test=\"payment-method-logo\"\n                        src={logoUrl}\n                    />\n                )}\n\n                {titleText && (\n                    <div className={classNames('paymentProviderHeader-name',\n                        { 'sub-header': themeV2 })}\n                        data-test=\"payment-method-name\">\n                        {titleText}\n                    </div>\n                )}\n                {getSubtitle()}\n            </div>\n            <div className=\"paymentProviderHeader-cc\">\n                <CreditCardIconList\n                    cardTypes={compact(method.supportedCards.map(mapFromPaymentMethodCardType))}\n                    selectedCardType={getSelectedCardType()}\n                />\n            </div>\n        </div>\n    );\n};\n\nfunction mapToCheckoutProps({ checkoutState }: CheckoutContextProps): WithPaymentTitleProps | null {\n    const {\n        data: { getConfig, getInstruments },\n    } = checkoutState;\n    const config = getConfig();\n\n    const instruments = getInstruments() || [];\n\n    if (!config) {\n        return null;\n    }\n\n    const storeCountryCode = config.storeProfile.storeCountryCode\n\n    return {\n        instruments,\n        checkoutSettings: config.checkoutSettings,\n        storeCountryCode,\n        cdnBasePath: config.cdnPath,\n    };\n}\n\nexport default connectFormik(\n    withLanguage(withCheckout(mapToCheckoutProps)(memo(PaymentMethodTitle))),\n);\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport PaymentMethodId from './PaymentMethodId';\n\nexport default function getPaymentMethodDisplayName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        const { displayName } = method.config;\n\n        const isCreditCard = displayName?.toLowerCase() === 'credit card';\n\n        if (\n            method.id === PaymentMethodId.PaypalCommerceCredit ||\n            method.id === PaymentMethodId.BigCommercePaymentsPayLater ||\n            method.id === PaymentMethodId.BraintreePaypalCredit\n        ) {\n            const { payPalCreditProductBrandName } = method.initializationData;\n\n            if (payPalCreditProductBrandName) {\n                return payPalCreditProductBrandName.credit || payPalCreditProductBrandName;\n            }\n\n            return 'Pay Later';\n        }\n\n        if (\n            (isCreditCard && method.id === PaymentMethodId.AdyenV2) ||\n            method.id === PaymentMethodId.AdyenV3\n        ) {\n            return language.translate('payment.credit_debit_card_text');\n        }\n\n        if (isCreditCard) {\n            return language.translate('payment.credit_card_text');\n        }\n\n        return displayName || '';\n    };\n}\n","interface HostedCreditCardFieldsetValues {\n    hostedForm: {\n        cardType?: string;\n        errors?: {\n            cardCode?: string;\n            cardExpiry?: string;\n            cardName?: string;\n            cardNumber?: string;\n        };\n    };\n}\n\nexport function isHostedCreditCardFieldsetValues(\n    value: unknown,\n): value is HostedCreditCardFieldsetValues {\n    if (!(value instanceof Object)) {\n        return false;\n    }\n\n    if (!('hostedForm' in value)) {\n        return false;\n    }\n\n    return true;\n}\n","import { createContext, useContext } from 'react';\n\nimport PaymentMethodProps from '../../PaymentMethodProps';\n\nexport type PaymentFormContextProps = Pick<PaymentMethodProps, 'paymentForm'>;\n\nexport const PaymentFormContext = createContext<PaymentFormContextProps | undefined>(undefined);\n\nexport function usePaymentFormContext() {\n    const context = useContext(PaymentFormContext);\n\n    if (!context) {\n        throw new Error('usePaymentFormContext must be used within a PaymentFormContextProvider');\n    }\n\n    return context;\n}\n","import React, { ReactNode } from 'react';\n\nimport PaymentFormService from '../../PaymentFormService';\n\nimport { PaymentFormContext } from './PaymentFormContext';\n\ninterface PaymentFormProviderProps {\n    children?: ReactNode;\n    paymentForm: PaymentFormService;\n}\n\nexport const PaymentFormProvider = ({ children, paymentForm }: PaymentFormProviderProps) => {\n    return (\n        <PaymentFormContext.Provider value={{ paymentForm }}>\n            {children}\n        </PaymentFormContext.Provider>\n    );\n};\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\nimport { FormContext, FormContextType } from '@bigcommerce/checkout/ui';\n\nexport type WithFormProps = FormContextType;\n\nconst withForm = createInjectHoc(FormContext, { displayNamePrefix: 'WithForm' });\n\nexport default withForm;\n","import {\n    AdyenValidationState,\n    CardInstrument,\n    LanguageService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV2CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n    language?: LanguageService;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV2CardValidation: FunctionComponent<AdyenV2CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n    language,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        {language?.translate(\n                            'payment.instrument_trusted_shipping_address_title_text',\n                        )}\n                    </strong>\n\n                    <br />\n\n                    {language?.translate('payment.instrument_trusted_shipping_address_text')}\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            {language?.translate('payment.credit_card_number_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            {language?.translate('payment.credit_card_cvv_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            {language?.translate('payment.credit_card_expiration_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV2CardValidation;\n","import { BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isBankAccountInstrument(\n    instrument?: PaymentInstrument,\n): instrument is BankInstrument {\n    return (\n        instrument?.type === 'bank' && instrument?.method !== 'ach' && instrument?.method !== 'ecp'\n    );\n}\n\nexport default function assertIsBankInstrument(\n    instrument?: PaymentInstrument,\n): asserts instrument is BankInstrument {\n    if (!instrument || !isBankAccountInstrument(instrument)) {\n        throw new Error('Is not a bank account instrument.');\n    }\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface LegendProps extends HTMLAttributes<HTMLLegendElement> {\n    hidden?: boolean;\n    testId?: string;\n}\n\nconst Legend: FunctionComponent<LegendProps> = ({\n    children,\n    className,\n    hidden,\n    testId,\n    ...rest\n}) => (\n    <legend\n        {...rest}\n        className={classNames(\n            className || 'form-legend',\n            { 'is-srOnly': hidden },\n            { 'optimizedCheckout-headingSecondary': !hidden },\n        )}\n        data-test={testId}\n    >\n        {children}\n    </legend>\n);\n\nexport default Legend;\n","import React, {\n    Component,\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactNode,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nexport interface ModalTriggerState {\n    isOpen: boolean;\n}\n\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\n    state = {\n        isOpen: false,\n    };\n\n    private canHandleEvent = false;\n\n    componentDidMount(): void {\n        this.canHandleEvent = true;\n    }\n\n    componentWillUnmount(): void {\n        this.canHandleEvent = false;\n    }\n\n    render() {\n        const { children, modal } = this.props;\n        const { isOpen } = this.state;\n\n        return (\n            <>\n                {children({\n                    onClick: this.handleOpen,\n                    onKeyPress: this.handleKeyOpen,\n                })}\n\n                {modal({\n                    isOpen,\n                    onRequestClose: this.handleClose,\n                })}\n            </>\n        );\n    }\n\n    private handleOpen: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    private handleClose: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: false,\n        });\n    };\n\n    private handleKeyOpen: (keyboardEvent: KeyboardEvent<HTMLElement>) => void = (\n        keyboardEvent,\n    ) => {\n        if (keyboardEvent.key === 'Enter') {\n            this.handleOpen();\n        }\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconPaypal: FunctionComponent = () => (\n    <svg height=\"300\" viewBox=\"0 0 255 300\" width=\"255\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M228.03 77.2c3.6-23.02-.03-38.7-12.48-52.89C201.83 8.7 177.07 2 145.4 2H53.4c-6.47 0-11.99 4.7-12.99 11.11L2.1 256.03a7.9 7.9 0 0 0 7.8 9.14h56.78c79.33-53.38 148.45-81.4 161.35-187.97z\"\n            fill=\"#253B80\"\n        />\n        <path\n            d=\"M228.02 77.2C124 73 95 98 80.5 177.52l-13.82 87.65-3.91 24.85a6.9 6.9 0 0 0 6.82 7.98h47.86c5.67 0 10.48-4.12 11.37-9.71l.48-2.43 9-57.2.59-3.15c.88-5.6 5.7-9.73 11.37-9.73h7.16c46.38 0 82.68-18.83 93.29-73.33 4.43-22.76 2.14-41.77-9.6-55.14a45.77 45.77 0 0 0-13.1-10.1z\"\n            fill=\"#179BD7\"\n        />\n        <path\n            d=\"M215.33 72.14c-3.88-1.12-7.82-2-11.8-2.62a149.83 149.83 0 0 0-23.79-1.73h-72.1a11.49 11.49 0 0 0-11.36 9.73l-15.34 97.16-.44 2.84a13.1 13.1 0 0 1 12.95-11.1h27c53 0 94.5-21.53 106.62-83.82.37-1.85.67-3.64.95-5.4a64.66 64.66 0 0 0-9.98-4.2c-.9-.3-1.8-.59-2.71-.86z\"\n            fill=\"#222D65\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconPaypal);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconAch: FunctionComponent = () => (\n    <svg viewBox=\"25 0 50 48\" xmlSpace=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title id=\"iconAchTitle\">ACH</title>\n        <path\n            d=\"M30 9.5h40c1.9 0 3.5 1.6 3.5 3.5v22c0 1.9-1.6 3.5-3.5 3.5H30c-1.9 0-3.5-1.6-3.5-3.5V13c0-1.9 1.6-3.5 3.5-3.5z\"\n            fill=\"#1524d9\"\n        />\n        <path\n            d=\"m45.2 27.5-.6-1.4h-2.7l-.5 1.4h-1.8l3-7.1h1.7l2.8 7.1h-1.9zm-1.9-5.1-.9 2.4h1.8l-.9-2.4zm9.1 5c-.5.2-1 .3-1.6.3-.5 0-1-.1-1.5-.3-.9-.3-1.6-1-2-1.9-.4-1-.4-2 0-3 .2-.4.5-.8.8-1.2.4-.3.8-.6 1.2-.7 1-.4 2-.4 3 0 .4.2.9.4 1.2.8l-1.2 1.2c-.2-.2-.4-.4-.6-.5-.3-.1-.5-.2-.8-.2-.3 0-.6 0-.8.2-.2.1-.5.3-.6.5-.2.2-.3.4-.4.7-.1.3-.2.6-.1.9 0 .3 0 .6.1.9.1.3.2.5.4.7.2.2.4.3.6.4.3.1.5.2.8.2.3 0 .6-.1.9-.2.2-.1.5-.3.6-.5l1.2 1.1c-.3.1-.7.4-1.2.6zm6.4.1v-2.9H56v2.9h-1.7v-7.1H56v2.7h2.8v-2.7h1.7v7l-1.7.1z\"\n            fill=\"#fff\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconAch);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSepa: FunctionComponent = () => (\n    <svg fill=\"none\" height=\"24\" viewBox=\"0 0 35 24\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect fill=\"#9A1B27\" height=\"23\" rx=\"3.5\" stroke=\"#D9D9D9\" width=\"34\" x=\"0.5\" y=\"0.5\" />\n        <path\n            d=\"M10.758 11.652a5.095 5.095 0 00-1.29-.28 2.764 2.764 0 01-.747-.15.272.272 0 01-.165-.258.316.316 0 01.13-.252.703.703 0 01.43-.107.875.875 0 01.502.143.574.574 0 01.215.316l1.65-.165a2.03 2.03 0 00-.43-.71 1.564 1.564 0 00-.646-.388c-.394-.098-.8-.139-1.205-.122a3.809 3.809 0 00-1.227.158c-.28.092-.529.26-.717.488a1.205 1.205 0 00-.266.782c0 .265.089.523.252.732.15.207.357.366.595.459.412.133.834.231 1.262.294.255.035.505.098.746.186a.323.323 0 01.163.45.336.336 0 01-.112.124.861.861 0 01-.546.144.89.89 0 01-.516-.13.86.86 0 01-.294-.444l-1.736.165c.085.413.33.777.681 1.011a3.3 3.3 0 001.78.359c.473.02.946-.052 1.391-.215.307-.12.57-.33.753-.603.152-.227.234-.494.237-.767 0-.258-.08-.508-.23-.718a1.435 1.435 0 00-.645-.502h-.014zm10.638 1.241a.632.632 0 01-.509.258.724.724 0 01-.574-.265 1.205 1.205 0 01-.23-.803c-.03-.304.047-.608.216-.861a.703.703 0 01.856-.186c.09.046.167.112.227.193.161.238.237.524.215.81.03.302-.04.605-.2.861m.035-3.228c-.295 0-.586.074-.846.215-.241.15-.45.345-.617.574v-.688h-1.636v6.549h1.765v-2.417c.166.175.366.314.588.408.235.095.486.14.74.137a1.778 1.778 0 001.376-.603 2.51 2.51 0 00.538-1.736 2.912 2.912 0 00-.502-1.736 1.628 1.628 0 00-1.406-.703zm5.854 2.79c.006.184-.03.366-.108.531a.86.86 0 01-.359.352c-.163.094-.349.144-.538.143a.603.603 0 01-.43-.136.453.453 0 01.007-.66 1.73 1.73 0 01.674-.28c.259-.067.51-.143.754-.23v.28zm1.743 1.421a2.45 2.45 0 01-.043-.502v-2.016a1.995 1.995 0 00-.13-.681 1.292 1.292 0 00-.35-.545 1.614 1.614 0 00-.79-.373 7.187 7.187 0 00-1.262-.087 5.308 5.308 0 00-.904.072 2.13 2.13 0 00-.66.208c-.203.103-.38.25-.517.43-.136.212-.229.449-.272.696l1.671.18a.753.753 0 01.266-.41c.198-.104.421-.15.645-.135a.667.667 0 01.466.129c.104.126.153.289.137.452a5.901 5.901 0 01-.617.215c-.196.048-.622.139-1.277.272-.415.05-.806.225-1.12.502-.207.235-.318.54-.307.854a1.205 1.205 0 00.423.933c.35.275.79.41 1.233.38.368.008.733-.055 1.077-.187a2.26 2.26 0 00.681-.473 2 2 0 00.064.287c.035.094.078.186.13.272h1.635a2.275 2.275 0 01-.18-.473zM11.892 7.979v8.178l5.99 1.062V6.925l-5.99 1.054zm9.024 7.948a.316.316 0 00.064.216.18.18 0 00.137.071.172.172 0 00.143-.071c.04-.06.057-.13.05-.201a.345.345 0 00-.057-.216.18.18 0 00-.22-.055.172.172 0 00-.06.048.337.337 0 00-.057.216v-.008zm.394.366V16.2a.23.23 0 01-.208.115.314.314 0 01-.273-.186.465.465 0 01-.035-.202c0-.066.012-.132.036-.193a.286.286 0 01.385-.161.244.244 0 01.088.075v-.359h.122v1.004h-.115z\"\n            fill=\"#FEFEFE\"\n        />\n        <mask\n            height=\"33\"\n            id=\"mask0_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask0_1854_5393)\">\n            <path\n                d=\"M21.755 16.3h.15v-.739h-.143l-.007.74zm0-.875h.15v-.143h-.143l-.007.143z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask1_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask1_1854_5393)\">\n            <path\n                d=\"M22.207 16.3v-.739h.115v.115a.3.3 0 01.072-.107.136.136 0 01.086-.022.245.245 0 01.122.043l-.044.115a.179.179 0 00-.086-.029.114.114 0 00-.071.022.136.136 0 00-.05.072.488.488 0 00-.022.143v.38l-.122.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask2_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask2_1854_5393)\">\n            <path\n                d=\"M22.91 15.863h.409a.25.25 0 00-.05-.144.187.187 0 00-.144-.071.195.195 0 00-.143.057.23.23 0 00-.072.158zm.409.193l.122.022a.308.308 0 01-.108.172.38.38 0 01-.466-.036.387.387 0 01-.093-.28.402.402 0 01.1-.286.323.323 0 01.244-.1.31.31 0 01.237.1c.068.08.101.182.093.287v.028h-.545c.002.066.028.13.072.18a.2.2 0 00.143.071.186.186 0 00.122-.043c.035-.03.06-.07.072-.115\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask3_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask3_1854_5393)\">\n            <path\n                d=\"M24.216 16.028l.122.014a.316.316 0 01-.1.201.294.294 0 01-.202.072.315.315 0 01-.244-.1.401.401 0 01-.093-.288.51.51 0 01.043-.2.272.272 0 01.115-.137.36.36 0 01.18-.043.301.301 0 01.193.058.28.28 0 01.093.172l-.122.021a.2.2 0 00-.057-.114.158.158 0 00-.108-.036.195.195 0 00-.143.071.323.323 0 00-.065.216.33.33 0 00.058.215.178.178 0 00.143.057.172.172 0 00.122-.043.223.223 0 00.065-.143\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask4_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask4_1854_5393)\">\n            <path\n                d=\"M24.854 16.186l.014.107a.468.468 0 01-.093.015.215.215 0 01-.1-.022.122.122 0 01-.058-.057.454.454 0 01-.014-.144v-.43h-.086v-.093h.086v-.18l.122-.072v.252h.129v.1h-.13v.43c0 .022.002.044.008.065a.05.05 0 00.021.021.086.086 0 00.043.015.41.41 0 00.058-.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask5_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask5_1854_5393)\">\n            <path\n                d=\"M25.657 15.927a.316.316 0 00.058.216.18.18 0 00.143.071.172.172 0 00.137-.071c.04-.06.057-.13.05-.201a.345.345 0 00-.058-.216.18.18 0 00-.219-.055.173.173 0 00-.06.048.338.338 0 00-.05.216v-.008zm.388.366V16.2a.23.23 0 01-.201.115.286.286 0 01-.273-.187.524.524 0 01-.007-.394.287.287 0 01.386-.161.244.244 0 01.088.075v-.36h.122v1.005h-.115z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask6_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask6_1854_5393)\">\n            <path\n                d=\"M26.59 15.863h.402a.251.251 0 00-.043-.144.186.186 0 00-.15-.071.195.195 0 00-.144.057.23.23 0 00-.072.158m.409.194l.129.021a.308.308 0 01-.115.172.38.38 0 01-.459-.036.388.388 0 01-.093-.28.401.401 0 01.093-.286.323.323 0 01.244-.1.307.307 0 01.244.1c.068.08.101.182.093.287v.028h-.545c.003.066.028.13.072.18a.2.2 0 00.143.071.186.186 0 00.122-.043c.035-.03.06-.07.072-.114z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask7_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask7_1854_5393)\">\n            <path\n                d=\"M27.53 15.927a.38.38 0 00.035.187.18.18 0 00.295.029.323.323 0 00.064-.216.33.33 0 00-.057-.215.173.173 0 00-.144-.064.18.18 0 00-.136.071.31.31 0 00-.057.208zm0 .366h-.115V15.29h.122v.359a.244.244 0 01.2-.1c.045 0 .09.009.13.028.038.015.073.04.1.072a.494.494 0 01.079.265.415.415 0 01-.093.294.287.287 0 01-.215.108.229.229 0 01-.208-.108v.086z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask8_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask8_1854_5393)\">\n            <path\n                d=\"M28.333 16.3h.15v-.739h-.143l-.007.74zm0-.875h.15v-.143h-.143l-.007.143z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask9_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask9_1854_5393)\">\n            <path\n                d=\"M29.058 16.186l.021.107a.467.467 0 01-.093.015.215.215 0 01-.108-.022.122.122 0 01-.05-.057.45.45 0 01-.014-.144v-.43h-.094v-.093h.094v-.18l.122-.072v.252h.122v.1h-.122v.43a.219.219 0 000 .065.05.05 0 00.028.021.086.086 0 00.043.015.406.406 0 00.05-.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask10_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask10_1854_5393)\">\n            <path\n                d=\"M15.751 11.666a1.177 1.177 0 00-.272-.731.855.855 0 00-1.248.114 1.22 1.22 0 00-.201.617h1.721zm1.772.84H14.03c.01.225.087.442.222.624a.826.826 0 00.66.301.989.989 0 00.488-.13c.12-.075.224-.172.308-.286l1.722.158c-.22.41-.55.752-.954.982-.502.227-1.05.33-1.6.302a3.265 3.265 0 01-1.427-.258 2.095 2.095 0 01-.861-.811 2.461 2.461 0 01-.337-1.313 2.31 2.31 0 01.681-1.736 2.597 2.597 0 011.894-.66 3.35 3.35 0 011.542.295 2 2 0 01.86.86c.216.46.317.964.295 1.47v.202z\"\n                fill=\"#9A1B27\"\n            />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconSepa);\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Placement } from '@popperjs/core';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n    children?: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        this.getRootElement()?.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\n                            {children}\n                        </div>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={[\n                        { name: 'hide', enabled: false },\n                        { name: 'flip', enabled: false },\n                        { name: 'preventOverflow', enabled: false },\n                    ]}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        !shouldShow ? null : (\n                            <div\n                                className=\"dropdownMenu\"\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    width: '100%',\n                                    zIndex: 1,\n                                }}\n                            >\n                                {dropdown}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            this.getRootElement()?.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\n        });\n    };\n\n    private getRootElement() {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }\n}\n","import { AchInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAchInstrument(\n    instrument: PaymentInstrument,\n): instrument is AchInstrument {\n    return (\n        instrument.type === 'bank' && (instrument.method === 'ecp' || instrument.method === 'ach')\n    );\n}\n","import { BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isSepaInstrument(instrument?: PaymentInstrument): instrument is BankInstrument {\n    return (\n        instrument?.type === 'bank' &&\n        (instrument?.method === 'sepa' || instrument?.method === 'sepa_direct_debit')\n    );\n}\n","import {\n    AccountInstrument,\n    AchInstrument,\n    BankInstrument,\n    PayPalInstrument,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    DropdownTrigger,\n    IconAch,\n    IconNewAccount,\n    IconPaypal,\n    IconSepa,\n    IconSize,\n} from '@bigcommerce/checkout/ui';\n\nimport { isAchInstrument, isBankAccountInstrument, isSepaInstrument } from '../../guards';\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId || ''}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AchInstrumentMenuItemProps {\n    className?: string;\n    instrument: AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AchInstrumentMenuItem: FunctionComponent<AchInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                <IconAch size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-bank\">\n                    <div>\n                        <TranslatedString\n                            data={{ accountNumber: instrument.accountNumber }}\n                            id=\"payment.instrument_account_number_ending\"\n                        />\n                    </div>\n                    <div>\n                        <TranslatedString id=\"payment.instrument_manage_table_header_routing_number_text\" />\n                        : {instrument.issuer}\n                    </div>\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst SepaInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                <IconSepa size={IconSize.Medium} />\n                <div className=\"instrumentSelect-bank\">\n                    <div className=\"instrumentSelect-card\">\n                        <TranslatedString id=\"payment.sepa_account_number\" />:{' '}\n                        {instrument.accountNumber}\n                    </div>\n                </div>\n            </div>\n        </button>\n    );\n};\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    if (isAchInstrument(instrument)) {\n        return (\n            <AchInstrumentMenuItem\n                instrument={instrument}\n                onClick={handleClick}\n                testId=\"instrument-select-option\"\n            />\n        );\n    }\n\n    if (isSepaInstrument(instrument)) {\n        return (\n            <SepaInstrumentMenuItem\n                instrument={instrument}\n                onClick={handleClick}\n                testId=\"instrument-select-option\"\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    if (isSepaInstrument(instrument)) {\n        return (\n            <SepaInstrumentMenuItem\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                instrument={instrument}\n                onClick={onClick}\n                testId={testId}\n            />\n        );\n    }\n\n    if (isAchInstrument(instrument)) {\n        return (\n            <AchInstrumentMenuItem\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                instrument={instrument}\n                onClick={onClick}\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\" data-test=\"account-instrument-select\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        void form.setFieldValue(field.name, instrumentId);\n    }\n}\n\nexport default AccountInstrumentSelect;\n","import { CardInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isCardInstrument(instrument?: PaymentInstrument): instrument is CardInstrument {\n    return instrument !== undefined && instrument.type === 'card';\n}\n\nexport default function assertIsCardInstrument(\n    instrument?: PaymentInstrument,\n): asserts instrument is CardInstrument {\n    if (!isCardInstrument(instrument)) {\n        throw new Error('Is not a card instrument.');\n    }\n}\n","import { AccountInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is AccountInstrument {\n    return instrument.type === 'account';\n}\n","import { AccountInstrument, BankInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconPaypal, IconSize, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isAchInstrument, isBankAccountInstrument, isSepaInstrument } from '../../guards';\n\ninterface ManageInstrumentsRowProps {\n    instrument: AccountInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-accountExternalId\">\n                {isBankAccountInstrument(instrument) || isAchInstrument(instrument) ? (\n                    <span className=\"instrumentModal-instrumentAccountNumber\">\n                        {isSepaInstrument(instrument) ? (\n                            <TranslatedString id=\"payment.sepa_account_number\" />\n                        ) : (\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        )}\n                        {` ${instrument.accountNumber}`}\n                    </span>\n                ) : (\n                    <>\n                        <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n                        <span className=\"instrumentModal-instrumentAccountExternalId\">\n                            {instrument.externalId}\n                        </span>\n                    </>\n                )}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageAccountInstrumentsTableProps {\n    instruments: Array<AccountInstrument | BankInstrument>;\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsTable: FunctionComponent<ManageAccountInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ManageInstrumentsTable);\n","import { AchInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconAch, IconSize, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\ninterface ManageInstrumentsRowProps {\n    instrument: AchInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-bankType\">\n                <IconAch size={IconSize.Medium} />\n            </td>\n            <td data-test=\"manage-instrument-accountNumber\">{instrument.accountNumber}</td>\n            <td data-test=\"manage-instrument-issuer\">{instrument.issuer}</td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageAchInstrumentsTableProps {\n    instruments: AchInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageAchInstrumentsTable: FunctionComponent<ManageAchInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-ach-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_routing_number_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default ManageAchInstrumentsTable;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n\ninterface ManageInstrumentsRowProps {\n    instrument: CardInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-cardType\">\n                <CreditCardIcon cardType={cardType} />\n\n                {cardInfo && (\n                    <span className=\"instrumentModal-instrumentCardType\">{cardInfo.niceType}</span>\n                )}\n            </td>\n            <td data-test=\"manage-instrument-last4\">{instrument.last4}</td>\n            <td\n                className={classNames({ 'instrumentModal-instrumentExpiry--expired': isExpired })}\n                data-test=\"manage-instrument-expiry\"\n            >\n                {`${instrument.expiryMonth}/${instrument.expiryYear}`}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageCardInstrumentsTableProps {\n    instruments: CardInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageCardInstrumentsTable: FunctionComponent<ManageCardInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-card-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_expiry_date_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ManageCardInstrumentsTable);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Alert, AlertType } from '@bigcommerce/checkout/ui';\n\nexport interface ManageInstrumentsAlertProps {\n    error: any; // TODO: Fix typing\n}\n\nconst ManageInstrumentsAlert: FunctionComponent<ManageInstrumentsAlertProps> = ({ error }) => {\n    const { status } = error;\n\n    if (status === 401) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_auth_error\" />\n            </Alert>\n        );\n    }\n\n    if (status >= 400 && status < 500) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_client_error\" />\n            </Alert>\n        );\n    }\n\n    return (\n        <Alert type={AlertType.Error}>\n            <TranslatedString id=\"payment.instrument_manage_delete_server_error\" />\n        </Alert>\n    );\n};\n\nexport default memo(ManageInstrumentsAlert);\n","import { PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { Button, ButtonSize, ButtonVariant, Modal, ModalHeader } from '@bigcommerce/checkout/ui';\n\nimport {\n    isAccountInstrument,\n    isAchInstrument,\n    isBankAccountInstrument,\n    isCardInstrument,\n} from '../../guards';\nimport { ManageAccountInstrumentsTable } from '../ManageAccountInstrumentsTable';\nimport { ManageAchInstrumentsTable } from '../ManageAchInstrumentsTable';\nimport { ManageCardInstrumentsTable } from '../ManageCardInstrumentsTable';\nimport { ManageInstrumentsAlert } from '../ManageInstrumentsAlert';\n\nexport interface ManageInstrumentsModalProps {\n    isOpen: boolean;\n    instruments: PaymentInstrument[];\n    onAfterOpen?(): void;\n    onDeleteInstrument?(instrumentId: string): void;\n    onDeleteInstrumentError?(error: Error): void;\n    onRequestClose?(): void;\n}\n\nexport interface ManageInstrumentsModalState {\n    isConfirmingDelete: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass ManageInstrumentsModal extends Component<\n    ManageInstrumentsModalProps,\n    ManageInstrumentsModalState\n> {\n    static contextType = CheckoutContext;\n    declare context: React.ContextType<typeof CheckoutContext>;\n\n    state: ManageInstrumentsModalState = {\n        isConfirmingDelete: false,\n    };\n\n    render(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                errors: { getDeleteInstrumentError },\n            },\n        } = this.context;\n\n        const deleteInstrumentError = getDeleteInstrumentError();\n\n        const { isOpen, onRequestClose } = this.props;\n\n        return (\n            <Modal\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                footer={this.renderFooter()}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"payment.instrument_manage_modal_title_text\" />\n                    </ModalHeader>\n                }\n                isOpen={isOpen}\n                onAfterOpen={this.handleAfterOpen}\n                onRequestClose={onRequestClose}\n            >\n                {deleteInstrumentError && <ManageInstrumentsAlert error={deleteInstrumentError} />}\n\n                {this.renderContent()}\n            </Modal>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                statuses: { isDeletingInstrument },\n            },\n        } = this.context;\n        const { instruments } = this.props;\n\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <p>\n                    <TranslatedString id=\"payment.instrument_manage_modal_confirmation_label\" />\n                </p>\n            );\n        }\n\n        const cardInstruments = instruments.filter(isCardInstrument);\n        const bankInstruments = instruments.filter(isBankAccountInstrument);\n        const accountInstruments = instruments.filter(isAccountInstrument);\n        const achInstrument = instruments.filter(isAchInstrument);\n\n        if (achInstrument.length) {\n            return (\n                <ManageAchInstrumentsTable\n                    instruments={achInstrument}\n                    isDeletingInstrument={isDeletingInstrument()}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        const bankAndAccountInstruments = [...bankInstruments, ...accountInstruments];\n\n        if (bankAndAccountInstruments.length) {\n            return (\n                <ManageAccountInstrumentsTable\n                    instruments={bankAndAccountInstruments}\n                    isDeletingInstrument={isDeletingInstrument()}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        return (\n            <ManageCardInstrumentsTable\n                instruments={cardInstruments}\n                isDeletingInstrument={isDeletingInstrument()}\n                onDeleteInstrument={this.handleDeleteInstrument}\n            />\n        );\n    }\n\n    private renderFooter(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                statuses: { isDeletingInstrument, isLoadingInstruments },\n            },\n        } = this.context;\n\n        const { onRequestClose } = this.props;\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <>\n                    <Button\n                        onClick={this.handleCancel}\n                        size={ButtonSize.Small}\n                        testId=\"manage-instrument-cancel-button\"\n                    >\n                        <TranslatedString id=\"common.cancel_action\" />\n                    </Button>\n\n                    <Button\n                        disabled={isDeletingInstrument() || isLoadingInstruments()}\n                        onClick={this.handleConfirmDelete}\n                        size={ButtonSize.Small}\n                        testId=\"manage-instrument-confirm-button\"\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"payment.instrument_manage_modal_confirmation_action\" />\n                    </Button>\n                </>\n            );\n        }\n\n        return (\n            <Button\n                onClick={onRequestClose}\n                size={ButtonSize.Small}\n                testId=\"manage-instrument-close-button\"\n            >\n                <TranslatedString id=\"common.close_action\" />\n            </Button>\n        );\n    }\n\n    private handleAfterOpen: () => void = () => {\n        const { onAfterOpen } = this.props;\n\n        this.setState(\n            {\n                isConfirmingDelete: false,\n            },\n            onAfterOpen,\n        );\n    };\n\n    private handleCancel: () => void = () => {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                errors: { getDeleteInstrumentError },\n            },\n            checkoutService: { clearError },\n        } = this.context;\n\n        const deleteInstrumentError = getDeleteInstrumentError();\n\n        if (deleteInstrumentError) {\n            void clearError(deleteInstrumentError);\n        }\n\n        this.setState({\n            isConfirmingDelete: false,\n        });\n    };\n\n    private handleConfirmDelete: () => void = async () => {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutService: { deleteInstrument },\n        } = this.context;\n\n        const {\n            onDeleteInstrument = noop,\n            onDeleteInstrumentError = noop,\n            onRequestClose = noop,\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (!selectedInstrumentId) {\n            return;\n        }\n\n        try {\n            await deleteInstrument(selectedInstrumentId);\n            onDeleteInstrument(selectedInstrumentId);\n            onRequestClose();\n        } catch (error) {\n            onDeleteInstrumentError(error);\n        }\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isConfirmingDelete: true,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default ManageInstrumentsModal;\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { AccountInstrumentSelect } from '../AccountInstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n            testId=\"account-instrument-fieldset\"\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\" data-test=\"instrument-select-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nclass InstrumentSelect extends PureComponent<InstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<InstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            field,\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate = false,\n        } = this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <InstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideExpiryDate}\n                        />\n                    }\n                >\n                    <InstrumentSelectButton\n                        instrument={selectedInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" {...field} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        void form.setFieldValue(field.name, instrumentId);\n    }\n}\n\nexport default InstrumentSelect;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { BasicFormField } from '../BasicFormField';\nimport { CheckboxInput } from '../CheckboxInput';\nimport { FormFieldError } from '../FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <CheckboxInput\n                    {...field}\n                    checked={!!field.value}\n                    disabled={disabled}\n                    id={id || field.name}\n                    label={labelContent}\n                />\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n            </>\n        ),\n        [disabled, id, labelContent, name],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(CheckboxFormField);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\ninterface InstrumentStorageFieldProps {\n    isAccountInstrument: boolean;\n}\n\nconst InstrumentStorageField: FunctionComponent<InstrumentStorageFieldProps> = ({\n    isAccountInstrument,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_payment_method_label'\n        : 'payment.instrument_save_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--saveInstrument\"\n            labelContent={labelContent}\n            name=\"shouldSaveInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStorageField);\n","import React, { FunctionComponent, memo, useEffect, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\ninterface InstrumentStoreAsDefaultFieldProps {\n    isAccountInstrument: boolean;\n    disabled?: boolean;\n}\n\nconst InstrumentStoreAsDefaultField: FunctionComponent<InstrumentStoreAsDefaultFieldProps> = ({\n    isAccountInstrument,\n    disabled = false,\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_as_default_payment_method_label'\n        : 'payment.instrument_save_as_default_payment_method_label';\n\n    useEffect(() => {\n        if (disabled) {\n            paymentForm.setFieldValue('shouldSetAsDefaultInstrument', false);\n        }\n        // Ignoring paymentForm dependency as it causes sequential re-renders when included in array\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disabled]);\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--setAsDefaultInstrument\"\n            disabled={disabled}\n            labelContent={labelContent}\n            name=\"shouldSetAsDefaultInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStoreAsDefaultField);\n","import { PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentFormService,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset } from '@bigcommerce/checkout/ui';\n\nimport { InstrumentStorageField } from '../InstrumentStorageField';\nimport { InstrumentStoreAsDefaultField } from '../InstrumentStoreAsDefaultField';\n\ninterface StoreInstrumentFieldsetProps {\n    isAccountInstrument?: boolean;\n    instrumentId?: string;\n    instruments: PaymentInstrument[];\n}\n\ninterface WithStorageSettings {\n    showSave: boolean;\n    showSetAsDefault: boolean;\n    setAsDefaultEnabled: boolean;\n}\n\nconst useProps = (\n    props: StoreInstrumentFieldsetProps,\n    paymentForm: PaymentFormService,\n): WithStorageSettings => {\n    const saveIsChecked = Boolean(paymentForm.getFieldValue<boolean>('shouldSaveInstrument'));\n\n    const { instrumentId, instruments } = props;\n\n    const addingNewInstrument = !instrumentId;\n    const hasAnyOtherInstruments = !!instruments && instruments.length > 0;\n    const instrument =\n        instruments && instruments.find(({ bigpayToken }) => bigpayToken === instrumentId);\n\n    return {\n        ...props,\n        showSave: addingNewInstrument,\n        showSetAsDefault:\n            (addingNewInstrument && hasAnyOtherInstruments) ||\n            Boolean(instrument && !instrument.defaultInstrument),\n        setAsDefaultEnabled: !addingNewInstrument || saveIsChecked,\n    };\n};\n\nconst StoreInstrumentFieldset: FunctionComponent<StoreInstrumentFieldsetProps> = ({\n    isAccountInstrument = false,\n    ...props\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n\n    const { showSave, showSetAsDefault, setAsDefaultEnabled } = useProps(props, paymentForm);\n\n    return (\n        <Fieldset>\n            {showSave && <InstrumentStorageField isAccountInstrument={isAccountInstrument} />}\n\n            {showSetAsDefault && (\n                <InstrumentStoreAsDefaultField\n                    disabled={!setAsDefaultEnabled}\n                    isAccountInstrument={isAccountInstrument}\n                />\n            )}\n        </Fieldset>\n    );\n};\n\nexport default StoreInstrumentFieldset;\n","import {\n    AccountInstrument,\n    CardInstrument,\n    CheckoutSelectors,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    Instrument,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n","import { LineItemMap, PaymentInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { Instrument, LineItemMap, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentMethodProps, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport type AdyenV2FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    showAdditionalActionContent: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV2Form: FunctionComponent<AdyenV2FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    showAdditionalActionContent,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    onUnhandledError,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    ...rest\n}) => {\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired },\n        },\n    } = useCheckout();\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={showAdditionalActionContent}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!showAdditionalActionContent && (\n                <div id={additionalActionContainerId} style={{ display: 'none' }} />\n            )}\n        </>\n    );\n};\n\nexport default AdyenV2Form;\n","import {\n    AdyenCreditCardComponentOptions,\n    AdyenIdealComponentOptions,\n    AdyenValidationState,\n    CardInstrument,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV2CardValidation from './AdyenV2CardValidation';\nimport AdyenV2Form from './AdyenV2Form';\n\nexport interface AdyenOptions {\n    scheme: AdyenCreditCardComponentOptions;\n    bcmc: AdyenCreditCardComponentOptions;\n    ideal: AdyenIdealComponentOptions;\n}\n\nexport enum AdyenV2PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    ideal = 'ideal',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n    const [showAdditionalActionContent, setShowAdditionalActionContent] = useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const threeDS2ContainerId = `adyen-${method.id}-additional-action-component-field`;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const component = method.id as AdyenV2PaymentMethodType;\n    const shouldHideInstrumentExpiryDate = component === AdyenV2PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShowAdditionalActionContent(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setShowAdditionalActionContent(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setShowAdditionalActionContent(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n            const adyenOptions: AdyenOptions = {\n                [AdyenV2PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n                [AdyenV2PaymentMethodType.bcmc]: {\n                    hasHolderName: false,\n                },\n                [AdyenV2PaymentMethodType.ideal]: {\n                    showImage: true,\n                },\n            };\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv2: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    threeDS2ContainerId,\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            threeDS2ContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV2CardValidation\n                cardValidationState={cardValidationState}\n                language={language}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV2Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                language={language}\n                                method={method}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                showAdditionalActionContent={showAdditionalActionContent}\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV2PaymentMethod,\n    [{ gateway: 'adyenv2' }],\n);\n","import { AdyenValidationState, CardInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV3CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV3CardValidation: FunctionComponent<AdyenV3CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            <TranslatedString id=\"payment.credit_card_number_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV3CardValidation;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\nimport { Omit } from 'utility-types';\n\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport type AdyenV3FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    shouldRenderAdditionalActionContentModal: boolean;\n    isModalVisible: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV3Form: FunctionComponent<AdyenV3FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    shouldRenderAdditionalActionContentModal,\n    isModalVisible,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    checkoutState,\n    checkoutService,\n    onUnhandledError,\n    ...rest\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={shouldRenderAdditionalActionContentModal}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n                style={\n                    !isModalVisible && method.id === 'scheme'\n                        ? {\n                              overlay: {\n                                  display: 'none',\n                              },\n                          }\n                        : {}\n                }\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!shouldRenderAdditionalActionContentModal && <div id={additionalActionContainerId} />}\n        </>\n    );\n};\n\nexport default AdyenV3Form;\n","import {\n    AdyenCreditCardComponentOptions,\n    AdyenValidationState,\n    CardInstrument,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV3CardValidation from './AdyenV3CardValidation';\nimport AdyenV3Form from './AdyenV3Form';\n\nexport interface AdyenOptions {\n    [key: string]: AdyenCreditCardComponentOptions;\n}\n\nexport enum AdyenV3PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    onUnhandledError,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n\n    const [shouldRenderAdditionalActionContentModal, setShouldRenderAdditionalActionContentModal] =\n        useState<boolean>(false);\n    const [isAdditionalActionContentModalVisible, setIsAdditionalActionContentModalVisible] =\n        useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const component = method.id;\n    const shouldHideInstrumentExpiryDate = component === AdyenV3PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShouldRenderAdditionalActionContentModal(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onActionHandled = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(true);\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            const adyenOptions: AdyenOptions = {\n                [AdyenV3PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv3: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                        onActionHandled,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            onActionHandled,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV3CardValidation\n                cardValidationState={cardValidationState}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV3Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                hideContentWhenSignedOut\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                isModalVisible={isAdditionalActionContentModalVisible}\n                                language={language}\n                                method={method}\n                                onUnhandledError={onUnhandledError}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                shouldRenderAdditionalActionContentModal={\n                                    shouldRenderAdditionalActionContentModal\n                                }\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV3PaymentMethod,\n    [{ gateway: 'adyenv3' }],\n);\n","import { Customer, PaymentMethod, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import {\n    AccountInstrument,\n    CheckoutSelectors,\n    CheckoutService,\n    LanguageService,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentMethodProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface HostedPaymentMethodDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentMethodProps,\n): HostedPaymentMethodDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nclass HostedPaymentMethodComponent extends Component<\n    HostedPaymentMethodProps,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        const { isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp, loadInstruments } =\n            getHostedPaymentMethodDerivedProps(this.props);\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { description, isInitializing = false } = this.props;\n\n        const {\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = getHostedPaymentMethodDerivedProps(this.props);\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            instruments={instruments}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n\n        const { instruments } = getHostedPaymentMethodDerivedProps(this.props);\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = getHostedPaymentMethodDerivedProps(this.props);\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nexport default HostedPaymentMethodComponent;\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AffirmPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const description = useMemo(() => <TranslatedString id=\"payment.affirm_body_text\" />, []);\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            description={description}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AffirmPaymentMethod,\n    [{ id: 'affirm' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AfterpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AfterpayPaymentMethod,\n    [{ gateway: 'afterpay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AmazonPayV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    method: {\n        initializationData: { paymentDescriptor, paymentToken },\n    },\n    ...rest\n}) => {\n    const initializeAmazonPayV2Payment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                amazonpay: {\n                    editButtonId: 'editButtonId',\n                },\n            }),\n        [checkoutService],\n    );\n\n    const reload = useCallback(() => window.location.reload(), []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...rest}\n            buttonId=\"editButtonId\"\n            containerId=\"paymentWidget\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            hideWidget\n            initializePayment={initializeAmazonPayV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignInRequired={false}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            onSignOut={reload}\n            paymentDescriptor={paymentDescriptor}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldShow={!!paymentToken}\n            shouldShowDescriptor={!!paymentToken}\n            shouldShowEditButton={!!paymentToken}\n            signOut={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AmazonPayV2PaymentMethod,\n    [{ id: 'amazonpay' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ApplePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    language,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    applepay: {\n                        shippingLabel: language.translate('cart.shipping_text'),\n                        subtotalLabel: language.translate('cart.subtotal_text'),\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, language, method, onUnhandledError]);\n\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ApplePaymentMethod,\n    [{ id: 'applepay' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BarclaycardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BarclaycardPaymentMethod,\n    [{ gateway: 'barclaycard' }],\n);\n","import {\n    AccountInstrument,\n    HostedInstrument,\n    BigCommercePaymentsPaymentInitializeOptions,\n    BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    BigCommercePaymentsCreditCardsPaymentInitializeOptions,\n    BigCommercePaymentsVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype BigCommercePaymentsProvidersPaymentInitializeOptions =\n    BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions &\n        BigCommercePaymentsCreditCardsPaymentInitializeOptions &\n        BigCommercePaymentsPaymentInitializeOptions &\n        BigCommercePaymentsVenmoPaymentInitializeOptions;\n\ninterface BigCommercePaymentsPaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<BigCommercePaymentsProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst BigCommercePaymentsPaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & BigCommercePaymentsPaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default BigCommercePaymentsPaymentMethodComponent;\n","import { AccountInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBigCommercePaymentsInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBigCommercePaymentsInstrument;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\nimport useBigCommercePaymentsInstrument from '../hooks/useBigCommercePaymentsInstruments';\n\nconst BigCommercePaymentsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { ...isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = useBigCommercePaymentsInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    });\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <BigCommercePaymentsPaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"bigcommerce_payments\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </BigCommercePaymentsPaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPaymentMethod,\n    [{ id: 'bigcommerce_payments' }],\n);\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(method.id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"bigcommerce_payments_apms\"\n            {...props}\n        >\n            <div className={`widget widget--${method.id} payment-widget`} id={widgetContainerId} />\n        </BigCommercePaymentsPaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsAPMsPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconLock: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconLock);\n","import { number } from 'card-validator';\n\nimport unformatCreditCardNumber from '../unformatCreditCardNumber/unformatCreditCardNumber';\n\nexport default function formatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    const unformattedValue = unformatCreditCardNumber(value, separator);\n\n    return card.gaps\n        .filter((gapIndex) => unformattedValue.length > gapIndex)\n        .reduce(\n            (output, gapIndex, index) =>\n                [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(separator),\n            unformattedValue,\n        );\n}\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","import creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { max } from 'lodash';\nimport React, {\n    ChangeEventHandler,\n    createRef,\n    FunctionComponent,\n    memo,\n    PureComponent,\n    ReactNode,\n    RefObject,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInput } from '@bigcommerce/checkout/ui';\n\nimport formatCreditCardNumber from '../formatCreditCardNumber/formatCreditCardNumber';\n\nexport interface CreditCardNumberFieldProps {\n    name: string;\n}\n\nclass CreditCardNumberInput extends PureComponent<FieldProps<string>> {\n    private inputRef: RefObject<HTMLInputElement> = createRef();\n    private nextSelectionEnd = 0;\n\n    componentDidUpdate(): void {\n        if (this.inputRef.current && this.inputRef.current.selectionEnd !== this.nextSelectionEnd) {\n            this.inputRef.current.setSelectionRange(this.nextSelectionEnd, this.nextSelectionEnd);\n        }\n    }\n\n    render(): ReactNode {\n        const { field } = this.props;\n\n        return (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-number\"\n                    id={field.name}\n                    onChange={this.handleChange}\n                    ref={this.inputRef}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        );\n    }\n\n    private handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n        const separator = ' ';\n        const { value = '' } = event.target;\n        const { field, form } = this.props;\n        const { name, value: previousValue = '' } = field;\n        const selectionEnd = this.inputRef.current && this.inputRef.current.selectionEnd;\n\n        // Only allow digits and spaces\n        if (new RegExp(`[^\\\\d${separator}]`).test(value)) {\n            return form.setFieldValue(name, previousValue);\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n\n        const formattedValue = formatCreditCardNumber(\n            value.replace(new RegExp(separator, 'g'), '').slice(0, maxLength),\n            separator,\n        );\n\n        if (selectionEnd === value.length && value.length < formattedValue.length) {\n            this.nextSelectionEnd = formattedValue.length;\n        } else {\n            this.nextSelectionEnd = selectionEnd || 0;\n        }\n\n        return form.setFieldValue(name, formattedValue);\n    };\n}\n\nconst CreditCardNumberField: FunctionComponent<CreditCardNumberFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field, form, meta }: FieldProps<string>) => (\n            <CreditCardNumberInput field={field} form={form} meta={meta} />\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_number_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNumberField);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeVisa: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV visa, mc, disc</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <path d=\"M0 5h88v12H0z\" fill=\"#838383\" />\n            <path d=\"M3 23h82v10H3z\" fill=\"#FFF\" />\n            <path\n                d=\"M69.81 29.053c.015.297.13.502.343.616.11.058.233.088.37.088.258 0 .477-.107.66-.32.18-.215.31-.65.384-1.306-.12.19-.267.322-.444.4-.176.076-.366.114-.57.114-.412 0-.74-.13-.98-.386-.24-.257-.36-.588-.36-.993 0-.388.12-.73.357-1.025.237-.295.587-.443 1.05-.443.623 0 1.054.28 1.29.842.133.31.2.696.2 1.16 0 .525-.08.99-.238 1.394-.26.674-.703 1.01-1.327 1.01-.42 0-.737-.11-.954-.328-.217-.22-.325-.494-.325-.825h.544zm1.4-1.09c.176-.14.265-.387.265-.737 0-.315-.08-.55-.238-.705-.16-.153-.36-.23-.606-.23-.262 0-.47.088-.625.264-.155.177-.232.412-.232.707 0 .28.068.502.203.667.136.164.352.246.65.246.213 0 .408-.07.584-.21zm3.414-.563c.133-.132.2-.29.2-.474 0-.16-.064-.306-.19-.44-.13-.133-.323-.2-.585-.2-.26 0-.447.067-.563.2-.115.134-.173.29-.173.47 0 .202.075.36.224.473.15.112.326.17.53.17.237 0 .422-.067.556-.2zm.097 2.118c.165-.135.247-.336.247-.603 0-.277-.084-.487-.254-.63-.17-.144-.386-.216-.652-.216-.256 0-.466.072-.628.22-.163.145-.244.348-.244.607 0 .223.074.416.223.58.15.16.38.243.69.243.25 0 .456-.068.62-.202zm-1.735-1.937c-.158-.158-.236-.365-.236-.62 0-.32.114-.594.345-.823.232-.23.56-.344.984-.344.41 0 .732.108.965.325.233.216.35.47.35.758 0 .267-.068.483-.203.65-.076.092-.194.184-.353.274.176.08.316.175.418.28.19.2.284.46.284.778 0 .377-.127.697-.38.96-.253.26-.61.392-1.074.392-.416 0-.77-.113-1.057-.34-.287-.226-.43-.554-.43-.985 0-.253.06-.472.184-.656.124-.186.307-.327.55-.424-.15-.064-.265-.14-.35-.225zm5.614-1.42c.188.248.282.503.282.766h-.532c-.032-.17-.083-.302-.153-.397-.13-.18-.326-.27-.59-.27-.3 0-.54.14-.717.417-.177.278-.276.676-.296 1.194.124-.18.28-.316.467-.405.172-.08.364-.12.575-.12.36 0 .672.115.94.344.266.228.4.57.4 1.025 0 .388-.127.733-.38 1.033-.253.3-.614.45-1.083.45-.4 0-.746-.152-1.037-.456-.29-.304-.437-.816-.437-1.536 0-.532.065-.983.194-1.354.25-.71.705-1.065 1.367-1.065.478 0 .81.124 1 .372zm-.404 3.274c.14-.19.21-.415.21-.674 0-.22-.062-.43-.188-.627-.126-.198-.354-.297-.685-.297-.23 0-.434.076-.608.23-.175.153-.262.385-.262.694 0 .27.08.498.238.683.16.184.38.277.66.277.283 0 .495-.096.636-.286z\"\n                fill=\"#636363\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"19\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeVisa);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeAmex: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV amex</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <text\n                fill=\"#979BA1\"\n                fontFamily=\"Avenir Next\"\n                fontSize=\"6\"\n                fontWeight=\"420\"\n                letterSpacing=\".2\"\n            >\n                <tspan x=\"11\" y=\"35\">\n                    3712 567890 374\n                </tspan>\n                <tspan x=\"70.21\" y=\"35\">\n                    5\n                </tspan>\n            </text>\n            <path\n                d=\"M69.182 26.767h-.55v-3.35l-.762.635-.324-.38 1.142-.926h.494v4.02zm4.19 0H70.75v-.528l1.6-1.59c.122-.126.226-.257.313-.393s.13-.29.13-.46c0-.106-.018-.202-.056-.287-.038-.085-.09-.158-.153-.22-.065-.06-.14-.106-.228-.138-.087-.032-.18-.048-.278-.048-.204 0-.373.065-.505.196-.133.13-.216.298-.25.503l-.54-.09c.023-.153.07-.294.145-.424.074-.132.168-.246.28-.342.115-.097.246-.17.396-.224.15-.053.31-.08.48-.08.166 0 .326.025.48.074.153.05.288.12.406.216.117.094.21.214.28.357.07.145.106.31.106.496 0 .128-.017.248-.05.357-.035.11-.082.214-.14.313-.06.098-.128.192-.208.28-.08.09-.162.178-.25.265l-1.306 1.273h1.97v.494zm1.625-2.328h.176c.114 0 .225-.012.333-.033.107-.02.203-.056.286-.107.084-.052.15-.12.202-.208.05-.087.077-.195.077-.323 0-.104-.018-.196-.056-.277-.038-.08-.09-.15-.156-.207-.067-.057-.142-.102-.227-.134-.085-.032-.175-.048-.27-.048-.17 0-.314.044-.434.13-.12.088-.21.21-.27.364l-.5-.176c.1-.242.257-.433.475-.57.22-.14.47-.208.753-.208.167 0 .325.024.475.07.15.048.28.117.394.208.114.09.204.205.27.34.066.137.1.294.1.472 0 .114-.018.22-.054.318-.036.1-.086.188-.148.267-.063.08-.137.147-.224.204-.087.057-.182.098-.284.125v.01c.117.023.226.063.326.12.1.056.187.127.26.212.07.086.127.183.17.293.04.11.06.23.06.358 0 .2-.036.377-.112.53-.076.154-.176.282-.3.384-.126.102-.27.18-.433.233-.163.053-.33.08-.5.08-.318 0-.598-.073-.84-.216-.242-.144-.418-.368-.528-.67l.51-.17c.06.173.165.315.31.425.146.11.325.164.537.164.102 0 .202-.016.298-.05.097-.03.183-.08.26-.143.074-.064.135-.143.18-.238.046-.095.07-.206.07-.335 0-.14-.032-.257-.092-.352-.06-.095-.14-.17-.236-.23-.097-.06-.205-.1-.327-.125-.12-.025-.24-.037-.357-.037h-.17v-.454zm4.73.953h.58v.47h-.58v.904h-.533v-.903h-1.85v-.5l1.708-2.618h.676v2.647zm-.533-2.016h-.01l-1.273 2.016h1.284v-2.016z\"\n                fill=\"#636363\"\n                opacity=\".9\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"16\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeAmex);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconCardCodeAmex, IconCardCodeVisa, IconSize } from '@bigcommerce/checkout/ui';\n\nimport './CreditCardCodeTooltip.scss';\n\nconst CreditCardCodeTooltip: FunctionComponent = () => (\n    <div className=\"dropdown-menu dropdown-menu--content dropdown-menu--card-code\">\n        <div className=\"form-ccFields-cvvExample\">\n            <div className=\"form-ccFields-cvvExampleDescription\">\n                <p>\n                    <TranslatedString id=\"payment.credit_card_cvv_help_text\" />\n                </p>\n            </div>\n\n            <div className=\"form-ccFields-cvvExampleFigures\">\n                <figure>\n                    <IconCardCodeVisa size={IconSize.Large} />\n                </figure>\n\n                <figure>\n                    <IconCardCodeAmex size={IconSize.Large} />\n                </figure>\n            </div>\n        </div>\n    </div>\n);\n\nexport default CreditCardCodeTooltip;\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconHelp, IconLock, TextInput, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport CreditCardCodeTooltip from './CreditCardCodeTooltip';\n\nexport interface CreditCardCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCodeField: FunctionComponent<CreditCardCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-csc\"\n                    id={field.name}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardCodeField);\n","import React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CreditCardCodeField, CreditCardNumberField } from '../index';\n\ninterface CreditCardValidationProps {\n    shouldShowCardCodeField: boolean;\n    shouldShowNumberField: boolean;\n}\n\nconst CreditCardValidation: React.FunctionComponent<CreditCardValidationProps> = ({\n    shouldShowNumberField,\n    shouldShowCardCodeField,\n}) => (\n    <>\n        {shouldShowNumberField && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {shouldShowNumberField && <CreditCardNumberField name=\"ccNumber\" />}\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n        </div>\n    </>\n);\n\nexport default CreditCardValidation;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport React, { ChangeEvent, FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nimport { formatCreditCardExpiryDate } from '.';\n\ninterface CreditCardExpiryFieldProps {\n    name: string;\n}\n\nconst CreditCardExpiryField: FunctionComponent<CreditCardExpiryFieldProps> = ({ name }) => {\n    const { language } = useLocale();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const handleChange = useCallback(\n        memoizeOne((field: FieldProps['field'], form: FieldProps['form']) => {\n            return (event: ChangeEvent<any>) => {\n                void form.setFieldValue(field.name, formatCreditCardExpiryDate(event.target.value));\n            };\n        }),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps) => (\n            <TextInput\n                {...field}\n                autoComplete=\"cc-exp\"\n                id={field.name}\n                onChange={handleChange(field, form)}\n                placeholder={language.translate('payment.credit_card_expiration_placeholder_text')}\n                type=\"tel\"\n            />\n        ),\n        [handleChange, language],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_expiration_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardExpiryField);\n","export default function formatCreditCardExpiryDate(value: string): string {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n    const trimmedMonth = month.slice(0, 2);\n    const trimmedYear =\n        year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n    // i.e.: '1'\n    if (value.length < 2) {\n        return month;\n    }\n\n    // ie.: '10 /' (without trailing space)\n    if (value.length > 3 && !trimmedYear) {\n        return trimmedMonth;\n    }\n\n    return `${trimmedMonth} / ${trimmedYear}`;\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardNameFieldProps {\n    name: string;\n}\n\nconst CreditCardNameField: FunctionComponent<CreditCardNameFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"cc-name\" id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_name_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNameField);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardCustomerCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCustomerCodeField: FunctionComponent<CreditCardCustomerCodeFieldProps> = ({\n    name,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_customer_code_label\" />{' '}\n                <small className=\"optimizedCheckout-contentSecondary\">\n                    <TranslatedString id=\"common.optional_text\" />\n                </small>\n            </>\n        ),\n        [],\n    );\n\n    return <FormField input={renderInput} labelContent={labelContent} name={name} />;\n};\n\nexport default memo(CreditCardCustomerCodeField);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    CreditCardCodeField,\n    CreditCardCustomerCodeField,\n    CreditCardExpiryField,\n    CreditCardNameField,\n    CreditCardNumberField,\n} from '../';\n\nexport interface CreditCardFieldsetProps {\n    shouldShowCardCodeField?: boolean;\n    shouldShowCustomerCodeField?: boolean;\n    shouldShowSaveCardField?: boolean;\n}\n\nconst CreditCardFieldset: FunctionComponent<CreditCardFieldsetProps> = ({\n    shouldShowCardCodeField,\n    shouldShowCustomerCodeField,\n}) => (\n    <Fieldset\n        additionalClassName=\"creditCardFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <CreditCardNumberField name=\"ccNumber\" />\n\n            <CreditCardExpiryField name=\"ccExpiry\" />\n\n            <CreditCardNameField name=\"ccName\" />\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n\n            {shouldShowCustomerCodeField && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />}\n        </div>\n    </Fieldset>\n);\n\nexport default memo(CreditCardFieldset);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, number } from 'card-validator';\nimport creditCardType from 'credit-card-type';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport { CardInstrumentFieldsetValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { mapFromInstrumentCardType } from '../';\n\nexport interface InstrumentValidationSchemaOptions {\n    instrumentBrand: string;\n    instrumentLast4: string;\n    isCardCodeRequired: boolean;\n    isCardNumberRequired: boolean;\n    language: LanguageService;\n}\n\ninterface InstrumentValidationSchema {\n    ccCvv?: StringSchema;\n    ccNumber?: StringSchema;\n    instrumentId: StringSchema;\n}\n\nexport default memoize(function getInstrumentValidationSchema({\n    instrumentBrand,\n    instrumentLast4,\n    isCardCodeRequired,\n    isCardNumberRequired,\n    language,\n}: InstrumentValidationSchemaOptions): ObjectSchema<CardInstrumentFieldsetValues> {\n    const schema: InstrumentValidationSchema = {\n        instrumentId: string().required(),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value = '') {\n                    const cardType = mapFromInstrumentCardType(instrumentBrand);\n                    const cardInfo = creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined)\n                        .isValid;\n                },\n            });\n    }\n\n    if (isCardNumberRequired) {\n        schema.ccNumber = string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: language.translate('payment.credit_card_number_mismatch_error'),\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                test: (value = '') => value.slice(-instrumentLast4.length) === instrumentLast4,\n            });\n    }\n\n    return object(schema);\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, expirationDate, number } from 'card-validator';\nimport { object, ObjectSchema, string } from 'yup';\n\nimport { CreditCardFieldsetValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface CreditCardValidationSchemaOptions {\n    isCardCodeRequired: boolean;\n    language: LanguageService;\n}\n\nexport default memoize(function getCreditCardValidationSchema({\n    isCardCodeRequired,\n    language,\n}: CreditCardValidationSchemaOptions): ObjectSchema<CreditCardFieldsetValues> {\n    const schema = {\n        ccCustomerCode: string(),\n        ccCvv: string(),\n        ccExpiry: string()\n            .required(language.translate('payment.credit_card_expiration_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_expiration_invalid_error'),\n\n                test: (value) => expirationDate(value).isValid,\n            }),\n        ccName: string()\n            .max(200)\n            .required(language.translate('payment.credit_card_name_required_error')),\n        ccNumber: string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n\n                test: (value) => number(value).isValid,\n            }),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value) {\n                    const { card } = number(this.parent.ccNumber);\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    return object(schema);\n});\n","import { createCurrencyService, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport getLanguageService from './getLanguageService';\nimport { LocaleContextType } from './LocaleContext';\n\nexport default function createLocaleContext(config: StoreConfig): Required<LocaleContextType> {\n    if (!config) {\n        throw new Error('Missing configuration data');\n    }\n\n    const { inputDateFormat } = config;\n\n    return {\n        currency: createCurrencyService(config),\n        date: {\n            inputFormat: inputDateFormat,\n        },\n        language: getLanguageService(),\n    };\n}\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    HostedFieldType,\n    Instrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport {\n    CardInstrumentFieldset,\n    configureCardValidator,\n    CreditCardFieldset,\n    CreditCardFieldsetValues,\n    CreditCardValidation,\n    getCreditCardValidationSchema,\n    getInstrumentValidationSchema,\n    isCardInstrument,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { createLocaleContext, LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    CardInstrumentFieldsetValues,\n    PaymentMethodProps,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardPaymentMethodProps {\n    cardFieldset?: ReactNode;\n    cardValidationSchema?: ObjectSchema;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    getHostedFormOptions?(selectedInstrument?: CardInstrument): Promise<LegacyHostedFormOptions>;\n    getStoredCardValidationFieldset?(selectedInstrument?: CardInstrument): ReactNode;\n}\n\ninterface CreditCardPaymentMethodDerivedProps {\n    instruments: CardInstrument[];\n    isCardCodeRequired: boolean;\n    isCustomerCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    shouldShowInstrumentFieldset: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\ninterface CreditCardPaymentMethodState {\n    focusedHostedFieldType?: HostedFieldType;\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport type CreditCardPaymentMethodValues = CreditCardFieldsetValues | CardInstrumentFieldsetValues;\n\nclass CreditCardPaymentMethodComponent extends Component<\n    CreditCardPaymentMethodProps & PaymentMethodProps\n> {\n    state: CreditCardPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    private filterInstruments = memoizeOne(\n        (instruments: PaymentInstrument[] = []): CardInstrument[] =>\n            instruments.filter(isCardInstrument),\n    );\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n        const { isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp, loadInstruments } =\n            this.getCreditCardPaymentMethodDerivedProps();\n\n        setValidationSchema(method, this.getValidationSchema());\n        configureCardValidator();\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await initializePayment(\n                {\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                },\n                this.getSelectedInstrument(),\n            );\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n\n        setValidationSchema(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentDidUpdate(\n        _prevProps: Readonly<CreditCardPaymentMethodProps>,\n        prevState: Readonly<CreditCardPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            initializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            isAddingNewCard !== prevState.isAddingNewCard\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                await initializePayment(\n                    {\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    },\n                    this.getSelectedInstrument(),\n                );\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            checkoutState,\n            cardFieldset,\n            getStoredCardValidationFieldset,\n            isInitializing,\n            method,\n        } = this.props;\n        const {\n            instruments,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldShowInstrumentFieldset,\n        } = this.getCreditCardPaymentMethodDerivedProps();\n        const {\n            data: { getConfig },\n        } = checkoutState;\n\n        const { isAddingNewCard } = this.state;\n\n        const selectedInstrument = this.getSelectedInstrument();\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowNumberField = selectedInstrument\n            ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n            : false;\n        const shouldShowCardCodeField = selectedInstrument\n            ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n            : false;\n\n        const storeConfig = getConfig();\n\n        if (!storeConfig) {\n            throw Error('Unable to get config or customer');\n        }\n\n        return (\n            <LocaleContext.Provider value={createLocaleContext(storeConfig)}>\n                <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                    <div className=\"paymentMethod paymentMethod--creditCard\">\n                        {shouldShowInstrumentFieldset && (\n                            <CardInstrumentFieldset\n                                instruments={instruments}\n                                onDeleteInstrument={this.handleDeleteInstrument}\n                                onSelectInstrument={this.handleSelectInstrument}\n                                onUseNewInstrument={this.handleUseNewCard}\n                                selectedInstrumentId={\n                                    selectedInstrument && selectedInstrument.bigpayToken\n                                }\n                                validateInstrument={\n                                    getStoredCardValidationFieldset ? (\n                                        getStoredCardValidationFieldset(selectedInstrument)\n                                    ) : (\n                                        <CreditCardValidation\n                                            shouldShowCardCodeField={shouldShowCardCodeField}\n                                            shouldShowNumberField={shouldShowNumberField}\n                                        />\n                                    )\n                                }\n                            />\n                        )}\n\n                        {shouldShowCreditCardFieldset && !cardFieldset && (\n                            <CreditCardFieldset\n                                shouldShowCardCodeField={\n                                    method.config.cardCode || method.config.cardCode === null\n                                }\n                                shouldShowCustomerCodeField={method.config.requireCustomerCode}\n                            />\n                        )}\n\n                        {shouldShowCreditCardFieldset && cardFieldset}\n\n                        {isInstrumentFeatureAvailableProp && (\n                            <StoreInstrumentFieldset\n                                instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                                instruments={instruments}\n                            />\n                        )}\n                    </div>\n                </LoadingOverlay>\n            </LocaleContext.Provider>\n        );\n    }\n\n    private getSelectedInstrument(): CardInstrument | undefined {\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const { cardValidationSchema, language, method, storedCardValidationSchema } = this.props;\n        const {\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n        } = this.getCreditCardPaymentMethodDerivedProps();\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return (\n                storedCardValidationSchema ||\n                getInstrumentValidationSchema({\n                    instrumentBrand: selectedInstrument.brand,\n                    instrumentLast4: selectedInstrument.last4,\n                    isCardCodeRequired: isInstrumentCardCodeRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    isCardNumberRequired: isInstrumentCardNumberRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    language,\n                })\n            );\n        }\n\n        return (\n            cardValidationSchema ||\n            getCreditCardValidationSchema({\n                isCardCodeRequired: method.config.cardCode === true,\n                language,\n            })\n        );\n    }\n\n    private handleUseNewCard: () => void = () => {\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const {\n            paymentForm: { setFieldValue },\n        } = this.props;\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getCreditCardPaymentMethodDerivedProps(): CreditCardPaymentMethodDerivedProps {\n        const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = this.props;\n\n        const {\n            data: { getConfig, getCustomer, getInstruments, isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer || !method) {\n            throw new Error('Unable to get checkout');\n        }\n\n        const instruments = this.filterInstruments(getInstruments(method));\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            isUsingMultiShipping,\n            paymentMethod: method,\n        });\n\n        return {\n            instruments,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isCustomerCodeRequired: !!method.config.requireCustomerCode,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n            shouldShowInstrumentFieldset:\n                isInstrumentFeatureAvailableProp && instruments.length > 0,\n        };\n    }\n}\n\nexport default CreditCardPaymentMethodComponent;\n","import { creditCardType } from 'card-validator';\n\nexport default function configureCardValidator(): void {\n    const discoverInfo = creditCardType.getTypeInfo('discover');\n    const visaInfo = creditCardType.getTypeInfo('visa');\n\n    // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n    creditCardType.updateCard('visa', {\n        lengths: [13, ...(visaInfo.lengths || [])],\n    });\n\n    // Add support for 8-BIN Discover Cards.\n    creditCardType.updateCard('discover', {\n        patterns: [...(discoverInfo.patterns || []), [810, 817]],\n    });\n\n    // Add support for Mada-BIN Cards.\n    creditCardType.addCard({\n        niceType: 'Mada',\n        type: 'mada',\n        patterns: [\n            400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817, 422818,\n            422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954, 440533, 440647,\n            440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865, 458456, 462220, 468540,\n            468541, 468542, 468543, 483010, 483011, 483012, 484783, 486094, 486095, 486096, 489317,\n            489318, 489319, 493428, 504300, 506968, 508160, 513213, 520058, 521076, 524130, 524514,\n            529415, 529741, 530060, 530906, 531095, 531196, 532013, 535825, 535989, 536023, 537767,\n            539931, 543085, 543357, 549760, 554180, 557606, 558848, 585265, 588845, 588846, 588847,\n            588848, 588849, 588850, 588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120,\n            968201, 968202, 968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n        ],\n        gaps: [4, 8, 12],\n        lengths: [16, 18, 19],\n        code: {\n            name: 'CVV',\n            size: 3,\n        },\n    });\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNameField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div\n            className={classNames('form-ccFields', {\n                'form-ccFields--without-card-name': !cardNameId,\n                'form-ccFields--without-card-code': !cardCodeId,\n            })}\n        >\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {Boolean(cardNameId) && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {Boolean(cardCodeId) && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object()\n            .required()\n            .shape<HostedCreditCardValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedCreditCardValidationSchemaShape['hostedForm']['errors']>({\n                        cardCode: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardExpiry: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_expiry',\n                            }),\n\n                        cardName: string().test({\n                            message: language.translate('payment.credit_card_name_required_error'),\n                            test: (value) => value !== 'required',\n                        }),\n\n                        cardNumber: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            }),\n                    }),\n            }),\n    });\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = (\n    props,\n) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeBigCommercePaymentsCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    bigcommerce_payments_creditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching BigCommercePayments Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsCreditCardPaymentMethod,\n    [{ id: 'bigcommerce_payments_creditcards' }],\n);\n","import { CardInstrument, PaymentProviderCustomer } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBigCommercePaymentsFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n\n    const paymentProviderCustomer: PaymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneCreditCardForm.scss';\n\ninterface BigCommercePaymentsFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst BigCommercePaymentsFastlaneCreditCardForm: FunctionComponent<\n    BigCommercePaymentsFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#big-commerce-payments-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-cc-form-container\"\n            data-test=\"big-commerce-payments-fastlane-cc-form-container\"\n            id=\"big-commerce-payments-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BigCommercePaymentsFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BigCommercePaymentsFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BigCommercePaymentsFastlaneInstrumentsForm: FunctionComponent<\n    BigCommercePaymentsFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-instrument\"\n            data-test=\"big-commerce-payments-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"big-commerce-payments-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"big-commerce-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"big-commerce-payments-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"big-commerce-payments-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"big-commerce-payments-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\nimport { useBigCommercePaymentsFastlaneInstruments } from '../hooks/useBigCommercePaymentsFastlaneInstruments';\n\nimport BigCommercePaymentsFastlaneCreditCardForm from './BigCommercePaymentsFastlaneCreditCardForm';\nimport BigCommercePaymentsFastlaneInstrumentsForm from './BigCommercePaymentsFastlaneInstrumentsForm';\n\ninterface BigCommercePaymentsFastlaneFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst BigCommercePaymentsFastlaneForm: FunctionComponent<BigCommercePaymentsFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBigCommercePaymentsFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument, handleSelectInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsFastlaneForm from './components/BigCommercePaymentsFastlaneForm';\n\nimport './BigCommercePaymentsFastlanePaymentMethod.scss';\nimport { isErrorWithTranslationKey } from '@bigcommerce/checkout/utility';\n\nexport interface BigCommercePaymentsFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BigCommercePaymentsFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<BigCommercePaymentsFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n\n                bigcommerce_payments_fastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BigCommercePaymentsFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsFastlanePaymentMethod,\n    [{ id: 'bigcommerce_payments_fastlane' }],\n);\n","import BigCommercePaymentsFastlanePaymentMethod from './BigCommercePaymentsFastlanePaymentMethod';\n\nexport default BigCommercePaymentsFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsPayLaterPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_paylater\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPayLaterPaymentMethod,\n    [{ id: 'bigcommerce_payments_paylater' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const isPaymentDataRequired = props.checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_venmo\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsVenmoPaymentMethod,\n    [{ id: 'bigcommerce_payments_venmo' }],\n);\n","export interface CountryData {\n    name: string;\n    dialCode: string;\n    code: string;\n}\n\nconst COUNTRY_DATA = [\n    {\n        name: 'Afghanistan',\n        dialCode: '+93',\n        code: 'AF',\n    },\n    {\n        name: 'Aland Islands',\n        dialCode: '+358',\n        code: 'AX',\n    },\n    {\n        name: 'Albania',\n        dialCode: '+355',\n        code: 'AL',\n    },\n    {\n        name: 'Algeria',\n        dialCode: '+213',\n        code: 'DZ',\n    },\n    {\n        name: 'American Samoa',\n        dialCode: '+1684',\n        code: 'AS',\n    },\n    {\n        name: 'Andorra',\n        dialCode: '+376',\n        code: 'AD',\n    },\n    {\n        name: 'Angola',\n        dialCode: '+244',\n        code: 'AO',\n    },\n    {\n        name: 'Anguilla',\n        dialCode: '+1264',\n        code: 'AI',\n    },\n    {\n        name: 'Antarctica',\n        dialCode: '+672',\n        code: 'AQ',\n    },\n    {\n        name: 'Antigua and Barbuda',\n        dialCode: '+1268',\n        code: 'AG',\n    },\n    {\n        name: 'Argentina',\n        dialCode: '+54',\n        code: 'AR',\n    },\n    {\n        name: 'Armenia',\n        dialCode: '+374',\n        code: 'AM',\n    },\n    {\n        name: 'Aruba',\n        dialCode: '+297',\n        code: 'AW',\n    },\n    {\n        name: 'Australia',\n        dialCode: '+61',\n        code: 'AU',\n    },\n    {\n        name: 'Austria',\n        dialCode: '+43',\n        code: 'AT',\n    },\n    {\n        name: 'Azerbaijan',\n        dialCode: '+994',\n        code: 'AZ',\n    },\n    {\n        name: 'Bahamas',\n        dialCode: '+1242',\n        code: 'BS',\n    },\n    {\n        name: 'Bahrain',\n        dialCode: '+973',\n        code: 'BH',\n    },\n    {\n        name: 'Bangladesh',\n        dialCode: '+880',\n        code: 'BD',\n    },\n    {\n        name: 'Barbados',\n        dialCode: '+1246',\n        code: 'BB',\n    },\n    {\n        name: 'Belarus',\n        dialCode: '+375',\n        code: 'BY',\n    },\n    {\n        name: 'Belgium',\n        dialCode: '+32',\n        code: 'BE',\n    },\n    {\n        name: 'Belize',\n        dialCode: '+501',\n        code: 'BZ',\n    },\n    {\n        name: 'Benin',\n        dialCode: '+229',\n        code: 'BJ',\n    },\n    {\n        name: 'Bermuda',\n        dialCode: '+1441',\n        code: 'BM',\n    },\n    {\n        name: 'Bhutan',\n        dialCode: '+975',\n        code: 'BT',\n    },\n    {\n        name: 'Bolivia, Plurinational State of',\n        dialCode: '+591',\n        code: 'BO',\n    },\n    {\n        name: 'Bosnia and Herzegovina',\n        dialCode: '+387',\n        code: 'BA',\n    },\n    {\n        name: 'Botswana',\n        dialCode: '+267',\n        code: 'BW',\n    },\n    {\n        name: 'Brazil',\n        dialCode: '+55',\n        code: 'BR',\n    },\n    {\n        name: 'British Indian Ocean Territory',\n        dialCode: '+246',\n        code: 'IO',\n    },\n    {\n        name: 'Brunei Darussalam',\n        dialCode: '+673',\n        code: 'BN',\n    },\n    {\n        name: 'Bulgaria',\n        dialCode: '+359',\n        code: 'BG',\n    },\n    {\n        name: 'Burkina Faso',\n        dialCode: '+226',\n        code: 'BF',\n    },\n    {\n        name: 'Burundi',\n        dialCode: '+257',\n        code: 'BI',\n    },\n    {\n        name: 'Cambodia',\n        dialCode: '+855',\n        code: 'KH',\n    },\n    {\n        name: 'Cameroon',\n        dialCode: '+237',\n        code: 'CM',\n    },\n    {\n        name: 'Canada',\n        dialCode: '+1',\n        code: 'CA',\n    },\n    {\n        name: 'Cape Verde',\n        dialCode: '+238',\n        code: 'CV',\n    },\n    {\n        name: 'Cayman Islands',\n        dialCode: '+ 345',\n        code: 'KY',\n    },\n    {\n        name: 'Central African Republic',\n        dialCode: '+236',\n        code: 'CF',\n    },\n    {\n        name: 'Chad',\n        dialCode: '+235',\n        code: 'TD',\n    },\n    {\n        name: 'Chile',\n        dialCode: '+56',\n        code: 'CL',\n    },\n    {\n        name: 'China',\n        dialCode: '+86',\n        code: 'CN',\n    },\n    {\n        name: 'Christmas Island',\n        dialCode: '+61',\n        code: 'CX',\n    },\n    {\n        name: 'Cocos (Keeling) Islands',\n        dialCode: '+61',\n        code: 'CC',\n    },\n    {\n        name: 'Colombia',\n        dialCode: '+57',\n        code: 'CO',\n    },\n    {\n        name: 'Comoros',\n        dialCode: '+269',\n        code: 'KM',\n    },\n    {\n        name: 'Congo',\n        dialCode: '+242',\n        code: 'CG',\n    },\n    {\n        name: 'Congo, The Democratic Republic of the Congo',\n        dialCode: '+243',\n        code: 'CD',\n    },\n    {\n        name: 'Cook Islands',\n        dialCode: '+682',\n        code: 'CK',\n    },\n    {\n        name: 'Costa Rica',\n        dialCode: '+506',\n        code: 'CR',\n    },\n    {\n        name: \"Cote d'Ivoire\",\n        dialCode: '+225',\n        code: 'CI',\n    },\n    {\n        name: 'Croatia',\n        dialCode: '+385',\n        code: 'HR',\n    },\n    {\n        name: 'Cuba',\n        dialCode: '+53',\n        code: 'CU',\n    },\n    {\n        name: 'Cyprus',\n        dialCode: '+357',\n        code: 'CY',\n    },\n    {\n        name: 'Czech Republic',\n        dialCode: '+420',\n        code: 'CZ',\n    },\n    {\n        name: 'Denmark',\n        dialCode: '+45',\n        code: 'DK',\n    },\n    {\n        name: 'Djibouti',\n        dialCode: '+253',\n        code: 'DJ',\n    },\n    {\n        name: 'Dominica',\n        dialCode: '+1767',\n        code: 'DM',\n    },\n    {\n        name: 'Dominican Republic',\n        dialCode: '+1849',\n        code: 'DO',\n    },\n    {\n        name: 'Ecuador',\n        dialCode: '+593',\n        code: 'EC',\n    },\n    {\n        name: 'Egypt',\n        dialCode: '+20',\n        code: 'EG',\n    },\n    {\n        name: 'El Salvador',\n        dialCode: '+503',\n        code: 'SV',\n    },\n    {\n        name: 'Equatorial Guinea',\n        dialCode: '+240',\n        code: 'GQ',\n    },\n    {\n        name: 'Eritrea',\n        dialCode: '+291',\n        code: 'ER',\n    },\n    {\n        name: 'Estonia',\n        dialCode: '+372',\n        code: 'EE',\n    },\n    {\n        name: 'Ethiopia',\n        dialCode: '+251',\n        code: 'ET',\n    },\n    {\n        name: 'Falkland Islands (Malvinas)',\n        dialCode: '+500',\n        code: 'FK',\n    },\n    {\n        name: 'Faroe Islands',\n        dialCode: '+298',\n        code: 'FO',\n    },\n    {\n        name: 'Fiji',\n        dialCode: '+679',\n        code: 'FJ',\n    },\n    {\n        name: 'Finland',\n        dialCode: '+358',\n        code: 'FI',\n    },\n    {\n        name: 'France',\n        dialCode: '+33',\n        code: 'FR',\n    },\n    {\n        name: 'French Guiana',\n        dialCode: '+594',\n        code: 'GF',\n    },\n    {\n        name: 'French Polynesia',\n        dialCode: '+689',\n        code: 'PF',\n    },\n    {\n        name: 'Gabon',\n        dialCode: '+241',\n        code: 'GA',\n    },\n    {\n        name: 'Gambia',\n        dialCode: '+220',\n        code: 'GM',\n    },\n    {\n        name: 'Georgia',\n        dialCode: '+995',\n        code: 'GE',\n    },\n    {\n        name: 'Germany',\n        dialCode: '+49',\n        code: 'DE',\n    },\n    {\n        name: 'Ghana',\n        dialCode: '+233',\n        code: 'GH',\n    },\n    {\n        name: 'Gibraltar',\n        dialCode: '+350',\n        code: 'GI',\n    },\n    {\n        name: 'Greece',\n        dialCode: '+30',\n        code: 'GR',\n    },\n    {\n        name: 'Greenland',\n        dialCode: '+299',\n        code: 'GL',\n    },\n    {\n        name: 'Grenada',\n        dialCode: '+1473',\n        code: 'GD',\n    },\n    {\n        name: 'Guadeloupe',\n        dialCode: '+590',\n        code: 'GP',\n    },\n    {\n        name: 'Guam',\n        dialCode: '+1671',\n        code: 'GU',\n    },\n    {\n        name: 'Guatemala',\n        dialCode: '+502',\n        code: 'GT',\n    },\n    {\n        name: 'Guernsey',\n        dialCode: '+44',\n        code: 'GG',\n    },\n    {\n        name: 'Guinea',\n        dialCode: '+224',\n        code: 'GN',\n    },\n    {\n        name: 'Guinea-Bissau',\n        dialCode: '+245',\n        code: 'GW',\n    },\n    {\n        name: 'Guyana',\n        dialCode: '+595',\n        code: 'GY',\n    },\n    {\n        name: 'Haiti',\n        dialCode: '+509',\n        code: 'HT',\n    },\n    {\n        name: 'Holy See (Vatican City State)',\n        dialCode: '+379',\n        code: 'VA',\n    },\n    {\n        name: 'Honduras',\n        dialCode: '+504',\n        code: 'HN',\n    },\n    {\n        name: 'Hong Kong',\n        dialCode: '+852',\n        code: 'HK',\n    },\n    {\n        name: 'Hungary',\n        dialCode: '+36',\n        code: 'HU',\n    },\n    {\n        name: 'Iceland',\n        dialCode: '+354',\n        code: 'IS',\n    },\n    {\n        name: 'India',\n        dialCode: '+91',\n        code: 'IN',\n    },\n    {\n        name: 'Indonesia',\n        dialCode: '+62',\n        code: 'ID',\n    },\n    {\n        name: 'Iran, Islamic Republic of',\n        dialCode: '+98',\n        code: 'IR',\n    },\n    {\n        name: 'Iraq',\n        dialCode: '+964',\n        code: 'IQ',\n    },\n    {\n        name: 'Ireland',\n        dialCode: '+353',\n        code: 'IE',\n    },\n    {\n        name: 'Isle of Man',\n        dialCode: '+44',\n        code: 'IM',\n    },\n    {\n        name: 'Israel',\n        dialCode: '+972',\n        code: 'IL',\n    },\n    {\n        name: 'Italy',\n        dialCode: '+39',\n        code: 'IT',\n    },\n    {\n        name: 'Jamaica',\n        dialCode: '+1876',\n        code: 'JM',\n    },\n    {\n        name: 'Japan',\n        dialCode: '+81',\n        code: 'JP',\n    },\n    {\n        name: 'Jersey',\n        dialCode: '+44',\n        code: 'JE',\n    },\n    {\n        name: 'Jordan',\n        dialCode: '+962',\n        code: 'JO',\n    },\n    {\n        name: 'Kazakhstan',\n        dialCode: '+7',\n        code: 'KZ',\n    },\n    {\n        name: 'Kenya',\n        dialCode: '+254',\n        code: 'KE',\n    },\n    {\n        name: 'Kiribati',\n        dialCode: '+686',\n        code: 'KI',\n    },\n    {\n        name: \"Korea, Democratic People's Republic of Korea\",\n        dialCode: '+850',\n        code: 'KP',\n    },\n    {\n        name: 'Korea, Republic of South Korea',\n        dialCode: '+82',\n        code: 'KR',\n    },\n    {\n        name: 'Kuwait',\n        dialCode: '+965',\n        code: 'KW',\n    },\n    {\n        name: 'Kyrgyzstan',\n        dialCode: '+996',\n        code: 'KG',\n    },\n    {\n        name: 'Laos',\n        dialCode: '+856',\n        code: 'LA',\n    },\n    {\n        name: 'Latvia',\n        dialCode: '+371',\n        code: 'LV',\n    },\n    {\n        name: 'Lebanon',\n        dialCode: '+961',\n        code: 'LB',\n    },\n    {\n        name: 'Lesotho',\n        dialCode: '+266',\n        code: 'LS',\n    },\n    {\n        name: 'Liberia',\n        dialCode: '+231',\n        code: 'LR',\n    },\n    {\n        name: 'Libyan Arab Jamahiriya',\n        dialCode: '+218',\n        code: 'LY',\n    },\n    {\n        name: 'Liechtenstein',\n        dialCode: '+423',\n        code: 'LI',\n    },\n    {\n        name: 'Lithuania',\n        dialCode: '+370',\n        code: 'LT',\n    },\n    {\n        name: 'Luxembourg',\n        dialCode: '+352',\n        code: 'LU',\n    },\n    {\n        name: 'Macao',\n        dialCode: '+853',\n        code: 'MO',\n    },\n    {\n        name: 'Macedonia',\n        dialCode: '+389',\n        code: 'MK',\n    },\n    {\n        name: 'Madagascar',\n        dialCode: '+261',\n        code: 'MG',\n    },\n    {\n        name: 'Malawi',\n        dialCode: '+265',\n        code: 'MW',\n    },\n    {\n        name: 'Malaysia',\n        dialCode: '+60',\n        code: 'MY',\n    },\n    {\n        name: 'Maldives',\n        dialCode: '+960',\n        code: 'MV',\n    },\n    {\n        name: 'Mali',\n        dialCode: '+223',\n        code: 'ML',\n    },\n    {\n        name: 'Malta',\n        dialCode: '+356',\n        code: 'MT',\n    },\n    {\n        name: 'Marshall Islands',\n        dialCode: '+692',\n        code: 'MH',\n    },\n    {\n        name: 'Martinique',\n        dialCode: '+596',\n        code: 'MQ',\n    },\n    {\n        name: 'Mauritania',\n        dialCode: '+222',\n        code: 'MR',\n    },\n    {\n        name: 'Mauritius',\n        dialCode: '+230',\n        code: 'MU',\n    },\n    {\n        name: 'Mayotte',\n        dialCode: '+262',\n        code: 'YT',\n    },\n    {\n        name: 'Mexico',\n        dialCode: '+52',\n        code: 'MX',\n    },\n    {\n        name: 'Micronesia, Federated States of Micronesia',\n        dialCode: '+691',\n        code: 'FM',\n    },\n    {\n        name: 'Moldova',\n        dialCode: '+373',\n        code: 'MD',\n    },\n    {\n        name: 'Monaco',\n        dialCode: '+377',\n        code: 'MC',\n    },\n    {\n        name: 'Mongolia',\n        dialCode: '+976',\n        code: 'MN',\n    },\n    {\n        name: 'Montenegro',\n        dialCode: '+382',\n        code: 'ME',\n    },\n    {\n        name: 'Montserrat',\n        dialCode: '+1664',\n        code: 'MS',\n    },\n    {\n        name: 'Morocco',\n        dialCode: '+212',\n        code: 'MA',\n    },\n    {\n        name: 'Mozambique',\n        dialCode: '+258',\n        code: 'MZ',\n    },\n    {\n        name: 'Myanmar',\n        dialCode: '+95',\n        code: 'MM',\n    },\n    {\n        name: 'Namibia',\n        dialCode: '+264',\n        code: 'NA',\n    },\n    {\n        name: 'Nauru',\n        dialCode: '+674',\n        code: 'NR',\n    },\n    {\n        name: 'Nepal',\n        dialCode: '+977',\n        code: 'NP',\n    },\n    {\n        name: 'Netherlands',\n        dialCode: '+31',\n        code: 'NL',\n    },\n    {\n        name: 'Netherlands Antilles',\n        dialCode: '+599',\n        code: 'AN',\n    },\n    {\n        name: 'New Caledonia',\n        dialCode: '+687',\n        code: 'NC',\n    },\n    {\n        name: 'New Zealand',\n        dialCode: '+64',\n        code: 'NZ',\n    },\n    {\n        name: 'Nicaragua',\n        dialCode: '+505',\n        code: 'NI',\n    },\n    {\n        name: 'Niger',\n        dialCode: '+227',\n        code: 'NE',\n    },\n    {\n        name: 'Nigeria',\n        dialCode: '+234',\n        code: 'NG',\n    },\n    {\n        name: 'Niue',\n        dialCode: '+683',\n        code: 'NU',\n    },\n    {\n        name: 'Norfolk Island',\n        dialCode: '+672',\n        code: 'NF',\n    },\n    {\n        name: 'Northern Mariana Islands',\n        dialCode: '+1670',\n        code: 'MP',\n    },\n    {\n        name: 'Norway',\n        dialCode: '+47',\n        code: 'NO',\n    },\n    {\n        name: 'Oman',\n        dialCode: '+968',\n        code: 'OM',\n    },\n    {\n        name: 'Pakistan',\n        dialCode: '+92',\n        code: 'PK',\n    },\n    {\n        name: 'Palau',\n        dialCode: '+680',\n        code: 'PW',\n    },\n    {\n        name: 'Palestinian Territory, Occupied',\n        dialCode: '+970',\n        code: 'PS',\n    },\n    {\n        name: 'Panama',\n        dialCode: '+507',\n        code: 'PA',\n    },\n    {\n        name: 'Papua New Guinea',\n        dialCode: '+675',\n        code: 'PG',\n    },\n    {\n        name: 'Paraguay',\n        dialCode: '+595',\n        code: 'PY',\n    },\n    {\n        name: 'Peru',\n        dialCode: '+51',\n        code: 'PE',\n    },\n    {\n        name: 'Philippines',\n        dialCode: '+63',\n        code: 'PH',\n    },\n    {\n        name: 'Pitcairn',\n        dialCode: '+872',\n        code: 'PN',\n    },\n    {\n        name: 'Poland',\n        dialCode: '+48',\n        code: 'PL',\n    },\n    {\n        name: 'Portugal',\n        dialCode: '+351',\n        code: 'PT',\n    },\n    {\n        name: 'Puerto Rico',\n        dialCode: '+1939',\n        code: 'PR',\n    },\n    {\n        name: 'Qatar',\n        dialCode: '+974',\n        code: 'QA',\n    },\n    {\n        name: 'Romania',\n        dialCode: '+40',\n        code: 'RO',\n    },\n    {\n        name: 'Russia',\n        dialCode: '+7',\n        code: 'RU',\n    },\n    {\n        name: 'Rwanda',\n        dialCode: '+250',\n        code: 'RW',\n    },\n    {\n        name: 'Reunion',\n        dialCode: '+262',\n        code: 'RE',\n    },\n    {\n        name: 'Saint Barthelemy',\n        dialCode: '+590',\n        code: 'BL',\n    },\n    {\n        name: 'Saint Helena, Ascension and Tristan Da Cunha',\n        dialCode: '+290',\n        code: 'SH',\n    },\n    {\n        name: 'Saint Kitts and Nevis',\n        dialCode: '+1869',\n        code: 'KN',\n    },\n    {\n        name: 'Saint Lucia',\n        dialCode: '+1758',\n        code: 'LC',\n    },\n    {\n        name: 'Saint Martin',\n        dialCode: '+590',\n        code: 'MF',\n    },\n    {\n        name: 'Saint Pierre and Miquelon',\n        dialCode: '+508',\n        code: 'PM',\n    },\n    {\n        name: 'Saint Vincent and the Grenadines',\n        dialCode: '+1784',\n        code: 'VC',\n    },\n    {\n        name: 'Samoa',\n        dialCode: '+685',\n        code: 'WS',\n    },\n    {\n        name: 'San Marino',\n        dialCode: '+378',\n        code: 'SM',\n    },\n    {\n        name: 'Sao Tome and Principe',\n        dialCode: '+239',\n        code: 'ST',\n    },\n    {\n        name: 'Saudi Arabia',\n        dialCode: '+966',\n        code: 'SA',\n    },\n    {\n        name: 'Senegal',\n        dialCode: '+221',\n        code: 'SN',\n    },\n    {\n        name: 'Serbia',\n        dialCode: '+381',\n        code: 'RS',\n    },\n    {\n        name: 'Seychelles',\n        dialCode: '+248',\n        code: 'SC',\n    },\n    {\n        name: 'Sierra Leone',\n        dialCode: '+232',\n        code: 'SL',\n    },\n    {\n        name: 'Singapore',\n        dialCode: '+65',\n        code: 'SG',\n    },\n    {\n        name: 'Slovakia',\n        dialCode: '+421',\n        code: 'SK',\n    },\n    {\n        name: 'Slovenia',\n        dialCode: '+386',\n        code: 'SI',\n    },\n    {\n        name: 'Solomon Islands',\n        dialCode: '+677',\n        code: 'SB',\n    },\n    {\n        name: 'Somalia',\n        dialCode: '+252',\n        code: 'SO',\n    },\n    {\n        name: 'South Africa',\n        dialCode: '+27',\n        code: 'ZA',\n    },\n    {\n        name: 'South Sudan',\n        dialCode: '+211',\n        code: 'SS',\n    },\n    {\n        name: 'South Georgia and the South Sandwich Islands',\n        dialCode: '+500',\n        code: 'GS',\n    },\n    {\n        name: 'Spain',\n        dialCode: '+34',\n        code: 'ES',\n    },\n    {\n        name: 'Sri Lanka',\n        dialCode: '+94',\n        code: 'LK',\n    },\n    {\n        name: 'Sudan',\n        dialCode: '+249',\n        code: 'SD',\n    },\n    {\n        name: 'Suriname',\n        dialCode: '+597',\n        code: 'SR',\n    },\n    {\n        name: 'Svalbard and Jan Mayen',\n        dialCode: '+47',\n        code: 'SJ',\n    },\n    {\n        name: 'Swaziland',\n        dialCode: '+268',\n        code: 'SZ',\n    },\n    {\n        name: 'Sweden',\n        dialCode: '+46',\n        code: 'SE',\n    },\n    {\n        name: 'Switzerland',\n        dialCode: '+41',\n        code: 'CH',\n    },\n    {\n        name: 'Syrian Arab Republic',\n        dialCode: '+963',\n        code: 'SY',\n    },\n    {\n        name: 'Taiwan',\n        dialCode: '+886',\n        code: 'TW',\n    },\n    {\n        name: 'Tajikistan',\n        dialCode: '+992',\n        code: 'TJ',\n    },\n    {\n        name: 'Tanzania, United Republic of Tanzania',\n        dialCode: '+255',\n        code: 'TZ',\n    },\n    {\n        name: 'Thailand',\n        dialCode: '+66',\n        code: 'TH',\n    },\n    {\n        name: 'Timor-Leste',\n        dialCode: '+670',\n        code: 'TL',\n    },\n    {\n        name: 'Togo',\n        dialCode: '+228',\n        code: 'TG',\n    },\n    {\n        name: 'Tokelau',\n        dialCode: '+690',\n        code: 'TK',\n    },\n    {\n        name: 'Tonga',\n        dialCode: '+676',\n        code: 'TO',\n    },\n    {\n        name: 'Trinidad and Tobago',\n        dialCode: '+1868',\n        code: 'TT',\n    },\n    {\n        name: 'Tunisia',\n        dialCode: '+216',\n        code: 'TN',\n    },\n    {\n        name: 'Turkey',\n        dialCode: '+90',\n        code: 'TR',\n    },\n    {\n        name: 'Turkmenistan',\n        dialCode: '+993',\n        code: 'TM',\n    },\n    {\n        name: 'Turks and Caicos Islands',\n        dialCode: '+1649',\n        code: 'TC',\n    },\n    {\n        name: 'Tuvalu',\n        dialCode: '+688',\n        code: 'TV',\n    },\n    {\n        name: 'Uganda',\n        dialCode: '+256',\n        code: 'UG',\n    },\n    {\n        name: 'Ukraine',\n        dialCode: '+380',\n        code: 'UA',\n    },\n    {\n        name: 'United Arab Emirates',\n        dialCode: '+971',\n        code: 'AE',\n    },\n    {\n        name: 'United Kingdom',\n        dialCode: '+44',\n        code: 'GB',\n    },\n    {\n        name: 'United States',\n        dialCode: '+1',\n        code: 'US',\n    },\n    {\n        name: 'Uruguay',\n        dialCode: '+598',\n        code: 'UY',\n    },\n    {\n        name: 'Uzbekistan',\n        dialCode: '+998',\n        code: 'UZ',\n    },\n    {\n        name: 'Vanuatu',\n        dialCode: '+678',\n        code: 'VU',\n    },\n    {\n        name: 'Venezuela, Bolivarian Republic of Venezuela',\n        dialCode: '+58',\n        code: 'VE',\n    },\n    {\n        name: 'Vietnam',\n        dialCode: '+84',\n        code: 'VN',\n    },\n    {\n        name: 'Virgin Islands, British',\n        dialCode: '+1284',\n        code: 'VG',\n    },\n    {\n        name: 'Virgin Islands, U.S.',\n        dialCode: '+1340',\n        code: 'VI',\n    },\n    {\n        name: 'Wallis and Futuna',\n        dialCode: '+681',\n        code: 'WF',\n    },\n    {\n        name: 'Yemen',\n        dialCode: '+967',\n        code: 'YE',\n    },\n    {\n        name: 'Zambia',\n        dialCode: '+260',\n        code: 'ZM',\n    },\n    {\n        name: 'Zimbabwe',\n        dialCode: '+263',\n        code: 'ZW',\n    },\n];\n\nexport const getCountryData = (countryName: string) => {\n    return COUNTRY_DATA.filter((country: CountryData) => country.name === countryName);\n};\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, StringSchema } from 'yup';\n\nexport default memoize(function getBigCommercePaymentsRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n    CustomError,\n    SpecificError,\n    CountryData,\n    getCountryData,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getBigCommercePaymentsRatePayValidationSchema from '../validation-schemas/getBigCommercePaymentsRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst BigCommercePaymentsRatePayPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n    const getCountryInfo = (): CountryData => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        return getCountryData(billing.country)[0] || '';\n    };\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                bigcommerce_payments_ratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => fieldsValues.current,\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }) => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const validationSchema = useMemo(\n        () =>\n            getBigCommercePaymentsRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setFieldValue('ratepayPhoneCountryCode', getCountryInfo().dialCode);\n    }, []);\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={{ isSubmitted, setSubmitted }}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsRatePayPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms', id: 'ratepay' }],\n);\n","export enum BluesnapECPAccountType {\n    ConsumerChecking = 'CONSUMER_CHECKING',\n    ConsumerSavings = 'CONSUMER_SAVINGS',\n    CorporateChecking = 'CORPORATE_CHECKING',\n    CorporateSavings = 'CORPORATE_SAVINGS',\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectNumberFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectNumberField: FunctionComponent<BlueSnapDirectNumberFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete=\"cc-number\"\n                fieldType={DynamicFormFieldType.TELEPHONE}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectNumberField);\n","import { FormFieldOptions } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectSelectFieldProps {\n    labelContent: string;\n    name: string;\n    options: FormFieldOptions;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectSelectField: FunctionComponent<BlueSnapDirectSelectFieldProps> = ({\n    options: { helperLabel, items, rows },\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderSelect = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                fieldType={DynamicFormFieldType.DROPDOWM}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                options={items}\n                placeholder={helperLabel}\n                rows={rows}\n            />\n        ),\n        [helperLabel, items, rows, useFloatingLabel],\n    );\n\n    return <FormField {...rest} input={renderSelect} />;\n};\n\nexport default memo(BlueSnapDirectSelectField);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectTextFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    autoComplete?: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectTextField: FunctionComponent<BlueSnapDirectTextFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    autoComplete,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete={autoComplete}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel, autoComplete],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectTextField);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { BluesnapECPAccountType } from '../constants';\n\nimport BlueSnapDirectNumberField from './BlueSnapDirectNumberField';\nimport BlueSnapDirectSelectField from './BlueSnapDirectSelectField';\nimport BlueSnapDirectTextField from './BlueSnapDirectTextField';\n\nexport interface BlueSnapDirectEcpFieldsetProps {\n    language: LanguageService;\n    useFloatingLabel?: boolean;\n    shouldRenderCompanyName: boolean;\n}\n\nconst BlueSnapDirectEcpFieldset: FunctionComponent<BlueSnapDirectEcpFieldsetProps> = ({\n    language,\n    useFloatingLabel,\n    shouldRenderCompanyName,\n}) => {\n    const options = {\n        helperLabel: language.translate('payment.bluesnap_direct_account_type_select.label'),\n        items: [\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_checking',\n                ),\n                value: BluesnapECPAccountType.ConsumerChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_savings',\n                ),\n                value: BluesnapECPAccountType.ConsumerSavings,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_checking',\n                ),\n                value: BluesnapECPAccountType.CorporateChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_savings',\n                ),\n                value: BluesnapECPAccountType.CorporateSavings,\n            },\n        ],\n    };\n\n    return (\n        <>\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_account_number.label')}\n                maxLength={17}\n                name=\"accountNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_routing_number.label')}\n                maxLength={9}\n                name=\"routingNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.bluesnap_direct_account_type.label')}\n                name=\"accountType\"\n                options={options}\n                useFloatingLabel={useFloatingLabel}\n            />\n            {shouldRenderCompanyName && (\n                <BlueSnapDirectTextField\n                    labelContent={language.translate('address.company_name_label')}\n                    name=\"companyName\"\n                    useFloatingLabel={useFloatingLabel}\n                />\n            )}\n        </>\n    );\n};\n\nexport default memo(BlueSnapDirectEcpFieldset);\n","import { AchInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useEcpInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isAchInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useEcpInstruments;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getEcpValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n    shouldRenderCompanyName: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  accountNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_account_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_account_number.only_numbers'),\n                      )\n                      .min(4, language.translate('payment.bluesnap_direct_account_number.length'))\n                      .max(\n                          17,\n                          language.translate('payment.bluesnap_direct_account_number.length_max'),\n                      ),\n                  routingNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_routing_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_routing_number.only_numbers'),\n                      )\n                      .length(\n                          9,\n                          language.translate('payment.bluesnap_direct_routing_number.length'),\n                      ),\n                  ...(shouldRenderCompanyName\n                      ? {\n                            companyName: string()\n                                .required(language.translate('address.company_name_required_error'))\n                                .max(\n                                    50,\n                                    language.translate(\n                                        'payment.bluesnap_direct_company_name.length_max',\n                                    ),\n                                ),\n                        }\n                      : {}),\n                  accountType: string().required(\n                      language.translate('payment.bluesnap_direct_account_type.is_required'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { BluesnapECPAccountType } from './constants';\nimport BlueSnapDirectEcpFieldset from './fields/BlueSnapDirectEcpFieldset';\nimport useEcpInstruments from './hooks/useEcpInstruments';\nimport getEcpValidationSchema from './validation-schemas/getEcpValidationSchema';\n\nconst BlueSnapDirectEcpPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n    checkoutState: {\n        data: { isPaymentDataRequired, getCustomer, getBillingAddress },\n        statuses: { isLoadingInstruments },\n    },\n    paymentForm: { disableSubmit, setValidationSchema, setFieldValue, getFormValues },\n    language,\n    onUnhandledError,\n}) => {\n    const [disabled, setDisabled] = useState(true);\n    const onChange = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeEcp = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeEcp = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeEcp();\n\n        return () => {\n            void deinitializeEcp();\n        };\n    }, [deinitializeEcp, initializeEcp]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useEcpInstruments(method);\n\n    const isLoading = isLoadingInstruments();\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n    const accountType = getFormValues().accountType;\n    const shouldRenderCompanyName =\n        accountType === BluesnapECPAccountType.CorporateChecking ||\n        accountType === BluesnapECPAccountType.CorporateSavings;\n\n    useEffect(() => {\n        if (shouldRenderCompanyName) {\n            setFieldValue('companyName', getBillingAddress()?.company);\n        } else {\n            setFieldValue('companyName', undefined);\n        }\n    }, [shouldRenderCompanyName, setFieldValue, getBillingAddress]);\n\n    useEffect(() => {\n        setValidationSchema(\n            method,\n            getEcpValidationSchema(language, shouldShowForm, shouldRenderCompanyName),\n        );\n    }, [language, shouldShowForm, shouldRenderCompanyName, setValidationSchema, method]);\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_electronic_check_label')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <BlueSnapDirectEcpFieldset\n                        language={language}\n                        shouldRenderCompanyName={shouldRenderCompanyName}\n                    />\n                )}\n                <CheckboxFormField\n                    labelContent={language.translate('payment.bluesnap_direct_permission')}\n                    name=\"shopperPermission\"\n                    onChange={onChange}\n                />\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectEcpPaymentMethod,\n    [{ id: 'ecp', gateway: 'bluesnapdirect' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BlueSnapDirectAlternativePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectAlternativePaymentMethod,\n    [{ gateway: 'bluesnapdirect' }],\n);\n","export interface BlueSnapDirectInitializationData {\n    sepaCreditorCompanyName: string;\n    idealIssuers: IdealIssuer[];\n}\n\ninterface IdealIssuer {\n    issuerId: string;\n    issuerName: string;\n}\n\nexport const isBlueSnapDirectIdealIssuerList = (array: unknown): array is IdealIssuer[] => {\n    if (\n        !(\n            Array.isArray(array) &&\n            array.length &&\n            'issuerId' in array[0] &&\n            'issuerName' in array[0]\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const isBlueSnapDirectInitializationData = (\n    object: unknown,\n): object is BlueSnapDirectInitializationData => {\n    if (\n        !(\n            typeof object === 'object' &&\n            object !== null &&\n            (('sepaCreditorCompanyName' in object &&\n                typeof object.sepaCreditorCompanyName === 'string') ||\n                ('idealIssuers' in object && isBlueSnapDirectIdealIssuerList(object.idealIssuers)))\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n","import { BankInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isSepaInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useSepaInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<BankInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isSepaInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): BankInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useSepaInstruments;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getSepaValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  iban: string()\n                      .matches(\n                          /^[a-zA-Z0-9]+$/i,\n                          language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n                      )\n                      .required(language.translate('payment.sepa_account_number_required')),\n                  firstName: string().required(\n                      language.translate('address.first_name_required_error'),\n                  ),\n                  lastName: string().required(\n                      language.translate('address.last_name_required_error'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport useSepaInstruments from './hooks/useSepaInstruments';\nimport getSepaValidationSchema from './validation-schemas/getSepaValidationSchema';\n\nconst BlueSnapDirectSepaPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        method,\n        checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n        checkoutState: {\n            data: { isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        },\n        paymentForm: { disableSubmit, setValidationSchema },\n        language,\n        onUnhandledError,\n    } = props;\n\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const [disabled, setDisabled] = useState(true);\n    const toggleSubmitButton = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeSepa = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeSepa = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeSepa();\n\n        return () => {\n            void deinitializeSepa();\n        };\n    }, [deinitializeSepa, initializeSepa]);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useSepaInstruments(method);\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n\n    useEffect(() => {\n        setValidationSchema(method, getSepaValidationSchema(language, shouldShowForm));\n    }, [language, shouldShowForm, setValidationSchema, method]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (isInstrumentFeatureAvailable) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const isLoading = isLoadingInstruments();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_sepa_direct_debit')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <>\n                        <BlueSnapDirectTextField\n                            autoComplete=\"iban\"\n                            labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                            name=\"iban\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.first_name_label')}\n                            name=\"firstName\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.last_name_label')}\n                            name=\"lastName\"\n                            useFloatingLabel={true}\n                        />\n                    </>\n                )}\n\n                <CheckboxFormField\n                    labelContent={language.translate(\n                        'payment.bluesnap_direct_sepa_mandate_disclaimer',\n                        {\n                            creditorName: method.initializationData.sepaCreditorCompanyName,\n                        },\n                    )}\n                    name=\"shopperPermission\"\n                    onChange={toggleSubmitButton}\n                />\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectSepaPaymentMethod,\n    [{ id: 'sepa_direct_debit', gateway: 'bluesnapdirect' }],\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getIdealValidationSchema(language: LanguageService): ObjectSchema {\n    return object({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    });\n});\n","import React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectSelectField from './fields/BlueSnapDirectSelectField';\nimport getIdealValidationSchema from './validation-schemas/getIdealValidationSchema';\n\nconst BlueSnapDirectIdealPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment },\n    paymentForm: { setValidationSchema },\n    language,\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const { idealIssuers } = method.initializationData;\n\n    const idealIssuersSelectOptions = idealIssuers.map((issuer) => ({\n        value: issuer.issuerId,\n        label: issuer.issuerName,\n    }));\n\n    const initializeIdeal = useCallback(async () => {\n        setValidationSchema(method, getIdealValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method, setValidationSchema, language]);\n\n    const deinitializeIdeal = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeIdeal();\n\n        return () => {\n            void deinitializeIdeal();\n        };\n    }, [deinitializeIdeal, initializeIdeal]);\n\n    return (\n        <Fieldset\n            legend={<Legend hidden>{language.translate('payment.ideal.label')}</Legend>}\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.ideal.label')}\n                name=\"bic\"\n                options={{\n                    helperLabel: language.translate('payment.select_your_bank'),\n                    items: idealIssuersSelectOptions,\n                }}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectIdealPaymentMethod,\n    [{ id: 'ideal', gateway: 'bluesnapdirect' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport {\n    HostedPaymentComponent,\n    HostedPaymentMethodProps,\n} from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay, Modal } from '@bigcommerce/checkout/ui';\n\nexport type BlueSnapV2PaymentMethodProps = HostedPaymentMethodProps;\n\ninterface BlueSnapV2PaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelBlueSnapV2Payment?(): void;\n}\n\nconst BlueSnapV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [isLoadingIframe, setisLoadingIframe] = useState<boolean>(false);\n    const [paymentPageContent, setPaymentPageContent] = useState<HTMLElement>();\n    const ref = useRef<BlueSnapV2PaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n\n    const cancelBlueSnapV2ModalFlow = useCallback(() => {\n        setPaymentPageContent(undefined);\n\n        if (ref.current.cancelBlueSnapV2Payment) {\n            ref.current.cancelBlueSnapV2Payment();\n            ref.current.cancelBlueSnapV2Payment = undefined;\n        }\n    }, []);\n\n    const initializeBlueSnapV2Payment = useCallback(\n        (options: PaymentInitializeOptions) => {\n            return checkoutService.initializePayment({\n                ...options,\n                bluesnapv2: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setPaymentPageContent(content);\n                        setisLoadingIframe(true);\n                        ref.current.cancelBlueSnapV2Payment = cancel;\n                    },\n                    style: {\n                        border: '1px solid lightgray',\n                        height: '60vh',\n                        width: '100%',\n                    },\n                },\n            });\n        },\n        [checkoutService],\n    );\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (ref.current.paymentPageContentRef.current && paymentPageContent) {\n            paymentPageContent.addEventListener('load', () => {\n                setisLoadingIframe(false);\n            });\n            ref.current.paymentPageContentRef.current.appendChild(paymentPageContent);\n        }\n    }, [paymentPageContent]);\n\n    return (\n        <>\n            <HostedPaymentComponent\n                {...rest}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                initializePayment={initializeBlueSnapV2Payment}\n                method={method}\n                paymentForm={paymentForm}\n            />\n            <Modal\n                additionalModalClassName=\"modal--bluesnap\"\n                isOpen={!!paymentPageContent}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelBlueSnapV2ModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <LoadingOverlay isLoading={isLoadingIframe}>\n                    <div ref={ref.current.paymentPageContentRef} />\n                </LoadingOverlay>\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapV2PaymentMethod,\n    [{ gateway: 'bluesnapv2' }],\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getPayByBankValidationSchema(\n    language: LanguageService,\n): ObjectSchema {\n    return object({\n        iban: string()\n            .matches(\n                /^[a-zA-Z0-9]+$/i,\n                language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n            )\n            .required(language.translate('payment.pay_by_bank_iban_required')),\n    });\n});\n","import React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport getPayByBankValidationSchema from './validation-schemas/getPayByBankValidationSchema';\n\nconst BlueSnapDirectPayByBankPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    language,\n    paymentForm: { setValidationSchema },\n    checkoutService: { initializePayment, deinitializePayment },\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const initializePayByBank = useCallback(async () => {\n        setValidationSchema(method, getPayByBankValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, language, method, setValidationSchema]);\n\n    const deinitializePayByBank = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayByBank();\n\n        return () => {\n            void deinitializePayByBank();\n        };\n    }, [deinitializePayByBank, initializePayByBank]);\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>{language.translate('payment.bluesnap_direct_iban.label')}</Legend>\n            }\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectTextField\n                autoComplete=\"iban\"\n                labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                name=\"iban\"\n                useFloatingLabel={true}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectPayByBankPaymentMethod,\n    [{ id: 'pay_by_bank', gateway: 'bluesnapdirect' }],\n);\n","import { CheckoutService, PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BoltClientPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    ...rest\n}) => {\n    const initializeBoltPayment: CheckoutService['initializePayment'] = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    useBigCommerceCheckout: true,\n                },\n            }),\n        [checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBoltPayment}\n            method={method}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltClientPaymentMethod;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nexport interface BoltCustomFormProps {\n    containerId: string;\n    showCreateAccountCheckbox: boolean;\n}\n\nconst agreementTranslationOptions = {\n    privacyPolicyUrl: 'https://www.bolt.com/privacy/',\n    termsUrl: 'https://www.bolt.com/end-user-terms/',\n};\n\nconst benefitsList = [\n    { id: 'payment.bolt_benefit_1' },\n    { id: 'payment.bolt_benefit_2' },\n    { id: 'payment.bolt_benefit_3' },\n];\n\nconst BoltCreateAccountCheckbox: FunctionComponent = () => {\n    const labelContent = (\n        <>\n            <TranslatedHtml\n                data={agreementTranslationOptions}\n                id=\"payment.bolt_checkbox_agreement\"\n            />\n            <ul>\n                {benefitsList.map(({ id }, key) => (\n                    <li key={key}>\n                        <TranslatedString id={id} />\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-checkbox form-field--createAccount\"\n            labelContent={labelContent}\n            name=\"shouldCreateAccount\"\n        />\n    );\n};\n\nconst BoltCustomForm: FunctionComponent<BoltCustomFormProps> = ({\n    containerId,\n    showCreateAccountCheckbox,\n}) => {\n    return (\n        <div className=\"form-ccFields\">\n            <div className=\"form-field form-field--bolt-embed\" id={containerId} />\n            {showCreateAccountCheckbox ? <BoltCreateAccountCheckbox /> : null}\n        </div>\n    );\n};\n\nexport default BoltCustomForm;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltCustomForm from './BoltCustomForm';\n\nconst BoltEmbeddedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [showCreateAccountCheckbox, setShowCreateAccountCheckbox] = useState(false);\n\n    const boltEmbeddedContainerId = 'bolt-embedded';\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const initializeBoltPayment = useCallback(\n        (options: any) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    containerId: boltEmbeddedContainerId,\n                    useBigCommerceCheckout: true,\n                    onPaymentSelect: (hasBoltAccount: boolean) => {\n                        setShowCreateAccountCheckbox(!hasBoltAccount);\n\n                        if (hasBoltAccount) {\n                            setFieldValue('shouldCreateAccount', false);\n                        }\n                    },\n                },\n            }),\n        [checkoutService, boltEmbeddedContainerId, setFieldValue],\n    );\n\n    const renderCustomPaymentForm = useCallback(\n        () => (\n            <BoltCustomForm\n                containerId={boltEmbeddedContainerId}\n                showCreateAccountCheckbox={showCreateAccountCheckbox}\n            />\n        ),\n        [boltEmbeddedContainerId, showCreateAccountCheckbox],\n    );\n\n    const { getInstruments, isPaymentDataRequired } = checkoutState.data;\n    const { isInitializingPayment, isLoadingInstruments } = checkoutState.statuses;\n    const instruments = getInstruments(method) || [];\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId=\"boltEmbeddedOneClick\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeBoltPayment}\n            instruments={instruments}\n            isInitializing={isInitializingPayment()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={!isGuestCustomer}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltEmbeddedPaymentMethod;\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltClientPaymentMethod from './BoltClientPaymentMethod';\nimport BoltEmbeddedPaymentMethod from './BoltEmbeddedPaymentMethod';\n\nconst BoltPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const useBoltEmbedded = method.initializationData?.embeddedOneClickEnabled;\n\n    if (useBoltEmbedded) {\n        return (\n            <BoltEmbeddedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                method={method}\n                paymentForm={paymentForm}\n                {...rest}\n            />\n        );\n    }\n\n    return (\n        <BoltClientPaymentMethod\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            method={method}\n            paymentForm={paymentForm}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BoltPaymentMethod,\n    [{ id: 'bolt' }],\n);\n","import { FormField } from '@bigcommerce/checkout-sdk';\n\nimport { DynamicFormFieldType } from '@bigcommerce/checkout/ui';\n\nexport enum BraintreeAchFieldType {\n    BusinessName = 'businessName',\n    AccountType = 'accountType',\n    AccountNumber = 'accountNumber',\n    RoutingNumber = 'routingNumber',\n    OwnershipType = 'ownershipType',\n    FirstName = 'firstName',\n    LastName = 'lastName',\n}\n\nexport enum OwnershipTypes {\n    Personal = 'Personal',\n    Business = 'Business',\n}\n\nexport enum AccountTypes {\n    Savings = 'Savings',\n    Checking = 'Checking',\n}\n\nconst accountTypeOptions = [\n    {\n        value: AccountTypes.Savings,\n        label: AccountTypes.Savings,\n    },\n    {\n        value: AccountTypes.Checking,\n        label: AccountTypes.Checking,\n    },\n];\n\nexport const ownershipTypeOptions = [\n    {\n        value: OwnershipTypes.Personal,\n        label: OwnershipTypes.Personal,\n    },\n    {\n        value: OwnershipTypes.Business,\n        label: OwnershipTypes.Business,\n    },\n];\n\nexport const defaultBraintreeAchFormFields: FormField[] = [\n    {\n        name: BraintreeAchFieldType.AccountType,\n        custom: false,\n        id: BraintreeAchFieldType.AccountType,\n        label: 'Account Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: accountTypeOptions,\n        },\n    },\n    {\n        name: BraintreeAchFieldType.AccountNumber,\n        custom: false,\n        id: BraintreeAchFieldType.AccountNumber,\n        label: 'Account Number',\n        required: true,\n        max: 9,\n        min: 8,\n    },\n    {\n        name: BraintreeAchFieldType.RoutingNumber,\n        custom: false,\n        id: BraintreeAchFieldType.RoutingNumber,\n        label: 'Routing Number',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.OwnershipType,\n        custom: false,\n        id: BraintreeAchFieldType.OwnershipType,\n        label: 'Ownership Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: ownershipTypeOptions,\n        },\n    },\n];\n\nexport const personalBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.FirstName,\n        custom: false,\n        id: BraintreeAchFieldType.FirstName,\n        label: 'First Name',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.LastName,\n        custom: false,\n        id: BraintreeAchFieldType.LastName,\n        label: 'Last Name',\n        required: true,\n    },\n];\n\nexport const businessBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.BusinessName,\n        custom: false,\n        id: BraintreeAchFieldType.BusinessName,\n        label: 'Business Name',\n        required: true,\n    },\n];\n","import { AchInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBraintreeAchInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => instruments.filter(isAchInstrument), [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset &&\n        !!currentInstrument &&\n        !currentInstrument.trustedShippingAddress;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBraintreeAchInstruments;\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { useCallback } from 'react';\nimport { object, string, StringSchema } from 'yup';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormValues,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst useBraintreeAchValidation = (method: PaymentMethod) => {\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const getValidationSchema = () => {\n        const ownershipType = paymentForm.getFieldValue('ownershipType');\n        const formFields =\n            ownershipType === OwnershipTypes.Business\n                ? businessBraintreeAchFormFields\n                : personalBraintreeAchFormFields;\n\n        const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n            [BraintreeAchFieldType.FirstName]: 'address.first_name',\n            [BraintreeAchFieldType.LastName]: 'address.last_name',\n            [BraintreeAchFieldType.AccountNumber]: 'payment.errors.account_number',\n            [BraintreeAchFieldType.RoutingNumber]: 'payment.errors.routing_number',\n            [BraintreeAchFieldType.BusinessName]: 'payment.errors.business_name',\n        };\n\n        return object(\n            formFields.reduce(\n                (schema, { id, required }) => {\n                    if (required) {\n                        if (requiredFieldErrorTranslationIds[id]) {\n                            schema[id] = string().required(\n                                language.translate(\n                                    `${requiredFieldErrorTranslationIds[id]}_required_error`,\n                                ),\n                            );\n\n                            if (id === BraintreeAchFieldType.AccountNumber) {\n                                schema[id] = schema[id].matches(\n                                    /^\\d+$/,\n                                    language.translate('payment.errors.only_numbers_error', {\n                                        label: language.translate('payment.account_number_label'),\n                                    }),\n                                );\n                            }\n\n                            if (id === BraintreeAchFieldType.RoutingNumber) {\n                                schema[id] = schema[id]\n                                    .matches(\n                                        /^\\d+$/,\n                                        language.translate('payment.errors.only_numbers_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                        }),\n                                    )\n                                    .min(\n                                        8,\n                                        language.translate('customer.min_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            min: 8,\n                                        }),\n                                    )\n                                    .max(\n                                        9,\n                                        language.translate('customer.max_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            max: 9,\n                                        }),\n                                    );\n                            }\n                        }\n                    }\n\n                    return schema;\n                },\n                // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n                {} as { [key: string]: StringSchema },\n            ),\n        );\n    };\n\n    const validateBraintreeAchForm = useCallback(\n        async (braintreeAchFormValues: PaymentFormValues): Promise<boolean> => {\n            const {\n                accountNumber,\n                businessName,\n                routingNumber,\n                ownershipType,\n                firstName,\n                lastName,\n            } = braintreeAchFormValues;\n\n            const validationSchema = getValidationSchema();\n\n            paymentForm.setValidationSchema(method, validationSchema);\n\n            const [\n                isValidAccountNumber,\n                isValidRoutingNumber,\n                isValidFirstName,\n                isValidLastName,\n                isValidBusinessName,\n            ] = await Promise.all([\n                await validationSchema.fields.accountNumber?.isValid(accountNumber),\n                await validationSchema.fields.routingNumber?.isValid(routingNumber),\n                await validationSchema.fields.firstName?.isValid(firstName),\n                await validationSchema.fields.lastName?.isValid(lastName),\n                await validationSchema.fields.businessName?.isValid(businessName),\n            ]);\n\n            const isValidDepositoryName =\n                ownershipType === OwnershipTypes.Business\n                    ? isValidBusinessName\n                    : isValidFirstName && isValidLastName;\n\n            return isValidRoutingNumber && isValidAccountNumber && isValidDepositoryName;\n        },\n        [getValidationSchema],\n    );\n\n    const resetFormValidation = useCallback(() => {\n        paymentForm.setValidationSchema(method, null);\n    }, [paymentForm, method]);\n\n    return {\n        validateBraintreeAchForm,\n        resetFormValidation,\n    };\n};\n\nexport default useBraintreeAchValidation;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField } from '@bigcommerce/checkout/ui';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst isBraintreeAchFormFieldName = (fieldName: string): fieldName is BraintreeAchFieldType => {\n    return Object.values(BraintreeAchFieldType).includes(fieldName as BraintreeAchFieldType);\n};\n\nconst getTranslatedLabelByFieldName = (fieldName: string, language: LanguageService) => {\n    const braintreeAchFormLabelsMap = {\n        firstName: language.translate('address.first_name_label'),\n        lastName: language.translate('address.last_name_label'),\n        accountNumber: language.translate('payment.account_number_label'),\n        routingNumber: language.translate('payment.account_routing_label'),\n        businessName: language.translate('payment.business_name_label'),\n        ownershipType: language.translate('payment.ownership_type_label'),\n        accountType: language.translate('payment.account_type_label'),\n    };\n\n    return isBraintreeAchFormFieldName(fieldName)\n        ? braintreeAchFormLabelsMap[fieldName]\n        : fieldName;\n};\n\nconst BraintreeAchFormFields: FunctionComponent = () => {\n    const { language } = useLocale();\n    const { paymentForm } = usePaymentFormContext();\n    const { getFieldValue, setFieldValue } = paymentForm;\n\n    const ownershipTypeValue = getFieldValue(BraintreeAchFieldType.OwnershipType);\n    const fieldValues =\n        ownershipTypeValue === OwnershipTypes.Business\n            ? businessBraintreeAchFormFields\n            : personalBraintreeAchFormFields;\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n        },\n        [setFieldValue],\n    );\n\n    return (\n        <>\n            {fieldValues.map((field) => (\n                <DynamicFormField\n                    extraClass={`dynamic-form-field--${field.id}`}\n                    field={field}\n                    key={field.id}\n                    label={getTranslatedLabelByFieldName(field.name, language)}\n                    onChange={handleChange(field.id)}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default BraintreeAchFormFields;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nimport { OwnershipTypes } from '../constants';\n\nexport interface BraintreeAchMandateTextProps {\n    isInstrumentFeatureAvailable?: boolean;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchMandateText: FunctionComponent<BraintreeAchMandateTextProps> = ({\n    isInstrumentFeatureAvailable,\n    updateMandateText,\n}) => {\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const {\n        businessName,\n        accountType,\n        accountNumber,\n        routingNumber,\n        ownershipType,\n        firstName,\n        lastName,\n    } = paymentForm.getFormValues();\n\n    const fullName = `${String(firstName)} ${String(lastName)}`;\n\n    const depositoryName = ownershipType === OwnershipTypes.Business ? businessName : fullName;\n    const outstandingBalance = checkoutState.data.getCheckout()?.outstandingBalance;\n    const storeName = checkoutState.data.getConfig()?.storeProfile.storeName;\n    const symbol = checkoutState.data.getCart()?.currency.symbol;\n\n    const mandateTextTranslationKey = isInstrumentFeatureAvailable\n        ? 'payment.braintreeach_vaulting_mandate_text'\n        : 'payment.braintreeach_mandate_text';\n\n    const currentDate = new Date(Date.now()).toJSON().slice(0, 10); // yyyy-mm-dd\n    const formattedDate = currentDate.split('-').reverse().join('.'); // dd.mm.yyyy\n\n    const mandateTextTranslationProps = {\n        accountType: String(accountType).toLowerCase(),\n        accountNumber: String(accountNumber),\n        currentDate: formattedDate,\n        depositoryName: String(depositoryName),\n        routingNumber: String(routingNumber),\n        outstandingBalance: `${symbol || ''}${outstandingBalance || ''}`,\n        storeName: String(storeName),\n    };\n\n    const mandateText = language.translate(mandateTextTranslationKey, mandateTextTranslationProps);\n\n    useEffect(() => {\n        updateMandateText(mandateText);\n    }, [mandateText, updateMandateText]);\n\n    const handleChange = (value: boolean) => {\n        paymentForm.setFieldValue('orderConsent', value);\n    };\n\n    return (\n        <div className=\"mandate-text\" data-test=\"mandate-text\">\n            <CheckboxFormField\n                labelContent={mandateText}\n                name=\"orderConsent\"\n                onChange={handleChange}\n            />\n        </div>\n    );\n};\n\nexport default BraintreeAchMandateText;\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { AccountTypes, OwnershipTypes } from '../constants';\nimport useBraintreeAchInstruments from '../hooks/useBraintreeAchInstruments';\nimport useBraintreeAchValidation from '../hooks/useBraintreeAchValidation';\n\nimport BraintreeAchFormFields from './BraintreeAchFormFields';\nimport BraintreeAchMandateText from './BraintreeAchMandateText';\n\nexport interface BraintreeAchPaymentFormProps {\n    method: PaymentMethod;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchPaymentForm: FunctionComponent<BraintreeAchPaymentFormProps> = ({\n    method,\n    updateMandateText,\n}) => {\n    const [isValidForm, setIsValidForm] = useState(false);\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { disableSubmit, getFieldValue, getFormValues, setFieldValue } = paymentForm;\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    } = useBraintreeAchInstruments(method);\n    const { validateBraintreeAchForm, resetFormValidation } = useBraintreeAchValidation(method);\n\n    const resetFormValues = () => {\n        const { firstName, lastName } = checkoutState.data.getBillingAddress() || {};\n\n        const defaultFormValues = {\n            ownershipType: OwnershipTypes.Personal,\n            accountType: AccountTypes.Savings,\n            accountNumber: '',\n            routingNumber: '',\n            businessName: '',\n            firstName: firstName || '',\n            lastName: lastName || '',\n            shouldSaveInstrument: false,\n            shouldSetAsDefaultInstrument: false,\n            instrumentId: currentInstrument?.bigpayToken || '',\n            orderConsent: false,\n        };\n\n        for (const [key, value] of Object.entries(defaultFormValues)) {\n            setFieldValue(key, value);\n        }\n    };\n\n    useEffect(() => {\n        resetFormValues();\n    }, [currentInstrument?.bigpayToken]);\n\n    const shouldShowForm =\n        !shouldShowInstrumentFieldset || shouldCreateNewInstrument || shouldConfirmInstrument;\n    const shouldShowMandateTextCheckbox = shouldShowForm && isValidForm && !shouldConfirmInstrument;\n\n    useEffect(() => {\n        if (shouldShowForm) {\n            const validate = async () => {\n                const braintreeAchFormValues = getFormValues();\n                const isValid = await validateBraintreeAchForm(braintreeAchFormValues);\n\n                if (!isValid && getFieldValue('orderConsent')) {\n                    setFieldValue('orderConsent', false);\n                }\n\n                setIsValidForm(isValid);\n            };\n\n            void validate();\n        } else {\n            resetFormValidation();\n        }\n    }, [\n        getFormValues,\n        setFieldValue,\n        setIsValidForm,\n        shouldShowForm,\n        validateBraintreeAchForm,\n        resetFormValidation,\n    ]);\n\n    useEffect(() => {\n        const mandateTextConfirmationCheckboxValue = getFieldValue('orderConsent');\n\n        const inValidForInstrumentConfirmation = shouldConfirmInstrument && !isValidForm;\n        const inValidForDefaultTransactions =\n            shouldShowMandateTextCheckbox && !mandateTextConfirmationCheckboxValue;\n\n        const shouldDisableSubmit = shouldShowForm\n            ? inValidForInstrumentConfirmation || inValidForDefaultTransactions\n            : false;\n\n        disableSubmit(method, shouldDisableSubmit);\n    }, [disableSubmit, getFieldValue, isValidForm, method, shouldShowMandateTextCheckbox]);\n\n    return (\n        <div className=\"checkout-ach-form\" data-test=\"checkout-ach-form\">\n            {shouldShowInstrumentFieldset && (\n                <div className=\"checkout-ach-form__instrument\">\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                </div>\n            )}\n\n            {shouldConfirmInstrument && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            {shouldShowForm && <BraintreeAchFormFields />}\n\n            {isInstrumentFeatureAvailable && (\n                <StoreInstrumentFieldset\n                    instrumentId={currentInstrument?.bigpayToken}\n                    instruments={accountInstruments}\n                    isAccountInstrument\n                />\n            )}\n\n            {shouldShowMandateTextCheckbox && (\n                <BraintreeAchMandateText\n                    isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                    updateMandateText={updateMandateText}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeAchPaymentForm;\n","import React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeAchPaymentForm from './components/BraintreeAchPaymentForm';\n\nconst BraintreeAchPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const currentMandateTextRef = useRef('');\n    const updateMandateText = (currentMandateText: string) => {\n        currentMandateTextRef.current = currentMandateText;\n    };\n\n    useEffect(() => {\n        const initializePaymentOrThrow = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    braintreeach: {\n                        getMandateText: () => currentMandateTextRef.current,\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePaymentOrThrow();\n\n        return () => {\n            const deinitializePaymentOrThrow = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePaymentOrThrow();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = checkoutState.data.getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeAchPaymentForm\n                                method={method}\n                                updateMandateText={updateMandateText}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeAchPaymentMethod,\n    [{ id: 'braintreeach' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneCreditCardForm.scss';\n\ninterface BraintreeFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n}\n\nconst BraintreeFastlaneCreditCardForm: FunctionComponent<BraintreeFastlaneCreditCardFormProps> = ({\n    renderPayPalCardComponent,\n}) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#braintree-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"braintree-fastlane-cc-form-container\"\n            data-test=\"braintree-fastlane-cc-form-container\"\n            id=\"braintree-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BraintreeFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BraintreeFastlaneInstrumentsFormProps {\n    onChange: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n    selectedInstrument: CardInstrument;\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BraintreeFastlaneInstrumentsForm: FunctionComponent<\n    BraintreeFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"braintree-fastlane-instrument\"\n            data-test=\"braintree-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"braintree-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"braintree-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"braintree-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"braintree-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"braintree-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\nimport { useBraintreeFastlaneInstruments } from '../hooks/useBraintreeFastlaneInstruments';\n\nimport BraintreFastlaneCreditCardForm from './BraintreeFastlaneCreditCardForm';\nimport BraintreeFastlaneInstrumentsForm from './BraintreeFastlaneInstrumentsForm';\n\ninterface BraintreeFastlaneFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n}\n\nconst BraintreeFastlaneForm: FunctionComponent<BraintreeFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBraintreeFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\" id=\"braintree-fastlane\">\n            {shouldShowInstrumentsForm && (\n                <BraintreeFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BraintreFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBraintreeFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import BraintreeFastlanePaymentMethod from './BraintreeFastlanePaymentMethod';\n\nexport default BraintreeFastlanePaymentMethod;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeFastlaneForm from './components/BraintreeFastlaneForm';\n\nimport './BraintreeFastlanePaymentMethod.scss';\n\nexport interface BraintreeFastlaneComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BraintreeFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const paypalFastlaneComponentRef = useRef<BraintreeFastlaneComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                braintreefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalFastlaneComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalFastlaneComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: Error) => {\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalFastlaneComponentRef?.current?.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalFastlaneComponentRef.current?.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeFastlanePaymentMethod,\n    [{ id: 'braintreeacceleratedcheckout' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreeLocalPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const methodId = method.id;\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                braintreelocalmethods: {\n                    container: '#checkout-payment-continue',\n                    buttonText: language.translate('payment.continue_with_brand', {\n                        brandName: methodId,\n                    }),\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeLocalPaymentMethod,\n    [{ gateway: 'braintreelocalmethods' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const initializeBraintreePaypalPaymentMethod = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const { onUnhandledError, language, method, paymentForm } = rest;\n\n            return checkoutService.initializePayment({\n                ...defaultOptions,\n                braintree: {\n                    containerId: '#checkout-payment-continue',\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError?.(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError?.(error);\n                        }\n                    },\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                },\n            });\n        },\n        [rest, checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBraintreePaypalPaymentMethod}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreePaypalPaymentMethod,\n    [{ id: 'braintreepaypal' }],\n);\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { number } from 'card-validator';\n\nimport { WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","import {\n    CheckoutSelectors,\n    CustomerRequestOptions,\n    LanguageService,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    getPaymentMethodName,\n    PaymentFormService,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\n\nexport interface WalletButtonPaymentMethodProps {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WalletButtonPaymentMethodDerivedProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentDataRequired: boolean;\n    isPaymentSelected: boolean;\n}\n\nclass WalletButtonPaymentMethodComponent extends Component<WalletButtonPaymentMethodProps> {\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            paymentForm: { disableSubmit },\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<WalletButtonPaymentMethodProps & WalletButtonPaymentMethodDerivedProps>,\n    ): void {\n        const { method } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n        const { method: prevMethod, isPaymentDataRequired: prevIsPaymentDataRequired } = prevProps;\n\n        if (\n            method.initializationData !== prevMethod.initializationData ||\n            isPaymentDataRequired !== prevIsPaymentDataRequired\n        ) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const { isInitializing = false } = this.props;\n        const { isPaymentSelected } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    {isPaymentSelected ? this.renderPaymentView() : this.renderSignInView()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const { buttonId, signInButtonClassName, signInButtonLabel, method, language } = this.props;\n\n        return (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n                {signInButtonLabel || (\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_in_action\"\n                    />\n                )}\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const { buttonId, editButtonClassName, editButtonLabel, shouldShowEditButton, method } =\n            this.props;\n        const { accountMask, cardName, cardType, expiryMonth, expiryYear } =\n            this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <>\n                {!!cardName && (\n                    <p data-test=\"payment-method-wallet-card-name\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_name_label\" />:\n                        </strong>{' '}\n                        {cardName}\n                    </p>\n                )}\n\n                {!!accountMask && !!cardType && (\n                    <p data-test=\"payment-method-wallet-card-type\">\n                        <strong>{`${cardType}:`}</strong> {accountMask}\n                    </p>\n                )}\n\n                {!!expiryMonth && !!expiryYear && (\n                    <p data-test=\"payment-method-wallet-card-expiry\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                        </strong>{' '}\n                        {`${expiryMonth}/${expiryYear}`}\n                    </p>\n                )}\n\n                {!!shouldShowEditButton && (\n                    <p>\n                        {\n                            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                            <a\n                                className={editButtonClassName}\n                                href=\"#\"\n                                id={buttonId}\n                                onClick={preventDefault()}\n                            >\n                                {editButtonLabel || (\n                                    <TranslatedString id=\"remote.select_different_card_action\" />\n                                )}\n                            </a>\n                        }\n                    </p>\n                )}\n\n                <SignOutLink method={method} onSignOut={this.handleSignOut} />\n            </>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const {\n            paymentForm: { disableSubmit },\n            method,\n        } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        if (normalizeWalletPaymentData(method.initializationData) || !isPaymentDataRequired) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const { signOutCustomer, method, onSignOut = noop, onSignOutError = noop } = this.props;\n\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n\n    private getWalletButtonPaymentMethodDerivedProps(): WalletButtonPaymentMethodDerivedProps {\n        const { checkoutState, method } = this.props;\n        const {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        } = checkoutState;\n        const billingAddress = getBillingAddress();\n        const checkout = getCheckout();\n\n        if (!billingAddress || !checkout) {\n            throw new Error('Unable to get checkout');\n        }\n\n        const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n        return {\n            ...walletPaymentData,\n            // FIXME: I'm not sure how this would work for non-English names.\n            cardName:\n                walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        };\n    }\n}\n\nexport default WalletButtonPaymentMethodComponent;\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    CheckoutButtonResolveId,\n    PaymentMethodId,\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst VisaCheckoutPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeVisaCheckoutPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const mergedOptions = {\n                ...defaultOptions,\n                braintreevisacheckout: {\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"visaCheckoutWalletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            editButtonClassName=\"v-button\"\n            initializePayment={initializeVisaCheckoutPayment}\n            method={method}\n            shouldShowEditButton\n            signInButtonClassName=\"v-button\"\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    VisaCheckoutPaymentMethod,\n    [{ id: PaymentMethodId.BraintreeVisaCheckout }],\n);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface TextFieldProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nexport interface TextFieldFormProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nconst TextField: FunctionComponent<TextFieldProps> = (props) => {\n    const { additionalClassName, autoComplete, labelId, name } = props;\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <TextInput {...field} autoComplete={autoComplete} id={field.name} />\n        ),\n        [autoComplete],\n    );\n\n    const labelContent = useMemo(() => <TranslatedString id={labelId} />, [labelId]);\n\n    return (\n        <FormField\n            additionalClassName={additionalClassName}\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nconst TextFieldForm: FunctionComponent<TextFieldFormProps> = ({\n    additionalClassName,\n    autoComplete,\n    labelId,\n    name,\n}) => (\n    <Fieldset>\n        <div className=\"form-ccFields\">\n            <TextField\n                additionalClassName={additionalClassName}\n                autoComplete={autoComplete}\n                labelId={labelId}\n                name={name}\n            />\n        </div>\n    </Fieldset>\n);\n\nexport default memo(TextFieldForm);\n","import { BillingAddress, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, {\n    FunctionComponent,\n    SyntheticEvent,\n    useCallback,\n    useContext,\n    useEffect,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nimport TextFieldForm from './checkoutcomFieldsets/TextFieldForm';\n\ninterface CheckoutcomAPMFormProps {\n    method: PaymentMethod;\n    debtor: BillingAddress;\n}\n\ninterface Issuer {\n    bic: string;\n    name: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: string;\n}\n\ninterface DropdownButtonProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface OptionButtonProps {\n    className?: string;\n    issuer: Issuer;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\ninterface SepaCreditor {\n    sepaCreditorAddress: string;\n    sepaCreditorCity: string;\n    sepaCreditorCompanyName: string;\n    sepaCreditorCountry: string;\n    sepaCreditorIdentifier: string;\n    sepaCreditorPostalCode: string;\n}\n\nconst Sepa: FunctionComponent<CheckoutcomAPMFormProps> = ({ method, debtor }) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const creditor: SepaCreditor = method.initializationData.sepaCreditor;\n\n    useEffect(() => {\n        paymentContext?.paymentForm.disableSubmit(method, true);\n\n        return () => paymentContext?.paymentForm.disableSubmit(method, false);\n    }, [paymentContext, method]);\n\n    function toggleSubmitButton(isChecked: boolean) {\n        paymentContext?.paymentForm.disableSubmit(method, !isChecked);\n    }\n\n    return (\n        <>\n            <div className=\"checkoutcom-sepa-column-container\">\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_creditor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{creditor.sepaCreditorCompanyName}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorAddress}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${creditor.sepaCreditorPostalCode} ${creditor.sepaCreditorCity}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorCountry}</p>\n                    <br />\n                    <p className=\"checkoutcom-sepa-line\">\n                        <TranslatedString\n                            data={{ creditorId: creditor.sepaCreditorIdentifier }}\n                            id=\"payment.checkoutcom_sepa_creditor_id\"\n                        />\n                    </p>\n                </div>\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_debtor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{`${debtor.firstName} ${debtor.lastName}`}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.address1}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${debtor.postalCode} ${debtor.city}, ${debtor.stateOrProvinceCode}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.countryCode}</p>\n                </div>\n            </div>\n            <p className=\"checkoutcom-sepa-line\">\n                <TranslatedString id=\"payment.checkoutcom_sepa_payment_type\" />\n            </p>\n            <br />\n\n            <TextFieldForm\n                additionalClassName=\"form-field--iban\"\n                autoComplete=\"iban\"\n                labelId=\"payment.sepa_account_number\"\n                name=\"iban\"\n            />\n            <CheckboxFormField\n                labelContent={\n                    <TranslatedString\n                        data={{ creditorName: creditor.sepaCreditorCompanyName }}\n                        id=\"payment.checkoutcom_sepa_mandate_disclaimer\"\n                    />\n                }\n                name=\"sepaMandate\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onChange={toggleSubmitButton}\n            />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    form,\n    selectedIssuer,\n}) => {\n    const Input = useCallback(() => <input {...restField} type=\"hidden\" />, [restField]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void form.setFieldValue(restField.name, selectedIssuer);\n    }, [value, form, selectedIssuer, restField.name]);\n\n    return <Input />;\n};\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...restProps }) => {\n    const { bic, name } = issuer;\n\n    return (\n        <button data-bic={bic} type=\"button\" {...restProps}>\n            <div className=\"instrumentSelect-details\">{`${bic} / ${name}`}</div>\n        </button>\n    );\n};\n\nconst DropdownButton: FunctionComponent<DropdownButtonProps> = ({ selectedIssuer }) => {\n    if (!selectedIssuer) {\n        return (\n            <button\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                type=\"button\"\n            >\n                <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n                    <div className=\"instrumentSelect-card\">Your bank</div>\n                </div>\n            </button>\n        );\n    }\n\n    return (\n        <OptionButton\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            issuer={selectedIssuer}\n        />\n    );\n};\n\nconst Fawry: FunctionComponent<CheckoutcomAPMFormProps> = () => {\n    return (\n        <>\n            <TextFieldForm\n                additionalClassName=\"form-field--customerMobile\"\n                autoComplete=\"tel\"\n                labelId=\"payment.checkoutcom_fawry_customer_mobile_label\"\n                name=\"customerMobile\"\n            />\n            <TextFieldForm\n                additionalClassName=\"form-field--customerEmail\"\n                autoComplete=\"email\"\n                labelId=\"payment.checkoutcom_fawry_customer_email_label\"\n                name=\"customerEmail\"\n            />\n        </>\n    );\n};\n\nconst Ideal: FunctionComponent<CheckoutcomAPMFormProps> = ({ method }) => {\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer | undefined>();\n    const [bicValue, setBicValue] = useState<string>('');\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={bicValue} />,\n        [bicValue],\n    );\n\n    const issuers: Issuer[] = method.initializationData.idealIssuers;\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        // eslint-disable-next-line no-underscore-dangle\n        const _selectedIssuer = issuers.find(({ bic }) => bic === currentTarget.dataset.bic);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n        setBicValue(_selectedIssuer.bic);\n    };\n\n    const issuersList = (\n        <ul className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\">\n            {issuers.map((issuer) => (\n                <li className=\"instrumentSelect-option dropdown-menu-item\" key={issuer.bic}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <DropdownButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"bic\" />\n        </>\n    );\n};\n\nconst checkoutcomCustomFormFields: CheckoutcomCustomFormFields = {\n    fawry: Fawry,\n    sepa: Sepa,\n    ideal: Ideal,\n};\n\ninterface CheckoutcomCustomFormFields {\n    [key: string]: React.FunctionComponent<CheckoutcomAPMFormProps>;\n}\n\nexport const ccDocumentField = ({ method }: CheckoutcomAPMFormProps) => (\n    <TextFieldForm\n        additionalClassName=\"form-field--ccDocument\"\n        autoComplete=\"cc-document\"\n        labelId={`payment.checkoutcom_document_label_${method.id}`}\n        name=\"ccDocument\"\n    />\n);\n\nexport default checkoutcomCustomFormFields;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { boolean, object, ObjectSchema, string } from 'yup';\n\nimport {\n    DocumentOnlyCustomFormFieldsetValues,\n    FawryCustomFormFieldsetValues,\n    IdealCustomFormFieldsetValues,\n    SepaCustomFormFieldsetValues,\n} from './CheckoutcomFormValues';\n\nexport type checkoutcomCustomPaymentMethods = 'fawry' | 'sepa';\nexport type documentPaymentMethods = 'oxxo' | 'qpay' | 'boleto' | 'ideal';\nexport type checkoutcomPaymentMethods = documentPaymentMethods | checkoutcomCustomPaymentMethods;\nexport const checkoutcomPaymentMethodsArray = ['fawry', 'sepa', 'oxxo', 'qpay', 'boleto', 'ideal'];\nexport interface CustomValidationSchemaOptions {\n    paymentMethod: checkoutcomPaymentMethods;\n    language: LanguageService;\n}\n\nconst checkoutComShemas: {\n    [key in checkoutcomPaymentMethods]: (language: LanguageService) => any;\n} = {\n    oxxo: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_oxxo'))\n            .length(18, language.translate('payment.checkoutcom_document_invalid_error_oxxo')),\n    }),\n    qpay: (language: LanguageService) => ({\n        ccDocument: string()\n            .notRequired()\n            .max(32, language.translate('payment.checkoutcom_document_invalid_error_qpay')),\n    }),\n    boleto: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .min(11, language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .max(14, language.translate('payment.checkoutcom_document_invalid_error_boleto')),\n    }),\n    sepa: (language: LanguageService) => ({\n        iban: string().required(language.translate('payment.sepa_account_number_required')),\n        sepaMandate: boolean().required(language.translate('payment.sepa_mandate_required')),\n    }),\n    ideal: (language: LanguageService) => ({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    }),\n    fawry: (language: LanguageService) => ({\n        customerMobile: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'))\n            .matches(\n                new RegExp(`^\\\\d{11}$`),\n                language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'),\n            ),\n        customerEmail: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error'))\n            .email(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error')),\n    }),\n};\n\nexport default memoize(function getCheckoutcomValidationSchemas({\n    paymentMethod,\n    language,\n}: CustomValidationSchemaOptions): ObjectSchema<\n    | DocumentOnlyCustomFormFieldsetValues\n    | FawryCustomFormFieldsetValues\n    | IdealCustomFormFieldsetValues\n    | SepaCustomFormFieldsetValues\n> {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return object(checkoutComShemas[paymentMethod](language));\n});\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport checkoutcomCustomFormFields, { ccDocumentField } from './CheckoutcomCustomFormFields';\nimport { checkoutcomPaymentMethods, getCheckoutcomValidationSchemas } from './checkoutcomFieldsets';\nimport { checkoutcomPaymentMethodsArray } from './checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas';\n\nexport interface CheckoutcomCustomPaymentMethodProps\n    extends Omit<CreditCardPaymentMethodProps, 'cardFieldset' | 'cardValidationSchema'> {\n    checkoutCustomMethod: string;\n}\n\nconst isCheckoutcomPaymentMethod = (methodId: string): methodId is checkoutcomPaymentMethods => {\n    return Object.values(checkoutcomPaymentMethodsArray).includes(methodId);\n};\nconst CheckoutcomCustomPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    method,\n    checkoutService,\n    checkoutState,\n    ...rest\n}) => {\n    const { getConfig } = checkoutState.data;\n    const isIdealHostedPageExperimentOn =\n        getConfig()?.checkoutSettings.features['PI-2979.checkoutcom_enable_ideal_hosted_page'];\n\n    const checkoutCustomMethod = method.id;\n    const CheckoutcomCustomFieldset =\n        checkoutCustomMethod in checkoutcomCustomFormFields\n            ? checkoutcomCustomFormFields[checkoutCustomMethod]\n            : ccDocumentField;\n\n    const billingAddress = checkoutState.data.getBillingAddress();\n\n    if (\n        !isCheckoutcomPaymentMethod(checkoutCustomMethod) ||\n        (checkoutCustomMethod === 'ideal' && isIdealHostedPageExperimentOn)\n    ) {\n        return null;\n    }\n\n    return (\n        <CreditCardPaymentMethodComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            {...rest}\n            cardFieldset={<CheckoutcomCustomFieldset debtor={billingAddress!} method={method} />}\n            cardValidationSchema={getCheckoutcomValidationSchemas({\n                paymentMethod: checkoutCustomMethod,\n                language,\n            })}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    CheckoutcomCustomPaymentMethod,\n    [\n        { gateway: 'checkoutcom', id: 'ideal' },\n        { gateway: 'checkoutcom', id: 'fawry' },\n        { gateway: 'checkoutcom', id: 'oxxo' },\n        { gateway: 'checkoutcom', id: 'boleto' },\n        { gateway: 'checkoutcom', id: 'sepa' },\n        { gateway: 'checkoutcom', id: 'qpay' },\n        { gateway: 'checkoutcom', id: 'p24' },\n    ],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ClearpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ClearpayPaymentMethod,\n    [{ gateway: 'clearpay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    CheckoutButtonResolveId,\n    PaymentMethodId,\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst GooglePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeGooglePayPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const loadingContainerId = 'checkout-app';\n            const mergedOptions = {\n                ...defaultOptions,\n                [PaymentMethodId.AdyenV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AdyenV3GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AuthorizeNetGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BNZGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BigCommercePaymentsGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BraintreeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.PayPalCommerceGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeUPEGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CybersourceV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.OrbitalGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CheckoutcomGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.WorldpayAccessGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.TdOnlineMartGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeOCSGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"walletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeGooglePayPayment}\n            method={method}\n            shouldShowEditButton\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    GooglePayPaymentMethod,\n    [\n        { id: PaymentMethodId.AdyenV2GooglePay },\n        { id: PaymentMethodId.AdyenV3GooglePay },\n        { id: PaymentMethodId.AuthorizeNetGooglePay },\n        { id: PaymentMethodId.BNZGooglePay },\n        { id: PaymentMethodId.BraintreeGooglePay },\n        { id: PaymentMethodId.PayPalCommerceGooglePay },\n        { id: PaymentMethodId.BigCommercePaymentsGooglePay },\n        { id: PaymentMethodId.CheckoutcomGooglePay },\n        { id: PaymentMethodId.CybersourceV2GooglePay },\n        { id: PaymentMethodId.OrbitalGooglePay },\n        { id: PaymentMethodId.StripeGooglePay },\n        { id: PaymentMethodId.StripeUPEGooglePay },\n        { id: PaymentMethodId.WorldpayAccessGooglePay },\n        { id: PaymentMethodId.TdOnlineMartGooglePay },\n        { id: PaymentMethodId.StripeOCSGooglePay },\n    ],\n);\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from './components';\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n    const {\n        config: { cardCode, showCardHolderName },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId = '';\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: isCardHolderNameRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_name_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccName'),\n                                }\n                              : undefined,\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const hostedFieldset = (\n        <HostedCreditCardFieldset\n            additionalFields={\n                method.config.requireCustomerCode && (\n                    <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                )\n            }\n            cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n            cardExpiryId={getHostedFieldId('ccExpiry')}\n            cardNameId={isCardHolderNameRequired ? getHostedFieldId('ccName') : undefined}\n            cardNumberId={getHostedFieldId('ccNumber')}\n            focusedFieldType={focusedFieldType}\n        />\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: {\n                        form: await getHostedFormOptions(selectedInstrument),\n                        bigpayToken: selectedInstrument?.bigpayToken,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const props = {\n        checkoutService,\n        checkoutState,\n        paymentForm,\n        language,\n        method,\n        onUnhandledError,\n    };\n\n    return (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedCreditCardPaymentMethod,\n    [\n        {\n            id: 'hosted-credit-card',\n        },\n        { id: 'credit_card', gateway: 'bluesnapdirect' },\n        { id: 'tdonlinemart' },\n    ],\n);\n","import { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaPayment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarna: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaPaymentMethod,\n    [{ id: 'klarna' }],\n);\n","import { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaV2Payment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarnav2: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaV2PaymentMethod,\n    [{ gateway: 'klarna' }],\n);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FieldProps, useField } from 'formik';\nimport React, { FunctionComponent, SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface MollieCustomCardFormProps {\n    method: PaymentMethod;\n}\n\nexport interface Issuer {\n    name: string;\n    image: {\n        size1x: string;\n    };\n    id: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface SelecteIssuerProp {\n    selectedIssuer: Issuer;\n}\n\ninterface OptionButtonProps {\n    issuer: Issuer;\n    className?: string;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\nconst MollieAPMCustomForm: FunctionComponent<MollieCustomCardFormProps & WithLanguageProps> = ({\n    method,\n    language,\n}) => {\n    const issuers: Issuer[] = method.initializationData?.paymentMethodsResponse;\n\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer>({\n        name: language.translate('payment.select_your_bank'),\n        id: '',\n        image: { size1x: '' },\n    });\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={selectedIssuer} />,\n        [selectedIssuer],\n    );\n\n    if (!issuers || issuers.length === 0) {\n        return <></>;\n    }\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        const _selectedIssuer = issuers.find(({ id }) => id === currentTarget.dataset.id);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n    };\n\n    const issuersList = (\n        <ul\n            className=\"dropdown-menu instrumentSelect-dropdownMenu mollie-instrument-card\"\n            id=\"issuersDropdown\"\n        >\n            {issuers.map((issuer) => (\n                <li className=\"dropdown-menu-item dropdown-menu-item--select\" key={issuer.id}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <IssuerSelectButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"issuer\" />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    selectedIssuer,\n}) => {\n    const [field, _, helpers] = useField(restField.name);\n    const Input = useCallback(() => <input {...field} type=\"hidden\" />, [field]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void helpers.setValue(selectedIssuer?.id);\n    }, [value, selectedIssuer, helpers]);\n\n    return <Input />;\n};\n\nexport const IssuerSelectButton: FunctionComponent<SelecteIssuerProp> = ({ selectedIssuer }) => (\n    <a\n        className=\"instrumentSelect instrumentSelect-card button dropdown-button dropdown-toogle--select\"\n        href=\"#\"\n        id=\"issuerToggle\"\n        onClick={preventDefault()}\n    >\n        {selectedIssuer.name}\n    </a>\n);\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...props }) => {\n    const { name, image, id } = issuer;\n\n    return (\n        <a className=\"instrumentSelect-details mollie-instrument-list\" {...props} data-id={id}>\n            <label className=\"mollie-instrument-left\">{name}</label>\n            <img alt={name} data-test=\"cart-item-image\" src={image.size1x} />\n        </a>\n    );\n};\n\nexport default withLanguage(MollieAPMCustomForm);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport MollieAPMCustomForm from './MollieAPMCustomForm';\n\nexport interface MollieCustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n        cardHolderElementOptions: {\n            containerId: string;\n        };\n    };\n    isCreditCard: boolean;\n    method: PaymentMethod;\n}\n\nconst MollieCustomCardForm: React.FunctionComponent<MollieCustomCardFormProps> = ({\n    options,\n    isCreditCard,\n    method,\n}) =>\n    !isCreditCard ? (\n        <MollieAPMCustomForm method={method} />\n    ) : (\n        <div className=\"form-ccFields\">\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardNumberElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_number_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input', 'has-icon')}\n                    data-cse=\"CardNumber\"\n                    id={options.cardNumberElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardHolderElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_name_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"CardHolder\"\n                    id={options.cardHolderElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside', 'mollie-paddingRight')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardCvcElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                    <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                        <span className=\"has-tip\">\n                            <IconHelp />\n                        </span>\n                    </TooltipTrigger>\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"SecurityCode\"\n                    id={options.cardCvcElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardExpiryElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"ExpiryDate\"\n                    id={options.cardExpiryElementOptions.containerId}\n                />\n            </div>\n        </div>\n    );\n\nexport default MollieCustomCardForm;\n","import {\n    CardInstrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn, some } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useContext, useState } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport MollieCustomCardForm from './MollieCustomCardForm';\n\nexport enum MolliePaymentMethodType {\n    creditcard = 'credit_card',\n}\n\nconst MolliePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutState,\n    checkoutService,\n    language,\n    paymentForm,\n    ...props\n}) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const localeContext = useContext(LocaleContext);\n    const containerId = `mollie-${method.method}`;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const {\n        setFieldTouched,\n        setFieldValue,\n        setSubmitted,\n        submitForm,\n        setSubmit,\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n    const initializeMolliePayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const mollieElements = getMolliesElementOptions();\n\n            return checkoutService.initializePayment({\n                ...options,\n                mollie: {\n                    containerId,\n                    cardNumberId: mollieElements.cardNumberElementOptions.containerId,\n                    cardCvcId: mollieElements.cardCvcElementOptions.containerId,\n                    cardHolderId: mollieElements.cardHolderElementOptions.containerId,\n                    cardExpiryId: mollieElements.cardExpiryElementOptions.containerId,\n                    styles: {\n                        base: {\n                            color: '#333333',\n                            '::placeholder': {\n                                color: '#999999',\n                            },\n                        },\n                        valid: {\n                            color: '#090',\n                        },\n                        invalid: {\n                            color: '#D14343',\n                        },\n                    },\n                    unsupportedMethodMessage: localeContext?.language.translate(\n                        'payment.mollie_unsupported_method_error',\n                    ),\n                    disableButton: (disabled: boolean) => {\n                        if (paymentContext) {\n                            disableSubmit(method, disabled);\n                        }\n                    },\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            disableSubmit,\n            localeContext?.language,\n            getHostedFormOptions,\n            paymentContext,\n            method,\n        ],\n    );\n\n    const getMolliesElementOptions = () => {\n        return {\n            cardNumberElementOptions: {\n                containerId: 'mollie-card-number-component-field',\n            },\n            cardExpiryElementOptions: {\n                containerId: 'mollie-card-expiry-component-field',\n            },\n            cardCvcElementOptions: {\n                containerId: 'mollie-card-cvc-component-field',\n            },\n            cardHolderElementOptions: {\n                containerId: 'mollie-card-holder-component-field',\n            },\n        };\n    };\n\n    function renderCustomPaymentForm() {\n        const options = getMolliesElementOptions();\n\n        return (\n            <MollieCustomCardForm isCreditCard={isCreditCard()} method={method} options={options} />\n        );\n    }\n\n    function isCreditCard(): boolean {\n        return method.method === MolliePaymentMethodType.creditcard;\n    }\n\n    function validateInstrument(_shouldShowNumber: boolean, selectedInstrument: CardInstrument) {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    }\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...props}\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hideContentWhenSignedOut\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMolliePayment}\n            instruments={instruments}\n            isAccountInstrument={!isCreditCard()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument={true}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n            validateInstrument={validateInstrument}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MolliePaymentMethod,\n    [{ gateway: 'mollie' }, { gateway: 'mollie', id: 'applepay' }],\n);\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    LanguageService,\n    LegacyHostedFormOptions,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n","import { CardInstrument, PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst MonerisPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const containerId = `moneris-iframe-container`;\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const initializeMonerisPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const paymentConfig = {\n                ...options,\n                moneris: {\n                    containerId,\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            };\n\n            return checkoutService.initializePayment(paymentConfig);\n        },\n        [containerId, getHostedFormOptions, checkoutService],\n    );\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMonerisPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n            validateInstrument={validateInstrument}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MonerisPaymentMethod,\n    [{ id: 'moneris' }],\n);\n","import { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst OfflinePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    return null;\n};\n\nexport default toResolvableComponent(OfflinePaymentMethod, [\n    {\n        type: 'PAYMENT_TYPE_OFFLINE',\n    },\n]);\n","import {\n    AccountInstrument,\n    HostedInstrument,\n    PayPalCommerceAlternativeMethodsPaymentOptions,\n    PayPalCommerceCreditPaymentInitializeOptions,\n    PayPalCommercePaymentInitializeOptions,\n    PayPalCommerceVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype PayPalCommerceProvidersPaymentInitializeOptions =\n    PayPalCommerceAlternativeMethodsPaymentOptions &\n        PayPalCommerceCreditPaymentInitializeOptions &\n        PayPalCommercePaymentInitializeOptions &\n        PayPalCommerceVenmoPaymentInitializeOptions;\n\ninterface PayPalCommercePaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<PayPalCommerceProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst PayPalCommercePaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & PayPalCommercePaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default PayPalCommercePaymentMethodComponent;\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const { id } = method;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"paypalcommercealternativemethods\"\n            {...props}\n        >\n            <div className={`widget widget--${id} payment-widget`} id={widgetContainerId} />\n        </PayPalCommercePaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceAPMsPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceCreditPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsKey=\"paypalcommercecredit\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditPaymentMethod,\n    [{ id: 'paypalcommercecredit' }],\n);\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst PayPalCommerceCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializePayPalCommerceCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    paypalcommercecreditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching PayPal Commerce Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditCardPaymentMethod,\n    [{ id: 'paypalcommercecreditcards' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneCreditCardForm.scss';\n\ninterface PayPalCommerceFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst PayPalCommerceFastlaneCreditCardForm: FunctionComponent<\n    PayPalCommerceFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#paypal-commerce-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-cc-form-container\"\n            data-test=\"paypal-commerce-fastlane-cc-form-container\"\n            id=\"paypal-commerce-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default PayPalCommerceFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface PayPalCommerceFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst PayPalCommerceFastlaneInstrumentsForm: FunctionComponent<\n    PayPalCommerceFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-instrument\"\n            data-test=\"paypal-commerce-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"paypal-commerce-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"paypal-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"paypal-commerce-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"paypal-commerce-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"paypal-commerce-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { usePayPalCommerceFastlaneInstruments } from '../hooks/usePayPalCommerceFastlaneInstruments';\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport PayPalCommerceFastlaneCreditCardForm from './PayPalCommerceFastlaneCreditCardForm';\nimport PayPalCommerceFastlaneInstrumentsForm from './PayPalCommerceFastlaneInstrumentsForm';\n\ninterface PayPalCommerceFastlaneFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst PayPalCommerceFastlaneForm: FunctionComponent<PayPalCommerceFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        usePayPalCommerceFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const usePayPalCommerceFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommerceFastlaneForm from './components/PayPalCommerceFastlaneForm';\n\nimport './PayPalCommerceFastlanePaymentMethod.scss';\nimport isErrorWithTranslationKey from './is-error-with-translation-key';\n\nexport interface PayPalFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst PayPalCommerceFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<PayPalFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                paypalcommercefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <PayPalCommerceFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceFastlanePaymentMethod,\n    [{ id: 'paypalcommerceacceleratedcheckout' }],\n);\n","import PayPalCommerceFastlanePaymentMethod from './PayPalCommerceFastlanePaymentMethod';\n\nexport default PayPalCommerceFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import { AccountInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst usePaypalCommerceInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default usePaypalCommerceInstrument;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nimport usePaypalCommerceInstrument from './hooks/usePaypalCommerceInstruments';\n\nconst PayPalCommercePaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = usePaypalCommerceInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <PayPalCommercePaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"paypalcommerce\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </PayPalCommercePaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommercePaymentMethod,\n    [{ id: 'paypalcommerce' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent providerOptionsKey=\"paypalcommercevenmo\" {...props} />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceVenmoPaymentMethod,\n    [{ id: 'paypalcommercevenmo' }],\n);\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, StringSchema } from 'yup';\n\nexport default memoize(function getPaypalCommerceRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    CountryData,\n    CustomError,\n    getCountryData,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    SpecificError,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getPaypalCommerceRatePayValidationSchema from './validation-schema/getPaypalCommerceRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst PaypalCommerceRatePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    const getCountryInfo = (): CountryData | undefined => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        if (billing && !billing.country) {\n            return getCountryData(billing.country)[0];\n        }\n    };\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                paypalcommerceratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => {\n                        // TODO: update PPCP Ratepay initialization data with getFieldsValues optional return data in checkout-sdk\n                        const defaultFieldValues = {\n                            ratepayBirthDate: {\n                                getDate: () => 0,\n                                getMonth: () => 0,\n                                getFullYear: () => 0,\n                            },\n                            ratepayPhoneCountryCode: '',\n                            ratepayPhoneNumber: '',\n                        };\n\n                        return {\n                            ...defaultFieldValues,\n                            ...fieldsValues.current,\n                        };\n                    },\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }): void => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    const validationSchema = useMemo(\n        () =>\n            getPaypalCommerceRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    useEffect(() => {\n        const countryInfo = getCountryInfo();\n\n        if (countryInfo) {\n            setFieldValue('ratepayPhoneCountryCode', countryInfo.dialCode);\n        }\n    }, []);\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const formContextProps = {\n        isSubmitted: isSubmitted(),\n        setSubmitted,\n    };\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={formContextProps}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalCommerceRatePayPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods', id: 'ratepay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaypalExpressPaymentMethodProps {\n    isEmbedded?: boolean;\n}\n\nconst PaypalExpressPaymentMethod: FunctionComponent<\n    PaymentMethodProps & PaypalExpressPaymentMethodProps\n> = ({ checkoutService, isEmbedded = false, ...rest }) => {\n    const initializePaypalExpressPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                paypalexpress: {\n                    useRedirectFlow: isEmbedded,\n                },\n            }),\n        [checkoutService, isEmbedded],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePaypalExpressPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalExpressPaymentMethod,\n    [{ id: 'paypalexpress' }],\n);\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    CheckoutService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport {\n    CardInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface SquareV2FormProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    containerId: string;\n    deinitializePayment: () => Promise<void>;\n    initializePayment: () => Promise<void>;\n    method: PaymentMethod;\n}\n\nconst SquareV2Form: FunctionComponent<SquareV2FormProps> = ({\n    checkoutService,\n    checkoutState,\n    containerId,\n    deinitializePayment,\n    initializePayment,\n    method,\n}) => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n\n    const { getCustomer, getInstruments } = checkoutState.data;\n    const isSignedIn = getCustomer()?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n\n    useEffect(() => {\n        if (isInstrumentFeatureAvailable) {\n            void checkoutService.loadInstruments();\n        }\n    }, [checkoutService, isInstrumentFeatureAvailable]);\n\n    const instruments = useMemo(() => getInstruments(method) || [], [getInstruments, method]);\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n\n    const getDefaultInstrumentId = useCallback(() => {\n        if (isAddingNewCard) {\n            return;\n        }\n\n        if (instruments.length > 0) {\n            const defaultInstrument =\n                instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n            return defaultInstrument.bigpayToken;\n        }\n    }, [instruments, isAddingNewCard]);\n\n    useEffect(() => {\n        const defaultInstrumentId = getDefaultInstrumentId() || undefined;\n\n        setSelectedInstrumentId(defaultInstrumentId);\n    }, [getDefaultInstrumentId, instruments]);\n\n    const { setFieldValue } = usePaymentFormContext().paymentForm;\n\n    const handleSelectInstrument: (id: string) => void = (id) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    };\n\n    const handleDeleteInstrument: (id: string) => void = (id) => {\n        if (instruments.length === 0) {\n            setIsAddingNewCard(true);\n            setSelectedInstrumentId(undefined);\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            setSelectedInstrumentId(getDefaultInstrumentId());\n\n            setFieldValue('instrumentId', getDefaultInstrumentId());\n        }\n    };\n\n    const handleUseNewCard: () => void = () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        void deinitializePayment();\n\n        void initializePayment();\n    };\n\n    const renderPlaceholderFields = () => {\n        return (\n            <div data-test=\"squarev2_placeholder_form\" style={{ display: 'none' }}>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-label optimizedCheckout-form-label\"\n                        id=\"messageIsDefault\"\n                    />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsDefault\" />\n                </div>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-input optimizedCheckout-form-input form-input--focus optimizedCheckout-form-input--focus\"\n                        id=\"inputIsFocus\"\n                    />\n                </div>\n                <div className=\"form-field form-field--error\">\n                    <div className=\"form-inlineMessage\" id=\"messageIsError\" />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsError\" />\n                </div>\n            </div>\n        );\n    };\n\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    return (\n        <LoadingOverlay\n            data-test=\"squarev2_loading_overlay\"\n            hideContentWhenLoading\n            isLoading={isLoadingInstruments()}\n        >\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                        instruments={instruments as CardInstrument[]}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={selectedInstrumentId || getDefaultInstrumentId()}\n                    />\n                )}\n                <div\n                    className={classNames('widget', `widget--${method.id}`, 'payment-widget')}\n                    data-test={containerId}\n                    style={{\n                        display: !shouldShowCreditCardFieldset ? 'none' : undefined,\n                    }}\n                    tabIndex={-1}\n                >\n                    {renderPlaceholderFields()}\n                    <div id={containerId} />\n                </div>\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={selectedInstrumentId}\n                        instruments={instruments}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default SquareV2Form;\n","import { difference } from 'lodash';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport SquareV2Form from './SquareV2Form';\n\nconst SquareV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n}) => {\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const container = document.querySelector<HTMLDivElement>(`#${id}`);\n\n        if (!container) {\n            throw new Error(\n                `Unable to retrieve input styles as the provided container ID \"${id}\" is not valid.`,\n            );\n        }\n\n        return getAppliedStyles(container, properties);\n    };\n\n    const copyStylesFromDummyFormFields = useCallback(() => {\n        const styleProps = [\n            'backgroundColor',\n            'borderColor',\n            'borderRadius',\n            'borderWidth',\n            'color',\n            'fontSize',\n            'fontWeight',\n        ];\n\n        return {\n            default: {\n                message: getStylesFromElement('messageIsDefault', ['color']),\n                input: getStylesFromElement('inputIsDefault', styleProps),\n            },\n            focus: {\n                input: getStylesFromElement(\n                    'inputIsFocus',\n                    difference(styleProps, ['borderRadius']),\n                ),\n            },\n            error: {\n                message: getStylesFromElement('messageIsError', ['color']),\n                input: getStylesFromElement('inputIsError', [\n                    'borderColor',\n                    'borderWidth',\n                    'color',\n                ]),\n            },\n        };\n    }, []);\n\n    const mapToSquareStyles = useCallback(\n        (styles: ReturnType<typeof copyStylesFromDummyFormFields>) => {\n            const { borderColor, borderRadius, borderWidth, ...input } = styles.default.input;\n            const {\n                borderColor: borderColorIsFocus,\n                borderWidth: borderWidthIsFocus,\n                ...inputIsFocus\n            } = styles.focus.input;\n            const {\n                borderColor: borderColorIsError,\n                borderWidth: borderWidthIsError,\n                color: colorIsError,\n            } = styles.error.input;\n\n            return {\n                input,\n                'input.is-focus': {\n                    ...inputIsFocus,\n                },\n                'input.is-error': {\n                    color: colorIsError,\n                },\n                '.input-container': {\n                    borderColor,\n                    borderRadius,\n                    borderWidth,\n                },\n                '.input-container.is-focus': {\n                    borderColor: borderColorIsFocus,\n                    borderWidth: borderWidthIsFocus,\n                },\n                '.input-container.is-error': {\n                    borderColor: borderColorIsError,\n                    borderWidth: borderWidthIsError,\n                },\n                '.message-text': {\n                    color: styles.default.message.color,\n                },\n                '.message-icon': {\n                    color: styles.default.message.color,\n                },\n                '.message-text.is-error': {\n                    color: styles.error.message.color,\n                },\n                '.message-icon.is-error': {\n                    color: styles.error.message.color,\n                },\n            };\n        },\n        [],\n    );\n\n    const containerId = 'squarev2_payment_element_container';\n\n    const initializePayment = useCallback(async () => {\n        let style;\n\n        try {\n            style = mapToSquareStyles(copyStylesFromDummyFormFields());\n        } catch {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        await checkoutService.initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n            squarev2: {\n                containerId,\n                style,\n            },\n        });\n    }, [\n        checkoutService,\n        copyStylesFromDummyFormFields,\n        mapToSquareStyles,\n        method.gateway,\n        method.id,\n    ]);\n\n    const deinitializePayment = useCallback(async () => {\n        await checkoutService.deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [checkoutService, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, [deinitializePayment, initializePayment]);\n\n    return (\n        <SquareV2Form\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            containerId={containerId}\n            deinitializePayment={deinitializePayment}\n            initializePayment={initializePayment}\n            method={method}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    SquareV2PaymentMethod,\n    [{ id: 'squarev2' }],\n);\n","import { StripeAppearanceOptions, StripeCustomFont } from '@bigcommerce/checkout-sdk';\nimport { isEmpty } from 'lodash';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nconst getStylesFromElement = (\n    selector: string,\n    properties: string[],\n    pseudoElementSelector?: string,\n) => {\n    const element = document.querySelector<HTMLElement>(selector);\n\n    return element ? getAppliedStyles(element, properties, pseudoElementSelector) : {};\n};\n\nconst parseRadioIconSize = (size: string | number = 0): number =>\n    typeof size !== 'number' ? parseInt(size, 10) : size;\n\nconst getRadioIconSizes = (sizes?: Record<string, string | number | undefined>) => {\n    const {\n        radioIconOuterWidth = 26,\n        radioIconOuterStrokeWidth = 1,\n        radioIconInnerWidth = 17,\n    } = sizes || {};\n    const stripeSVGSizeCoefficient = 0.88; // Provided by Stripe team for scaling SVGs.\n\n    const percentageCoefficient = stripeSVGSizeCoefficient * 100;\n    const outerWidth = parseRadioIconSize(radioIconOuterWidth);\n    const outerStrokeWidth = parseRadioIconSize(radioIconOuterStrokeWidth);\n    const innerWidth = parseRadioIconSize(radioIconInnerWidth);\n\n    const stripeEqualOuterWidth = (outerWidth / stripeSVGSizeCoefficient).toFixed(2);\n    const stripeEqualOuterStrokeWidth = (\n        (outerStrokeWidth / outerWidth) *\n        percentageCoefficient\n    ).toFixed(2);\n    const stripeEqualInnerRadius = (\n        ((innerWidth / outerWidth) * percentageCoefficient) /\n        2\n    ).toFixed(2);\n\n    return {\n        outerWidth: `${stripeEqualOuterWidth}px`,\n        outerStrokeWidth: `${stripeEqualOuterStrokeWidth}px`,\n        innerRadius: stripeEqualInnerRadius,\n    };\n};\n\nexport const getFonts = (selector = 'link[href*=\"font\"]'): StripeCustomFont[] => {\n    const elementsList: NodeListOf<Element> = document.querySelectorAll(selector);\n    const fonts: StripeCustomFont[] = [];\n\n    elementsList.forEach((element: Element | null) => {\n        const fontSrc = element?.getAttribute('href');\n\n        if (fontSrc) {\n            fonts.push({ cssSrc: fontSrc });\n        }\n    });\n\n    return fonts;\n};\n\nexport const getAppearanceForOCSElement = (containerId: string): StripeAppearanceOptions => {\n    const defaultAccordionPaddingHorizontal = '18px';\n    const defaultAccordionPaddingVertical = '13px';\n    const defaultRadioIconInnerScale = 0.66;\n\n    const formInputStyles = getStylesFromElement(`#${containerId}--input`, [\n        'color',\n        'background-color',\n        'border-color',\n        'box-shadow',\n        'font-family',\n    ]);\n    const formLabelStyles = getStylesFromElement(`#${containerId}--label`, ['color']);\n    const formErrorStyles = getStylesFromElement(`#${containerId}--error`, ['color']);\n    const accordionHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        [\n            'color',\n            'font-size',\n            'font-family',\n            'font-weight',\n            'padding-top',\n            'padding-right',\n            'padding-bottom',\n        ],\n    );\n    const accordionSelectedHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header-selected`,\n        ['background-color'],\n    );\n    const formChecklistStyles = getStylesFromElement(\n        `#${containerId}--accordion-header.optimizedCheckout-form-checklist-item`,\n        ['border-bottom', 'border-color'],\n    );\n    const {\n        color: accordionHeaderColor,\n        'font-size': accordionItemTitleFontSize,\n        'font-family': accordionHeaderFontFamily,\n        'font-weight': accordionItemTitleFontWeight,\n        'padding-top': accordionPaddingTop = defaultAccordionPaddingVertical,\n        'padding-right': accordionPaddingRight = defaultAccordionPaddingHorizontal,\n        'padding-bottom': accordionPaddingBottom = defaultAccordionPaddingVertical,\n    } = accordionHeaderStyles;\n    const accordionHeaderPadding = !isEmpty(accordionHeaderStyles)\n        ? `${accordionPaddingTop} ${accordionPaddingRight} ${accordionPaddingBottom} ${defaultAccordionPaddingHorizontal}`\n        : undefined;\n    const radioOuter = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        ['border-color', 'border-width', 'width'],\n        '::before',\n    );\n    const radioOuterChecked = getStylesFromElement(\n        `#${containerId}--accordion-header-selected .form-label`,\n        ['border-color'],\n        '::before',\n    );\n    const radioIconSize = getRadioIconSizes({\n        radioIconOuterWidth: radioOuter.width,\n        radioIconOuterStrokeWidth: radioOuter['border-width'],\n        radioIconInnerWidth:\n            radioOuter.width && parseRadioIconSize(radioOuter.width) * defaultRadioIconInnerScale,\n    });\n    const radioIconColor = radioOuter['border-color'];\n    const radioIconFocusColor = radioOuterChecked['border-color'];\n\n    return {\n        variables: {\n            colorPrimary: formInputStyles['box-shadow'],\n            colorBackground: formInputStyles['background-color'],\n            colorText: formLabelStyles.color,\n            colorDanger: formErrorStyles.color,\n            colorTextSecondary: formLabelStyles.color,\n            colorTextPlaceholder: formInputStyles.color,\n            colorIcon: formInputStyles.color,\n            fontFamily: accordionHeaderFontFamily || formInputStyles['font-family'],\n        },\n        rules: {\n            '.Input': {\n                borderColor: formInputStyles['border-color'],\n                color: formInputStyles.color,\n                boxShadow: formInputStyles['box-shadow'],\n            },\n            '.AccordionItem': {\n                borderRadius: 0,\n                borderWidth: 0,\n                borderBottom: formChecklistStyles['border-bottom'],\n                borderColor: formChecklistStyles['border-color'],\n                boxShadow: 'none',\n                fontSize: accordionItemTitleFontSize,\n                fontWeight: accordionItemTitleFontWeight,\n                color: accordionHeaderColor,\n                padding: accordionHeaderPadding,\n            },\n            '.AccordionItem:hover': {\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n                color: accordionHeaderColor,\n            },\n            '.AccordionItem--selected': {\n                fontWeight: 'bold',\n                color: accordionHeaderColor,\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n            },\n            '.TabLabel': {\n                color: accordionHeaderColor,\n            },\n            '.RadioIcon': {\n                width: radioIconSize.outerWidth,\n            },\n            '.RadioIconInner': {\n                r: radioIconSize.innerRadius,\n                fill: radioIconFocusColor,\n            },\n            '.RadioIconOuter': {\n                strokeWidth: radioIconSize.outerStrokeWidth,\n                stroke: radioIconColor,\n            },\n            '.RadioIconOuter--checked': {\n                stroke: radioIconFocusColor,\n            },\n        },\n    };\n};\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, {\n    FunctionComponent,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { AccordionContext, ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { getAppearanceForOCSElement, getFonts } from './getStripeOCSStyles';\n\nconst StripeOCSPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const collapseStripeElement = useRef<() => void>();\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const [isOCSLoading, setIsOCSLoading] = useState(false);\n    const methodSelector = `${method.gateway}-${method.id}`;\n    const containerId = `${methodSelector}-component-field`;\n    const paymentContext = paymentForm;\n\n    useEffect(() => {\n        if (selectedItemId?.includes(`${method.gateway}-`)) {\n            return;\n        }\n\n        collapseStripeElement.current?.();\n    }, [selectedItemId, method.gateway]);\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            setIsOCSLoading(true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeocs: {\n                    containerId,\n                    layout: {\n                        type: 'accordion',\n                        defaultCollapsed: selectedItemId !== methodSelector,\n                        radios: true,\n                        linkInAccordion: true,\n                        spacedAccordionItems: false,\n                        visibleAccordionItemsCount: 0,\n                    },\n                    appearance: getAppearanceForOCSElement(containerId),\n                    fonts: getFonts(),\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                    paymentMethodSelect: onToggle,\n                    handleClosePaymentMethod: (collapseElement: () => void) => {\n                        collapseStripeElement.current = collapseElement;\n                    },\n                    togglePreloader: setIsOCSLoading,\n                },\n            });\n        },\n        [\n            containerId,\n            selectedItemId,\n            methodSelector,\n            checkoutService,\n            onUnhandledError,\n            renderSubmitButton,\n            onToggle,\n            setIsOCSLoading,\n        ],\n    );\n\n    const renderCustomOCSSectionStyles = () => (\n        <style>\n            {`\n                .custom-checklist-item#radio-${methodSelector} {\n                    border-bottom: none;\n                }\n                .custom-checklist-item#radio-${methodSelector}:last-of-type {\n                    margin-bottom: -1px;\n                }\n            `}\n        </style>\n    );\n\n    const renderCheckoutElementsForStripeOCSStyling = () => (\n        <div style={{ display: 'none' }}>\n            <div\n                className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n                id={`${containerId}--accordion-header`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    id={`${containerId}-radio-input`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div\n                className=\"form-checklist-header--selected\"\n                id={`${containerId}--accordion-header-selected`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    defaultChecked\n                    id={`${containerId}-radio-input-selected`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        </div>\n    );\n\n    const renderPreloader = () => (\n        <div data-test=\"stripe-accordion-skeleton\" style={{ padding: '10px 18px' }}>\n            <ChecklistSkeleton />\n        </div>\n    );\n\n    return (\n        <>\n            {isOCSLoading ? renderPreloader() : renderCustomOCSSectionStyles()}\n\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={false}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutElementsForStripeOCSStyling()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeOCSPaymentMethod,\n    [{ gateway: 'stripeocs', id: 'optimized_checkout' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst StripeUPEPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const containerId = `stripe-${method.id}-component-field`;\n    const paymentContext = paymentForm;\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getPaymentProviderCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const isStripeLinkAuthenticated = paymentProviderCustomer?.stripeLinkAuthenticationState;\n    const isGuestCustomer = customer?.isGuest;\n    const shouldSavingCardsBeEnabled = useMemo((): boolean => {\n        if (!isGuestCustomer && isStripeLinkAuthenticated) {\n            return false;\n        }\n\n        return true;\n    }, [isGuestCustomer, isStripeLinkAuthenticated]);\n    const isInstrumentFeatureAvailable =\n        shouldSavingCardsBeEnabled && !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (!parentContainer) {\n            throw new Error(\n                'Unable to retrieve input styles as the provided container ID is not valid.',\n            );\n        }\n\n        return getAppliedStyles(parentContainer, properties);\n    };\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            const formInput = getStylesFromElement(`${containerId}--input`, [\n                'color',\n                'background-color',\n                'border-color',\n                'box-shadow',\n            ]);\n            const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n            const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n            paymentContext.hidePaymentSubmitButton(method, true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeupe: {\n                    containerId,\n                    style: {\n                        labelText: formLabel.color,\n                        fieldText: formInput.color,\n                        fieldPlaceholderText: formInput.color,\n                        fieldErrorText: formError.color,\n                        fieldBackground: formInput['background-color'],\n                        fieldInnerShadow: formInput['box-shadow'],\n                        fieldBorder: formInput['border-color'],\n                    },\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            onUnhandledError,\n            method,\n            paymentContext,\n            renderSubmitButton,\n        ],\n    );\n\n    const renderCheckoutThemeStylesForStripeUPE = () => {\n        return (\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        );\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutThemeStylesForStripeUPE()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeUPEPaymentMethod,\n    [{ gateway: 'stripeupe' }, { gateway: 'stripeupe', id: 'klarna' }],\n);\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, IconLock, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nexport interface StripeV3CustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n    };\n}\n\nconst StripeV3CustomCardForm: React.FunctionComponent<StripeV3CustomCardFormProps> = ({\n    options,\n}) => (\n    <div className=\"form-ccFields\">\n        <div className={classNames('form-field', 'form-field--stripe-ccNumber')}>\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardNumberElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_number_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"CardNumber\"\n                id={options.cardNumberElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n        <div className=\"form-field form-field--ccExpiry\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardExpiryElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_expiration_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"ExpiryDate\"\n                id={options.cardExpiryElementOptions.containerId}\n            />\n        </div>\n        <div className=\"form-field form-ccFields-field--ccCvv\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardCvcElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"SecurityCode\"\n                id={options.cardCvcElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n    </div>\n);\n\nexport default StripeV3CustomCardForm;\n","import {\n    CardInstrument,\n    CustomError,\n    PaymentInitializeOptions,\n    StripeElementOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { useHostedCreditCard } from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport StripeV3CustomCardForm from './StripeV3CustomCardForm';\n\nexport interface StripeOptions {\n    alipay?: StripeElementOptions;\n    card: StripeElementOptions;\n    cardCvc: StripeElementOptions;\n    cardExpiry: StripeElementOptions;\n    cardNumber: StripeElementOptions;\n    iban: StripeElementOptions;\n    idealBank: StripeElementOptions;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    Card = 'card',\n    CardCvc = 'cardCvc',\n    CardExpiry = 'cardExpiry',\n    CardNumber = 'cardNumber',\n    Iban = 'iban',\n    IdealBank = 'idealBank',\n}\n\nconst StripeV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const { useIndividualCardFields } = method.initializationData;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const paymentMethodType = method.id as StripeElementType;\n    const additionalStripeV3Classes =\n        paymentMethodType !== StripeElementType.Alipay\n            ? 'optimizedCheckout-form-input widget--stripev3'\n            : '';\n    const containerId = `stripe-${paymentMethodType}-component-field`;\n    const stripeOptions: StripeOptions = useMemo(() => {\n        const classes = {\n            base: 'form-input optimizedCheckout-form-input',\n        };\n\n        return {\n            [StripeElementType.Card]: {\n                classes,\n            },\n            [StripeElementType.CardCvc]: {\n                classes,\n                placeholder: '',\n            },\n            [StripeElementType.CardExpiry]: {\n                classes,\n            },\n            [StripeElementType.CardNumber]: {\n                classes,\n                showIcon: true,\n                placeholder: '',\n            },\n            [StripeElementType.Iban]: {\n                classes,\n                supportedCountries: ['SEPA'],\n            },\n            [StripeElementType.IdealBank]: {\n                classes,\n            },\n        };\n    }, []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer, getConfig },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const storeUrl = useMemo(() => {\n        if (!config) {\n            return null;\n        }\n\n        return config.links.siteLink;\n    }, [config]);\n\n    const onUnhandledStripeV3Error = useCallback(\n        (error: CustomError) => {\n            if (error.type === 'stripev3_error' && error.subtype === 'auth_failure') {\n                error.message = language.translate('payment.stripev3_auth_3ds_fail');\n            }\n\n            onUnhandledError(error);\n        },\n        [language, onUnhandledError],\n    );\n\n    const getIndividualCardElementOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            return {\n                cardNumberElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardNumber],\n                    containerId: 'stripe-card-number-component-field',\n                },\n                cardExpiryElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardExpiry],\n                    containerId: 'stripe-expiry-component-field',\n                },\n                cardCvcElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardCvc],\n                    containerId: 'stripe-cvc-component-field',\n                },\n            };\n        },\n        [],\n    );\n\n    const getStripeOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            if (useIndividualCardFields) {\n                return getIndividualCardElementOptions(stripeInitializeOptions);\n            }\n\n            return stripeInitializeOptions[paymentMethodType];\n        },\n        [paymentMethodType, getIndividualCardElementOptions, useIndividualCardFields],\n    );\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                stripev3: {\n                    containerId,\n                    options: getStripeOptions(stripeOptions),\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [containerId, getStripeOptions, stripeOptions, checkoutService, getHostedFormOptions],\n    );\n\n    const renderCustomPaymentForm = () => {\n        const optionsCustomForm = getIndividualCardElementOptions(stripeOptions);\n\n        return <StripeV3CustomCardForm options={optionsCustomForm} />;\n    };\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                additionalContainerClassName={additionalStripeV3Classes}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledStripeV3Error}\n                renderCustomPaymentForm={renderCustomPaymentForm}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldRenderCustomInstrument={useIndividualCardFields}\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            {method.id === 'iban' && (\n                <p className=\"stripe-sepa-mandate-disclaimer\">\n                    <TranslatedString\n                        data={{ storeUrl }}\n                        id=\"payment.stripe_sepa_mandate_disclaimer\"\n                    />\n                </p>\n            )}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeV3PaymentMethod,\n    [{ gateway: 'stripev3' }],\n);\n","import {\n    CardInstrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { CreditCardPaymentMethodComponent } from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\ninterface WorldpayPaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst WorldpayCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const [threeDSecureVerification, setThreeDSecureVerification] = useState<HTMLElement>();\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const { getHostedStoredCardValidationFieldset } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const ref = useRef<WorldpayPaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const cancelWorldpayModalFlow = useCallback(() => {\n        setThreeDSecureVerification(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n    const initializeWorldpayPayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                creditCard: {\n                    form: getHostedFormOptions && (await getHostedFormOptions(selectedInstrument)),\n                },\n                worldpay: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setThreeDSecureVerification(content);\n                        ref.current.cancelThreeDSecureVerification = cancel;\n                    },\n                },\n            });\n        },\n        [checkoutService, getHostedFormOptions],\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (threeDSecureVerification) {\n            ref.current.paymentPageContentRef.current?.appendChild(threeDSecureVerification);\n        }\n    }, [threeDSecureVerification]);\n\n    return (\n        <>\n            <CreditCardPaymentMethodComponent\n                {...rest}\n                cardFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                cardValidationSchema={hostedValidationSchema}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeWorldpayPayment}\n                language={language}\n                method={method}\n                paymentForm={paymentForm}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n            <Modal\n                isOpen={!!threeDSecureVerification}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelWorldpayModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div ref={ref.current.paymentPageContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    WorldpayCreditCardPaymentMethod,\n    [{ id: 'worldpayaccess' }],\n);\n","import { ComponentType } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { resolveComponent } from '../common/resolver';\nimport * as paymentMethods from '../generated/paymentIntegrations';\n\nexport default function resolvePaymentMethod(\n    query: PaymentMethodResolveId,\n): ComponentType<PaymentMethodProps> | undefined {\n    return resolveComponent<PaymentMethodResolveId, PaymentMethodProps>(query, paymentMethods);\n}\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\n\nimport PaymentContext, { PaymentContextProps } from './PaymentContext';\n\nexport type WithPaymentProps = PaymentContextProps;\n\nconst withPayment = createInjectHoc(PaymentContext, { displayNamePrefix: 'WithPayment' });\n\nexport default withPayment;\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { FormFieldContainer, TextInput } from '../../ui/form';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardCustomerCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCustomerCodeField: FunctionComponent<CreditCardCustomerCodeFieldProps> = ({\n    name,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_customer_code_label\" />{' '}\n                <small className=\"optimizedCheckout-contentSecondary\">\n                    <TranslatedString id=\"common.optional_text\" />\n                </small>\n            </>\n        ),\n        [],\n    );\n\n    return <FormField input={renderInput} labelContent={labelContent} name={name} />;\n};\n\nexport default memo(CreditCardCustomerCodeField);\n","import { CheckoutSettings, Customer, PaymentMethod, PaymentMethodConfig, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    paymentMethod: PaymentMethod;\n    shouldSavingCardsBeEnabled?: boolean;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    paymentMethod,\n    shouldSavingCardsBeEnabled = true,\n}: IsInstrumentFeatureAvailableState): boolean {\n    const { checkoutSettings } = config;\n\n    if (\n        isVaultingNotEnabled(checkoutSettings, paymentMethod.config) ||\n        customer.isGuest ||\n        !shouldSavingCardsBeEnabled\n    ) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction isVaultingNotEnabled(checkoutSettings: CheckoutSettings, paymentMethodConfig: PaymentMethodConfig): boolean {\n    return !checkoutSettings.isCardVaultingEnabled || !paymentMethodConfig.isVaultingEnabled;\n}\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass InstrumentSelect extends PureComponent<InstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<InstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            field,\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate = false,\n        } = this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <InstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideExpiryDate}\n                        />\n                    }\n                >\n                    <InstrumentSelectButton\n                        instrument={selectedInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" {...field} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{ cardTitle: cardInfo.niceType, endingIn: instrument.last4 }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default InstrumentSelect;\n","import { AccountInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is AccountInstrument {\n    return instrument.type === 'account';\n}\n","import { AchInstrument, BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isBankAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is BankInstrument | AchInstrument {\n    return instrument.type === 'bank';\n}\n","import { CardInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isCardInstrument(\n    instrument: PaymentInstrument,\n): instrument is CardInstrument {\n    return instrument.type === 'card';\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconPaypal: FunctionComponent = () => (\n    <svg height=\"300\" viewBox=\"0 0 255 300\" width=\"255\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M228.03 77.2c3.6-23.02-.03-38.7-12.48-52.89C201.83 8.7 177.07 2 145.4 2H53.4c-6.47 0-11.99 4.7-12.99 11.11L2.1 256.03a7.9 7.9 0 0 0 7.8 9.14h56.78c79.33-53.38 148.45-81.4 161.35-187.97z\"\n            fill=\"#253B80\"\n        />\n        <path\n            d=\"M228.02 77.2C124 73 95 98 80.5 177.52l-13.82 87.65-3.91 24.85a6.9 6.9 0 0 0 6.82 7.98h47.86c5.67 0 10.48-4.12 11.37-9.71l.48-2.43 9-57.2.59-3.15c.88-5.6 5.7-9.73 11.37-9.73h7.16c46.38 0 82.68-18.83 93.29-73.33 4.43-22.76 2.14-41.77-9.6-55.14a45.77 45.77 0 0 0-13.1-10.1z\"\n            fill=\"#179BD7\"\n        />\n        <path\n            d=\"M215.33 72.14c-3.88-1.12-7.82-2-11.8-2.62a149.83 149.83 0 0 0-23.79-1.73h-72.1a11.49 11.49 0 0 0-11.36 9.73l-15.34 97.16-.44 2.84a13.1 13.1 0 0 1 12.95-11.1h27c53 0 94.5-21.53 106.62-83.82.37-1.85.67-3.64.95-5.4a64.66 64.66 0 0 0-9.98-4.2c-.9-.3-1.8-.59-2.71-.86z\"\n            fill=\"#222D65\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconPaypal);\n","import { AccountInstrument, BankInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface ManageAccountInstrumentsTableProps {\n    instruments: Array<AccountInstrument | BankInstrument>;\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsTable: FunctionComponent<ManageAccountInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: AccountInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-accountExternalId\">\n                {isBankAccountInstrument(instrument) ? (\n                    <span className=\"instrumentModal-instrumentAccountNumber\">\n                        <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        <span>{` ${instrument.accountNumber}`}</span>\n                    </span>\n                ) : (\n                    <>\n                        <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n                        <span className=\"instrumentModal-instrumentAccountExternalId\">\n                            {instrument.externalId}\n                        </span>\n                    </>\n                )}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageInstrumentsTable);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface ManageCardInstrumentsTableProps {\n    instruments: CardInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageCardInstrumentsTable: FunctionComponent<ManageCardInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_expiry_date_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: CardInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired =\n        !expirationDate({\n            month: instrument.expiryMonth,\n            year: instrument.expiryYear,\n        }).isValid;\n\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-cardType\">\n                <CreditCardIcon cardType={cardType} />\n\n                {cardInfo && (\n                    <span className=\"instrumentModal-instrumentCardType\">{cardInfo.niceType}</span>\n                )}\n            </td>\n            <td data-test=\"manage-instrument-last4\">{instrument.last4}</td>\n            <td\n                className={classNames({ 'instrumentModal-instrumentExpiry--expired': isExpired })}\n                data-test=\"manage-instrument-expiry\"\n            >\n                {`${instrument.expiryMonth}/${instrument.expiryYear}`}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageCardInstrumentsTable);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Alert, AlertType } from '../../ui/alert';\n\nexport interface ManageInstrumentsAlertProps {\n    error: any; // TODO: Fix typing\n}\n\nconst ManageInstrumentsAlert: FunctionComponent<ManageInstrumentsAlertProps> = ({ error }) => {\n    const { status } = error;\n\n    if (status === 401) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_auth_error\" />\n            </Alert>\n        );\n    }\n\n    if (status >= 400 && status < 500) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_client_error\" />\n            </Alert>\n        );\n    }\n\n    return (\n        <Alert type={AlertType.Error}>\n            <TranslatedString id=\"payment.instrument_manage_delete_server_error\" />\n        </Alert>\n    );\n};\n\nexport default memo(ManageInstrumentsAlert);\n","import { CheckoutSelectors, PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../../ui/button';\nimport { Modal, ModalHeader } from '../../ui/modal';\n\nimport isAccountInstrument from './isAccountInstrument';\nimport isBankAccountInstrument from './isBankAccountInstrument';\nimport isCardInstrument from './isCardInstrument';\nimport ManageAccountInstrumentsTable from './ManageAccountInstrumentsTable';\nimport ManageCardInstrumentsTable from './ManageCardInstrumentsTable';\nimport ManageInstrumentsAlert from './ManageInstrumentsAlert';\n\nexport interface ManageInstrumentsModalProps {\n    isOpen: boolean;\n    instruments: PaymentInstrument[];\n    onAfterOpen?(): void;\n    onDeleteInstrument?(instrumentId: string): void;\n    onDeleteInstrumentError?(error: Error): void;\n    onRequestClose?(): void;\n}\n\nexport interface ManageInstrumentsModalState {\n    isConfirmingDelete: boolean;\n    selectedInstrumentId?: string;\n}\n\ninterface WithCheckoutProps {\n    deleteInstrumentError?: Error;\n    isDeletingInstrument: boolean;\n    isLoadingInstruments: boolean;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    deleteInstrument(id: string): Promise<CheckoutSelectors>;\n}\n\nclass ManageInstrumentsModal extends Component<\n    ManageInstrumentsModalProps & WithCheckoutProps,\n    ManageInstrumentsModalState\n> {\n    state: ManageInstrumentsModalState = {\n        isConfirmingDelete: false,\n    };\n\n    render(): ReactNode {\n        const { deleteInstrumentError, isOpen, onRequestClose } = this.props;\n\n        return (\n            <Modal\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                footer={this.renderFooter()}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"payment.instrument_manage_modal_title_text\" />\n                    </ModalHeader>\n                }\n                isOpen={isOpen}\n                onAfterOpen={this.handleAfterOpen}\n                onRequestClose={onRequestClose}\n            >\n                {deleteInstrumentError && <ManageInstrumentsAlert error={deleteInstrumentError} />}\n\n                {this.renderContent()}\n            </Modal>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { instruments, isDeletingInstrument } = this.props;\n\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <p>\n                    <TranslatedString id=\"payment.instrument_manage_modal_confirmation_label\" />\n                </p>\n            );\n        }\n\n        const cardInstruments = instruments.filter(isCardInstrument);\n        const bankInstruments = instruments.filter(isBankAccountInstrument);\n        const accountInstruments = instruments.filter(isAccountInstrument);\n\n        const bankAndAccountInstruments = [...bankInstruments, ...accountInstruments];\n\n        if (bankAndAccountInstruments.length) {\n            return (\n                <ManageAccountInstrumentsTable\n                    instruments={bankAndAccountInstruments}\n                    isDeletingInstrument={isDeletingInstrument}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        return (\n            <ManageCardInstrumentsTable\n                instruments={cardInstruments}\n                isDeletingInstrument={isDeletingInstrument}\n                onDeleteInstrument={this.handleDeleteInstrument}\n            />\n        );\n    }\n\n    private renderFooter(): ReactNode {\n        const { isDeletingInstrument, isLoadingInstruments, onRequestClose } = this.props;\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <>\n                    <Button\n                        data-test=\"manage-instrument-cancel-button\"\n                        onClick={this.handleCancel}\n                        size={ButtonSize.Small}\n                    >\n                        <TranslatedString id=\"common.cancel_action\" />\n                    </Button>\n\n                    <Button\n                        data-test=\"manage-instrument-confirm-button\"\n                        disabled={isDeletingInstrument || isLoadingInstruments}\n                        onClick={this.handleConfirmDelete}\n                        size={ButtonSize.Small}\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"payment.instrument_manage_modal_confirmation_action\" />\n                    </Button>\n                </>\n            );\n        }\n\n        return (\n            <Button\n                data-test=\"manage-instrument-close-button\"\n                onClick={onRequestClose}\n                size={ButtonSize.Small}\n            >\n                <TranslatedString id=\"common.close_action\" />\n            </Button>\n        );\n    }\n\n    private handleAfterOpen: () => void = () => {\n        const { onAfterOpen } = this.props;\n\n        this.setState(\n            {\n                isConfirmingDelete: false,\n            },\n            onAfterOpen,\n        );\n    };\n\n    private handleCancel: () => void = () => {\n        const { clearError, deleteInstrumentError } = this.props;\n\n        if (deleteInstrumentError) {\n            clearError(deleteInstrumentError);\n        }\n\n        this.setState({\n            isConfirmingDelete: false,\n        });\n    };\n\n    private handleConfirmDelete: () => void = async () => {\n        const {\n            deleteInstrument,\n            onDeleteInstrument = noop,\n            onDeleteInstrumentError = noop,\n            onRequestClose = noop,\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (!selectedInstrumentId) {\n            return;\n        }\n\n        try {\n            await deleteInstrument(selectedInstrumentId);\n            onDeleteInstrument(selectedInstrumentId);\n            onRequestClose();\n        } catch (error) {\n            onDeleteInstrumentError(error);\n        }\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isConfirmingDelete: true,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport function mapFromCheckoutProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutProps | null {\n    const {\n        errors: { getDeleteInstrumentError },\n        statuses: { isDeletingInstrument, isLoadingInstruments },\n    } = checkoutState;\n\n    return {\n        clearError: checkoutService.clearError,\n        deleteInstrument: checkoutService.deleteInstrument,\n        deleteInstrumentError: getDeleteInstrumentError(),\n        isDeletingInstrument: isDeletingInstrument(),\n        isLoadingInstruments: isLoadingInstruments(),\n    };\n}\n\nexport default withCheckout(mapFromCheckoutProps)(ManageInstrumentsModal);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, ModalTriggerModalProps } from '../../ui/modal';\n\nimport InstrumentSelect from './InstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan'\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import { LineItemMap, PaymentInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport { UntrustedShippingCardVerificationType } from './CardInstrumentFieldset';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    if (PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider)) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!paymentMethod.config.isVaultingCvvEnabled;\n    }\n\n    // If the shipping address is untrusted, card verficiation mode has set with cvv, card code is required\n    if ('untrustedShippingCardVerificationMode' in instrument && instrument.untrustedShippingCardVerificationMode === UntrustedShippingCardVerificationType.CVV) {\n        return true;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(paymentMethod.config.isVaultingCvvEnabled || paymentMethod.config.cardCode);\n}\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { CheckoutSelectors, Instrument } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { Instrument, LineItemMap } from '@bigcommerce/checkout-sdk';\n\nimport { UntrustedShippingCardVerificationType } from './CardInstrumentFieldset';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    if (lineItems.physicalItems.length === 0) {\n        return false;\n    }\n\n    if (instrument.trustedShippingAddress) {\n        return false;\n    }  \n    \n    return !(instrument.untrustedShippingCardVerificationMode === UntrustedShippingCardVerificationType.CVV);\n}\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object().required().shape<HostedCreditCardValidationSchemaShape[\"hostedForm\"]>({\n            errors: object().required().shape<HostedCreditCardValidationSchemaShape[\"hostedForm\"][\"errors\"]>({\n                cardCode: string()\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_invalid_error'),\n                        test: (value) => value !== 'invalid_card_code',\n                    }),\n\n                cardExpiry: string()\n                    .test({\n                        message: language.translate(\n                            'payment.credit_card_expiration_required_error',\n                        ),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_expiration_invalid_error'),\n                        test: (value) => value !== 'invalid_card_expiry',\n                    }),\n\n                cardName: string()\n                    .test({\n                        message: language.translate('payment.credit_card_name_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_name_invalid_error'),\n                        test: (value) => value !== 'invalid_card_name',\n                    }),\n\n                cardNumber: string()\n                    .test({\n                        message: language.translate('payment.credit_card_number_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_invalid_error'),\n                        test: (value) => value !== 'invalid_card_number',\n                    }),\n            }),\n        }),\n    });\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object().required().shape<HostedInstrumentValidationSchemaShape[\"hostedForm\"]>({\n            errors: object().required().shape<HostedInstrumentValidationSchemaShape[\"hostedForm\"][\"errors\"]>({\n                cardCodeVerification: string()\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_invalid_error'),\n                        test: (value) => value !== 'invalid_card_code',\n                    }),\n\n                cardNumberVerification: string()\n                    .test({\n                        message: language.translate('payment.credit_card_number_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_invalid_error'),\n                        test: (value) => value !== 'invalid_card_number',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_mismatch_error'),\n                        test: (value) => value !== 'mismatched_card_number',\n                    }),\n\n            ...(isCardExpiryRequired ? {\n                cardExpiryVerification: string()\n                    .test({\n                        message: language.translate(\n                            'payment.credit_card_expiration_required_error',\n                        ),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_expiration_invalid_error'),\n                        test: (value) => value !== 'invalid_card_expiry',\n                    }),\n            } : {})\n            }),\n        }),\n    });\n});\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconLock: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconLock);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","\nimport { Placement } from '@popperjs/core';\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children: ReactNode;\n}\n\nexport interface TooltipTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\n    static defaultProps = {\n        placement: 'bottom',\n    };\n\n    state: Readonly<TooltipTriggerState> = {\n        shouldShow: false,\n    };\n\n    render() {\n        const { children, placement, tooltip } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <span\n                            onBlur={this.handleHide}\n                            onFocus={this.handleShow}\n                            onMouseEnter={this.handleShow}\n                            onMouseLeave={this.handleHide}\n                            ref={ref}\n                        >\n                            {children}\n                        </span>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={[\n                        { name: 'hide', enabled: false },\n                        { name: 'flip', enabled: false },\n                        { name: 'preventOverflow', enabled: false },\n                    ]}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        shouldShow && (\n                            <div ref={ref} style={style}>\n                                {tooltip}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: true });\n    };\n\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: false });\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeVisa: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV visa, mc, disc</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <path d=\"M0 5h88v12H0z\" fill=\"#838383\" />\n            <path d=\"M3 23h82v10H3z\" fill=\"#FFF\" />\n            <path\n                d=\"M69.81 29.053c.015.297.13.502.343.616.11.058.233.088.37.088.258 0 .477-.107.66-.32.18-.215.31-.65.384-1.306-.12.19-.267.322-.444.4-.176.076-.366.114-.57.114-.412 0-.74-.13-.98-.386-.24-.257-.36-.588-.36-.993 0-.388.12-.73.357-1.025.237-.295.587-.443 1.05-.443.623 0 1.054.28 1.29.842.133.31.2.696.2 1.16 0 .525-.08.99-.238 1.394-.26.674-.703 1.01-1.327 1.01-.42 0-.737-.11-.954-.328-.217-.22-.325-.494-.325-.825h.544zm1.4-1.09c.176-.14.265-.387.265-.737 0-.315-.08-.55-.238-.705-.16-.153-.36-.23-.606-.23-.262 0-.47.088-.625.264-.155.177-.232.412-.232.707 0 .28.068.502.203.667.136.164.352.246.65.246.213 0 .408-.07.584-.21zm3.414-.563c.133-.132.2-.29.2-.474 0-.16-.064-.306-.19-.44-.13-.133-.323-.2-.585-.2-.26 0-.447.067-.563.2-.115.134-.173.29-.173.47 0 .202.075.36.224.473.15.112.326.17.53.17.237 0 .422-.067.556-.2zm.097 2.118c.165-.135.247-.336.247-.603 0-.277-.084-.487-.254-.63-.17-.144-.386-.216-.652-.216-.256 0-.466.072-.628.22-.163.145-.244.348-.244.607 0 .223.074.416.223.58.15.16.38.243.69.243.25 0 .456-.068.62-.202zm-1.735-1.937c-.158-.158-.236-.365-.236-.62 0-.32.114-.594.345-.823.232-.23.56-.344.984-.344.41 0 .732.108.965.325.233.216.35.47.35.758 0 .267-.068.483-.203.65-.076.092-.194.184-.353.274.176.08.316.175.418.28.19.2.284.46.284.778 0 .377-.127.697-.38.96-.253.26-.61.392-1.074.392-.416 0-.77-.113-1.057-.34-.287-.226-.43-.554-.43-.985 0-.253.06-.472.184-.656.124-.186.307-.327.55-.424-.15-.064-.265-.14-.35-.225zm5.614-1.42c.188.248.282.503.282.766h-.532c-.032-.17-.083-.302-.153-.397-.13-.18-.326-.27-.59-.27-.3 0-.54.14-.717.417-.177.278-.276.676-.296 1.194.124-.18.28-.316.467-.405.172-.08.364-.12.575-.12.36 0 .672.115.94.344.266.228.4.57.4 1.025 0 .388-.127.733-.38 1.033-.253.3-.614.45-1.083.45-.4 0-.746-.152-1.037-.456-.29-.304-.437-.816-.437-1.536 0-.532.065-.983.194-1.354.25-.71.705-1.065 1.367-1.065.478 0 .81.124 1 .372zm-.404 3.274c.14-.19.21-.415.21-.674 0-.22-.062-.43-.188-.627-.126-.198-.354-.297-.685-.297-.23 0-.434.076-.608.23-.175.153-.262.385-.262.694 0 .27.08.498.238.683.16.184.38.277.66.277.283 0 .495-.096.636-.286z\"\n                fill=\"#636363\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"19\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeVisa);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeAmex: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV amex</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <text\n                fill=\"#979BA1\"\n                fontFamily=\"Avenir Next\"\n                fontSize=\"6\"\n                fontWeight=\"420\"\n                letterSpacing=\".2\"\n            >\n                <tspan x=\"11\" y=\"35\">\n                    3712 567890 374\n                </tspan>\n                <tspan x=\"70.21\" y=\"35\">\n                    5\n                </tspan>\n            </text>\n            <path\n                d=\"M69.182 26.767h-.55v-3.35l-.762.635-.324-.38 1.142-.926h.494v4.02zm4.19 0H70.75v-.528l1.6-1.59c.122-.126.226-.257.313-.393s.13-.29.13-.46c0-.106-.018-.202-.056-.287-.038-.085-.09-.158-.153-.22-.065-.06-.14-.106-.228-.138-.087-.032-.18-.048-.278-.048-.204 0-.373.065-.505.196-.133.13-.216.298-.25.503l-.54-.09c.023-.153.07-.294.145-.424.074-.132.168-.246.28-.342.115-.097.246-.17.396-.224.15-.053.31-.08.48-.08.166 0 .326.025.48.074.153.05.288.12.406.216.117.094.21.214.28.357.07.145.106.31.106.496 0 .128-.017.248-.05.357-.035.11-.082.214-.14.313-.06.098-.128.192-.208.28-.08.09-.162.178-.25.265l-1.306 1.273h1.97v.494zm1.625-2.328h.176c.114 0 .225-.012.333-.033.107-.02.203-.056.286-.107.084-.052.15-.12.202-.208.05-.087.077-.195.077-.323 0-.104-.018-.196-.056-.277-.038-.08-.09-.15-.156-.207-.067-.057-.142-.102-.227-.134-.085-.032-.175-.048-.27-.048-.17 0-.314.044-.434.13-.12.088-.21.21-.27.364l-.5-.176c.1-.242.257-.433.475-.57.22-.14.47-.208.753-.208.167 0 .325.024.475.07.15.048.28.117.394.208.114.09.204.205.27.34.066.137.1.294.1.472 0 .114-.018.22-.054.318-.036.1-.086.188-.148.267-.063.08-.137.147-.224.204-.087.057-.182.098-.284.125v.01c.117.023.226.063.326.12.1.056.187.127.26.212.07.086.127.183.17.293.04.11.06.23.06.358 0 .2-.036.377-.112.53-.076.154-.176.282-.3.384-.126.102-.27.18-.433.233-.163.053-.33.08-.5.08-.318 0-.598-.073-.84-.216-.242-.144-.418-.368-.528-.67l.51-.17c.06.173.165.315.31.425.146.11.325.164.537.164.102 0 .202-.016.298-.05.097-.03.183-.08.26-.143.074-.064.135-.143.18-.238.046-.095.07-.206.07-.335 0-.14-.032-.257-.092-.352-.06-.095-.14-.17-.236-.23-.097-.06-.205-.1-.327-.125-.12-.025-.24-.037-.357-.037h-.17v-.454zm4.73.953h.58v.47h-.58v.904h-.533v-.903h-1.85v-.5l1.708-2.618h.676v2.647zm-.533-2.016h-.01l-1.273 2.016h1.284v-2.016z\"\n                fill=\"#636363\"\n                opacity=\".9\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"16\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeAmex);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconCardCodeAmex, IconCardCodeVisa, IconSize } from '../../ui/icon';\n\nimport './CreditCardCodeTooltip.scss';\n\nconst CreditCardCodeTooltip: FunctionComponent = () => (\n    <div className=\"dropdown-menu dropdown-menu--content dropdown-menu--card-code\">\n        <div className=\"form-ccFields-cvvExample\">\n            <div className=\"form-ccFields-cvvExampleDescription\">\n                <p>\n                    <TranslatedString id=\"payment.credit_card_cvv_help_text\" />\n                </p>\n            </div>\n\n            <div className=\"form-ccFields-cvvExampleFigures\">\n                <figure>\n                    <IconCardCodeVisa size={IconSize.Large} />\n                </figure>\n\n                <figure>\n                    <IconCardCodeAmex size={IconSize.Large} />\n                </figure>\n            </div>\n        </div>\n    </div>\n);\n\nexport default CreditCardCodeTooltip;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\nimport { IconHelp, IconLock } from '../../ui/icon';\nimport { TooltipTrigger } from '../../ui/tooltip';\nimport { CreditCardCodeTooltip } from '../creditCard';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\nimport { IconLock } from '../../ui/icon';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport HostedCreditCardCodeField from './HostedCreditCardCodeField';\nimport HostedCreditCardExpiryField from './HostedCreditCardExpiryField';\nimport HostedCreditCardNameField from './HostedCreditCardNameField';\nimport HostedCreditCardNumberField from './HostedCreditCardNumberField';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {cardNameId && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport HostedCreditCardCodeField from './HostedCreditCardCodeField';\nimport HostedCreditCardExpiryField from \"./HostedCreditCardExpiryField\";\nimport HostedCreditCardNumberField from './HostedCreditCardNumberField';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n","import {\n    CardInstrument,\n    Instrument,\n    LegacyHostedFormOptions,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { ComponentType, FunctionComponent, ReactNode, useCallback, useState } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n} from '../creditCard';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\n\nimport getHostedCreditCardValidationSchema, {\n    HostedCreditCardValidationSchemaShape,\n} from './getHostedCreditCardValidationSchema';\nimport getHostedInstrumentValidationSchema, {\n    HostedInstrumentValidationSchemaShape,\n} from './getHostedInstrumentValidationSchema';\nimport HostedCreditCardFieldset from './HostedCreditCardFieldset';\nimport HostedCreditCardValidation from './HostedCreditCardValidation';\n\nexport interface WithHostedCreditCardFieldsetProps {\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n}\n\nexport interface WithInjectedHostedCreditCardFieldsetProps {\n    hostedFieldset: ReactNode;\n    hostedStoredCardValidationSchema: ObjectSchema<HostedInstrumentValidationSchemaShape>;\n    hostedValidationSchema: ObjectSchema<HostedCreditCardValidationSchemaShape>;\n    getHostedFormOptions(selectedInstrument?: CardInstrument): Promise<LegacyHostedFormOptions>;\n    getHostedStoredCardValidationFieldset(selectedInstrument?: CardInstrument): ReactNode;\n}\n\ninterface WithCheckoutContextProps {\n    isCardCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n}\n\nexport default function withHostedCreditCardFieldset<\n    TProps extends WithHostedCreditCardFieldsetProps,\n>(\n    OriginalComponent: ComponentType<TProps & Partial<WithInjectedHostedCreditCardFieldsetProps>>,\n): ComponentType<Omit<TProps, keyof WithInjectedHostedCreditCardFieldsetProps>> {\n    const Component: FunctionComponent<\n        WithHostedCreditCardFieldsetProps &\n            WithCheckoutContextProps &\n            WithLanguageProps &\n            WithFormProps &\n            ConnectFormikProps<PaymentFormValues>\n    > = ({\n        formik: { setFieldValue, setFieldTouched, submitForm },\n        isCardCodeRequired,\n        isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n        isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        isSubmitted,\n        language,\n        method,\n        setSubmitted,\n        ...rest\n    }) => {\n        const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n        const getHostedFieldId: (name: string) => string = useCallback(\n            (name) => {\n                return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n            },\n            [method],\n        );\n\n        const getHostedFormOptions: (\n            selectedInstrument?: CardInstrument,\n        ) => Promise<LegacyHostedFormOptions> = useCallback(\n            async (selectedInstrument) => {\n                const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n                const styleContainerId = selectedInstrument\n                    ? isInstrumentCardCodeRequired\n                        ? getHostedFieldId('ccCvv')\n                        : undefined\n                    : getHostedFieldId('ccNumber');\n\n                return {\n                    fields: selectedInstrument\n                        ? {\n                              cardCodeVerification:\n                                  isInstrumentCardCodeRequired && selectedInstrument\n                                      ? {\n                                            accessibilityLabel: language.translate(\n                                                'payment.credit_card_cvv_label',\n                                            ),\n                                            containerId: getHostedFieldId('ccCvv'),\n                                            instrumentId: selectedInstrument.bigpayToken,\n                                        }\n                                      : undefined,\n                              cardNumberVerification:\n                                  isInstrumentCardNumberRequired && selectedInstrument\n                                      ? {\n                                            accessibilityLabel: language.translate(\n                                                'payment.credit_card_number_label',\n                                            ),\n                                            containerId: getHostedFieldId('ccNumber'),\n                                            instrumentId: selectedInstrument.bigpayToken,\n                                        }\n                                      : undefined,\n                          }\n                        : {\n                              cardCode: isCardCodeRequired\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                    }\n                                  : undefined,\n                              cardExpiry: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_expiration_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccExpiry'),\n                                  placeholder: language.translate(\n                                      'payment.credit_card_expiration_placeholder_text',\n                                  ),\n                              },\n                              cardName: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_name_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccName'),\n                              },\n                              cardNumber: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_number_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccNumber'),\n                              },\n                          },\n                    styles: styleContainerId\n                        ? {\n                              default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                              error: await getCreditCardInputStyles(\n                                  styleContainerId,\n                                  styleProps,\n                                  CreditCardInputStylesType.Error,\n                              ),\n                              focus: await getCreditCardInputStyles(\n                                  styleContainerId,\n                                  styleProps,\n                                  CreditCardInputStylesType.Focus,\n                              ),\n                          }\n                        : {},\n                    onBlur: ({ fieldType }) => {\n                        if (focusedFieldType === fieldType) {\n                            setFocusedFieldType(undefined);\n                        }\n                    },\n                    onCardTypeChange: ({ cardType }) => {\n                        setFieldValue('hostedForm.cardType', cardType);\n                    },\n                    onEnter: () => {\n                        setSubmitted(true);\n                        submitForm();\n                    },\n                    onFocus: ({ fieldType }) => {\n                        setFocusedFieldType(fieldType);\n                    },\n                    onValidate: ({ errors = {} }) => {\n                        forIn(errors, (fieldErrors = [], fieldType) => {\n                            const errorKey = `hostedForm.errors.${fieldType}`;\n\n                            setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                            if (fieldErrors[0]) {\n                                setFieldTouched(errorKey);\n                            }\n                        });\n                    },\n                };\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isCardCodeRequired,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                language,\n                method,\n                setFieldValue,\n                setFieldTouched,\n                setFocusedFieldType,\n                setSubmitted,\n                submitForm,\n            ],\n        );\n\n        const getHostedStoredCardValidationFieldset: (\n            selectedInstrument: CardInstrument,\n        ) => ReactNode = useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n        if (!method.config.isHostedFormEnabled) {\n            return <OriginalComponent {...(rest as TProps)} method={method} />;\n        }\n\n        return (\n            <OriginalComponent\n                {...(rest as TProps)}\n                getHostedFormOptions={getHostedFormOptions}\n                getHostedStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                hostedFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                hostedStoredCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n                hostedValidationSchema={getHostedCreditCardValidationSchema({ language })}\n                method={method}\n            />\n        );\n    };\n\n    return connectFormik(\n        withForm(withLanguage(withCheckout(mapFromCheckoutProps)(Component))),\n    ) as ComponentType<Omit<TProps, keyof WithInjectedHostedCreditCardFieldsetProps>>;\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutContextProps,\n    WithHostedCreditCardFieldsetProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    return ({ checkoutState }, { method }) => {\n        const {\n            data: { getConfig, getCustomer },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer) {\n            return null;\n        }\n\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            paymentMethod: method,\n        });\n\n        return {\n            method,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        };\n    };\n};\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconHelp, IconLock } from '../../ui/icon';\nimport { TooltipTrigger } from '../../ui/tooltip';\n\nimport CreditCardCodeTooltip from './CreditCardCodeTooltip';\n\nexport interface CreditCardCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCodeField: FunctionComponent<CreditCardCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-csc\"\n                    id={field.name}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardCodeField);\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport React, { ChangeEvent, FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nimport formatCreditCardExpiryDate from './formatCreditCardExpiryDate';\n\nexport interface CreditCardExpiryFieldProps {\n    name: string;\n}\n\nconst CreditCardExpiryField: FunctionComponent<CreditCardExpiryFieldProps & WithLanguageProps> = ({\n    language,\n    name,\n}) => {\n    const handleChange = useCallback(\n        memoizeOne((field: FieldProps['field'], form: FieldProps['form']) => {\n            return (event: ChangeEvent<any>) => {\n                form.setFieldValue(field.name, formatCreditCardExpiryDate(event.target.value));\n            };\n        }),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps) => (\n            <TextInput\n                {...field}\n                autoComplete=\"cc-exp\"\n                id={field.name}\n                onChange={handleChange(field, form)}\n                placeholder={language.translate('payment.credit_card_expiration_placeholder_text')}\n                type=\"tel\"\n            />\n        ),\n        [handleChange, language],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_expiration_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(withLanguage(CreditCardExpiryField));\n","export default function formatCreditCardExpiryDate(value: string): string {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n    const trimmedMonth = month.slice(0, 2);\n    const trimmedYear =\n        year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n    // i.e.: '1'\n    if (value.length < 2) {\n        return month;\n    }\n\n    // ie.: '10 /' (without trailing space)\n    if (value.length > 3 && !trimmedYear) {\n        return trimmedMonth;\n    }\n\n    return `${trimmedMonth} / ${trimmedYear}`;\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardNameFieldProps {\n    name: string;\n}\n\nconst CreditCardNameField: FunctionComponent<CreditCardNameFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"cc-name\" id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_name_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNameField);\n","import creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { max } from 'lodash';\nimport React, {\n    ChangeEventHandler,\n    FunctionComponent,\n    memo,\n    ReactElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconLock } from '../../ui/icon';\n\nimport formatCreditCardNumber from './formatCreditCardNumber';\n\nexport interface CreditCardNumberFieldProps {\n    name: string;\n}\n\nconst CreditCardNumberField: FunctionComponent<CreditCardNumberFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps<string>) => (\n            <CreditCardNumberInput field={field} form={form} />\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_number_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\ninterface CreditCardNumberInputProps {\n    field: FieldProps<string>['field'];\n    form: FieldProps<string>['form'];\n}\n\nconst CreditCardNumberInput: FunctionComponent<CreditCardNumberInputProps> = ({ field, form }): ReactElement => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const nextSelectionEndRef = useRef(0);\n\n    useEffect(() => {\n        if (inputRef.current && inputRef.current.selectionEnd !== nextSelectionEndRef.current) {\n            inputRef.current.setSelectionRange(nextSelectionEndRef.current, nextSelectionEndRef.current);\n        }\n    });\n\n    const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n        (event) => {\n            const separator = ' ';\n            const { value = '' } = event.target;\n            const { name, value: previousValue = '' } = field;\n            const selectionEnd = inputRef.current && inputRef.current.selectionEnd;\n\n            // Only allow digits and spaces\n            if (new RegExp(`[^\\\\d${separator}]`).test(value)) {\n                return form.setFieldValue(name, previousValue);\n            }\n\n            const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n\n            const formattedValue = formatCreditCardNumber(\n                value.replace(new RegExp(separator, 'g'), '').slice(0, maxLength),\n                separator,\n            );\n\n            if (selectionEnd === value.length && value.length < formattedValue.length) {\n                nextSelectionEndRef.current = formattedValue.length;\n            } else {\n                nextSelectionEndRef.current = selectionEnd || 0;\n            }\n\n            void form.setFieldValue(name, formattedValue);\n        },\n        [field, form],\n    );\n\n    return (\n        <>\n            <TextInput\n                {...field}\n                additionalClassName=\"has-icon\"\n                autoComplete=\"cc-number\"\n                id={field.name}\n                onChange={handleChange}\n                ref={inputRef}\n                type=\"tel\"\n            />\n\n            <IconLock />\n        </>\n    );\n};\n\nexport default memo(CreditCardNumberField);\n","import { number } from 'card-validator';\n\nimport unformatCreditCardNumber from './unformatCreditCardNumber';\n\nexport default function formatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    const unformattedValue = unformatCreditCardNumber(value, separator);\n\n    return card.gaps\n        .filter((gapIndex) => unformattedValue.length > gapIndex)\n        .reduce(\n            (output, gapIndex, index) =>\n                [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(separator),\n            unformattedValue,\n        );\n}\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport CreditCardCodeField from './CreditCardCodeField';\nimport CreditCardCustomerCodeField from './CreditCardCustomerCodeField';\nimport CreditCardExpiryField from './CreditCardExpiryField';\nimport CreditCardNameField from './CreditCardNameField';\nimport CreditCardNumberField from './CreditCardNumberField';\n\nexport interface CreditCardFieldsetProps {\n    shouldShowCardCodeField?: boolean;\n    shouldShowCustomerCodeField?: boolean;\n    shouldShowSaveCardField?: boolean;\n}\n\nconst CreditCardFieldset: FunctionComponent<CreditCardFieldsetProps> = ({\n    shouldShowCardCodeField,\n    shouldShowCustomerCodeField,\n}) => (\n    <Fieldset\n        additionalClassName=\"creditCardFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <CreditCardNumberField name=\"ccNumber\" />\n\n            <CreditCardExpiryField name=\"ccExpiry\" />\n\n            <CreditCardNameField name=\"ccName\" />\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n\n            {shouldShowCustomerCodeField && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />}\n        </div>\n    </Fieldset>\n);\n\nexport default memo(CreditCardFieldset);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, expirationDate, number } from 'card-validator';\nimport { object, ObjectSchema, string } from 'yup';\n\nimport { CreditCardFieldsetValues } from '../paymentMethod';\n\nexport interface CreditCardValidationSchemaOptions {\n    isCardCodeRequired: boolean;\n    language: LanguageService;\n}\n\nexport default memoize(function getCreditCardValidationSchema({\n    isCardCodeRequired,\n    language,\n}: CreditCardValidationSchemaOptions): ObjectSchema<CreditCardFieldsetValues> {\n    const schema = {\n        ccCustomerCode: string(),\n        ccCvv: string(),\n        ccExpiry: string()\n            .required(language.translate('payment.credit_card_expiration_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_expiration_invalid_error'),\n                test: (value) => expirationDate(value).isValid,\n            }),\n        ccName: string()\n            .max(200)\n            .required(language.translate('payment.credit_card_name_required_error')),\n        ccNumber: string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value) => number(value).isValid,\n            }),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value) {\n                    const { card } = number(this.parent.ccNumber);\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    return object(schema);\n});\n","import React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CreditCardCodeField, CreditCardNumberField } from '../creditCard';\n\ninterface CreditCardValidationProps {\n    shouldShowCardCodeField: boolean;\n    shouldShowNumberField: boolean;\n}\n\nconst CreditCardValidation: React.FunctionComponent<CreditCardValidationProps> = ({\n    shouldShowNumberField,\n    shouldShowCardCodeField,\n}) => (\n    <>\n        {shouldShowNumberField && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {shouldShowNumberField && <CreditCardNumberField name=\"ccNumber\" />}\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n        </div>\n    </>\n);\n\nexport default CreditCardValidation;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, number } from 'card-validator';\nimport creditCardType from 'credit-card-type';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport CardInstrumentFieldsetValues from './CardInstrumentFieldsetValues';\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface InstrumentValidationSchemaOptions {\n    instrumentBrand: string;\n    instrumentLast4: string;\n    isCardCodeRequired: boolean;\n    isCardNumberRequired: boolean;\n    language: LanguageService;\n}\n\ninterface InstrumentValidationSchema {\n    ccCvv?: StringSchema;\n    ccNumber?: StringSchema;\n    instrumentId: StringSchema;\n}\n\nexport default memoize(function getInstrumentValidationSchema({\n    instrumentBrand,\n    instrumentLast4,\n    isCardCodeRequired,\n    isCardNumberRequired,\n    language,\n}: InstrumentValidationSchemaOptions): ObjectSchema<CardInstrumentFieldsetValues> {\n    const schema: InstrumentValidationSchema = {\n        instrumentId: string().required(),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value = '') {\n                    const cardType = mapFromInstrumentCardType(instrumentBrand);\n                    const cardInfo = creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined)\n                        .isValid;\n                },\n            });\n    }\n\n    if (isCardNumberRequired) {\n        schema.ccNumber = string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: language.translate('payment.credit_card_number_mismatch_error'),\n                test: (value = '') => value.slice(-instrumentLast4.length) === instrumentLast4,\n            });\n    }\n\n    return object(schema);\n});\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../../ui/form';\n\ninterface InstrumentStorageFieldProps {\n    isAccountInstrument: boolean;\n}\n\nconst InstrumentStorageField: FunctionComponent<InstrumentStorageFieldProps> = ({\n    isAccountInstrument,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_payment_method_label'\n        : 'payment.instrument_save_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--saveInstrument\"\n            labelContent={labelContent}\n            name=\"shouldSaveInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStorageField);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../../ui/form';\n\ninterface InstrumentStoreAsDefaultFieldProps {\n    isAccountInstrument: boolean;\n    disabled?: boolean;\n}\n\nconst InstrumentStoreAsDefaultField: FunctionComponent<InstrumentStoreAsDefaultFieldProps> = ({\n    isAccountInstrument,\n    disabled = false,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_as_default_payment_method_label'\n        : 'payment.instrument_save_as_default_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--setAsDefaultInstrument\"\n            disabled={disabled}\n            labelContent={labelContent}\n            name=\"shouldSetAsDefaultInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStoreAsDefaultField);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport InstrumentStorageField from './InstrumentStorageField';\nimport InstrumentStoreAsDefaultField from './InstrumentStoreAsDefaultField';\n\ninterface StoreInstrumentFieldsetProps {\n    isAccountInstrument?: boolean;\n    instrumentId?: string;\n}\n\ninterface WithStorageSettings {\n    showSave: boolean;\n    showSetAsDefault: boolean;\n    setAsDefaultEnabled: boolean;\n}\n\ntype WithFormValues = ConnectFormikProps<{ shouldSaveInstrument: boolean }>;\n\nconst StoreInstrumentFieldset: FunctionComponent<\n    StoreInstrumentFieldsetProps & WithStorageSettings\n> = ({ showSave, showSetAsDefault, isAccountInstrument = false, setAsDefaultEnabled }) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.instrument_storage_options_text\" />\n            </Legend>\n        }\n    >\n        {showSave && <InstrumentStorageField isAccountInstrument={isAccountInstrument} />}\n\n        {showSetAsDefault && (\n            <InstrumentStoreAsDefaultField\n                disabled={!setAsDefaultEnabled}\n                isAccountInstrument={isAccountInstrument}\n            />\n        )}\n    </Fieldset>\n);\n\nconst mapToProps = (\n    context: CheckoutContextProps,\n    props: StoreInstrumentFieldsetProps & WithFormValues,\n): WithStorageSettings | null => {\n    const {\n        checkoutState: {\n            data: { getInstruments },\n        },\n    } = context;\n\n    const allInstruments = getInstruments();\n\n    const {\n        formik: {\n            values: { shouldSaveInstrument: saveIsChecked },\n        },\n        instrumentId,\n    } = props;\n\n    const addingNewInstrument = !instrumentId;\n    const hasAnyOtherInstruments = !!allInstruments && allInstruments.length > 0;\n    const instrument =\n        allInstruments && allInstruments.find(({ bigpayToken }) => bigpayToken === instrumentId);\n\n    return {\n        ...props,\n        showSave: addingNewInstrument,\n        showSetAsDefault:\n            (addingNewInstrument && hasAnyOtherInstruments) ||\n            Boolean(instrument && !instrument.defaultInstrument),\n        setAsDefaultEnabled: !addingNewInstrument || saveIsChecked,\n    };\n};\n\nexport default connectFormik(withCheckout(mapToProps)(StoreInstrumentFieldset));\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    HostedFieldType,\n    Instrument,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport {\n    configureCardValidator,\n    CreditCardFieldset,\n    getCreditCardValidationSchema,\n} from '../creditCard';\nimport {\n    CardInstrumentFieldset,\n    CardInstrumentFieldsetValues,\n    CreditCardValidation,\n    getInstrumentValidationSchema,\n    isCardInstrument,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport CreditCardFieldsetValues from './CreditCardFieldsetValues';\n\nexport interface CreditCardPaymentMethodProps {\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    cardFieldset?: ReactNode;\n    cardValidationSchema?: ObjectSchema;\n    storedCardValidationSchema?: ObjectSchema;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    getStoredCardValidationFieldset?(selectedInstrument?: CardInstrument): ReactNode;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nexport type CreditCardPaymentMethodValues = CreditCardFieldsetValues | CardInstrumentFieldsetValues;\n\ninterface WithCheckoutCreditCardPaymentMethodProps {\n    instruments: CardInstrument[];\n    isCardCodeRequired: boolean;\n    isCustomerCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    shouldShowInstrumentFieldset: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\ninterface CreditCardPaymentMethodState {\n    focusedHostedFieldType?: HostedFieldType;\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n    isPreloaderOn: boolean;\n}\n\nclass CreditCardPaymentMethod extends Component<\n    CreditCardPaymentMethodProps &\n        WithCheckoutCreditCardPaymentMethodProps &\n        WithFormProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    CreditCardPaymentMethodState\n> {\n    state: CreditCardPaymentMethodState = {\n        isAddingNewCard: false,\n        isPreloaderOn: true,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n        configureCardValidator();\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await initializePayment(\n                {\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                },\n                this.getSelectedInstrument(),\n            ).then(() => this.setState({ isPreloaderOn: false }));\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        _prevProps: Readonly<CreditCardPaymentMethodProps>,\n        prevState: Readonly<CreditCardPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            initializePayment,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            isAddingNewCard !== prevState.isAddingNewCard\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                await initializePayment(\n                    {\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    },\n                    this.getSelectedInstrument(),\n                );\n\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            cardFieldset,\n            getStoredCardValidationFieldset,\n            instruments,\n            isInitializing,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldShowInstrumentFieldset,\n            method,\n        } = this.props;\n\n        const { isAddingNewCard, isPreloaderOn } = this.state;\n\n        const selectedInstrument = this.getSelectedInstrument();\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments || isPreloaderOn;\n        const shouldShowNumberField = selectedInstrument\n            ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n            : false;\n        const shouldShowCardCodeField = selectedInstrument\n            ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n            : false;\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--creditCard\" data-test='credit-cart-payment-method'>\n                    {shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            instruments={instruments}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={\n                                selectedInstrument && selectedInstrument.bigpayToken\n                            }\n                            validateInstrument={\n                                getStoredCardValidationFieldset ? (\n                                    getStoredCardValidationFieldset(selectedInstrument)\n                                ) : (\n                                    <CreditCardValidation\n                                        shouldShowCardCodeField={shouldShowCardCodeField}\n                                        shouldShowNumberField={shouldShowNumberField}\n                                    />\n                                )\n                            }\n                        />\n                    )}\n\n                    {shouldShowCreditCardFieldset && !cardFieldset && (\n                        <CreditCardFieldset\n                            shouldShowCardCodeField={\n                                method.config.cardCode || method.config.cardCode === null\n                            }\n                            shouldShowCustomerCodeField={method.config.requireCustomerCode}\n                        />\n                    )}\n\n                    {shouldShowCreditCardFieldset && cardFieldset}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getSelectedInstrument(): CardInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            cardValidationSchema,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            language,\n            method,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return (\n                storedCardValidationSchema ||\n                getInstrumentValidationSchema({\n                    instrumentBrand: selectedInstrument.brand,\n                    instrumentLast4: selectedInstrument.last4,\n                    isCardCodeRequired: isInstrumentCardCodeRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    isCardNumberRequired: isInstrumentCardNumberRequiredProp(selectedInstrument),\n                    language,\n                })\n            );\n        }\n\n        return (\n            cardValidationSchema ||\n            getCreditCardValidationSchema({\n                isCardCodeRequired: method.config.cardCode === true,\n                language,\n            })\n        );\n    }\n\n    private handleUseNewCard: () => void = () => {\n        const {\n            formik: { setFieldValue },\n        } = this.props;\n\n        setFieldValue('hostedForm.cardType', '');\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const {\n            formik: { setFieldValue },\n        } = this.props;\n\n        setFieldValue('hostedForm.cardType', '');\n\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const {\n            instruments,\n            formik: { setFieldValue },\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutCreditCardPaymentMethodProps,\n    CreditCardPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isCardInstrument),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: { getConfig, getCustomer, getInstruments, isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer || !method) {\n            return null;\n        }\n\n        const instruments = filterInstruments(getInstruments(method));\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            paymentMethod: method,\n        });\n\n        return {\n            instruments,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isCustomerCodeRequired: !!method.config.requireCustomerCode,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n            shouldShowInstrumentFieldset:\n                isInstrumentFeatureAvailableProp && instruments.length > 0,\n        };\n    };\n};\n\nexport default connectFormik(\n    withForm(\n        withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(CreditCardPaymentMethod))),\n    ),\n);\n","import { creditCardType } from 'card-validator';\n\nexport default function configureCardValidator(): void {\n    const discoverInfo = creditCardType.getTypeInfo('discover');\n    const visaInfo = creditCardType.getTypeInfo('visa');\n\n    // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n    creditCardType.updateCard('visa', {\n        lengths: [13, ...(visaInfo.lengths || [])],\n    });\n\n    // Add support for 8-BIN Discover Cards.\n    creditCardType.updateCard('discover', {\n        patterns: [...(discoverInfo.patterns || []), [810, 817]],\n    });\n\n    // Add support for Mada-BIN Cards.\n    creditCardType.addCard({\n        niceType: 'Mada',\n        type: 'mada',\n        patterns: [\n            400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817, 422818,\n            422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954, 440533, 440647,\n            440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865, 458456, 462220, 468540,\n            468541, 468542, 468543, 483010, 483011, 483012, 484783, 486094, 486095, 486096, 489317,\n            489318, 489319, 493428, 504300, 506968, 508160, 513213, 520058, 521076, 524130, 524514,\n            529415, 529741, 530060, 530906, 531095, 531196, 532013, 535825, 535989, 536023, 537767,\n            539931, 543085, 543357, 549760, 554180, 557606, 558848, 585265, 588845, 588846, 588847,\n            588848, 588849, 588850, 588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120,\n            968201, 968202, 968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n        ],\n        gaps: [4, 8, 12],\n        lengths: [16, 18, 19],\n        code: {\n            name: 'CVV',\n            size: 3,\n        },\n    });\n}\n","import { noop } from 'lodash';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Modal } from '../../ui/modal';\nimport {\n    withHostedCreditCardFieldset,\n    WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type BraintreeCreditCardPaymentMethodProps = CreditCardPaymentMethodProps;\n\ninterface BraintreeCreditCardPaymentMethodRef {\n    threeDSecureContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst BraintreeCreditCardPaymentMethod: FunctionComponent<\n    BraintreeCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const [threeDSecureContent, setThreeDSecureContent] = useState<HTMLElement>();\n    const ref = useRef<BraintreeCreditCardPaymentMethodRef>({\n        threeDSecureContentRef: createRef(),\n    });\n\n    const initializeBraintreePayment: BraintreeCreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    braintree: {\n                        threeDSecure: {\n                            addFrame(error, content, cancel) {\n                                if (error) {\n                                    return onUnhandledError(error);\n                                }\n\n                                setThreeDSecureContent(content);\n                                ref.current.cancelThreeDSecureVerification = cancel;\n                            },\n                            removeFrame() {\n                                setThreeDSecureContent(undefined);\n                                ref.current.cancelThreeDSecureVerification = undefined;\n                            },\n                        },\n                        form:\n                            getHostedFormOptions &&\n                            (await getHostedFormOptions(selectedInstrument)),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment, onUnhandledError],\n        );\n\n    const appendThreeDSecureContent = useCallback(() => {\n        if (ref.current.threeDSecureContentRef.current && threeDSecureContent) {\n            ref.current.threeDSecureContentRef.current.appendChild(threeDSecureContent);\n        }\n    }, [threeDSecureContent]);\n\n    const cancelThreeDSecureModalFlow = useCallback(() => {\n        setThreeDSecureContent(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n\n    return (\n        <>\n            <CreditCardPaymentMethod\n                {...rest}\n                cardFieldset={hostedFieldset}\n                cardValidationSchema={hostedValidationSchema}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeBraintreePayment}\n                onUnhandledError={onUnhandledError}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                isOpen={!!threeDSecureContent}\n                onAfterOpen={appendThreeDSecureContent}\n                onRequestClose={cancelThreeDSecureModalFlow}\n            >\n                <div ref={ref.current.threeDSecureContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default withHostedCreditCardFieldset(BraintreeCreditCardPaymentMethod);\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    withHostedCreditCardFieldset,\n    WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type HostedCreditCardPaymentMethodProps = Omit<\n    CreditCardPaymentMethodProps,\n    | 'cardFieldset'\n    | 'cardValidationSchema'\n    | 'storedCardValidationSchema'\n    | 'getStoredCardValidationFieldset'\n>;\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<\n    HostedCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    ...rest\n}) => {\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: getHostedFormOptions && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    return (\n        <CreditCardPaymentMethod\n            {...rest}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default withHostedCreditCardFieldset(HostedCreditCardPaymentMethod);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import { AccountInstrument, AchInstrument, BankInstrument, PayPalInstrument } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { IconNewAccount, IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument | AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default AccountInstrumentSelect;\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, ModalTriggerModalProps } from '../../ui/modal';\n\nimport AccountInstrumentSelect from './AccountInstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","import {\n    AccountInstrument,\n    CheckoutSelectors,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nexport interface HostedPaymentMethodProps {\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface WithCheckoutHostedPaymentMethodProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nclass HostedPaymentMethod extends Component<\n    HostedPaymentMethodProps &\n        WithCheckoutHostedPaymentMethodProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            description,\n            isInitializing = false,\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = this.props;\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n        const { instruments } = this.props;\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = this.props;\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutHostedPaymentMethodProps,\n    HostedPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n                isPaymentDataSubmitted,\n            },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const cart = getCart();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !cart || !customer || !method) {\n            return null;\n        }\n\n        const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n        const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n        return {\n            instruments: trustedInstruments,\n            isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n            isInstrumentFeatureAvailable:\n                !isPaymentDataSubmitted(method.id, method.gateway) &&\n                isInstrumentFeatureAvailable({\n                    config,\n                    customer,\n                    paymentMethod: method,\n                }),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n        };\n    };\n};\n\nexport default connectFormik(\n    withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(HostedPaymentMethod))),\n);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport getPaymentMethodName from './getPaymentMethodName';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps & WithLanguageProps> = ({\n    language,\n    method,\n    onSignOut,\n}) => (\n    <div className=\"signout-link\">\n        <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n        <a href=\"#\" onClick={preventDefault(onSignOut)}>\n            <TranslatedString\n                data={{ providerName: getPaymentMethodName(language)(method) }}\n                id=\"remote.sign_out_action\"\n            />\n        </a>{' '}\n        <TranslatedString id=\"remote.sign_out_after_action\" />\n    </div>\n);\n\nexport default withLanguage(SignOutLink);\n","import {\n    CheckoutSelectors,\n    CustomerRequestOptions,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport { noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport SignOutLink from './SignOutLink';\n\nexport interface WalletButtonPaymentMethodProps {\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutWalletButtonPaymentMethodProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentDataRequired: boolean;\n    isPaymentSelected: boolean;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nclass WalletButtonPaymentMethod extends Component<\n    WalletButtonPaymentMethodProps &\n        WithCheckoutWalletButtonPaymentMethodProps &\n        WithLanguageProps &\n        WithPaymentProps\n> {\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, disableSubmit, method, onUnhandledError = noop } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<\n            PaymentMethodProps &\n                WalletButtonPaymentMethodProps &\n                WithCheckoutWalletButtonPaymentMethodProps &\n                WithLanguageProps\n        >,\n    ): void {\n        const { method, isPaymentDataRequired } = this.props;\n        const { method: prevMethod, isPaymentDataRequired: prevIsPaymentDataRequired } = prevProps;\n\n        if (\n            method.initializationData !== prevMethod.initializationData ||\n            isPaymentDataRequired !== prevIsPaymentDataRequired\n        ) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const { isInitializing = false, isPaymentSelected } = this.props;\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    {isPaymentSelected ? this.renderPaymentView() : this.renderSignInView()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const { buttonId, language, signInButtonClassName, signInButtonLabel, method } = this.props;\n\n        return (\n            <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n                {signInButtonLabel || (\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_in_action\"\n                    />\n                )}\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const {\n            accountMask,\n            buttonId,\n            cardName,\n            cardType,\n            editButtonClassName,\n            editButtonLabel,\n            expiryMonth,\n            expiryYear,\n            shouldShowEditButton,\n            method,\n        } = this.props;\n\n        return (\n            <>\n                {cardName && (\n                    <p data-test=\"payment-method-wallet-card-name\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_name_label\" />:\n                        </strong>{' '}\n                        {cardName}\n                    </p>\n                )}\n\n                {accountMask && (\n                    <p data-test=\"payment-method-wallet-card-type\">\n                        <strong>{`${cardType}:`}</strong> {accountMask}\n                    </p>\n                )}\n\n                {expiryMonth && expiryYear && (\n                    <p data-test=\"payment-method-wallet-card-expiry\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                        </strong>{' '}\n                        {`${expiryMonth}/${expiryYear}`}\n                    </p>\n                )}\n\n                {shouldShowEditButton && (\n                    <p>\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    </p>\n                )}\n\n                <SignOutLink method={method} onSignOut={this.handleSignOut} />\n            </>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const { disableSubmit, method, isPaymentDataRequired } = this.props;\n\n        if (normalizeWalletPaymentData(method.initializationData) || !isPaymentDataRequired) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const { method, signOut, onSignOut = noop, onSignOutError = noop } = this.props;\n\n        try {\n            await signOut({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n}\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nfunction normalizeWalletPaymentData(data: any): WalletPaymentData | undefined {\n    if (!data) {\n        return;\n    }\n\n    if (data.card_information) {\n        return {\n            accountMask: formatAccountMask(data.card_information.number),\n            cardType: data.card_information.type,\n        };\n    }\n\n    if (data.cardData) {\n        return {\n            accountMask: formatAccountMask(data.cardData.accountMask),\n            cardType: data.cardData.cardType,\n            expiryMonth: data.cardData.expMonth,\n            expiryYear: data.cardData.expYear,\n        };\n    }\n\n    if (data.accountNum) {\n        const { card } = number(data.accountNum);\n\n        return {\n            accountMask: formatAccountMask(data.accountMask),\n            expiryMonth: data.expDate && `${data.expDate}`.substr(0, 2),\n            expiryYear: data.expDate && `${data.expDate}`.substr(2, 2),\n            cardType: card ? card.niceType : '',\n        };\n    }\n}\n\nfunction formatAccountMask(accountMask = '', padding = '****'): string {\n    return accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n}\n\nfunction mapFromCheckoutProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: WalletButtonPaymentMethodProps,\n): WithCheckoutWalletButtonPaymentMethodProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n    } = checkoutState;\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        return null;\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n    return {\n        ...walletPaymentData,\n        // FIXME: I'm not sure how this would work for non-English names.\n        cardName:\n            walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        signOut: checkoutService.signOutCustomer,\n    };\n}\n\nexport default withLanguage(\n    withPayment(withCheckout(mapFromCheckoutProps)(WalletButtonPaymentMethod)),\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { Omit } from 'utility-types';\n\nimport { masterpassFormatLocale, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nimport WalletButtonPaymentMethod, {\n    WalletButtonPaymentMethodProps,\n} from './WalletButtonPaymentMethod';\n\nexport type MasterpassPaymentMethodProps = Omit<WalletButtonPaymentMethodProps, 'buttonId'>;\n\ninterface WithCheckoutMasterpassProps {\n    storeLanguage: string;\n}\n\nconst MasterpassPaymentMethod: FunctionComponent<\n    MasterpassPaymentMethodProps & WithLanguageProps & WithCheckoutMasterpassProps\n> = ({ initializePayment, language, storeLanguage, ...rest }) => {\n    const initializeMasterpassPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            initializePayment({\n                ...options,\n                masterpass: {\n                    walletButton: 'walletButton',\n                },\n            }),\n        [initializePayment],\n    );\n\n    const {\n        config: { testMode },\n        initializationData: { checkoutId, isMasterpassSrcEnabled },\n    } = rest.method;\n\n    const locale = masterpassFormatLocale(storeLanguage);\n\n    const signInButtonLabel = useMemo(\n        () => (\n            <img\n                alt={language.translate('payment.masterpass_name_text')}\n                id=\"mpbutton\"\n                src={\n                    isMasterpassSrcEnabled\n                        ? `https://${\n                              testMode ? 'sandbox.' : ''\n                          }src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg?locale=${locale}&paymentmethod=master,visa,amex,discover&checkoutid=${checkoutId}`\n                        : `https://masterpass.com/dyn/img/btn/global/mp_chk_btn_126x030px.svg`\n                }\n            />\n        ),\n        [checkoutId, language, locale, testMode, isMasterpassSrcEnabled],\n    );\n\n    return (\n        <WalletButtonPaymentMethod\n            {...rest}\n            buttonId=\"walletButton\"\n            initializePayment={initializeMasterpassPayment}\n            signInButtonLabel={signInButtonLabel}\n        />\n    );\n};\n\nfunction mapFromCheckoutProps({ checkoutState }: CheckoutContextProps) {\n    const {\n        data: { getConfig },\n    } = checkoutState;\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        storeLanguage: config.storeProfile.storeLanguage,\n    };\n}\n\nexport default withCheckout(mapFromCheckoutProps)(withLanguage(MasterpassPaymentMethod));\n","export default function masterpassFormatLocale(localeLanguage: string): string {\n    return localeLanguage.replace('-', '_').toLowerCase();\n}\n","enum PaymentMethodProviderType {\n    Api = 'PAYMENT_TYPE_API',\n    Hosted = 'PAYMENT_TYPE_HOSTED',\n    Offline = 'PAYMENT_TYPE_OFFLINE',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n}\n\nexport default PaymentMethodProviderType;\n","import React, { FunctionComponent } from 'react';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { EMPTY_ARRAY } from '../../common/utility';\n\nimport HostedCreditCardPaymentMethod, {\n    HostedCreditCardPaymentMethodProps,\n} from './HostedCreditCardPaymentMethod';\nimport HostedPaymentMethod, { HostedPaymentMethodProps } from './HostedPaymentMethod';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\n\nexport type PaypalPaymentsProPaymentMethodProps =\n    | HostedPaymentMethodProps\n    | HostedCreditCardPaymentMethodProps;\n\ninterface WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    isHostedPayment: boolean;\n}\n\n/**\n * Paypal Payments Pro is a snowflake payment method - it can be a hosted\n * payment method or a credit card payment method depending on where the\n * checkout process is initiated. If it is started from the cart page via the\n * PayPal button, it behaves as a hosted payment method. But if it is started\n * from the checkout page, it behaves as a credit card payment method.\n */\nconst PaypalPaymentsProPaymentMethod: FunctionComponent<\n    PaypalPaymentsProPaymentMethodProps & WithCheckoutPaypalPaymentsProPaymentMethodProps\n> = ({ isHostedPayment, ...props }) => {\n    if (isHostedPayment) {\n        return <HostedPaymentMethod {...props} />;\n    }\n\n    return <HostedCreditCardPaymentMethod {...props} />;\n};\n\nfunction mapToPaypalPaymentsProPaymentMethodProps(\n    { checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    const {\n        data: { getCheckout },\n    } = checkoutState;\n    const { payments = EMPTY_ARRAY } = getCheckout() || {};\n    const selectedHostedMethod = payments.find(\n        ({ providerType }) => providerType === PaymentMethodProviderType.Hosted,\n    );\n\n    return {\n        isHostedPayment: selectedHostedMethod\n            ? selectedHostedMethod.providerId === method.id &&\n              selectedHostedMethod.gatewayId === method.gateway\n            : false,\n    };\n}\n\nexport default withCheckout(mapToPaypalPaymentsProPaymentMethodProps)(\n    PaypalPaymentsProPaymentMethod,\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\ninterface Props {\n    onMount(): () => void;\n    children?: React.ReactNode;\n}\n\nexport const Wrapper: FunctionComponent<Props> = (props) => {\n    const { children, onMount } = props;\n\n    useEffect(onMount, [onMount]);\n\n    return <>{children}</>;\n};\n","import { ComponentType } from 'react';\n\nimport HostedCreditCardPaymentMethod from '../HostedCreditCardPaymentMethod';\n\nimport { NoUI } from './NoUI';\n\ntype ComponentMap = Record<string, ComponentType<any>>;\n\nexport const initializationComponentMap: ComponentMap = {\n    card_ui: HostedCreditCardPaymentMethod,\n    none: NoUI,\n};\n","import React from 'react';\n\nimport { Props } from './PPSDKPaymentMethod';\nimport { usePropsToOnMount } from './usePropsToOnMount';\nimport { Wrapper } from './Wrapper';\n\nexport const NoUI = (props: Props) => {\n    const onMount = usePropsToOnMount(props);\n\n    return <Wrapper onMount={onMount} />;\n};\n","import { CheckoutService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport { useCallback, useMemo } from 'react';\n\ntype CheckoutServiceInstance = InstanceType<typeof CheckoutService>;\n\ninterface Props {\n    method: PaymentMethod;\n    deinitializePayment: CheckoutServiceInstance['deinitializePayment'];\n    initializePayment: CheckoutServiceInstance['initializePayment'];\n    onUnhandledError?(error: Error): void;\n}\n\nexport const usePropsToOnMount = (props: Props): (() => () => void) => {\n    const { initializePayment, deinitializePayment, method, onUnhandledError = noop } = props;\n\n    const options = useMemo(\n        () => ({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        }),\n        [method.gateway, method.id],\n    );\n\n    const onInit = useCallback(() => initializePayment(options), [initializePayment, options]);\n    const onDeinit = useCallback(\n        () => deinitializePayment(options),\n        [deinitializePayment, options],\n    );\n\n    return useCallback(() => {\n        onInit().catch(onUnhandledError);\n\n        return () => {\n            onDeinit().catch(onUnhandledError);\n        };\n    }, [onInit, onUnhandledError, onDeinit]);\n};\n","import { CheckoutService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent } from 'react';\n\nimport { initializationComponentMap } from './initializationComponentMap';\n\ntype CheckoutServiceInstance = InstanceType<typeof CheckoutService>;\n\nexport interface Props {\n    method: PaymentMethod;\n    deinitializePayment: CheckoutServiceInstance['deinitializePayment'];\n    initializePayment: CheckoutServiceInstance['initializePayment'];\n    onUnhandledError?(error: Error): void;\n}\n\nexport const PPSDKPaymentMethod: FunctionComponent<Props> = (props) => {\n    const { method, onUnhandledError = noop } = props;\n\n    const componentKey = method.initializationStrategy?.type || '';\n    const Component = initializationComponentMap[componentKey];\n\n    if (!Component) {\n        onUnhandledError(new Error('PPSDK initialization strategy not found'));\n\n        return null;\n    }\n\n    return <Component {...props} />;\n};\n","import {\n    CheckoutSelectors,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nimport BraintreeCreditCardPaymentMethod from './BraintreeCreditCardPaymentMethod';\nimport HostedCreditCardPaymentMethod from './HostedCreditCardPaymentMethod';\nimport HostedPaymentMethod from './HostedPaymentMethod';\nimport MasterpassPaymentMethod from './MasterpassPaymentMethod';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\nimport PaymentMethodType from './PaymentMethodType';\nimport PaypalPaymentsProPaymentMethod from './PaypalPaymentsProPaymentMethod';\nimport PPSDKPaymentMethod from './PPSDKPaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError?(error: Error): void;\n    submitForm?(): void;\n}\n\nexport interface WithCheckoutPaymentMethodProps {\n    isInitializing: boolean;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n}\n\n/**\n * If possible, try to avoid having components that are specific to a specific\n * payment provider or method. Instead, try to generalise the requirements and\n * use components that can are reusable for multiple payment methods. i.e.:\n * CreditCardPaymentMethod, HostedPaymentMethod etc... If it is really necessary\n * for a particular payment method, you may write a method-specific component for\n * the purpose of configuring a general-purpose component in order to fulfill\n * its specific product or technical requirements.\n */\nconst PaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & WithCheckoutPaymentMethodProps\n> = (props) => {\n    const { method } = props;\n\n    if (method.type === PaymentMethodProviderType.PPSDK) {\n        return <PPSDKPaymentMethod {...props} />;\n    }\n\n    if (method.id === PaymentMethodId.Masterpass) {\n        return <MasterpassPaymentMethod {...props} />;\n    }\n\n    if (method.id === PaymentMethodId.Braintree) {\n        return <BraintreeCreditCardPaymentMethod {...props} />;\n    }\n\n    if (\n        method.type !== PaymentMethodProviderType.Hosted &&\n        method.id === PaymentMethodId.PaypalPaymentsPro\n    ) {\n        return <PaypalPaymentsProPaymentMethod {...props} />;\n    }\n\n\n    if (\n        method.id === PaymentMethodId.BraintreeVenmo ||\n        method.id === PaymentMethodId.Humm ||\n        method.id === PaymentMethodId.Laybuy ||\n        method.id === PaymentMethodId.Quadpay ||\n        method.id === PaymentMethodId.Sezzle ||\n        method.id === PaymentMethodId.Zip ||\n        method.method === PaymentMethodType.Paypal ||\n        method.method === PaymentMethodType.PaypalCredit ||\n        method.type === PaymentMethodProviderType.Hosted\n    ) {\n        return <HostedPaymentMethod {...props} />;\n    }\n\n    // NOTE: Some payment methods have `method` as `credit-card` but they are\n    // actually not. Therefore, as a workaround, we are doing the following\n    // check last.\n    if (\n        method.method === PaymentMethodType.CreditCard ||\n        method.type === PaymentMethodProviderType.Api\n    ) {\n        return <HostedCreditCardPaymentMethod {...props} />;\n    }\n\n    return null;\n};\n\nfunction mapToWithCheckoutPaymentMethodProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaymentMethodProps {\n    const {\n        statuses: { isInitializingPayment },\n    } = checkoutState;\n\n    return {\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        deinitializePayment: checkoutService.deinitializePayment,\n        initializeCustomer: checkoutService.initializeCustomer,\n        initializePayment: checkoutService.initializePayment,\n        isInitializing: isInitializingPayment(method.id),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutPaymentMethodProps)(memo(PaymentMethodComponent));\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { ComponentType } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormProvider,\n    PaymentFormValues,\n    PaymentMethodResolveId,\n    PaymentMethodProps as ResolvedPaymentMethodProps,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout, WithCheckoutProps } from '../../checkout';\nimport { connectFormik, WithFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport createPaymentFormService from '../createPaymentFormService';\nimport resolvePaymentMethod from '../resolvePaymentMethod';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport { default as PaymentMethodV1 } from './PaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    resolveComponent?(\n        query: PaymentMethodResolveId,\n    ): ComponentType<ResolvedPaymentMethodProps> | undefined;\n    onUnhandledError(error: Error): void;\n}\n\nconst PaymentMethodContainer: ComponentType<\n    PaymentMethodProps &\n        WithCheckoutProps &\n        WithLanguageProps &\n        WithPaymentProps &\n        WithFormProps &\n        WithFormikProps<PaymentFormValues>\n> = ({\n    formik: formikContext,\n    checkoutService,\n    checkoutState,\n    disableSubmit,\n    hidePaymentSubmitButton,\n    isEmbedded,\n    isSubmitted,\n    isUsingMultiShipping,\n    language,\n    method,\n    onUnhandledError,\n    resolveComponent = resolvePaymentMethod,\n    setSubmit,\n    setSubmitted,\n    setValidationSchema,\n}) => {\n    const formContext = {\n        isSubmitted,\n        setSubmitted,\n    };\n\n    const paymentContext = {\n        disableSubmit,\n        hidePaymentSubmitButton,\n        setSubmit,\n        setValidationSchema,\n    };\n\n    const ResolvedPaymentMethod = resolveComponent({\n        id: method.id,\n        gateway: method.gateway,\n        type: method.type,\n    });\n\n    if (!ResolvedPaymentMethod) {\n        return (\n            <PaymentMethodV1\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    const paymentForm = createPaymentFormService(formikContext, formContext, paymentContext);\n\n    return (\n        <PaymentFormProvider paymentForm={paymentForm}>\n            <ResolvedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                language={language}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                paymentForm={paymentForm}\n            />\n        </PaymentFormProvider>\n    );\n};\n\nexport default withCheckout((props) => props)(\n    withLanguage(withPayment(withForm(connectFormik(PaymentMethodContainer)))),\n) as ComponentType<PaymentMethodProps>;\n","import { FormikContextType } from 'formik';\n\nimport {\n    PaymentFormService,\n    PaymentFormValues,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContextType } from '@bigcommerce/checkout/ui';\n\nimport { PaymentContextProps } from './PaymentContext';\n\nexport default function createPaymentFormService(\n    formikContext: FormikContextType<PaymentFormValues>,\n    formContext: FormContextType,\n    paymentContext: PaymentContextProps,\n): PaymentFormService {\n    const {\n        setFieldTouched,\n        setFieldValue,\n        submitForm,\n        validateForm,\n        values,\n    } = formikContext;\n\n    const { isSubmitted, setSubmitted } = formContext;\n\n    const { disableSubmit, setSubmit, setValidationSchema, hidePaymentSubmitButton } =\n        paymentContext;\n\n    const getFieldValue = <T>(key: string): T | unknown => values[key];\n\n    return {\n        disableSubmit,\n        getFieldValue,\n        getFormValues: () => values,\n        hidePaymentSubmitButton,\n        isSubmitted: () => isSubmitted,\n        setFieldTouched: setFieldTouched as PaymentFormService['setFieldTouched'],\n        setFieldValue: setFieldValue as PaymentFormService['setFieldValue'],\n        setSubmit,\n        setSubmitted,\n        setValidationSchema,\n        submitForm,\n        validateForm,\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find, get, noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { isMobile } from '../../common/utility';\nimport { Checklist, ChecklistItem, CustomChecklistItem } from '../../ui/form';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport getUniquePaymentMethodId, { parseUniquePaymentMethodId } from './getUniquePaymentMethodId';\nimport PaymentMethodTitle, { getPaymentMethodTitle } from './PaymentMethodTitle';\nimport PaymentMethodV2 from './PaymentMethodV2';\n\nexport interface PaymentMethodListProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    onSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n}\n\nfunction getPaymentMethodFromListValue(methods: PaymentMethod[], value: string): PaymentMethod {\n    const { gatewayId: gateway, methodId: id } = parseUniquePaymentMethodId(value);\n    const method = gateway ? find(methods, { gateway, id }) : find(methods, { id });\n\n    if (!method) {\n        throw new Error(`Unable to find payment method with id: ${id}`);\n    }\n\n    return method;\n}\n\nconst PaymentMethodList: FunctionComponent<\n    PaymentMethodListProps & ConnectFormikProps<{ paymentProviderRadio?: string }>\n> = ({\n    formik: { values },\n    isEmbedded,\n    isInitializingPayment,\n    isUsingMultiShipping,\n    methods,\n    onSelect = noop,\n    onUnhandledError,\n}) => {\n    const { language } = useLocale();\n    const {\n        checkoutState: {\n            data: { getConfig }\n        }\n    } = useCheckout();\n\n    const config = getConfig();\n\n    const titleText = useMemo(() => {\n        if (config && values.paymentProviderRadio) {\n            const checkoutSettings = config.checkoutSettings;\n            const cdnBasePath = config.cdnPath;\n            const storeCountryCode = config.storeProfile.storeCountryCode;\n            const paymentMethod = getPaymentMethodFromListValue(methods, values.paymentProviderRadio);\n            const methodName = getPaymentMethodName(language)(paymentMethod);\n            const { titleText } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(paymentMethod);\n\n            return titleText || methodName;\n        }\n\n        return '';\n    }, [config, values.paymentProviderRadio])\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelect(getPaymentMethodFromListValue(methods, value));\n        },\n        [methods, onSelect],\n    );\n\n    return (\n        <>\n            <div aria-live=\"assertive\" className='is-srOnly' role=\"status\">{titleText}</div>\n            <Checklist\n                defaultSelectedItemId={values.paymentProviderRadio}\n                isDisabled={isInitializingPayment}\n                name=\"paymentProviderRadio\"\n                onSelect={handleSelect}\n            >\n                {methods.map((method) => {\n                    const value = getUniquePaymentMethodId(method.id, method.gateway);\n                    const showOnlyOnMobileDevices = get(\n                        method,\n                        'initializationData.showOnlyOnMobileDevices',\n                        false,\n                    );\n\n                    if (showOnlyOnMobileDevices && !isMobile()) {\n                        return;\n                    }\n\n                    return (\n                        <PaymentMethodListItem\n                            isDisabled={isInitializingPayment}\n                            isEmbedded={isEmbedded}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            key={value}\n                            method={method}\n                            onUnhandledError={onUnhandledError}\n                            value={value}\n                        />\n                    );\n                })}\n            </Checklist>\n        </>\n    );\n};\n\ninterface PaymentMethodListItemProps {\n    isDisabled?: boolean;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    value: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentMethodListItem: FunctionComponent<PaymentMethodListItemProps> = ({\n    isDisabled,\n    isEmbedded,\n    isUsingMultiShipping,\n    method,\n    onUnhandledError,\n    value,\n}) => {\n    const renderPaymentMethod = useMemo(() => {\n        return (\n            <PaymentMethodV2\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError || noop}\n            />\n        );\n    }, [isEmbedded, isUsingMultiShipping, method, onUnhandledError]);\n\n    const renderPaymentMethodTitle = useCallback(\n        (isSelected: boolean) => <PaymentMethodTitle isSelected={isSelected} method={method} onUnhandledError={onUnhandledError} />,\n        [method],\n    );\n\n    if (method.initializationData?.isCustomChecklistItem) {\n        return (\n            <CustomChecklistItem\n                content={renderPaymentMethod}\n                htmlId={`radio-${value}`}\n            />\n        );\n    }\n\n    return (\n        <ChecklistItem\n            content={renderPaymentMethod}\n            htmlId={`radio-${value}`}\n            isDisabled={isDisabled}\n            label={renderPaymentMethodTitle}\n            value={value}\n        />\n    );\n};\n\nexport default connectFormik(memo(PaymentMethodList));\n","export default function isMobile(): boolean {\n    return /Android|iPhone|iPad|iPod/i.test(window.navigator.userAgent);\n}\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { mapToRedeemableProps, Redeemable, RedeemableProps } from '../cart';\nimport { withCheckout } from '../checkout';\nimport { Fieldset, Legend } from '../ui/form';\n\nconst PaymentRedeemables: FunctionComponent<RedeemableProps> = (redeemableProps) => (\n    <Fieldset \n        additionalClassName=\"redeemable-payments\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.redeemable_payments_text\" />\n            </Legend>\n        }\n    >\n        <Redeemable {...redeemableProps} showAppliedRedeemables={true} />\n    </Fieldset>\n);\n\nexport default withCheckout(mapToRedeemableProps)(memo(PaymentRedeemables));\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { withCheckout } from '../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { IconBolt } from '../ui/icon';\n\nimport { PaymentMethodId, PaymentMethodType } from './paymentMethod';\n\ninterface PaymentSubmitButtonTextProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodType?: string;\n    methodName?: string;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\nconst providersWithCustomClasses = [PaymentMethodId.Bolt];\n\nconst PaymentSubmitButtonText: FunctionComponent<PaymentSubmitButtonTextProps> = memo(\n    ({\n        methodId,\n        methodName,\n        methodType,\n        methodGateway,\n        initialisationStrategyType,\n        brandName,\n        isComplete,\n        isPaymentDataRequired,\n    }) => {\n        if (!isPaymentDataRequired) {\n            return <TranslatedString id=\"payment.place_order_action\" />;\n        }\n\n        if (methodName && initialisationStrategyType === 'none') {\n            return <TranslatedString data={{ methodName }} id=\"payment.ppsdk_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.AmazonPay) {\n            return <TranslatedString id=\"payment.amazonpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Bolt) {\n            return (\n                <>\n                    <IconBolt additionalClassName=\"payment-submit-button-bolt-icon\" />\n                    <TranslatedString id=\"payment.place_order_action\" />\n                </>\n            );\n        }\n\n        if (methodGateway === PaymentMethodId.Barclaycard) {\n            return <TranslatedString id=\"payment.barclaycard_continue_action\" />;\n        }\n\n        if (methodGateway === PaymentMethodId.BlueSnapV2) {\n            return <TranslatedString id=\"payment.bluesnap_v2_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.VisaCheckout) {\n            return <TranslatedString id=\"payment.visa_checkout_continue_action\" />;\n        }\n\n        if (\n            methodType === PaymentMethodType.PaypalVenmo ||\n            methodId === PaymentMethodId.BraintreeVenmo\n        ) {\n            return <TranslatedString id=\"payment.paypal_venmo_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.Paypal) {\n            const continueActionId = methodId === PaymentMethodId.PaypalCommerce\n                ? 'payment.place_order_action'\n                : 'payment.paypal_continue_action';\n\n            return <TranslatedString\n                data={{ isComplete }}\n                id={isComplete ? 'payment.paypal_complete_action' : continueActionId}\n            />;\n        }\n\n        if (methodType === PaymentMethodType.PaypalCredit) {\n            const continueTranslationId = brandName\n                ? 'payment.continue_with_brand'\n                : 'payment.paypal_pay_later_continue_action'\n            const completeTranslationId = brandName\n                ? 'payment.complete_with_brand'\n                : 'payment.paypal_pay_later_complete_action'\n\n            return (\n                <TranslatedString\n                    data={{ brandName, isComplete, continueTranslationId, completeTranslationId }}\n                    id={\n                        isComplete\n                            ? completeTranslationId\n                            : continueTranslationId\n                    }\n                />\n            );\n        }\n\n        if (methodId === PaymentMethodId.Quadpay) {\n            return <TranslatedString id=\"payment.quadpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Zip) {\n            return <TranslatedString id=\"payment.zip_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Klarna) {\n            return <TranslatedString id=\"payment.klarna_continue_action\" />;\n        }\n\n        return <TranslatedString id=\"payment.place_order_action\" />;\n    },\n);\n\nexport interface PaymentSubmitButtonProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodName?: string;\n    methodType?: string;\n    isDisabled?: boolean;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\ninterface WithCheckoutPaymentSubmitButtonProps {\n    isInitializing?: boolean;\n    isSubmitting?: boolean;\n}\n\nconst PaymentSubmitButton: FunctionComponent<\n    PaymentSubmitButtonProps & WithCheckoutPaymentSubmitButtonProps\n> = ({\n    isDisabled,\n    isInitializing,\n    isSubmitting,\n    isPaymentDataRequired,\n    methodGateway,\n    methodId,\n    methodName,\n    methodType,\n    initialisationStrategyType,\n    brandName,\n    isComplete,\n}) => (\n    <Button\n        className={\n            providersWithCustomClasses.includes(methodId as PaymentMethodId)\n                ? `payment-submit-button-${methodId}`\n                : undefined\n        }\n        data-test=\"payment-submit-button\"\n        disabled={isInitializing || isSubmitting || isDisabled}\n        id=\"checkout-payment-continue\"\n        isFullWidth\n        isLoading={isSubmitting}\n        size={ButtonSize.Large}\n        type=\"submit\"\n        variant={ButtonVariant.Action}\n    >\n        <PaymentSubmitButtonText\n            brandName={brandName}\n            initialisationStrategyType={initialisationStrategyType}\n            isComplete={isComplete}\n            isPaymentDataRequired={isPaymentDataRequired}\n            methodGateway={methodGateway}\n            methodId={methodId}\n            methodName={methodName}\n            methodType={methodType}\n        />\n    </Button>\n);\n\nexport default withCheckout(({ checkoutState }) => {\n    const {\n        data: { isPaymentDataRequired },\n        statuses: { isInitializingCustomer, isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    return {\n        isInitializing: isInitializingCustomer() || isInitializingPayment(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isSubmitting: isSubmittingOrder(),\n    };\n})(memo(PaymentSubmitButton));\n","import { CheckoutSelectors } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, MouseEvent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../checkout';\nimport { isErrorWithType } from '../common/error';\n\nexport interface SpamProtectionProps {\n    didExceedSpamLimit?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface SpamProtectionState {\n    shouldShowRetryButton: boolean;\n}\n\ninterface WithCheckoutSpamProtectionProps {\n    isExecutingSpamCheck: boolean;\n    executeSpamCheck(): Promise<CheckoutSelectors>;\n}\n\nfunction mapToSpamProtectionProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutSpamProtectionProps {\n    return {\n        isExecutingSpamCheck: checkoutState.statuses.isExecutingSpamCheck(),\n        executeSpamCheck: checkoutService.executeSpamCheck,\n    };\n}\n\nclass SpamProtectionField extends Component<\n    SpamProtectionProps & WithCheckoutSpamProtectionProps,\n    SpamProtectionState\n> {\n    state = {\n        shouldShowRetryButton: false,\n    };\n\n    async componentDidMount() {\n        const { didExceedSpamLimit } = this.props;\n\n        if (didExceedSpamLimit) {\n            return;\n        }\n\n        this.verify();\n    }\n\n    render() {\n        const { isExecutingSpamCheck } = this.props;\n\n        return (\n            <div className=\"spamProtection-container\">\n                <LoadingOverlay isLoading={isExecutingSpamCheck}>\n                    {this.renderContent()}\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { didExceedSpamLimit } = this.props;\n        const { shouldShowRetryButton } = this.state;\n\n        if (!didExceedSpamLimit && !shouldShowRetryButton) {\n            return;\n        }\n\n        return (\n            <div className=\"spamProtection-panel optimizedCheckout-overlay\">\n                <a\n                    className=\"spamProtection-panel-message optimizedCheckout-primaryContent\"\n                    data-test=\"spam-protection-verify-button\"\n                    onClick={this.handleRetry}\n                >\n                    <TranslatedString id=\"spam_protection.verify_action\" />\n                </a>\n            </div>\n        );\n    }\n\n    private async verify(): Promise<void> {\n        const { executeSpamCheck, onUnhandledError = noop } = this.props;\n\n        try {\n            await executeSpamCheck();\n        } catch (error) {\n            this.setState({ shouldShowRetryButton: true });\n\n            // Notify the parent component if the user experiences a problem other than cancelling the reCaptcha challenge.\n            if (\n                isErrorWithType(error) &&\n                error.type !== 'spam_protection_challenge_not_completed'\n            ) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    private handleRetry: (event: MouseEvent) => void = (event) => {\n        event.preventDefault();\n\n        this.verify();\n    };\n}\n\nexport default withCheckout(mapToSpamProtectionProps)(SpamProtectionField);\n","import { noop } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withCurrency, WithCurrencyProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { CheckboxInput } from '../../ui/form';\nimport { Tooltip, TooltipTrigger } from '../../ui/tooltip';\n\nexport interface StoreCreditFieldProps {\n    availableStoreCredit: number;\n    name: string;\n    usableStoreCredit: number;\n    isStoreCreditApplied: boolean;\n    onChange?(value: boolean): void;\n}\n\nconst StoreCreditField: FunctionComponent<StoreCreditFieldProps & WithCurrencyProps> = ({\n    availableStoreCredit,\n    currency,\n    name,\n    onChange = noop,\n    usableStoreCredit,\n    isStoreCreditApplied,\n}) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n\n    const handleChange = useCallback((event: any) => onChange(event.target.checked), [onChange]);\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"redeemable.apply_store_credit_before_action\" />{' '}\n                <TooltipTrigger\n                    placement=\"top-start\"\n                    tooltip={\n                        <Tooltip testId=\"payment-store-credit-tooltip\">\n                            <TranslatedString\n                                data={{\n                                    storeCredit: currency.toCustomerCurrency(availableStoreCredit),\n                                }}\n                                id=\"redeemable.store_credit_available_text\"\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <a href=\"#\" onClick={preventDefault()}>\n                        {currency.toCustomerCurrency(usableStoreCredit)}\n                    </a>\n                </TooltipTrigger>{' '}\n                <TranslatedString id=\"redeemable.apply_store_credit_after_action\" />\n            </>\n        ),\n        [availableStoreCredit, currency, usableStoreCredit],\n    );\n\n    return (\n        <CheckboxInput\n            checked={isStoreCreditApplied}\n            disabled={isSubmittingOrder()}\n            id={name}\n            label={labelContent}\n            name={name}\n            onChange={handleChange}\n            value={name}\n        />\n    );\n};\n\nexport default withCurrency(StoreCreditField);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst StoreCreditOverlay: FunctionComponent = () => (\n    <div className=\"storeCreditOverlay\" data-test=\"payment-store-credit-overlay\">\n        <p className=\"storeCreditOverlay-text\">\n            <TranslatedString id=\"payment.payment_not_required_text\" />\n        </p>\n    </div>\n);\n\nexport default StoreCreditOverlay;\n","import { ExtensionRegion, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, FormikState, withFormik, WithFormikConfig } from 'formik';\nimport { isNil, noop, omitBy } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useContext, useMemo } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { TermsConditions } from '../termsConditions';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getPaymentValidationSchema from './getPaymentValidationSchema';\nimport {\n    getPaymentMethodName,\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodList,\n} from './paymentMethod';\nimport PaymentRedeemables from './PaymentRedeemables';\nimport PaymentSubmitButton from './PaymentSubmitButton';\nimport SpamProtectionField from './SpamProtectionField';\nimport { StoreCreditField, StoreCreditOverlay } from './storeCredit';\n\nexport interface PaymentFormProps {\n    availableStoreCredit?: number;\n    defaultGatewayId?: string;\n    defaultMethodId: string;\n    didExceedSpamLimit?: boolean;\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isTermsConditionsRequired?: boolean;\n    isUsingMultiShipping?: boolean;\n    isStoreCreditApplied: boolean;\n    methods: PaymentMethod[];\n    selectedMethod?: PaymentMethod;\n    shouldShowStoreCredit?: boolean;\n    shouldDisableSubmit?: boolean;\n    shouldHidePaymentSubmitButton?: boolean;\n    shouldExecuteSpamCheck?: boolean;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit?: number;\n    validationSchema?: ObjectSchema<Partial<PaymentFormValues>>;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onStoreCreditChange?(useStoreCredit?: boolean): void;\n    onSubmit?(values: PaymentFormValues): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentForm: FunctionComponent<\n    PaymentFormProps & FormikProps<PaymentFormValues> & WithLanguageProps\n> = ({\n    availableStoreCredit = 0,\n    didExceedSpamLimit,\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isTermsConditionsRequired,\n    isStoreCreditApplied,\n    isUsingMultiShipping,\n    language,\n    methods,\n    onMethodSelect,\n    onStoreCreditChange,\n    onUnhandledError,\n    resetForm,\n    selectedMethod,\n    shouldDisableSubmit,\n    shouldHidePaymentSubmitButton,\n    shouldExecuteSpamCheck,\n    termsConditionsText = '',\n    termsConditionsUrl,\n    usableStoreCredit = 0,\n    values,\n}) => {\n    const selectedMethodId = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        switch (selectedMethod.id) {\n            case PaymentMethodId.AmazonPay:\n                if (selectedMethod.initializationData.paymentToken) {\n                    return;\n                }\n\n                return selectedMethod.id;\n\n            default:\n                return selectedMethod.id;\n        }\n    }, [selectedMethod]);\n\n    const brandName = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        return (\n            selectedMethod.initializationData?.payPalCreditProductBrandName?.credit ||\n            selectedMethod.initializationData?.payPalCreditProductBrandName\n        );\n    }, [selectedMethod]);\n\n    if (shouldExecuteSpamCheck) {\n        return (\n            <SpamProtectionField\n                didExceedSpamLimit={didExceedSpamLimit}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    return (\n        <Form className=\"checkout-form\" testId=\"payment-form\">\n            {usableStoreCredit > 0 && (\n                <StoreCreditField\n                    availableStoreCredit={availableStoreCredit}\n                    isStoreCreditApplied={isStoreCreditApplied}\n                    name=\"useStoreCredit\"\n                    onChange={onStoreCreditChange}\n                    usableStoreCredit={usableStoreCredit}\n                />\n            )}\n\n            <PaymentMethodListFieldset\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isPaymentDataRequired={isPaymentDataRequired}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onMethodSelect={onMethodSelect}\n                onUnhandledError={onUnhandledError}\n                resetForm={resetForm}\n                values={values}\n            />\n\n            <PaymentRedeemables />\n\n            {isTermsConditionsRequired && (\n                <TermsConditions\n                    termsConditionsText={termsConditionsText}\n                    termsConditionsUrl={termsConditionsUrl}\n                />\n            )}\n\n            <div className=\"form-actions\">\n                {shouldHidePaymentSubmitButton ? (\n                    <PaymentMethodSubmitButtonContainer />\n                ) : (\n                    <PaymentSubmitButton\n                        brandName={brandName}\n                        initialisationStrategyType={\n                            selectedMethod && selectedMethod.initializationStrategy?.type\n                        }\n                        isComplete={!!selectedMethod?.initializationData?.isComplete}\n                        isDisabled={shouldDisableSubmit}\n                        methodGateway={selectedMethod && selectedMethod.gateway}\n                        methodId={selectedMethodId}\n                        methodName={\n                            selectedMethod && getPaymentMethodName(language)(selectedMethod)\n                        }\n                        methodType={selectedMethod && selectedMethod.method}\n                    />\n                )}\n            </div>\n        </Form>\n    );\n};\n\nconst PaymentMethodSubmitButtonContainer: FunctionComponent = () => {\n    return <div className=\"submitButtonContainer\" id=\"checkout-payment-continue\" />;\n};\n\ninterface PaymentMethodListFieldsetProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    values: PaymentFormValues;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n    resetForm(nextValues?: Partial<FormikState<PaymentFormValues>>): void;\n}\n\nconst PaymentMethodListFieldset: FunctionComponent<PaymentMethodListFieldsetProps> = ({\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isUsingMultiShipping,\n    methods,\n    onMethodSelect = noop,\n    onUnhandledError,\n    resetForm,\n    values,\n}) => {\n    const { setSubmitted } = useContext(FormContext);\n\n    const handlePaymentMethodSelect = useCallback(\n        (method: PaymentMethod) => {\n            const updatedValues = {\n                ...values,\n                ccCustomerCode: '',\n                ccCvv: '',\n                ccDocument: '',\n                customerEmail: '',\n                customerMobile: '',\n                ccExpiry: '',\n                ccName: '',\n                ccNumber: '',\n                instrumentId: '',\n                paymentProviderRadio: getUniquePaymentMethodId(method.id, method.gateway),\n                shouldCreateAccount: true,\n                shouldSaveInstrument: false,\n            };\n\n            resetForm({ values: updatedValues });\n            setSubmitted(false);\n            onMethodSelect(method);\n        },\n        [values, onMethodSelect, resetForm, setSubmitted],\n    );\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.payment_methods_text\" />\n                </Legend>\n            }\n        >\n            {!isPaymentDataRequired() && <StoreCreditOverlay />}\n\n            <Extension region={ExtensionRegion.PaymentPaymentMethodListBefore}/>\n\n            <PaymentMethodList\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onSelect={handlePaymentMethodSelect}\n                onUnhandledError={onUnhandledError}\n            />\n        </Fieldset>\n    );\n};\n\nconst paymentFormConfig: WithFormikConfig<PaymentFormProps & WithLanguageProps, PaymentFormValues> =\n    {\n        mapPropsToValues: ({ defaultGatewayId, defaultMethodId }) => ({\n            ccCustomerCode: '',\n            ccCvv: '',\n            ccDocument: '',\n            customerEmail: '',\n            customerMobile: '',\n            ccExpiry: '',\n            ccName: '',\n            ccNumber: '',\n            paymentProviderRadio: getUniquePaymentMethodId(defaultMethodId, defaultGatewayId),\n            instrumentId: '',\n            shouldCreateAccount: true,\n            shouldSaveInstrument: false,\n            terms: false,\n            hostedForm: {\n                cardType: '',\n                errors: {\n                    cardCode: '',\n                    cardCodeVerification: '',\n                    cardExpiry: '',\n                    cardName: '',\n                    cardNumber: '',\n                    cardNumberVerification: '',\n                },\n            },\n            accountNumber: '',\n            routingNumber: '',\n        }),\n\n        handleSubmit: (values, { props: { onSubmit = noop } }) => {\n            onSubmit(\n                omitBy(\n                    values,\n                    (value, key) => isNil(value) || value === '' || key === 'hostedForm',\n                ),\n            );\n        },\n\n        validationSchema: ({\n            language,\n            isTermsConditionsRequired = false,\n            validationSchema,\n        }: PaymentFormProps & WithLanguageProps) =>\n            getPaymentValidationSchema({\n                additionalValidation: validationSchema,\n                isTermsConditionsRequired,\n                language,\n            }),\n    };\n\nexport default withLanguage(withFormik(paymentFormConfig)(memo(PaymentForm)));\n","import {\n    CartChangedError,\n    CheckoutSelectors,\n    CheckoutService,\n    CheckoutSettings,\n    OrderRequestBody,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { compact, find, isEmpty, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { ErrorLogger } from '@bigcommerce/checkout/error-handling-utils';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { withAnalytics } from '../analytics';\nimport { withCheckout } from '../checkout';\nimport {\n    ErrorModal,\n    ErrorModalOnCloseProps,\n    isCartChangedError,\n    isErrorWithType,\n} from '../common/error';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TermsConditionsType } from '../termsConditions';\n\nimport mapSubmitOrderErrorMessage, { mapSubmitOrderErrorTitle } from './mapSubmitOrderErrorMessage';\nimport mapToOrderRequestBody from './mapToOrderRequestBody';\nimport PaymentContext from './PaymentContext';\nimport PaymentForm from './PaymentForm';\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodProviderType,\n} from './paymentMethod';\n\nexport interface PaymentProps {\n    errorLogger: ErrorLogger;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void; // TODO: We're currently doing this check in multiple places, perhaps we should move it up so this check get be done in a single place instead.\n    onCartChangedError?(error: CartChangedError): void;\n    onFinalize?(): void;\n    onFinalizeError?(error: Error): void;\n    onReady?(): void;\n    onSubmit?(): void;\n    onSubmitError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutPaymentProps {\n    availableStoreCredit: number;\n    cartUrl: string;\n    defaultMethod?: PaymentMethod;\n    finalizeOrderError?: Error;\n    isInitializingPayment: boolean;\n    isSubmittingOrder: boolean;\n    isStoreCreditApplied: boolean;\n    isTermsConditionsRequired: boolean;\n    methods: PaymentMethod[];\n    shouldExecuteSpamCheck: boolean;\n    shouldLocaliseErrorMessages: boolean;\n    submitOrderError?: Error;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit: number;\n    applyStoreCredit(useStoreCredit: boolean): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n    finalizeOrderIfNeeded(): Promise<CheckoutSelectors>;\n    isPaymentDataRequired(): boolean;\n    loadCheckout(): Promise<CheckoutSelectors>;\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\n    submitOrder(values: OrderRequestBody): Promise<CheckoutSelectors>;\n    checkoutServiceSubscribe: CheckoutService['subscribe'];\n}\n\ninterface PaymentState {\n    didExceedSpamLimit: boolean;\n    isReady: boolean;\n    selectedMethod?: PaymentMethod;\n    shouldDisableSubmit: { [key: string]: boolean };\n    shouldHidePaymentSubmitButton: { [key: string]: boolean };\n    submitFunctions: { [key: string]: ((values: PaymentFormValues) => void) | null };\n    validationSchemas: { [key: string]: ObjectSchema<Partial<PaymentFormValues>> | null };\n}\n\nclass Payment extends Component<\n    PaymentProps & WithCheckoutPaymentProps & WithLanguageProps & AnalyticsContextProps,\n    PaymentState\n> {\n    state: PaymentState = {\n        didExceedSpamLimit: false,\n        isReady: false,\n        shouldDisableSubmit: {},\n        shouldHidePaymentSubmitButton: {},\n        validationSchemas: {},\n        submitFunctions: {},\n    };\n\n    private grandTotalChangeUnsubscribe?: () => void;\n\n    private getContextValue = memoizeOne(() => {\n        return {\n            disableSubmit: this.disableSubmit,\n            setSubmit: this.setSubmit,\n            setValidationSchema: this.setValidationSchema,\n            hidePaymentSubmitButton: this.hidePaymentSubmitButton,\n        };\n    });\n\n    async componentDidMount(): Promise<void> {\n        const {\n            finalizeOrderIfNeeded,\n            onFinalize = noop,\n            onFinalizeError = noop,\n            onReady = noop,\n            usableStoreCredit,\n            checkoutServiceSubscribe,\n        } = this.props;\n\n        if (usableStoreCredit) {\n            this.handleStoreCreditChange(true);\n        }\n\n        await this.loadPaymentMethodsOrThrow();\n\n        try {\n            const state = await finalizeOrderIfNeeded();\n            const order = state.data.getOrder();\n\n            onFinalize(order?.orderId);\n        } catch (error) {\n            if (isErrorWithType(error) && error.type !== 'order_finalization_not_required') {\n                onFinalizeError(error);\n            }\n        }\n\n        this.grandTotalChangeUnsubscribe = checkoutServiceSubscribe(\n            () => this.handleCartTotalChange(),\n            ({ data }) => data.getCheckout()?.grandTotal,\n            ({ data }) => data.getCheckout()?.outstandingBalance,\n        );\n\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        this.setState({ isReady: true });\n        onReady();\n    }\n\n    componentDidUpdate(): void {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        checkEmbeddedSupport(methods.map(({ id }) => id));\n    }\n\n    componentWillUnmount(): void {\n        if (this.grandTotalChangeUnsubscribe) {\n            this.grandTotalChangeUnsubscribe();\n            this.grandTotalChangeUnsubscribe = undefined;\n        }\n\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n    }\n\n    render(): ReactNode {\n        const {\n            defaultMethod,\n            finalizeOrderError,\n            isInitializingPayment,\n            isUsingMultiShipping,\n            methods,\n            applyStoreCredit,\n            ...rest\n        } = this.props;\n\n        const {\n            didExceedSpamLimit,\n            isReady,\n            selectedMethod = defaultMethod,\n            shouldDisableSubmit,\n            validationSchemas,\n            shouldHidePaymentSubmitButton,\n        } = this.state;\n\n        const uniqueSelectedMethodId =\n            selectedMethod && getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway);\n\n        return (\n            <PaymentContext.Provider value={this.getContextValue()}>\n                <ChecklistSkeleton isLoading={!isReady}>\n                    {!isEmpty(methods) && defaultMethod && (\n                        <PaymentForm\n                            {...rest}\n                            defaultGatewayId={defaultMethod.gateway}\n                            defaultMethodId={defaultMethod.id}\n                            didExceedSpamLimit={didExceedSpamLimit}\n                            isInitializingPayment={isInitializingPayment}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            methods={methods}\n                            onMethodSelect={this.setSelectedMethod}\n                            onStoreCreditChange={this.handleStoreCreditChange}\n                            onSubmit={this.handleSubmit}\n                            onUnhandledError={this.handleError}\n                            selectedMethod={selectedMethod}\n                            shouldDisableSubmit={\n                                (uniqueSelectedMethodId &&\n                                    shouldDisableSubmit[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            shouldHidePaymentSubmitButton={\n                                (uniqueSelectedMethodId &&\n                                    rest.isPaymentDataRequired() &&\n                                    shouldHidePaymentSubmitButton[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            validationSchema={\n                                (uniqueSelectedMethodId &&\n                                    validationSchemas[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                        />\n                    )}\n                </ChecklistSkeleton>\n\n                {this.renderOrderErrorModal()}\n                {this.renderEmbeddedSupportErrorModal()}\n            </PaymentContext.Provider>\n        );\n    }\n\n    private renderOrderErrorModal(): ReactNode {\n        const { finalizeOrderError, language, shouldLocaliseErrorMessages, submitOrderError } =\n            this.props;\n\n        // FIXME: Export correct TS interface\n        const error: any = submitOrderError || finalizeOrderError;\n\n        if (\n            !error ||\n            error.type === 'order_finalization_not_required' ||\n            error.type === 'payment_cancelled' ||\n            error.type === 'payment_invalid_form' ||\n            error.type === 'spam_protection_not_completed' ||\n            error.type === 'invalid_hosted_form_value'\n        ) {\n            return null;\n        }\n\n        return (\n            <ErrorModal\n                error={error}\n                message={mapSubmitOrderErrorMessage(\n                    error,\n                    language.translate.bind(language),\n                    shouldLocaliseErrorMessages,\n                )}\n                onClose={this.handleCloseModal}\n                title={mapSubmitOrderErrorTitle(error, language.translate.bind(language))}\n            />\n        );\n    }\n\n    private renderEmbeddedSupportErrorModal(): ReactNode {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        try {\n            checkEmbeddedSupport(methods.map(({ id }) => id));\n        } catch (error) {\n            if (error instanceof Error) {\n                return <ErrorModal error={error} onClose={this.handleCloseModal} />;\n            }\n        }\n\n        return null;\n    }\n\n    private disableSubmit: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldDisableSubmit } = this.state;\n\n        if (shouldDisableSubmit[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldDisableSubmit: {\n                ...shouldDisableSubmit,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private hidePaymentSubmitButton: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldHidePaymentSubmitButton } = this.state;\n\n        if (shouldHidePaymentSubmitButton[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldHidePaymentSubmitButton: {\n                ...shouldHidePaymentSubmitButton,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private handleBeforeUnload: (event: BeforeUnloadEvent) => string | undefined = (event) => {\n        const { defaultMethod, isSubmittingOrder, language } = this.props;\n        const { selectedMethod = defaultMethod } = this.state;\n\n        if (\n            !isSubmittingOrder ||\n            !selectedMethod ||\n            selectedMethod.type === PaymentMethodProviderType.Hosted ||\n            selectedMethod.type === PaymentMethodProviderType.PPSDK ||\n            selectedMethod.skipRedirectConfirmationAlert\n        ) {\n            return;\n        }\n\n        const message = language.translate('common.leave_warning');\n\n        event.returnValue = message;\n\n        return message;\n    };\n\n    private handleCloseModal: (event: Event, props: ErrorModalOnCloseProps) => Promise<void> =\n        async (_, { error }) => {\n            if (!error) {\n                return;\n            }\n\n            const { cartUrl, clearError, loadCheckout } = this.props;\n            const { type: errorType } = error as any; // FIXME: Export correct TS interface\n\n            if (\n                errorType === 'provider_fatal_error' ||\n                errorType === 'order_could_not_be_finalized_error'\n            ) {\n                window.location.replace(cartUrl || '/');\n            }\n\n            if (errorType === 'tax_provider_unavailable') {\n                window.location.reload();\n            }\n\n            if (errorType === 'cart_consistency') {\n                await loadCheckout();\n            }\n\n            if (isErrorWithType(error) && error.body) {\n                const { body, headers, status } = error;\n\n                if (body.type === 'provider_error' && headers.location) {\n                    window.top?.location.assign(headers.location);\n                }\n\n                // Reload the checkout object to get the latest `shouldExecuteSpamCheck` value,\n                // which will in turn make `SpamProtectionField` visible again.\n                // NOTE: As a temporary fix, we're checking the status code instead of the error\n                // type because of an issue with Nginx config, which causes the server to return\n                // HTML page instead of JSON response when there is a 429 error.\n                if (\n                    status === 429 ||\n                    body.type === 'spam_protection_expired' ||\n                    body.type === 'spam_protection_failed'\n                ) {\n                    this.setState({ didExceedSpamLimit: true });\n\n                    await loadCheckout();\n                }\n            }\n\n            clearError(error);\n        };\n\n    private handleStoreCreditChange: (useStoreCredit: boolean) => void = async (useStoreCredit) => {\n        const { applyStoreCredit, onUnhandledError = noop } = this.props;\n\n        try {\n            await applyStoreCredit(useStoreCredit);\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    };\n\n    private handleError: (error: Error) => void = (error: Error) => {\n        const { onUnhandledError = noop, errorLogger } = this.props;\n\n        const { type } = error as any;\n\n        if (type === 'unexpected_detachment') {\n            errorLogger.log(error);\n\n            return;\n        }\n\n        return onUnhandledError(error);\n    };\n\n    private handleSubmit: (values: PaymentFormValues) => void = async (values) => {\n        const {\n            defaultMethod,\n            loadPaymentMethods,\n            isPaymentDataRequired,\n            onCartChangedError = noop,\n            onSubmit = noop,\n            onSubmitError = noop,\n            submitOrder,\n            analyticsTracker\n        } = this.props;\n\n        const { selectedMethod = defaultMethod, submitFunctions } = this.state;\n\n        analyticsTracker.clickPayButton({shouldCreateAccount: values.shouldCreateAccount});\n\n        const customSubmit =\n            selectedMethod &&\n            submitFunctions[getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway)];\n\n        if (customSubmit) {\n            return customSubmit(values);\n        }\n\n        try {\n            const state = await submitOrder(mapToOrderRequestBody(values, isPaymentDataRequired()));\n            const order = state.data.getOrder();\n\n            analyticsTracker.paymentComplete();\n\n            onSubmit(order?.orderId);\n        } catch (error) {\n            analyticsTracker.paymentRejected();\n\n            if (isErrorWithType(error) && error.type === 'payment_method_invalid') {\n                return loadPaymentMethods();\n            }\n\n            if (isCartChangedError(error)) {\n                return onCartChangedError(error);\n            }\n\n            onSubmitError(error);\n        }\n    };\n\n    private setSelectedMethod: (method?: PaymentMethod) => void = (method) => {\n        const { selectedMethod } = this.state;\n\n        if (selectedMethod === method) {\n            return;\n        }\n\n        if (method) {\n            this.trackSelectedPaymentMethod(method);\n        }\n\n        this.setState({ selectedMethod: method });\n    };\n\n    private setSubmit: (\n        method: PaymentMethod,\n        fn: (values: PaymentFormValues) => void | null,\n    ) => void = (method, fn) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { submitFunctions } = this.state;\n\n        if (submitFunctions[uniqueId] === fn) {\n            return;\n        }\n\n        this.setState({\n            submitFunctions: {\n                ...submitFunctions,\n                [uniqueId]: fn,\n            },\n        });\n    };\n\n    private setValidationSchema: (\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ) => void = (method, schema) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { validationSchemas } = this.state;\n\n        if (validationSchemas[uniqueId] === schema) {\n            return;\n        }\n\n        this.setState({\n            validationSchemas: {\n                ...validationSchemas,\n                [uniqueId]: schema,\n            },\n        });\n    };\n\n    private trackSelectedPaymentMethod(method: PaymentMethod) {\n        const { analyticsTracker } = this.props;\n\n        const methodName = method.config.displayName || method.id;\n        const methodId = method.id;\n\n        analyticsTracker.selectedPaymentMethod(methodName, methodId);\n    }\n\n    private async loadPaymentMethodsOrThrow(): Promise<void> {\n        const {\n            loadPaymentMethods,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await loadPaymentMethods();\n\n            const selectedMethod = this.state.selectedMethod || this.props.defaultMethod;\n\n            if (selectedMethod) {\n                this.trackSelectedPaymentMethod(selectedMethod);\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    private async handleCartTotalChange(): Promise<void> {\n        const { isReady } = this.state;\n\n        if (!isReady) {\n            return;\n        }\n\n        this.setState({ isReady: false });\n\n        await this.loadPaymentMethodsOrThrow();\n\n        this.setState({ isReady: true });\n    }\n}\n\nexport function mapToPaymentProps({\n        checkoutService,\n        checkoutState,\n}: CheckoutContextProps): WithCheckoutPaymentProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getOrder,\n            getPaymentMethod,\n            getPaymentMethods,\n            isPaymentDataRequired,\n            getPaymentProviderCustomer,\n        },\n        errors: { getFinalizeOrderError, getSubmitOrderError },\n        statuses: { isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const customer = getCustomer();\n    const consignments = getConsignments();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n\n    const { isComplete = false } = getOrder() || {};\n    let methods = getPaymentMethods() || EMPTY_ARRAY;\n\n    // TODO: In accordance with the checkout team, this functionality is temporary and will be implemented in the backend instead.\n    if (paymentProviderCustomer?.stripeLinkAuthenticationState) {\n        const stripeUpePaymentMethod = methods.filter(method =>\n            method.id === 'card' && method.gateway === PaymentMethodId.StripeUPE\n        );\n\n        methods = stripeUpePaymentMethod.length ? stripeUpePaymentMethod : methods;\n    }\n\n    if (!checkout || !config || !customer || isComplete) {\n        return null;\n    }\n\n    const {\n        enableTermsAndConditions: isTermsConditionsEnabled,\n        features,\n        orderTermsAndConditionsType: termsConditionsType,\n        orderTermsAndConditions: termsCondtitionsText,\n        orderTermsAndConditionsLink: termsCondtitionsUrl,\n    } = config.checkoutSettings as CheckoutSettings & { orderTermsAndConditionsLocation: string };\n\n    const isTermsConditionsRequired = isTermsConditionsEnabled;\n    const selectedPayment = find(checkout.payments, {\n        providerType: PaymentMethodProviderType.Hosted,\n    });\n\n    const { isStoreCreditApplied } = checkout;\n\n    let selectedPaymentMethod;\n    let filteredMethods;\n\n    filteredMethods = methods.filter((method: PaymentMethod) => {\n        if (method.id === PaymentMethodId.Bolt && method.initializationData) {\n            return !!method.initializationData.showInCheckout;\n        }\n\n        if (method.id === PaymentMethodId.BraintreeLocalPaymentMethod) {\n            return false;\n        }\n\n        return true;\n    });\n\n    if (consignments && consignments.length > 1) {\n        const multiShippingIncompatibleMethodIds: string[] = [\n            PaymentMethodId.AmazonPay,\n        ];\n\n        filteredMethods = methods.filter((method: PaymentMethod) => {\n            return !multiShippingIncompatibleMethodIds.includes(method.id);\n        });\n    }\n\n    if (selectedPayment) {\n        selectedPaymentMethod = getPaymentMethod(\n            selectedPayment.providerId,\n            selectedPayment.gatewayId,\n        );\n        filteredMethods = selectedPaymentMethod\n            ? compact([selectedPaymentMethod])\n            : filteredMethods;\n    } else {\n        selectedPaymentMethod = find(filteredMethods, {\n            config: { hasDefaultStoredInstrument: true },\n        });\n        // eslint-disable-next-line no-self-assign\n        filteredMethods = filteredMethods;\n    }\n\n    return {\n        applyStoreCredit: checkoutService.applyStoreCredit,\n        availableStoreCredit: customer.storeCredit,\n        cartUrl: config.links.cartLink,\n        clearError: checkoutService.clearError,\n        defaultMethod: selectedPaymentMethod || filteredMethods[0],\n        finalizeOrderError: getFinalizeOrderError(),\n        finalizeOrderIfNeeded: checkoutService.finalizeOrderIfNeeded,\n        loadCheckout: checkoutService.loadCheckout,\n        isInitializingPayment: isInitializingPayment(),\n        isPaymentDataRequired,\n        isStoreCreditApplied,\n        isSubmittingOrder: isSubmittingOrder(),\n        isTermsConditionsRequired,\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\n        methods: filteredMethods,\n        shouldExecuteSpamCheck: checkout.shouldExecuteSpamCheck,\n        shouldLocaliseErrorMessages:\n            features['PAYMENTS-6799.localise_checkout_payment_error_messages'],\n        submitOrder: checkoutService.submitOrder,\n        submitOrderError: getSubmitOrderError(),\n        checkoutServiceSubscribe: checkoutService.subscribe,\n        termsConditionsText:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.TextArea\n                ? termsCondtitionsText\n                : undefined,\n        termsConditionsUrl:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.Link\n                ? termsCondtitionsUrl\n                : undefined,\n        usableStoreCredit:\n            checkout.grandTotal > 0 ? Math.min(checkout.grandTotal, customer.storeCredit || 0) : 0,\n    };\n}\n\nexport default withAnalytics(withLanguage(withCheckout(mapToPaymentProps)(Payment)));\n","import { OrderPaymentRequestBody, OrderRequestBody } from '@bigcommerce/checkout-sdk';\nimport { isEmpty, isNil, omitBy } from 'lodash';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { unformatCreditCardExpiryDate, unformatCreditCardNumber } from './creditCard';\nimport {\n    hasCreditCardExpiry,\n    hasCreditCardNumber,\n    parseUniquePaymentMethodId,\n} from './paymentMethod';\n\nexport default function mapToOrderRequestBody(\n    values: PaymentFormValues,\n    isPaymentDataRequired: boolean,\n): OrderRequestBody {\n    if (!isPaymentDataRequired) {\n        return {};\n    }\n\n    const { paymentProviderRadio, ...rest } = values;\n    const { methodId, gatewayId } = parseUniquePaymentMethodId(paymentProviderRadio);\n    const payload: OrderRequestBody = {\n        payment: { gatewayId, methodId },\n    };\n    const paymentData = omitBy(\n        {\n            ...rest,\n            ccExpiry: hasCreditCardExpiry(values)\n                ? unformatCreditCardExpiryDate(values.ccExpiry)\n                : null,\n            ccNumber: hasCreditCardNumber(values)\n                ? unformatCreditCardNumber(values.ccNumber)\n                : null,\n        },\n        isNil,\n    ) as OrderPaymentRequestBody['paymentData'];\n\n    if (payload.payment && !isEmpty(paymentData)) {\n        payload.payment.paymentData = paymentData;\n    }\n\n    return payload;\n}\n","import { CartChangedError } from '@bigcommerce/checkout-sdk';\n\nexport default function isCartChangedError(error: unknown): error is CartChangedError {\n    const requestError = error as CartChangedError;\n\n    return requestError.type === 'cart_changed';\n}\n","import { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { EMPTY_ARRAY } from '../common/utility';\n\nimport { RedeemableProps } from './Redeemable';\n\nexport default function mapToRedeemableProps(\n    context: CheckoutContextProps,\n): RedeemableProps | null {\n    const {\n        checkoutService,\n        checkoutState: {\n            data: { getConfig, getCoupons, getGiftCertificates },\n            statuses: {\n                isApplyingCoupon,\n                isApplyingGiftCertificate,\n                isRemovingCoupon,\n                isRemovingGiftCertificate,\n            },\n            errors: {\n                getApplyCouponError,\n                getApplyGiftCertificateError,\n                getRemoveCouponError,\n                getRemoveGiftCertificateError,\n            },\n        },\n    } = context;\n\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        appliedRedeemableError: getApplyCouponError() || getApplyGiftCertificateError(),\n        applyCoupon: checkoutService.applyCoupon,\n        applyGiftCertificate: checkoutService.applyGiftCertificate,\n        clearError: checkoutService.clearError,\n        coupons: getCoupons() || EMPTY_ARRAY,\n        giftCertificates: getGiftCertificates() || EMPTY_ARRAY,\n        isApplyingRedeemable: isApplyingCoupon() || isApplyingGiftCertificate(),\n        isRemovingCoupon: isRemovingCoupon(),\n        isRemovingGiftCertificate: isRemovingGiftCertificate(),\n        onRemovedCoupon: checkoutService.removeCoupon,\n        onRemovedGiftCertificate: checkoutService.removeGiftCertificate,\n        removedRedeemableError: getRemoveCouponError() || getRemoveGiftCertificateError(),\n        shouldCollapseCouponCode: config.checkoutSettings.isCouponCodeCollapsed,\n    };\n}\n","import React, {\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactElement,\n    ReactNode,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler<HTMLDivElement> }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nconst ModalTrigger = ({ children, modal }: ModalTriggerProps): ReactElement => {\n    const [isOpen, setIsOpen] = useState(false);\n    const canHandleEventRef = useRef(false);\n\n    useEffect(() => {\n        canHandleEventRef.current = true;\n\n        return () => {\n            canHandleEventRef.current = false;\n        };\n    }, []);\n\n    const handleOpen = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(true);\n    };\n\n    const handleClose = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(false);\n    };\n\n    const handleKeyOpen = (keyboardEvent: KeyboardEvent<HTMLElement>): void => {\n        if (keyboardEvent.key === 'Enter') {\n            handleOpen();\n        }\n    };\n\n    return (\n        <>\n            {children({\n                onClick: handleOpen,\n                onKeyPress: handleKeyOpen,\n            })}\n\n            {modal({\n                isOpen,\n                onRequestClose: handleClose,\n            })}\n        </>\n    );\n};\n\nexport default ModalTrigger;\n"],"names":["memo","coupon","className","displayName","TranslatedString","id","code","giftCertificate","ShopperCurrency","amount","used","remaining","height","viewBox","width","xmlns","d","children","isRemoving","onRemove","disabled","onClick","type","AppliedCouponChecklistItem","onRemoved","handleRemove","useCallback","AppliedGiftCertificateChecklistItem","coupons","giftCertificates","isRemovingCoupon","isRemovingGiftCertificate","onRemovedCoupon","onRemovedGiftCertificate","length","map","key","RedeemableForm","appliedRedeemableError","isApplyingRedeemable","clearError","noop","submitForm","language","checkoutState","statuses","isSubmittingOrder","themeV2","handleSubmitForm","setSubmitted","handleKeyDown","memoizeOne","event","keyCode","preventDefault","handleSubmit","renderLabel","name","Label","hidden","htmlFor","renderErrorMessage","errorCode","errorMessage","renderInput","field","errors","Alert","A","Error","message","TextInput","translate","onKeyDown","testId","Button","isLoading","variant","Secondary","renderContent","FormField","input","label","withLanguage","mapPropsToValues","redeemableCode","props","applyCoupon","applyGiftCertificate","trim","error","validationSchema","required","shouldCollapseCouponCode","showAppliedRedeemables","formProps","Toggle","openByDefault","toggle","isOpen","href","body","header","renderModal","Modal","additionalBodyClassName","footer","onRequestClose","size","Small","shouldShowCloseButton","ModalTrigger","modal","split","line","Fragment","TermsConditionsType","TermsConditionsModalCheckboxField","terms","translatedLabel","url","parsedLabel","parseAnchor","labelContent","ModalHeader","CheckboxFormField","TermsConditionsCheckboxField","useMemo","TranslatedHtml","data","TermsConditionsTextField","TextArea","defaultValue","readOnly","Fieldset","additionalClassName","legend","Legend","isTermsConditionsTextArea","isTermsConditionModal","mapSubmitOrderErrorMessage","shouldLocalise","subtype","includes","err","join","mapSubmitOrderErrorTitle","unformatCreditCardExpiryDate","value","month","year","RegExp","test","slice","unformatCreditCardNumber","separator","card","number","replace","getUniquePaymentMethodId","methodId","gatewayId","compact","parseUniquePaymentMethodId","undefined","hasCreditCardNumber","values","Object","hasCreditCardExpiry","createContext","TermsConditions","termsConditionsUrl","termsConditionsText","TermsConditionsField","Link","getPaymentValidationSchema","additionalValidation","isTermsConditionsRequired","schemaFields","paymentProviderRadio","schemaFieldsWithTerms","concat","oneOf","getTermsConditionsValidationSchema","PaymentMethodType","getPaymentMethodName","method","translations","PaymentMethodId","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","config","capitalize","get","content","htmlId","onUnhandledError","checkoutService","useEffect","initializePayment","BigCommercePaymentsPayLater","bigcommerce_payments_paylater","bannerContainerId","deinitializePayment","BraintreePaypalCredit","braintree","containerId","instrumentTypeMap","AMEX","instrument","component","lazy","BITCOIN","BITCOIN_CASH","BANCONTACT","CARNET","CB","DINERS","DANKORT","DISCOVER","DOGECOIN","ELECTRON","ELO","ETHEREUM","HIPER","JCB","LITECOIN","MADA","MAESTRO","MC","SHIBA_INU","TROY","CUP","USD_COIN","VISA","mapFromPaymentMethodCardType","filterInstrumentTypes","instrumentTypes","supportedInstrumentTypes","record","filter","cardType","iconProps","Medium","IconComponent","instrumentType","find","getPaymentMethodIconComponent","Suspense","selectedCardType","cardTypes","filteredCardTypes","getPaymentMethodTitle","basePath","checkoutSettings","storeCountryCode","cdnPath","path","paymentWithLogo","initializationData","methodsWithLogo","methodName","methodDisplayName","isCreditCard","toLowerCase","PaypalCommerceCredit","payPalCreditProductBrandName","credit","AdyenV2","AdyenV3","getPaymentMethodDisplayName","customTitles","CreditCard","logoUrl","titleText","BraintreeVenmo","subtitle","BraintreeAch","BraintreeLocalPaymentMethod","BigCommercePaymentsPayPal","BigCommercePaymentsAlternativeMethod","PaypalCommerce","PaypalCommerceAlternativeMethod","isExperimentEnabled","ApplePay","PayWithGoogle","Humm","enableBillie","Laybuy","Masterpass","Quadpay","Sezzle","Zip","Barclaycard","Mollie","Checkoutcom","StripeV3","StripeUPE","WorldpayAccess","gateway","BlueSnapDirect","PaypalCommerceVenmo","BigCommercePaymentsVenmo","PaypalPaymentsPro","Ratepay","connectFormik","withCheckout","getConfig","getInstruments","instruments","storeProfile","cdnBasePath","formik","isSelected","alt","src","node","Function","getSubtitle","supportedCards","instrumentSelected","provider","bigpayToken","instrumentId","getInstrumentForMethod","hostedForm","ccNumber","brand","getSelectedCardType","PaymentFormContext","usePaymentFormContext","context","useContext","PaymentFormProvider","paymentForm","Provider","createInjectHoc","FormContext","displayNamePrefix","AdyenCardFields","getInitialValidationState","shouldShowNumberField","validationState","CardNumber","valid","SecurityCode","ExpiryDate","isFieldInvalid","fieldKey","fieldsValidation","verificationFieldsContainerId","selectedInstrument","paymentMethod","cardValidationState","setFieldsValidation","useState","fieldType","endDigits","last4","showValidationIcon","style","transform","right","isBankAccountInstrument","rest","Component","state","canHandleEvent","handleOpen","this","setState","handleClose","handleKeyOpen","keyboardEvent","componentDidMount","componentWillUnmount","render","onKeyPress","withIconContainer","clipRule","fill","fillRule","xmlSpace","rx","stroke","x","y","maskUnits","maskType","mask","DropdownTrigger","shouldShow","handleClick","nativeEvent","getRootElement","addEventListener","removeEventListener","placement","dropdown","Manager","Reference","ref","Popper","modifiers","enabled","zIndex","document","getElementById","defaultProps","isAchInstrument","isSepaInstrument","AccountInstrumentUseNewButton","AccountInstrumentMenuItem","externalId","AchInstrumentMenuItem","accountNumber","issuer","SepaInstrumentMenuItem","BankInstrumentMenuItem","AccountInstrumentOption","AccountInstrumentMenu","selectedInstrumentId","onSelectInstrument","onUseNewInstrument","AccountInstrumentSelectButton","AccountInstrumentSelect","PureComponent","setTimeout","updateFieldValue","componentDidUpdate","prevProps","prevSelectedInstrumentId","otherFieldProps","form","setFieldValue","isCardInstrument","isAccountInstrument","ManageInstrumentsRow","onDeleteInstrument","handleDelete","isDeletingInstrument","LoadingOverlay","mapFromInstrumentCardType","cardInfo","isExpired","expirationDate","expiryMonth","expiryYear","isValid","niceType","status","ManageInstrumentsModal","isConfirmingDelete","handleAfterOpen","onAfterOpen","handleCancel","getDeleteInstrumentError","deleteInstrumentError","handleConfirmDelete","deleteInstrument","onDeleteInstrumentError","handleDeleteInstrument","closeButtonLabel","renderFooter","cardInstruments","bankInstruments","accountInstruments","achInstrument","bankAndAccountInstruments","ManageAccountInstrumentsTable","isLoadingInstruments","Primary","contextType","CheckoutContext","BasicFormField","InstrumentMenuItem","shouldHideExpiryDate","cardTitle","endingIn","expiryDate","InstrumentOption","InstrumentUseNewButton","InstrumentMenu","InstrumentSelectButton","InstrumentSelect","validateInstrument","display","onChange","renderField","CheckboxInput","checked","FormFieldError","errorId","kebabCase","translationId","showSave","showSetAsDefault","setAsDefaultEnabled","saveIsChecked","Boolean","getFieldValue","addingNewInstrument","hasAnyOtherInstruments","defaultInstrument","useProps","HostedWidgetPaymentComponent","isAddingNewCard","getDefaultInstrumentId","handleUseNewCard","handleSelectInstrument","isInstrumentFeatureAvailable","isInstrumentFeatureAvailableProp","loadInstruments","setValidationSchema","getValidationSchema","initializeMethod","prevState","isPaymentDataRequired","deinitializeCustomer","setSubmit","hideWidget","isInitializing","shouldHideInstrumentExpiryDate","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","hideContentWhenLoading","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","renderEditButtonIfAvailable","hideVerificationFields","isInstrumentCardNumberRequired","isInstrumentCardNumberRequiredProp","assertIsCardInstrument","hideContentWhenSignedOut","isSignInRequired","isSignedIn","additionalContainerClassName","shouldRenderCustomInstrument","renderCustomPaymentForm","tabIndex","storedCardValidationSchema","getSelectedInstrument","shouldShowEditButton","buttonId","translatedString","shouldShowDescriptor","paymentDescriptor","initializeCustomer","signInCustomer","Promise","resolve","PROVIDERS_WITHOUT_CARD_CODE","createSelector","cart","getCart","lineItems","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","digitalItems","trustedShippingAddress","isInstrumentCardCodeRequired","isVaultingCardNumberValidationAvailable","physicalItems","showAdditionalActionContent","cancelAdditionalActionModalFlow","additionalActionContainerId","hidePaymentSubmitButton","disableSubmit","customer","getCustomer","isGuest","isVaultingEnabled","signOut","signOutCustomer","AdyenV2PaymentMethodType","toResolvableComponent","useRef","shouldShowModal","setShowAdditionalActionContent","setCardValidationState","cardVerificationContainerId","threeDS2ContainerId","bcmc","onBeforeLoad","shopperInteraction","current","onComplete","cancelAdditionalAction","onLoad","cancel","initializeAdyenPayment","options","adyenOptions","scheme","hasHolderName","holderNameRequired","ideal","showImage","adyenv2","hasVaultedInstruments","additionalActionOptions","widgetSize","validateCardFields","isLoadingPaymentMethod","formContextProps","isSubmitted","LocaleProvider","UntrustedShippingCardVerificationType","shouldRenderAdditionalActionContentModal","isModalVisible","overlay","AdyenV3PaymentMethodType","setShouldRenderAdditionalActionContentModal","isAdditionalActionContentModalVisible","setIsAdditionalActionContentModalVisible","onActionHandled","adyenv3","isUsingMultiShipping","isCardVaultingEnabled","getHostedPaymentMethodDerivedProps","filterAccountInstruments","filterTrustedInstruments","isPaymentDataSubmitted","currentMethodInstruments","trustedInstruments","isNewAddress","HostedPaymentMethodComponent","isAddingNewInstrument","handleUseNewInstrument","description","getDefaultInstrument","HostedPaymentComponent","paymentToken","initializeAmazonPayV2Payment","amazonpay","editButtonId","reload","window","location","getCheckout","checkout","some","payments","providerId","onSignOut","applepay","shippingLabel","subtotalLabel","providerOptionsKey","providerOptionsData","currentInstrument","shouldConfirmInstrument","buttonActionsRef","fieldsValuesRef","renderButtonRef","hasPayPalButton","termsValue","shouldSaveInstrument","validateForm","validationErrors","keys","validateButton","disable","enable","togglePaypalButton","container","shouldRenderPayPalButtonOnInitialization","onRenderButton","onInit","onError","onValidate","reject","keysValidation","forEach","setFieldTouched","onInitButton","actions","getFieldsValues","setCurrentInstrument","trustedAccountInstruments","hasAccountInstruments","isComplete","shouldCreateNewInstrument","allInstruments","widgetContainerId","extraOptions","apmFieldsContainer","apmFieldsStyles","variables","fontFamily","colorBackground","textColor","fontSizeBase","spacingUnit","borderColor","borderRadius","borderWidth","rules","backgroundColor","color","fontSize","formatCreditCardNumber","unformattedValue","gaps","gapIndex","reduce","output","index","CreditCardNumberInput","inputRef","createRef","nextSelectionEnd","handleChange","target","previousValue","selectionEnd","maxLength","max","info","lengths","formattedValue","setSelectionRange","autoComplete","meta","strokeWidth","fontWeight","letterSpacing","opacity","Large","TooltipTrigger","tooltip","IconHelp","shouldShowCardCodeField","trimmedMonth","trimmedYear","formatCreditCardExpiryDate","placeholder","shouldShowCustomerCodeField","memoize","instrumentBrand","instrumentLast4","isCardCodeRequired","isCardNumberRequired","schema","ccCvv","cvv","ccCustomerCode","ccExpiry","ccName","parent","createLocaleContext","inputDateFormat","currency","createCurrencyService","date","inputFormat","getLanguageService","CreditCardPaymentMethodComponent","filterInstruments","getCreditCardPaymentMethodDerivedProps","discoverInfo","creditCardType","getTypeInfo","visaInfo","updateCard","patterns","addCard","configureCardValidator","_prevProps","cardFieldset","getStoredCardValidationFieldset","isInstrumentCardCodeRequiredProp","storeConfig","LocaleContext","requireCustomerCode","cardValidationSchema","getInstrumentValidationSchema","getCreditCardValidationSchema","isCustomerCodeRequired","appearFocused","cardCodeId","cardNumberId","cardExpiryId","focusedFieldType","additionalFields","cardNameId","shape","cardExpiry","cardName","cardNumber","isCardExpiryRequired","cardCodeVerification","cardNumberVerification","cardExpiryVerification","CreditCardInputStylesType","getCreditCardInputStyles","properties","Default","createElement","parentContainer","appendChild","FormFieldContainer","hasError","Focus","element","getAppliedStyles","parentElement","removeChild","showCardHolderName","isHostedFormEnabled","setFocusedFieldType","isCardHolderNameRequired","getHostedFieldId","getHostedFormOptions","styleProps","shouldRenderHostedFields","styleContainerId","fields","accessibilityLabel","styles","default","focus","onBlur","onCardTypeChange","onEnter","onFocus","forIn","fieldErrors","errorKey","getHostedStoredCardValidationFieldset","initializeBigCommercePaymentsCreditCardPayment","bigcommerce_payments_creditcards","getHostedCreditCardValidationSchema","getHostedInstrumentValidationSchema","renderPayPalCardComponent","PoweredByPayPalFastlaneLabel","result","Tiny","showPayPalCardSelector","setSelectedInstrument","getPaymentProviderCustomer","paymentProviderCustomer","paypalFastlaneCustomer","useBigCommercePaymentsFastlaneInstruments","shouldShowInstrumentsForm","paypalCardComponentRef","isInitializingPayment","bigcommerce_payments_fastlane","finalError","isErrorWithTranslationKey","translationKey","COUNTRY_DATA","dialCode","getCountryData","countryName","country","formFieldData","requiredFieldErrorTranslationIds","ratepayPhoneCountryCode","ratepayPhoneNumber","ratepayBirthDate","nullable","fieldName","matches","ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE","custom","DynamicFormFieldType","DATE","TEXT","fieldsValues","bigcommerce_payments_ratepay","legalTextContainer","loadingContainerId","ratepaySpecificError","e","provider_error","translationCode","ratepayError","ratepaySpecificErrorCode","CustomError","shouldBeTranslatedAsHtml","fieldId","getBigCommercePaymentsRatePayValidationSchema","billing","getBillingAddress","getCountryInfo","marginBottom","DynamicFormField","extraClass","BluesnapECPAccountType","useFloatingLabel","DynamicInput","TELEPHONE","isFloatingLabelEnabled","helperLabel","items","rows","renderSelect","DROPDOWM","shouldRenderCompanyName","ConsumerChecking","ConsumerSavings","CorporateChecking","CorporateSavings","shouldRenderFields","min","routingNumber","companyName","accountType","getFormValues","setDisabled","shopperPermission","initializeEcp","deinitializeEcp","shouldShowForm","company","getEcpValidationSchema","paddingBottom","isBlueSnapDirectInitializationData","object","sepaCreditorCompanyName","array","idealIssuers","Array","isArray","iban","firstName","lastName","toggleSubmitButton","initializeSepa","deinitializeSepa","getSepaValidationSchema","creditorName","bic","idealIssuersSelectOptions","issuerId","issuerName","initializeIdeal","getIdealValidationSchema","deinitializeIdeal","isLoadingIframe","setisLoadingIframe","paymentPageContent","setPaymentPageContent","paymentPageContentRef","cancelBlueSnapV2ModalFlow","cancelBlueSnapV2Payment","initializeBlueSnapV2Payment","bluesnapv2","border","appendPaymentPageContent","additionalModalClassName","initializePayByBank","getPayByBankValidationSchema","deinitializePayByBank","initializeBoltPayment","bolt","useBigCommerceCheckout","agreementTranslationOptions","privacyPolicyUrl","termsUrl","benefitsList","BoltCreateAccountCheckbox","showCreateAccountCheckbox","setShowCreateAccountCheckbox","boltEmbeddedContainerId","onPaymentSelect","hasBoltAccount","isGuestCustomer","embeddedOneClickEnabled","BraintreeAchFieldType","OwnershipTypes","AccountTypes","accountTypeOptions","Savings","Checking","ownershipTypeOptions","Personal","Business","defaultBraintreeAchFormFields","AccountType","AccountNumber","RoutingNumber","OwnershipType","personalBraintreeAchFormFields","FirstName","LastName","businessBraintreeAchFormFields","BusinessName","formFields","validateBraintreeAchForm","braintreeAchFormValues","businessName","ownershipType","isValidAccountNumber","isValidRoutingNumber","isValidFirstName","isValidLastName","isValidBusinessName","all","isValidDepositoryName","resetFormValidation","getTranslatedLabelByFieldName","braintreeAchFormLabelsMap","isBraintreeAchFormFieldName","fieldValues","updateMandateText","fullName","String","depositoryName","outstandingBalance","storeName","symbol","mandateTextTranslationKey","formattedDate","Date","now","toJSON","reverse","mandateTextTranslationProps","currentDate","mandateText","isValidForm","setIsValidForm","defaultFormValues","shouldSetAsDefaultInstrument","orderConsent","entries","resetFormValues","shouldShowMandateTextCheckbox","validate","mandateTextConfirmationCheckboxValue","currentMandateTextRef","braintreeach","getMandateText","currentMandateText","useBraintreeFastlaneInstruments","paypalFastlaneComponentRef","braintreefastlane","braintreelocalmethods","buttonText","brandName","initializeBraintreePaypalPaymentMethod","defaultOptions","providerName","formatAccountMask","accountMask","padding","card_information","cardData","isWalletButtonInitializationData","expMonth","expYear","accountNum","expDate","substr","WalletButtonPaymentMethodComponent","handleSignOut","onSignOutError","toggleSubmit","getWalletButtonPaymentMethodDerivedProps","prevMethod","prevIsPaymentDataRequired","isPaymentSelected","renderPaymentView","renderSignInView","signInButtonClassName","signInButtonLabel","editButtonClassName","editButtonLabel","billingAddress","walletPaymentData","initializeVisaCheckoutPayment","mergedOptions","braintreevisacheckout","reinitializePayment","BraintreeVisaCheckout","TextField","labelId","HiddenInput","restField","selectedIssuer","Input","OptionButton","restProps","DropdownButton","ccDocumentField","fawry","sepa","debtor","paymentContext","creditor","sepaCreditor","sepaCreditorAddress","sepaCreditorPostalCode","sepaCreditorCity","sepaCreditorCountry","creditorId","sepaCreditorIdentifier","address1","postalCode","city","stateOrProvinceCode","countryCode","isChecked","setSelectedIssuer","bicValue","setBicValue","issuers","currentTarget","_selectedIssuer","dataset","issuersList","checkoutcomPaymentMethodsArray","checkoutComShemas","oxxo","ccDocument","qpay","notRequired","boleto","sepaMandate","customerMobile","customerEmail","email","isIdealHostedPageExperimentOn","features","checkoutCustomMethod","CheckoutcomCustomFieldset","initializeGooglePayPayment","AdyenV2GooglePay","walletButton","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BigCommercePaymentsGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","StripeGooglePay","StripeUPEGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","CheckoutcomGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay","hostedFieldset","hostedValidationSchema","initializeHostedCreditCardPayment","creditCard","hostedStoredCardValidationSchema","initializeKlarnaPayment","klarna","initializeKlarnaV2Payment","klarnav2","_","helpers","setValue","IssuerSelectButton","image","size1x","paymentMethodsResponse","cardNumberElementOptions","cardHolderElementOptions","cardCvcElementOptions","cardExpiryElementOptions","MolliePaymentMethodType","localeContext","initializeMolliePayment","mollieElements","getMolliesElementOptions","mollie","cardCvcId","cardHolderId","base","invalid","unsupportedMethodMessage","disableButton","creditcard","_shouldShowNumber","useHostedCreditCard","requireCardCode","initializeMonerisPayment","paymentConfig","moneris","initializePayPalCommerceCreditCardPayment","paypalcommercecreditcards","usePayPalCommerceFastlaneInstruments","paypalcommercefastlane","paypalcommerceratepay","getDate","getMonth","getFullYear","getPaypalCommerceRatePayValidationSchema","countryInfo","isEmbedded","initializePaypalExpressPayment","paypalexpress","useRedirectFlow","setIsAddingNewCard","setSelectedInstrumentId","defaultInstrumentId","getStylesFromElement","querySelector","copyStylesFromDummyFormFields","difference","mapToSquareStyles","borderColorIsFocus","borderWidthIsFocus","inputIsFocus","borderColorIsError","borderWidthIsError","colorIsError","squarev2","selector","pseudoElementSelector","parseRadioIconSize","parseInt","getFonts","elementsList","querySelectorAll","fonts","fontSrc","getAttribute","push","cssSrc","getAppearanceForOCSElement","defaultAccordionPaddingHorizontal","defaultAccordionPaddingVertical","formInputStyles","formLabelStyles","formErrorStyles","accordionHeaderStyles","accordionSelectedHeaderStyles","formChecklistStyles","accordionHeaderColor","accordionItemTitleFontSize","accordionHeaderFontFamily","accordionItemTitleFontWeight","accordionPaddingTop","accordionPaddingRight","accordionPaddingBottom","accordionHeaderPadding","isEmpty","radioOuter","radioOuterChecked","radioIconSize","sizes","radioIconOuterWidth","radioIconOuterStrokeWidth","radioIconInnerWidth","outerWidth","outerStrokeWidth","innerWidth","toFixed","stripeSVGSizeCoefficient","innerRadius","getRadioIconSizes","radioIconColor","radioIconFocusColor","colorPrimary","colorText","colorDanger","colorTextSecondary","colorTextPlaceholder","colorIcon","boxShadow","borderBottom","r","collapseStripeElement","onToggle","selectedItemId","AccordionContext","isOCSLoading","setIsOCSLoading","methodSelector","renderSubmitButton","initializeStripePayment","stripeocs","layout","defaultCollapsed","radios","linkInAccordion","spacedAccordionItems","visibleAccordionItemsCount","appearance","paymentMethodSelect","handleClosePaymentMethod","collapseElement","togglePreloader","ChecklistSkeleton","defaultChecked","isStripeLinkAuthenticated","stripeLinkAuthenticationState","formInput","formLabel","formError","stripeupe","labelText","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","StripeElementType","useIndividualCardFields","paymentMethodType","additionalStripeV3Classes","Alipay","stripeOptions","classes","Card","CardCvc","CardExpiry","showIcon","Iban","supportedCountries","IdealBank","storeUrl","links","siteLink","onUnhandledStripeV3Error","getIndividualCardElementOptions","stripeInitializeOptions","getStripeOptions","stripev3","optionsCustomForm","threeDSecureVerification","setThreeDSecureVerification","cancelWorldpayModalFlow","cancelThreeDSecureVerification","initializeWorldpayPayment","worldpay","resolvePaymentMethod","query","resolveComponent","shouldSavingCardsBeEnabled","paymentMethodConfig","isVaultingNotEnabled","untrustedShippingCardVerificationMode","CVV","handleShow","handleHide","onMouseEnter","onMouseLeave","withHostedCreditCardFieldset","OriginalComponent","nextSelectionEndRef","CreditCardPaymentMethod","isPreloaderOn","then","threeDSecureContent","setThreeDSecureContent","threeDSecureContentRef","initializeBraintreePayment","threeDSecure","addFrame","removeFrame","appendThreeDSecureContent","cancelThreeDSecureModalFlow","HostedPaymentMethod","WalletButtonPaymentMethod","storeLanguage","initializeMasterpassPayment","masterpass","testMode","checkoutId","isMasterpassSrcEnabled","locale","PaymentMethodProviderType","selectedHostedMethod","providerType","Hosted","isHostedPayment","Wrapper","onMount","initializationComponentMap","card_ui","none","onDeinit","catch","usePropsToOnMount","PPSDKPaymentMethod","componentKey","initializationStrategy","PPSDK","Braintree","Api","formikContext","formContext","ResolvedPaymentMethod","PaymentMethod","createPaymentFormService","getPaymentMethodFromListValue","methods","PaymentMethodListItem","isDisabled","renderPaymentMethod","PaymentMethodV2","renderPaymentMethodTitle","isCustomChecklistItem","ChecklistItem","onSelect","handleSelect","role","Checklist","defaultSelectedItemId","navigator","userAgent","mapToRedeemableProps","redeemableProps","Redeemable","providersWithCustomClasses","PaymentSubmitButtonText","methodType","methodGateway","initialisationStrategyType","IconBolt","BlueSnapV2","PaypalVenmo","continueActionId","continueTranslationId","completeTranslationId","isInitializingCustomer","isSubmitting","isFullWidth","Action","SpamProtectionField","shouldShowRetryButton","handleRetry","verify","didExceedSpamLimit","isExecutingSpamCheck","executeSpamCheck","isErrorWithType","withCurrency","availableStoreCredit","usableStoreCredit","isStoreCreditApplied","Tooltip","storeCredit","toCustomerCurrency","PaymentMethodSubmitButtonContainer","PaymentMethodListFieldset","onMethodSelect","resetForm","handlePaymentMethodSelect","updatedValues","shouldCreateAccount","Extension","region","paymentFormConfig","defaultGatewayId","defaultMethodId","onSubmit","omitBy","isNil","onStoreCreditChange","selectedMethod","shouldDisableSubmit","shouldHidePaymentSubmitButton","shouldExecuteSpamCheck","selectedMethodId","Form","Payment","isReady","validationSchemas","submitFunctions","getContextValue","uniqueId","handleBeforeUnload","defaultMethod","skipRedirectConfirmationAlert","returnValue","handleCloseModal","cartUrl","loadCheckout","errorType","headers","top","assign","handleStoreCreditChange","useStoreCredit","applyStoreCredit","handleError","errorLogger","log","loadPaymentMethods","onCartChangedError","onSubmitError","submitOrder","analyticsTracker","clickPayButton","customSubmit","payload","payment","paymentData","mapToOrderRequestBody","order","getOrder","paymentComplete","orderId","paymentRejected","isCartChangedError","setSelectedMethod","trackSelectedPaymentMethod","fn","finalizeOrderIfNeeded","onFinalize","onFinalizeError","onReady","checkoutServiceSubscribe","loadPaymentMethodsOrThrow","grandTotalChangeUnsubscribe","handleCartTotalChange","grandTotal","checkEmbeddedSupport","finalizeOrderError","uniqueSelectedMethodId","renderOrderErrorModal","renderEmbeddedSupportErrorModal","shouldLocaliseErrorMessages","submitOrderError","ErrorModal","bind","onClose","title","selectedPaymentMethod","mapToPaymentProps","getConsignments","getPaymentMethod","getPaymentMethods","getFinalizeOrderError","getSubmitOrderError","consignments","stripeUpePaymentMethod","enableTermsAndConditions","isTermsConditionsEnabled","orderTermsAndConditionsType","termsConditionsType","orderTermsAndConditions","termsCondtitionsText","orderTermsAndConditionsLink","termsCondtitionsUrl","selectedPayment","filteredMethods","showInCheckout","multiShippingIncompatibleMethodIds","hasDefaultStoredInstrument","cartLink","subscribe","Math","withAnalytics","getCoupons","getGiftCertificates","isApplyingCoupon","isApplyingGiftCertificate","getApplyCouponError","getApplyGiftCertificateError","getRemoveCouponError","getRemoveGiftCertificateError","removeCoupon","removeGiftCertificate","removedRedeemableError","isCouponCodeCollapsed","setIsOpen","canHandleEventRef"],"sourceRoot":""}