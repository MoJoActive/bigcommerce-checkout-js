{"version":3,"file":"braintree-ach-payment-method-e1ede52f.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNameField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardFieldset/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedCreditCardValidationSchema/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/constants.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchValidation.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchFormFields.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchMandateText.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchPaymentForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/BraintreeAchPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/hooks/useBraintreeFastlaneInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneCreditCardForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/index.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/BraintreeFastlanePaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeLocalPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreePaypalPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/VisaCheckout/VisaCheckoutPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeVenmo/BraintreeVenmoPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/PaymentView.tsx","webpack://checkout/./packages/wallet-button-integration/src/SignInView.tsx","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx"],"sourcesContent":["import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNameField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div\n            className={classNames('form-ccFields', {\n                'form-ccFields--without-card-name': !cardNameId,\n                'form-ccFields--without-card-code': !cardCodeId,\n            })}\n        >\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {Boolean(cardNameId) && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {Boolean(cardCodeId) && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object()\n            .required()\n            .shape<HostedCreditCardValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedCreditCardValidationSchemaShape['hostedForm']['errors']>({\n                        cardCode: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardExpiry: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_expiry',\n                            }),\n\n                        cardName: string().test({\n                            message: language.translate('payment.credit_card_name_required_error'),\n                            test: (value) => value !== 'required',\n                        }),\n\n                        cardNumber: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            }),\n                    }),\n            }),\n    });\n});\n","import { type FormField } from '@bigcommerce/checkout-sdk';\n\nimport { DynamicFormFieldType } from '@bigcommerce/checkout/ui';\n\nexport enum BraintreeAchFieldType {\n    BusinessName = 'businessName',\n    AccountType = 'accountType',\n    AccountNumber = 'accountNumber',\n    RoutingNumber = 'routingNumber',\n    OwnershipType = 'ownershipType',\n    FirstName = 'firstName',\n    LastName = 'lastName',\n}\n\nexport enum OwnershipTypes {\n    Personal = 'Personal',\n    Business = 'Business',\n}\n\nexport enum AccountTypes {\n    Savings = 'Savings',\n    Checking = 'Checking',\n}\n\nconst accountTypeOptions = [\n    {\n        value: AccountTypes.Savings,\n        label: AccountTypes.Savings,\n    },\n    {\n        value: AccountTypes.Checking,\n        label: AccountTypes.Checking,\n    },\n];\n\nexport const ownershipTypeOptions = [\n    {\n        value: OwnershipTypes.Personal,\n        label: OwnershipTypes.Personal,\n    },\n    {\n        value: OwnershipTypes.Business,\n        label: OwnershipTypes.Business,\n    },\n];\n\nexport const defaultBraintreeAchFormFields: FormField[] = [\n    {\n        name: BraintreeAchFieldType.AccountType,\n        custom: false,\n        id: BraintreeAchFieldType.AccountType,\n        label: 'Account Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: accountTypeOptions,\n        },\n    },\n    {\n        name: BraintreeAchFieldType.AccountNumber,\n        custom: false,\n        id: BraintreeAchFieldType.AccountNumber,\n        label: 'Account Number',\n        required: true,\n        max: 9,\n        min: 8,\n    },\n    {\n        name: BraintreeAchFieldType.RoutingNumber,\n        custom: false,\n        id: BraintreeAchFieldType.RoutingNumber,\n        label: 'Routing Number',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.OwnershipType,\n        custom: false,\n        id: BraintreeAchFieldType.OwnershipType,\n        label: 'Ownership Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: ownershipTypeOptions,\n        },\n    },\n];\n\nexport const personalBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.FirstName,\n        custom: false,\n        id: BraintreeAchFieldType.FirstName,\n        label: 'First Name',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.LastName,\n        custom: false,\n        id: BraintreeAchFieldType.LastName,\n        label: 'Last Name',\n        required: true,\n    },\n];\n\nexport const businessBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.BusinessName,\n        custom: false,\n        id: BraintreeAchFieldType.BusinessName,\n        label: 'Business Name',\n        required: true,\n    },\n];\n","import { type AchInstrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBraintreeAchInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => instruments.filter(isAchInstrument), [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset &&\n        !!currentInstrument &&\n        !currentInstrument.trustedShippingAddress;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBraintreeAchInstruments;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { useCallback } from 'react';\nimport { object, string, type StringSchema } from 'yup';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport {\n    type PaymentFormValues,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst useBraintreeAchValidation = (method: PaymentMethod) => {\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const getValidationSchema = () => {\n        const ownershipType = paymentForm.getFieldValue('ownershipType');\n        const formFields =\n            ownershipType === OwnershipTypes.Business\n                ? businessBraintreeAchFormFields\n                : personalBraintreeAchFormFields;\n\n        const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n            [BraintreeAchFieldType.FirstName]: 'address.first_name',\n            [BraintreeAchFieldType.LastName]: 'address.last_name',\n            [BraintreeAchFieldType.AccountNumber]: 'payment.errors.account_number',\n            [BraintreeAchFieldType.RoutingNumber]: 'payment.errors.routing_number',\n            [BraintreeAchFieldType.BusinessName]: 'payment.errors.business_name',\n        };\n\n        return object(\n            formFields.reduce(\n                (schema, { id, required }) => {\n                    if (required) {\n                        if (requiredFieldErrorTranslationIds[id]) {\n                            schema[id] = string().required(\n                                language.translate(\n                                    `${requiredFieldErrorTranslationIds[id]}_required_error`,\n                                ),\n                            );\n\n                            if (id === BraintreeAchFieldType.AccountNumber) {\n                                schema[id] = schema[id].matches(\n                                    /^\\d+$/,\n                                    language.translate('payment.errors.only_numbers_error', {\n                                        label: language.translate('payment.account_number_label'),\n                                    }),\n                                );\n                            }\n\n                            if (id === BraintreeAchFieldType.RoutingNumber) {\n                                schema[id] = schema[id]\n                                    .matches(\n                                        /^\\d+$/,\n                                        language.translate('payment.errors.only_numbers_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                        }),\n                                    )\n                                    .min(\n                                        8,\n                                        language.translate('customer.min_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            min: 8,\n                                        }),\n                                    )\n                                    .max(\n                                        9,\n                                        language.translate('customer.max_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            max: 9,\n                                        }),\n                                    );\n                            }\n                        }\n                    }\n\n                    return schema;\n                },\n                // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n                {} as { [key: string]: StringSchema },\n            ),\n        );\n    };\n\n    const validateBraintreeAchForm = useCallback(\n        async (braintreeAchFormValues: PaymentFormValues): Promise<boolean> => {\n            const {\n                accountNumber,\n                businessName,\n                routingNumber,\n                ownershipType,\n                firstName,\n                lastName,\n            } = braintreeAchFormValues;\n\n            const validationSchema = getValidationSchema();\n\n            paymentForm.setValidationSchema(method, validationSchema);\n\n            const [\n                isValidAccountNumber,\n                isValidRoutingNumber,\n                isValidFirstName,\n                isValidLastName,\n                isValidBusinessName,\n            ] = await Promise.all([\n                await validationSchema.fields.accountNumber?.isValid(accountNumber),\n                await validationSchema.fields.routingNumber?.isValid(routingNumber),\n                await validationSchema.fields.firstName?.isValid(firstName),\n                await validationSchema.fields.lastName?.isValid(lastName),\n                await validationSchema.fields.businessName?.isValid(businessName),\n            ]);\n\n            const isValidDepositoryName =\n                ownershipType === OwnershipTypes.Business\n                    ? isValidBusinessName\n                    : isValidFirstName && isValidLastName;\n\n            return isValidRoutingNumber && isValidAccountNumber && isValidDepositoryName;\n        },\n        [getValidationSchema],\n    );\n\n    const resetFormValidation = useCallback(() => {\n        paymentForm.setValidationSchema(method, null);\n    }, [paymentForm, method]);\n\n    return {\n        validateBraintreeAchForm,\n        resetFormValidation,\n    };\n};\n\nexport default useBraintreeAchValidation;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField } from '@bigcommerce/checkout/ui';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst isBraintreeAchFormFieldName = (fieldName: string): fieldName is BraintreeAchFieldType => {\n    return Object.values(BraintreeAchFieldType).includes(fieldName as BraintreeAchFieldType);\n};\n\nconst getTranslatedLabelByFieldName = (fieldName: string, language: LanguageService) => {\n    const braintreeAchFormLabelsMap = {\n        firstName: language.translate('address.first_name_label'),\n        lastName: language.translate('address.last_name_label'),\n        accountNumber: language.translate('payment.account_number_label'),\n        routingNumber: language.translate('payment.account_routing_label'),\n        businessName: language.translate('payment.business_name_label'),\n        ownershipType: language.translate('payment.ownership_type_label'),\n        accountType: language.translate('payment.account_type_label'),\n    };\n\n    return isBraintreeAchFormFieldName(fieldName)\n        ? braintreeAchFormLabelsMap[fieldName]\n        : fieldName;\n};\n\nconst BraintreeAchFormFields: FunctionComponent = () => {\n    const { language } = useLocale();\n    const { paymentForm } = usePaymentFormContext();\n    const { getFieldValue, setFieldValue } = paymentForm;\n\n    const ownershipTypeValue = getFieldValue(BraintreeAchFieldType.OwnershipType);\n    const fieldValues =\n        ownershipTypeValue === OwnershipTypes.Business\n            ? businessBraintreeAchFormFields\n            : personalBraintreeAchFormFields;\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n        },\n        [setFieldValue],\n    );\n\n    return (\n        <>\n            {fieldValues.map((field) => (\n                <DynamicFormField\n                    extraClass={`dynamic-form-field--${field.id}`}\n                    field={field}\n                    key={field.id}\n                    label={getTranslatedLabelByFieldName(field.name, language)}\n                    onChange={handleChange(field.id)}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default BraintreeAchFormFields;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nimport { OwnershipTypes } from '../constants';\n\nexport interface BraintreeAchMandateTextProps {\n    isInstrumentFeatureAvailable?: boolean;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchMandateText: FunctionComponent<BraintreeAchMandateTextProps> = ({\n    isInstrumentFeatureAvailable,\n    updateMandateText,\n}) => {\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const {\n        businessName,\n        accountType,\n        accountNumber,\n        routingNumber,\n        ownershipType,\n        firstName,\n        lastName,\n    } = paymentForm.getFormValues();\n\n    const fullName = `${String(firstName)} ${String(lastName)}`;\n\n    const depositoryName = ownershipType === OwnershipTypes.Business ? businessName : fullName;\n    const outstandingBalance = checkoutState.data.getCheckout()?.outstandingBalance;\n    const storeName = checkoutState.data.getConfig()?.storeProfile.storeName;\n    const symbol = checkoutState.data.getCart()?.currency.symbol;\n\n    const mandateTextTranslationKey = isInstrumentFeatureAvailable\n        ? 'payment.braintreeach_vaulting_mandate_text'\n        : 'payment.braintreeach_mandate_text';\n\n    const currentDate = new Date(Date.now()).toJSON().slice(0, 10); // yyyy-mm-dd\n    const formattedDate = currentDate.split('-').reverse().join('.'); // dd.mm.yyyy\n\n    const mandateTextTranslationProps = {\n        accountType: String(accountType).toLowerCase(),\n        accountNumber: String(accountNumber),\n        currentDate: formattedDate,\n        depositoryName: String(depositoryName),\n        routingNumber: String(routingNumber),\n        outstandingBalance: `${symbol || ''}${outstandingBalance || ''}`,\n        storeName: String(storeName),\n    };\n\n    const mandateText = language.translate(mandateTextTranslationKey, mandateTextTranslationProps);\n\n    useEffect(() => {\n        updateMandateText(mandateText);\n    }, [mandateText, updateMandateText]);\n\n    const handleChange = (value: boolean) => {\n        paymentForm.setFieldValue('orderConsent', value);\n    };\n\n    return (\n        <div className=\"mandate-text\" data-test=\"mandate-text\">\n            <CheckboxFormField\n                labelContent={mandateText}\n                name=\"orderConsent\"\n                onChange={handleChange}\n            />\n        </div>\n    );\n};\n\nexport default BraintreeAchMandateText;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { AccountTypes, OwnershipTypes } from '../constants';\nimport useBraintreeAchInstruments from '../hooks/useBraintreeAchInstruments';\nimport useBraintreeAchValidation from '../hooks/useBraintreeAchValidation';\n\nimport BraintreeAchFormFields from './BraintreeAchFormFields';\nimport BraintreeAchMandateText from './BraintreeAchMandateText';\n\nexport interface BraintreeAchPaymentFormProps {\n    method: PaymentMethod;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchPaymentForm: FunctionComponent<BraintreeAchPaymentFormProps> = ({\n    method,\n    updateMandateText,\n}) => {\n    const [isValidForm, setIsValidForm] = useState(false);\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { disableSubmit, getFieldValue, getFormValues, setFieldValue } = paymentForm;\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    } = useBraintreeAchInstruments(method);\n    const { validateBraintreeAchForm, resetFormValidation } = useBraintreeAchValidation(method);\n\n    const resetFormValues = () => {\n        const { firstName, lastName } = checkoutState.data.getBillingAddress() || {};\n\n        const defaultFormValues = {\n            ownershipType: OwnershipTypes.Personal,\n            accountType: AccountTypes.Savings,\n            accountNumber: '',\n            routingNumber: '',\n            businessName: '',\n            firstName: firstName || '',\n            lastName: lastName || '',\n            shouldSaveInstrument: false,\n            shouldSetAsDefaultInstrument: false,\n            instrumentId: currentInstrument?.bigpayToken || '',\n            orderConsent: false,\n        };\n\n        for (const [key, value] of Object.entries(defaultFormValues)) {\n            setFieldValue(key, value);\n        }\n    };\n\n    useEffect(() => {\n        resetFormValues();\n    }, [currentInstrument?.bigpayToken]);\n\n    const shouldShowForm =\n        !shouldShowInstrumentFieldset || shouldCreateNewInstrument || shouldConfirmInstrument;\n    const shouldShowMandateTextCheckbox = shouldShowForm && isValidForm && !shouldConfirmInstrument;\n\n    useEffect(() => {\n        if (shouldShowForm) {\n            const validate = async () => {\n                const braintreeAchFormValues = getFormValues();\n                const isValid = await validateBraintreeAchForm(braintreeAchFormValues);\n\n                if (!isValid && getFieldValue('orderConsent')) {\n                    setFieldValue('orderConsent', false);\n                }\n\n                setIsValidForm(isValid);\n            };\n\n            void validate();\n        } else {\n            resetFormValidation();\n        }\n    }, [\n        getFormValues,\n        setFieldValue,\n        setIsValidForm,\n        shouldShowForm,\n        validateBraintreeAchForm,\n        resetFormValidation,\n    ]);\n\n    useEffect(() => {\n        const mandateTextConfirmationCheckboxValue = getFieldValue('orderConsent');\n\n        const inValidForInstrumentConfirmation = shouldConfirmInstrument && !isValidForm;\n        const inValidForDefaultTransactions =\n            shouldShowMandateTextCheckbox && !mandateTextConfirmationCheckboxValue;\n\n        const shouldDisableSubmit = shouldShowForm\n            ? inValidForInstrumentConfirmation || inValidForDefaultTransactions\n            : false;\n\n        disableSubmit(method, shouldDisableSubmit);\n    }, [disableSubmit, getFieldValue, isValidForm, method, shouldShowMandateTextCheckbox]);\n\n    return (\n        <div className=\"checkout-ach-form\" data-test=\"checkout-ach-form\">\n            {shouldShowInstrumentFieldset && (\n                <div className=\"checkout-ach-form__instrument\">\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                </div>\n            )}\n\n            {shouldConfirmInstrument && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            {shouldShowForm && <BraintreeAchFormFields />}\n\n            {isInstrumentFeatureAvailable && (\n                <StoreInstrumentFieldset\n                    instrumentId={currentInstrument?.bigpayToken}\n                    instruments={accountInstruments}\n                    isAccountInstrument\n                />\n            )}\n\n            {shouldShowMandateTextCheckbox && (\n                <BraintreeAchMandateText\n                    isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                    updateMandateText={updateMandateText}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeAchPaymentForm;\n","import React, { type FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeAchPaymentForm from './components/BraintreeAchPaymentForm';\n\nconst BraintreeAchPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const currentMandateTextRef = useRef('');\n    const updateMandateText = (currentMandateText: string) => {\n        currentMandateTextRef.current = currentMandateText;\n    };\n\n    useEffect(() => {\n        const initializePaymentOrThrow = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    braintreeach: {\n                        getMandateText: () => currentMandateTextRef.current,\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePaymentOrThrow();\n\n        return () => {\n            const deinitializePaymentOrThrow = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePaymentOrThrow();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = checkoutState.data.getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeAchPaymentForm\n                                method={method}\n                                updateMandateText={updateMandateText}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeAchPaymentMethod,\n    [{ id: 'braintreeach' }],\n);\n","import { type CardInstrument, type LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, {\n    createRef,\n    type FunctionComponent,\n    type ReactNode,\n    type RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    type CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\ninterface BraintreeCreditCardPaymentMethodRef {\n    threeDSecureContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst BraintreeCreditCardsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutService, checkoutState, paymentForm, language, method, onUnhandledError } =\n        props;\n    const { isHostedFormEnabled } = method.config;\n\n    const [threeDSecureContent, setThreeDSecureContent] = useState<HTMLElement>();\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const ref = useRef<BraintreeCreditCardPaymentMethodRef>({\n        threeDSecureContentRef: createRef(),\n    });\n\n    const { cardCode, showCardHolderName, requireCustomerCode } = method.config;\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeBraintreePayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    braintree: {\n                        threeDSecure: {\n                            addFrame(error, content, cancel) {\n                                if (error) {\n                                    return onUnhandledError(error);\n                                }\n\n                                setThreeDSecureContent(content);\n                                ref.current.cancelThreeDSecureVerification = cancel;\n                            },\n                            removeFrame() {\n                                setThreeDSecureContent(undefined);\n                                ref.current.cancelThreeDSecureVerification = undefined;\n                            },\n                        },\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment, onUnhandledError],\n        );\n\n    const appendThreeDSecureContent = useCallback(() => {\n        if (ref.current.threeDSecureContentRef.current && threeDSecureContent) {\n            ref.current.threeDSecureContentRef.current.appendChild(threeDSecureContent);\n        }\n    }, [threeDSecureContent]);\n\n    const cancelThreeDSecureModalFlow = useCallback(() => {\n        setThreeDSecureContent(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n\n    if (!method.config.isHostedFormEnabled) {\n        return (\n            <CreditCardPaymentMethodComponent\n                {...props}\n                deinitializePayment={checkoutService.deinitializePayment}\n                initializePayment={initializeBraintreePayment}\n            />\n        );\n    }\n\n    return (\n        <>\n            <CreditCardPaymentMethodComponent\n                {...props}\n                cardFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n                deinitializePayment={checkoutService.deinitializePayment}\n                getHostedFormOptions={getHostedFormOptions}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeBraintreePayment}\n                storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                    language,\n                    isCardExpiryRequired: true,\n                })}\n            />\n\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                isOpen={!!threeDSecureContent}\n                onAfterOpen={appendThreeDSecureContent}\n                onRequestClose={cancelThreeDSecureModalFlow}\n            >\n                <div ref={ref.current.threeDSecureContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeCreditCardsPaymentMethod,\n    [{ id: 'braintree' }],\n);\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBraintreeFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneCreditCardForm.scss';\n\ninterface BraintreeFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n}\n\nconst BraintreeFastlaneCreditCardForm: FunctionComponent<BraintreeFastlaneCreditCardFormProps> = ({\n    renderPayPalCardComponent,\n}) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#braintree-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"braintree-fastlane-cc-form-container\"\n            data-test=\"braintree-fastlane-cc-form-container\"\n            id=\"braintree-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BraintreeFastlaneCreditCardForm;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BraintreeFastlaneInstrumentsFormProps {\n    onChange: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n    selectedInstrument: CardInstrument;\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BraintreeFastlaneInstrumentsForm: FunctionComponent<\n    BraintreeFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"braintree-fastlane-instrument\"\n            data-test=\"braintree-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"braintree-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"braintree-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"braintree-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"braintree-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"braintree-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneInstrumentsForm;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\nimport { useBraintreeFastlaneInstruments } from '../hooks/useBraintreeFastlaneInstruments';\n\nimport BraintreFastlaneCreditCardForm from './BraintreeFastlaneCreditCardForm';\nimport BraintreeFastlaneInstrumentsForm from './BraintreeFastlaneInstrumentsForm';\n\ninterface BraintreeFastlaneFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n}\n\nconst BraintreeFastlaneForm: FunctionComponent<BraintreeFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBraintreeFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\" id=\"braintree-fastlane\">\n            {shouldShowInstrumentsForm && (\n                <BraintreeFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BraintreFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneForm;\n","import BraintreeFastlanePaymentMethod from './BraintreeFastlanePaymentMethod';\n\nexport default BraintreeFastlanePaymentMethod;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeFastlaneForm from './components/BraintreeFastlaneForm';\n\nimport './BraintreeFastlanePaymentMethod.scss';\n\nexport interface BraintreeFastlaneComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BraintreeFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const paypalFastlaneComponentRef = useRef<BraintreeFastlaneComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                braintreefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalFastlaneComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalFastlaneComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: Error) => {\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalFastlaneComponentRef?.current?.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalFastlaneComponentRef.current?.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeFastlanePaymentMethod,\n    [{ id: 'braintreeacceleratedcheckout' }],\n);\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreeLocalPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const methodId = method.id;\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                braintreelocalmethods: {\n                    container: '#checkout-payment-continue',\n                    buttonText: language.translate('payment.continue_with_brand', {\n                        brandName: methodId,\n                    }),\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeLocalPaymentMethod,\n    [{ gateway: 'braintreelocalmethods' }],\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const initializeBraintreePaypalPaymentMethod = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const { onUnhandledError, language, method, paymentForm } = rest;\n\n            return checkoutService.initializePayment({\n                ...defaultOptions,\n                braintree: {\n                    containerId: '#checkout-payment-continue',\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError?.(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError?.(error);\n                        }\n                    },\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                },\n            });\n        },\n        [rest, checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBraintreePaypalPaymentMethod}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreePaypalPaymentMethod,\n    [{ id: 'braintreepaypal' }],\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    type CheckoutButtonResolveId,\n    PaymentMethodId,\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst VisaCheckoutPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeVisaCheckoutPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const mergedOptions = {\n                ...defaultOptions,\n                braintreevisacheckout: {\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"visaCheckoutWalletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            editButtonClassName=\"v-button\"\n            initializePayment={initializeVisaCheckoutPayment}\n            method={method}\n            shouldShowEditButton\n            signInButtonClassName=\"v-button\"\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    VisaCheckoutPaymentMethod,\n    [{ id: PaymentMethodId.BraintreeVisaCheckout }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\n\nconst BraintreeVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    language,\n    method,\n    paymentForm,\n}) => {\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeVenmoPaymentMethod,\n    [{ id: 'braintreevenmo' }],\n);\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import { number } from 'card-validator';\n\nimport { type WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface PaymentViewProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    shouldShowEditButton?: boolean;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    buttonId: string;\n    method: PaymentMethod;\n    onSignOut: () => void;\n}\n\nconst PaymentView: React.FC<PaymentViewProps> = ({\n    accountMask,\n    cardName,\n    cardType,\n    expiryMonth,\n    expiryYear,\n    shouldShowEditButton,\n    editButtonClassName,\n    editButtonLabel,\n    buttonId,\n    method,\n    onSignOut,\n}) => {\n    return (\n        <>\n            {!!cardName && (\n                <p data-test=\"payment-method-wallet-card-name\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_name_label\" />:\n                    </strong>{' '}\n                    {cardName}\n                </p>\n            )}\n\n            {!!accountMask && !!cardType && (\n                <p data-test=\"payment-method-wallet-card-type\">\n                    <strong>{`${cardType}:`}</strong> {accountMask}\n                </p>\n            )}\n\n            {!!expiryMonth && !!expiryYear && (\n                <p data-test=\"payment-method-wallet-card-expiry\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                    </strong>{' '}\n                    {`${expiryMonth}/${expiryYear}`}\n                </p>\n            )}\n\n            {!!shouldShowEditButton && (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    }\n                </p>\n            )}\n\n            <SignOutLink method={method} onSignOut={onSignOut} />\n        </>\n    );\n};\n\nexport default PaymentView;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignInViewProps {\n    buttonId: string;\n    method: PaymentMethod;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n}\n\nconst SignInView: React.FC<SignInViewProps> = ({\n    buttonId,\n    method,\n    signInButtonClassName,\n    signInButtonLabel,\n}) => {\n    const { language } = useLocale();\n\n    return (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n            {signInButtonLabel || (\n                <TranslatedString\n                    data={{ providerName: getPaymentMethodName(language)(method) }}\n                    id=\"remote.sign_in_action\"\n                />\n            )}\n        </a>\n    );\n};\n\nexport default SignInView;\n","import {\n    type CheckoutSelectors,\n    type CustomerRequestOptions,\n    type PaymentInitializeOptions,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect } from 'react';\n\nimport {\n    type PaymentFormService,\n    useCheckout,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\nimport PaymentView from './PaymentView';\nimport SignInView from './SignInView';\n\nexport interface WalletButtonPaymentMethodProps {\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst WalletButtonPaymentMethodComponent: React.FC<WalletButtonPaymentMethodProps> = ({\n    paymentForm,\n    buttonId,\n    editButtonClassName,\n    editButtonLabel,\n    isInitializing = false,\n    method,\n    shouldShowEditButton,\n    signInButtonClassName,\n    signInButtonLabel,\n    signOutCustomer,\n    deinitializePayment,\n    initializePayment,\n    onSignOut = noop,\n    onSignOutError = noop,\n    onUnhandledError = noop,\n}) => {\n    const {\n        checkoutState: {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        },\n    } = useCheckout();\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n    const isPaymentSelected = some(checkout.payments, { providerId: method.id });\n    // FIXME: I'm not sure how this would work for non-English names.\n    const cardName =\n        walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' ');\n\n    const toggleSubmit = () => {\n        const { disableSubmit } = paymentForm;\n        const currentIsPaymentDataRequired = isPaymentDataRequired();\n\n        if (\n            normalizeWalletPaymentData(method.initializationData) ||\n            !currentIsPaymentDataRequired\n        ) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    };\n\n    const handleSignOut = useCallback(async () => {\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    }, [signOutCustomer, method.id, onSignOut, onSignOutError]);\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            toggleSubmit();\n\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                const { disableSubmit } = paymentForm;\n\n                disableSubmit(method, false);\n\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        toggleSubmit();\n    });\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n            <div className=\"paymentMethod paymentMethod--walletButton\">\n                {isPaymentSelected ? (\n                    <PaymentView\n                        {...walletPaymentData}\n                        buttonId={buttonId}\n                        cardName={cardName}\n                        editButtonClassName={editButtonClassName}\n                        editButtonLabel={editButtonLabel}\n                        method={method}\n                        onSignOut={handleSignOut}\n                        shouldShowEditButton={shouldShowEditButton}\n                    />\n                ) : (\n                    <SignInView\n                        buttonId={buttonId}\n                        method={method}\n                        signInButtonClassName={signInButtonClassName}\n                        signInButtonLabel={signInButtonLabel}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default WalletButtonPaymentMethodComponent;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n"],"names":["appearFocused","id","name","renderInput","useCallback","additionalClassName","input","labelContent","TextInputIframeContainer","FormField","TranslatedString","additionalFields","cardCodeId","cardExpiryId","cardNameId","cardNumberId","focusedFieldType","Fieldset","legend","Legend","hidden","className","HostedCreditCardNumberField","HostedCreditCardExpiryField","Boolean","HostedCreditCardCodeField","props","description","isInitializing","initializePayment","method","onUnhandledError","noop","deinitializePayment","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","trustedShippingAddress","checkoutService","checkoutState","isUsingMultiShipping","data","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","cart","config","customer","Error","currentMethodInstruments","trustedInstruments","isNewAddress","length","isInstrumentFeatureAvailable","gateway","paymentMethod","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","methodId","error","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","language","shape","hostedForm","required","errors","cardCode","test","message","translate","value","cardExpiry","cardName","cardNumber","BraintreeAchFieldType","OwnershipTypes","AccountTypes","accountTypeOptions","Savings","label","Checking","ownershipTypeOptions","Personal","Business","defaultBraintreeAchFormFields","AccountType","custom","fieldType","DynamicFormFieldType","DROPDOWM","options","items","AccountNumber","max","min","RoutingNumber","OwnershipType","personalBraintreeAchFormFields","FirstName","LastName","businessBraintreeAchFormFields","BusinessName","currentInstrument","setCurrentInstrument","paymentForm","setFieldValue","accountInstruments","useMemo","isAchInstrument","isGuest","isVaultingEnabled","shouldCreateNewInstrument","shouldConfirmInstrument","getValidationSchema","formFields","getFieldValue","requiredFieldErrorTranslationIds","reduce","schema","matches","validateBraintreeAchForm","braintreeAchFormValues","accountNumber","businessName","routingNumber","ownershipType","firstName","lastName","validationSchema","setValidationSchema","isValidAccountNumber","isValidRoutingNumber","isValidFirstName","isValidLastName","isValidBusinessName","Promise","all","fields","isValid","isValidDepositoryName","resetFormValidation","getTranslatedLabelByFieldName","fieldName","braintreeAchFormLabelsMap","accountType","Object","values","includes","isBraintreeAchFormFieldName","fieldValues","handleChange","fieldId","map","field","DynamicFormField","extraClass","key","onChange","updateMandateText","getFormValues","fullName","String","depositoryName","outstandingBalance","getCheckout","storeName","storeProfile","symbol","currency","mandateTextTranslationKey","formattedDate","Date","now","toJSON","slice","split","reverse","join","mandateTextTranslationProps","toLowerCase","currentDate","mandateText","CheckboxFormField","isValidForm","setIsValidForm","disableSubmit","getBillingAddress","defaultFormValues","shouldSaveInstrument","shouldSetAsDefaultInstrument","orderConsent","entries","resetFormValues","shouldShowForm","shouldShowMandateTextCheckbox","validate","mandateTextConfirmationCheckboxValue","AccountInstrumentFieldset","StoreInstrumentFieldset","toResolvableComponent","currentMandateTextRef","useRef","braintreeach","getMandateText","current","isLoadingPaymentMethod","formContextProps","isSubmitted","setSubmitted","FormContext","Provider","CheckoutContext","LocaleProvider","PaymentFormContext","LoadingOverlay","currentMandateText","isHostedFormEnabled","threeDSecureContent","setThreeDSecureContent","setFocusedFieldType","ref","threeDSecureContentRef","createRef","showCardHolderName","requireCustomerCode","setFieldTouched","submitForm","isInstrumentCardCodeRequiredProp","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredProp","isInstrumentCardNumberRequiredSelector","isCardCodeRequired","isCardHolderNameRequired","getHostedFieldId","compact","getHostedFormOptions","styleProps","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","shouldRenderHostedFields","styleContainerId","cardCodeVerification","accessibilityLabel","containerId","cardNumberVerification","cardExpiryVerification","placeholder","styles","default","getCreditCardInputStyles","focus","Focus","onBlur","onCardTypeChange","cardType","onEnter","onFocus","onValidate","forIn","fieldErrors","errorKey","type","getHostedStoredCardValidationFieldset","HostedCreditCardValidation","initializeBraintreePayment","braintree","threeDSecure","addFrame","content","cancel","cancelThreeDSecureVerification","removeFrame","form","appendThreeDSecureContent","appendChild","cancelThreeDSecureModalFlow","CreditCardPaymentMethodComponent","cardFieldset","HostedCreditCardFieldset","CreditCardCustomerCodeField","cardValidationSchema","getHostedCreditCardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema","getHostedInstrumentValidationSchema","isCardExpiryRequired","Modal","additionalBodyClassName","closeButtonLabel","isOpen","onAfterOpen","onRequestClose","renderPayPalCardComponent","mapFromInstrumentCardType","brand","CreditCardIcon","last4","PoweredByPayPalFastlaneLabel","Button","onClick","result","size","Tiny","testId","variant","Secondary","showPayPalCardSelector","getPaymentProviderCustomer","paymentProviderCustomer","paypalFastlaneCustomer","instrument","useBraintreeFastlaneInstruments","shouldShowInstrumentsForm","paypalFastlaneComponentRef","isInitializingPayment","braintreefastlane","onInit","onError","braintreelocalmethods","container","buttonText","brandName","onRenderButton","hidePaymentSubmitButton","rest","initializeBraintreePaypalPaymentMethod","defaultOptions","HostedPaymentComponent","initializeVisaCheckoutPayment","mergedOptions","braintreevisacheckout","onPaymentSelect","reinitializePayment","WalletButtonPaymentMethodComponent","buttonId","editButtonClassName","shouldShowEditButton","signInButtonClassName","signOutCustomer","PaymentMethodId","BraintreeVisaCheckout","placement","tooltip","CreditCardInputStylesType","properties","Default","document","createElement","parentContainer","getElementById","resolve","hasError","element","parentElement","removeChild","formatAccountMask","accountMask","padding","object","card_information","cardData","isWalletButtonInitializationData","number","expiryMonth","expMonth","expiryYear","expYear","accountNum","card","expDate","substr","niceType","PaymentMethodType","getPaymentMethodName","translations","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","displayName","capitalize","get","onSignOut","href","preventDefault","providerName","editButtonLabel","signInButtonLabel","onSignOutError","billingAddress","checkout","walletPaymentData","initializationData","isPaymentSelected","some","payments","providerId","toggleSubmit","currentIsPaymentDataRequired","handleSignOut","window","location","reload"],"sourceRoot":""}