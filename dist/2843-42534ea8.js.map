{"version":3,"file":"2843-42534ea8.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/payment/getPreselectedPayment.ts","webpack://checkout/./packages/core/src/app/address/AddressFormType.ts","webpack://checkout/./packages/core/src/app/address/getAddressFormFieldInputId.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorAU.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorCA.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./packages/core/src/app/ui/popover/Popover.tsx","webpack://checkout/./packages/core/src/app/ui/popover/PopoverList.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/utils.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/AutocompleteContent.tsx","webpack://checkout/./packages/core/src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./packages/core/src/app/address/AddressForm.tsx","webpack://checkout/./packages/core/src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./packages/core/src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./packages/core/src/app/address/AddressSelectButton.tsx","webpack://checkout/./packages/core/src/app/address/AddressSelect.tsx","webpack://checkout/./packages/core/src/app/address/SingleLineStaticAddress.tsx","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/core/src/app/orderComments/OrderComments.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./packages/core/src/app/address/isValidCustomerAddress.ts","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts","webpack://checkout/./packages/core/src/app/address/isEqualAddress.ts"],"sourcesContent":["import { type Checkout, type CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\n\nimport { isStoreCreditPayment } from './storeCredit';\n\nexport default function getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(\n        (payment) =>\n            !isGiftCertificatePayment(payment) &&\n            !isStoreCreditPayment(payment) &&\n            !!payment.providerId,\n    );\n}\n","import { type Address, type FormField } from '@bigcommerce/checkout-sdk';\n\nimport { type AddressKeyMap } from './address';\nimport type AddressType from './AddressType';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n    type: AddressType;\n}\n\nexport const LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nexport const AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nexport const PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nexport const AUTOCOMPLETE_FIELD_NAME = 'address1';\n","import { type AddressKeyMap } from './address';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getAddressFormFieldLegacyName(name: string): string {\n    return ADDRESS_FIELD_IDS[name] || name;\n}\n\nexport function getAddressFormFieldInputId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Input`;\n}\n\nexport function getAddressFormFieldLabelId(name: string): string {\n    return `${getAddressFormFieldLegacyName(name)}Label`;\n}\n","import { type GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(googlePlace: google.maps.places.PlaceResult) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name ?? '';\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        if (this.getCountry() === 'NZ') {\n            return this._get('sublocality', 'short_name');\n        }\n\n        return this._get('subpremise', 'short_name');\n    }\n\n    getCity(): string {\n        return (\n            this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name')\n        );\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>,\n    ): string {\n        const element =\n            this._address && this._address.find((field) => field.types.includes(type));\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorAU extends AddressSelector {\n    getStreet(): string {\n        const subpremise = this._get('subpremise', 'short_name');\n        const subpremisePart = subpremise ? `${subpremise}/` : '';\n\n        return `${subpremisePart}${this._get('street_number', 'long_name')} ${this._get('route', 'long_name')}`;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorCA extends AddressSelector {\n    getCity(): string {\n        return this._get('sublocality_level_1', 'long_name') || this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return '';\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n\n    getPostCode(): string {\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorAU from './AddressSelectorAU';\nimport AddressSelectorCA from './AddressSelectorCA';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const countryComponent = autocompleteData.address_components?.find(\n            component => component.types.includes('country'));\n        const countryShortName = countryComponent?.short_name || '';\n\n        switch (countryShortName) {\n            case 'GB':\n                return new AddressSelectorUK(autocompleteData);\n\n            case 'CA':\n                return new AddressSelectorCA(autocompleteData);\n            \n            case 'AU':\n                return new AddressSelectorAU(autocompleteData);\n\n            default:\n                return new AddressSelector(autocompleteData);\n        }\n    }\n}\n","import React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children?: ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return <div className=\"popover\">{children}</div>;\n};\n\nexport default Popover;\n","import React, { type FunctionComponent, memo } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: React.HTMLAttributes<HTMLElement>;\n    highlightedIndex?: number;\n    getItemProps?: (index: number, itemId: string) => React.HTMLAttributes<HTMLElement>;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = () => ({} as React.HTMLAttributes<HTMLElement>),\n    menuProps = {},\n    items,\n}) => {\n    if (!items.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"popoverList\" data-test={testId} {...menuProps}>\n            {items.map((item, index) => (\n                <li\n                    className={getItemClassName(highlightedIndex, index)}\n                    data-test={testId && `${testId}-item`}\n                    {...getItemProps(index, item.id)}\n                    key={index}\n                >\n                    {item.content}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import React, { Fragment, type ReactChild } from 'react';\n\nimport { type PopoverListItem } from '../popover';\n\nimport type AutocompleteItem from './autocomplete-item';\n\nexport const highlightItem = (item: AutocompleteItem): ReactChild[] | ReactChild => {\n    if (!item.highlightedSlices || !item.highlightedSlices.length) {\n        return item.label;\n    }\n\n    let lastIndex = 0;\n    let key = 0;\n\n    return item.highlightedSlices.reduce((node, slice, i) => {\n        const { label } = item;\n        const { offset, length } = slice;\n        const notHighlightedLength = offset - lastIndex;\n\n        if (notHighlightedLength) {\n            node.push(\n                <Fragment key={key}>{label.substr(lastIndex, notHighlightedLength)}</Fragment>,\n            );\n            key += 1;\n        }\n\n        lastIndex = offset + length;\n\n        node.push(<strong key={key}>{label.substr(offset, length)}</strong>);\n        key += 1;\n\n        if (i === (item.highlightedSlices || []).length - 1) {\n            node.push(<Fragment key={key}>{label.substr(lastIndex)}</Fragment>);\n            key += 1;\n        }\n\n        return node;\n        // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n    }, [] as ReactChild[]);\n};\n\nexport const toPopoverItem = (item: AutocompleteItem): PopoverListItem => {\n    return {\n        ...item,\n        content: highlightItem(item),\n    };\n};\n\nexport const itemToString = (item?: AutocompleteItem | null): string => {\n    return (item && item.value) || '';\n};\n","import type { GetInputPropsOptions, GetItemPropsOptions, GetMenuPropsOptions } from 'downshift';\nimport { includes, isNumber } from 'lodash';\nimport React, { type ReactNode } from 'react';\n\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Label } from '../form';\nimport { Popover, PopoverList } from '../popover';\n\nimport { type InputPropsType } from './Autocomplete';\nimport type AutocompleteItem from './autocomplete-item';\nimport { toPopoverItem } from './utils';\n\nexport interface AutocompleteContentProps {\n    isOpen: boolean;\n    getInputProps: (options?: GetInputPropsOptions) => React.InputHTMLAttributes<HTMLInputElement>;\n    getMenuProps: (options?: GetMenuPropsOptions) => React.HTMLAttributes<HTMLElement>;\n    getItemProps: (\n        options: GetItemPropsOptions<AutocompleteItem>,\n    ) => React.HTMLAttributes<HTMLElement>;\n    highlightedIndex: number | null;\n    initialValue?: string;\n    inputProps?: InputPropsType;\n    items: AutocompleteItem[];\n    listTestId?: string;\n    children?: ReactNode;\n}\n\nconst AutocompleteContent: React.FC<AutocompleteContentProps> = ({\n    isOpen,\n    getInputProps,\n    getMenuProps,\n    getItemProps,\n    highlightedIndex,\n    initialValue,\n    inputProps,\n    items,\n    listTestId,\n    children,\n}) => {\n    const { themeV2 } = useThemeContext();\n    const baseInputProps = getInputProps({ value: initialValue });\n    const combinedProps = { ...baseInputProps, ...inputProps };\n\n    // Extract labelText to avoid passing it to input element\n    const { labelText: _labelText, ...validInputProps } = combinedProps;\n\n    const getProps = (index: number, itemId: string) => {\n        const autocompleteItem = items.find((item) => item.id === itemId);\n\n        if (!autocompleteItem) {\n            return {};\n        }\n\n        return getItemProps({\n            key: itemId,\n            index,\n            item: autocompleteItem,\n        });\n    };\n\n    return (\n        <>\n            <input {...validInputProps} />\n            {inputProps && includes(inputProps.className, 'floating') && (\n                <Label\n                    additionalClassName={themeV2 ? 'floating-form-field-label' : ''}\n                    htmlFor={inputProps.id}\n                    id={inputProps['aria-labelledby']}\n                    isFloatingLabelEnabled={true}\n                >\n                    {inputProps.labelText}\n                </Label>\n            )}\n            {isOpen && !!items.length && (\n                <Popover>\n                    <PopoverList\n                        getItemProps={getProps}\n                        highlightedIndex={isNumber(highlightedIndex) ? highlightedIndex : -1}\n                        items={items.map((item) => toPopoverItem(item))}\n                        menuProps={getMenuProps()}\n                        testId={listTestId}\n                    />\n                    {children}\n                </Popover>\n            )}\n        </>\n    );\n};\n\nexport default AutocompleteContent;\n","import Downshift, { type DownshiftState, type StateChangeOptions } from 'downshift';\nimport { noop } from 'lodash';\nimport React, { type ReactNode, useCallback } from 'react';\n\nimport type AutocompleteItem from './autocomplete-item';\nimport AutocompleteContent from './AutocompleteContent';\nimport { itemToString } from './utils';\n\nexport interface InputPropsType {\n    className: string;\n    id: string;\n    'aria-labelledby': string;\n    placeholder: string | undefined;\n    labelText: React.JSX.Element | null;\n    maxLength: number | undefined;\n}\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    defaultHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: InputPropsType;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem | null): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nconst Autocomplete: React.FC<AutocompleteProps> = ({\n    inputProps,\n    initialValue,\n    initialHighlightedIndex,\n    defaultHighlightedIndex,\n    items,\n    children,\n    onSelect,\n    listTestId,\n    onChange,\n    onToggleOpen = noop,\n}) => {\n    const stateReducer = useCallback(\n        (\n            state: DownshiftState<AutocompleteItem>,\n            changes: StateChangeOptions<AutocompleteItem>,\n        ): Partial<StateChangeOptions<AutocompleteItem>> => {\n            switch (changes.type) {\n                case Downshift.stateChangeTypes.blurInput:\n                case Downshift.stateChangeTypes.blurButton:\n                case Downshift.stateChangeTypes.mouseUp:\n                case Downshift.stateChangeTypes.touchEnd:\n                    return {\n                        ...changes,\n                        inputValue: state.inputValue,\n                    };\n\n                case Downshift.stateChangeTypes.changeInput:\n                    if (changes.inputValue !== state.inputValue && onChange) {\n                        onChange(changes.inputValue || '', state.isOpen);\n                    }\n\n                    return changes;\n\n                case Downshift.stateChangeTypes.keyDownEnter:\n                    return changes;\n\n                default:\n                    return changes;\n            }\n        },\n        [onChange],\n    );\n\n    const handleStateChange = useCallback(\n        ({ isOpen, inputValue }: StateChangeOptions<AutocompleteItem>) => {\n            if (isOpen !== undefined) {\n                onToggleOpen({ isOpen, inputValue: inputValue || '' });\n            }\n        },\n        [onToggleOpen],\n    );\n\n    return (\n        <Downshift\n            defaultHighlightedIndex={defaultHighlightedIndex}\n            initialHighlightedIndex={initialHighlightedIndex}\n            initialInputValue={initialValue}\n            itemToString={itemToString}\n            labelId={inputProps && inputProps['aria-labelledby']}\n            onChange={onSelect}\n            onStateChange={handleStateChange}\n            stateReducer={stateReducer}\n        >\n            {({ isOpen, getInputProps, getMenuProps, getItemProps, highlightedIndex }) => {\n                return (\n                    <div>\n                        <AutocompleteContent\n                            getInputProps={getInputProps}\n                            getItemProps={getItemProps}\n                            getMenuProps={getMenuProps}\n                            highlightedIndex={highlightedIndex}\n                            initialValue={initialValue}\n                            inputProps={inputProps}\n                            isOpen={isOpen}\n                            items={items}\n                            listTestId={listTestId}\n                        >\n                            {children}\n                        </AutocompleteContent>\n                    </div>\n                );\n            }}\n        </Downshift>\n    );\n};\n\nexport default Autocomplete;\n","import { getScriptLoader, type ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { type GoogleAutocompleteWindow, type GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject(new Error('Failed to initialize Google Maps Autocomplete SDK.'));\n            };\n\n            this._scriptLoader\n                .loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch((e) => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(\n        autocompleteWindow.google &&\n            autocompleteWindow.google.maps &&\n            autocompleteWindow.google.maps.places,\n    );\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport type GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader(),\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader\n                .loadMapsSdk(this._apiKey)\n                .then((googleMapsSdk) => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, type ReactNode } from 'react';\n\nimport { Autocomplete, type AutocompleteItem } from '../../ui/autocomplete';\n\nimport { type GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\nexport interface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const { initialValue, onToggleOpen = noop, inputProps = {} } = this.props;\n\n        const { autoComplete, items } = this.state;\n\n        return (\n            <Autocomplete\n                defaultHighlightedIndex={-1}\n                initialHighlightedIndex={-1}\n                initialValue={initialValue}\n                inputProps={{\n                    ...inputProps,\n                    autoComplete,\n                }}\n                items={items}\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={this.onChange}\n                onSelect={this.onSelect}\n                onToggleOpen={onToggleOpen}\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = (item) => {\n        const { fields, onSelect = noop, nextElement } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then((service) => {\n            service.getDetails(\n                {\n                    placeId: item.id,\n                    fields: fields || ['address_components', 'name'],\n                },\n                (result) => {\n                    if (nextElement) {\n                        nextElement.focus();\n                    }\n\n                    onSelect(result, item);\n                },\n            );\n        });\n    };\n\n    private onChange: (input: string) => void = (input) => {\n        const { isAutocompleteEnabled, onChange = noop } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const { componentRestrictions, types } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then((service) => {\n            service.getPlacePredictions(\n                {\n                    input,\n                    types: types || ['geocode'],\n                    componentRestrictions,\n                },\n                (results) => this.setState({ items: this.toAutocompleteItems(results ?? undefined) }),\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(\n        results?: google.maps.places.AutocompletePrediction[],\n    ): AutocompleteItem[] {\n        return (results || []).map((result) => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { type FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { type AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField, Label } from '../../ui/form';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLabelId,\n} from '../getAddressFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    isFloatingLabelEnabled?: boolean;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps> = ({\n    field: { default: placeholder, name, maxLength },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n    isFloatingLabelEnabled,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const { themeV2 } = useThemeContext();\n    const labelContent = useMemo(() => <TranslatedString id=\"address.address_line_1_label\" />, []);\n\n    const labelId = getAddressFormFieldLabelId(name);\n\n    const inputProps = useMemo(\n        () => ({\n            className: classNames(\n                'form-input optimizedCheckout-form-input',\n                { 'floating-input': isFloatingLabelEnabled },\n                { 'floating-form-field-input': themeV2 },\n            ),\n            id: getAddressFormFieldInputId(name),\n            'aria-labelledby': labelId,\n            placeholder: isFloatingLabelEnabled ? ' ' : placeholder,\n            labelText: isFloatingLabelEnabled ? labelContent : null,\n            maxLength: maxLength || undefined,\n        }),\n        [name, labelId, placeholder, labelContent, maxLength],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <GoogleAutocomplete\n                apiKey={apiKey}\n                componentRestrictions={countryCode ? { country: countryCode } : undefined}\n                initialValue={field.value}\n                inputProps={inputProps}\n                isAutocompleteEnabled={\n                    countryCode ? supportedCountries.includes(countryCode) : false\n                }\n                nextElement={nextElement}\n                onChange={onChange}\n                onSelect={onSelect}\n                onToggleOpen={onToggleOpen}\n            />\n        ),\n        [\n            apiKey,\n            countryCode,\n            inputProps,\n            nextElement,\n            onChange,\n            onSelect,\n            onToggleOpen,\n            supportedCountries,\n        ],\n    );\n\n    const renderLabel = isFloatingLabelEnabled ? null : (\n        <Label additionalClassName={themeV2 ? 'body-regular' : ''} htmlFor={inputProps.id} id={labelId}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}>\n            {labelContent}\n        </Label>\n    );\n\n    return (\n        <div\n            className={classNames(\n                'dynamic-form-field dynamic-form-field--addressLineAutocomplete',\n                { 'floating-form-field': isFloatingLabelEnabled },\n            )}\n            data-test=\"google-autocomplete-form-field\"\n        >\n            <FormField\n                input={renderInput}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                label={renderLabel}\n                name={fieldName}\n                themeV2={themeV2}\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import { type FormField } from '@bigcommerce/checkout-sdk';\nimport { forIn, noop } from 'lodash';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { type AutocompleteItem } from '../ui/autocomplete';\nimport { CheckboxFormField, Fieldset } from '../ui/form';\n\nimport { type AddressFormProps, AUTOCOMPLETE, AUTOCOMPLETE_FIELD_NAME, LABEL, PLACEHOLDER } from './AddressFormType';\nimport AddressType from './AddressType';\nimport {\n    getAddressFormFieldInputId,\n    getAddressFormFieldLegacyName,\n} from './getAddressFormFieldInputId';\nimport { GoogleAutocompleteFormField, mapToAddress } from './googleAutocomplete';\nimport './AddressForm.scss'; \n\nconst AddressForm: React.FC<AddressFormProps> = ({\n        formFields,\n        fieldName,\n        countryCode,\n        onAutocompleteToggle,\n        shouldShowSaveAddress,\n        setFieldValue = noop,\n        onChange = noop,\n        type,\n    }) => {\n    const { language } = useLocale();\n    const { themeV2 } = useThemeContext();\n    const {\n        checkoutState: {\n            data: { getConfig, getBillingCountries, getShippingCountries }\n        }\n    } = useCheckout();\n    \n    const config = getConfig();\n    const countries = (type === AddressType.Billing \n        ? getBillingCountries() \n        : getShippingCountries()\n    ) || EMPTY_ARRAY;\n    const googleMapsApiKey = config?.checkoutSettings.googleMapsApiKey || '';\n    const isFloatingLabelEnabledValue = config ? isFloatingLabelEnabled(config.checkoutSettings) : false;\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    const containerRef = useRef<HTMLDivElement>(null);\n    const nextElementRef = useRef<HTMLElement | null>(null);\n\n    useEffect(() => {\n        const { current } = containerRef;\n\n        if (current) {\n            nextElementRef.current = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }, []);\n\n    const syncNonFormikValue = useCallback((fieldName: string, value: string | string[]) => {\n        const dateFormFieldNames = formFields\n            .filter((field) => field.custom && field.fieldType === DynamicFormFieldType.DATE)\n            .map((field) => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.includes(fieldName)) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    }, [formFields, setFieldValue, onChange]);\n\n    const handleDynamicFormFieldChange = useCallback((name: string) => (value: string | string[]) => {\n        syncNonFormikValue(name, value);\n    }, [syncNonFormikValue]);\n\n    const handleAutocompleteChange = useCallback((value: string, isOpen: boolean) => {\n        if (!isOpen) {\n            syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    }, [syncNonFormikValue]);\n\n    const handleAutocompleteSelect = useCallback((\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem,\n    ) => {\n        const { value: autocompleteValue } = item;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            if (fieldName === AUTOCOMPLETE_FIELD_NAME && value === undefined) {\n                return;\n            }\n\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        const address1 = address.address1 ? address.address1 : autocompleteValue;\n\n        if (address1) {\n            syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, address1);\n        }\n    }, [countries, setFieldValue, onChange, syncNonFormikValue]);\n\n    const getPlaceholderValue = useCallback((field: FormField, translatedPlaceholderId: string): string => {\n        if (field.default && field.fieldType !== 'dropdown') {\n            return field.default;\n        }\n\n        return translatedPlaceholderId && language.translate(translatedPlaceholderId);\n    }, [language]);\n\n    return (\n        <>\n            <Fieldset>\n                <div\n                    className=\"checkout-address\"\n                    ref={containerRef}\n                >\n                    {formFields.map((field) => {\n                        const addressFieldName = field.name;\n                        const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                        if (\n                            addressFieldName === 'address1' &&\n                            googleMapsApiKey &&\n                            countryCode &&\n                            countriesWithAutocomplete.includes(countryCode)\n                        ) {\n                            return (\n                                <GoogleAutocompleteFormField\n                                    apiKey={googleMapsApiKey}\n                                    countryCode={countryCode}\n                                    field={field}\n                                    isFloatingLabelEnabled={isFloatingLabelEnabledValue}\n                                    key={field.id}\n                                    nextElement={nextElementRef.current || undefined}\n                                    onChange={handleAutocompleteChange}\n                                    onSelect={handleAutocompleteSelect}\n                                    onToggleOpen={onAutocompleteToggle}\n                                    parentFieldName={fieldName}\n                                    supportedCountries={countriesWithAutocomplete}\n                                />\n                            );\n                        }\n\n                        return (\n                            <DynamicFormField\n                                autocomplete={AUTOCOMPLETE[field.name]}\n                                extraClass={`dynamic-form-field--${getAddressFormFieldLegacyName(\n                                    addressFieldName,\n                                )}`}\n                                field={field}\n                                inputId={getAddressFormFieldInputId(addressFieldName)}\n                                // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                                isFloatingLabelEnabled={isFloatingLabelEnabledValue}\n                                key={`${field.id}-${field.name}`}\n                                label={\n                                    field.custom ? (\n                                        field.label\n                                    ) : (\n                                        <TranslatedString id={LABEL[field.name]} />\n                                    )\n                                }\n                                onChange={handleDynamicFormFieldChange(addressFieldName)}\n                                parentFieldName={\n                                    field.custom\n                                        ? fieldName\n                                            ? `${fieldName}.customFields`\n                                            : 'customFields'\n                                        : fieldName\n                                }\n                                placeholder={getPlaceholderValue(\n                                    field,\n                                    translatedPlaceholderId,\n                                )}\n                                themeV2={themeV2}\n                            />\n                        );\n                    })}\n                </div>\n            </Fieldset>\n            {shouldShowSaveAddress && (\n                <CheckboxFormField\n                    labelContent={<TranslatedString id=\"address.save_in_addressbook\" />}\n                    name={fieldName ? `${fieldName}.shouldSaveAddress` : 'shouldSaveAddress'}\n                    themeV2={themeV2}\n                />\n            )}\n        </>\n    );\n};\n\nexport default AddressForm;\n","import { type Address, type Country, type Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = [],\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find((c) => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    // TODO: Apply this fix for US, UK and CA addresses too.\n    const steet1 = countryCode === 'AU' ? accessor.getStreet() : undefined;\n\n    return {\n        address1: steet1,\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...(state ? getState(state, country && country.subdivisions) : {}),\n    };\n}\n\nfunction getState(stateName: string, states: Region[] = []): Partial<Address> {\n    const state = states.find(({ code, name }: Region) => code === stateName || name === stateName);\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { type Address } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { type AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields, ...address } = formValues;\n    const shouldSaveAddress = formValues.shouldSaveAddress;\n\n    return {\n        ...address,\n        shouldSaveAddress,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import React, { type FunctionComponent, useState } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { type AddressSelectProps } from './AddressSelect';\nimport SingleLineStaticAddress from './SingleLineStaticAddress';\nimport StaticAddress from './StaticAddress';\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses' | 'type' | 'showSingleLineAddress' | 'placeholderText'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps & WithLanguageProps> = ({\n    selectedAddress,\n    language,\n    type,\n    showSingleLineAddress,\n    placeholderText,\n}) => {\n    const { themeV2 } = useThemeContext();\n    const [ariaExpanded, setAriaExpanded] = useState(false);\n\n    const SelectedAddress = () => {\n        if (!selectedAddress) {\n            return (<span className={themeV2 ? 'body-regular' : ''} data-test=\"address-select-placeholder\">\n                {placeholderText ?? <TranslatedString id=\"address.enter_address_action\" />}\n            </span>);\n        }\n\n        return showSingleLineAddress\n            ? <SingleLineStaticAddress address={selectedAddress} type={type} />\n            : <StaticAddress address={selectedAddress} type={type} />;\n    }\n\n    return (\n        <a\n            aria-controls=\"addressDropdown\"\n            aria-expanded={ariaExpanded}\n            aria-label={language.translate('address.enter_or_select_address_action')}\n            className=\"button dropdown-button dropdown-toggle--select\"\n            data-test=\"address-select-button\"\n            href=\"#\"\n            id=\"addressToggle\"\n            onBlur={() => setAriaExpanded(false)}\n            onClick={preventDefault(() => setAriaExpanded(!ariaExpanded))}\n        >\n            <SelectedAddress />\n        </a>\n    );\n};\n\nexport default withLanguage(AddressSelectButton);\n","import { type Address, type CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo, type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel, usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport AddressSelectButton from './AddressSelectButton';\nimport type AddressType from './AddressType';\nimport isEqualAddress from './isEqualAddress';\nimport StaticAddress from './StaticAddress';\n\nimport './AddressSelect.scss';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    type: AddressType;\n    showSingleLineAddress?: boolean;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n    placeholderText?: ReactNode;\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n    type,\n}) => (\n    <ul className=\"dropdown-menu instrumentSelect-dropdownMenu\" id=\"addressDropdown\">\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a\n                data-test=\"add-new-address\"\n                href=\"#\"\n                onClick={preventDefault(() => onUseNewAddress(selectedAddress))}\n            >\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        {addresses.map((address) => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                data-test=\"address-select-option\"\n                key={address.id}\n            >\n                <a\n                    data-test=\"address-select-option-action\"\n                    href=\"#\"\n                    onClick={preventDefault(() => onSelectAddress(address))}\n                >\n                    <StaticAddress address={address} type={type} />\n                </a>\n            </li>\n        ))}\n    </ul>\n);\n\nconst AddressSelect = ({\n    addresses,\n    selectedAddress,\n    type,\n    showSingleLineAddress,\n    onSelectAddress,\n    onUseNewAddress,\n    placeholderText,\n}: AddressSelectProps) => {\n    const { shouldShowPayPalFastlaneLabel } = usePayPalFastlaneAddress();\n\n    const handleSelectAddress = (newAddress: Address) => {\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    const handleUseNewAddress = () => {\n        onUseNewAddress(selectedAddress);\n    };\n\n    return (\n        <div className=\"form-field\">\n            <div className=\"dropdown--select\">\n                <DropdownTrigger\n                    dropdown={\n                        <AddressSelectMenu\n                            addresses={addresses}\n                            onSelectAddress={handleSelectAddress}\n                            onUseNewAddress={handleUseNewAddress}\n                            selectedAddress={selectedAddress}\n                            type={type}\n                        />\n                    }\n                >\n                    <AddressSelectButton\n                        addresses={addresses}\n                        placeholderText={placeholderText}\n                        selectedAddress={selectedAddress}\n                        showSingleLineAddress={showSingleLineAddress}\n                        type={type}\n                    />\n                </DropdownTrigger>\n            </div>\n\n            {shouldShowPayPalFastlaneLabel && <PoweredByPayPalFastlaneLabel />}\n        </div>\n    );\n}\n\nexport default memo(AddressSelect);\n","import { type Address } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { isEmpty } from 'lodash';\nimport React from \"react\";\n\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport type AddressType from \"./AddressType\";\n\nexport interface SingleLineStaticAddressProps {\n    address: Address;\n    type?: AddressType;\n}\n\nexport const getAddressContent: (value: Address) => string = ({\n    firstName,\n    lastName,\n    address1,\n    address2,\n    city,\n    countryCode,\n    stateOrProvince,\n    postalCode,\n}: Address): string => {\n    const addressParts = [address1, address2, city, stateOrProvince, countryCode, postalCode];\n    const nonEmptyAddressParts = addressParts.filter(Boolean);\n    const address = nonEmptyAddressParts.join(', ');\n\n    if (!firstName || !lastName || !address) {\n        return '';\n    }\n\n    return `${firstName} ${lastName}, ${address}`;\n};\n\nconst SingleLineStaticAddress = ({ address }: SingleLineStaticAddressProps) => {\n    const { themeV2 } = useThemeContext();\n\n    const isValid = !isEmpty(address);\n\n    return !isValid ? null : (\n        <div className=\"vcard checkout-address--static\" data-test=\"static-address\">\n            <p className={classNames('address-entry', { 'body-regular': themeV2 })}>\n                {getAddressContent(address)}\n            </p>\n        </div>\n    );\n}\n\nexport default SingleLineStaticAddress;\n","import { type Placement } from '@popperjs/core';\nimport React, { type MouseEventHandler, type ReactElement, type ReactNode, useCallback, useEffect, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n    children?: ReactNode;\n}\n\nconst DropdownTrigger = ({\n    placement = 'bottom-start',\n    dropdown,\n    children\n}: DropdownTriggerProps): ReactElement => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const getRootElement = useCallback(() => {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }, []);\n\n    const handleClose = useCallback(() => {\n        if (!shouldShow) {\n            return;\n        }\n\n        setShouldShow(false);\n    }, [shouldShow]);\n\n    const handleOpen = useCallback(() => {\n        if (shouldShow) {\n            return;\n        }\n\n        setShouldShow(true);\n    }, [shouldShow]);\n\n    const handleClick: MouseEventHandler<HTMLElement> = useCallback(() => {\n        if (shouldShow) {\n            handleClose();\n        } else {\n            handleOpen();\n        }\n    }, [shouldShow, handleClose, handleOpen]);\n\n    useEffect(() => {\n        const rootElement = getRootElement();\n\n        if (shouldShow) {\n            rootElement?.addEventListener('click', handleClose);\n        } else {\n            rootElement?.removeEventListener('click', handleClose);\n        }\n\n        return () => {\n            rootElement?.removeEventListener('click', handleClose);\n        };\n    }, [shouldShow, handleClose, getRootElement]);\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <div className=\"dropdownTrigger\" onClick={handleClick} ref={ref}>\n                        {children}\n                    </div>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ref}\n                            style={{\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            }}\n                        >\n                            {dropdown}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default DropdownTrigger;\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const { themeV2 } = useThemeContext();\n\n    const renderLabel = useCallback(\n        (name: string) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"off\" id=\"orderComment\" maxLength={2000} themeV2={themeV2} />,\n        [],\n    );\n\n    const legend = useMemo(\n        () => (\n            <Legend themeV2={themeV2}>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Legend>\n        ),\n        [],\n    );\n\n    return (\n        <Fieldset legend={legend} testId=\"checkout-shipping-comments\">\n            <FormField id=\"orderComment\" input={renderInput} label={renderLabel} name=\"orderComment\" />\n        </Fieldset>\n    );\n};\n\nexport default OrderComments;\n","import { type Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(\n    cart: Cart,\n): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion && !item.parentId));\n}\n","import { type Address, type CustomerAddress, type FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[],\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, (customerAddress) => isEqualAddress(customerAddress, address));\n}\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n","import {\n    type Address,\n    type AddressRequestBody,\n    type BillingAddress,\n    type CustomerAddress,\n} from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(\n    address1?: ComparableAddress,\n    address2?: ComparableAddress,\n): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return (\n        isEqual(normalizeAddress(address1), normalizeAddress(address2)) &&\n        isSameState(address1, address2)\n    );\n}\n\nfunction isSameState(address1: ComparableAddress, address2: ComparableAddress): boolean {\n    if (address1.stateOrProvince && address1.stateOrProvince === address2.stateOrProvince) {\n        return true;\n    }\n\n    if (\n        address1.stateOrProvinceCode &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    ) {\n        return true;\n    }\n\n    return (\n        address1.stateOrProvince === address2.stateOrProvince &&\n        address1.stateOrProvinceCode === address2.stateOrProvinceCode\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = [\n        'id',\n        'shouldSaveAddress',\n        'stateOrProvince',\n        'stateOrProvinceCode',\n        'type',\n        'email',\n        'country',\n    ];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields,\n    );\n}\n"],"names":["getPreselectedPayment","checkout","payments","find","payment","providerId","LABEL","address1","address2","city","company","countryCode","firstName","lastName","phone","postalCode","stateOrProvince","stateOrProvinceCode","AUTOCOMPLETE","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","ADDRESS_FIELD_IDS","getAddressFormFieldLegacyName","name","getAddressFormFieldInputId","AddressSelector","constructor","googlePlace","address_components","this","_name","_address","getState","_get","getStreet","getStreet2","getCountry","getCity","getPostCode","type","access","element","field","types","includes","AddressSelectorAU","subpremise","AddressSelectorCA","AddressSelectorUK","AddressSelectorFactory","create","autocompleteData","countryComponent","component","short_name","children","className","getItemClassName","highlightedIndex","index","classes","push","join","memo","testId","getItemProps","menuProps","items","length","map","item","id","key","content","highlightItem","highlightedSlices","label","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","Fragment","substr","itemToString","value","isOpen","getInputProps","getMenuProps","initialValue","inputProps","listTestId","themeV2","baseInputProps","combinedProps","labelText","_labelText","validInputProps","Label","additionalClassName","htmlFor","isFloatingLabelEnabled","itemId","autocompleteItem","isNumber","toPopoverItem","initialHighlightedIndex","defaultHighlightedIndex","onSelect","onChange","onToggleOpen","noop","stateReducer","useCallback","state","changes","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","keyDownEnter","handleStateChange","undefined","initialInputValue","labelId","onStateChange","GoogleAutocompleteScriptLoader","_scriptLoader","getScriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","callbackName","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","Error","loadScript","catch","e","instance","GoogleAutocompleteService","_apiKey","getGoogleAutocompleteScriptLoader","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","getPlacesServices","document","createElement","_placesPromise","PlacesService","GoogleAutocomplete","PureComponent","props","super","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","input","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","autoComplete","render","setState","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","default","placeholder","maxLength","supportedCountries","parentFieldName","fieldName","labelContent","useMemo","TranslatedString","getAddressFormFieldLabelId","renderInput","country","renderLabel","FormField","formFields","onAutocompleteToggle","shouldShowSaveAddress","setFieldValue","language","checkoutState","data","getConfig","getBillingCountries","getShippingCountries","config","countries","AddressType","A","Billing","googleMapsApiKey","checkoutSettings","isFloatingLabelEnabledValue","countriesWithAutocomplete","containerRef","useRef","nextElementRef","useEffect","current","querySelector","syncNonFormikValue","dateFormFieldNames","filter","custom","fieldType","DynamicFormFieldType","DATE","handleDynamicFormFieldChange","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","address","accessor","c","code","street2","steet1","stateName","states","subdivisions","mapToAddress","forIn","getPlaceholderValue","translatedPlaceholderId","translate","Fieldset","ref","addressFieldName","DynamicFormField","autocomplete","extraClass","inputId","CheckboxFormField","mapAddressFromFormValues","formValues","customFields","shouldSaveAddress","withLanguage","selectedAddress","showSingleLineAddress","placeholderText","ariaExpanded","setAriaExpanded","useState","href","onBlur","onClick","preventDefault","SingleLineStaticAddress","StaticAddress","AddressSelectMenu","addresses","onSelectAddress","onUseNewAddress","shouldShowPayPalFastlaneLabel","usePayPalFastlaneAddress","DropdownTrigger","dropdown","newAddress","isEqualAddress","PoweredByPayPalFastlaneLabel","getAddressContent","isEmpty","placement","shouldShow","setShouldShow","getRootElement","getElementById","handleClose","handleOpen","handleClick","rootElement","addEventListener","removeEventListener","modifiers","enabled","style","width","zIndex","hidden","legend","getShippableItemsCount","cart","lineItems","physicalItems","addedByPromotion","parentId","isValidCustomerAddress","some","customerAddress","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID","isEqual","normalizeAddress","isSameState","omit","fieldValue"],"sourceRoot":""}