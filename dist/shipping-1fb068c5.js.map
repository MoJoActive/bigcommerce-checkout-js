{"version":3,"file":"shipping-1fb068c5.js","mappings":"2LAoBA,MAmCA,EAnC0B,EACtBA,WACAC,YACAC,cACAC,SACAC,oBACAC,iBAAiB,EAAAC,KACjBC,yBAAwB,KAGpB,gBAAC,IAAK,CACFC,yBAAyB,iBACzBC,OACI,gBAAC,KAAM,CAACC,QAASP,EAAQQ,KAAM,KAAWC,MAAOC,QAAS,KAAcC,SACnEV,QAAAA,EAAqB,gBAAC,IAAgB,CAACW,GAAG,2BAGnDC,OACI,gBAAC,IAAW,KACR,oCAAgB,YAAYC,KAAK,SAC7B,gBAAC,IAAgB,CAACF,GAAIf,MAIlCkB,OAAQhB,EACRG,eAAgBA,EAChBE,sBAAuBA,GAEvB,iCAAa,YAAYU,KAAK,SAC1B,gBAAC,IAAgB,CAACF,GAAId,K,kDC7CtC,MAMA,GAAe,E,SAAA,IAN0B,IACrC,uBAAKkB,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,qD,gSCAD,SAASC,EAAoBC,EAAoBC,G,MAC5D,MAAMC,EAAgC,CAClCC,EAAA,EAAgBC,UAChBD,EAAA,EAAgBE,6BAChBF,EAAA,EAAgBG,mCAEdC,GAA6B,EAAAC,EAAA,GACR,QAAvB,EAAAP,EAAOQ,wBAAgB,eAAEF,4BAEvBG,GAAqB,EAAAC,EAAA,GAAsBX,GAEjD,OAAIU,GAAsBR,EAAoBU,SAASF,EAAmBG,YAC/DH,EAAmBG,WAGvBN,GAA8BL,EAAoBU,SAASL,GAC5DA,OACAO,CACV,CCtBe,SAASC,EAAoBC,G,MACxC,MAAM,aAAEC,EAAe,GAAE,cAAEC,GAAkBF,EAAKG,UAElD,OAAkF,QAA3E,MAAIF,KAAiBC,GAAeE,QAAQC,GAASA,EAAKC,0BAAiB,eAAEC,QAAS,CACjG,C,yFCee,SAASC,EAKpBvB,GAEA,OACIwB,IAEA,MAAMC,EAEDC,IACD,MAAM,UAAEC,EAAS,qBAAEC,EAAoB,cAAEC,GAAkBH,EACrDI,GAAkC,IAAAC,QAAOH,GAa/C,OAXA,IAAAI,YAAU,MAE0C,IAA5CF,EAAgCG,UACP,IAAzBL,GAEAD,EAAU,CAAEO,OAAQL,QAAAA,EAAiB,CAAC,IAG1CC,EAAgCG,QAAUL,IAC3C,CAACA,EAAsBC,EAAeF,IAElC,gBAACH,EAAiB,iBAAKE,KAOlC,OAJAD,EAAmBU,YAAc,sBAC7BX,EAAkBW,aAAeX,EAAkBY,SAGhD,QAAWpC,EAAX,CAAmByB,GAElC,C,kJCtBA,MA6CMY,GAAkB,EAAAC,EAAA,IACpB,QAAoE,CAChEC,aAAc,CAACL,GAAUR,OAASc,qBAC9BA,EAAcN,IAElBO,iBAAkB,EAAGC,YAAWC,sBACrB,EAAAC,EAAA,GACHF,EAAUC,GAAmBA,EAAgBE,aAC7CF,GAGRG,iBAAkB,EAAGC,WAAUL,gBAC3B,SAAkCR,IAC9B,EAAAc,EAAA,GAAqC,CACjCD,WACAE,WAAYP,EAAUR,GAAUA,EAAOW,kBAdvD,EA5CA,EACAK,mBACAR,YACAS,4BACAC,YACAlB,SACAmB,gBACAC,YACA3E,iBACA4E,4BAEA,gBAACC,EAAA,EAAI,CAACC,aAAa,MACf,gBAACC,EAAA,EAAc,CAACJ,UAAWA,GACvB,gBAACK,EAAAC,EAAW,CACRR,UAAWA,EACXD,0BAA2BA,EAC3BN,YAAaX,EAAOW,YACpBI,WAAYP,EAAUR,EAAOW,aAC7BK,iBAAkBA,EAClBK,uBAAwBA,EACxBF,cAAeA,EACfQ,uBAAuB,IAE3B,uBAAKC,UAAU,gBACX,gBAACC,EAAA,GAAM,CACH/E,QAASL,EACTQ,QAAS4E,EAAA,GAAcC,WACvB,gBAACC,EAAA,EAAgB,CAAC5E,GAAG,0BAGzB,gBAAC0E,EAAA,GAAM,CACHG,SAAUZ,EACVjE,GAAG,wBACH8E,KAAK,SACLhF,QAAS4E,EAAA,GAAc3E,SAEvB,gBAAC6E,EAAA,EAAgB,CAAC5E,GAAG,uCAkDzC,EAtBoE,I,IAAA,OAChEG,EAAM,YACN4E,EAAW,eACXzF,GAAc,EACX0F,GAAgB,cAJ6C,2CAK9D,OACF,gBAACC,EAAA,EAAK,CACFxF,yBAAyB,gBACzBQ,OACI,gBAACiF,EAAA,EAAW,KACR,gBAACN,EAAA,EAAgB,CAAC5E,GAAG,iCAG7BG,OAAQA,EACR4E,YAAaA,EACbzF,eAAgBA,EAChBE,uBAAuB,GAEvB,gBAACwD,EAAe,iBAAKgC,EAAgB,CAAE1F,eAAgBA,O,qECnHhD,MAAM6F,WAAsCC,EAAA,EACvD,WAAAC,CAAYC,GAERC,MAAM,CACFxC,KAAM,8BACNyC,SAAS,EAAAC,EAAA,KAAqBC,UAAU,8CACxCC,OAAO,EAAAF,EAAA,KAAqBC,UACxB,sDAEJJ,UAGJ,OAAeM,KAAMT,GAA8BU,UACvD,ECbW,MAAMC,WAA8BV,EAAA,EAC/C,WAAAC,CAAYC,GAERC,MAAM,CACFxC,KAAM,qBACNyC,SAAS,EAAAC,EAAA,KAAqBC,UAAU,8BACxCJ,UAGJ,OAAeM,KAAME,GAAsBD,UAC/C,ECVJ,MAMA,IAAe,E,QAAA,IANqB,IAChC,uBAAKE,KAAK,OAAO3F,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAC9D,wBAAMC,EAAE,0Z,gBCQhB,MAkCA,GAlCqC,EAAGwF,kBAAiB1C,sBACrD,MAAM,QAAE2C,IAAY,SAEpB,OAAO,uBAAKxB,UAAU,sCAEbnB,EAcK,gCACE,gBAAC4C,GAAA,EAAuB,CAACC,QAAS7C,IAClC,qBACImB,UAAWwB,EAAU,WAAa,GAAE,YAC1B,wBACVG,KAAK,IACLzG,SAAS,EAAA0G,EAAA,GAAeL,IAExB,gBAAC,GAAQ,QArBf,gCACE,sBAAIvB,UAAWwB,EAAU,YAAc,IACnC,gBAACrB,EAAA,EAAgB,CAAC5E,GAAG,8DAEzB,qBACIyE,UAAWwB,EAAU,WAAa,GAAE,YAC1B,yBACVG,KAAK,IACLzG,SAAS,EAAA0G,EAAA,GAAeL,IAExB,gBAACpB,EAAA,EAAgB,CAAC5E,GAAG,mECtBhCsG,GAAwC,CACjDC,EACAC,EACAC,KAKgB,iD,MAChB,MAAMC,EAdC,IAAIC,IAc8CJ,EAbxCK,KAAKC,IAAe,MAAC,OAACA,EAAY7G,GAAsC,QAAlC,EAAA6G,EAAYC,8BAAsB,eAAE9G,QAe3F,IAAK,MAAM6G,KAAeL,EACtB,IAAKK,EAAYC,uBAAwB,CACrC,MAAMC,EAA2BL,EAAwBM,IAAIH,EAAY7G,IAEzE,GAAI+G,EAA0B,OAEpBN,EAAgCI,EAAY7G,GAAI+G,GAEtD,QACJ,CAEA,MAAME,EAAwD,QAApC,EAAAJ,EAAYK,gCAAwB,eAAEC,MAC3DC,GAAWA,EAAOC,gBAGnBJ,UAEMR,EAAgCI,EAAY7G,GAAIiH,EAAkBjH,IAEhF,CAER,ICqJA,GApKmC,EAC/B6G,cACA/C,4BACAwD,qBACArD,YACAsD,mBACAjE,kBACAkE,4BAEA,MAAOC,EAAuBC,IAA4B,IAAAC,WAAS,IAC5DC,EAA4BC,IAAiC,IAAAF,aAGhEG,eACIxC,MAAM,qBACFyC,EAAoB,YACpBC,EAAW,UACXC,EACAC,gBAAiBC,EACjBC,yBAA0B/E,IAGlCgF,iBAAiB,kBACbC,EAAiB,sBACjBC,EAAqB,gCACrB9B,KAEJ,SAEE1C,EAAYgE,KAA0B,IACtCS,EAAWR,IACXrH,EAASsH,IAEf,IAAKtH,IAAW6H,EACZ,OAAO,KAGX,MAAMC,GAA6B,EAAAvE,EAAA,GAAuBvD,EAAOQ,kBAE3DuH,EAAYF,EAASE,WAAa,KAEpCvH,kBAAkB,iBACd0C,IAEJlD,EAEEgI,EAAUH,EAASG,QAEnBC,EAA6BzC,IAAqB,iD,MACpD,KAAK,EAAA0C,EAAA,GAAe1C,EAAS9C,EAAU8C,EAAQ3C,cAC3C,OAAO+D,EAAiB,IAAIpC,IAGhC,GAAK0B,EAUL,IACI,MACIvB,MAAM,gBAAE4C,UACFI,EAAkB,CACxBtI,GAAI6G,EAAY7G,GAChBmG,UACA2C,gBAAiB3C,EACjBtE,UAAWgF,EAAYhF,UAAU+E,KAAI,EAAG5G,KAAI+I,eAAe,CAAGC,OAAQhJ,EAAI+I,iBAGxEvC,EAAsB0B,IAExB1B,GAAuBA,EAAoBvE,OAAS,UAC9CqE,GACuB,QAAzB,EAAA6B,WAAyB,QAAI,GAC7B3B,EACAC,GAGZ,CAAE,MAAOwC,GACDA,aAAiBC,OACjB3B,EAAiB,IAAIzB,GAAsBmD,GAEnD,MAhCIzB,SAAAA,EAAwB,CACpBrB,UACA2C,gBAAiB3C,EACjBtE,UAAW,IA8BvB,IAEMsH,EAAsB,KACxBzB,GAAyB,IA6B7B,OACI,gCACI,gBAAC0B,EAAA,EAAU,CACPH,MAAOrB,EACPpC,QACI,gCACI,gBAACZ,EAAA,EAAgB,CAAC5E,GAAG,6CAA8C,IACnE,gBAAC4E,EAAA,EAAgB,CAAC5E,GAAG,mCAG7BqJ,QAdkB,KAC1BxB,OAA8BrG,IActB8H,qBAAqB,IAEzB,gBAAC,EAAgB,CACbvF,UAAWA,EACXD,0BAA2BA,EAC3BwD,mBAAoBA,EACpBjE,UAAWA,EACXQ,iBAAkBA,EAClBK,uBAAwBuE,EACxBxE,UAAWA,EACX9D,OAAQsH,EACRnI,eAhDsB,KAC9BoI,GAAyB,IAgDjBvE,cA7CqBoG,IAAyC,iDACtE,MAAMpD,GAAU,EAAAqD,EAAA,GAAyBD,GAIzC,SAFMX,EAAoBzC,IAErBwC,EACD,UACUJ,EAAsBpC,EAChC,CAAE,MAAO8C,GACDA,aAAiBC,OACjBrB,EAA8BoB,EAEtC,CAGJvB,GAAyB,EAC7B,IA8BYpE,gBAAiBqF,EAAUrF,OAAkB9B,IAEhDmH,EACK,gBAAC,GAA4B,CAC3B3C,gBAAiBmD,EACjB7F,gBAAiBA,IAEnB,gBAACmG,EAAAlF,EAAa,CACZmE,UAAWA,EACXgB,gBAAiBd,EACjB5C,gBAAiBmD,EACjBQ,gBAAiB,gBAAC/E,EAAA,EAAgB,CAAC5E,GAAG,qCACtCsD,gBAAiBA,EACjBsG,uBAAqB,EACrB9E,KAAM+E,EAAAtF,EAAYuF,a,mGC9K/B,MAAMC,GAAsC,IAE3C,gBAACC,GAAA,EAAc,CACXC,UAAU,cACVC,QACI,gBAACC,GAAA,EAAO,KACJ,gBAACvF,EAAA,EAAgB,CACb5E,GAAG,wDAKf,wBAAMyE,UAAU,qBAAoB,YAAW,sBAC3C,gBAAC2F,GAAA,EAAQ,QCoBzB,GAzB2B,EAAGC,gBAAeC,qBACzC,MAAM,QAAErE,IAAY,SAEpB,OACI,uBAAKxB,UAAU,wBACX,sBAAIA,UAAWwB,EAAU,YAAc,IACnC,gBAACrB,EAAA,EAAgB,CAACU,KAAM,CAAEiF,MAAOF,EAAcG,qBAAuBxK,GAAG,kDACxEqK,EAAcI,eACX,gBAACV,GAAgB,OAGzB,sBAAItF,UAAU,6BACT4F,EAAcxI,UAAU+E,KAAI7E,GACzB,sBAAI2I,IAAK3I,EAAK/B,KACT,QAAkB+B,EAAMkE,GACzB,oCAAiB,UAAUlE,EAAK/B,GAAG2K,oBAAqBhL,QAAS,IAAM2K,EAAevI,IAClF,gBAAC6I,EAAA,EAAS,a,4BChBtC,MA6CA,GA7CuE,EAAG7I,OAAMkH,Y,MAC5E,MAAM4B,GAAe,WACf,QAAE5E,IAAY,SAEpB,OACI,0BACI,sBAAIxB,UAAU,wCACV,0BAAQA,UAAU,gCACb1C,EAAK+I,UAAY,uBAAKC,IAAKhJ,EAAKgB,KAAMiI,IAAKjJ,EAAK+I,YAErD,2BACI,qBAAGrG,UAAW,IAAW,6BACrB,CAAE,eAAgBwB,KACjBlE,EAAKgB,MAEG,QAAZ,EAAAhB,EAAKkJ,eAAO,a,EAAErE,KAAIQ,GACf,qBAAG3C,UAAW,IAAW,+BACrB,CAAE,kBAAmBwB,IACrByE,IAAKtD,EAAO8D,QACX9D,EAAOrE,K,KAAQqE,EAAO+D,YAKrCN,GAAgB,sBAAIpG,UAAWwB,EAAU,eAAiB,IAAKlE,EAAKgH,UACtE,sBAAItE,UAAWwB,EAAU,eAAiB,IACrC4E,GAAgB,gBAACjG,EAAA,EAAgB,CAACU,KAAM,CAAEiF,MAAOxI,EAAKgH,UAAY/I,GAAG,oDACtE,gBAACoL,GAAA,EAAS,CACNC,oBAAqBpC,EAAQ,oBAAsB,GACnDqC,MAAO,EAAGC,WAAY,gBAACC,GAAA,EAAS,iBACxBD,EAAK,cACG,eAAexJ,EAAKgB,OAChC8B,SAA4B,IAAlB9C,EAAKgH,SACf/I,GAAIuL,EAAMxI,KACV0I,IAAK,EACLxF,QAASA,EACTnB,KAAK,YAET/B,KAAMhB,EAAK/B,GAAG2K,gBCXlC,GA1BmF,EAAGe,QAAOC,iBACzF,MAAMd,GAAe,WACf,QAAE5E,IAAY,SAEpB,OACI,yBAAOxB,UAAU,sCACb,6BACI,0BACI,sBAAIA,UAAWwB,EAAU,cAAgB,IAAI,gBAACrB,EAAA,EAAgB,CAAC5E,GAAG,+DAChE6K,GAAgB,sBAAIpG,UAAWwB,EAAU,cAAgB,IAAI,gBAACrB,EAAA,EAAgB,CAAC5E,GAAG,0EACpF,sBAAIyE,UAAWwB,EAAU,cAAgB,IAAI,gBAACrB,EAAA,EAAgB,CAAC5E,GAAG,oEAG1E,6BACK0L,EAAM9E,KAAI7E,GACP,gBAAC,GAAkB,CACfkH,MAAO0C,EAAW5J,EAAK/B,GAAG2K,YAC1B5I,KAAMA,EACN2I,IAAK3I,EAAK/B,UCjClC,IAAY4L,IAAZ,SAAYA,GACR,2BACA,yBACA,yCACA,sBACH,CALD,CAAYA,KAAAA,GAAY,KCkCxB,MAyKA,IAAe,EAAA3I,EAAA,GACXf,EAA8F,CAC1FgB,aAAc,CAACL,GAAUR,OAASwJ,uBAM9BA,EAL6BC,OAAOC,KAAKlJ,GAAQf,QAAO4I,GAAO7H,EAAO6H,GAAO,IAAG9D,KAAKoF,IAAuB,CACxGhD,OAAQgD,EACRjD,SAAUlG,EAAOmJ,SAKzB5I,iBAAkB,EAAG6I,sBACjB,MAAMpJ,EAAuC,CAAC,EAM9C,OAJAoJ,EAAgBpK,UAAUqK,SAAQnK,IAC9Bc,EAAOd,EAAK/B,GAAG2K,YAAc,KAG1B9H,GAEXsJ,oBAAoB,EACpB1I,iBAAkB,EAAGC,WAAUuI,sBAC3B,MAAMG,EAAoBrK,IACtB,MAAMsK,GAAa,UACdC,SAAS5I,EAASgC,UAAU,qCAC5B6G,QAAQ7I,EAASgC,UAAU,oCAC3B+F,IAAI,EAAG/H,EAASgC,UAAU,gCAC1B8G,IAAIzK,EAAKgH,SAAUrF,EAASgC,UAAU,gCAE3C,OAAI3D,EAAK+C,OAAS8G,GAAaa,OACpBJ,EACFK,MAAM,CAAC,EAAG3K,EAAKgH,UAAWrF,EAASgC,UAAU,wCAG/C2G,GAGLM,EAAeb,OAAOc,YACxBX,EAAgBpK,UAAU+E,KAAK7E,GAAS,CAACA,EAAK/B,GAAG2K,WAAYyB,EAAiBrK,OAGlF,OAAO,UAAS8K,MAAMF,IAE1BG,gBAAgB,EAChBC,kBAAkB,GA1CtB7K,EA1K+G,EAC/G8K,oBACA7M,SACAb,iBACA6G,UACAkE,gBACA4B,kBACAgB,YACApK,SACAqK,QACAC,aACAC,SACA9C,iBACArG,gBAGA,MAAM,QAAEgC,IAAY,SAEdoH,GAAkC,IAAAC,UAAQ,KAC5C,MAAMC,EAAiBtB,EAAgBzB,oBAEvC,GAAI3H,GAAUqK,EAAO,CACjB,MAAMM,EAAgB1B,OAAOC,KAAKlJ,GAAQ4K,QAAO,CAACC,EAAKhD,KAC/C7H,EAAO6H,GAAO,IACdgD,GAAO7K,EAAO6H,IAGXgD,IACR,GAEH,OAAO,gBAAC9I,EAAA,EAAgB,CAACU,KAAM,CAAEiF,MAAO,GAAGiD,KAAiBD,KAAoBvN,GAAG,iDACvF,CAEA,OAAO,gBAAC4E,EAAA,EAAgB,CAACU,KAAM,CAAEiF,MAAOgD,GAAkBvN,GAAG,sDAC9D,CAAC6C,IAoBE8I,GAAa,IAAA2B,UAAQ,IACLxB,OAAOC,KAAKqB,GAEbK,QAAO,CAACC,EAAehD,KACpC,MAAMzB,EAAQmE,EAAO1C,GAMrB,OAJIzB,GACAyE,EAAIC,KAAK1E,GAGN2E,MAAMC,KAAK,IAAIC,IAAIJ,MAC3B,KACJ,CAACN,IAEEW,IAAqB1D,GAAiBA,EAAcxI,UAAUI,OAAS,KAAOqI,EAC9E0D,IAAuB/B,GAAmBA,EAAgBpK,UAAUI,OAAS,EAE7EgM,EACF,gCACI,gBAACvJ,EAAA,GAAM,CACHD,UAAWwB,EAAU,cAAgB,GACrCpB,SAAUZ,EACVtE,QAASL,EACTQ,QAAS,MAAc6E,WAEvB,gBAACC,EAAA,EAAgB,CAAC5E,GAAG,kDAEzB,gBAAC0E,EAAA,GAAM,CACHD,UAAWwB,EAAU,cAAgB,GACrCpB,UAAWkJ,IAAqBb,EAChCjJ,UAAWA,EACXtE,QAASwN,EACTrI,KAAK,SACLhF,QAAS,MAAcC,SAEtBgO,EACK,gBAACnJ,EAAA,EAAgB,CAAC5E,GAAG,+CACrB,gBAAC4E,EAAA,EAAgB,CAAC5E,GAAG,qDAMvC,OACI,gBAACiF,EAAA,EAAK,CACFxF,yBAAyB,uBACzBC,OAAQuO,EACRhO,OACI,gCACI,gBAACiF,EAAA,EAAW,CAACmG,oBAAqBpF,EAAU,SAAW,IACnD,gBAACrB,EAAA,EAAgB,CAACU,KAAM,CAAE0H,qBAAqBhN,GAAG,sDAEtD,sBAAIyE,UAAWwB,EAAU,cAAgB,KAAK,QAAkBE,KAGxEhG,OAAQA,EACRb,eAAgBA,GAEhB,gBAAC6E,EAAA,EAAI,KACAwH,EAAW1J,OAAS,GACjB,uBAAKwC,UAAU,eACVkH,EAAW/E,KAAI,CAACqC,EAAOiF,IACpB,gBAACC,EAAA5J,EAAK,CAACmG,IAAKwD,EAAOpJ,KAAMqJ,EAAA,EAAUjF,OAAQD,MAItDgD,EAAgBmC,iBACb,gBAACD,EAAA5J,EAAK,CAACO,KAAMqJ,EAAA,EAAUE,MACnB,gBAACzJ,EAAA,EAAgB,CAAC5E,GAAG,4DAG5B+N,GACG,gBAAC,GAAkB,CAAC1D,cAAeA,EAAeC,eAAgBA,IAErE0D,EACK,gCACE,uBAAKvJ,UAAU,wCACX,qBAAGA,UAAWwB,EAAU,eAAiB,IACpCoH,EACApB,EAAgBxB,eACb,gBAACV,GAAgB,OAIzB,uBAAKtF,UAAU,gBACX,qBACIA,UAAWwB,EAAU,WAAa,GAAE,YAC1B,yBACVG,KAAK,IACLzG,SAAS,EAAA0G,EAAA,IAlGlB,KACnB,MAAMxD,EAAuC,CAAC,EAE9CoJ,EAAgBpK,UAAUqK,SAAQnK,IAC9Bc,EAAOd,EAAK/B,GAAG2K,YAAc,KAEjCsC,EAAUpK,OA8FkB,gBAAC+B,EAAA,EAAgB,CAAC5E,GAAG,qDAEzB,qBACIyE,UAAWwB,EAAU,WAAa,GAAE,YAC1B,4BACVG,KAAK,IACLzG,SAAS,EAAA0G,EAAA,IAnHjB,KACpB,MAAMxD,EAAuC,CAAC,EAE9CoJ,EAAgBpK,UAAUqK,SAAQnK,IAC9Bc,EAAOd,EAAK/B,GAAG2K,YAAc5I,EAAKgH,YAEtCkE,EAAUpK,OA+GkB,gBAAC+B,EAAA,EAAgB,CAAC5E,GAAG,mEAIjC,gBAAC,GAAwB,CACrB2L,WAAYyB,EACZ1B,MAAOO,EAAgBpK,aAG7B,WClMP,MAAMyM,WAA0BlJ,EAAA,EAC3C,WAAAC,CAAYC,GAERC,MAAM,CACFxC,KAAM,uBACNyC,SAAS,EAAAC,EAAA,KAAqBC,UAAU,gCACxCJ,UAGJ,OAAeM,KAAM0I,GAAkBzI,UAC3C,ECVG,MCFD0I,GAAgB1L,GACb2L,KAAKC,mBAAmB5L,EAAO6L,KAAK,OCkB7C,MAAMC,GAAgCjD,GAC3BA,EAAM+B,QAAO,CAACmB,EAAO7M,IAAS6M,EAAQ7M,EAAKgH,UAAU,GAG1D8F,GAAe,CACjBnD,EACAoD,KAEA,MAAMC,EAAkB,IAAIjB,IAE5B,IAAK,MAAM/L,KAAQ2J,EAAO,CACxB,MAAMsD,EAAOF,EAAY9H,IAAIjF,EAAK/B,GAAG2K,YAErC,GAAKqE,EAAL,CAEA,GAAID,EAAgBE,IAAID,GACtB,OAAO,EAGTD,EAAgBG,IAAIF,EAND,CAOrB,CAEA,OAAO,GAGX,SAASG,GACLtN,EACAuN,G,MAKA,MAAMC,EAAqB,IAAI1I,IACzB2I,EAAkB,IAAI3I,IAEtBmI,EAAc,IAAInI,IAElB4I,EAAkD,GAExD1N,EAAUD,cAAcsK,SAASnK,IAC7BsN,EAAmBG,IAAIzN,EAAK/B,GAAG2K,WAAY,OAAF,wBAAO5I,GAAI,CAAE+C,KAAM8G,GAAa6D,YACzEX,EAAYU,IAAIzN,EAAK/B,GAAG2K,WDvCA,CAAC5I,IAC/B,OAAOwM,GAAa,CAClBxM,EAAK2N,UAAU/E,WACf5I,EAAK4N,UAAUhF,WACf5I,EAAK6N,KArB2B3E,EAsBLlJ,EAAKkJ,QArB7BA,EAIEsD,GACLtD,EAAQrE,KAAKQ,GACXmH,GAAa,CACXnH,EAAOrE,KACPqE,EAAO8D,OAAOP,WACdvD,EAAO+D,MACP/D,EAAOyI,QAAUzI,EAAOyI,QAAQlF,WAAa,QAT1C,MAFwB,IAACM,GCwDQ6E,CAAiB/N,OAEpC,QAArB,EAAAF,EAAUkO,mBAAW,SAAE7D,SAASnK,GAC5BsN,EAAmBG,IAAIzN,EAAK/B,GAAI,OAAF,wBAAO+B,GAAI,CAAE+C,KAAM8G,GAAaa,YAElE5K,EAAUF,aAAauK,SAASnK,GAC5BuN,EAAgBE,IAAIzN,EAAK/B,GAAG2K,WAAY,OAAF,wBAAO5I,GAAI,CAAE+C,KAAM8G,GAAaoE,aAG1EZ,EAAalD,SAAQ,CAACrF,EAAaqH,KAC/B,MAAM+B,EAAyD,GAE/DpJ,EAAYqJ,YAAYhE,SAASlD,IAC7B,MAAMjH,EAAOsN,EAAmBrI,IAAIgC,GAEhCjH,IACAkO,EAAqBtC,KAAK5L,GAC1BsN,EAAmBc,OAAOnH,OAIlCuG,EAAgB5B,KAAK,OAAD,wBACb9G,GAAW,CACdmG,kBAAmBkB,EAAQ,EAC3BE,iBAAiB,EACjB3D,cAAeoE,GAAaoB,EAAsBnB,GAClDtE,oBAAqBmE,GAA6BsB,GAClDpO,UAAWoO,QAInB,MAAMG,EAAsBxC,MAAMC,KAAKwB,EAAmBxM,UAEpDoJ,EAA0C,CAC5CpK,UAAWuO,EACXhC,gBAAiBkB,EAAgB1P,KAAO,EACxC6K,cAAeoE,GAAauB,EAAqBtB,GACjDtE,oBAAqBmE,GAA6ByB,IAGtD,MAAO,CAAEb,kBAAiBtD,kBAC9B,CAEA,MAAMoE,GAA0E,CAC5EpE,gBAAiB,CACbpK,UAAW,GACXuM,iBAAiB,EACjB3D,eAAe,EACfD,oBAAqB,GAEzB+E,gBAAiB,IAGRe,GAAmC,KAC5C,MAAQxI,eACJxC,MAAM,YAAEiL,MAER,SAEE7P,EAAW6P,IAEjB,IAAK7P,EACD,OAAO2P,GAGX,MACI3O,MAAM,UAAEG,GAAW,aACnBuN,GACA1O,EAEE8P,EAvHV,SAA4B3O,GACxB,OAAO,OAAP,wBACOA,GAAS,CACZD,cAAeC,EAAUD,cAAcE,QAAQC,GAAkC,iBAAlBA,EAAK0O,WACpE9O,aAAcE,EAAUF,aAAaG,QAAQC,GAAkC,iBAAlBA,EAAK0O,YAE1E,CAiHgCC,CAAmB7O,IAEzC,gBAAE0N,EAAe,gBAAEtD,GACrBkD,GAAqBqB,EAAqBpB,GAE9C,MAAO,CACHnD,kBACAsD,oBCOR,GAvHyE,EAAGvC,oBAAmBnG,cAAaU,mBAAkBtD,gBAC1H,MAAO0M,EAA0BC,IAA+B,IAAAjJ,WAAS,IAClEkJ,EAAWC,IAAgB,IAAAnJ,WAAS,IAErC,gBAAEsE,GAAoBqE,MACpBjI,iBAAmB0I,qBAAsBC,KAAiB,SAC5DC,EH7BuB,MAC7B,MACI5I,iBAAiB,mBAAE6I,EAAkB,kBAAEC,KACvC,SAyBJ,MApBmB,CAAOC,EAAkDpI,EAAgBnC,KAA6B,iD,MACrH,IAAIwK,EAA+CxK,EAAY7G,GAE/D,GAAI6G,EAAYqJ,YAAYjO,OAAS,EAAG,CACpC,MAEMqP,SAFyBJ,EAAmB,CAACE,KAEN9L,KAAK4C,kBAElDmJ,EAEC,QAF0B,EAAAC,aAAmB,EAAnBA,EAAqBnK,MAAMoK,GAClDA,EAAErB,YAAY/I,MAAM6E,GAAeA,IAAehD,aACrD,eAAEhJ,EACP,CAEA,IAAKqR,EACD,MAAM,IAAInI,MAAM,wCAGpBiI,EAAkBE,EACtB,KGGmBG,IACb,QAAEvL,IAAY,SAEdwL,EAA2B,KAC7Bb,GAA6BD,IA4C3B9F,GAAe,UAEf6G,EAAa7K,EAAY2D,oBAE/B,OACI,2BACI,gBAAC,GAAkB,CACfrE,QAASU,EAAYiC,gBACrBuB,cAAexD,EACfmG,kBAAmBA,EACnB/I,UAAWA,EACX9D,OAAQwQ,EACR9E,gBArDqBoE,IAAgD,iDAC7E,UACUe,EAAW,CACb7K,QAASU,EAAYV,QACrBtE,UAAWoO,GAGnB,CAAE,MAAOhH,GACDA,aAAiBC,OACjB3B,EAAiB,IAAIzB,GAAsBmD,GAEnD,C,QACIwI,GACJ,CACJ,IAwCYnS,eAAgBmS,EAChBnH,eAvCuBqH,IAAiD,iDAChF,IACI,MAAMP,EAAqB,CACvBjL,QAASU,EAAYV,QACrB2C,gBAAiBjC,EAAYiC,gBAC7BjH,UAAW,CACP,CACIkH,SAAU4I,EAAa5I,SACvBC,OAAQ2I,EAAa3R,YAK3BiR,EAAWG,EAAoBO,EAAa3R,GAAG2K,WAAY9D,EACrE,CAAE,MAAOoC,GACDA,aAAiBC,OACjB3B,EAAiB,IAAI+G,GAAkBrF,GAE/C,CACJ,IAqBYgD,gBAAiBA,IAErB,uBAAKxH,UAAU,gCACX,2BACI,sBAAIA,UAAWwB,EAAU,YAAc,IACnC,gBAACrB,EAAA,EAAgB,CAACU,KAAM,CAAEiF,MAAOmH,GAAc1R,GAAG,mDAGrD6G,EAAY4D,eACT,gBAACV,GAAgB,MAGrB,qBACItF,UAAW,IAAW,sBAClB,CAAE,WAAYwB,IACjB,YACS,sBACVG,KAAK,IACLzG,SAAS,EAAA0G,EAAA,IArCL,KACpByK,GAAcD,OAsCGA,EACG,iCACMhG,GAAgB,gBAACjG,EAAA,EAAgB,CAAC5E,GAAG,mDACvC,gBAAC4R,GAAA,EAAa,OAGlB,iCACM/G,GAAgB,gBAACjG,EAAA,EAAgB,CAAC5E,GAAG,mDACvC,gBAAC6R,GAAA,EAAe,SAKhC,qBACIpN,UAAWwB,EAAU,WAAa,GAAE,YAC1B,0BACVG,KAAK,IACLzG,SAAS,EAAA0G,EAAA,GAAeoL,IAExB,gBAAC7M,EAAA,EAAgB,CAAC5E,GAAG,sDAG5B6Q,EACK,gBAACiB,GAAA,EAAyB,CAACjQ,UAAWgF,EAAYhF,YAClD,O,4BC9HX,MAAMkQ,GAET,EAAGC,gBAAeC,2BAA0BC,iBAAgBC,mBAC5D,MAAM,QAAElM,IAAY,SAEdmM,EACF,wBAAM3N,UAAWwB,EAAU,eAAiB,IACvC,GAAGiM,EAAeG,iBACnB,gBAACC,GAAA,EAAe,CAACC,OAAQL,EAAeM,QAQhD,OACI,sBAAI/N,UAAU,wBACV,gBAACgO,GAAA,EAAU,CACPC,QAAST,IAA6BC,EAAelS,GACrDA,GAAI,kBAAkBgS,KAAiBE,EAAelS,KACtD0K,IAAK,OAAOsH,KAAiBE,EAAelS,KAC5CoS,MAAOA,EACPrP,KAAM,GAAGiP,mBACTrS,QAZa,KACrBwS,EAAaH,EAAeE,EAAelS,KAYnC2S,UAAQ,EACRxH,MAAO+G,EAAelS,OCHtC,IAAe,IAAA4S,OAtBwE,EACnFZ,gBACA/N,YACA4O,kBACAZ,2BACAa,sBAGI,gBAACzO,EAAA,EAAc,CAACJ,UAAWA,GACtB4O,EAAgBjM,KAAKsL,GAClB,gBAACH,GAA4B,CACzBC,cAAeA,EACfG,aAAcW,EACdpI,IAAKwH,EAAelS,GACpBiS,yBAA0BA,EAC1BC,eAAgBA,SCxBrB,SAASa,GACpBrR,EACA0N,GAEA,OAAO,IAAA3B,QACF/L,GAAQA,EAAKG,UAAUD,eAAkB,IAC1C,CAACoR,EAAQjR,EAAMkR,KACVlR,EAAKC,mBAAoB,IAAAkR,OAAMnR,EAAK0O,UAC/BuC,EAAOG,UAMzB,SACIpR,EACAqN,EACAgE,GAEA,IAAIC,EAA8B,GAClC,MAAMxM,ECvBK,SACXuI,EACApG,GAEA,OAAO,IAAA7B,MAAKiI,GAAevI,IAAgB,IAAAvF,UAASuF,EAAYqJ,YAAalH,IACjF,CDkBwBsK,CAAgBlE,EAAcrN,EAAK/B,IAEvD,IAAK,IAAIiT,EAAI,EAAGA,EAAIlR,EAAKgH,SAAUkK,IAC/BI,EAAaA,EAAWF,OAAO,OAAD,wBACvBpR,GAAI,CACP2I,IAAK,GAAG3I,EAAK4N,aAAa5N,EAAK2N,aAAa0D,KAAiBH,IAC7DpM,cACAkC,SAAU,KAIlB,OAAOsK,CACX,CAxBmCE,CAAUxR,EAAMqN,EAAc6D,IAC/CD,GACV,GAER,C,uCEhBe,SAASQ,GACpBtM,GAEA,GAAKA,EAIL,OAAOA,EAAyBC,MAC5B,EAAGE,mBAA4CA,GAEvD,C,gECMA,MAAMoM,GAAyE,EAC3EzB,gBACA0B,sBACAzB,2BACAC,qBAEA,MAAMyB,EAAa1B,IAA6BC,EAAelS,GAEzD4T,GAAc,IAAAC,cAChB,IACI,uBAAKpP,UAAU,uBACX,gBAACqP,GAAA,EAAoB,CAACC,8BAA8B,EAAMC,OAAQ9B,IAChEyB,IAAeD,GACb,gBAACO,GAAA,EAAS,CAACC,OAAM,sCAI7B,CAACP,EAAYD,EAAqBxB,IAGtC,OACI,gBAACiC,GAAA,EAAa,CACVC,OAAQ,uBAAuBpC,KAAiBE,EAAelS,KAC/DoS,MAAOwB,EACPzI,MAAO+G,EAAelS,MAyDlC,IAAe,IAAA4S,OA1CyD,EACpEZ,gBACAqC,YACApQ,YACAyP,sBACAb,kBAAkB,IAClBZ,2BACAa,uBAEA,MAAMX,GAAe,IAAA0B,cAChB1I,IACG2H,EAAiBd,EAAe7G,KAEpC,CAAC6G,EAAec,IAGpB,OAAKD,EAAgB5Q,OAKjB,gBAACoC,EAAA,EAAc,CAACJ,UAAWA,GACvB,gBAACqQ,GAAA,EAAS,aACI,SACVC,sBAAuBtC,EACvBlP,KAAMsR,EACNG,SAAUrC,GAETU,EAAgBjM,KAAKsL,GAClB,gBAACuB,GAAsB,CACnBzB,cAAeA,EACf0B,oBAAqBA,EACrBhJ,IAAKwH,EAAelS,GACpBiS,yBAA0BA,EAC1BC,eAAgBA,QAjBzB,QCnDTuC,GAAuB,EAAGrF,mBAC5B,MAAMsF,EAA8C,CAAC,EAQrD,OANCtF,GAAgB,IAAIlD,SAASrF,IAC1B6N,EAAkB7N,EAAY7G,IAAM6G,EAAYC,uBAC1CD,EAAYC,uBAAuB9G,GACnC,MAGH,CAAE0U,sBAGb,MAAMC,WAA4B,EAAAC,cAAlC,c,oBAsGY,KAAAC,6BAAmE,IAAoB,2CAAb,KAAEvP,IAChF,MAAM,qBAAEwP,EAAoB,cAAE9Q,GAAkB4B,KAAKvD,MAE/CwE,GAAevB,EAAK4C,mBAAqB,IAAIf,MAC/C,EAAGL,yBAAwBI,yBAA0B2L,MAChD/L,GAA0B+L,IAGnC,IAAKhM,IAAgBA,EAAYK,yBAC7B,OAGJ,MAAM,yBAAEA,EAAwB,GAAElH,GAAO6G,EACnCI,EAAoBuM,GAA6BtM,GACjD6N,EACkC,IAApC7N,EAAyBjF,QAAgBiF,EAAyB,GAChE8N,EAAwB/N,GAAqB8N,EAE9CC,UAICF,EAAqB9U,EAAIgV,EAAsBhV,IACrDgE,EAAc,qBAAqBhE,IAAMgV,EAAsBhV,IACnE,GA+BJ,CAxJI,iBAAAiV,GACI,MAAM,wBAAEC,GAA4BtP,KAAKvD,MAEzCuD,KAAKuP,YAAcD,EAAwBtP,KAAKiP,6BACpD,CAEA,kBAAAO,EAAmB,4BAAEC,IACjB,MAAM,iBACFC,EAAgB,aAChBlG,EAAY,0BACZmG,EACAF,4BAA6BG,EAA8B,UAC3DvI,GACArH,KAAKvD,OAEL+M,aAAY,EAAZA,EAAcnN,SAAUsT,GACxBD,EAAiBG,sBAGjBD,IAAmCH,GACnCpI,EAAUwH,GAAqB7O,KAAKvD,OAE5C,CAEA,oBAAAqT,GACQ9P,KAAKuP,cACLvP,KAAKuP,cACLvP,KAAKuP,iBAAc3T,EAE3B,CAEA,MAAAmU,GACI,MAAM,aACFvG,EAAY,oBACZsE,EAAmB,qBACnBoB,EAAoB,UACpB7Q,EAAS,0BACTsR,EAAyB,uBACzBK,EAAsB,SACtBC,GACAjQ,KAAKvD,MAET,OAAK+M,aAAY,EAAZA,EAAcnN,SAAWsT,EAqB1B,gCACKnG,EAAaxI,KAAKC,IAAgB,OAC/B,uBAAKpC,UAAU,0CAA0CiG,IAAK7D,EAAY7G,IACrE0T,GAAuB9N,KAAKkQ,kBAAkBjP,GAE/C,gBAAC,GAAmB,CAChBmL,cAAenL,EAAY7G,GAC3BqU,WAoFDrC,EApF8BnL,EAAY7G,GAqF1D,qBAAqBgS,KApFJ/N,UAAWA,EAAU4C,EAAY7G,IACjC0T,oBAAqBA,EACrBZ,iBAAkBgC,EAClB7C,yBACIpL,EAAYC,wBACZD,EAAYC,uBAAuB9G,GAEvC6S,gBAAiBhM,EAAYK,6BAG9BL,EAAYK,2BACVL,EAAYK,yBAAyBjF,SACtC,gBAAC8T,GAAA,EAAiB,CACd1K,oBAAoB,2BACpBpH,UAAWA,EAAU4C,EAAY7G,IACjCgW,KAAM,GAELpQ,KAAKqQ,wBAAwBL,KAkE9D,IAA2B5D,MA9GX,gBAAC+D,GAAA,EAAiB,CACd1K,oBAAoB,2BACpBpH,UAAWA,IACX+R,KAAM,GAELpQ,KAAKqQ,wBACF,gBAACrR,EAAA,EAAgB,CACb5E,GACI6V,GAAYnC,EACN,wCACA,0CAyClC,CA4BQ,uBAAAuC,CAAwBzQ,GAC5B,OACI,uBAAKf,UAAU,mDACX,iCACc,SACVA,UAAU,iEACVvE,KAAK,SAEJsF,GAIjB,CAEQ,iBAAAsQ,CAAkBjP,GACtB,MAAM,KAAEnF,GAASkE,KAAKvD,MAEtB,OACI,uBAAKoC,UAAU,qBACX,8BACI,gBAACG,EAAA,EAAgB,CAAC5E,GAAG,uCAGzB,gBAACkW,GAAA,EAAa,CAAC/P,QAASU,EAAYiC,gBAAiBhE,KAAM+E,EAAAtF,EAAYuF,WAEvE,gBAACqM,GAAA,EAAyB,CAACzU,KAAMA,EAAMmF,YAAaA,IAGhE,EAaJ,UAAe,EAAAuP,GAAA,GACXlU,EAAwE,CACpEgB,aAAc,EAAA3D,KACd6D,iBAAkBqR,IAFtBvS,CAGGyS,KCjLD0B,IAAkC,IAAAC,iBACpC,EAAGjO,qBAA4CA,EAAgBkO,YAC9DA,GAAeC,GACLD,EAAUC,GAAY,EAAGlR,UAAWA,EAAK4C,sBAI3CuO,IAAoB,IAAAH,iBAC7B,CAACI,EAAsBC,IAAgCA,IACvD,EAAGC,cAAkCA,EAASC,2BAC9C,EAAGD,cAAkCA,EAASE,4BAC9C,EAAGF,cAAkCA,EAASG,wBAC9C,EAAGH,cAAkCA,EAASI,yBAC9C,CACIL,EACAE,EACAC,EACAC,EACAC,IAEQhF,GAEA2E,GACAE,KACAC,EAA0B9E,IAC1B+E,EAAsB/E,IACtBgF,MAsDhB,UAAe,EAAAC,EAAA,IArCR,UACH,gBAAE5O,EAAe,cAAEP,GACnBzF,GAEA,MACIiD,MAAM,QAAE4R,EAAO,gBAAEhP,EAAe,UAAED,EAAS,YAAED,EAAW,YAAEuI,GAC1DqG,UAAU,0BAAEE,IACZhP,EAEEU,EAAWR,IACXtG,EAAOwV,IACPvW,EAASsH,IACTvH,EAAW6P,IAEjB,KAAK5P,GAAWD,GAAa8H,GAAa9G,GACtC,OAAO,KAGX,MAAM0N,EA7Be,EAAC1N,EAAYyV,KAClC,GAAIA,EAAqBlV,OAAS,EAC9B,OAAOkV,EAGX,MAAMC,EAAiBrE,GAAsBrR,EAAMyV,GAC7CE,GAAoB,IAAAC,OAAK,IAAA1Q,KAAIwQ,EAAgB,mBAEnD,OAAO,IAAAG,QAAOJ,GAAuBtQ,GAAgBwQ,EAAkBG,QAAQ3Q,EAAY7G,OAqBtEyX,CAAiB/V,EAAMwG,KAAqB,IAC3D2N,EAAWpV,EAAoBC,EAAUC,IACzC,2BAAE+W,GAA+B/W,EAAOQ,iBAE9C,MAAO,CACHO,OACA0N,eACAwG,uBAAwB8B,EACxBzT,UAAWwS,GAAkB3O,EAAezF,EAAMsU,mBAClDG,4BACAjB,WACAf,qBAAsBzM,EAAgB5B,gCACtCyO,wBAAyBmB,GAAgC,CACrDhO,kBACAP,kBAGZ,GAEA,CAAkD,IC7FrC6P,GAAuB,EAChC9Q,cACA5C,YACA2T,8BACAF,iCAEA,MAAM,gBAAErP,EAAe,cAAEP,IAAkB,UACrC,QAAE7B,IAAY,SAMd4R,EAAmBpB,GAAkB3O,EAAe7D,EAAjCwS,CAA4C5P,EAAY7G,IAEjF,OACI,2BACI,sBAAIyE,UAAW,IAAW,yBACtB,CAAE,YAAawB,KAEf,gBAACrB,EAAA,EAAgB,CAAC5E,GAAG,sCAEtB6G,EAAYK,2BACVL,EAAYK,yBAAyBjF,SAClC,gBAACkM,EAAA5J,EAAK,CAACO,KAAMqJ,EAAA,EAAUjF,OAAQwO,GAEtCI,QAAQjR,EAAYK,2BACjBL,EAAYK,0BACR,gBAAC6Q,GAA0B,CACvB/F,cAAenL,EAAY7G,GAC3BiE,UAAW4T,EACX/E,iBAtBS,CAAOd,EAAuBgG,KAA6B,uDAC9E3P,EAAgB5B,gCAAgCuL,EAAegG,GACrEJ,GACJ,IAoBoB3F,yBACIpL,EAAYC,wBACZD,EAAYC,uBAAuB9G,GAEvC6S,gBAAiBhM,EAAYK,6BC8BrD,GA1DyE,EACrEL,cACAmG,oBACAlJ,4BACAwD,qBACArD,YACAyT,6BACAnQ,mBACAqQ,kCAGA,MAAQvP,iBAAiB,kBAAE8I,KAAwB,UAC7C,QAAElL,IAAY,SAOpB,OACI,uBAAKxB,UAAU,yBACX,uBAAKA,UAAW,IAAW,qBAAsB,CAAE,aAAcwB,KAC7D,0BACI,gBAACrB,EAAA,EAAgB,CAACU,KAAM,CAAE0H,qBAAqBhN,GAAG,sDAEtD,qBACIyE,UAAU,qBAAoB,YACpB,4BACV2B,KAAK,IACLzG,SAAS,EAAA0G,EAAA,IAfL,KAAY,uDACtB8K,EAAkBtK,EAAY7G,IACpC4X,GACJ,OAcgB,gBAAChN,EAAA,EAAS,CAAChL,KAAM,IAASC,UAGlC,gBAAC,GAA0B,CACvBgH,YAAaA,EACb/C,0BAA2BA,EAC3BwD,mBAAoBA,EACpBrD,UAAWA,EACXsD,iBAAkBA,EAClBjE,gBAAiBuD,EAAYiC,kBAEjC,gBAAC,GAAmB,CAChBjC,YAAaA,EACbmG,kBAAmBA,EACnB/I,UAAWA,EACXsD,iBAAkBA,IAEtB,gBAACoQ,GAAoB,CACjB9Q,YAAaA,EACb5C,UAAWA,EACX2T,4BAA6BA,EAC7BF,2BAA4BA,M,eC3E7B,SAASO,GAA8B7I,GAClD,QAAKA,EAAanN,SAIX,IAAAiW,OACH9I,GACAvI,I,MACI,MAAiD,YAAX,QAAlC,EAAAA,EAAYC,8BAAsB,eAAEhC,OAIjC+B,EAAYK,0BACfL,EAAYK,yBAAyBC,MACjC,EAAGnH,SAAQ,MAAC,OAAAA,KAAyC,QAAlC,EAAA6G,EAAYC,8BAAsB,eAAE9G,SAI3E,C,4BCJA,MAmCA,GAnC4E,EACxEmY,0BACAC,sBACAnU,YACAoU,qBAEA,MAAM,QAAEpS,IAAY,SAEpB,OACI,gBAAC9B,EAAA,EAAI,KACAkU,GACG,gBAAC,GAAA9T,EAAK,CAACO,KAAM,KAAUoE,OACnB,8BACI,gBAACtE,EAAA,EAAgB,CAAC5E,GAAG,iCAIhCmY,GAA2B,gBAACG,GAAA,EAAa,MAE1C,uBAAK7T,UAAU,gBACX,gBAACC,EAAA,GAAM,CACHD,UAAWwB,EAAU,YAAc,GACnCpB,SAAUuT,EACVpY,GAAG,6BACHiE,UAAWA,EACXa,KAAK,SACLhF,QAAS4E,EAAA,GAAc3E,SAEvB,gBAAC6E,EAAA,EAAgB,CAAC5E,GAAG,+BCoGzC,GArHuB,EACnBgN,oBACAlJ,4BACAwD,qBACArD,YACAsD,mBACAqQ,8BACAW,kCAEA,MAAOnH,EAAoB5J,IAAyB,IAAAG,aAC7CgJ,EAA0BC,IAA+B,IAAAjJ,WAAS,IACnE,gBAAEsE,GAAoBqE,MACtB,QAAErK,IAAY,UAEhB6B,eACIxC,MAAM,qBAAEyC,EAAsBG,gBAAiBC,IAEnDE,iBAAmB0I,qBAAsBC,EAAU,gCAAEvK,KACrD,SAEEnD,GAAkB,IAAAgK,UAAQ,KAC5B,KAAK8D,aAAkB,EAAlBA,EAAoBjL,SACrB,OAGJ,MAAMpC,EAAYgE,KAA0B,IACtCyQ,GAAU,IAAArR,MAAKpD,EAAW,CAAE0U,KAAMrH,EAAmBjL,QAAQ3C,cAEnE,OAAO,OAAP,wBACO4N,EAAmBjL,SAAO,CAC7BqS,QAASA,EAAUA,EAAQzV,KAAOqO,EAAmBjL,QAAQ3C,gBAElE,CAAC4N,IAEEK,EAA2B,KAC7Bb,GAA6BD,IAsCjC,OACI,uBAAKlM,UAAU,yBACX,uBAAKA,UAAW,IAAW,qBAAsB,CAAE,aAAcwB,KAC7D,0BACI,gBAACrB,EAAA,EAAgB,CAACU,KAAM,CAAE0H,qBAAqBhN,GAAG,uDAG1D,gBAAC,GAA0B,CACvB8D,0BAA2BA,EAC3BwD,mBAAoBA,EACpBrD,UAAWA,EACXsD,iBAAkBA,EAClBjE,gBAAiBA,EACjBkE,sBAAuBA,IAE1BlE,GAAoB,gCACjB,gBAAC,GAAkB,CACf6C,QAAS7C,EACT0J,kBAAmBA,EACnB/I,UAAWA,EACX9D,OAAQwQ,EACR9E,gBAxDmBoE,IAAgD,iD,MAC/E,IAAIzJ,EAEJ,GAAKlD,EAIL,IACI,MACIgC,MAAM,gBAAE4C,UACF8I,EAAW,CACjB7K,QAAS7C,EACTzB,UAAWoO,IAGfzJ,EAAsB0B,GAC1B,CAAE,MAAOe,GACDA,aAAiBnD,IACjByB,EAAiB0B,EAEzB,C,QACIwI,IACA8G,GAA4B,GAC5BX,IAEIpR,GAAuBA,EAAoBvE,OAAS,UAC9CqE,GACuB,QAAzB,EAAA6B,WAAyB,QAAI,GAC7B3B,EACAC,GAGZ,CACJ,IAwBgBnH,eAAgBmS,EAChBxF,gBAAiBA,IAErB,uBAAKxH,UAAU,oCACX,sBAAIA,UAAWwB,EAAU,YAAc,IACnC,gBAACrB,EAAA,EAAgB,CAAC5E,GAAG,sDAEzB,qBACIyE,UAAWwB,EAAU,WAAa,GAAE,YAC1B,wBACVG,KAAK,IACLzG,SAAS,EAAA0G,EAAA,GAAeoL,IAExB,gBAAC7M,EAAA,EAAgB,CAAC5E,GAAG,+CCgC7C,IAAe,EAAAiD,EAAA,GACXf,EAAwF,CACpFgB,aAAc,CAACL,GAAUR,OAASqW,gBAC9BA,EAAS7V,IAEbO,iBAAkB,EAAGuV,sBAAsB,CACvCC,aAAcD,IAElBxM,oBAAoB,GAPxBjK,EAvIiE,EACjE4B,4BACAwD,qBACArD,YACAsD,mBACA8Q,qBAEA,MAAOQ,EAAwBC,IAA6B,IAAAnR,aAEtD,QAAE1B,IAAY,UAEhB6B,eACIxC,MAAM,gBAAE4C,EAAe,UAAED,MAE7B,UACIgE,iBAAmBpK,UAAWkX,EAAmB,oBAAEvO,GAAqB,gBAAE+E,GAAoBe,KAEhGlB,EAAelH,KAAqB,IACpCvH,EAASsH,KAER+Q,EAA0BT,IAA+B,IAAA5Q,UACpC,IAAxByH,EAAanN,QAGXgX,GAAsC,EAAAC,GAAA,GAA2B9J,GACjEgJ,GAAsB,IAAA9K,UAAQ,IACzBrJ,KAAe8U,EAAoB9W,SAAWgX,IAAwChB,GAA8B7I,IAC5H,CAACnL,EAAWmL,IAEf,IAAKzO,EACD,OAAO,KAGX,MACIQ,kBACIgY,oBAAqBhB,EAAuB,2BAC5CT,IAEJ/W,EAuBEqN,EAAqBxD,EAAsB,EAa3CoN,EAA8B,KAChCkB,OAA0BtX,IAG9B,OACI,gCAhB0B,CAACgJ,GACvBA,EAAsB,EACf,gBAAC2D,EAAA5J,EAAK,CAAC8G,oBAAqBpF,EAAU,eAAiB,GAAInB,KAAMqJ,EAAA,EAAUE,MAC9E,gBAACzJ,EAAA,EAAgB,CAACU,KAAM,CAAEiF,MAAOC,GAAuBxK,GAAG,qDAI5D,gBAACmO,EAAA5J,EAAK,CAAC8G,oBAAqBpF,EAAU,eAAiB,GAAInB,KAAMqJ,EAAA,EAAUiL,SAC9E,gBAACxU,EAAA,EAAgB,CAAC5E,GAAG,wDASpBqZ,CAAsB7O,GACtB+E,EAAgB3I,KAAKC,GAClB,gBAAC,GAAmB,CAChBA,YAAaA,EACbmG,kBAAmBnG,EAAYmG,kBAC/BlJ,0BAA2BA,EAC3BwD,mBAAoBA,EACpBrD,UAAWA,EACXyG,IAAK7D,EAAY7G,GACjBuH,iBAAkBA,EAClBqQ,4BAA6BA,EAC7BF,2BAA4BA,MAGnCsB,GACG,gBAAC,GAAc,CACXhM,kBAA2C,IAAxBoC,EAAanN,OAAe,EAAKmN,EAAanN,OAAS,EAC1E6B,0BAA2BA,EAC3BwD,mBAAoBA,EACpBrD,UAAWA,EACXsD,iBAAkBA,EAClBqQ,4BAA6BA,EAC7BW,4BAA6BA,IAGpCvK,GACG,gBAACtJ,EAAA,GAAM,CACHD,UAAW,IAAW,CAAE,eAAgBwB,GAAW,0BACnDtG,QApEqB,KACjC,GAAKqZ,GAA6BC,EAYvBD,EACPF,EAA0B1J,EAAanN,OAAS,IAEhD6W,OAA0BtX,GAC1B+W,GAA4B,QAhBuC,CACnE,MAAMe,EAAwBlK,EAAamK,WACtC1S,IAAiBA,EAAYC,yBAGlC,IAA+B,IAA3BwS,EAGA,YAFAf,GAA4B,GAKhCO,EAA0BQ,EAAwB,EACtD,GAwDYxZ,QAAS4E,EAAA,GAAcC,WAEvB,gBAACC,EAAA,EAAgB,CAAC5E,GAAG,gDAG5B8X,QAAQe,IACL,uBAAKpU,UAAU,qBACX,wBAAMA,UAAU,sBACZ,gBAACG,EAAA,EAAgB,CACbU,KAAM,CAAE0H,kBAAmB6L,GAC3B7Y,GAAG,0DAKnB,gBAAC,GAAuB,CACpBqY,eAAgBA,EAChBpU,UAAWA,EACXmU,oBAAqBA,EACrBD,wBAAyBA,S,gBCxJzC,MAsBA,GAtB+E,EAC3EqB,WACAC,qBAGI,uBAAKhV,UAAU,sBACX,gBAACG,EAAA,EAAgB,CAAC5E,GAAG,uCAAwC,IAC7D,iCACc,wBACVoG,KAAK,IACLzG,SAAS,EAAA0G,EAAA,GAAemT,IAExB,gBAAC5U,EAAA,EAAgB,CAAC5E,GAAG,0CACpB,IACL,gBAAC0Z,GAAA,EAAc,CACX1Z,GAAG,sCACHL,QAAS8Z,K,mDCfzB,MAsBA,IAAe,IAAA7G,OAtBwE,EACnF+G,eAEA,MAAM,QAAE1T,IAAY,SAEd2T,GAAe,IAAAtM,UACjB,IAAM,gBAAC1I,EAAA,EAAgB,CAAC5E,GAAG,wCAC3B,IAGJ,OACI,gBAAC6Z,GAAA,EAAiB,CACd7Z,GAAG,gBACH4Z,aAAcA,EACd7W,KAAK,wBACL4W,SAAUA,EACVG,OAAO,wBACP7T,QAASA,O,wCCIrB,MAAM8T,WAA8B,EAAAnF,cAApC,c,oBA+DY,KAAAoF,uBACHjX,GAAUoI,IACP,MAAM,cAAE8O,GAAkBrU,KAAKvD,MAE/B4X,EAAclX,EAAMoI,GAEhC,CApEU,iBAAA8J,G,sDACF,MAAM,WAAEiF,EAAU,SAAErE,EAAQ,iBAAEtO,EAAmB,EAAAhI,MAASqG,KAAKvD,MAE/D,UACU6X,EAAW,CAAErE,YACvB,CAAE,MAAO5M,GACL1B,EAAiB0B,EACrB,CACJ,G,CAEM,oBAAAyM,G,sDACF,MAAM,aAAEyE,EAAY,SAAEtE,EAAQ,iBAAEtO,EAAmB,EAAAhI,MAASqG,KAAKvD,MAEjE,UACU8X,EAAa,CAAEtE,YACzB,CAAE,MAAO5M,GACL1B,EAAiB0B,EACrB,CACJ,G,CAEA,MAAA0M,GACI,MAAM,QAAExP,EAAO,SAAEiU,EAAQ,WAAExW,EAAU,UAAEK,GAAc2B,KAAKvD,MAEpDgY,EAAmBzW,EAAW9B,QAAO,EAAGwY,YAAaA,IACrDC,EAA6BF,EAAiBpY,OAAS,EAE7D,OACI,gBAACoC,EAAA,EAAc,CAACJ,UAAWA,GACvB,uBAAKQ,UAAU,aAAa+V,MAAO,CAAEC,QAAS,IAC1C,uBAAKhW,UAAU,6BACX,gBAACyR,GAAA,EAAa,CAAC/P,QAASA,KAG5B,uBAAK1B,UAAU,gCACX,gBAACC,EAAA,GAAM,CACH1E,GAAIoa,EACJza,SAAS,EAAA0G,EAAA,KACTzG,KAAM8E,EAAA,GAAWgW,KACjBZ,OAAO,mBACPha,QAAS4E,EAAA,GAAcC,WAEvB,gBAACC,EAAA,EAAgB,CAAC5E,GAAG,0BAKhCua,GACG,gBAACI,GAAA,EAAQ,CAAC3a,GAAG,kBACRqa,EAAiBzT,KAAK2E,GACnB,gBAACqP,GAAA,EAAgB,CACbrP,MAAOA,EACPb,IAAK,GAAGa,EAAMvL,MAAMuL,EAAMxI,OAC1B4W,SAAU/T,KAAKoU,uBAAuBzO,EAAMxI,MAC5C8X,gBAAgB,oCAO5C,EAUJ,YC5FaC,GAA+DzY,IACxE,MAAM,SACFwT,EAAQ,WACRjS,EAAU,cACVqW,EAAa,WACbC,EAAU,aACVC,EAAY,gBACZrR,EAAe,sBACfiS,GACA1Y,EAEE2Y,GAAqB,IAAAnH,cACvB,KAAAoH,aACKC,GAA+CjQ,GAC5CiP,EAAW,OAAD,wBACHgB,GACAjQ,MAGf,IAGEkQ,EAAsB,mBAEtBlQ,EAAqC,CACvCmQ,UAAW,CACPD,wBAIR,OACI,gBAAC,GAAqB,CAClBhV,QAAS2C,EACTsR,SAAUe,EACVhB,aAAcA,EACdvW,WAAYA,EACZsW,WAAYc,EAAmB/P,GAC/BhH,UAAW8W,EACXlF,SAAUA,EACVoE,cAAeA,K,oGCT3B,MA6GA,IAAe,IAAArH,OA7G4BvQ,IACvC,MACI8D,QAASkV,EAA0B,WACnCzX,EAAU,UACVK,EAAS,gBACTqX,EAAe,cACfrB,EAAa,UACblW,EAAS,mCACTwX,GACAlZ,EACE8D,GAAU,EAAAqV,GAAA,GAAgBH,EAA4BtX,GAEtDsW,EAAmBzW,EAAW9B,QAAO,EAAGwY,YAAaA,IACrDC,EAA6BF,EAAiBpY,OAAS,EAqB7D,OACI,gBAACoC,EAAA,EAAc,CAACoX,wBAAsB,EAACxX,UAAWA,GAC9C,uBAAKQ,UAAU,aAAa+V,MAAO,CAAEC,QAAS,IAC1C,uBAAKhW,UAAU,6BACX,uBAAKA,UAAU,qCACP0B,EAAQuV,YAAavV,EAAQwV,WAC7B,qBAAGlX,UAAU,oBACT,wBAAMA,UAAU,cAAc,GAAG0B,EAAQuV,cACzC,wBAAMjX,UAAU,eAAe0B,EAAQwV,cAI3CxV,EAAQyV,QAASzV,EAAQ0V,UACzB,qBAAGpX,UAAU,iBACT,wBAAMA,UAAU,gBAAgB,GAAG0B,EAAQ0V,YAC3C,wBAAMpX,UAAU,OAAO0B,EAAQyV,QAIvC,uBAAKnX,UAAU,OACX,qBAAGA,UAAU,gCACT,wBAAMA,UAAU,kBAAkB,GAAG0B,EAAQ2V,eAC1C3V,EAAQ4V,UACP,wBAAMtX,UAAU,kBAAkB,MAAM0B,EAAQ4V,aAIxD,qBAAGtX,UAAU,mBACN0B,EAAQ6V,MACP,wBAAMvX,UAAU,YAAY,GAAG0B,EAAQ6V,YAExC7V,EAAQ8V,mBACP,wBAAMxX,UAAU,UAAU,GAAG0B,EAAQ8V,yBAEtC9V,EAAQ+V,YACP,wBAAMzX,UAAU,eAAe,GAAG0B,EAAQ+V,mBAE3C/V,EAAQgW,kBACP,wBAAM1X,UAAU,gBAAgB,GAAG0B,EAAQgW,wBAM3D,gBAACC,GAAA,EAA4B,OAGjC,uBAAK3X,UAAU,gCACX,gBAAC,MAAM,CACH9E,QAjEU,KAAY,iDACtC,GAA8E,mBAAnE4b,EAAmC3Y,QAAQyZ,oBAAoC,CACtF,MAAM/Y,QACIiY,EAAmC3Y,QAAQyZ,sBAErD,GAAI/Y,EAAiB,CACjB,MAAMgZ,EAAe/B,EAA6BpU,EAAQmW,aAAe,CAAC,EAE1EhB,EAAgB,OAAD,wBACRhY,GACAgZ,GAEX,CACJ,CACJ,IAoDoB1c,KAAM,MAAW8a,KACjBZ,OAAO,mBACPha,QAAS,MAAc6E,WAEvB,gBAACC,EAAA,EAAgB,CAAC5E,GAAG,0BAKhCua,GACG,gBAAC,KAAQ,CAACva,GAAG,kBACRqa,EAAiBzT,KAAK2E,IAAU,OAC7B,gBAAC,KAAgB,CACbA,MAAOA,EACPb,IAAK,GAAGa,EAAMvL,MAAMuL,EAAMxI,OAC1B4W,UApFmD5W,EAoFlBwI,EAAMxI,KApFsBoI,GACjF8O,EAAclX,EAAMoI,IAoFA0P,gBAAgB,iCArFkC,IAAC9X,U,4BCvB/E,MAAMwZ,GAAmB,kBAEzB,MAAMC,WAA4B,EAAAC,UAAlC,c,oBAmEY,KAAAzY,cAAiE,CACrE0Y,EACAC,KAEA,MACIC,QAAQ,cAAE5Y,GAAe,WACzBJ,GACAgC,KAAKvD,MAMHwa,EAJuBjZ,EACxB9B,QAAQyJ,GAAUA,EAAM+O,SACxB1T,KAAK2E,GAAUA,EAAMxI,OAEiBzB,SAASob,GAC9C,gBAAgBA,IAChBA,EAEN1Y,EAAc,GAAGuY,MAAoBM,IAAiBF,IAGlD,KAAAG,aAA2D,CAACJ,EAAWvR,KAC3E,MAAM,cAAE8O,GAAkBrU,KAAKvD,MAE/B4X,EAAcyC,EAAWvR,IAGrB,KAAA4R,yBAAqF,EACzF5c,SACA6c,iBAEA,MAAM,cAAE/C,GAAkBrU,KAAKvD,MAE1BlC,GACD8Z,EAAc,WAAY+C,GAGtC,CApGI,MAAArH,GACI,MAAM,UACFjN,EACAvC,QAAS2C,EAAe,gBACxBwS,EAAe,gBACftV,EAAe,sBACfxB,EAAqB,UACrBT,EAAS,0BACTD,EAAyB,WACzBF,EAAU,UACVK,EAAS,iBACTJ,EAAgB,uBAChBK,EACA0Y,QACI/Z,QAAUiG,gBAAiBmU,KAE/BrX,KAAKvD,MAEH6a,EAAexU,GAAaA,EAAUzG,OAAS,EAC/Ckb,GAA0B,EAAAC,GAAA,GAC5BtU,EACAJ,EACA9E,GAGJ,OACI,gBAAC+W,GAAA,EAAQ,CAAC3a,GAAG,2BACRkd,GACG,gBAACvC,GAAA,EAAQ,CAAC3a,GAAG,qBACT,gBAACqE,EAAA,EAAc,CAACJ,UAAWA,GACvB,gBAACwF,EAAAlF,EAAa,CACVmE,UAAWA,EACXgB,gBAAiB4R,EACjBtV,gBAAiBA,EACjB1C,gBACI6Z,EAA0BrU,OAAkBtH,EAEhDsD,KAAM+E,EAAAtF,EAAYuF,cAMhCqT,GACE,gBAAC9Y,EAAA,EAAc,CAACJ,UAAWA,EAAWoZ,2BAAyB,GAC3D,gBAAC/Y,EAAAC,EAAW,CACRR,UAAWA,EACXD,0BAA2BA,EAC3BN,YAAayZ,GAAeA,EAAYzZ,YACxCkZ,UAAWH,GACX3Y,WAAYA,EACZC,iBAAkBA,EAClBK,uBAAwBA,EACxBoZ,qBAAsB1X,KAAKmX,yBAC3BpD,SAAU/T,KAAKkX,aACf9Y,cAAe4B,KAAK5B,cACpBQ,sBAAuBA,KAM/C,EAwCJ,UAAe,EAAA+Y,GAAA,GAAcf,ICtGhBgB,GAAyEnb,IAClF,MAAM,SACFwT,EAAQ,WACRjS,EAAU,UACVG,EAAS,gBACTuX,EAAe,cACfrB,EAAa,iBACb1S,EAAgB,WAChB2S,EAAU,aACVC,EAAY,gBACZrR,EAAe,UACfJ,EAAS,kBACT+U,EAAiB,UACjBxZ,GACA5B,GACGqb,EAAmBC,IAAgC,IAAAhW,WAAkB,GAEtEiW,GAAkC,IAAAlb,QAA0C,CAAC,GAC7Emb,EAAmBC,IACd,CACH,CAACA,GAAW,CACRC,8BACIC,IAEAJ,EAAgChb,QAAQyZ,oBACpC2B,OAiCpB,IAAArb,YAAU,MA3B4C,iDAClD,UACUuX,EAAW,OAAD,oCACZrE,aACI,QAAoCA,GAAYgI,EAAgB,iCAAmC,CAAC,IACpG,QAA0BhI,GAAYgI,EAAgB,qBAAuB,CAAC,IAC9E,QAA+BhI,GAAYgI,EAAgB,0BAA4B,CAAC,GAEpG,CAAE,MAAO5U,GAC2B,mBAArB1B,GAAmC0B,aAAiBC,OAC3D3B,EAAiB0B,EAEzB,CAEA0U,GAA6B,EACjC,IAeW,MAb6C,iDACpD,UACUxD,EAAa,CAAEtE,YACzB,CAAE,MAAO5M,GAC2B,mBAArB1B,GAAmC0B,aAAiBC,OAC3D3B,EAAiB0B,EAEzB,CACJ,OAQG,IAEH,MAAM,qCAAEgV,IAAyC,EAAAC,GAAA,KAEjD,OACI,gBAAC7Z,EAAA,EAAc,CAACoX,wBAAsB,EAACxX,UAAWyZ,GAAqBzZ,GAClE4R,IAAY,QAAuBA,IAAa/M,GAAmBmV,EAChE,gBAAC,GAAiC,CAC9B9X,QAAS2C,EACT/E,UAAWA,EACXoW,aAAcA,EACdvW,WAAYA,EACZsW,WAAYA,EACZjW,UAAWyZ,EACX7H,SAAUA,EACVyF,gBAAiBA,EACjBrB,cAAeA,EACf1S,iBAAkBA,EAClBgU,mCAAoCqC,IAGxC,gBAAC,GAAmB,CAChBzX,QAAS2C,EACTJ,UAAWA,EACX0G,aAAc/M,EAAM+M,aACpBrL,UAAWA,EACXD,0BAA2BzB,EAAMyB,0BACjCF,WAAYA,EACZC,iBAAkBxB,EAAMwB,iBACxBK,uBAAwB7B,EAAM6B,uBAC9BD,UAAWyZ,EACXpC,gBAAiBA,EACjBrB,cAAewD,EACfzX,gBAAiB3D,EAAM2D,gBACvBxB,sBAAuBnC,EAAMmC,0BC3BjD,IAAe,IAAAoO,OApEmDvQ,IAC9D,MAAM,SACFwT,EAAQ,WACRjS,EAAU,UACVG,EAAS,0BACTD,EAAyB,aACzBsL,EAAY,iBACZvL,EAAgB,gBAChByX,EAAe,cACfrB,EAAa,gBACbjU,EAAe,UACf/B,EAAS,gBACT6E,EAAe,4BACfqV,EAA2B,UAC3BzV,EAAS,sBACTlE,EAAqB,uBACrBN,GACA7B,GAEE,aAAE+b,IAAiB,IAAAC,YAAWC,GAAA,IAE9Bb,EAAgE,CAACf,EAAWvR,KAC1EgT,GACAC,GAAa,GAGjBnE,EAAcyC,EAAWvR,IAG7B,OAAI0K,IAAY,QAAuBA,IAAa/M,EAE5C,gBAAC0U,GAA6B,iBACtBnb,EAAK,CACTob,kBAAmBA,EACnB5H,SAAUA,EACV/M,gBAAiBA,KAKZ,cAAb+M,GAA4B/M,EAExB,gBAACgS,GAAwB,iBACjBzY,EAAK,CACTyG,gBAAiBA,KAMzB,gBAAC,GAAmB,CAChB3C,QAAS2C,EACTJ,UAAWA,EACX0G,aAAcA,EACdrL,UAAWA,EACXD,0BAA2BA,EAC3BF,WAAYA,EACZC,iBAAkBA,EAClBK,uBAAwBA,EACxBD,UAAWA,EACXqX,gBAAiBA,EACjBrB,cAAewD,EACfzX,gBAAiBA,EACjBxB,sBAAuBA,OCxGtB+Z,GAA0B,CACnC,WACA,aACA,cACA,OACA,kBACA,uB,gBCmBJ,MA4DA,GA5DuE,EACnElG,iBACA3E,sBACAyE,0BACA5C,6BAA4B,EAC5B6C,sBACA7V,uBACA0B,YACAoR,kCAEA,MAAM,QAAEpP,IAAY,SAEpB,OACI,gCACI,gBAACgO,GAAA,EAAS,CAACC,OAAM,uCACjB,gBAACyG,GAAA,EAAQ,CACL3a,GAAG,4BACHwe,OACI,gCACI,gBAACC,GAAA,EAAM,CAACxY,QAASA,GACb,gBAACrB,EAAA,EAAgB,CAAC5E,GAAG,oCAGxBqY,GACG,gBAAC,GAAA9T,EAAK,CAACO,KAAM,KAAUoE,OACnB,8BACI,gBAACtE,EAAA,EAAgB,CAAC5E,GAAG,mCAOzC,gBAAC0e,GAAe,CACZnc,qBAAsBA,EACtBmR,oBAAqBA,EACrBiD,kBAAmB1S,EACnBoR,4BAA6BA,EAC7BE,0BAA2BA,KAIlC4C,GAA2B,gBAACG,GAAA,EAAa,MAE1C,uBAAK7T,UAAU,gBACX,gBAACC,EAAA,GAAM,CACHD,UAAWwB,EAAU,YAAc,GACnCpB,SAAUuT,EACVpY,GAAG,6BACHiE,UAAWA,EACXa,KAAK,SACLhF,QAAS4E,EAAA,GAAc3E,SAEvB,gBAAC6E,EAAA,EAAgB,CAAC5E,GAAG,+BCmBzC,MAAM2e,WAA2B,EAAA/J,cAa7B,WAAAvP,CACIhD,G,MAEAkD,MAAMlD,GAXV,KAAAuc,MAAiC,CAC7BC,oBAAoB,EACpBC,wBAAwB,EACxBX,6BAA6B,GAwJzB,KAAA/F,oBAAqC,KACzC,MAAM,UAAEnU,EAAS,aAAEmL,EAAY,QAAE2P,GAAYnZ,KAAKvD,OAE5C,uBAAEyc,GAA2BlZ,KAAKgZ,MAExC,QAAKG,IAIE9a,GAAa6a,KAA2B,EAAA5F,GAAA,GAA2B9J,KAAkB6I,GAA8B7I,KAGtH,KAAAqO,kBAAmD1a,IAAS,+CAChE,MAAM,cAAEiB,GAAkB4B,KAAKvD,MAElB,gBAATU,IACAiB,EAAc,kCAAmC,IACjDA,EAAc,sCAAuC,WAInD,IAAIgb,SAASC,GAAYC,WAAWD,KAE1C,MAAME,EAAkBZ,GAAwBjd,SAASyB,IAEnD,4BAAEob,GAAgCvY,KAAKgZ,OAEvC,QAAEG,GAAYnZ,KAAKvD,MAEpB0c,GAILnZ,KAAKwZ,0BAA0BD,IAAoBhB,EACvD,IAyBQ,KAAAkB,oBAAyDlZ,IAAY,+CACzE,MAAM,cAAEmZ,EAAa,iBAAE/X,EAAmB,EAAAhI,KAAI,OAAEsD,EAAM,UAAEoK,GAAcrH,KAAKvD,MAE3EuD,KAAK2Z,SAAS,CAAEV,oBAAoB,IAEpC,UACUS,EAAcnZ,GAEpB8G,EAAU,OAAD,wBACFpK,GAAM,CACTiG,iBAAiB,EAAAvF,EAAA,GACbqC,KAAKvC,UAAU8C,EAAQ3C,aACvB2C,KAGZ,CAAE,MAAO8C,GACL1B,EAAiB0B,EACrB,C,QACIrD,KAAK2Z,SAAS,CAAEV,oBAAoB,GACxC,CACJ,IAEQ,KAAA7Y,gBAA8B,KAAY,+CAC9C,MAAM,mBAAEwZ,EAAkB,iBAAEjY,EAAmB,EAAAhI,KAAI,UAAE0N,EAAS,OAAEpK,GAAW+C,KAAKvD,MAEhFuD,KAAK2Z,SAAS,CAAEV,oBAAoB,IAEpC,IACI,MAAM1Y,QAAgBqZ,IAEtBvS,EAAU,OAAD,wBACFpK,GAAM,CACTiG,iBAAiB,EAAAvF,EAAA,GACbqC,KAAKvC,UAAU8C,GAAWA,EAAQ3C,aAClC2C,KAGZ,CAAE,MAAOsZ,GACLlY,EAAiBkY,EACrB,C,QACI7Z,KAAK2Z,SAAS,CAAEV,oBAAoB,GACxC,CACJ,IAnPI,MAAM,cAAES,GAAkB1Z,KAAKvD,MAE/BuD,KAAK8Z,wBAAyB,IAAAC,WAC1B,CAAOxZ,EAAkByZ,KAAoC,+CACzD,UACUN,EAAcnZ,EAAS,CACzB0Z,OAAQ,CACJC,QAAS,CACL,wCAAyCF,MAKjDA,GACAha,KAAK2Z,SAAS,CAAEpB,6BAA6B,GAErD,C,QACIvY,KAAK2Z,SAAS,CAAET,wBAAwB,GAC5C,CACJ,KAC2B,QAA3B,EAAAzc,EAAM0d,6BAAqB,QAxCA,KA0CnC,CAEA,kBAAA3K,EAAmB,4BAAEC,I,QACjB,MACIA,4BAA6BG,EAA8B,UAC3DvI,EAAS,UACT5J,EAAS,gBACTyF,EAAe,wBACfkX,EAAuB,gBACvBrH,EAAe,OACf9V,EAAM,cACNmB,GACA4B,KAAKvD,MAE4BgB,EAAUR,IAAgC,QAAtB,EAAAA,EAAOiG,uBAAe,eAAEtF,cAAa2D,MAC1F,EAAGpE,UAAoB,wBAATA,MASd+F,aAAe,EAAfA,EAAiBmX,wBACM,QAAtB,EAAApd,EAAOiG,uBAAe,eAAEmX,sBAEzBjc,EAAc,sCAAuC8E,EAAgBmX,qBAIrEzK,IAAmCH,GACnCpI,EAAU,CACNiT,sBAAuBF,EACvBpH,aAAcD,EACd7P,iBAAiB,EAAAvF,EAAA,GACbF,EAAUyF,GAAmBA,EAAgBtF,aAC7CsF,IAIhB,CAEA,MAAA6M,GACI,MAAM,UACFjN,EAAS,eACT2P,EAAc,qBACd9V,EAAoB,UACpB0B,EAAS,iBACTsD,EAAgB,SAChBsO,EAAQ,sBACRrR,EAAqB,UACrBT,EAAS,0BACTD,EAAyB,iBACzBD,EAAgB,gBAChBiF,EAAe,aACfsG,EAAY,wBACZ+I,EAAuB,WACvB+B,EAAU,QACV6E,EAAO,aACP5E,EACAtX,QAAUiG,gBAAiBqX,GAAa,sBACxCpF,EAAqB,uBACrB7W,EAAsB,4BACtBmR,GACAzP,KAAKvD,OAEH,mBAAEwc,EAAkB,uBAAEC,EAAsB,4BAAEX,GAChDvY,KAAKgZ,MAGHwB,GADuB,CAAC,aACgCC,MACzDrM,GAAWA,IAAW6B,IAG3B,OACI,gBAAC1R,EAAA,EAAI,CAACC,aAAa,MACf,gBAACuW,GAAA,EAAQ,KACL,gBAAC,GAAe,CACZjS,UAAWA,EACX0G,aAAcA,EACdrL,UAAWA,EACXD,0BAA2BA,EAC3BqW,aAAcA,EACdvW,WAAYgC,KAAKvC,UAAU8c,GAAeA,EAAY3c,aACtDK,iBAAkBA,EAClBsa,4BAA6BA,EAC7BjE,WAAYA,EACZhW,uBAAwBA,EACxBD,UAAW4a,EACX9D,sBAAuBA,EACvBlF,SAAUA,EACVyF,gBAAiB1V,KAAKyZ,oBACtBpF,cAAerU,KAAK6X,kBACpBlW,iBAAkBA,EAClBvB,gBAAiBJ,KAAKI,gBACtB8C,gBAAiBA,EACjBtE,sBAAuBA,IAE1B4b,GACG,uBAAK3b,UAAU,aACX,gBAAC,GAA0B,QAKvC,gBAAC,GAAkB,CACf4T,eAAgBA,EAChB9V,qBAAsBA,EACtB0B,UAAWA,GAAa6a,EACxBpL,qBAAqB,EACrB2B,4BAA6BA,EAC7B+C,oBAAqBxS,KAAKwS,sBAC1BD,wBAAyBA,EACzB5C,0BAA2BwJ,IAI3C,CAsCQ,yBAAAK,CAA0BQ,GAC9B,MAAM,gBACF9W,EACAjG,QAAUiG,gBAAiBqX,IAC3Bva,KAAKvD,MAEHie,EAAyBH,IAAe,EAAA3W,EAAA,GAAyB2W,GAEnEvS,MAAM2S,QAAQzX,aAAe,EAAfA,EAAiBwT,gBAC/BsD,IAA0B,IAAAY,SACtB1X,aAAe,EAAfA,EAAiBwT,aACjBgE,aAAsB,EAAtBA,EAAwBhE,eACvBsD,GAGJU,KAA0B,EAAAG,EAAA,GAAeH,EAAwBxX,KAItElD,KAAK2Z,SAAS,CAAET,wBAAwB,IACxClZ,KAAK8Z,uBAAuBY,EAAwBV,GACxD,CA8CQ,SAAAvc,CAAUG,GACd,MAAM,UAAEH,GAAcuC,KAAKvD,MAE3B,OAAOgB,EAAUG,EACrB,EAxQO,GAAAkd,YAAcpC,GAAA,GA2QzB,UAAe,EAAArb,EAAA,GACXf,EAA0F,CACtFgB,aAAc,CAACL,GAAUR,OAASqW,gBAC9BA,EAAS7V,IAEbO,iBAAkB,EACdC,YACAyF,kBACAkX,0BACArH,sBACE,CACFuH,sBAAuBF,EACvBpH,aAAcD,EACd7P,iBAAiB,EAAAvF,EAAA,GACbF,EAAUyF,GAAmBA,EAAgBtF,aAC7CsF,KAGR6X,eAAgB,EAAG7X,kBAAiBzF,YAAWK,gBACzCoF,IACF,EAAAnF,EAAA,GAAqC,CACjCD,WACAE,WAAYP,EAAUyF,EAAgBtF,eACvCod,YAAY9X,GACnBrF,iBAAkB,EACdC,WACAL,YACAwS,cApTZ,SAAoCA,GAChC,MAAMgL,EAA6C,CAC/ChgB,EAAA,EAAgBE,6BAChBF,EAAA,EAAgBG,mCAGpB,OAAO8W,QAAQjC,IAAagL,EAAiCvf,SAASuU,GAC1E,CA+SYiL,CAA2BjL,IACrB,QAAO,CACH/M,iBAAiB,SAAkCiY,IAC/C,EAAAC,GAAA,GAAoC,CAChCtb,WAAW,OAAyBhC,GACpCE,WAAYP,EAAU0d,GAAcA,EAAWvd,oBAI3D,QAAO,CACHsF,iBAAiB,SAAkCiY,IAC/C,EAAApd,EAAA,GAAqC,CACjCD,WACAE,WAAYP,EAAU0d,GAAcA,EAAWvd,mBAIrE2I,oBAAoB,GA7CxBjK,CA8CGyc,KCpPP,IAAe,EAAA1b,EAAA,IA3GM,EACjByF,YACAhH,OACA2W,iBACEjJ,eACArL,YACAD,4BACA2V,kBACAd,kBACAwB,eACAqF,qBACAnc,YACAQ,mBACAqW,aACA8F,0BACArX,UACA1E,YACAyP,sBACAuN,8BACApL,WACAqL,wBACA1H,WACA2H,yBACF5Z,mBACEuB,kBACAqP,0BACA3T,wBACA4c,UACA9B,gBACAvE,wBACA7W,yBACF3B,uBACA8S,8BACAgM,6BAEA,MACIvZ,eACIxC,MAAM,UAAE2C,MAEZ,SACEtH,EAASsH,KAEf,IAAAtF,YAAU,K,QACN,GAAI0S,EAA6B,CAC7B,MAAMiM,EAA2E,QAAjD,EAAwB,QAAxB,EAAA3gB,aAAM,EAANA,EAAQQ,wBAAgB,eAAEmgB,+BAAuB,SAC3E5N,IACAhS,KACA0N,GACFkS,IACA,EAAAC,EAAA,GAAqBnS,EAAc1N,EAAKG,WAE5Cwf,EAAuB3N,EAC3B,IACD,CAAC2B,IAoBJ,OAAO3B,EAjBC/K,IAAYsY,EAER,gBAAC,GAAsB,CAACxH,gBAAiBA,EAAiBD,SAAUA,IAIrE,gBAAC,GAAiB,CACrBnB,eAAgBA,EAChBvU,0BAA2BA,EAC3B6U,gBAAiBA,EACjBrR,mBAAoBwB,aAAe,EAAfA,EAAiBtF,YACrCS,UAAWA,EACXyU,SAAUwI,EACV3Z,iBAAkBA,IAOtB,gBAAC,GAAkB,CACfmB,UAAWA,EACX2P,eAAgBA,EAChBjJ,aAAcA,EACdrL,UAAWA,EACXD,0BAA2BA,EAC3B6U,gBAAiBA,EACjBwB,aAAcA,EACdqF,mBAAoBA,EACpBnc,UAAWA,EACXQ,iBAAkBA,EAClBqW,WAAYA,EACZ8F,wBAAyBA,EACzB9b,uBAAwBA,EACxB3B,qBAAsBA,EACtB0B,UAAWA,EACXyP,oBAAqBA,EACrBqH,sBAAuBA,EACvBlF,SAAUA,EACV6C,SAAUyI,EACV5Z,iBAAkBA,EAClBuB,gBAAiBA,EACjBuM,4BAA6BA,EAC7B8C,wBAAyBA,EACzB3T,sBAAuBA,EACvB4c,QAASA,EACT9B,cAAeA,OCnD3B,IAAe,IAAA1M,OA7FgD,EAC3Dc,sBACA/K,UACA6Y,wBACAC,0BACAC,8BAEA,MAAOC,EAAuCC,IAA4C,IAAAja,WAAS,IAC5Fka,EAAqCC,IAA0C,IAAAna,WAAS,IAEzF,QAAE1B,IAAY,SAOd8b,EAAwBN,GAA2B/N,EACnDsO,EAAoCP,IAA4B/N,GAAuBgO,EAE7F,OACI,gCACI,gBAACzN,GAAA,EAAS,CAACC,OAAM,wCACjB,uBAAKzP,UAAW,IAAW,CAAC,wBAAyB,qBACjD,gBAACga,GAAA,EAAM,CAAC3E,OAAO,2BAA2B7T,QAASA,GAC/C,gBAACrB,EAAA,EAAgB,CACb5E,GACI0T,EACM/K,EACI,+CACA,yCACJ,uCAKjBoZ,GACG,gCACI,gBAACE,EAAA,EAAiB,CACd7iB,OA3Be,KACnCwiB,GAAyC,GACzCJ,KA0BoBniB,kBAAmB,gBAACuF,EAAA,EAAgB,CAAC5E,GAAG,0BACxCf,SAAS,iCACTE,YAAawiB,EACbziB,UAAU,kCACVI,eAAgB,IAAMsiB,GAAyC,KAEnE,qBACInd,UAAWwB,EAAU,WAAa,GAAE,YAC1B,uBACVG,KAAK,IACLzG,SAAS,EAAA0G,EAAA,IAAe,IAAMub,GAAyC,MAEvE,gBAAChd,EAAA,EAAgB,CAAC5E,GAAG,8BAIhCgiB,GACG,gCACI,gBAACC,EAAA,EAAiB,CACd7iB,OAAQ,IAAM0iB,GAAuC,GACrDziB,kBAAmB,gBAACuF,EAAA,EAAgB,CAAC5E,GAAG,uBACxCf,SAAS,4CACTE,YAAa0iB,EACb3iB,UAAU,6CACVI,eAAgB,IAAMwiB,GAAuC,KAEjE,qBACIrd,UAAWwB,EAAU,WAAa,GAAE,YAC1B,uBACVG,KAAK,IACLzG,SAAS,EAAA0G,EAAA,IAAe,IAAMyb,GAAuC,MAErE,gBAACld,EAAA,EAAgB,CAAC5E,GAAG,8BAI/B+hB,IAA0BC,GAAqCP,GAC7D,qBACIhd,UAAWwB,EAAU,WAAa,GAAE,YAC1B,uBACVG,KAAK,IACLzG,SAAS,EAAA0G,EAAA,GAAemb,IAExB,gBAAC5c,EAAA,EAAgB,CACb5E,GAAI0T,EAAsB,0BAA4B,iC,gBC9FlF,MAAMwO,WAAqC,EAAAtN,cACjC,iBAAAK,G,sDACF,MAAM,WACFiF,EAAU,SACVrE,EAAQ,iBACRtO,EAAmB,EAAAhI,MACnBqG,KAAKvD,MAET,UACU6X,EAAW,CAAErE,YACvB,CAAE,MAAO5M,GACL1B,EAAiB0B,EACrB,CACJ,G,CAEM,oBAAAyM,G,sDACF,MAAM,aACFyE,EAAY,SACZtE,EAAQ,iBACRtO,EAAmB,EAAAhI,MACnBqG,KAAKvD,MAET,UACU8X,EAAa,CAAEtE,YACzB,CAAE,MAAO5M,GACL1B,EAAiB0B,EACrB,CACJ,G,CAEA,MAAA0M,GAEI,OACI,gCACI,uBAAKlR,UAAU,aAAa+V,MAAQ,CAAEC,QAAS,IAC3C,uBAAKza,GAAG,oBAAoBwa,MAAQ,CAAEla,MAAO,WAEjD,2BAGZ,EAGJ,YC7Ce,SAAS6hB,GACpB3J,EACAoG,G,MAGA,MAAM7a,EAAkC,CACpC,GAAM,CACF,OAAQ,MACR,OAAQ,MACR,SAAU,MACV,QAAS,MACT,QAAS,MACT,OAAQ,MACR,QAAS,MACT,QAAS,MACT,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,KAAQ,MACR,QAAS,MACT,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,SAAU,MACV,OAAQ,MACR,OAAQ,MACR,OAAQ,MACR,SAAU,MACV,QAAS,MACT,OAAQ,MACR,OAAQ,MACR,OAAQ,OAEZ,GAAM,CACF,kCAAmC,IACnC,eAAgB,IAChB,UAAa,IACb,MAAS,IACT,OAAU,IACV,QAAW,IACX,WAAc,IACd,aAAc,IACd,QAAW,IACX,MAAS,IACT,WAAY,IACZ,WAAY,IACZ,QAAW,IACX,SAAY,IACZ,QAAW,IACX,MAAS,IACT,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,sBAAuB,IACvB,mBAAoB,IACpB,QAAW,KAEf,GAAM,CACF,iBAAkB,KAClB,oBAAqB,KACrB,MAAS,KACT,MAAS,KACT,aAAgB,KAChB,IAAO,KACP,QAAW,KACX,QAAW,KACX,mBAAoB,KACpB,oBAAqB,KACrB,UAAa,KACb,UAAa,KACb,OAAU,KACV,iBAAkB,KAClB,YAAe,KACf,QAAW,KACX,UAAa,KACb,QAAW,KACX,SAAY,KACZ,OAAU,KACV,OAAU,KACV,UAAa,KACb,OAAU,KACV,aAAc,KACd,QAAW,KACX,YAAe,KACf,gBAAiB,KACjB,cAAe,KACf,8BAA+B,KAC/B,WAAc,KACd,2CAA4C,KAC5C,YAAe,KACf,MAAS,KACT,WAAc,KACd,UAAa,MAEjB,GAAM,CACF,KAAQ,KACR,OAAU,KACV,SAAY,KACZ,KAAQ,KACR,cAAe,KACf,iBAAkB,KAClB,iBAAkB,KAClB,KAAQ,KACR,MAAS,KACT,mBAAoB,KACpB,QAAW,KACX,aAAc,KACd,aAAc,KACd,6BAA8B,KAC9B,mBAAoB,KACpB,oBAAqB,KACrB,mBAAoB,KACpB,qBAAsB,KACtB,sBAAuB,KACvB,sBAAuB,KACvB,mBAAoB,KACpB,kBAAmB,KACnB,iBAAkB,KAClB,oBAAqB,KACrB,OAAU,KACV,eAAgB,KAChB,UAAa,MAEjB,GAAM,CACF,MAAS,MACT,MAAS,MACT,SAAY,MACZ,OAAU,MACV,kBAAmB,MACnB,OAAU,MACV,eAAgB,MAChB,MAAS,MACT,OAAU,MACV,SAAY,MACZ,WAAc,MACd,MAAS,MACT,QAAW,MACX,eAAgB,MAChB,OAAU,MACV,UAAa,OAEjB,GAAM,CACF,OAAU,KACV,MAAS,KACT,MAAS,KACT,QAAW,KACX,OAAU,IACV,OAAU,IACV,QAAW,KACX,SAAY,KACZ,MAAS,KACT,QAAW,KACX,SAAY,KACZ,MAAS,KACT,KAAQ,KACR,MAAS,KACT,SAAY,KACZ,OAAU,KACV,UAAa,KACb,MAAS,KACT,UAAa,KACb,UAAa,KACb,UAAa,KACb,QAAW,KACX,QAAW,MAEf,GAAM,CACF,MAAS,KACT,MAAS,KACT,OAAU,KACV,MAAS,KACT,MAAS,KACT,MAAS,KACT,QAAW,KACX,UAAa,KACb,KAAQ,KACR,MAAS,KACT,UAAa,KACb,SAAY,KACZ,MAAS,KACT,QAAW,KACX,SAAY,KACZ,MAAS,KACT,OAAU,KACV,UAAa,KACb,SAAY,KACZ,MAAS,KACT,SAAY,KACZ,MAAS,KACT,IAAO,KACP,OAAU,KACV,SAAY,KACZ,OAAU,KACV,SAAY,KACZ,KAAQ,KACR,QAAW,KACX,KAAQ,KACR,QAAW,KACX,QAAW,KACX,MAAS,KACT,KAAQ,KACR,QAAW,KACX,MAAS,KACT,QAAW,KACX,SAAY,KACZ,QAAW,KACX,UAAa,KACb,MAAS,KACT,QAAW,KACX,OAAU,KACV,SAAY,KACZ,SAAY,KACZ,UAAa,KACb,UAAa,OAIrB,OAAIA,EAAUyU,GACsB,QAAzB,EAAAzU,EAAUyU,GAASoG,UAAM,QAMxC,SAAwBwD,EAA+BxD,GACnD,OAAO9S,OAAOC,KAAKqW,GAAWjb,MAAKuD,GAAO0X,EAAU1X,KAASkU,KAAUA,CAC3E,CAR4CyD,CAAete,EAAUyU,GAAUoG,GAGpEA,CACX,CCxMA,MA8MA,IAAe,IAAAhM,OA9M+DvQ,IAC1E,MAAM,UACF0B,EAAS,aACTqL,EAAY,gBACZkM,EAAe,WACfpB,EAAU,aACVC,EAAY,oBACZ/B,EAAmB,SACnBM,EAAQ,KACR4J,EAAI,gBACJC,EAAe,iBACfC,EAAgB,wBAChBC,EAAuB,gBACvB3Z,GACAzG,GAEGqgB,EAAcC,IAAmB,IAAAhb,WAAS,IAC1Cib,EAAuBC,IAA4B,IAAAlb,WAAS,IAC5Dmb,EAAuBC,IAA6B,IAAApb,UAAS,CAChE+T,UAAW,GACXC,SAAU,GACVE,QAAS,GACTC,SAAU,GACVC,SAAU,GACVC,KAAM,GACNgH,gBAAiB,GACjB/C,oBAAqB,GACrBgD,mBAAmB,EACnBzK,QAAS,GACThV,YAAa,GACb0Y,WAAY,GACZN,MAAO,GACPU,aAAc,KAGZ4G,GAAgB,IAAArP,cAAY,KAC1B0O,GACAA,MAEL,CAACA,KAEJ,IAAA5f,YAAU,KACN,GAAIyM,EAAa,GAAI,CACjB,MAAM,yBAAClI,GAA4BkI,EAAa,GAE5ClI,IAA6BsM,GAA6BtM,IAC1Dgc,GAER,IACD,CAAC9T,KAEJ,IAAAzM,YAAU,KACwCmgB,EAAsBpH,YAAa,EAAAxC,GAAA,GAA2B9J,MACvFwT,IAA0BF,IAAiBD,KAC/BF,GAAmBC,KAGhDD,IACAC,IACA9J,EAAS,CAACwH,uBAAuB,EAAMpX,gBAAiBga,EAAuBlK,aAAc,QAElG,CAACgK,EAAuBlK,EAAUoK,EAAuB1K,EAAqBqK,EAAyBC,EAActT,IAExH,MAAM+T,EAAwBpf,aAAS,EAATA,EAAW6C,KAAI4R,IAAW,CAAEC,KAAMD,EAAQC,KAAM1V,KAAMyV,EAAQzV,SACtFqgB,EAAmBD,EAAwBA,EAAsBvc,KAAI4R,GAAWA,EAAQC,OAAM/J,KAAK,MAAQ,GAS3G2U,GAA8B,IAAAxP,cAAmByP,IAAkC,iD,MACrF,MAAM,SAACC,EAAQ,mBAAEC,EAAoBrY,OAAO,QAAEhF,EAAU,CAAEqS,QAAS,GAAIoG,MAAO,GAAI6E,MAAO,GAAIC,MAAO,GAAI1H,KAAM,GAAI2H,YAAa,IAAI,KAC7H5gB,EAAO,GAAE,UAAE2Y,EAAY,GAAE,SAAEC,EAAW,GAAE,MAAEC,EAAQ,KAAS0H,EAEjE,GAAIC,EAAU,CAZQ,EAACb,GAAe,EAAMc,EAA6B5H,KACzE,MAAMgI,EAAgBtB,EAAKuB,WACrBC,GAAoBhb,aAAe,EAAfA,EAAiB4S,YAAagH,EAGxD,OAAOkB,GAAiBE,GAFUN,IAAuB5H,GAUjDmI,CAAkBT,aAAQ,EAARA,EAAUZ,aAAcc,EAAoB5H,IAC9DsH,IAGJ,MAAMc,EAAQjhB,aAAI,EAAJA,EAAMkhB,MAAM,KACpBzL,EAAkF,QAAxE,EAAA2K,aAAqB,EAArBA,EAAuBhc,MAAKqR,GAAWA,EAAQC,OAAStS,EAAQqS,iBAAQ,eAAEzV,KACpF6b,EAAQuD,GAAkBhc,EAAQqS,QAASrS,EAAQyY,OACnDsF,EAAgB,CAClBxI,UAAWA,GAAasI,EAAM,GAC9BrI,SAAUA,GAAYqI,EAAM,GAC5BnI,QAAS,GACTC,SAAU3V,EAAQsd,MAClB1H,SAAU5V,EAAQud,OAAS,GAC3B1H,KAAM7V,EAAQ6V,KACdgH,gBAAiBpE,EACjBqB,oBAAqBrB,EACrBqE,mBAAmB,EACnBzK,QAASA,GAAWrS,EAAQqS,QAC5BhV,YAAa2C,EAAQqS,QACrB0D,WAAY/V,EAAQwd,YACpB/H,MAAOA,GAAS,GAChBU,aAAc,IAGbgG,EAAKuB,YACNhB,GAAyBjgB,IAAYA,IAGzC0Y,EAAgB4I,GAChBnB,EAAyBmB,GAErBZ,EAASZ,eAAiBA,GAC1BC,GAAgB/f,IAAYA,GAEpC,MACIsgB,GAGR,KAAG,CAACC,EAAuB7H,IAErBN,GAAqB,IAAAnH,cACvB,KAAAoH,aACKC,GAA+CjQ,GAC5CiP,EAAW,OAAD,wBACHgB,GACAjQ,MAGf,IAGEkZ,EAAuB,CACzBnkB,EACAokB,KACA,MAAMC,EAAkBC,SAASC,eAAevkB,GAEhD,GAAIqkB,EACA,OAAO,EAAAG,GAAA,GAAiBH,EAAiBD,IAuBvCnZ,EAAqC,CACvCwZ,UAAW,CACPC,UAAW,oBACXC,iBAAkBtB,EAClBuB,mBAAoBxB,EACpByB,WAtBiB,IAAAhR,cAAa,KACtC,MAAMiR,EAAc,8BACdC,EAAYZ,EAAqB,GAAGW,WAAsB,CAAC,QAAS,mBAAoB,eAAgB,eACxGE,EAAYb,EAAqB,GAAGW,WAAsB,CAAC,UAC3DG,EAAYd,EAAqB,GAAGW,WAAsB,CAAC,UAEjE,OAAOE,GAAaD,GAAaE,EAAY,CACzCC,UAAWF,EAAUG,MACrBC,UAAWL,EAAUI,MACrBE,qBAAsBN,EAAUI,MAChCG,eAAgBL,EAAUE,MAC1BI,gBAAiBR,EAAU,oBAC3BS,iBAAkBT,EAAU,cAC5BU,YAAaV,EAAU,sBACvBvjB,IACL,IAQS6gB,eAAgBF,GAChBuD,UAAW,YACX7P,SAAU,SA4BlB,OACI,gCACI,gBAAC,GAA4B,CACzBsE,aAAeA,EACfD,WAAac,EAAmB/P,GAChC4K,SAAS,cA7ByB,MAC1C,MAAMiP,EAAc,8BAEpB,OACI,uBACIrgB,UAAU,+BACVzE,GAAK,GAAG8kB,YAER,uBACIrgB,UAAU,qBAEV,uBACIA,UAAU,+BACVzE,GAAK,GAAG8kB,cAGhB,uBACIrgB,UAAU,+BACVzE,GAAK,GAAG8kB,eAada,OCtKlB,MAAMC,WAA2B,EAAAhR,cAAjC,c,oBAKI,KAAAgK,MAAiC,CAC7BE,wBAAwB,GA2DpB,KAAA1G,oBAAqC,KACzC,MAAM,UAAEnU,EAAS,aAAEmL,EAAY,QAAE2P,GAAYnZ,KAAKvD,OAE5C,uBAAEyc,GAA2BlZ,KAAKgZ,MAExC,QAAKG,IAIE9a,GAAa6a,KAA2B,EAAA5F,GAAA,GAA2B9J,KAGtE,KAAAiQ,oBAAyDlZ,IAAY,+CACzE,MAAM,cAAEmZ,EAAa,iBAAE/X,EAAmB,EAAAhI,KAAI,OAAEsD,EAAM,UAAEoK,GAAcrH,KAAKvD,MAE3E,UACUid,EAAcnZ,GAEpB8G,EAAU,OAAD,wBACFpK,GAAM,CACTiG,iBAAiB,EAAAvF,EAAA,GACbqC,KAAKvC,UAAU8C,EAAQ3C,aACvB2C,KAGZ,CAAE,MAAO8C,GACL1B,EAAiB0B,EACrB,CACJ,GAOJ,CA3FI,MAAA0M,GACI,MAAM,eACF0C,EAAc,qBACd9V,EAAoB,UACpB0B,EAAS,UACTF,EAAS,gBACTwe,EAAe,gBACfzZ,EAAe,aACfsG,EAAY,wBACZ+I,EAAuB,WACvB+B,EAAU,QACV6E,EAAO,aACP5E,EAAY,SACZzB,EAAQ,iBACR8J,EAAgB,KAChBF,EAAI,wBACJG,GACA7c,KAAKvD,OAEH,uBAAEyc,GAA2BlZ,KAAKgZ,MAExC,OACI,gBAACza,EAAA,EAAI,CAACC,aAAa,MACf,gBAACuW,GAAA,EAAQ,KACL,gBAAC,GAAqB,CAClBvL,aAAcA,EACdrL,UAAWA,EACXoW,aAAcA,EACdD,WAAYA,EACZuI,wBAAyBA,EACzBD,iBAAkBA,EAClBD,gBAAiBA,EACjBjH,gBAAiB1V,KAAKyZ,oBACtB3G,SAAUA,EACV5P,gBAAiBA,EACjBsP,oBAAqBxS,KAAKwS,sBAC1BkK,KAAMA,IAEV,uBAAK7d,UAAU,aACX,gBAAC,GAA0B,QAInC,gBAAC,GAAkB,CACf4T,eAAgBA,EAChB9V,qBAAsBA,EACtB0B,UAAWA,GAAa6a,EACxBpL,qBAAqB,EACrB0E,oBAAqBxS,KAAKwS,sBAC1BD,wBAAyBA,EACzB5C,0BAA2BwJ,IAI3C,CAgCQ,SAAA1b,CAAUG,GACd,MAAM,UAAEH,GAAcuC,KAAKvD,MAE3B,OAAOgB,EAAUG,EACrB,EAhGO,GAAAkd,YAAcpC,GAAA,GAmGzB,UAAe,EAAArb,EAAA,GACXf,EAA0F,CACtFgB,aAAc,CAACL,GAAUR,OAASqW,gBAC9BA,EAAS7V,IAEbO,iBAAkB,EACKC,YACAyF,kBACAkX,0BACArH,sBACE,CACrBuH,sBAAuBF,EACvBpH,aAAcD,EACd7P,iBAAiB,EAAAvF,EAAA,GACbF,EAAUyF,GAAmBA,EAAgBtF,aAC7CsF,KAGR6X,eAAgB,EAAG7X,kBAAiBzF,YAAWK,gBACzCoF,IACF,EAAAnF,EAAA,GAAqC,CACjCD,WACAE,WAAYP,EAAUyF,EAAgBtF,eACvCod,YAAY9X,GACnBrF,iBAAkB,EACKC,WACAL,YACAwS,cAEnBA,GACM,QAAO,CACL/M,iBAAiB,SAAkCiY,IAC/C,EAAAC,GAAA,GAAoC,CAChCtb,WAAW,OAAyBhC,GACpCE,WAAYP,EAAU0d,GAAcA,EAAWvd,oBAIzD,QAAO,CACLsF,iBAAiB,SAAkCiY,IAC/C,EAAApd,EAAA,GAAqC,CACjCD,WACAE,WAAYP,EAAU0d,GAAcA,EAAWvd,mBAInE2I,oBAAoB,GA7CxBjK,CA8CG0jB,KC/KP,MAAMC,WAAuB,EAAApJ,UACzB,WAAApX,CAAYhD,GACRkD,MAAMlD,GA0DF,KAAAyjB,qBAAmC,KACvClgB,KAAK2Z,SAAS,CAAEgD,iBAAiB,KAG7B,KAAAwD,iBAA+B,KACnCngB,KAAK2Z,SAAS,CAAEiD,kBAAkB,KA7DlC5c,KAAKgZ,MAAQ,CACT2D,iBAAiB,EACjBC,kBAAkB,EAE1B,CAEA,MAAA7M,GACI,MAAM,EAeF/P,KAAKvD,OAfH,wBACF2d,EAAuB,QACvBrX,EAAO,wBACP8Y,EAAuB,SACvBjZ,EAAQ,cACR8W,EAAa,WACbpF,EAAU,aACVC,EAAY,oBACZzG,EAAmB,KACnB4O,EAAI,SACJ5J,EAAQ,sBACR8I,EAAqB,UACrBvd,EAAS,wBACTwe,GAAuB,EACpBuD,GAAiB,cAdlB,+NAiBA,gBACFzD,EAAe,iBACfC,GACA5c,KAAKgZ,MAET,OAAO,gCACH,gBAACqH,EAAA1hB,EAAmB,CAACN,UAAWue,GAAoBD,IACpD,uBAAK9d,UAAU,gBAAgB+V,MAAO,CAAC0L,QAAS1D,GAAoBD,EAAkB,YAAS/gB,IAC3F,gBAAC,GAAc,CACXmH,QAASA,EACT+K,oBAAqBA,EACrB8N,sBAAuBA,EACvBC,wBAAyBA,IAE7B,gBAAC,GAAkB,iBACXuE,EAAiB,CACrB7L,aAAcA,EACdD,WAAYA,EACZ8F,wBAAyBA,EACzB/b,UAAWA,EACXyP,oBAAqBA,EACrB+O,wBAAyBA,EACzBD,iBAAkB5c,KAAKmgB,iBACvBxD,gBAAiB3c,KAAKkgB,qBACtBpN,SAAUA,EACV4J,KAAMA,EACNhD,cAAeA,MAI/B,EAWJ,YChBA,MAAMxV,WAAiB,EAAA2S,UACnB,WAAApX,CAAYhD,GACRkD,MAAMlD,GA8HF,KAAA8jB,8BAA4C,KAAY,+CAC5D,MAAM,aACF/W,EAAY,oBACZsE,EAAmB,sBACnB0S,EAAwB,EAAA7mB,KAAI,iBAC5BgI,EAAmB,EAAAhI,KAAI,sBACvB8mB,EAAqB,mBACrB7G,GACA5Z,KAAKvD,MAET,IACIuD,KAAK2Z,SAAS,CAAE+G,gBAAgB,IAE5B5S,GAAuBtE,EAAanN,aAE9BokB,EAAsBjX,EAAa,GAAGtG,uBAGtC0W,GAEd,CAAE,MAAOvW,GACL1B,EAAiB0B,EACrB,C,QACIrD,KAAK2Z,SAAS,CAAE+G,gBAAgB,GACpC,CAEAF,GACJ,IAEQ,KAAAG,2BAAyE,IAI3E,2CAJkF,sBACpFrG,EACApX,gBAAiB0d,EAAa,aAC9B5N,IAEA,MAAM,gBACFD,EAAe,eACf8N,EAAc,sBACdJ,EAAqB,qBACrBK,EAAoB,iBACpBC,EAAgB,iBAChBpf,EAAgB,gBAChBuB,EAAe,eACf8d,EAAc,SACd/Q,GACAjQ,KAAKvD,MAEHie,EAAyBkG,IAAiB,EAAAhd,EAAA,GAAyBgd,GACnEK,EAA8C,GAC9CC,EAAmBlhB,KAAKkhB,iBAAiBjR,IAE1C,EAAA4K,EAAA,GAAeH,EAAwBxX,KAAoBA,aAAe,EAAfA,EAAiBma,sBAAsB3C,aAAsB,EAAtBA,EAAwB2C,oBAC3H4D,EAASlZ,KAAK0Y,EAAsB/F,GAA0B,CAAC,IAI/DJ,GACAI,KACC,EAAAG,EAAA,GAAeH,EAAwBsG,KACvCE,GAEDD,EAASlZ,KAAK+Y,EAAqBpG,IAGnC3H,IAAoBC,GACpBiO,EAASlZ,KAAK8Y,EAAe,CAAE9N,gBAAiBC,KAGpD,UACUoG,QAAQ+H,IAAIF,GAElBF,EAAiBzG,EACrB,CAAE,MAAOjX,GACDA,aAAiBC,OACjB3B,EAAiB0B,EAEzB,CACJ,IAEQ,KAAA6d,iBAAoDjR,GAC3B,CAAC,aAEFwK,MAAMrM,GAAWA,IAAW6B,IAGpD,KAAAmR,0BAAuE,IAEzE,2CAFgF,aAClFpO,IAEA,MAAM,gBAAED,EAAe,eAAE8N,EAAc,iBAAEE,EAAgB,iBAAEpf,GAAqB3B,KAAKvD,MAErF,IACQsW,IAAoBC,UACd6N,EAAe,CAAE9N,gBAAiBC,KAG5C+N,GAAiB,EACrB,CAAE,MAAO1d,GACDA,aAAiBC,OACjB3B,EAAiB0B,EAEzB,CACJ,IAhOIrD,KAAKgZ,MAAQ,CACT0H,gBAAgB,EAChBzE,qCAAqC,EAE7C,CAEM,iBAAA5M,G,sDACF,MAAM,0BACFgS,EAAyB,yBACzBC,EAAwB,oBACxBC,EAAmB,QACnBC,EAAU,EAAA7nB,KAAI,iBACdgI,EAAmB,EAAAhI,KAAI,wBACvBmiB,EAAuB,oBACvBhO,GACA9N,KAAKvD,MAET,UACU2c,QAAQ+H,IAAI,CAACE,IAA6BE,IAAuBD,MAEnExF,GAA2BhO,GAC3B9N,KAAK2Z,SAAS,CAAEsC,qCAAqC,IAGzDuF,GACJ,CAAE,MAAOne,GACL1B,EAAiB0B,EACrB,C,QACIrD,KAAK2Z,SAAS,CAAE+G,gBAAgB,GACpC,CACJ,G,CAEA,MAAA3Q,GACI,MAAM,EAkBF/P,KAAKvD,OAlBH,wBACF2d,EAAuB,QACvBrX,EAAO,wBACP8Y,EAAuB,SACvBjZ,EAAQ,sBACR6d,EAAqB,yBACrBgB,EAAwB,2BACxBC,EAA0B,oBAC1B5T,EAAmB,4BACnBuN,EAA2B,KAC3BqB,EAAI,uBACJpe,EAAsB,uBACtBqjB,EAAsB,yBACtBC,EAAwB,wBACxB9F,EACA+F,gBAAgB,4BAAEpS,GAAgC,CAAC,EAAC,uBACpDgM,GAAsB,EACnB2E,GAAiB,cAjBlB,yWAoBA,eACFM,EAAc,oCACdzE,GACAjc,KAAKgZ,MAOT,OAAI2I,IAA2B/e,EAASkf,OAAS9hB,KAAKvD,MAAM0B,UAAU9B,OAAS,EACpE,gBAAC,GAAc,iBACb+jB,EAAiB,CACtBxd,SAAWA,EACX2R,aAAcmN,EACdpN,WAAYmN,EACZrH,wBAAyBA,EACzBrX,QAAUA,EACVpG,sBAAsBilB,IAA4BlB,EAClDriB,UAAYqiB,EACZ5S,oBAAqBA,EACrB+O,wBAA0B7c,KAAKvD,MAAM4B,UACrCud,sBAAwB5b,KAAKugB,8BAC7BzN,SAAU9S,KAAK2gB,2BACf9E,wBAA0BA,EAC1Ba,KAAMA,EACNhD,cAAe+G,KAKnB,gBAACJ,EAAA1hB,EAAmB,CAACN,UAAWqiB,EAAgBqB,mBAAoBH,GAChE,uBAAK/iB,UAAU,iBACX,gBAACwd,EAAA,EAAiB,CACd7iB,OA7BqB,KAAY,+CAC7CwG,KAAK2Z,SAAS,CAAEsC,qCAAqC,UAC/Cjc,KAAKugB,+BACf,IA2BgB9mB,kBAAmB,gBAACuF,EAAA,EAAgB,CAAC5E,GAAG,qBACxCf,SAAS,4CACTE,YAAa0iB,EACb3iB,UAAU,gDACVM,uBAAuB,IAE3B,gBAAC,GAAc,CACXkiB,wBAAyBA,EACzB/Y,QAASA,EACT+K,oBAAqBA,EACrB8N,sBAAuB5b,KAAKugB,8BAC5B1E,wBAAyBA,IAE7B,gBAAC,GAAY,iBACLuE,EAAiB,CACrBtd,UAAWF,EAASE,UACpByR,aAAcmN,EACdpN,WAAYmN,EACZrH,wBAAyBA,EACzB9b,uBAAwBA,EACxByE,QAASA,EACTsY,4BAA6BA,EAC7B1e,sBAAsBilB,IAA4BlB,EAClD5S,oBAAqBA,EACrBwN,sBAAuBtb,KAAKohB,0BAC5B7F,uBAAwBvb,KAAK2gB,2BAC7BlF,uBAAwBA,EACxBhM,4BAA6BA,EAC7B7Q,uBAAwBmE,EACxB2W,cAAe+G,MAKnC,EAyGJ,MAAMuB,IAA6B,IAAAtR,iBAC/B,EAAGjO,iBAAmB8I,wBAAgDA,IACtE,EAAGrJ,eAAiBxC,WAAmCA,EAAK4C,oBAC5D,CAACiJ,EAAmB/B,IAAiB,KAAY,iDAC7C,IAAKA,IAAiBA,EAAanN,OAC/B,OAGJ,OAAO,KAAEqD,UAAgB0Z,QAAQ+H,IAAI3X,EAAaxI,KAAI,EAAG5G,QAASmR,EAAkBnR,MAEpF,OAAOsF,EAAKuiB,oBAChB,MAGG,SAASC,IAAmB,gBAC/Bzf,EAAe,cACfP,I,MAEA,MACIxC,MAAM,QACF4R,EAAO,YACP3G,EAAW,UACXtI,EAAS,YACTD,EAAW,gBACXE,EAAe,mBACf2f,EAAkB,kBAClBE,EAAiB,yBACjB3f,EAAwB,qBACxBL,GAEJ6O,UAAU,sBACNmE,EAAqB,0BACrBjE,EAAyB,yBACzBD,EAAwB,sBACxBE,EAAqB,uBACrBC,EAAsB,0BACtBgR,EAAyB,2BACzBC,EAA0B,yBAC1BC,EAAwB,mBACxBC,EAAkB,sBAClBC,EAAqB,kBACrBC,IAEJvgB,EAEEpH,EAAW6P,IACX5P,EAASsH,IACTmH,EAAelH,KAAqB,GACpCM,EAAWR,IACXtG,EAAOwV,IAEb,KAAKxW,GAAaC,GAAW6H,GAAa9G,GACtC,OAAO,KAGX,MACIP,kBAAkB,oBACdgY,EAAmB,SACnBmP,EAAQ,wBACRhH,EAAuB,iBACvBzd,IAEJlD,EAEEkV,EAAWpV,EAAoBC,EAAUC,GACzCsD,EACF4S,KACAC,KACAC,KACAC,KACAkR,KACAC,KACAH,KACAI,KACAC,IAEE7d,GAAsB,EAAA+d,EAAA,GAAuB7mB,GAC7C+f,EACFH,IAA4BzL,GAAYrL,EAAsB,EAI5D1B,GACD2Y,GAA2BrS,EAAanN,OAAS,OAAIT,EAAYqmB,IAEhE5mB,GAA6B,EAAAC,EAAA,GAC/BP,EAAOQ,iBAAiBF,4BAGtBggB,GAA8B,EAAAuH,EAAA,GAAoB7nB,aAAM,EAANA,EAAQQ,iBAAkB,wDAElF,MAAO,CACH6P,WAAY3I,EAAgB0I,qBAC5B6V,eAAgBmB,IAChBrmB,OACAggB,wBAAyBjgB,EAAoBC,GAC7C0N,eACArL,UAAWgE,KAA0B,IACrCjE,0BAlB8B,CAAC,KAAM,KAAM,KAAM,KAAM,MAmBvD0E,WACAmQ,gBAAiBjY,EAASiY,gBAC1BpQ,sBAAuBF,EAAgBE,sBACvC+e,2BAA4Bjf,EAAgBogB,qBAC5CjJ,mBAAoBoI,GAA2B,CAAEvf,kBAAiBP,kBAClEzE,UAAW+E,EACXvE,mBACAwjB,yBAA0Bhf,EAAgB2S,mBAC1CrS,QAASH,EAASG,QAClB2d,eAAgB2B,KAAgCpR,IAChD5S,YACA8W,sBAAuBA,IACvBkM,0BAA2B5e,EAAgB4e,0BAC3CC,yBAA0B7e,EAAgB6e,yBAC1CC,oBAAqB9e,EAAgB8e,oBACrCtR,WACA5U,6BACA6H,kBACA0e,yBAAiF,QAAvD,EAAAc,EAAS,sDAA8C,SACjF7G,0BACAtJ,wBAAyBgB,EACzBiI,QAAS/Y,EAAgBqgB,gBACzBC,aAActgB,EAAgBugB,uBAC9BlC,qBAAsBre,EAAgBqe,qBACtCD,eAAgBpe,EAAgBoe,eAChCJ,sBAAuBhe,EAAgBge,sBACvCniB,wBAAwB,EAAAA,EAAA,GAAuBvD,EAAOQ,kBACtDomB,uBAAwBtmB,IAA+BJ,EAAA,EAAgBgoB,YAAa,EAAAC,EAAA,GAAmCpnB,GACvHuf,8BAER,CAEA,UAAe,EAAA8H,EAAA,IAAc,EAAA9R,EAAA,GAAa6Q,GAAb,CAAiChe,I","sources":["webpack://checkout/./packages/ui/src/modal/ConfirmationModal.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconChevronUp.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/shipping/hasPromotionalItems.tsx","webpack://checkout/./packages/core/src/app/common/form/withFormikExtended.tsx","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/ui/src/icon/IconEdit.tsx","webpack://checkout/./packages/core/src/app/shipping/GuestCustomerAddressSelector.tsx","webpack://checkout/./packages/core/src/app/shipping/utils/setRecommendedOrMissingShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentAddressSelector.tsx","webpack://checkout/./packages/core/src/app/shipping/ItemSplitTooltip.tsx","webpack://checkout/./packages/core/src/app/shipping/AllocatedItemsList.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItem.tsx","webpack://checkout/./packages/core/src/app/shipping/LeftToAllocateItemsTable.tsx","webpack://checkout/./packages/core/src/app/shipping/MultishippingType.ts","webpack://checkout/./packages/core/src/app/shipping/AllocateItemsModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/hooks/useDeallocateItem.ts","webpack://checkout/./packages/core/src/app/shipping/utils/generateItemHash.tsx","webpack://checkout/./packages/core/src/app/shipping/hooks/useMultishippingConsignmentItems.ts","webpack://checkout/./packages/core/src/app/shipping/ConsignmentLineItem.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsListItem.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/MultiShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ConsignmentListItem.tsx","webpack://checkout/./packages/core/src/app/shipping/isSelectedShippingOptionValid.ts","webpack://checkout/./packages/core/src/app/shipping/MultiShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/NewConsignment.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingGuestForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx"],"sourcesContent":["import { noop } from 'lodash';\nimport React, { ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize, ButtonVariant } from '../button';\n\nimport Modal from './Modal';\nimport ModalHeader from './ModalHeader';\n\ninterface ConfirmationModalProps {\n    headerId: string;\n    messageId: string;\n    isModalOpen: boolean;\n    onRequestClose?: () => void;\n    action: () => void;\n    actionButtonLabel?: ReactNode;\n    shouldShowCloseButton?: boolean;\n}\n\nconst ConfirmationModal = ({\n    headerId,\n    messageId,\n    isModalOpen,\n    action,\n    actionButtonLabel,\n    onRequestClose = noop,\n    shouldShowCloseButton = true,\n}: ConfirmationModalProps) => {\n    return (\n        <Modal\n            additionalModalClassName=\"modal--confirm\"\n            footer={\n                <Button onClick={action} size={ButtonSize.Small} variant={ButtonVariant.Primary}>\n                    {actionButtonLabel ?? <TranslatedString id=\"common.confirm_action\" />}\n                </Button>\n            }\n            header={\n                <ModalHeader>\n                    <span aria-live=\"assertive\" role=\"alert\">\n                        <TranslatedString id={headerId} />\n                    </span>\n                </ModalHeader>\n            }\n            isOpen={isModalOpen}\n            onRequestClose={onRequestClose}\n            shouldShowCloseButton={shouldShowCloseButton}\n        >\n            <p aria-live=\"assertive\" role=\"alert\">\n                <TranslatedString id={messageId} />\n            </p>\n        </Modal>\n    );\n};\n\nexport default ConfirmationModal;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronUp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronUp);\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.includes(preselectedPayment.providerId)) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.includes(providerWithCustomCheckout)\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nexport default function hasPromotionalItems(cart: Cart): boolean {\n    const { digitalItems = [], physicalItems } = cart.lineItems;\n    \n    return [...digitalItems, ...physicalItems].filter((item) => item.addedByPromotion)?.length > 0;\n}\n","import {\n    FormikProps,\n    FormikValues,\n    withFormik,\n    WithFormikConfig,\n} from 'formik';\nimport React, {\n    ComponentType,\n    useEffect,\n    useRef,\n} from 'react';\n\nexport interface WithFormikExtendedProps {\n    isInitialValueLoaded?: boolean;\n}\n\n/**\n * This HOC extends the behavior of the default `withFormik` HOC. It can reset a form to its initial state when\n * the `isInitialValueLoaded` prop is set to true. This is useful when a form needs to be rendered before its\n * initial value is fully loaded.\n */\nexport default function withFormikExtended<\n    TOuterProps extends object,\n    TValues extends FormikValues = FormikValues,\n    TPayload = TValues\n>(\n    config: WithFormikConfig<TOuterProps, TValues, TPayload>\n) {\n    return (\n        OriginalComponent: ComponentType<TOuterProps & FormikProps<TValues>>\n    ) => {\n        const DecoratedComponent: ComponentType<\n            TOuterProps & FormikProps<TValues> & WithFormikExtendedProps\n        > = (props) => {\n            const { resetForm, isInitialValueLoaded, initialValues } = props;\n            const previousIsInitialValueLoadedRef = useRef(isInitialValueLoaded);\n\n            useEffect(() => {\n                if (\n                    previousIsInitialValueLoadedRef.current === false &&\n                    isInitialValueLoaded === true\n                ) {\n                    resetForm({ values: initialValues ?? {} });\n                }\n\n                previousIsInitialValueLoadedRef.current = isInitialValueLoaded;\n            }, [isInitialValueLoaded, initialValues, resetForm]);\n\n            return <OriginalComponent {...props} />;\n        };\n\n        DecoratedComponent.displayName = `WithFormikExtended(${\n            OriginalComponent.displayName || OriginalComponent.name\n        })`;\n\n        return withFormik(config)(DecoratedComponent);\n    };\n}\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport mapAddressToFormValues, { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n    selectedAddress?: Address;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <Button\n                    onClick={onRequestClose}\n                    variant={ButtonVariant.Secondary}>\n                    <TranslatedString id=\"common.cancel_action\" />\n                </Button>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ getFields, selectedAddress }) => {\n            return mapAddressToFormValues(\n                getFields(selectedAddress && selectedAddress.countryCode),\n                selectedAddress,\n            )\n        },\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEdit: FunctionComponent = () => (\n    <svg fill=\"none\" height=\"20\" viewBox=\"0 0 20 20\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M2.49902 14.5511V17.0844C2.49902 17.3178 2.68236 17.5011 2.91569 17.5011H5.44902C5.55736 17.5011 5.66569 17.4594 5.74069 17.3761L14.8407 8.28444L11.7157 5.15944L2.62402 14.2511C2.54069 14.3344 2.49902 14.4344 2.49902 14.5511ZM17.2574 5.86777C17.5824 5.54277 17.5824 5.01777 17.2574 4.69277L15.3074 2.74277C14.9824 2.41777 14.4574 2.41777 14.1324 2.74277L12.6074 4.26777L15.7324 7.39277L17.2574 5.86777Z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEdit);\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport React from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconEdit, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport SingleLineStaticAddress from '../address/SingleLineStaticAddress';\n\ninterface GuestCustomerAddressSelectorProps {\n    onUseNewAddress(): void;\n    selectedAddress?: Address;\n}\n\nconst GuestCustomerAddressSelector = ({ onUseNewAddress, selectedAddress }: GuestCustomerAddressSelectorProps) => {\n    const { themeV2 } = useThemeContext();\n\n    return <div className='guest-consignment-line-item-header'>\n        {\n            !selectedAddress\n                ? <>\n                    <h3 className={themeV2 ? 'body-bold' : ''}>\n                        <TranslatedString id=\"shipping.guest_multishipping_no_shipping_address_message\" />\n                    </h3>\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"enter-shipping-address\"\n                        href=\"#\"\n                        onClick={preventDefault(onUseNewAddress)}\n                    >\n                        <TranslatedString id=\"shipping.guest_multishipping_enter_shipping_address_action\" />\n                    </a>\n                </>\n                : <>\n                    <SingleLineStaticAddress address={selectedAddress} />\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"edit-shipping-address\"\n                        href=\"#\"\n                        onClick={preventDefault(onUseNewAddress)}\n                    >\n                        <IconEdit />\n                    </a>\n                </>\n        }\n    </div>;\n}\n\nexport default GuestCustomerAddressSelector;\n","import { CheckoutSelectors, Consignment, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\n\nconst createShippingOptionsMap = (consignments: Consignment[]): Map<string, string | undefined> => {\n    return new Map(\n        consignments.map((consignment) => [consignment.id, consignment.selectedShippingOption?.id]),\n    );\n};\n\nexport const setRecommendedOrMissingShippingOption = async (\n    previousConsignment: Consignment[],\n    currentConsignments: Consignment[],\n    selectConsignmentShippingOption: (\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions<object>,\n    ) => Promise<CheckoutSelectors>,\n): Promise<void> => {\n    const previousShippingOptions = createShippingOptionsMap(previousConsignment);\n\n    for (const consignment of currentConsignments) {\n        if (!consignment.selectedShippingOption) {\n            const previousShippingOptionId = previousShippingOptions.get(consignment.id);\n\n            if (previousShippingOptionId) {\n                // eslint-disable-next-line no-await-in-loop\n                await selectConsignmentShippingOption(consignment.id, previousShippingOptionId);\n\n                continue;\n            }\n\n            const recommendedOption = consignment.availableShippingOptions?.find(\n                (option) => option.isRecommended,\n            );\n\n            if (recommendedOption) {\n                // eslint-disable-next-line no-await-in-loop\n                await selectConsignmentShippingOption(consignment.id, recommendedOption.id);\n            }\n        }\n    }\n};\n","import { Address, ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\nimport React, { useState } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { AddressFormModal, AddressFormValues, AddressSelect, AddressType, isValidAddress, mapAddressFromFormValues } from \"../address\";\nimport { ErrorModal } from \"../common/error\";\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from \"../common/utility\";\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from \"./errors\";\nimport GuestCustomerAddressSelector from \"./GuestCustomerAddressSelector\";\nimport { MultiShippingConsignmentData } from \"./MultishippingType\";\nimport { setRecommendedOrMissingShippingOption } from './utils';\n\ninterface ConsignmentAddressSelectorProps {\n    consignment?: MultiShippingConsignmentData;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    setConsignmentRequest?(consignmentRequest: ConsignmentCreateRequestBody): void;\n    selectedAddress?: Address;\n}\n\nconst ConsignmentAddressSelector = ({\n    consignment,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    selectedAddress,\n    setConsignmentRequest,\n}: ConsignmentAddressSelectorProps) => {\n    const [isOpenNewAddressModal, setIsOpenNewAddressModal] = useState(false);\n    const [createCustomerAddressError, setCreateCustomerAddressError] = useState<Error>();\n\n    const {\n        checkoutState: {\n            data: {\n                getShippingCountries,\n                getCustomer,\n                getConfig,\n                getConsignments: getPreviousConsignments,\n                getShippingAddressFields: getFields,\n            },\n        },\n        checkoutService: {\n            updateConsignment,\n            createCustomerAddress,\n            selectConsignmentShippingOption,\n        },\n    } = useCheckout();\n\n    const countries = getShippingCountries() || EMPTY_ARRAY;\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!config || !customer) {\n        return null;\n    }\n\n    const isFloatingLabelEnabledFlag = isFloatingLabelEnabled(config.checkoutSettings);\n    // TODO: add filter for addresses\n    const addresses = customer.addresses || EMPTY_ARRAY;\n    const {\n        checkoutSettings: {\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const isGuest = customer.isGuest;\n\n    const handleSelectAddress = async (address: Address) => {\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        if (!consignment) {\n            setConsignmentRequest?.({\n                address,\n                shippingAddress: address,\n                lineItems: [],\n            });\n\n            return;\n        }\n\n        try {\n            const {\n                data: { getConsignments },\n            } = await updateConsignment({\n                id: consignment.id,\n                address,\n                shippingAddress: address,\n                lineItems: consignment.lineItems.map(({ id, quantity }) => ({ itemId: id, quantity })),\n            });\n\n            const currentConsignments = getConsignments();\n\n            if (currentConsignments && currentConsignments.length > 0) {\n                await setRecommendedOrMissingShippingOption(\n                    getPreviousConsignments() ?? [],\n                    currentConsignments,\n                    selectConsignmentShippingOption,\n                );\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    }\n\n    const handleUseNewAddress = () => {\n        setIsOpenNewAddressModal(true);\n    }\n\n    const handleCloseAddAddressForm = () => {\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleSaveAddress = async (addressFormValues: AddressFormValues) => {\n        const address = mapAddressFromFormValues(addressFormValues);\n\n        await handleSelectAddress(address);\n\n        if (!isGuest) {\n            try {\n                await createCustomerAddress(address);\n            } catch (error) {\n                if (error instanceof Error) {\n                    setCreateCustomerAddressError(error);\n                }\n            }\n        }\n\n        setIsOpenNewAddressModal(false);\n    }\n\n    const handleCloseErrorModal = () => {\n        setCreateCustomerAddressError(undefined);\n    }\n\n    return (\n        <>\n            <ErrorModal\n                error={createCustomerAddressError}\n                message={\n                    <>\n                        <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                        <TranslatedString id=\"customer.create_address_error\" />\n                    </>\n                }\n                onClose={handleCloseErrorModal}\n                shouldShowErrorCode={false}\n            />\n            <AddressFormModal\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabledFlag}\n                isLoading={isLoading}\n                isOpen={isOpenNewAddressModal}\n                onRequestClose={handleCloseAddAddressForm}\n                onSaveAddress={handleSaveAddress}\n                selectedAddress={isGuest ? selectedAddress : undefined}\n            />\n            {isGuest\n                ? <GuestCustomerAddressSelector\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={selectedAddress}\n                />\n                : <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    placeholderText={<TranslatedString id=\"shipping.choose_shipping_address\" />}\n                    selectedAddress={selectedAddress}\n                    showSingleLineAddress\n                    type={AddressType.Shipping}\n                />\n            }\n        </>\n    )\n}\n\nexport default ConsignmentAddressSelector;\n","import React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { IconHelp, TooltipTrigger } from \"@bigcommerce/checkout/ui\";\n\nimport { Tooltip } from \"../ui/tooltip\";\nimport \"./ItemSplitTooltip.scss\";\n\nexport const ItemSplitTooltip: FunctionComponent = () => {\n    return (\n        <TooltipTrigger\n            placement=\"right-start\"\n            tooltip={\n                <Tooltip>\n                    <TranslatedString\n                        id=\"shipping.multishipping_item_split_tooltip_message\"\n                    />\n                </Tooltip>\n            }\n        >\n            <span className=\"item-split-tooltip\" data-test=\"split-item-tooltip\">\n                <IconHelp />\n            </span>\n        </TooltipTrigger>\n    )\n};\n","import React from \"react\";\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { IconClose } from \"../ui/icon\";\n\nimport { renderItemContent } from \"./ConsignmentLineItemDetail\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport { MultiShippingTableData, MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface AllocatedItemsListProps {\n    assignedItems: MultiShippingTableData;\n    onUnassignItem(itemToDelete: MultiShippingTableItemWithType): void;\n}\n\nconst AllocatedItemsList = ({ assignedItems, onUnassignItem }: AllocatedItemsListProps) => {\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <div className=\"allocated-line-items\">\n            <h3 className={themeV2 ? 'body-bold' : ''}>\n                <TranslatedString data={{ count: assignedItems.shippableItemsCount }} id=\"shipping.multishipping_item_allocated_message\" />\n                {assignedItems.hasSplitItems && (\n                    <ItemSplitTooltip />\n                )}\n            </h3>\n            <ul className=\"allocated-line-items-list\">\n                {assignedItems.lineItems.map(item => (\n                    <li key={item.id}>\n                        {renderItemContent(item, themeV2)}\n                        <span data-test={`remove-${item.id.toString()}-button`} onClick={() => onUnassignItem(item)}>\n                            <IconClose />\n                        </span>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default AllocatedItemsList;\n","import classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { FormField, TextInput } from \"../ui/form\";\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport { MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface LeftToAllocateItemProps {\n    item: MultiShippingTableItemWithType;\n    error?: string;\n}\n\nconst LeftToAllocateItem: FunctionComponent<LeftToAllocateItemProps> = ({ item, error }: LeftToAllocateItemProps) => {\n    const isMobileView = isMobileViewUI();\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <tr>\n            <td className=\"left-to-allocate-item-name-container\">\n                <figure className=\"left-to-allocate-item-figure\">\n                    {item.imageUrl && <img alt={item.name} src={item.imageUrl} />}\n                </figure>\n                <div>\n                    <p className={classNames('left-to-allocate-item-name',\n                        { 'body-regular': themeV2 })}>\n                        {item.name}\n                    </p>\n                    {item.options?.map(option => (\n                        <p className={classNames('left-to-allocate-item-option',\n                            { 'sub-text-medium': themeV2 })}\n                            key={option.nameId}>\n                            {option.name}: {option.value}\n                        </p>\n                    ))}\n                </div>\n            </td>\n            {!isMobileView && <td className={themeV2 ? 'body-regular' : ''}>{item.quantity}</td>}\n            <td className={themeV2 ? 'body-regular' : ''}>\n                {isMobileView && <TranslatedString data={{ count: item.quantity }} id=\"shipping.multishipping_left_to_allocate_message\" />}\n                <FormField\n                    additionalClassName={error ? \"form-field--error\" : \"\"}\n                    input={({ field }) => <TextInput\n                        {...field}\n                        aria-label={`Quantity of ${item.name}`}\n                        disabled={item.quantity === 0}\n                        id={field.name}\n                        min={0}\n                        themeV2={themeV2}\n                        type=\"number\"\n                    />}\n                    name={item.id.toString()}\n                />\n            </td>\n        </tr>\n    );\n}\n\nexport default LeftToAllocateItem;\n","import { FormikErrors } from \"formik\";\nimport React, { FunctionComponent } from \"react\";\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport { AllocateItemsModalFormValues } from \"./AllocateItemsModal\";\nimport LeftToAllocateItem from \"./LeftToAllocateItem\";\nimport { MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface LeftToAllocateItemsTableProps {\n    items: MultiShippingTableItemWithType[];\n    formErrors: FormikErrors<AllocateItemsModalFormValues>;\n}\n\nconst LeftToAllocateItemsTable: FunctionComponent<LeftToAllocateItemsTableProps> = ({ items, formErrors }: LeftToAllocateItemsTableProps) => {\n    const isMobileView = isMobileViewUI();\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <table className=\"table left-to-allocate-items-table\">\n            <thead>\n                <tr>\n                    <th className={themeV2 ? 'body-medium' : ''}><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_item\" /></th>\n                    {!isMobileView && <th className={themeV2 ? 'body-medium' : ''}><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_left_to_allocate\" /></th>}\n                    <th className={themeV2 ? 'body-medium' : ''}><TranslatedString id=\"shipping.multishipping_left_to_allocate_items_table_quantity\" /></th>\n                </tr>\n            </thead>\n            <tbody>\n                {items.map(item => (\n                    <LeftToAllocateItem\n                        error={formErrors[item.id.toString()]}\n                        item={item}\n                        key={item.id}\n                    />\n                ))}\n            </tbody>\n        </table>\n    );\n}\n\nexport default LeftToAllocateItemsTable;\n","import { Consignment, LineItemOption, PhysicalItem } from \"@bigcommerce/checkout-sdk\";\n\nexport enum LineItemType {\n    Physical,\n    Digital,\n    GiftCertificate,\n    Custom,\n}\n\nexport interface MultiShippingTableItem {\n    name: string;\n    options?: LineItemOption[];\n    giftWrapping?: PhysicalItem['giftWrapping'];\n    sku: string;\n    quantity: number;\n    id: string | number;\n    imageUrl?: string;\n}\n\nexport interface MultiShippingTableItemWithType extends MultiShippingTableItem {\n    type: LineItemType;\n}\n\nexport interface MultiShippingTableData {\n    lineItems: MultiShippingTableItemWithType[];\n    hasDigitalItems: boolean;\n    hasSplitItems: boolean;\n    shippableItemsCount: number;\n};\n\nexport interface MultiShippingConsignmentData extends Consignment, MultiShippingTableData {\n    consignmentNumber: number;\n}\n","import { Address, ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport { FormikProps } from \"formik\";\nimport React, { FunctionComponent, useMemo } from \"react\";\nimport { number, object } from \"yup\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString, withLanguage, WithLanguageProps } from \"@bigcommerce/checkout/locale\";\nimport { Alert, AlertType, ButtonVariant, useThemeContext } from \"@bigcommerce/checkout/ui\";\n\nimport { getAddressContent } from \"../address/SingleLineStaticAddress\";\nimport { withFormikExtended } from \"../common/form\";\nimport { Button } from \"../ui/button\";\nimport { Form } from \"../ui/form\";\nimport { Modal, ModalHeader } from \"../ui/modal\";\n\nimport AllocatedItemsList from \"./AllocatedItemsList\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport LeftToAllocateItemsTable from \"./LeftToAllocateItemsTable\";\nimport { LineItemType, MultiShippingTableData, MultiShippingTableItemWithType } from \"./MultishippingType\";\n\nexport interface AllocateItemsModalFormValues {\n    [key: string]: number;\n}\n\ninterface AllocateItemsModalProps {\n    consignmentNumber: number;\n    isOpen: boolean;\n    onRequestClose?(): void;\n    address: Address;\n    unassignedItems: MultiShippingTableData;\n    assignedItems?: MultiShippingTableData;\n    onAllocateItems(consignmentLineItems: ConsignmentLineItem[]): void;\n    onUnassignItem?(itemToDelete: MultiShippingTableItemWithType): void;\n    isLoading: boolean;\n}\n\nconst AllocateItemsModal: FunctionComponent<AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>> = ({\n    consignmentNumber,\n    isOpen,\n    onRequestClose,\n    address,\n    assignedItems,\n    unassignedItems,\n    setValues,\n    values,\n    dirty,\n    submitForm,\n    errors,\n    onUnassignItem,\n    isLoading,\n}: AllocateItemsModalProps & FormikProps<AllocateItemsModalFormValues>) => {\n\n    const { themeV2 } = useThemeContext();\n\n    const allocatedOrSelectedItemsMessage = useMemo(() => {\n        const leftItemsTotal = unassignedItems.shippableItemsCount;\n\n        if (values && dirty) {\n            const selectedItems = Object.keys(values).reduce((acc, key) => {\n                if (values[key] > 0) {\n                    acc += values[key];\n                }\n\n                return acc;\n            }, 0);\n\n            return <TranslatedString data={{ count: `${selectedItems}/${leftItemsTotal}` }} id=\"shipping.multishipping_items_selected_message\" />;\n        }\n\n        return <TranslatedString data={{ count: leftItemsTotal }} id=\"shipping.multishipping_item_to_allocate_message\" />;\n    }, [values]);\n\n    const handleSelectAll = () => {\n        const values: AllocateItemsModalFormValues = {};\n\n        unassignedItems.lineItems.forEach(item => {\n            values[item.id.toString()] = item.quantity;\n        });\n        setValues(values);\n    };\n\n    const handleClearAll = () => {\n        const values: AllocateItemsModalFormValues = {};\n\n        unassignedItems.lineItems.forEach(item => {\n            values[item.id.toString()] = 0;\n        });\n        setValues(values);\n    }\n\n    const formErrors = useMemo(() => {\n        const errorKeys = Object.keys(errors);\n\n        return errorKeys.reduce((acc: string[], key: string) => {\n            const error = errors[key];\n\n            if (error) {\n                acc.push(error);\n            }\n\n            return Array.from(new Set(acc));\n        }, []);\n    }, [errors]);\n\n    const hasItemsAssigned = !!assignedItems && assignedItems.lineItems.length > 0 && !!onUnassignItem;\n    const hasUnassignedItems = !!unassignedItems && unassignedItems.lineItems.length > 0;\n\n    const modalFooter = (\n        <>\n            <Button\n                className={themeV2 ? 'body-medium' : ''}\n                disabled={isLoading}\n                onClick={onRequestClose}\n                variant={ButtonVariant.Secondary}\n            >\n                <TranslatedString id=\"shipping.multishipping_items_allocate_cancel\" />\n            </Button>\n            <Button\n                className={themeV2 ? 'body-medium' : ''}\n                disabled={!hasItemsAssigned && !dirty}\n                isLoading={isLoading}\n                onClick={submitForm}\n                type=\"submit\"\n                variant={ButtonVariant.Primary}\n            >\n                {hasItemsAssigned\n                    ? <TranslatedString id=\"shipping.multishipping_items_allocate_save\" />\n                    : <TranslatedString id=\"shipping.multishipping_items_allocate_allocate\" />\n                }\n            </Button>\n        </>\n    );\n\n    return (\n        <Modal\n            additionalModalClassName=\"allocate-items-modal\"\n            footer={modalFooter}\n            header={\n                <>\n                    <ModalHeader additionalClassName={themeV2 ? 'header' : ''}>\n                        <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                    </ModalHeader>\n                    <h4 className={themeV2 ? 'body-medium' : ''}>{getAddressContent(address)}</h4>\n                </>\n            }\n            isOpen={isOpen}\n            onRequestClose={onRequestClose}\n        >\n            <Form>\n                {formErrors.length > 0 && (\n                    <div className=\"form-errors\">\n                        {formErrors.map((error, index) => (\n                            <Alert key={index} type={AlertType.Error}>{error}</Alert>\n                        ))}\n                    </div>\n                )}\n                {unassignedItems.hasDigitalItems && (\n                    <Alert type={AlertType.Info}>\n                        <TranslatedString id=\"shipping.multishipping_digital_item_no_shipping_banner\" />\n                    </Alert>\n                )}\n                {hasItemsAssigned && (\n                    <AllocatedItemsList assignedItems={assignedItems} onUnassignItem={onUnassignItem} />\n                )}\n                {hasUnassignedItems\n                    ? <>\n                        <div className=\"left-to-allocate-items-table-actions\">\n                            <p className={themeV2 ? 'body-regular' : ''}>\n                                {allocatedOrSelectedItemsMessage}\n                                {unassignedItems.hasSplitItems && (\n                                    <ItemSplitTooltip />\n                                )}\n                            </p>\n\n                            <div className=\"button-group\">\n                                <a\n                                    className={themeV2 ? 'body-cta' : ''}\n                                    data-test=\"clear-all-items-button\"\n                                    href=\"#\"\n                                    onClick={preventDefault(handleClearAll)}\n                                >\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_clear_all\" />\n                                </a>\n                                <a\n                                    className={themeV2 ? 'body-cta' : ''}\n                                    data-test=\"allocate-all-items-button\"\n                                    href=\"#\"\n                                    onClick={preventDefault(handleSelectAll)}\n                                >\n                                    <TranslatedString id=\"shipping.multishipping_items_allocate_select_all_items_left\" />\n                                </a>\n                            </div>\n                        </div>\n                        <LeftToAllocateItemsTable\n                            formErrors={errors}\n                            items={unassignedItems.lineItems}\n                        />\n                    </>\n                    : null\n                }\n            </Form>\n        </Modal>\n    )\n}\n\nexport default withLanguage(\n    withFormikExtended<AllocateItemsModalProps & WithLanguageProps, AllocateItemsModalFormValues>({\n        handleSubmit: (values, { props: { onAllocateItems } }) => {\n            const consignmentLineItems = Object.keys(values).filter(key => values[key] > 0).map((lineItemId: string) => ({\n                itemId: lineItemId,\n                quantity: values[lineItemId],\n            }));\n\n            onAllocateItems(consignmentLineItems);\n        },\n        mapPropsToValues: ({ unassignedItems }) => {\n            const values: AllocateItemsModalFormValues = {};\n\n            unassignedItems.lineItems.forEach(item => {\n                values[item.id.toString()] = 0;\n            });\n\n            return values;\n        },\n        enableReinitialize: true,\n        validationSchema: ({ language, unassignedItems }: AllocateItemsModalProps & WithLanguageProps) => {\n            const createItemSchema = (item: MultiShippingTableItemWithType) => {\n                const baseSchema = number()\n                    .required(language.translate('shipping.quantity_required_error'))\n                    .integer(language.translate('shipping.quantity_invalid_error'))\n                    .min(0, language.translate('shipping.quantity_min_error'))\n                    .max(item.quantity, language.translate('shipping.quantity_max_error'))\n\n                if (item.type === LineItemType.Custom) {\n                    return baseSchema\n                        .oneOf([0, item.quantity], language.translate('shipping.custom_item_quantity_error'))\n                }\n\n                return baseSchema;\n            };\n\n            const schemaObject = Object.fromEntries(\n                unassignedItems.lineItems.map((item) => [item.id.toString(), createItemSchema(item)]),\n            );\n\n            return object().shape(schemaObject);\n        },\n        validateOnBlur: true,\n        validateOnChange: false,\n    })(AllocateItemsModal),\n);\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        /* istanbul ignore next */\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Consignment, ConsignmentCreateRequestBody } from \"@bigcommerce/checkout-sdk\";\n\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nexport const useDeallocateItem = () => {\n    const {\n        checkoutService: { createConsignments, deleteConsignment },\n    } = useCheckout();\n\n    // this is a workaround to handle removing an item from a consignment\n    // current consignment API does not support removing an item directly - Oct 2024\n\n    const deleteItem = async (consignmentRequest: ConsignmentCreateRequestBody, itemId: string, consignment: Consignment) => {\n        let consignmentIdToBeDeleted: string | undefined = consignment.id;\n\n        if (consignment.lineItemIds.length > 1) {\n            const checkoutResponse = await createConsignments([consignmentRequest]);\n\n            const consignmentsReponse = checkoutResponse.data.getConsignments();\n\n            consignmentIdToBeDeleted = consignmentsReponse?.find((c) =>\n                c.lineItemIds.find((lineItemId) => lineItemId === itemId),\n            )?.id;\n        }\n\n        if (!consignmentIdToBeDeleted) {\n            throw new Error('Unable to find consignment to delete');\n        }\n\n        deleteConsignment(consignmentIdToBeDeleted);\n    }\n\n    return deleteItem;\n}\n","import { LineItem, LineItemOption } from \"@bigcommerce/checkout-sdk\";\n\nconst generateHash = (values: string[]): string => {\n  return btoa(encodeURIComponent(values.join('-')));\n};\n\nconst generateProductOptionsHash = (options: LineItemOption[] | undefined): string => {\n  if (!options) {\n    return '';\n  }\n\n  return generateHash(\n    options.map((option) =>\n      generateHash([\n        option.name,\n        option.nameId.toString(),\n        option.value,\n        option.valueId ? option.valueId.toString() : '',\n      ]),\n    ),\n  );\n};\n\nexport const generateItemHash = (item: LineItem): string => {\n  return generateHash([\n    item.productId.toString(),\n    item.variantId.toString(),\n    item.sku,\n    generateProductOptionsHash(item.options),\n  ]);\n};\n","import { Consignment, LineItemMap } from \"@bigcommerce/checkout-sdk\";\n\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\n\nimport { LineItemType, MultiShippingConsignmentData, MultiShippingTableData, MultiShippingTableItemWithType } from \"../MultishippingType\";\nimport { generateItemHash } from \"../utils\";\n\ninterface MultiShippingConsignmentItemsHook {\n    unassignedItems: MultiShippingTableData;\n    consignmentList: MultiShippingConsignmentData[];\n}\n\n// TODO: consolidate this from /app/order/removeBundledItems\nfunction removeBundledItems(lineItems: LineItemMap): LineItemMap {\n    return {\n        ...lineItems,\n        physicalItems: lineItems.physicalItems.filter((item) => typeof item.parentId !== 'string'),\n        digitalItems: lineItems.digitalItems.filter((item) => typeof item.parentId !== 'string'),\n    };\n}\n\nconst calculateShippableItemsCount = (items: MultiShippingTableItemWithType[]): number => {\n    return items.reduce((total, item) => total + item.quantity, 0);\n};\n\nconst hasSplitItem = (\n    items: MultiShippingTableItemWithType[],\n    itemHashMap: Map<string, string>,\n  ): boolean => {\n    const processedHashes = new Set<string>();\n  \n    for (const item of items) {\n      const hash = itemHashMap.get(item.id.toString());\n\n      if (!hash) continue;\n  \n      if (processedHashes.has(hash)) {\n        return true;\n      }\n  \n      processedHashes.add(hash);\n    }\n  \n    return false;\n  };\n\nfunction mapConsignmentsItems(\n    lineItems: LineItemMap,\n    consignments: Consignment[],\n): {\n        consignmentList: MultiShippingConsignmentData[];\n        unassignedItems: MultiShippingTableData;\n    } {\n    const unassignedItemsMap = new Map<string, MultiShippingTableItemWithType>();\n    const digitalItemsMap = new Map<string, MultiShippingTableItemWithType>();\n\n    const itemHashMap = new Map<string, string>();\n\n    const consignmentList: MultiShippingConsignmentData[] = [];\n\n    lineItems.physicalItems.forEach((item) => {\n        unassignedItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Physical });\n        itemHashMap.set(item.id.toString(), generateItemHash(item));\n    });\n    lineItems.customItems?.forEach((item) =>\n        unassignedItemsMap.set(item.id, { ...item, type: LineItemType.Custom }),\n    );\n    lineItems.digitalItems.forEach((item) =>\n        digitalItemsMap.set(item.id.toString(), { ...item, type: LineItemType.Digital }),\n    );\n\n    consignments.forEach((consignment, index) => {\n        const consignmentLineItems: MultiShippingTableItemWithType[] = [];\n\n        consignment.lineItemIds.forEach((itemId) => {\n            const item = unassignedItemsMap.get(itemId);\n\n            if (item) {\n                consignmentLineItems.push(item);\n                unassignedItemsMap.delete(itemId);\n            }\n        });\n\n        consignmentList.push({\n            ...consignment,\n            consignmentNumber: index + 1,\n            hasDigitalItems: false,\n            hasSplitItems: hasSplitItem(consignmentLineItems, itemHashMap),\n            shippableItemsCount: calculateShippableItemsCount(consignmentLineItems),\n            lineItems: consignmentLineItems,\n        });\n    });\n\n    const unassignedItemsList = Array.from(unassignedItemsMap.values());\n\n    const unassignedItems: MultiShippingTableData = {\n        lineItems: unassignedItemsList,\n        hasDigitalItems: digitalItemsMap.size > 0,\n        hasSplitItems: hasSplitItem(unassignedItemsList, itemHashMap),\n        shippableItemsCount: calculateShippableItemsCount(unassignedItemsList),\n    };\n\n    return { consignmentList, unassignedItems };\n}\n\nconst defaultMultiShippingConsignmentItems: MultiShippingConsignmentItemsHook = {\n    unassignedItems: {\n        lineItems: [],\n        hasDigitalItems: false,\n        hasSplitItems: false,\n        shippableItemsCount: 0,\n    },\n    consignmentList: [],\n};\n\nexport const useMultiShippingConsignmentItems = (): MultiShippingConsignmentItemsHook => {\n    const { checkoutState: {\n        data: { getCheckout },\n    },\n    } = useCheckout();\n\n    const checkout = getCheckout();\n\n    if (!checkout) {\n        return defaultMultiShippingConsignmentItems;\n    }\n\n    const {\n        cart: { lineItems },\n        consignments,\n    } = checkout;\n\n    const nonBundledLineItems = removeBundledItems(lineItems);\n\n    const { consignmentList, unassignedItems } =\n        mapConsignmentsItems(nonBundledLineItems, consignments);\n\n    return {\n        unassignedItems,\n        consignmentList,\n    };\n};\n","import { ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent, useState } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { IconChevronDown, IconChevronUp } from \"../ui/icon\";\nimport { isMobileView as isMobileViewUI } from \"../ui/responsive\";\n\nimport AllocateItemsModal from \"./AllocateItemsModal\";\nimport ConsignmentLineItemDetail from \"./ConsignmentLineItemDetail\";\nimport { AssignItemFailedError, UnassignItemError } from \"./errors\";\nimport { useDeallocateItem } from \"./hooks/useDeallocateItem\";\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\nimport { ItemSplitTooltip } from \"./ItemSplitTooltip\";\nimport { MultiShippingConsignmentData, MultiShippingTableItemWithType } from \"./MultishippingType\";\n\ninterface ConsignmentLineItemProps {\n    consignmentNumber: number;\n    consignment: MultiShippingConsignmentData;\n    onUnhandledError(error: Error): void;\n    isLoading: boolean;\n}\n\nconst ConsignmentLineItem: FunctionComponent<ConsignmentLineItemProps> = ({ consignmentNumber, consignment, onUnhandledError, isLoading }: ConsignmentLineItemProps) => {\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\n    const [showItems, setShowItems] = useState(true);\n\n    const { unassignedItems } = useMultiShippingConsignmentItems();\n    const { checkoutService: { assignItemsToAddress: assignItem } } = useCheckout();\n    const deleteItem = useDeallocateItem();\n    const { themeV2 } = useThemeContext();\n\n    const toggleAllocateItemsModal = () => {\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\n    }\n\n    const handleAssignItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\n        try {\n            await assignItem({\n                address: consignment.address,\n                lineItems: consignmentLineItems,\n            });\n\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        } finally {\n            toggleAllocateItemsModal();\n        }\n    }\n\n    const handleUnassignItems = async (itemToDelete: MultiShippingTableItemWithType) => {\n        try {\n            const consignmentRequest = {\n                address: consignment.address,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: [\n                    {\n                        quantity: itemToDelete.quantity,\n                        itemId: itemToDelete.id,\n                    },\n                ],\n            }\n\n            await deleteItem(consignmentRequest, itemToDelete.id.toString(), consignment);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    }\n\n    const toggleShowItems = () => {\n        setShowItems(!showItems);\n    }\n\n    const isMobileView = isMobileViewUI();\n\n    const itemsCount = consignment.shippableItemsCount;\n\n    return (\n        <div>\n            <AllocateItemsModal\n                address={consignment.shippingAddress}\n                assignedItems={consignment}\n                consignmentNumber={consignmentNumber}\n                isLoading={isLoading}\n                isOpen={isOpenAllocateItemsModal}\n                onAllocateItems={handleAssignItems}\n                onRequestClose={toggleAllocateItemsModal}\n                onUnassignItem={handleUnassignItems}\n                unassignedItems={unassignedItems}\n            />\n            <div className=\"consignment-line-item-header\">\n                <div>\n                    <h3 className={themeV2 ? 'body-bold' : ''}>\n                        <TranslatedString data={{ count: itemsCount }} id=\"shipping.multishipping_item_allocated_message\" />\n                    </h3>\n\n                    {consignment.hasSplitItems && (\n                        <ItemSplitTooltip />\n                    )}\n\n                    <a\n                        className={classNames('expand-items-button',\n                            { 'body-cta': themeV2 }\n                        )}\n                        data-test=\"expand-items-button\"\n                        href=\"#\"\n                        onClick={preventDefault(toggleShowItems)}\n                    >\n                        {showItems ? (\n                            <>\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_hide_items_message\" />}\n                                <IconChevronUp />\n                            </>\n                        ) : (\n                            <>\n                                {!isMobileView && <TranslatedString id=\"shipping.multishipping_item_show_items_message\" />}\n                                <IconChevronDown />\n                            </>\n                        )}\n                    </a>\n                </div>\n                <a\n                    className={themeV2 ? 'body-cta' : ''}\n                    data-test=\"reallocate-items-button\"\n                    href=\"#\"\n                    onClick={preventDefault(toggleAllocateItemsModal)}\n                >\n                    <TranslatedString id=\"shipping.multishipping_item_reallocated_message\" />\n                </a>\n            </div>\n            {showItems\n                ? <ConsignmentLineItemDetail lineItems={consignment.lineItems} />\n                : null\n            }\n        </div>\n    )\n}\n\nexport default ConsignmentLineItem;\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { RadioInput, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { ShopperCurrency } from '../../currency';\n\ninterface MultiShippingOptionsListItemProps {\n    consignmentId: string;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n    handleSelect: (consignmentId: string, shippingOptionId: string) => void;\n}\n\nexport const MultiShippingOptionsListItem: FunctionComponent<\n    MultiShippingOptionsListItemProps\n> = ({ consignmentId, selectedShippingOptionId, shippingOption, handleSelect }) => {\n    const { themeV2 } = useThemeContext();\n\n    const label = (\n        <span className={themeV2 ? 'body-regular' : ''}>\n            {`${shippingOption.description} - `}\n            <ShopperCurrency amount={shippingOption.cost} />\n        </span>\n    );\n\n    const selectThisOption = () => {\n        handleSelect(consignmentId, shippingOption.id);\n    };\n\n    return (\n        <ul className=\"shipping-option-item\">\n            <RadioInput\n                checked={selectedShippingOptionId === shippingOption.id}\n                id={`shippingOption-${consignmentId}-${shippingOption.id}`}\n                key={`key-${consignmentId}-${shippingOption.id}`}\n                label={label}\n                name={`${consignmentId}-shippingMethod`}\n                onClick={selectThisOption}\n                readOnly\n                value={shippingOption.id}\n            />\n        </ul>\n    );\n};\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { MultiShippingOptionsListItem } from './MultiShippingOptionsListItem';\n\ninterface MultiShippingOptionsListV2Props {\n    consignmentId: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst MultiShippingOptionsListV2: FunctionComponent<MultiShippingOptionsListV2Props> = ({\n    consignmentId,\n    isLoading,\n    shippingOptions,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            {shippingOptions.map((shippingOption) => (\n                <MultiShippingOptionsListItem\n                    consignmentId={consignmentId}\n                    handleSelect={onSelectedOption}\n                    key={shippingOption.id}\n                    selectedShippingOptionId={selectedShippingOptionId}\n                    shippingOption={shippingOption}\n                />\n            ))}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(MultiShippingOptionsListV2);\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ExtensionRegion, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    isMultiShippingMode,\n    selectedShippingOptionId,\n    shippingOption,\n}) => {\n    const isSelected = selectedShippingOptionId === shippingOption.id;\n\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n                {(isSelected && !isMultiShippingMode) && (\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\n                )}\n            </div>\n        ),\n        [isSelected, isMultiShippingMode, shippingOption],\n    );\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    isMultiShippingMode,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        isMultiShippingMode={isMultiShippingMode}\n                        key={shippingOption.id}\n                        selectedShippingOptionId={selectedShippingOptionId}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport { withFormikExtended } from '../../common/form';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps &\n    WithCheckoutShippingOptionsProps &\n    AnalyticsContextProps;\n\nconst getShippingOptionIds = ({ consignments }: ShippingOptionsFormProps) => {\n    const shippingOptionIds: { [id: string]: string } = {};\n\n    (consignments || []).forEach((consignment) => {\n        shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n            ? consignment.selectedShippingOption.id\n            : '';\n    });\n\n    return { shippingOptionIds };\n};\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate({ shippingFormRenderTimestamp }: ShippingOptionsFormProps): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions,\n            shippingFormRenderTimestamp: newShippingFormRenderTimestamp,\n            setValues,\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n\n        if (newShippingFormRenderTimestamp !== shippingFormRenderTimestamp) {\n            setValues(getShippingOptionIds(this.props));\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            isMultiShippingMode={isMultiShippingMode}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(\n    withFormikExtended<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n        handleSubmit: noop,\n        mapPropsToValues: getShippingOptionIds,\n    })(ShippingOptionsForm),\n);\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isInitialValueLoaded: boolean;\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n    shippingFormRenderTimestamp?: number;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nexport const isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, isUpdatingAddress?: boolean) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout, config);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props.isUpdatingAddress),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Alert, AlertType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport MultiShippingOptionsListV2 from './MultiShippingOptionsList';\nimport { isLoadingSelector } from './ShippingOptions';\n\ninterface MultiShippingOptionsV2Props {\n    consignment: Consignment;\n    isLoading: boolean;\n    shippingQuoteFailedMessage: string;\n    resetErrorConsignmentNumber(): void;\n}\n\nexport const MultiShippingOptions = ({\n    consignment,\n    isLoading,\n    resetErrorConsignmentNumber,\n    shippingQuoteFailedMessage,\n}: MultiShippingOptionsV2Props) => {\n    const { checkoutService, checkoutState } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const selectShippingOption = async (consignmentId: string, shippingOptionId: string) => {\n        await checkoutService.selectConsignmentShippingOption(consignmentId, shippingOptionId);\n        resetErrorConsignmentNumber();\n    };\n    const isLoadingOptions = isLoadingSelector(checkoutState, isLoading)(consignment.id);\n\n    return (\n        <div>\n            <h3 className={classNames('shipping-option-header',\n                { 'body-bold': themeV2 })}\n            >\n                <TranslatedString id=\"shipping.shipping_method_label\" />\n            </h3>\n            {(!consignment.availableShippingOptions ||\n                !consignment.availableShippingOptions.length) && (\n                    <Alert type={AlertType.Error}>{shippingQuoteFailedMessage}</Alert>\n                )}\n            {Boolean(consignment.availableShippingOptions) &&\n                consignment.availableShippingOptions && (\n                    <MultiShippingOptionsListV2\n                        consignmentId={consignment.id}\n                        isLoading={isLoadingOptions}\n                        onSelectedOption={selectShippingOption}\n                        selectedShippingOptionId={\n                            consignment.selectedShippingOption &&\n                            consignment.selectedShippingOption.id\n                        }\n                        shippingOptions={consignment.availableShippingOptions}\n                    />\n                )}\n        </div>\n    );\n};\n","import classNames from 'classnames';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { IconClose, IconSize } from \"../ui/icon\";\n\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\nimport ConsignmentLineItem from './ConsignmentLineItem';\nimport { MultiShippingConsignmentData } from './MultishippingType';\nimport { MultiShippingOptions } from './shippingOption/MultiShippingOptions';\n\nexport interface ConsignmentListItemProps {\n    consignment: MultiShippingConsignmentData;\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    shippingQuoteFailedMessage: string;\n    onUnhandledError(error: Error): void;\n    resetErrorConsignmentNumber(): void;\n}\n\nconst ConsignmentListItem: FunctionComponent<ConsignmentListItemProps> = ({\n    consignment,\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    shippingQuoteFailedMessage,\n    onUnhandledError,\n    resetErrorConsignmentNumber,\n}: ConsignmentListItemProps) => {\n\n    const { checkoutService: { deleteConsignment } } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const handleClose = async () => {\n        await deleteConsignment(consignment.id);\n        resetErrorConsignmentNumber();\n    };\n\n    return (\n        <div className='consignment-container'>\n            <div className={classNames('consignment-header', { 'sub-header': themeV2 })}>\n                <h3>\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                </h3>\n                <a\n                    className=\"delete-consignment\"\n                    data-test=\"delete-consignment-button\"\n                    href=\"#\"\n                    onClick={preventDefault(handleClose)}\n                >\n                    <IconClose size={IconSize.Small} />\n                </a>\n            </div>\n            <ConsignmentAddressSelector\n                consignment={consignment}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={consignment.shippingAddress}\n            />\n            <ConsignmentLineItem\n                consignment={consignment}\n                consignmentNumber={consignmentNumber}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n            />\n            <MultiShippingOptions\n                consignment={consignment}\n                isLoading={isLoading}\n                resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                shippingQuoteFailedMessage={shippingQuoteFailedMessage}\n            />\n        </div>\n    );\n};\n\nexport default ConsignmentListItem;\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { every } from 'lodash';\n\nexport default function isSelectedShippingOptionValid(consignments: Consignment[]): boolean {\n    if (!consignments.length) {\n        return false;\n    }\n\n    return every(\n        consignments,\n        consignment => {\n            if (consignment.selectedShippingOption?.type === 'custom') {\n                return true;\n            }\n\n            return consignment.availableShippingOptions &&\n                consignment.availableShippingOptions.find(\n                    ({ id }) => id === consignment.selectedShippingOption?.id\n                );\n        }\n    );\n}\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\n\nexport interface ShippingFormFooterProps {\n    shouldShowOrderComments: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n    cartHasChanged: boolean;\n}\n\nconst MultiShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    shouldShowOrderComments,\n    shouldDisableSubmit,\n    isLoading,\n    cartHasChanged,\n}) => {\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <Form>\n            {cartHasChanged && (\n                <Alert type={AlertType.Error}>\n                    <strong>\n                        <TranslatedString id=\"shipping.cart_change_error\" />\n                    </strong>\n                </Alert>\n            )}\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    className={themeV2 ? 'body-bold' : ''}\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default MultiShippingFormFooter;\n","import { Consignment, ConsignmentCreateRequestBody, ConsignmentLineItem } from \"@bigcommerce/checkout-sdk\";\nimport classNames from \"classnames\";\nimport { find } from \"lodash\";\nimport React, { useMemo, useState } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedString } from \"@bigcommerce/checkout/locale\";\nimport { useCheckout } from \"@bigcommerce/checkout/payment-integration-api\";\nimport { useThemeContext } from \"@bigcommerce/checkout/ui\";\n\nimport { EMPTY_ARRAY } from \"../common/utility\";\n\nimport AllocateItemsModal from \"./AllocateItemsModal\";\nimport ConsignmentAddressSelector from './ConsignmentAddressSelector';\nimport { AssignItemFailedError } from \"./errors\";\nimport { useMultiShippingConsignmentItems } from \"./hooks/useMultishippingConsignmentItems\";\nimport { setRecommendedOrMissingShippingOption } from './utils';\n\ninterface NewConsignmentProps {\n    consignmentNumber: number;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    setIsAddShippingDestination: React.Dispatch<React.SetStateAction<boolean>>;\n    onUnhandledError(error: Error): void;\n    resetErrorConsignmentNumber(): void;\n}\n\nconst NewConsignment = ({\n    consignmentNumber,\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    resetErrorConsignmentNumber,\n    setIsAddShippingDestination,\n}: NewConsignmentProps) => {\n    const [consignmentRequest, setConsignmentRequest] = useState<ConsignmentCreateRequestBody | undefined>();\n    const [isOpenAllocateItemsModal, setIsOpenAllocateItemsModal] = useState(false);\n    const { unassignedItems } = useMultiShippingConsignmentItems();\n    const { themeV2 } = useThemeContext();\n    const {\n        checkoutState: {\n            data: { getShippingCountries, getConsignments: getPreviousConsignments },\n        },\n        checkoutService: { assignItemsToAddress: assignItem, selectConsignmentShippingOption },\n    } = useCheckout();\n\n    const selectedAddress = useMemo(() => {\n        if (!consignmentRequest?.address) {\n            return undefined;\n        }\n\n        const countries = getShippingCountries() || EMPTY_ARRAY;\n        const country = find(countries, { code: consignmentRequest.address.countryCode });\n\n        return {\n            ...consignmentRequest.address,\n            country: country ? country.name : consignmentRequest.address.countryCode,\n        };\n    }, [consignmentRequest]);\n\n    const toggleAllocateItemsModal = () => {\n        setIsOpenAllocateItemsModal(!isOpenAllocateItemsModal);\n    }\n\n    const handleAllocateItems = async (consignmentLineItems: ConsignmentLineItem[]) => {\n        let currentConsignments: Consignment[] | undefined;\n\n        if (!selectedAddress) {\n            return;\n        }\n\n        try {\n            const {\n                data: { getConsignments },\n            } = await assignItem({\n                address: selectedAddress,\n                lineItems: consignmentLineItems,\n            });\n\n            currentConsignments = getConsignments();\n        } catch (error) {\n            if (error instanceof AssignItemFailedError) {\n                onUnhandledError(error);\n            }\n        } finally {\n            toggleAllocateItemsModal();\n            setIsAddShippingDestination(false);\n            resetErrorConsignmentNumber();\n\n            if (currentConsignments && currentConsignments.length > 0) {\n                await setRecommendedOrMissingShippingOption(\n                    getPreviousConsignments() ?? [],\n                    currentConsignments,\n                    selectConsignmentShippingOption,\n                );\n            }\n        }\n    };\n\n    return (\n        <div className='consignment-container'>\n            <div className={classNames('consignment-header', { 'sub-header': themeV2 })}>\n                <h3>\n                    <TranslatedString data={{ consignmentNumber }} id=\"shipping.multishipping_consignment_index_heading\" />\n                </h3>\n            </div>\n            <ConsignmentAddressSelector\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                defaultCountryCode={defaultCountryCode}\n                isLoading={isLoading}\n                onUnhandledError={onUnhandledError}\n                selectedAddress={selectedAddress}\n                setConsignmentRequest={setConsignmentRequest}\n            />\n            {selectedAddress && (<>\n                <AllocateItemsModal\n                    address={selectedAddress}\n                    consignmentNumber={consignmentNumber}\n                    isLoading={isLoading}\n                    isOpen={isOpenAllocateItemsModal}\n                    onAllocateItems={handleAllocateItems}\n                    onRequestClose={toggleAllocateItemsModal}\n                    unassignedItems={unassignedItems}\n                />\n                <div className=\"new-consignment-line-item-header\">\n                    <h3 className={themeV2 ? 'body-bold' : ''}>\n                        <TranslatedString id=\"shipping.multishipping_no_item_allocated_message\" />\n                    </h3>\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"allocate-items-button\"\n                        href=\"#\"\n                        onClick={preventDefault(toggleAllocateItemsModal)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_allocate_items\" />\n                    </a>\n                </div>\n            </>\n            )}\n        </div>\n    )\n}\n\nexport default NewConsignment;\n","import classNames from 'classnames';\nimport React, {FunctionComponent, ReactNode, useMemo, useState} from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Alert, AlertType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { withFormikExtended } from '../common/form';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { Button, ButtonVariant } from '../ui/button';\n\nimport ConsignmentListItem from './ConsignmentListItem';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport { useMultiShippingConsignmentItems } from './hooks/useMultishippingConsignmentItems';\nimport isSelectedShippingOptionValid from './isSelectedShippingOptionValid';\nimport MultiShippingFormFooter from './MultiShippingFormFooter';\nimport { MultiShippingConsignmentData } from './MultishippingType';\nimport './MultiShippingForm.scss';\nimport NewConsignment from './NewConsignment';\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport interface MultiShippingFormProps {\n    cartHasChanged: boolean;\n    customerMessage: string;\n    defaultCountryCode?: string;\n    countriesWithAutocomplete: string[];\n    isLoading: boolean;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: MultiShippingFormValues): void;\n}\n\nconst MultiShippingForm: FunctionComponent<MultiShippingFormProps> = ({\n    countriesWithAutocomplete,\n    defaultCountryCode,\n    isLoading,\n    onUnhandledError,\n    cartHasChanged,\n}: MultiShippingFormProps) => {\n    const [errorConsignmentNumber, setErrorConsignmentNumber] = useState<number | undefined>();\n\n    const { themeV2 } = useThemeContext();\n    const {\n        checkoutState: {\n            data: { getConsignments, getConfig },\n        },\n    } = useCheckout();\n    const { unassignedItems: { lineItems: unassignedLineItems, shippableItemsCount }, consignmentList } = useMultiShippingConsignmentItems();\n\n    const consignments = getConsignments() || EMPTY_ARRAY;\n    const config = getConfig();\n\n    const [isAddShippingDestination, setIsAddShippingDestination] = useState(\n        consignments.length === 0,\n    );\n\n    const isEveryConsignmentHasShippingOption = hasSelectedShippingOptions(consignments);\n    const shouldDisableSubmit = useMemo(() => {\n        return isLoading || !!unassignedLineItems.length || !isEveryConsignmentHasShippingOption || !isSelectedShippingOptionValid(consignments);\n    }, [isLoading, consignments]);\n\n    if (!config) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments: shouldShowOrderComments,\n            shippingQuoteFailedMessage,\n        },\n    } = config;\n\n    const handleAddShippingDestination = () => {\n        if (!isAddShippingDestination && !isEveryConsignmentHasShippingOption) {\n            const errorConsignmentIndex = consignments.findIndex(\n                (consignment) => !consignment.selectedShippingOption,\n            );\n\n            if (errorConsignmentIndex === -1) {\n                setIsAddShippingDestination(true);\n\n                return;\n            }\n\n            setErrorConsignmentNumber(errorConsignmentIndex + 1);\n        } else if (isAddShippingDestination) {\n            setErrorConsignmentNumber(consignments.length + 1);\n        } else {\n            setErrorConsignmentNumber(undefined);\n            setIsAddShippingDestination(true);\n        }\n    };\n\n    const hasUnassignedItems = shippableItemsCount > 0;\n\n    const renderAllocatedBanner = (shippableItemsCount: number): ReactNode => {\n        if (shippableItemsCount > 0) {\n            return <Alert additionalClassName={themeV2 ? 'body-regular' : ''} type={AlertType.Info}>\n                <TranslatedString data={{ count: shippableItemsCount }} id=\"shipping.multishipping_item_to_allocate_message\" />\n            </Alert>;\n        }\n\n        return <Alert additionalClassName={themeV2 ? 'body-regular' : ''} type={AlertType.Success}>\n            <TranslatedString id=\"shipping.multishipping_all_items_allocated_message\" />\n        </Alert>;\n    }\n    const resetErrorConsignmentNumber = () => {\n        setErrorConsignmentNumber(undefined);\n    };\n\n    return (\n        <>\n            {renderAllocatedBanner(shippableItemsCount)}\n            {consignmentList.map((consignment: MultiShippingConsignmentData) => (\n                <ConsignmentListItem\n                    consignment={consignment}\n                    consignmentNumber={consignment.consignmentNumber}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    key={consignment.id}\n                    onUnhandledError={onUnhandledError}\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                    shippingQuoteFailedMessage={shippingQuoteFailedMessage}\n                />\n            ))}\n            {isAddShippingDestination && (\n                <NewConsignment\n                    consignmentNumber={consignments.length === 0 ? 1 : (consignments.length + 1)}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    isLoading={isLoading}\n                    onUnhandledError={onUnhandledError}\n                    resetErrorConsignmentNumber={resetErrorConsignmentNumber}\n                    setIsAddShippingDestination={setIsAddShippingDestination}\n                />)\n            }\n            {hasUnassignedItems &&\n                <Button\n                    className={classNames({ 'body-regular': themeV2 }, 'add-consignment-button')}\n                    onClick={handleAddShippingDestination}\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"shipping.multishipping_add_new_destination\" />\n                </Button>\n            }\n            {Boolean(errorConsignmentNumber) && (\n                <div className=\"form-field--error\">\n                    <span className=\"form-inlineMessage\">\n                        <TranslatedString\n                            data={{ consignmentNumber: errorConsignmentNumber }}\n                            id=\"shipping.multishipping_incomplete_consignment_error\"\n                        />\n                    </span>\n                </div>\n            )}\n            <MultiShippingFormFooter\n                cartHasChanged={cartHasChanged}\n                isLoading={isLoading}\n                shouldDisableSubmit={shouldDisableSubmit}\n                shouldShowOrderComments={shouldShowOrderComments}\n            />\n        </>\n    );\n}\n\nexport default withLanguage(\n    withFormikExtended<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import React, { FunctionComponent } from \"react\";\n\nimport { preventDefault } from \"@bigcommerce/checkout/dom-utils\";\nimport { TranslatedLink, TranslatedString } from \"@bigcommerce/checkout/locale\";\n\ninterface MultiShippingGuestFormProps {\n    onSignIn(): void;\n    onCreateAccount(): void;\n}\n\nconst MultiShippingGuestForm: FunctionComponent<MultiShippingGuestFormProps> = ({\n    onSignIn,\n    onCreateAccount\n}: MultiShippingGuestFormProps) => {\n    return (\n        <div className=\"checkout-step-info\">\n            <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n            <a\n                data-test=\"shipping-sign-in-link\"\n                href=\"#\"\n                onClick={preventDefault(onSignIn)}\n            >\n                <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n            </a>{' '}\n            <TranslatedLink\n                id=\"shipping.multishipping_guest_create\"\n                onClick={onCreateAccount}\n            />\n        </div>\n    )\n};\n\nexport default MultiShippingGuestForm;\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const { themeV2 } = useThemeContext();\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n            testId=\"billingSameAsShipping\"\n            themeV2={themeV2}\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FC, useCallback } from 'react';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { memo, MutableRefObject } from 'react';\n\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    countries?: Country[];\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    paypalFastlaneShippingComponentRef: MutableRefObject<PayPalFastlaneAddressComponentRef>;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        formFields,\n        isLoading,\n        onAddressSelect,\n        onFieldChange,\n        countries,\n        paypalFastlaneShippingComponentRef,\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\n        onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponentRef.current.showAddressSelector === 'function') {\n            const selectedAddress =\n                await paypalFastlaneShippingComponentRef.current.showAddressSelector();\n\n            if (selectedAddress) {\n                const customFields = shouldShowCustomFormFields ? address.customFields : {};\n\n                onAddressSelect({\n                    ...selectedAddress,\n                    ...customFields,\n                });\n            }\n        }\n    };\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {!!(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {!!(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {!!address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {!!address.city && (\n                                    <span className=\"locality\">{`${address.city}, `}</span>\n                                )}\n                                {!!address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {!!address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {!!address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(PayPalFastlaneShippingAddressForm);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { AddressForm, AddressSelect, AddressType, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                                type={AddressType.Shipping}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField\n} from '@bigcommerce/checkout-sdk';\nimport React, { FC, useEffect, useRef, useState } from 'react';\n\nimport {\n    isBigCommercePaymentsFastlaneMethod,\n    isBraintreeFastlaneMethod,\n    isPayPalCommerceFastlaneMethod,\n    isPayPalFastlaneMethod,\n    PayPalFastlaneShippingAddressForm,\n    usePayPalFastlaneAddress,\n} from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId?: string,\n    shippingAddress?:  Address,\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[],\n    googleMapsApiKey?: string;\n    handleFieldChange(fieldName: string, value: string): void,\n    onAddressSelect(address: Address): void;\n}\n\ninterface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        addresses,\n        handleFieldChange,\n        isLoading\n    } = props;\n    const [isLoadingStrategy, setIsLoadingStrategyStrategy] = useState<boolean>(true);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n    const fastlaneOptions = (provider: string) => {\n        return {\n            [provider]: {\n                onPayPalFastlaneAddressChange: (\n                    showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n                ) => {\n                    paypalFastlaneShippingComponent.current.showAddressSelector =\n                        showPayPalFastlaneAddressSelector;\n                },\n            },\n        };\n    }\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...(isBigCommercePaymentsFastlaneMethod(methodId) ? fastlaneOptions('bigcommerce_payments_fastlane') : {}),\n                ...(isBraintreeFastlaneMethod(methodId) ? fastlaneOptions('braintreefastlane') : {}),\n                ...(isPayPalCommerceFastlaneMethod(methodId) ? fastlaneOptions('paypalcommercefastlane') : {})\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n\n        setIsLoadingStrategyStrategy(false);\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n    const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoadingStrategy || isLoading}>\n            {methodId && isPayPalFastlaneMethod(methodId) && shippingAddress && shouldShowPayPalFastlaneShippingForm ? (\n                <PayPalFastlaneShippingAddressForm\n                    address={shippingAddress}\n                    countries={countries}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initialize}\n                    isLoading={isLoadingStrategy}\n                    methodId={methodId}\n                    onAddressSelect={onAddressSelect}\n                    onFieldChange={onFieldChange}\n                    onUnhandledError={onUnhandledError}\n                    paypalFastlaneShippingComponentRef={paypalFastlaneShippingComponent}\n                />\n            ) : (\n                <ShippingAddressForm\n                    address={shippingAddress}\n                    addresses={addresses}\n                    consignments={props.consignments}\n                    countries={countries}\n                    countriesWithAutocomplete={props.countriesWithAutocomplete}\n                    formFields={formFields}\n                    googleMapsApiKey={props.googleMapsApiKey}\n                    isFloatingLabelEnabled={props.isFloatingLabelEnabled}\n                    isLoading={isLoadingStrategy}\n                    onAddressSelect={onAddressSelect}\n                    onFieldChange={handleFieldChange}\n                    onUseNewAddress={props.onUseNewAddress}\n                    shouldShowSaveAddress={props.shouldShowSaveAddress}\n                />\n            )}\n        </LoadingOverlay>\n    );\n};","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useContext } from 'react';\n\nimport { isPayPalFastlaneMethod } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId && isPayPalFastlaneMethod(methodId) && shippingAddress) {\n        return (\n            <PayPalFastlaneShippingAddress\n                {...props}\n                handleFieldChange={handleFieldChange}\n                methodId={methodId}\n                shippingAddress={shippingAddress}\n            />\n        )\n    }\n\n    if (methodId === 'amazonpay' && shippingAddress) {\n        return (\n            <AmazonPayShippingAddress\n                {...props}\n                shippingAddress={shippingAddress}\n            />\n        );\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    shippingFormRenderTimestamp?: number;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isInitialValueLoaded,\n    isLoading,\n    shippingFormRenderTimestamp,\n}) => {\n    const { themeV2 } = useThemeContext();\n\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend themeV2={themeV2}>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    className={themeV2 ? 'body-bold' : ''}\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { withFormikExtended } from '../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport isSelectedShippingOptionValid from './isSelectedShippingOptionValid';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shippingAutosaveDelay?: number;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    shippingFormRenderTimestamp?: number;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n    const methodIdsWithoutCustomValidation: string[] = [\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n\n    return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    componentDidUpdate({ shippingFormRenderTimestamp }: SingleShippingFormProps) {\n        const {\n            shippingFormRenderTimestamp: newShippingFormRenderTimestamp,\n            setValues,\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n            values,\n            setFieldValue,\n        } = this.props;\n\n        const stateOrProvinceCodeFormField = getFields(values && values.shippingAddress?.countryCode).find(\n            ({ name }) => name === 'stateOrProvinceCode',\n        );\n\n        // Workaround for a bug found during manual testing:\n        // When the shipping step first loads, the `stateOrProvinceCode` field may not be there.\n        // It later appears with an empty value if the selected country has states/provinces.\n        // To address this, we manually set `stateOrProvinceCode` in Formik.\n        if (\n            stateOrProvinceCodeFormField &&\n            shippingAddress?.stateOrProvinceCode &&\n            !values.shippingAddress?.stateOrProvinceCode\n        ) {\n            setFieldValue('shippingAddress.stateOrProvinceCode', shippingAddress.stateOrProvinceCode);\n        }\n\n        // This is for executing extension command, `ReRenderShippingForm`.\n        if (newShippingFormRenderTimestamp !== shippingFormRenderTimestamp) {\n            setValues({\n                billingSameAsShipping: isBillingSameAsShipping,\n                orderComment: customerMessage,\n                shippingAddress: mapAddressToFormValues(\n                    getFields(shippingAddress && shippingAddress.countryCode),\n                    shippingAddress,\n                ),\n            });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isFloatingLabelEnabled,\n            shippingFormRenderTimestamp,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments) || !isSelectedShippingOptionValid(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            shouldHaveCustomValidation(methodId)\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false, // This is false due to the concern that a shopper may lose typed details if somehow checkout state changes in the middle.\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { useEffect } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport isUsingMultiShipping from './isUsingMultiShipping';\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport MultiShippingGuestForm from './MultiShippingGuestForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    isGuestMultiShippingEnabled: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n    shippingFormRenderTimestamp?: number;\n    setIsMultishippingMode(isMultiShippingMode: boolean): void;\n}\n\nconst ShippingForm = ({\n    addresses,\n    cart,\n    cartHasChanged,\n      consignments,\n      countries,\n      countriesWithAutocomplete,\n      onCreateAccount,\n      customerMessage,\n      deinitialize,\n      deleteConsignments,\n      getFields,\n      googleMapsApiKey,\n      initialize,\n      isBillingSameAsShipping,\n      isGuest,\n      isLoading,\n      isMultiShippingMode,\n      isGuestMultiShippingEnabled,\n      methodId,\n      onMultiShippingSubmit,\n      onSignIn,\n      onSingleShippingSubmit,\n    onUnhandledError,\n      shippingAddress,\n      shouldShowOrderComments,\n      shouldShowSaveAddress,\n      signOut,\n      updateAddress,\n      isShippingStepPending,\n      isFloatingLabelEnabled,\n    isInitialValueLoaded,\n    shippingFormRenderTimestamp,\n    setIsMultishippingMode,\n}: ShippingFormProps & WithLanguageProps) => {\n    const {\n        checkoutState: {\n            data: { getConfig },\n        },\n    } = useCheckout();\n    const config = getConfig();\n\n    useEffect(() => {\n        if (shippingFormRenderTimestamp) {\n            const hasMultiShippingEnabled = config?.checkoutSettings?.hasMultiShippingEnabled ?? false;\n            const isMultiShippingMode =\n                !!cart &&\n                !!consignments &&\n                hasMultiShippingEnabled &&\n                isUsingMultiShipping(consignments, cart.lineItems);\n\n            setIsMultishippingMode(isMultiShippingMode);\n        }\n    }, [shippingFormRenderTimestamp]);\n\n    const getMultiShippingForm = () => {\n        if (isGuest && !isGuestMultiShippingEnabled) {\n            return (\n                <MultiShippingGuestForm onCreateAccount={onCreateAccount} onSignIn={onSignIn} />\n            );\n        }\n\n        return <MultiShippingForm\n            cartHasChanged={cartHasChanged}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            isLoading={isLoading}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n        />;\n    };\n\n    return isMultiShippingMode ? (\n        getMultiShippingForm()\n    ) : (\n        <SingleShippingForm\n            addresses={addresses}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            signOut={signOut}\n            updateAddress={updateAddress}\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, memo, useState } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ConfirmationModal , useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Legend } from '../ui/form';\n\nimport './ShippingHeader.scss';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n    cartHasPromotionalItems?: boolean;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n    cartHasPromotionalItems,\n}) => {\n    const [isSingleShippingConfirmationModalOpen, setIsSingleShippingConfirmationModalOpen] = useState(false);\n    const [isMultiShippingUnavailableModalOpen, setIsMultiShippingUnavailableModalOpen] = useState(false);\n\n    const { themeV2 } = useThemeContext();\n\n    const handleShipToSingleConfirmation = () => {\n        setIsSingleShippingConfirmationModalOpen(false);\n        onMultiShippingChange();\n    }\n\n    const showConfirmationModal = shouldShowMultiShipping && isMultiShippingMode;\n    const showMultiShippingUnavailableModal = shouldShowMultiShipping && !isMultiShippingMode && cartHasPromotionalItems;\n\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\n            <div className={classNames(['form-legend-container', 'shipping-header'])}>\n                <Legend testId=\"shipping-address-heading\" themeV2={themeV2}>\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {showConfirmationModal && (\n                    <>\n                        <ConfirmationModal\n                            action={handleShipToSingleConfirmation}\n                            actionButtonLabel={<TranslatedString id=\"common.proceed_action\" />}\n                            headerId=\"shipping.ship_to_single_action\"\n                            isModalOpen={isSingleShippingConfirmationModalOpen}\n                            messageId=\"shipping.ship_to_single_message\"\n                            onRequestClose={() => setIsSingleShippingConfirmationModalOpen(false)}\n                        />\n                        <a\n                            className={themeV2 ? 'body-cta' : ''}\n                            data-test=\"shipping-mode-toggle\"\n                            href=\"#\"\n                            onClick={preventDefault(() => setIsSingleShippingConfirmationModalOpen(true))}\n                        >\n                            <TranslatedString id=\"shipping.ship_to_single\" />\n                        </a>\n                    </>\n                )}\n                {showMultiShippingUnavailableModal && (\n                    <>\n                        <ConfirmationModal\n                            action={() => setIsMultiShippingUnavailableModalOpen(false)}\n                            actionButtonLabel={<TranslatedString id=\"common.back_action\" />}\n                            headerId=\"shipping.multishipping_unavailable_action\"\n                            isModalOpen={isMultiShippingUnavailableModalOpen}\n                            messageId=\"shipping.multishipping_unavailable_message\"\n                            onRequestClose={() => setIsMultiShippingUnavailableModalOpen(false)}\n                        />\n                        <a\n                            className={themeV2 ? 'body-cta' : ''}\n                            data-test=\"shipping-mode-toggle\"\n                            href=\"#\"\n                            onClick={preventDefault(() => setIsMultiShippingUnavailableModalOpen(true))}\n                        >\n                            <TranslatedString id=\"shipping.ship_to_multi\" />\n                        </a>\n                    </>\n                )}\n                {!showConfirmationModal && !showMultiShippingUnavailableModal && shouldShowMultiShipping && (\n                    <a\n                        className={themeV2 ? 'body-cta' : ''}\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(\n    country: string,\n    state: string,\n): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'JP': {\n            'Aichi': '23',\n            'Akita': '05',\n            'Aomori': '02',\n            'Chiba': '12',\n            'Ehime': '38',\n            'Fukui': '18',\n            'Fukuoka': '40',\n            'Fukushima': '07',\n            'Gifu': '21',\n            'Gunma': '10',\n            'Hiroshima': '34',\n            'Hokkaido': '01',\n            'Hyogo': '28',\n            'Ibaraki': '08',\n            'Ishikawa': '17',\n            'Iwate': '03',\n            'Kagawa': '37',\n            'Kagoshima': '46',\n            'Kanagawa': '14',\n            'Kochi': '39',\n            'Kumamoto': '43',\n            'Kyoto': '26',\n            'Mie': '24',\n            'Miyagi': '04',\n            'Miyazaki': '45',\n            'Nagano': '20',\n            'Nagasaki': '42',\n            'Nara': '29',\n            'Niigata': '15',\n            'Oita': '44',\n            'Okayama': '33',\n            'Okinawa': '47',\n            'Osaka': '27',\n            'Saga': '41',\n            'Saitama': '11',\n            'Shiga': '25',\n            'Shimane': '32',\n            'Shizuoka': '22',\n            'Tochigi': '09',\n            'Tokushima': '36',\n            'Tokyo': '13',\n            'Tottori': '31',\n            'Toyama': '16',\n            'Wakayama': '30',\n            'Yamagata': '06',\n            'Yamaguchi': '35',\n            'Yamanashi': '19'\n        },\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n            const country = availableShippingList?.find(country => country.code === address.country)?.name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { withFormikExtended } from '../../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { Fieldset, Form } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isInitialValueLoaded: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { ExtensionContextProps, withExtension } from '@bigcommerce/checkout/checkout-extension';\nimport { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton, ConfirmationModal } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isExperimentEnabled, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport hasPromotionalItems from './hasPromotionalItems';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n    setIsMultishippingMode(isMultiShippingMode: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    cartHasPromotionalItems: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    shouldRenderWhileLoading: boolean;\n    isGuestMultiShippingEnabled: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadBillingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n    isMultiShippingUnavailableModalOpen: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps & ExtensionContextProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps & ExtensionContextProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n            isMultiShippingUnavailableModalOpen: false,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadBillingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n            cartHasPromotionalItems,\n            isMultiShippingMode,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions(), loadBillingAddressFields()]);\n\n            if (cartHasPromotionalItems && isMultiShippingMode) {\n                this.setState({ isMultiShippingUnavailableModalOpen: true });\n            }\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            isGuestMultiShippingEnabled,\n            step,\n            isFloatingLabelEnabled,\n            shouldRenderStripeForm,\n            shouldRenderWhileLoading,\n            cartHasPromotionalItems,\n            extensionState: { shippingFormRenderTimestamp } = {},\n            setIsMultishippingMode,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n            isMultiShippingUnavailableModalOpen,\n        } = this.state;\n\n        const handleSwitchToSingleShipping = async () => {\n            this.setState({ isMultiShippingUnavailableModalOpen: false });\n            await this.handleMultiShippingModeSwitch();\n        }\n\n        if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n                isLoading={ isInitializing }\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingMethodLoading={ this.props.isLoading }\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing} renderWhileLoading={shouldRenderWhileLoading}>\n                <div className=\"checkout-form\">\n                    <ConfirmationModal\n                        action={handleSwitchToSingleShipping}\n                        actionButtonLabel={<TranslatedString id=\"common.ok_action\" />}\n                        headerId=\"shipping.multishipping_unavailable_action\"\n                        isModalOpen={isMultiShippingUnavailableModalOpen}\n                        messageId=\"shipping.checkout_switched_to_single_shipping\"\n                        shouldShowCloseButton={false}\n                    />\n                    <ShippingHeader\n                        cartHasPromotionalItems={cartHasPromotionalItems}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isGuestMultiShippingEnabled={isGuestMultiShippingEnabled}\n                        isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        setIsMultishippingMode={setIsMultishippingMode}\n                        shippingFormRenderTimestamp={shippingFormRenderTimestamp}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n            deleteConsignments,\n        } = this.props;\n\n        try {\n            this.setState({ isInitializing: true });\n\n            if (isMultiShippingMode && consignments.length) {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            }\n            else {\n                await deleteConsignments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n            isDeletingConsignment,\n            isLoadingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout, config);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress() ||\n        isDeletingConsignment() ||\n        isLoadingCheckout();\n\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings.providerWithCustomCheckout,\n    );\n\n    const isGuestMultiShippingEnabled = isExperimentEnabled(config?.checkoutSettings, 'CHECKOUT-9161.enable_storefront_guest_multi_shipping');\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        cartHasPromotionalItems: hasPromotionalItems(cart),\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout,\n        shippingAddress,\n        shouldRenderWhileLoading: features['CHECKOUT-8300.improve_extension_performance'] ?? true,\n        shouldShowMultiShipping,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n        shouldRenderStripeForm: providerWithCustomCheckout === PaymentMethodId.StripeUPE && shouldUseStripeLinkByMinimumAmount(cart),\n        isGuestMultiShippingEnabled,\n    };\n}\n\nexport default withExtension(withCheckout(mapToShippingProps)(Shipping));\n"],"names":["headerId","messageId","isModalOpen","action","actionButtonLabel","onRequestClose","noop","shouldShowCloseButton","additionalModalClassName","footer","onClick","size","Small","variant","Primary","id","header","role","isOpen","height","viewBox","width","xmlns","d","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","AmazonPay","BraintreeAcceleratedCheckout","PayPalCommerceAcceleratedCheckout","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","includes","providerId","undefined","hasPromotionalItems","cart","digitalItems","physicalItems","lineItems","filter","item","addedByPromotion","length","withFormikExtended","OriginalComponent","DecoratedComponent","props","resetForm","isInitialValueLoaded","initialValues","previousIsInitialValueLoadedRef","useRef","useEffect","current","values","displayName","name","SaveAddressForm","withLanguage","handleSubmit","onSaveAddress","mapPropsToValues","getFields","selectedAddress","mapAddressToFormValues","countryCode","validationSchema","language","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","A","shouldShowSaveAddress","className","Button","Secondary","TranslatedString","disabled","type","onAfterOpen","addressFormProps","Modal","ModalHeader","AssignItemInvalidAddressError","CustomError","constructor","data","super","message","getLanguageService","translate","title","this","prototype","AssignItemFailedError","fill","onUseNewAddress","themeV2","SingleLineStaticAddress","address","href","preventDefault","setRecommendedOrMissingShippingOption","previousConsignment","currentConsignments","selectConsignmentShippingOption","previousShippingOptions","Map","map","consignment","selectedShippingOption","previousShippingOptionId","get","recommendedOption","availableShippingOptions","find","option","isRecommended","defaultCountryCode","onUnhandledError","setConsignmentRequest","isOpenNewAddressModal","setIsOpenNewAddressModal","useState","createCustomerAddressError","setCreateCustomerAddressError","checkoutState","getShippingCountries","getCustomer","getConfig","getConsignments","getPreviousConsignments","getShippingAddressFields","checkoutService","updateConsignment","createCustomerAddress","customer","isFloatingLabelEnabledFlag","addresses","isGuest","handleSelectAddress","isValidAddress","shippingAddress","quantity","itemId","error","Error","handleUseNewAddress","ErrorModal","onClose","shouldShowErrorCode","addressFormValues","mapAddressFromFormValues","AddressSelect","onSelectAddress","placeholderText","showSingleLineAddress","AddressType","Shipping","ItemSplitTooltip","TooltipTrigger","placement","tooltip","Tooltip","IconHelp","assignedItems","onUnassignItem","count","shippableItemsCount","hasSplitItems","key","toString","IconClose","isMobileView","imageUrl","alt","src","options","nameId","value","FormField","additionalClassName","input","field","TextInput","min","items","formErrors","LineItemType","onAllocateItems","Object","keys","lineItemId","unassignedItems","forEach","enableReinitialize","createItemSchema","baseSchema","required","integer","max","Custom","oneOf","schemaObject","fromEntries","shape","validateOnBlur","validateOnChange","consignmentNumber","setValues","dirty","submitForm","errors","allocatedOrSelectedItemsMessage","useMemo","leftItemsTotal","selectedItems","reduce","acc","push","Array","from","Set","hasItemsAssigned","hasUnassignedItems","modalFooter","index","Alert","hasDigitalItems","Info","UnassignItemError","generateHash","btoa","encodeURIComponent","join","calculateShippableItemsCount","total","hasSplitItem","itemHashMap","processedHashes","hash","has","add","mapConsignmentsItems","consignments","unassignedItemsMap","digitalItemsMap","consignmentList","set","Physical","productId","variantId","sku","valueId","generateItemHash","customItems","Digital","consignmentLineItems","lineItemIds","delete","unassignedItemsList","defaultMultiShippingConsignmentItems","useMultiShippingConsignmentItems","getCheckout","nonBundledLineItems","parentId","removeBundledItems","isOpenAllocateItemsModal","setIsOpenAllocateItemsModal","showItems","setShowItems","assignItemsToAddress","assignItem","deleteItem","createConsignments","deleteConsignment","consignmentRequest","consignmentIdToBeDeleted","consignmentsReponse","c","useDeallocateItem","toggleAllocateItemsModal","itemsCount","itemToDelete","IconChevronUp","IconChevronDown","ConsignmentLineItemDetail","MultiShippingOptionsListItem","consignmentId","selectedShippingOptionId","shippingOption","handleSelect","label","description","ShopperCurrency","amount","cost","RadioInput","checked","readOnly","memo","shippingOptions","onSelectedOption","getShippableLineItems","result","i","isNil","concat","lineItemIndex","splitItems","findConsignment","splitItem","getRecommendedShippingOption","ShippingOptionListItem","isMultiShippingMode","isSelected","renderLabel","useCallback","StaticShippingOption","displayAdditionalInformation","method","Extension","region","ChecklistItem","htmlId","inputName","Checklist","defaultSelectedItemId","onSelect","getShippingOptionIds","shippingOptionIds","ShippingOptionsForm","PureComponent","selectDefaultShippingOptions","selectShippingOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","shippingFormRenderTimestamp","analyticsTracker","shouldShowShippingOptions","newShippingFormRenderTimestamp","showShippingMethods","componentWillUnmount","render","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","rows","renderNoShippingOptions","StaticAddress","StaticConsignmentItemList","withAnalytics","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isUpdatingAddress","statuses","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","withCheckout","getCart","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","indexOf","sortConsignments","shippingQuoteFailedMessage","MultiShippingOptions","resetErrorConsignmentNumber","isLoadingOptions","Boolean","MultiShippingOptionsList","shippingOptionId","isSelectedShippingOptionValid","every","shouldShowOrderComments","shouldDisableSubmit","cartHasChanged","OrderComments","setIsAddShippingDestination","country","code","onSubmit","customerMessage","orderComment","errorConsignmentNumber","setErrorConsignmentNumber","unassignedLineItems","isAddShippingDestination","isEveryConsignmentHasShippingOption","hasSelectedShippingOptions","enableOrderComments","Success","renderAllocatedBanner","errorConsignmentIndex","findIndex","onSignIn","onCreateAccount","TranslatedLink","onChange","labelContent","CheckboxFormField","testId","StaticAddressEditable","handleFieldValueChange","onFieldChange","initialize","deinitialize","buttonId","customFormFields","custom","shouldShowCustomFormFields","style","padding","Tiny","Fieldset","DynamicFormField","parentFieldName","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","onAddressSelect","paypalFastlaneShippingComponentRef","localizeAddress","hideContentWhenLoading","firstName","lastName","phone","company","address1","address2","city","localizedProvince","postalCode","localizedCountry","PoweredByPayPalFastlaneLabel","showAddressSelector","customFields","addressFieldName","ShippingAddressForm","Component","fieldName","fieldValue","formik","formFieldName","handleChange","handleAutocompleteToggle","inputValue","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","connectFormik","PayPalFastlaneShippingAddress","handleFieldChange","isLoadingStrategy","setIsLoadingStrategyStrategy","paypalFastlaneShippingComponent","fastlaneOptions","provider","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","shouldShowPayPalFastlaneShippingForm","usePayPalFastlaneAddress","hasRequestedShippingOptions","setSubmitted","useContext","FormContext","SHIPPING_ADDRESS_FIELDS","legend","Legend","ShippingOptions","SingleShippingForm","state","isResettingAddress","isUpdatingShippingData","isValid","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setState","deleteConsignments","e","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","shippingAutosaveDelay","isBillingSameAsShipping","stateOrProvinceCode","billingSameAsShipping","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","isArray","isEqual","isEqualAddress","contextType","isInitialValid","isValidSync","methodIdsWithoutCustomValidation","shouldHaveCustomValidation","formValues","getCustomFormFieldsValidationSchema","isGuestMultiShippingEnabled","onMultiShippingSubmit","onSingleShippingSubmit","signOut","setIsMultishippingMode","hasMultiShippingEnabled","isUsingMultiShipping","onMultiShippingChange","shouldShowMultiShipping","cartHasPromotionalItems","isSingleShippingConfirmationModalOpen","setIsSingleShippingConfirmationModalOpen","isMultiShippingUnavailableModalOpen","setIsMultiShippingUnavailableModalOpen","showConfirmationModal","showMultiShippingUnavailableModal","ConfirmationModal","StripeShippingAddressDisplay","StripeStateMapper","stateList","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","stateOrProvince","shouldSaveAddress","handleLoading","availableShippingList","allowedCountries","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","stripeupe","container","onChangeShipping","availableCountries","getStyles","containerId","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","gatewayId","renderCheckoutThemeStylesForStripeUPE","StripeShippingForm","StripeShipping","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","all","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderStripeForm","shouldRenderWhileLoading","extensionState","email","renderWhileLoading","deleteConsignmentsSelector","getShippingAddress","mapToShippingProps","getBillingAddress","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","isDeletingConsignment","isLoadingCheckout","features","getShippableItemsCount","isExperimentEnabled","deinitializeShipping","signOutCustomer","unassignItem","unassignItemsToAddress","StripeUPE","shouldUseStripeLinkByMinimumAmount","withExtension"],"sourceRoot":""}