{"version":3,"file":"6314-182f9c68.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNameField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardFieldset/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedCreditCardValidationSchema/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx"],"sourcesContent":["import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import { type CardInstrument, type LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { type FunctionComponent, type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    type CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from './components';\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n    const {\n        config: { cardCode, showCardHolderName },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId = '';\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: isCardHolderNameRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_name_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccName'),\n                                }\n                              : undefined,\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const hostedFieldset = (\n        <HostedCreditCardFieldset\n            additionalFields={\n                method.config.requireCustomerCode && (\n                    <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                )\n            }\n            cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n            cardExpiryId={getHostedFieldId('ccExpiry')}\n            cardNameId={isCardHolderNameRequired ? getHostedFieldId('ccName') : undefined}\n            cardNumberId={getHostedFieldId('ccNumber')}\n            focusedFieldType={focusedFieldType}\n        />\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: {\n                        form: await getHostedFormOptions(selectedInstrument),\n                        bigpayToken: selectedInstrument?.bigpayToken,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const props = {\n        checkoutService,\n        checkoutState,\n        paymentForm,\n        language,\n        method,\n        onUnhandledError,\n    };\n\n    return (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedCreditCardPaymentMethod,\n    [\n        {\n            id: 'hosted-credit-card',\n        },\n        { id: 'credit_card', gateway: 'bluesnapdirect' },\n        { id: 'tdonlinemart' },\n    ],\n);\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNameField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div\n            className={classNames('form-ccFields', {\n                'form-ccFields--without-card-name': !cardNameId,\n                'form-ccFields--without-card-code': !cardCodeId,\n            })}\n        >\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {Boolean(cardNameId) && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {Boolean(cardCodeId) && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object()\n            .required()\n            .shape<HostedCreditCardValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedCreditCardValidationSchemaShape['hostedForm']['errors']>({\n                        cardCode: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardExpiry: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_expiry',\n                            }),\n\n                        cardName: string().test({\n                            message: language.translate('payment.credit_card_name_required_error'),\n                            test: (value) => value !== 'required',\n                        }),\n\n                        cardNumber: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            }),\n                    }),\n            }),\n    });\n});\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n"],"names":["appearFocused","id","name","renderInput","useCallback","additionalClassName","input","labelContent","method","checkoutService","checkoutState","paymentForm","language","onUnhandledError","focusedFieldType","setFocusedFieldType","useState","setFieldTouched","setFieldValue","setSubmitted","submitForm","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","config","cardCode","showCardHolderName","isCardCodeRequired","isCardHolderNameRequired","getHostedFieldId","compact","gateway","join","getHostedFormOptions","selectedInstrument","styleProps","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","styleContainerId","fields","cardCodeVerification","accessibilityLabel","translate","containerId","instrumentId","bigpayToken","undefined","cardNumberVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","error","Error","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","errors","forIn","fieldErrors","errorKey","type","hostedFieldset","additionalFields","requireCustomerCode","cardCodeId","cardExpiryId","cardNameId","cardNumberId","hostedValidationSchema","getHostedStoredCardValidationFieldset","initializePayment","initializeHostedCreditCardPayment","options","creditCard","form","hostedStoredCardValidationSchema","props","cardFieldset","cardValidationSchema","deinitializePayment","getStoredCardValidationFieldset","storedCardValidationSchema","TextInputIframeContainer","FormField","TranslatedString","Fieldset","legend","Legend","hidden","className","HostedCreditCardNumberField","HostedCreditCardExpiryField","Boolean","HostedCreditCardCodeField","memoize","shape","hostedForm","required","test","message","value","useMemo","placement","tooltip","isCardExpiryRequired","cardExpiryVerification","CreditCardInputStylesType","getCreditCardInputStyles","properties","Default","container","document","createElement","parentContainer","getElementById","appendChild","Promise","resolve","Provider","isSubmitted","noop","hasError","ref","element","parentElement","removeChild","testId"],"sourceRoot":""}