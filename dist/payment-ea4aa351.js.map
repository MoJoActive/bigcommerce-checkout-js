{"version":3,"file":"payment-ea4aa351.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/coupon/AppliedCoupon.tsx","webpack://checkout/./packages/core/src/app/giftCertificate/AppliedGiftCertificate.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconRemove.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemable.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemables.tsx","webpack://checkout/./packages/core/src/app/cart/Redeemable.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalLink.tsx","webpack://checkout/./packages/core/src/app/ui/text/MultiLineText.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditionsField.tsx","webpack://checkout/./packages/core/src/app/payment/mapSubmitOrderErrorMessage.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getUniquePaymentMethodId.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardFieldsetValues.ts","webpack://checkout/./packages/core/src/app/payment/mapToOrderRequestBody.ts","webpack://checkout/./packages/core/src/app/payment/PaymentContext.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditions.tsx","webpack://checkout/./packages/core/src/app/payment/getPaymentValidationSchema.ts","webpack://checkout/./packages/core/src/app/termsConditions/getTermsConditionsValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodType.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodName.ts","webpack://checkout/./packages/core/src/app/ui/form/CustomChecklistItem.tsx","webpack://checkout/./packages/bigcommerce-payments-utils/src/BigCommercePaymentsPayLaterBanner.tsx","webpack://checkout/./packages/paypal-utils/src/BraintreePaypalCreditBanner.tsx","webpack://checkout/./packages/paypal-utils/src/PaypalCommerceCreditBanner.tsx","webpack://checkout/./packages/ui/src/icon/mapFromPaymentMethodCardType.ts","webpack://checkout/./packages/ui/src/icon/CreditCardIcon.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIconList.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodTitle.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodDisplayName.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardFieldsetValues.ts","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormContext.tsx","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormProvider.tsx","webpack://checkout/./packages/core/src/app/ui/form/withForm.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2CardValidation.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isBankInstrument/isBankInstrument.ts","webpack://checkout/./packages/ui/src/form/Legend/Legend.tsx","webpack://checkout/./packages/ui/src/modal/ModalTrigger.tsx","webpack://checkout/./packages/ui/src/icon/IconNewAccount.tsx","webpack://checkout/./packages/ui/src/icon/IconPaypal.tsx","webpack://checkout/./packages/ui/src/icon/IconAch.tsx","webpack://checkout/./packages/ui/src/icon/IconSepa.tsx","webpack://checkout/./packages/ui/src/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isAchInstrument/isAchInstrument.ts","webpack://checkout/./packages/instrument-utils/src/guards/isSepaInstrument/isSepaInstrument.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/AccountInstrumentSelect/AccountInstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isCardInstrument/isCardInstrument.ts","webpack://checkout/./packages/instrument-utils/src/guards/isAccountInstrument/isAccountInstrument.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageAccountInstrumentsTable/ManageAccountInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageAchInstrumentsTable/ManageAchInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageCardInstrumentsTable/ManageCardInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageInstrumentsAlert/ManageInstrumentsAlert.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageInstrumentsModal/ManageInstrumentsModal.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/AccountInstrumentFieldset/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/ui/src/form/CheckboxFormField/CheckboxFormField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentStorageField/InstrumentStorageField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentStoreAsDefaultField/InstrumentStoreAsDefaultField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/StoreInstrumentFieldset/StoreInstrumentFieldset.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2PaymentMethod.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3PaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts","webpack://checkout/./packages/hosted-payment-integration/src/HostedPaymentComponent.tsx","webpack://checkout/./packages/affirm-integration/src/AffirmPaymentMethod.tsx","webpack://checkout/./packages/afterpay-integration/src/AfterpayPaymentMethod.tsx","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2PaymentMethod.tsx","webpack://checkout/./packages/apple-pay-integration/src/ApplePayPaymentMethod.tsx","webpack://checkout/./packages/barclay-integration/src/BarclaycardPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/components/BigCommercePaymentsPaymentMethodComponent.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/hooks/useBigCommercePaymentsInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePayments/BigCommercePaymentsPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/getUniquePaymentMethodId.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsAPMs/BigCommercePaymentsAPMsPaymentMethod.tsx","webpack://checkout/./packages/ui/src/icon/IconLock.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/formatCreditCardNumber/formatCreditCardNumber.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/unformatCreditCardNumber/unformatCreditCardNumber.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardNumberField/CreditCardNumberField.tsx","webpack://checkout/./packages/ui/src/icon/IconCardCodeVisa.tsx","webpack://checkout/./packages/ui/src/icon/IconCardCodeAmex.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCodeTooltip.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCodeField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardValidation/CreditCardValidation.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardExpiryField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/formatCreditCardExpiryDate/formatCreditCardExpiryDate.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardNameField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCustomerCodeField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardFieldset/CreditCardFieldset.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/getInstrumentValidationSchema/getInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardValidationSchema/getCreditCardValidationSchema.ts","webpack://checkout/./packages/locale/src/createLocaleContext.ts","webpack://checkout/./packages/credit-card-integration/src/CreditCardPaymentMethodComponent.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/configureCardValidator.ts","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNameField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardFieldset/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedCreditCardValidationSchema/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentCreditCards/BigCommercePaymentsCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneCreditCardForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/hooks/useBigCommercePaymentsFastlaneInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/BigCommercePaymentsFastlanePaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/index.ts","webpack://checkout/./packages/utility/src/is-error-with-translation-key.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsPayLater/BigCommercePaymentsPayLaterPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsVenmo/BigCommercePaymentsVenmoPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/CountryData.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/validation-schemas/getBigCommercePaymentsRatePayValidationSchema.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsRatePay/BigCommercePaymentsRatePayPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/constants.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectNumberField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectSelectField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectTextField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectEcpFieldset.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useEcpInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getEcpValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectEcpPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectAlternativePaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectInitializationData.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useSepaInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getSepaValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectSepaPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getIdealValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectIdealPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapV2PaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getPayByBankValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectPayByBankPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltClientPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltCustomForm.tsx","webpack://checkout/./packages/bolt-integration/src/BoltEmbeddedPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/constants.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchValidation.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchFormFields.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchMandateText.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchPaymentForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/BraintreeAchPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneCreditCardForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/hooks/useBraintreeFastlaneInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/BraintreeFastlanePaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/index.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeLocalPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreePaypalPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx","webpack://checkout/./packages/braintree-integration/src/VisaCheckout/VisaCheckoutPaymentMethod.tsx","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/TextFieldForm.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomFormFields.tsx","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomPaymentMethod.tsx","webpack://checkout/./packages/clearpay-integration/src/ClearpayPaymentMethod.tsx","webpack://checkout/./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarna/KlarnaPaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarnav2/KlarnaV2PaymentMethod.tsx","webpack://checkout/./packages/mollie-integration/src/MollieAPMCustomForm.tsx","webpack://checkout/./packages/mollie-integration/src/MollieCustomCardForm.tsx","webpack://checkout/./packages/mollie-integration/src/MolliePaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx","webpack://checkout/./packages/moneris-integration/src/MonerisPaymentMethod.tsx","webpack://checkout/./packages/offline-payment-integration/src/OfflinePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/components/PayPalCommercePaymentMethodComponent.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceAPMs/PayPalCommerceAPMsPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCredit/PayPalCommerceCreditPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCreditCards/PayPalCommerceCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneCreditCardForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/hooks/usePayPalCommerceFastlaneInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/PayPalCommerceFastlanePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/index.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/is-error-with-translation-key.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/hooks/usePaypalCommerceInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/PayPalCommercePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceVenmo/PayPalCommerceVenmoPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/validation-schema/getPaypalCommerceRatePayValidationSchema.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/PaypalCommerceRatePayPaymentMethod.tsx","webpack://checkout/./packages/paypal-express-integration/src/PaypalExpressPaymentMethod.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2Form.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2PaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/getStripeOCSStyles.ts","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/StripeOCSPaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-upe/StripeUPEPaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3CustomCardForm.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3PaymentMethod.tsx","webpack://checkout/./packages/worldpay-access-integration/src/WorldpayCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/resolvePaymentMethod.ts","webpack://checkout/./packages/core/src/app/payment/withPayment.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/getCreditCardInputStyles.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCustomerCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentFeatureAvailable.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/mapFromInstrumentCardType.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/InstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isAccountInstrument.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isBankAccountInstrument.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isCardInstrument.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconPaypal.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageAccountInstrumentsTable.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageCardInstrumentsTable.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageInstrumentsAlert.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageInstrumentsModal.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/CardInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/core/src/app/ui/form/TextInputIframeContainer.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconLock.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconHelp.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconCardCodeVisa.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconCardCodeAmex.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCodeTooltip.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardNameField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardValidation.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/withHostedCreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardExpiryField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/formatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardNameField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardNumberField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/formatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/getCreditCardValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/CreditCardValidation.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/getInstrumentValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/InstrumentStorageField.tsx","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/InstrumentStoreAsDefaultField.tsx","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/StoreInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/configureCardValidator.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/BraintreeCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconNewAccount.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/SignOutLink.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/WalletButtonPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/MasterpassPaymentMethod.tsx","webpack://checkout/./packages/locale/src/masterpassFormatLocale.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodProviderType.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaypalPaymentsProPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/usePropsToOnMount.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/Wrapper.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/initializationComponentMap.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/NoUI.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/PPSDKPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodV2.tsx","webpack://checkout/./packages/core/src/app/payment/createPaymentFormService.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodList.tsx","webpack://checkout/./packages/core/src/app/common/utility/isMobile.ts","webpack://checkout/./packages/core/src/app/payment/PaymentRedeemables.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentSubmitButton.tsx","webpack://checkout/./packages/core/src/app/payment/SpamProtectionField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditOverlay.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentForm.tsx","webpack://checkout/./packages/core/src/app/payment/Payment.tsx","webpack://checkout/./packages/core/src/app/common/error/isCartChangedError.ts","webpack://checkout/./packages/core/src/app/cart/mapToRedeemableProps.ts","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx"],"sourcesContent":["import { Coupon } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface AppliedCouponProps {\n    coupon: Coupon;\n}\n\nconst AppliedCoupon: FunctionComponent<AppliedCouponProps> = ({ coupon }) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--coupon\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"coupon-amount\">\n                {coupon.displayName}\n            </span>{' '}\n            <TranslatedString id=\"redeemable.coupon_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\" data-test=\"coupon-code\">\n            {coupon.code}\n        </span>\n    </div>\n);\n\nexport default memo(AppliedCoupon);\n","import { GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { ShopperCurrency } from '../currency';\n\nexport interface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n}\n\nconst AppliedGiftCertificate: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n}) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--giftCertificate\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"giftCertificate-amount\">\n                <ShopperCurrency amount={giftCertificate.used} />\n            </span>{' '}\n            <TranslatedString id=\"redeemable.gift_certificate_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\">\n            {giftCertificate.remaining > 0 && (\n                <span className=\"redeemable-info-subHeader--remaining\">\n                    <TranslatedString id=\"redeemable.gift_certificate_remaining_text\" />{' '}\n                    <span data-test=\"giftCertificate-remaining\">\n                        <ShopperCurrency amount={giftCertificate.remaining} />\n                    </span>\n                </span>\n            )}\n\n            <span data-test=\"giftCertificate-code\">{giftCertificate.code}</span>\n        </span>\n    </div>\n);\n\nexport default memo(AppliedGiftCertificate);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconRemove: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconRemove);\n","import classNames from 'classnames';\nimport React, {FunctionComponent, ReactNode} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconRemove } from '../ui/icon';\n\nimport './AppliedRedeemable.scss';\n\nexport interface AppliedRedeemableProps {\n    children: ReactNode;\n    isRemoving: boolean;\n    onRemove(): void;\n}\n\nconst AppliedRedeemable: FunctionComponent<AppliedRedeemableProps> = ({\n    children,\n    isRemoving,\n    onRemove,\n}) => (\n    <div className=\"form-checklist-header\">\n        <div className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\">\n            <span className=\"is-srOnly\">\n                <TranslatedString id=\"redeemable.applied_text\" />\n            </span>\n        </div>\n\n        <div className=\"form-label form-label-redeemable\">\n            <div className=\"redeemable\">\n                {children}\n                <div className=\"redeemable-column redeemable-actions\">\n                    <button\n                        className={classNames('redeemable-remove', { 'is-loading': isRemoving })}\n                        data-test=\"redeemable-remove\"\n                        disabled={isRemoving}\n                        onClick={onRemove}\n                        type=\"button\"\n                    >\n                        <IconRemove />\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default AppliedRedeemable;\n","import { Coupon, GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AppliedCoupon } from '../coupon';\nimport { AppliedGiftCertificate } from '../giftCertificate';\n\nimport AppliedRedeemable from './AppliedRedeemable';\n\ninterface AppliedCouponProps {\n    coupon: Coupon;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedCouponChecklistItem: FunctionComponent<AppliedCouponProps> = ({\n    coupon,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(coupon.code);\n    }, [coupon, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedCoupon coupon={coupon} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\ninterface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedGiftCertificateChecklistItem: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(giftCertificate.code);\n    }, [giftCertificate, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedGiftCertificate giftCertificate={giftCertificate} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\nexport interface AppliedRedeemablesProps {\n    coupons?: Coupon[];\n    giftCertificates?: GiftCertificate[];\n    isRemovingGiftCertificate?: boolean;\n    isRemovingCoupon?: boolean;\n    onRemovedCoupon(code: string): void;\n    onRemovedGiftCertificate(code: string): void;\n}\n\nconst AppliedRedeemables: FunctionComponent<AppliedRedeemablesProps> = ({\n    coupons = [],\n    giftCertificates = [],\n    isRemovingCoupon = false,\n    isRemovingGiftCertificate = false,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n}) => {\n    if (!coupons.length && !giftCertificates.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"form-checklist optimizedCheckout-form-checklist\"\n            data-test=\"redeemables-list\"\n        >\n            {coupons.map((coupon) => (\n                <AppliedCouponChecklistItem\n                    coupon={coupon}\n                    isRemoving={isRemovingCoupon}\n                    key={coupon.code}\n                    onRemoved={onRemovedCoupon}\n                />\n            ))}\n\n            {giftCertificates.map((giftCertificate) => (\n                <AppliedGiftCertificateChecklistItem\n                    giftCertificate={giftCertificate}\n                    isRemoving={isRemovingGiftCertificate}\n                    key={giftCertificate.code}\n                    onRemoved={onRemovedGiftCertificate}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(AppliedRedeemables);\n","import { CheckoutSelectors, RequestError } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport classNames from 'classnames';\nimport { FieldProps, FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, {FunctionComponent, KeyboardEvent, memo, ReactNode, useCallback} from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContextType, FormProvider, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { FormField, Label, TextInput } from '../ui/form';\nimport { Toggle } from '../ui/toggle';\n\nimport AppliedRedeemables, { AppliedRedeemablesProps } from './AppliedRedeemables';\n\nexport interface RedeemableFormValues {\n    redeemableCode: string;\n}\n\nexport type ReedemableChildrenProps = Pick<\n    RedeemableProps,\n    | 'onRemovedCoupon'\n    | 'onRemovedGiftCertificate'\n    | 'isRemovingGiftCertificate'\n    | 'isRemovingCoupon'\n    | 'coupons'\n    | 'giftCertificates'\n>;\n\nexport type RedeemableProps = {\n    appliedRedeemableError?: RequestError;\n    isApplyingRedeemable?: boolean;\n    isRemovingRedeemable?: boolean;\n    removedRedeemableError?: RequestError;\n    showAppliedRedeemables?: boolean;\n    shouldCollapseCouponCode?: boolean;\n    applyCoupon(code: string): Promise<CheckoutSelectors>;\n    applyGiftCertificate(code: string): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n} & AppliedRedeemablesProps;\n\nconst Redeemable: FunctionComponent<\n    RedeemableProps & WithLanguageProps & FormikProps<RedeemableFormValues>\n    > = ({ shouldCollapseCouponCode, showAppliedRedeemables, ...formProps }) => {\n        const { themeV2 } = useThemeContext();\n\n        return (\n            <Toggle openByDefault={!shouldCollapseCouponCode}>\n                {({ toggle, isOpen }): ReactNode => (\n                    <>\n                        {shouldCollapseCouponCode && (\n                            <a\n                                aria-controls=\"redeemable-collapsable\"\n                                aria-expanded={isOpen}\n                                className={classNames('redeemable-label', { 'body-cta': themeV2 })}\n                                data-test=\"redeemable-label\"\n                                href=\"#\"\n                                onClick={preventDefault(toggle)}\n                            >\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </a>\n                        )}\n                        {!shouldCollapseCouponCode && (\n                            <div className={classNames('redeemable-label', { 'body-cta': themeV2 })}>\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </div>\n                        )}\n                        {(isOpen || !shouldCollapseCouponCode) && (\n                            <div data-test=\"redeemable-collapsable\" id=\"redeemable-collapsable\">\n                                <RedeemableForm {...formProps} />\n                                {showAppliedRedeemables && <AppliedRedeemables {...formProps} />}\n                            </div>\n                        )}\n                    </>\n                )}\n            </Toggle>\n        );\n    }\n\nconst RedeemableForm: FunctionComponent<\n    Partial<RedeemableProps> & FormikProps<RedeemableFormValues> & WithLanguageProps\n> = ({ appliedRedeemableError, isApplyingRedeemable, clearError = noop, submitForm, language }) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const handleSubmitForm = (setSubmitted: FormContextType['setSubmitted']) => {\n        if (isSubmittingOrder()) {\n            return;\n        }\n\n        setSubmitted(true);\n        submitForm();\n    }\n\n    const handleKeyDown = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => (event: KeyboardEvent) => {\n            if (appliedRedeemableError) {\n                clearError(appliedRedeemableError);\n            }\n\n            // note: to prevent submitting main form, we manually intercept\n            // the enter key event and submit the \"subform\".\n            if (event.keyCode === 13 || event.key === 'Enter') {\n                handleSubmitForm(setSubmitted);\n                event.preventDefault();\n            }\n        }),\n        [appliedRedeemableError, clearError, submitForm],\n    );\n\n    const handleSubmit = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => () => {\n            handleSubmitForm(setSubmitted);\n        }),\n        [],\n    );\n\n    const renderLabel = useCallback(\n        (name: string) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"redeemable.code_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderErrorMessage = useCallback((errorCode: string, errorMessage?: string) => {\n        switch (errorCode) {\n            case 'min_purchase':\n                return <TranslatedString id=\"redeemable.coupon_min_order_total\" />;\n\n            case 'not_applicable':\n                return <TranslatedString id=\"redeemable.coupon_location_error\" />;\n\n            default:\n                return errorMessage || <TranslatedString id=\"redeemable.code_invalid_error\" />;\n        }\n    }, []);\n\n    const renderInput = useCallback(\n        (setSubmitted: FormContextType['setSubmitted']) =>\n            ({ field }: FieldProps) =>\n                (\n                    <>\n                        {appliedRedeemableError &&\n                            appliedRedeemableError.errors &&\n                            appliedRedeemableError.errors[0] && (\n                                <Alert type={AlertType.Error}>\n                                    {renderErrorMessage(appliedRedeemableError.errors[0].code, appliedRedeemableError.errors[0].message)}\n                                </Alert>\n                            )}\n\n                        <div className=\"form-prefixPostfix\">\n                            <TextInput\n                                {...field}\n                                aria-label={language.translate('redeemable.code_label')}\n                                className=\"form-input optimizedCheckout-form-input\"\n                                onKeyDown={handleKeyDown(setSubmitted)}\n                                testId=\"redeemableEntry-input\"\n                                themeV2={themeV2}\n                            />\n\n                            <Button\n                                className={classNames('form-prefixPostfix-button--postfix', {\n                                    'body-bold': themeV2,\n                                })}\n                                disabled={isSubmittingOrder()}\n                                id=\"applyRedeemableButton\"\n                                isLoading={isApplyingRedeemable}\n                                onClick={handleSubmit(setSubmitted)}\n                                testId=\"redeemableEntry-submit\"\n                                variant={ButtonVariant.Secondary}\n                            >\n                                <TranslatedString id=\"redeemable.apply_action\" />\n                            </Button>\n                        </div>\n                    </>\n                ),\n        [\n            appliedRedeemableError,\n            handleKeyDown,\n            handleSubmit,\n            isApplyingRedeemable,\n            language,\n            isSubmittingOrder,\n            renderErrorMessage,\n        ],\n    );\n\n    const renderContent = useCallback(\n        memoizeOne(({ setSubmitted }: FormContextType) => (\n            <FormField\n                input={renderInput(setSubmitted)}\n                label={renderLabel}\n                name=\"redeemableCode\"\n            />\n        )),\n        [renderLabel, renderInput],\n    );\n\n    return (\n        <fieldset className=\"form-fieldset redeemable-entry\">\n            <FormProvider>{renderContent}</FormProvider>\n        </fieldset>\n    );\n};\n\nexport default withLanguage(\n    withFormik<RedeemableProps & WithLanguageProps, RedeemableFormValues>({\n        mapPropsToValues() {\n            return {\n                redeemableCode: '',\n            };\n        },\n\n        async handleSubmit(\n            { redeemableCode },\n            { props: { applyCoupon, applyGiftCertificate, clearError } },\n        ) {\n            const code = redeemableCode.trim();\n\n            try {\n                await applyGiftCertificate(code);\n            } catch (error) {\n                if (error instanceof Error) {\n                    clearError(error);\n                }\n\n                applyCoupon(code);\n            }\n        },\n\n        validationSchema({ language }: RedeemableProps & WithLanguageProps) {\n            return object({\n                redeemableCode: string().required(\n                    language.translate('redeemable.code_required_error'),\n                ),\n            });\n        },\n    })(memo(Redeemable)),\n);\n","import React, { FunctionComponent, ReactNode, useCallback } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize } from '../button';\n\nimport Modal from './Modal';\nimport './ModalLink.scss';\nimport ModalTrigger, { ModalTriggerModalProps } from './ModalTrigger';\n\nexport interface ModalLinkProps {\n    header: ReactNode;\n    body: ReactNode;\n    children?: ReactNode;\n}\n\nconst ModalLink: FunctionComponent<ModalLinkProps> = ({ children, body, header }) => {\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <Modal\n                {...props}\n                additionalBodyClassName=\"modal--withText\"\n                footer={\n                    <Button onClick={props.onRequestClose} size={ButtonSize.Small}>\n                        <TranslatedString id=\"common.ok_action\" />\n                    </Button>\n                }\n                header={header}\n                shouldShowCloseButton={true}\n            >\n                {body}\n            </Modal>\n        ),\n        [header, body],\n    );\n\n    return (\n        <ModalTrigger modal={renderModal}>\n            { }\n            {({ onClick }) => <a onClick={preventDefault(onClick)}>{children}</a>}\n        </ModalTrigger>\n    );\n};\n\nexport default ModalLink;\n","import React, { Fragment, FunctionComponent } from 'react';\n\nconst MultiLineText: FunctionComponent<{ children: string }> = ({ children }) => (\n    <>\n        {children.split('\\n').map((line, key) => (\n            <Fragment key={key}>\n                {line}\n                <br />\n            </Fragment>\n        ))}\n    </>\n);\n\nexport default MultiLineText;\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { parseAnchor } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedHtml, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField, Fieldset, FormField, Legend, TextArea } from '../ui/form';\nimport { ModalHeader, ModalLink } from '../ui/modal';\nimport { MultiLineText } from '../ui/text';\n\nexport enum TermsConditionsType {\n    Link = 'link',\n    TextArea = 'textarea',\n    Modal = 'modal',\n}\n\nexport type TermsConditionsFieldProps =\n    | TermsConditionsLinkFieldProps\n    | TermsConditionsTextAreaFieldProps;\n\ninterface TermsConditionsLinkFieldProps {\n    name: string;\n    type: TermsConditionsType.Link;\n    url: string;\n}\n\ninterface TermsConditionsTextAreaFieldProps {\n    name: string;\n    terms: string;\n    type: TermsConditionsType.TextArea | TermsConditionsType.Modal;\n}\n\ninterface TermsConditionsTextFieldProps {\n    name: string;\n    terms: string;\n}\n\nconst BaseTermsConditionsModalCheckboxField: FunctionComponent<\n    TermsConditionsTextFieldProps & WithLanguageProps\n> = ({ language, name, terms }) => {\n    const translatedLabel = language.translate('terms_and_conditions.agreement_with_link_text', {\n        url: '',\n    });\n    const parsedLabel = parseAnchor(translatedLabel);\n\n    const labelContent = parsedLabel ? (\n        <>\n            {parsedLabel[0]}\n            <ModalLink\n                body={<MultiLineText>{terms}</MultiLineText>}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"terms_and_conditions.heading\" />\n                    </ModalHeader>\n                }\n            >\n                {parsedLabel[1]}\n            </ModalLink>\n            {parsedLabel[2]}\n        </>\n    ) : (\n        translatedLabel\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsModalCheckboxField = withLanguage(BaseTermsConditionsModalCheckboxField);\n\ninterface TermsConditionsCheckboxFieldProps {\n    name: string;\n    type: TermsConditionsType;\n    url?: string;\n}\n\nconst TermsConditionsCheckboxField: FunctionComponent<TermsConditionsCheckboxFieldProps> = ({\n    name,\n    url,\n}) => {\n    const labelContent = useMemo(\n        () =>\n            url ? (\n                <TranslatedHtml data={{ url }} id=\"terms_and_conditions.agreement_with_link_text\" />\n            ) : (\n                <TranslatedString id=\"terms_and_conditions.agreement_text\" />\n            ),\n        [url],\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsTextField: FunctionComponent<TermsConditionsTextFieldProps> = ({\n    name,\n    terms,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextArea defaultValue={terms} name={field.name} readOnly />,\n        [terms],\n    );\n\n    return <FormField input={renderInput} name={`${name}Text`} />;\n};\n\nconst TermsConditionsFieldset: FunctionComponent<TermsConditionsFieldProps> = (props) => {\n    const { type } = props;\n\n    return (\n        <Fieldset\n            additionalClassName=\"checkout-terms\"\n            legend={\n                <Legend>\n                    <TranslatedString id=\"terms_and_conditions.terms_and_conditions_heading\" />\n                </Legend>\n            }\n        >\n            {isTermsConditionsTextArea(props) && <TermsConditionsTextField {...props} />}\n            {isTermsConditionModal(props) && type === TermsConditionsType.Modal ? (\n                <TermsConditionsModalCheckboxField {...props} />\n            ) : (\n                <TermsConditionsCheckboxField {...props} />\n            )}\n        </Fieldset>\n    );\n};\n\nfunction isTermsConditionsTextArea(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.TextArea;\n}\n\nfunction isTermsConditionModal(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.Modal;\n}\n\nexport default memo(TermsConditionsFieldset);\n","import { TranslationData } from '@bigcommerce/checkout-sdk';\nimport { includes } from 'lodash';\n\nexport default function mapSubmitOrderErrorMessage(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n    shouldLocalise: boolean,\n): string {\n    switch (error.type) {\n        case 'not_initialized':\n            return translate('payment.payment_error');\n\n        case 'custom_provider_execute_error':\n            return translate(error.subtype);\n\n        case 'payment_cancelled':\n            return translate('payment.payment_cancelled');\n\n        case 'payment_method_invalid':\n            return translate('payment.payment_method_disabled_error');\n\n        case 'tax_provider_unavailable':\n            return translate('payment.tax_provider_unavailable');\n\n        case 'cart_changed':\n            return translate('shipping.cart_change_error');\n\n        case 'cart_consistency':\n            return translate('cart.consistency_error');\n\n        default:\n            if (\n                includes(\n                    [\n                        'order_could_not_be_finalized_error',\n                        'provider_fatal_error',\n                        'payment_invalid',\n                        'provider_error',\n                        'provider_widget_error',\n                        'user_payment_error',\n                    ],\n                    error.body && error.body.type,\n                )\n            ) {\n                return translate('payment.payment_method_error', { message: error.message });\n            }\n\n            if (shouldLocalise && error.body && error.body.errors && error.body.errors.length) {\n                const messages = error.body.errors.map((err: { code: any }) =>\n                    translate(`payment.errors.${err.code}`),\n                );\n\n                return messages.join(' ');\n            }\n\n            if (error.message) {\n                return error.message;\n            }\n\n            return error.type === 'unrecoverable'\n                ? translate('common.unavailable_error')\n                : translate('payment.place_order_error');\n    }\n}\n\nexport function mapSubmitOrderErrorTitle(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n): string {\n    if (error.type === 'unrecoverable') {\n        return translate('common.unavailable_heading');\n    }\n\n    if (error.type === 'missing_shipping_method') {\n        return translate('common.missing_shipping_method_heading');\n    }\n\n    if (error.type === 'invalid_shipping_address') {\n        return translate('common.invalid_shipping_address');\n    }\n\n    return translate('common.error_heading');\n}\n","export interface ExpiryDate {\n    month: string;\n    year: string;\n}\n\nexport default function unformatCreditCardExpiryDate(value: string): ExpiryDate {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n\n    if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n        return { month: '', year: '' };\n    }\n\n    return {\n        month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n        year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n    };\n}\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n\nexport function parseUniquePaymentMethodId(value: string): {\n    methodId: string;\n    gatewayId?: string;\n} {\n    const [gatewayId, methodId] = value.includes('-') ? value.split('-') : [undefined, value];\n\n    return { gatewayId, methodId };\n}\n","import { CardInstrumentFieldsetValues } from '../storedInstrument';\n\nexport default interface CreditCardFieldsetValues {\n    ccCustomerCode?: string;\n    ccCvv?: string;\n    ccExpiry: string;\n    ccName: string;\n    ccNumber: string;\n    shouldSaveInstrument?: boolean;\n}\n\nexport interface CreditCardValidationValues extends CardInstrumentFieldsetValues {\n    ccCvv?: string;\n    ccNumber?: string;\n}\n\nexport function hasCreditCardNumber(values: unknown): values is { ccNumber: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccNumber' in values;\n}\n\nexport function hasCreditCardExpiry(values: unknown): values is { ccExpiry: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccExpiry' in values;\n}\n","import { OrderPaymentRequestBody, OrderRequestBody } from '@bigcommerce/checkout-sdk';\nimport { isEmpty, isNil, omitBy } from 'lodash';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { unformatCreditCardExpiryDate, unformatCreditCardNumber } from './creditCard';\nimport {\n    hasCreditCardExpiry,\n    hasCreditCardNumber,\n    parseUniquePaymentMethodId,\n} from './paymentMethod';\n\nexport default function mapToOrderRequestBody(\n    values: PaymentFormValues,\n    isPaymentDataRequired: boolean,\n): OrderRequestBody {\n    if (!isPaymentDataRequired) {\n        return {};\n    }\n\n    const { paymentProviderRadio, ...rest } = values;\n    const { methodId, gatewayId } = parseUniquePaymentMethodId(paymentProviderRadio);\n    const payload: OrderRequestBody = {\n        payment: { gatewayId, methodId },\n    };\n    const paymentData = omitBy(\n        {\n            ...rest,\n            ccExpiry: hasCreditCardExpiry(values)\n                ? unformatCreditCardExpiryDate(values.ccExpiry)\n                : null,\n            ccNumber: hasCreditCardNumber(values)\n                ? unformatCreditCardNumber(values.ccNumber)\n                : null,\n        },\n        isNil,\n    ) as OrderPaymentRequestBody['paymentData'];\n\n    if (payload.payment && !isEmpty(paymentData)) {\n        payload.payment.paymentData = paymentData;\n    }\n\n    return payload;\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createContext } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nconst PaymentContext = createContext<PaymentContextProps | undefined>(undefined);\n\nexport default PaymentContext;\n","import React, { FunctionComponent } from 'react';\n\nimport TermsConditionsField, { TermsConditionsType } from './TermsConditionsField';\n\nexport interface TermsConditionsProps {\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n}\n\nexport const TermsConditions: FunctionComponent<TermsConditionsProps> = ({\n    termsConditionsUrl,\n    termsConditionsText = '',\n}) => (\n    <>\n        {termsConditionsUrl ? (\n            <TermsConditionsField\n                name=\"terms\"\n                type={TermsConditionsType.Link}\n                url={termsConditionsUrl}\n            />\n        ) : (\n            <TermsConditionsField\n                name=\"terms\"\n                terms={termsConditionsText}\n                type={TermsConditionsType.TextArea}\n            />\n        )}\n    </>\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { getTermsConditionsValidationSchema } from '../termsConditions';\n\nexport interface PaymentValidationSchemaOptions {\n    additionalValidation?: ObjectSchema<Partial<PaymentFormValues>>;\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPaymentValidationSchema({\n    additionalValidation,\n    isTermsConditionsRequired,\n    language,\n}: PaymentValidationSchemaOptions): ObjectSchema<PaymentFormValues> {\n    const schemaFields: {\n        paymentProviderRadio: StringSchema;\n    } = {\n        paymentProviderRadio: string().required(),\n    };\n\n    const schemaFieldsWithTerms = object(schemaFields).concat(\n        getTermsConditionsValidationSchema({ isTermsConditionsRequired, language }),\n    );\n\n    return additionalValidation\n        ? schemaFieldsWithTerms.concat(additionalValidation as any)\n        : schemaFieldsWithTerms;\n}\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, BooleanSchema, object, ObjectSchema } from 'yup';\n\nexport interface TermsConditionValidationSchemaOptions {\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getTermsConditionsValidationSchema({\n    isTermsConditionsRequired,\n    language,\n}: TermsConditionValidationSchemaOptions): ObjectSchema<{ terms?: boolean }> {\n    const schemaFields: {\n        terms?: BooleanSchema;\n    } = {};\n\n    if (isTermsConditionsRequired) {\n        schemaFields.terms = boolean().oneOf(\n            [true],\n            language.translate('terms_and_conditions.agreement_required_error'),\n        );\n    }\n\n    return object(schemaFields);\n}\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config && method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import React, { FunctionComponent, memo, ReactNode } from 'react';\n\nexport interface CustomChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n}\n\nconst CustomChecklistItem: FunctionComponent<CustomChecklistItemProps> = ({\n    content,\n    htmlId,\n}) => {\n    return (\n        <li\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item custom-checklist-item\"\n            id={htmlId}\n        >\n            {content}\n        </li>\n    );\n};\n\nexport default memo(CustomChecklistItem);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsPayLaterBanner: FunctionComponent<{\n    onUnhandledError?(error: Error): void\n}> = ({ onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n                bigcommerce_payments_paylater: {\n                    bannerContainerId: 'bigcommerce-payments-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n    }, []);\n\n    return (\n        <div\n            data-test='bigcommerce-payments-banner-container'\n            id='bigcommerce-payments-banner-container'\n        />\n    );\n};\n\nexport default BigCommercePaymentsPayLaterBanner;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalCreditBanner: FunctionComponent<{ onUnhandledError?(error: Error): void }> = ({\n    onUnhandledError,\n}) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BraintreePaypalCredit,\n                braintree: {\n                    bannerContainerId: 'braintree-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BraintreePaypalCredit,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n\n        return () => {\n            try {\n                void checkoutService.deinitializePayment({\n                    methodId: PaymentMethodId.BraintreePaypalCredit,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError?.(error);\n                }\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test=\"braintree-banner-container\" id=\"braintree-banner-container\" />;\n};\n\nexport default BraintreePaypalCreditBanner;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst PaypalCommerceCreditBanner: FunctionComponent<{\n    methodId: string;\n    containerId: string;\n    onUnhandledError?(error: Error): void;\n}> = ({ methodId, containerId, onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId,\n                [methodId]: {\n                    bannerContainerId: containerId,\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default PaypalCommerceCreditBanner;\n","import { ComponentType, lazy } from 'react';\n\nimport { IconProps } from './';\n\ninterface InstrumentComponent {\n    instrument: string;\n    component: ComponentType<IconProps>;\n}\n\nconst instrumentTypeMap: Record<string, InstrumentComponent> = {\n    AMEX: {\n        instrument: 'american-express',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-amex\" */ './IconCardAmex')),\n    },\n    BITCOIN: {\n        instrument: 'bitcoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-bitcoin\" */ './IconBitCoin')),\n    },\n    BITCOIN_CASH: {\n        instrument: 'bitcoin-cash',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-bitcoin-cash\" */ './IconBitCoinCash'),\n        ),\n    },\n    BANCONTACT: {\n        instrument: 'bancontact',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-bancontact\" */ './IconCardBancontact'),\n        ),\n    },\n    CARNET: {\n        instrument: 'carnet',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-carnet\" */ './IconCardCarnet'),\n        ),\n    },\n    CB: {\n        instrument: 'cb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-cb\" */ './IconCardCB')),\n    },\n    DINERS: {\n        instrument: 'diners-club',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-diners-club\" */ './IconCardDinersClub'),\n        ),\n    },\n    DANKORT: {\n        instrument: 'dankort',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-dankort\" */ './IconCardDankort'),\n        ),\n    },\n    DISCOVER: {\n        instrument: 'discover',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-discover\" */ './IconCardDiscover'),\n        ),\n    },\n    DOGECOIN: {\n        instrument: 'dogecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-dogecoin\" */ './IconDogeCoin')),\n    },\n    ELECTRON: {\n        instrument: 'electron',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-electron\" */ './IconCardElectron'),\n        ),\n    },\n    ELO: {\n        instrument: 'elo',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-elo\" */ './IconCardElo')),\n    },\n    ETHEREUM: {\n        instrument: 'ethereum',\n        component: lazy(() => import(/* webpackChunkName: \"icon-ethereum\" */ './IconEthereum')),\n    },\n    HIPER: {\n        instrument: 'hiper',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-hipercard\" */ './IconCardHipercard'),\n        ),\n    },\n    JCB: {\n        instrument: 'jcb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-jcb\" */ './IconCardJCB')),\n    },\n    LITECOIN: {\n        instrument: 'litecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-litecoin\" */ './IconLiteCoin')),\n    },\n    MADA: {\n        instrument: 'mada',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-mada\" */ './IconCardMada')),\n    },\n    MAESTRO: {\n        instrument: 'maestro',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-maestro\" */ './IconCardMaestro'),\n        ),\n    },\n    MC: {\n        instrument: 'mastercard',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-mastercard\" */ './IconCardMastercard'),\n        ),\n    },\n    SHIBA_INU: {\n        instrument: 'shiba-inu',\n        component: lazy(() => import(/* webpackChunkName: \"icon-shiba-inu\" */ './IconShibaInu')),\n    },\n    TROY: {\n        instrument: 'troy',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-troy\" */ './IconCardTroy')),\n    },\n    CUP: {\n        instrument: 'unionpay',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-unionpay\" */ './IconCardUnionPay'),\n        ),\n    },\n    USD_COIN: {\n        instrument: 'usd-coin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-usd-coin\" */ './IconUsdCoin')),\n    },\n    VISA: {\n        instrument: 'visa',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-visa\" */ './IconCardVisa')),\n    },\n};\n\nexport default function mapFromPaymentMethodCardType(type: string): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return instrumentTypeMap[type]?.instrument || undefined;\n}\n\nexport function getPaymentMethodIconComponent(type?: string): ComponentType<IconProps> | undefined {\n    if (!type) {\n        return undefined;\n    }\n\n    const instrumentType = Object.values(instrumentTypeMap).find(\n        (record) => record.instrument === type,\n    );\n\n    return instrumentType ? instrumentType.component : undefined;\n}\n\nfunction getSupportedInstrumentTypes() {\n    return Object.values(instrumentTypeMap).map((record) => record.instrument);\n}\n\nexport function filterInstrumentTypes(instrumentTypes: string[]) {\n    const supportedInstrumentTypes = getSupportedInstrumentTypes();\n\n    return instrumentTypes.filter((type) => supportedInstrumentTypes.includes(type));\n}\n","import React, { FunctionComponent, memo, Suspense } from 'react';\n\nimport { getPaymentMethodIconComponent } from './mapFromPaymentMethodCardType';\nimport { IconSize } from './withIconContainer';\n\nexport interface CreditCardIconProps {\n    cardType?: string;\n}\n\nconst CreditCardIcon: FunctionComponent<CreditCardIconProps> = ({ cardType }) => {\n    const iconProps = {\n        additionalClassName: 'cardIcon-icon',\n        size: IconSize.Medium,\n        testId: `credit-card-icon-${cardType || 'default'}`,\n    };\n\n    const IconComponent = getPaymentMethodIconComponent(cardType);\n\n    return IconComponent ? (\n        <Suspense>\n            <IconComponent {...iconProps} />\n        </Suspense>\n    ) : (\n        <div className=\"cardIcon-icon cardIcon-icon--default icon icon--medium\" />\n    );\n};\n\nexport default memo(CreditCardIcon);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { CreditCardIcon, filterInstrumentTypes } from './';\n\nexport interface CreditCardIconListProps {\n    selectedCardType?: string;\n    cardTypes: string[];\n}\n\nconst CreditCardIconList: FunctionComponent<CreditCardIconListProps> = ({\n    selectedCardType,\n    cardTypes,\n}) => {\n    const filteredCardTypes = filterInstrumentTypes(cardTypes);\n\n    if (!filteredCardTypes.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"creditCardTypes-list\">\n            {filteredCardTypes.map((type) => (\n                <li\n                    className={classNames(\n                        'creditCardTypes-list-item',\n                        { 'is-active': selectedCardType === type },\n                        { 'not-active': selectedCardType && selectedCardType !== type },\n                    )}\n                    data-test={`${type}-icon`}\n                    key={type}\n                >\n                    <span className=\"cardIcon\">\n                        <CreditCardIcon cardType={type} />\n                    </span>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(CreditCardIconList);\n","import { CardInstrument, CheckoutSettings, LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport classNames from 'classnames';\nimport { compact } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { BigCommercePaymentsPayLaterBanner } from '@bigcommerce/checkout/bigcommerce-payments-utils'\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps , PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { BraintreePaypalCreditBanner, PaypalCommerceCreditBanner } from '@bigcommerce/checkout/paypal-utils';\nimport { CreditCardIconList, mapFromPaymentMethodCardType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { isExperimentEnabled } from '../../common/utility';\n\nimport { hasCreditCardNumber } from './CreditCardFieldsetValues';\nimport getPaymentMethodDisplayName from './getPaymentMethodDisplayName';\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { isHostedCreditCardFieldsetValues } from './HostedCreditCardFieldsetValues';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodTitleProps {\n    method: PaymentMethod;\n    isSelected?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithPaymentTitleProps {\n    instruments: CardInstrument[];\n    checkoutSettings: CheckoutSettings;\n    storeCountryCode: string;\n    cdnBasePath: string;\n}\n\ninterface PaymentMethodSubtitleProps {\n    onUnhandledError?(error: Error): void;\n    methodId: string;\n}\n\ntype SubtitleType = ReactNode | ((subtitleProps?: PaymentMethodSubtitleProps) => ReactNode);\n\nexport function getPaymentMethodTitle(\n    language: LanguageService,\n    basePath: string,\n    checkoutSettings: CheckoutSettings,\n    storeCountryCode: string,\n): (method: PaymentMethod) => {\n    logoUrl: string;\n    titleText: string,\n    subtitle?: SubtitleType\n} {\n    const cdnPath = (path: string) => `${basePath}${path}`;\n\n    return (method) => {\n        const paymentWithLogo = method.initializationData?.methodsWithLogo\n            ? method.initializationData.methodsWithLogo\n            : [];\n        const methodName = getPaymentMethodName(language)(method);\n        const methodDisplayName = getPaymentMethodDisplayName(language)(method);\n        // TODO: API could provide the data below so UI can read simply read it.\n        // However, I'm not sure how we deal with translation yet. TBC.\n        const customTitles: { [key: string]: { logoUrl: string; titleText: string, subtitle?: ReactNode | ((props: any) => ReactNode) } } = {\n            [PaymentMethodType.CreditCard]: {\n                logoUrl: '',\n                titleText: methodName,\n            },\n            [PaymentMethodId.BraintreeVenmo]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.BraintreePaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: { onUnhandledError?(error: Error): void }): ReactNode => <BraintreePaypalCreditBanner {...props} />\n            },\n            [PaymentMethodType.PaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeAch]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeLocalPaymentMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BigCommercePaymentsPayPal]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsPayLater]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.PaypalCommerce]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-credit-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodType.VisaCheckout]: {\n                logoUrl: cdnPath('/img/payment-providers/visa-checkout.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.Affirm]: {\n                logoUrl: cdnPath('/img/payment-providers/affirm-checkout-header.png'),\n                titleText: language.translate('payment.affirm_display_name_text'),\n            },\n            [PaymentMethodId.Afterpay]: {\n                logoUrl: isExperimentEnabled(checkoutSettings, 'PROJECT-6993.change_afterpay_logo_for_us_stores') && storeCountryCode === 'US' ? cdnPath('/img/payment-providers/afterpay-new-us.svg') : cdnPath('/img/payment-providers/afterpay-badge-blackonmint.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.AmazonPay]: {\n                logoUrl: cdnPath('/img/payment-providers/amazon-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.ApplePay]: {\n                logoUrl: cdnPath('/modules/checkout/applepay/images/applepay-header@2x.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Bolt]: {\n                logoUrl: '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Clearpay]: {\n                logoUrl: cdnPath('/img/payment-providers/clearpay-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.GooglePay]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.PayWithGoogle]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Humm]: {\n                logoUrl: cdnPath('/img/payment-providers/humm-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Klarna]: {\n                logoUrl: method.initializationData?.enableBillie\n                        ? cdnPath('/img/payment-providers/klarna-billie-header.png')\n                        : cdnPath('/img/payment-providers/klarna-header.png'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Laybuy]: {\n                logoUrl: cdnPath('/img/payment-providers/laybuy-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Masterpass]: {\n                logoUrl: 'https://masterpass.com/dyn/img/acc/global/mp_mark_hor_blk.svg',\n                titleText: '',\n            },\n            [PaymentMethodType.Paypal]: {\n                // TODO: method.id === PaymentMethodId.BraintreeVenmo should be removed after the PAYPAL-1380.checkout_button_strategies_update experiment removal\n                logoUrl:\n                    method.id === PaymentMethodId.BraintreeVenmo && method.logoUrl\n                        ? method.logoUrl\n                        : cdnPath('/img/payment-providers/paypalpaymentsprouk.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Quadpay]: {\n                logoUrl: cdnPath('/img/payment-providers/quadpay.png'),\n                titleText: language.translate('payment.quadpay_display_name_text'),\n            },\n            [PaymentMethodId.Sezzle]: {\n                logoUrl: cdnPath('/img/payment-providers/sezzle-checkout-header.png'),\n                titleText: language.translate('payment.sezzle_display_name_text'),\n            },\n            [PaymentMethodId.Zip]: {\n                logoUrl: cdnPath('/img/payment-providers/zip.png'),\n                titleText: language.translate('payment.zip_display_name_text'),\n            },\n            [PaymentMethodType.Barclaycard]: {\n                logoUrl: cdnPath(\n                    `/img/payment-providers/barclaycard_${method.id.toLowerCase()}.png`,\n                ),\n                titleText: '',\n            },\n            [PaymentMethodId.AdyenV2]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.AdyenV3]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Mollie]: {\n                logoUrl:\n                    method.method === 'credit_card'\n                        ? ''\n                        : cdnPath(`/img/payment-providers/mollie_${method.method}.svg`),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Checkoutcom]: {\n                logoUrl: ['credit_card', 'card', 'checkoutcom'].includes(method.id)\n                    ? ''\n                    : cdnPath(`/img/payment-providers/checkoutcom_${method.id.toLowerCase()}.svg`),\n                titleText: methodName,\n            },\n            [PaymentMethodId.StripeV3]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.StripeUPE]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.WorldpayAccess]: {\n                logoUrl: '',\n                titleText: language.translate('payment.credit_debit_card_text'),\n            },\n        };\n\n        if (method.gateway === PaymentMethodId.BlueSnapDirect) {\n            if (method.id === 'credit_card') {\n                return { logoUrl: '', titleText: language.translate('payment.credit_card_text') };\n            }\n\n            if (method.id === 'ecp') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_electronic_check_label') };\n            }\n\n            if (method.id === 'banktransfer') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_local_bank_transfer_label') };\n            }\n        }\n\n        if (method.id === PaymentMethodId.PaypalCommerceVenmo) {\n            return customTitles[PaymentMethodId.PaypalCommerceAlternativeMethod];\n        }\n\n        if (method.id === PaymentMethodId.BigCommercePaymentsVenmo) {\n            return customTitles[PaymentMethodId.BigCommercePaymentsAlternativeMethod];\n        }\n\n        // KLUDGE: 'paypal' is actually a credit card method. It is the only\n        // exception to the rule below. We should probably fix it on API level,\n        // but apparently it would break LCO if we are not careful.\n        if (\n            method.id === PaymentMethodId.PaypalPaymentsPro &&\n            method.method === PaymentMethodType.CreditCard\n        ) {\n            return customTitles[PaymentMethodType.CreditCard];\n        }\n\n        if (method.id === PaymentMethodId.Ratepay) {\n            return { logoUrl: method.logoUrl || '', titleText: language.translate('payment.ratepay.payment_method_title')};\n        }\n\n        return (\n            customTitles[method.gateway || ''] ||\n            customTitles[method.id] ||\n            customTitles[method.method] ||\n            customTitles[PaymentMethodType.CreditCard]\n        );\n    };\n}\n\nfunction getInstrumentForMethod(\n    instruments: CardInstrument[],\n    method: PaymentMethod,\n    values: PaymentFormValues\n): CardInstrument | undefined {\n    const instrumentsForMethod = instruments.filter(instrument => instrument.provider === method.id);\n    const selectedInstrument = instrumentsForMethod.find(instrument => instrument.bigpayToken === values.instrumentId);\n\n    return selectedInstrument;\n}\n\nconst PaymentMethodTitle: FunctionComponent<\n    PaymentMethodTitleProps &\n        WithLanguageProps &\n        WithPaymentTitleProps &\n        ConnectFormikProps<PaymentFormValues>\n> = ({ cdnBasePath, checkoutSettings, storeCountryCode, onUnhandledError, formik: { values }, instruments, isSelected, language, method }) => {\n    const methodName = getPaymentMethodName(language)(method);\n    const { logoUrl, titleText, subtitle } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(method);\n    const { themeV2 } = useThemeContext();\n\n    const getSelectedCardType = () => {\n        if (!isSelected) {\n            return;\n        }\n\n        const instrumentSelected = getInstrumentForMethod(instruments, method, values);\n\n        if (isHostedCreditCardFieldsetValues(values) && values.hostedForm.cardType) {\n            return values.hostedForm.cardType;\n        }\n\n        if (hasCreditCardNumber(values) && values.ccNumber) {\n            const { card } = number(values.ccNumber);\n\n            if (!card) {\n                return;\n            }\n\n            return card.type;\n        }\n\n        if (instrumentSelected) {\n            return instrumentSelected.brand;\n        }\n    };\n\n    const getSubtitle = () => {\n        const node = subtitle instanceof Function ? subtitle({ onUnhandledError, methodId: method.id }) : subtitle;\n\n        return node ? <div className=\"paymentProviderHeader-subtitleContainer\">\n            {node}\n        </div> : null\n    }\n\n    return (\n        <div className={\n            classNames(\n                'paymentProviderHeader-container',\n                {'paymentProviderHeader-container-googlePay': method.id.includes('googlepay')},\n            )\n        }>\n            <div\n                className=\"paymentProviderHeader-nameContainer\"\n                data-test={`payment-method-${method.id}`}\n            >\n                {logoUrl && (\n                    <img\n                        alt={`${methodName} icon`}\n                        className={classNames(\n                            'paymentProviderHeader-img',\n                            {'paymentProviderHeader-img-applePay': method.id === 'applepay'},\n                            {'paymentProviderHeader-img-googlePay': method.id.includes('googlepay')},\n                        )}\n                        data-test=\"payment-method-logo\"\n                        src={logoUrl}\n                    />\n                )}\n\n                {titleText && (\n                    <div className={classNames('paymentProviderHeader-name',\n                        { 'sub-header': themeV2 })}\n                        data-test=\"payment-method-name\">\n                        {titleText}\n                    </div>\n                )}\n                {getSubtitle()}\n            </div>\n            <div className=\"paymentProviderHeader-cc\">\n                <CreditCardIconList\n                    cardTypes={compact(method.supportedCards.map(mapFromPaymentMethodCardType))}\n                    selectedCardType={getSelectedCardType()}\n                />\n            </div>\n        </div>\n    );\n};\n\nfunction mapToCheckoutProps({ checkoutState }: CheckoutContextProps): WithPaymentTitleProps | null {\n    const {\n        data: { getConfig, getInstruments },\n    } = checkoutState;\n    const config = getConfig();\n\n    const instruments = getInstruments() || [];\n\n    if (!config) {\n        return null;\n    }\n\n    const storeCountryCode = config.storeProfile.storeCountryCode\n\n    return {\n        instruments,\n        checkoutSettings: config.checkoutSettings,\n        storeCountryCode,\n        cdnBasePath: config.cdnPath,\n    };\n}\n\nexport default connectFormik(\n    withLanguage(withCheckout(mapToCheckoutProps)(memo(PaymentMethodTitle))),\n);\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport PaymentMethodId from './PaymentMethodId';\n\nexport default function getPaymentMethodDisplayName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        const { displayName } = method.config;\n\n        const isCreditCard = displayName?.toLowerCase() === 'credit card';\n\n        if (\n            method.id === PaymentMethodId.PaypalCommerceCredit ||\n            method.id === PaymentMethodId.BigCommercePaymentsPayLater ||\n            method.id === PaymentMethodId.BraintreePaypalCredit\n        ) {\n            const { payPalCreditProductBrandName } = method.initializationData;\n\n            if (payPalCreditProductBrandName) {\n                return payPalCreditProductBrandName.credit || payPalCreditProductBrandName;\n            }\n\n            return 'Pay Later';\n        }\n\n        if (\n            (isCreditCard && method.id === PaymentMethodId.AdyenV2) ||\n            method.id === PaymentMethodId.AdyenV3\n        ) {\n            return language.translate('payment.credit_debit_card_text');\n        }\n\n        if (isCreditCard) {\n            return language.translate('payment.credit_card_text');\n        }\n\n        return displayName || '';\n    };\n}\n","interface HostedCreditCardFieldsetValues {\n    hostedForm: {\n        cardType?: string;\n        errors?: {\n            cardCode?: string;\n            cardExpiry?: string;\n            cardName?: string;\n            cardNumber?: string;\n        };\n    };\n}\n\nexport function isHostedCreditCardFieldsetValues(\n    value: unknown,\n): value is HostedCreditCardFieldsetValues {\n    if (!(value instanceof Object)) {\n        return false;\n    }\n\n    if (!('hostedForm' in value)) {\n        return false;\n    }\n\n    return true;\n}\n","import { createContext, useContext } from 'react';\n\nimport PaymentMethodProps from '../../PaymentMethodProps';\n\nexport type PaymentFormContextProps = Pick<PaymentMethodProps, 'paymentForm'>;\n\nexport const PaymentFormContext = createContext<PaymentFormContextProps | undefined>(undefined);\n\nexport function usePaymentFormContext() {\n    const context = useContext(PaymentFormContext);\n\n    if (!context) {\n        throw new Error('usePaymentFormContext must be used within a PaymentFormContextProvider');\n    }\n\n    return context;\n}\n","import React, { ReactNode } from 'react';\n\nimport PaymentFormService from '../../PaymentFormService';\n\nimport { PaymentFormContext } from './PaymentFormContext';\n\ninterface PaymentFormProviderProps {\n    children?: ReactNode;\n    paymentForm: PaymentFormService;\n}\n\nexport const PaymentFormProvider = ({ children, paymentForm }: PaymentFormProviderProps) => {\n    return (\n        <PaymentFormContext.Provider value={{ paymentForm }}>\n            {children}\n        </PaymentFormContext.Provider>\n    );\n};\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\nimport { FormContext, FormContextType } from '@bigcommerce/checkout/ui';\n\nexport type WithFormProps = FormContextType;\n\nconst withForm = createInjectHoc(FormContext, { displayNamePrefix: 'WithForm' });\n\nexport default withForm;\n","import {\n    AdyenValidationState,\n    CardInstrument,\n    LanguageService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV2CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n    language?: LanguageService;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV2CardValidation: FunctionComponent<AdyenV2CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n    language,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        {language?.translate(\n                            'payment.instrument_trusted_shipping_address_title_text',\n                        )}\n                    </strong>\n\n                    <br />\n\n                    {language?.translate('payment.instrument_trusted_shipping_address_text')}\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            {language?.translate('payment.credit_card_number_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            {language?.translate('payment.credit_card_cvv_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            {language?.translate('payment.credit_card_expiration_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV2CardValidation;\n","import { BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isBankAccountInstrument(\n    instrument?: PaymentInstrument,\n): instrument is BankInstrument {\n    return (\n        instrument?.type === 'bank' && instrument?.method !== 'ach' && instrument?.method !== 'ecp'\n    );\n}\n\nexport default function assertIsBankInstrument(\n    instrument?: PaymentInstrument,\n): asserts instrument is BankInstrument {\n    if (!instrument || !isBankAccountInstrument(instrument)) {\n        throw new Error('Is not a bank account instrument.');\n    }\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface LegendProps extends HTMLAttributes<HTMLLegendElement> {\n    hidden?: boolean;\n    testId?: string;\n}\n\nconst Legend: FunctionComponent<LegendProps> = ({\n    children,\n    className,\n    hidden,\n    testId,\n    ...rest\n}) => (\n    <legend\n        {...rest}\n        className={classNames(\n            className || 'form-legend',\n            { 'is-srOnly': hidden },\n            { 'optimizedCheckout-headingSecondary': !hidden },\n        )}\n        data-test={testId}\n    >\n        {children}\n    </legend>\n);\n\nexport default Legend;\n","import React, {\n    Component,\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactNode,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nexport interface ModalTriggerState {\n    isOpen: boolean;\n}\n\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\n    state = {\n        isOpen: false,\n    };\n\n    private canHandleEvent = false;\n\n    componentDidMount(): void {\n        this.canHandleEvent = true;\n    }\n\n    componentWillUnmount(): void {\n        this.canHandleEvent = false;\n    }\n\n    render() {\n        const { children, modal } = this.props;\n        const { isOpen } = this.state;\n\n        return (\n            <>\n                {children({\n                    onClick: this.handleOpen,\n                    onKeyPress: this.handleKeyOpen,\n                })}\n\n                {modal({\n                    isOpen,\n                    onRequestClose: this.handleClose,\n                })}\n            </>\n        );\n    }\n\n    private handleOpen: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    private handleClose: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: false,\n        });\n    };\n\n    private handleKeyOpen: (keyboardEvent: KeyboardEvent<HTMLElement>) => void = (\n        keyboardEvent,\n    ) => {\n        if (keyboardEvent.key === 'Enter') {\n            this.handleOpen();\n        }\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconPaypal: FunctionComponent = () => (\n    <svg height=\"300\" viewBox=\"0 0 255 300\" width=\"255\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M228.03 77.2c3.6-23.02-.03-38.7-12.48-52.89C201.83 8.7 177.07 2 145.4 2H53.4c-6.47 0-11.99 4.7-12.99 11.11L2.1 256.03a7.9 7.9 0 0 0 7.8 9.14h56.78c79.33-53.38 148.45-81.4 161.35-187.97z\"\n            fill=\"#253B80\"\n        />\n        <path\n            d=\"M228.02 77.2C124 73 95 98 80.5 177.52l-13.82 87.65-3.91 24.85a6.9 6.9 0 0 0 6.82 7.98h47.86c5.67 0 10.48-4.12 11.37-9.71l.48-2.43 9-57.2.59-3.15c.88-5.6 5.7-9.73 11.37-9.73h7.16c46.38 0 82.68-18.83 93.29-73.33 4.43-22.76 2.14-41.77-9.6-55.14a45.77 45.77 0 0 0-13.1-10.1z\"\n            fill=\"#179BD7\"\n        />\n        <path\n            d=\"M215.33 72.14c-3.88-1.12-7.82-2-11.8-2.62a149.83 149.83 0 0 0-23.79-1.73h-72.1a11.49 11.49 0 0 0-11.36 9.73l-15.34 97.16-.44 2.84a13.1 13.1 0 0 1 12.95-11.1h27c53 0 94.5-21.53 106.62-83.82.37-1.85.67-3.64.95-5.4a64.66 64.66 0 0 0-9.98-4.2c-.9-.3-1.8-.59-2.71-.86z\"\n            fill=\"#222D65\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconPaypal);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconAch: FunctionComponent = () => (\n    <svg viewBox=\"25 0 50 48\" xmlSpace=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title id=\"iconAchTitle\">ACH</title>\n        <path\n            d=\"M30 9.5h40c1.9 0 3.5 1.6 3.5 3.5v22c0 1.9-1.6 3.5-3.5 3.5H30c-1.9 0-3.5-1.6-3.5-3.5V13c0-1.9 1.6-3.5 3.5-3.5z\"\n            fill=\"#1524d9\"\n        />\n        <path\n            d=\"m45.2 27.5-.6-1.4h-2.7l-.5 1.4h-1.8l3-7.1h1.7l2.8 7.1h-1.9zm-1.9-5.1-.9 2.4h1.8l-.9-2.4zm9.1 5c-.5.2-1 .3-1.6.3-.5 0-1-.1-1.5-.3-.9-.3-1.6-1-2-1.9-.4-1-.4-2 0-3 .2-.4.5-.8.8-1.2.4-.3.8-.6 1.2-.7 1-.4 2-.4 3 0 .4.2.9.4 1.2.8l-1.2 1.2c-.2-.2-.4-.4-.6-.5-.3-.1-.5-.2-.8-.2-.3 0-.6 0-.8.2-.2.1-.5.3-.6.5-.2.2-.3.4-.4.7-.1.3-.2.6-.1.9 0 .3 0 .6.1.9.1.3.2.5.4.7.2.2.4.3.6.4.3.1.5.2.8.2.3 0 .6-.1.9-.2.2-.1.5-.3.6-.5l1.2 1.1c-.3.1-.7.4-1.2.6zm6.4.1v-2.9H56v2.9h-1.7v-7.1H56v2.7h2.8v-2.7h1.7v7l-1.7.1z\"\n            fill=\"#fff\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconAch);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSepa: FunctionComponent = () => (\n    <svg fill=\"none\" height=\"24\" viewBox=\"0 0 35 24\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect fill=\"#9A1B27\" height=\"23\" rx=\"3.5\" stroke=\"#D9D9D9\" width=\"34\" x=\"0.5\" y=\"0.5\" />\n        <path\n            d=\"M10.758 11.652a5.095 5.095 0 00-1.29-.28 2.764 2.764 0 01-.747-.15.272.272 0 01-.165-.258.316.316 0 01.13-.252.703.703 0 01.43-.107.875.875 0 01.502.143.574.574 0 01.215.316l1.65-.165a2.03 2.03 0 00-.43-.71 1.564 1.564 0 00-.646-.388c-.394-.098-.8-.139-1.205-.122a3.809 3.809 0 00-1.227.158c-.28.092-.529.26-.717.488a1.205 1.205 0 00-.266.782c0 .265.089.523.252.732.15.207.357.366.595.459.412.133.834.231 1.262.294.255.035.505.098.746.186a.323.323 0 01.163.45.336.336 0 01-.112.124.861.861 0 01-.546.144.89.89 0 01-.516-.13.86.86 0 01-.294-.444l-1.736.165c.085.413.33.777.681 1.011a3.3 3.3 0 001.78.359c.473.02.946-.052 1.391-.215.307-.12.57-.33.753-.603.152-.227.234-.494.237-.767 0-.258-.08-.508-.23-.718a1.435 1.435 0 00-.645-.502h-.014zm10.638 1.241a.632.632 0 01-.509.258.724.724 0 01-.574-.265 1.205 1.205 0 01-.23-.803c-.03-.304.047-.608.216-.861a.703.703 0 01.856-.186c.09.046.167.112.227.193.161.238.237.524.215.81.03.302-.04.605-.2.861m.035-3.228c-.295 0-.586.074-.846.215-.241.15-.45.345-.617.574v-.688h-1.636v6.549h1.765v-2.417c.166.175.366.314.588.408.235.095.486.14.74.137a1.778 1.778 0 001.376-.603 2.51 2.51 0 00.538-1.736 2.912 2.912 0 00-.502-1.736 1.628 1.628 0 00-1.406-.703zm5.854 2.79c.006.184-.03.366-.108.531a.86.86 0 01-.359.352c-.163.094-.349.144-.538.143a.603.603 0 01-.43-.136.453.453 0 01.007-.66 1.73 1.73 0 01.674-.28c.259-.067.51-.143.754-.23v.28zm1.743 1.421a2.45 2.45 0 01-.043-.502v-2.016a1.995 1.995 0 00-.13-.681 1.292 1.292 0 00-.35-.545 1.614 1.614 0 00-.79-.373 7.187 7.187 0 00-1.262-.087 5.308 5.308 0 00-.904.072 2.13 2.13 0 00-.66.208c-.203.103-.38.25-.517.43-.136.212-.229.449-.272.696l1.671.18a.753.753 0 01.266-.41c.198-.104.421-.15.645-.135a.667.667 0 01.466.129c.104.126.153.289.137.452a5.901 5.901 0 01-.617.215c-.196.048-.622.139-1.277.272-.415.05-.806.225-1.12.502-.207.235-.318.54-.307.854a1.205 1.205 0 00.423.933c.35.275.79.41 1.233.38.368.008.733-.055 1.077-.187a2.26 2.26 0 00.681-.473 2 2 0 00.064.287c.035.094.078.186.13.272h1.635a2.275 2.275 0 01-.18-.473zM11.892 7.979v8.178l5.99 1.062V6.925l-5.99 1.054zm9.024 7.948a.316.316 0 00.064.216.18.18 0 00.137.071.172.172 0 00.143-.071c.04-.06.057-.13.05-.201a.345.345 0 00-.057-.216.18.18 0 00-.22-.055.172.172 0 00-.06.048.337.337 0 00-.057.216v-.008zm.394.366V16.2a.23.23 0 01-.208.115.314.314 0 01-.273-.186.465.465 0 01-.035-.202c0-.066.012-.132.036-.193a.286.286 0 01.385-.161.244.244 0 01.088.075v-.359h.122v1.004h-.115z\"\n            fill=\"#FEFEFE\"\n        />\n        <mask\n            height=\"33\"\n            id=\"mask0_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask0_1854_5393)\">\n            <path\n                d=\"M21.755 16.3h.15v-.739h-.143l-.007.74zm0-.875h.15v-.143h-.143l-.007.143z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask1_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask1_1854_5393)\">\n            <path\n                d=\"M22.207 16.3v-.739h.115v.115a.3.3 0 01.072-.107.136.136 0 01.086-.022.245.245 0 01.122.043l-.044.115a.179.179 0 00-.086-.029.114.114 0 00-.071.022.136.136 0 00-.05.072.488.488 0 00-.022.143v.38l-.122.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask2_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask2_1854_5393)\">\n            <path\n                d=\"M22.91 15.863h.409a.25.25 0 00-.05-.144.187.187 0 00-.144-.071.195.195 0 00-.143.057.23.23 0 00-.072.158zm.409.193l.122.022a.308.308 0 01-.108.172.38.38 0 01-.466-.036.387.387 0 01-.093-.28.402.402 0 01.1-.286.323.323 0 01.244-.1.31.31 0 01.237.1c.068.08.101.182.093.287v.028h-.545c.002.066.028.13.072.18a.2.2 0 00.143.071.186.186 0 00.122-.043c.035-.03.06-.07.072-.115\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask3_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask3_1854_5393)\">\n            <path\n                d=\"M24.216 16.028l.122.014a.316.316 0 01-.1.201.294.294 0 01-.202.072.315.315 0 01-.244-.1.401.401 0 01-.093-.288.51.51 0 01.043-.2.272.272 0 01.115-.137.36.36 0 01.18-.043.301.301 0 01.193.058.28.28 0 01.093.172l-.122.021a.2.2 0 00-.057-.114.158.158 0 00-.108-.036.195.195 0 00-.143.071.323.323 0 00-.065.216.33.33 0 00.058.215.178.178 0 00.143.057.172.172 0 00.122-.043.223.223 0 00.065-.143\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask4_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask4_1854_5393)\">\n            <path\n                d=\"M24.854 16.186l.014.107a.468.468 0 01-.093.015.215.215 0 01-.1-.022.122.122 0 01-.058-.057.454.454 0 01-.014-.144v-.43h-.086v-.093h.086v-.18l.122-.072v.252h.129v.1h-.13v.43c0 .022.002.044.008.065a.05.05 0 00.021.021.086.086 0 00.043.015.41.41 0 00.058-.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask5_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask5_1854_5393)\">\n            <path\n                d=\"M25.657 15.927a.316.316 0 00.058.216.18.18 0 00.143.071.172.172 0 00.137-.071c.04-.06.057-.13.05-.201a.345.345 0 00-.058-.216.18.18 0 00-.219-.055.173.173 0 00-.06.048.338.338 0 00-.05.216v-.008zm.388.366V16.2a.23.23 0 01-.201.115.286.286 0 01-.273-.187.524.524 0 01-.007-.394.287.287 0 01.386-.161.244.244 0 01.088.075v-.36h.122v1.005h-.115z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask6_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask6_1854_5393)\">\n            <path\n                d=\"M26.59 15.863h.402a.251.251 0 00-.043-.144.186.186 0 00-.15-.071.195.195 0 00-.144.057.23.23 0 00-.072.158m.409.194l.129.021a.308.308 0 01-.115.172.38.38 0 01-.459-.036.388.388 0 01-.093-.28.401.401 0 01.093-.286.323.323 0 01.244-.1.307.307 0 01.244.1c.068.08.101.182.093.287v.028h-.545c.003.066.028.13.072.18a.2.2 0 00.143.071.186.186 0 00.122-.043c.035-.03.06-.07.072-.114z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask7_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask7_1854_5393)\">\n            <path\n                d=\"M27.53 15.927a.38.38 0 00.035.187.18.18 0 00.295.029.323.323 0 00.064-.216.33.33 0 00-.057-.215.173.173 0 00-.144-.064.18.18 0 00-.136.071.31.31 0 00-.057.208zm0 .366h-.115V15.29h.122v.359a.244.244 0 01.2-.1c.045 0 .09.009.13.028.038.015.073.04.1.072a.494.494 0 01.079.265.415.415 0 01-.093.294.287.287 0 01-.215.108.229.229 0 01-.208-.108v.086z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask8_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask8_1854_5393)\">\n            <path\n                d=\"M28.333 16.3h.15v-.739h-.143l-.007.74zm0-.875h.15v-.143h-.143l-.007.143z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask9_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask9_1854_5393)\">\n            <path\n                d=\"M29.058 16.186l.021.107a.467.467 0 01-.093.015.215.215 0 01-.108-.022.122.122 0 01-.05-.057.45.45 0 01-.014-.144v-.43h-.094v-.093h.094v-.18l.122-.072v.252h.122v.1h-.122v.43a.219.219 0 000 .065.05.05 0 00.028.021.086.086 0 00.043.015.406.406 0 00.05-.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask10_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask10_1854_5393)\">\n            <path\n                d=\"M15.751 11.666a1.177 1.177 0 00-.272-.731.855.855 0 00-1.248.114 1.22 1.22 0 00-.201.617h1.721zm1.772.84H14.03c.01.225.087.442.222.624a.826.826 0 00.66.301.989.989 0 00.488-.13c.12-.075.224-.172.308-.286l1.722.158c-.22.41-.55.752-.954.982-.502.227-1.05.33-1.6.302a3.265 3.265 0 01-1.427-.258 2.095 2.095 0 01-.861-.811 2.461 2.461 0 01-.337-1.313 2.31 2.31 0 01.681-1.736 2.597 2.597 0 011.894-.66 3.35 3.35 0 011.542.295 2 2 0 01.86.86c.216.46.317.964.295 1.47v.202z\"\n                fill=\"#9A1B27\"\n            />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconSepa);\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Placement } from '@popperjs/core';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n    children?: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        this.getRootElement()?.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\n                            {children}\n                        </div>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={[\n                        { name: 'hide', enabled: false },\n                        { name: 'flip', enabled: false },\n                        { name: 'preventOverflow', enabled: false },\n                    ]}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        !shouldShow ? null : (\n                            <div\n                                className=\"dropdownMenu\"\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    width: '100%',\n                                    zIndex: 1,\n                                }}\n                            >\n                                {dropdown}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            this.getRootElement()?.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\n        });\n    };\n\n    private getRootElement() {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }\n}\n","import { AchInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAchInstrument(\n    instrument: PaymentInstrument,\n): instrument is AchInstrument {\n    return (\n        instrument.type === 'bank' && (instrument.method === 'ecp' || instrument.method === 'ach')\n    );\n}\n","import { BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isSepaInstrument(instrument?: PaymentInstrument): instrument is BankInstrument {\n    return (\n        instrument?.type === 'bank' &&\n        (instrument?.method === 'sepa' || instrument?.method === 'sepa_direct_debit')\n    );\n}\n","import {\n    AccountInstrument,\n    AchInstrument,\n    BankInstrument,\n    PayPalInstrument,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    DropdownTrigger,\n    IconAch,\n    IconNewAccount,\n    IconPaypal,\n    IconSepa,\n    IconSize,\n} from '@bigcommerce/checkout/ui';\n\nimport { isAchInstrument, isBankAccountInstrument, isSepaInstrument } from '../../guards';\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId || ''}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AchInstrumentMenuItemProps {\n    className?: string;\n    instrument: AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AchInstrumentMenuItem: FunctionComponent<AchInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                <IconAch size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-bank\">\n                    <div>\n                        <TranslatedString\n                            data={{ accountNumber: instrument.accountNumber }}\n                            id=\"payment.instrument_account_number_ending\"\n                        />\n                    </div>\n                    <div>\n                        <TranslatedString id=\"payment.instrument_manage_table_header_routing_number_text\" />\n                        : {instrument.issuer}\n                    </div>\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst SepaInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                <IconSepa size={IconSize.Medium} />\n                <div className=\"instrumentSelect-bank\">\n                    <div className=\"instrumentSelect-card\">\n                        <TranslatedString id=\"payment.sepa_account_number\" />:{' '}\n                        {instrument.accountNumber}\n                    </div>\n                </div>\n            </div>\n        </button>\n    );\n};\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    if (isAchInstrument(instrument)) {\n        return (\n            <AchInstrumentMenuItem\n                instrument={instrument}\n                onClick={handleClick}\n                testId=\"instrument-select-option\"\n            />\n        );\n    }\n\n    if (isSepaInstrument(instrument)) {\n        return (\n            <SepaInstrumentMenuItem\n                instrument={instrument}\n                onClick={handleClick}\n                testId=\"instrument-select-option\"\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    if (isSepaInstrument(instrument)) {\n        return (\n            <SepaInstrumentMenuItem\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                instrument={instrument}\n                onClick={onClick}\n                testId={testId}\n            />\n        );\n    }\n\n    if (isAchInstrument(instrument)) {\n        return (\n            <AchInstrumentMenuItem\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                instrument={instrument}\n                onClick={onClick}\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\" data-test=\"account-instrument-select\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        void form.setFieldValue(field.name, instrumentId);\n    }\n}\n\nexport default AccountInstrumentSelect;\n","import { CardInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isCardInstrument(instrument?: PaymentInstrument): instrument is CardInstrument {\n    return instrument !== undefined && instrument.type === 'card';\n}\n\nexport default function assertIsCardInstrument(\n    instrument?: PaymentInstrument,\n): asserts instrument is CardInstrument {\n    if (!isCardInstrument(instrument)) {\n        throw new Error('Is not a card instrument.');\n    }\n}\n","import { AccountInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is AccountInstrument {\n    return instrument.type === 'account';\n}\n","import { AccountInstrument, BankInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconPaypal, IconSize, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isAchInstrument, isBankAccountInstrument, isSepaInstrument } from '../../guards';\n\ninterface ManageInstrumentsRowProps {\n    instrument: AccountInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-accountExternalId\">\n                {isBankAccountInstrument(instrument) || isAchInstrument(instrument) ? (\n                    <span className=\"instrumentModal-instrumentAccountNumber\">\n                        {isSepaInstrument(instrument) ? (\n                            <TranslatedString id=\"payment.sepa_account_number\" />\n                        ) : (\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        )}\n                        {` ${instrument.accountNumber}`}\n                    </span>\n                ) : (\n                    <>\n                        <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n                        <span className=\"instrumentModal-instrumentAccountExternalId\">\n                            {instrument.externalId}\n                        </span>\n                    </>\n                )}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageAccountInstrumentsTableProps {\n    instruments: Array<AccountInstrument | BankInstrument>;\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsTable: FunctionComponent<ManageAccountInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ManageInstrumentsTable);\n","import { AchInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconAch, IconSize, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\ninterface ManageInstrumentsRowProps {\n    instrument: AchInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-bankType\">\n                <IconAch size={IconSize.Medium} />\n            </td>\n            <td data-test=\"manage-instrument-accountNumber\">{instrument.accountNumber}</td>\n            <td data-test=\"manage-instrument-issuer\">{instrument.issuer}</td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageAchInstrumentsTableProps {\n    instruments: AchInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageAchInstrumentsTable: FunctionComponent<ManageAchInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-ach-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_routing_number_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default ManageAchInstrumentsTable;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n\ninterface ManageInstrumentsRowProps {\n    instrument: CardInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-cardType\">\n                <CreditCardIcon cardType={cardType} />\n\n                {cardInfo && (\n                    <span className=\"instrumentModal-instrumentCardType\">{cardInfo.niceType}</span>\n                )}\n            </td>\n            <td data-test=\"manage-instrument-last4\">{instrument.last4}</td>\n            <td\n                className={classNames({ 'instrumentModal-instrumentExpiry--expired': isExpired })}\n                data-test=\"manage-instrument-expiry\"\n            >\n                {`${instrument.expiryMonth}/${instrument.expiryYear}`}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageCardInstrumentsTableProps {\n    instruments: CardInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageCardInstrumentsTable: FunctionComponent<ManageCardInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-card-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_expiry_date_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ManageCardInstrumentsTable);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Alert, AlertType } from '@bigcommerce/checkout/ui';\n\nexport interface ManageInstrumentsAlertProps {\n    error: any; // TODO: Fix typing\n}\n\nconst ManageInstrumentsAlert: FunctionComponent<ManageInstrumentsAlertProps> = ({ error }) => {\n    const { status } = error;\n\n    if (status === 401) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_auth_error\" />\n            </Alert>\n        );\n    }\n\n    if (status >= 400 && status < 500) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_client_error\" />\n            </Alert>\n        );\n    }\n\n    return (\n        <Alert type={AlertType.Error}>\n            <TranslatedString id=\"payment.instrument_manage_delete_server_error\" />\n        </Alert>\n    );\n};\n\nexport default memo(ManageInstrumentsAlert);\n","import { PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { Button, ButtonSize, ButtonVariant, Modal, ModalHeader } from '@bigcommerce/checkout/ui';\n\nimport {\n    isAccountInstrument,\n    isAchInstrument,\n    isBankAccountInstrument,\n    isCardInstrument,\n} from '../../guards';\nimport { ManageAccountInstrumentsTable } from '../ManageAccountInstrumentsTable';\nimport { ManageAchInstrumentsTable } from '../ManageAchInstrumentsTable';\nimport { ManageCardInstrumentsTable } from '../ManageCardInstrumentsTable';\nimport { ManageInstrumentsAlert } from '../ManageInstrumentsAlert';\n\nexport interface ManageInstrumentsModalProps {\n    isOpen: boolean;\n    instruments: PaymentInstrument[];\n    onAfterOpen?(): void;\n    onDeleteInstrument?(instrumentId: string): void;\n    onDeleteInstrumentError?(error: Error): void;\n    onRequestClose?(): void;\n}\n\nexport interface ManageInstrumentsModalState {\n    isConfirmingDelete: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass ManageInstrumentsModal extends Component<\n    ManageInstrumentsModalProps,\n    ManageInstrumentsModalState\n> {\n    static contextType = CheckoutContext;\n    declare context: React.ContextType<typeof CheckoutContext>;\n\n    state: ManageInstrumentsModalState = {\n        isConfirmingDelete: false,\n    };\n\n    render(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                errors: { getDeleteInstrumentError },\n            },\n        } = this.context;\n\n        const deleteInstrumentError = getDeleteInstrumentError();\n\n        const { isOpen, onRequestClose } = this.props;\n\n        return (\n            <Modal\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                footer={this.renderFooter()}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"payment.instrument_manage_modal_title_text\" />\n                    </ModalHeader>\n                }\n                isOpen={isOpen}\n                onAfterOpen={this.handleAfterOpen}\n                onRequestClose={onRequestClose}\n            >\n                {deleteInstrumentError && <ManageInstrumentsAlert error={deleteInstrumentError} />}\n\n                {this.renderContent()}\n            </Modal>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                statuses: { isDeletingInstrument },\n            },\n        } = this.context;\n        const { instruments } = this.props;\n\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <p>\n                    <TranslatedString id=\"payment.instrument_manage_modal_confirmation_label\" />\n                </p>\n            );\n        }\n\n        const cardInstruments = instruments.filter(isCardInstrument);\n        const bankInstruments = instruments.filter(isBankAccountInstrument);\n        const accountInstruments = instruments.filter(isAccountInstrument);\n        const achInstrument = instruments.filter(isAchInstrument);\n\n        if (achInstrument.length) {\n            return (\n                <ManageAchInstrumentsTable\n                    instruments={achInstrument}\n                    isDeletingInstrument={isDeletingInstrument()}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        const bankAndAccountInstruments = [...bankInstruments, ...accountInstruments];\n\n        if (bankAndAccountInstruments.length) {\n            return (\n                <ManageAccountInstrumentsTable\n                    instruments={bankAndAccountInstruments}\n                    isDeletingInstrument={isDeletingInstrument()}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        return (\n            <ManageCardInstrumentsTable\n                instruments={cardInstruments}\n                isDeletingInstrument={isDeletingInstrument()}\n                onDeleteInstrument={this.handleDeleteInstrument}\n            />\n        );\n    }\n\n    private renderFooter(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                statuses: { isDeletingInstrument, isLoadingInstruments },\n            },\n        } = this.context;\n\n        const { onRequestClose } = this.props;\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <>\n                    <Button\n                        onClick={this.handleCancel}\n                        size={ButtonSize.Small}\n                        testId=\"manage-instrument-cancel-button\"\n                    >\n                        <TranslatedString id=\"common.cancel_action\" />\n                    </Button>\n\n                    <Button\n                        disabled={isDeletingInstrument() || isLoadingInstruments()}\n                        onClick={this.handleConfirmDelete}\n                        size={ButtonSize.Small}\n                        testId=\"manage-instrument-confirm-button\"\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"payment.instrument_manage_modal_confirmation_action\" />\n                    </Button>\n                </>\n            );\n        }\n\n        return (\n            <Button\n                onClick={onRequestClose}\n                size={ButtonSize.Small}\n                testId=\"manage-instrument-close-button\"\n            >\n                <TranslatedString id=\"common.close_action\" />\n            </Button>\n        );\n    }\n\n    private handleAfterOpen: () => void = () => {\n        const { onAfterOpen } = this.props;\n\n        this.setState(\n            {\n                isConfirmingDelete: false,\n            },\n            onAfterOpen,\n        );\n    };\n\n    private handleCancel: () => void = () => {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                errors: { getDeleteInstrumentError },\n            },\n            checkoutService: { clearError },\n        } = this.context;\n\n        const deleteInstrumentError = getDeleteInstrumentError();\n\n        if (deleteInstrumentError) {\n            void clearError(deleteInstrumentError);\n        }\n\n        this.setState({\n            isConfirmingDelete: false,\n        });\n    };\n\n    private handleConfirmDelete: () => void = async () => {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutService: { deleteInstrument },\n        } = this.context;\n\n        const {\n            onDeleteInstrument = noop,\n            onDeleteInstrumentError = noop,\n            onRequestClose = noop,\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (!selectedInstrumentId) {\n            return;\n        }\n\n        try {\n            await deleteInstrument(selectedInstrumentId);\n            onDeleteInstrument(selectedInstrumentId);\n            onRequestClose();\n        } catch (error) {\n            onDeleteInstrumentError(error);\n        }\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isConfirmingDelete: true,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default ManageInstrumentsModal;\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { AccountInstrumentSelect } from '../AccountInstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n            testId=\"account-instrument-fieldset\"\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\" data-test=\"instrument-select-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nclass InstrumentSelect extends PureComponent<InstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<InstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            field,\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate = false,\n        } = this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <InstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideExpiryDate}\n                        />\n                    }\n                >\n                    <InstrumentSelectButton\n                        instrument={selectedInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" {...field} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        void form.setFieldValue(field.name, instrumentId);\n    }\n}\n\nexport default InstrumentSelect;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { BasicFormField } from '../BasicFormField';\nimport { CheckboxInput } from '../CheckboxInput';\nimport { FormFieldError } from '../FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <CheckboxInput\n                    {...field}\n                    checked={!!field.value}\n                    disabled={disabled}\n                    id={id || field.name}\n                    label={labelContent}\n                />\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n            </>\n        ),\n        [disabled, id, labelContent, name],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(CheckboxFormField);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\ninterface InstrumentStorageFieldProps {\n    isAccountInstrument: boolean;\n}\n\nconst InstrumentStorageField: FunctionComponent<InstrumentStorageFieldProps> = ({\n    isAccountInstrument,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_payment_method_label'\n        : 'payment.instrument_save_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--saveInstrument\"\n            labelContent={labelContent}\n            name=\"shouldSaveInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStorageField);\n","import React, { FunctionComponent, memo, useEffect, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\ninterface InstrumentStoreAsDefaultFieldProps {\n    isAccountInstrument: boolean;\n    disabled?: boolean;\n}\n\nconst InstrumentStoreAsDefaultField: FunctionComponent<InstrumentStoreAsDefaultFieldProps> = ({\n    isAccountInstrument,\n    disabled = false,\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_as_default_payment_method_label'\n        : 'payment.instrument_save_as_default_payment_method_label';\n\n    useEffect(() => {\n        if (disabled) {\n            paymentForm.setFieldValue('shouldSetAsDefaultInstrument', false);\n        }\n        // Ignoring paymentForm dependency as it causes sequential re-renders when included in array\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disabled]);\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--setAsDefaultInstrument\"\n            disabled={disabled}\n            labelContent={labelContent}\n            name=\"shouldSetAsDefaultInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStoreAsDefaultField);\n","import { PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentFormService,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset } from '@bigcommerce/checkout/ui';\n\nimport { InstrumentStorageField } from '../InstrumentStorageField';\nimport { InstrumentStoreAsDefaultField } from '../InstrumentStoreAsDefaultField';\n\ninterface StoreInstrumentFieldsetProps {\n    isAccountInstrument?: boolean;\n    instrumentId?: string;\n    instruments: PaymentInstrument[];\n}\n\ninterface WithStorageSettings {\n    showSave: boolean;\n    showSetAsDefault: boolean;\n    setAsDefaultEnabled: boolean;\n}\n\nconst useProps = (\n    props: StoreInstrumentFieldsetProps,\n    paymentForm: PaymentFormService,\n): WithStorageSettings => {\n    const saveIsChecked = Boolean(paymentForm.getFieldValue<boolean>('shouldSaveInstrument'));\n\n    const { instrumentId, instruments } = props;\n\n    const addingNewInstrument = !instrumentId;\n    const hasAnyOtherInstruments = !!instruments && instruments.length > 0;\n    const instrument =\n        instruments && instruments.find(({ bigpayToken }) => bigpayToken === instrumentId);\n\n    return {\n        ...props,\n        showSave: addingNewInstrument,\n        showSetAsDefault:\n            (addingNewInstrument && hasAnyOtherInstruments) ||\n            Boolean(instrument && !instrument.defaultInstrument),\n        setAsDefaultEnabled: !addingNewInstrument || saveIsChecked,\n    };\n};\n\nconst StoreInstrumentFieldset: FunctionComponent<StoreInstrumentFieldsetProps> = ({\n    isAccountInstrument = false,\n    ...props\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n\n    const { showSave, showSetAsDefault, setAsDefaultEnabled } = useProps(props, paymentForm);\n\n    return (\n        <Fieldset>\n            {showSave && <InstrumentStorageField isAccountInstrument={isAccountInstrument} />}\n\n            {showSetAsDefault && (\n                <InstrumentStoreAsDefaultField\n                    disabled={!setAsDefaultEnabled}\n                    isAccountInstrument={isAccountInstrument}\n                />\n            )}\n        </Fieldset>\n    );\n};\n\nexport default StoreInstrumentFieldset;\n","import {\n    AccountInstrument,\n    CardInstrument,\n    CheckoutSelectors,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    Instrument,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n","import { LineItemMap, PaymentInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { Instrument, LineItemMap, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentMethodProps, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport type AdyenV2FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    showAdditionalActionContent: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV2Form: FunctionComponent<AdyenV2FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    showAdditionalActionContent,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    onUnhandledError,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    ...rest\n}) => {\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired },\n        },\n    } = useCheckout();\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={showAdditionalActionContent}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!showAdditionalActionContent && (\n                <div id={additionalActionContainerId} style={{ display: 'none' }} />\n            )}\n        </>\n    );\n};\n\nexport default AdyenV2Form;\n","import {\n    AdyenCreditCardComponentOptions,\n    AdyenIdealComponentOptions,\n    AdyenValidationState,\n    CardInstrument,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV2CardValidation from './AdyenV2CardValidation';\nimport AdyenV2Form from './AdyenV2Form';\n\nexport interface AdyenOptions {\n    scheme: AdyenCreditCardComponentOptions;\n    bcmc: AdyenCreditCardComponentOptions;\n    ideal: AdyenIdealComponentOptions;\n}\n\nexport enum AdyenV2PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    ideal = 'ideal',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n    const [showAdditionalActionContent, setShowAdditionalActionContent] = useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const threeDS2ContainerId = `adyen-${method.id}-additional-action-component-field`;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const component = method.id as AdyenV2PaymentMethodType;\n    const shouldHideInstrumentExpiryDate = component === AdyenV2PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShowAdditionalActionContent(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setShowAdditionalActionContent(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setShowAdditionalActionContent(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n            const adyenOptions: AdyenOptions = {\n                [AdyenV2PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n                [AdyenV2PaymentMethodType.bcmc]: {\n                    hasHolderName: false,\n                },\n                [AdyenV2PaymentMethodType.ideal]: {\n                    showImage: true,\n                },\n            };\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv2: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    threeDS2ContainerId,\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            threeDS2ContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV2CardValidation\n                cardValidationState={cardValidationState}\n                language={language}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV2Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                language={language}\n                                method={method}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                showAdditionalActionContent={showAdditionalActionContent}\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV2PaymentMethod,\n    [{ gateway: 'adyenv2' }],\n);\n","import { AdyenValidationState, CardInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV3CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV3CardValidation: FunctionComponent<AdyenV3CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            <TranslatedString id=\"payment.credit_card_number_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV3CardValidation;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\nimport { Omit } from 'utility-types';\n\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport type AdyenV3FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    shouldRenderAdditionalActionContentModal: boolean;\n    isModalVisible: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV3Form: FunctionComponent<AdyenV3FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    shouldRenderAdditionalActionContentModal,\n    isModalVisible,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    checkoutState,\n    checkoutService,\n    onUnhandledError,\n    ...rest\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={shouldRenderAdditionalActionContentModal}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n                style={\n                    !isModalVisible && method.id === 'scheme'\n                        ? {\n                              overlay: {\n                                  display: 'none',\n                              },\n                          }\n                        : {}\n                }\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!shouldRenderAdditionalActionContentModal && <div id={additionalActionContainerId} />}\n        </>\n    );\n};\n\nexport default AdyenV3Form;\n","import {\n    AdyenCreditCardComponentOptions,\n    AdyenValidationState,\n    CardInstrument,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV3CardValidation from './AdyenV3CardValidation';\nimport AdyenV3Form from './AdyenV3Form';\n\nexport interface AdyenOptions {\n    [key: string]: AdyenCreditCardComponentOptions;\n}\n\nexport enum AdyenV3PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    onUnhandledError,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n\n    const [shouldRenderAdditionalActionContentModal, setShouldRenderAdditionalActionContentModal] =\n        useState<boolean>(false);\n    const [isAdditionalActionContentModalVisible, setIsAdditionalActionContentModalVisible] =\n        useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const component = method.id;\n    const shouldHideInstrumentExpiryDate = component === AdyenV3PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShouldRenderAdditionalActionContentModal(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onActionHandled = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(true);\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            const adyenOptions: AdyenOptions = {\n                [AdyenV3PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv3: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                        onActionHandled,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            onActionHandled,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV3CardValidation\n                cardValidationState={cardValidationState}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV3Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                hideContentWhenSignedOut\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                isModalVisible={isAdditionalActionContentModalVisible}\n                                language={language}\n                                method={method}\n                                onUnhandledError={onUnhandledError}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                shouldRenderAdditionalActionContentModal={\n                                    shouldRenderAdditionalActionContentModal\n                                }\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV3PaymentMethod,\n    [{ gateway: 'adyenv3' }],\n);\n","import { Customer, PaymentMethod, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import {\n    AccountInstrument,\n    CheckoutSelectors,\n    CheckoutService,\n    LanguageService,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentMethodProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface HostedPaymentMethodDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentMethodProps,\n): HostedPaymentMethodDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nclass HostedPaymentMethodComponent extends Component<\n    HostedPaymentMethodProps,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        const { isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp, loadInstruments } =\n            getHostedPaymentMethodDerivedProps(this.props);\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { description, isInitializing = false } = this.props;\n\n        const {\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = getHostedPaymentMethodDerivedProps(this.props);\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            instruments={instruments}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n\n        const { instruments } = getHostedPaymentMethodDerivedProps(this.props);\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = getHostedPaymentMethodDerivedProps(this.props);\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nexport default HostedPaymentMethodComponent;\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AffirmPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const description = useMemo(() => <TranslatedString id=\"payment.affirm_body_text\" />, []);\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            description={description}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AffirmPaymentMethod,\n    [{ id: 'affirm' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AfterpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AfterpayPaymentMethod,\n    [{ gateway: 'afterpay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AmazonPayV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    method: {\n        initializationData: { paymentDescriptor, paymentToken },\n    },\n    ...rest\n}) => {\n    const initializeAmazonPayV2Payment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                amazonpay: {\n                    editButtonId: 'editButtonId',\n                },\n            }),\n        [checkoutService],\n    );\n\n    const reload = useCallback(() => window.location.reload(), []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...rest}\n            buttonId=\"editButtonId\"\n            containerId=\"paymentWidget\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            hideWidget\n            initializePayment={initializeAmazonPayV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignInRequired={false}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            onSignOut={reload}\n            paymentDescriptor={paymentDescriptor}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldShow={!!paymentToken}\n            shouldShowDescriptor={!!paymentToken}\n            shouldShowEditButton={!!paymentToken}\n            signOut={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AmazonPayV2PaymentMethod,\n    [{ id: 'amazonpay' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ApplePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    language,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    applepay: {\n                        shippingLabel: language.translate('cart.shipping_text'),\n                        subtotalLabel: language.translate('cart.subtotal_text'),\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, language, method, onUnhandledError]);\n\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ApplePaymentMethod,\n    [{ id: 'applepay' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BarclaycardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BarclaycardPaymentMethod,\n    [{ gateway: 'barclaycard' }],\n);\n","import {\n    AccountInstrument,\n    HostedInstrument,\n    BigCommercePaymentsPaymentInitializeOptions,\n    BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    BigCommercePaymentsCreditCardsPaymentInitializeOptions,\n    BigCommercePaymentsVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype BigCommercePaymentsProvidersPaymentInitializeOptions =\n    BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions &\n        BigCommercePaymentsCreditCardsPaymentInitializeOptions &\n        BigCommercePaymentsPaymentInitializeOptions &\n        BigCommercePaymentsVenmoPaymentInitializeOptions;\n\ninterface BigCommercePaymentsPaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<BigCommercePaymentsProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst BigCommercePaymentsPaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & BigCommercePaymentsPaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default BigCommercePaymentsPaymentMethodComponent;\n","import { AccountInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBigCommercePaymentsInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBigCommercePaymentsInstrument;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\nimport useBigCommercePaymentsInstrument from '../hooks/useBigCommercePaymentsInstruments';\n\nconst BigCommercePaymentsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { ...isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = useBigCommercePaymentsInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    });\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <BigCommercePaymentsPaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"bigcommerce_payments\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </BigCommercePaymentsPaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPaymentMethod,\n    [{ id: 'bigcommerce_payments' }],\n);\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(method.id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"bigcommerce_payments_apms\"\n            {...props}\n        >\n            <div className={`widget widget--${method.id} payment-widget`} id={widgetContainerId} />\n        </BigCommercePaymentsPaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsAPMsPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconLock: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconLock);\n","import { number } from 'card-validator';\n\nimport unformatCreditCardNumber from '../unformatCreditCardNumber/unformatCreditCardNumber';\n\nexport default function formatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    const unformattedValue = unformatCreditCardNumber(value, separator);\n\n    return card.gaps\n        .filter((gapIndex) => unformattedValue.length > gapIndex)\n        .reduce(\n            (output, gapIndex, index) =>\n                [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(separator),\n            unformattedValue,\n        );\n}\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","import creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { max } from 'lodash';\nimport React, {\n    ChangeEventHandler,\n    createRef,\n    FunctionComponent,\n    memo,\n    PureComponent,\n    ReactNode,\n    RefObject,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInput } from '@bigcommerce/checkout/ui';\n\nimport formatCreditCardNumber from '../formatCreditCardNumber/formatCreditCardNumber';\n\nexport interface CreditCardNumberFieldProps {\n    name: string;\n}\n\nclass CreditCardNumberInput extends PureComponent<FieldProps<string>> {\n    private inputRef: RefObject<HTMLInputElement> = createRef();\n    private nextSelectionEnd = 0;\n\n    componentDidUpdate(): void {\n        if (this.inputRef.current && this.inputRef.current.selectionEnd !== this.nextSelectionEnd) {\n            this.inputRef.current.setSelectionRange(this.nextSelectionEnd, this.nextSelectionEnd);\n        }\n    }\n\n    render(): ReactNode {\n        const { field } = this.props;\n\n        return (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-number\"\n                    id={field.name}\n                    onChange={this.handleChange}\n                    ref={this.inputRef}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        );\n    }\n\n    private handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n        const separator = ' ';\n        const { value = '' } = event.target;\n        const { field, form } = this.props;\n        const { name, value: previousValue = '' } = field;\n        const selectionEnd = this.inputRef.current && this.inputRef.current.selectionEnd;\n\n        // Only allow digits and spaces\n        if (new RegExp(`[^\\\\d${separator}]`).test(value)) {\n            return form.setFieldValue(name, previousValue);\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n\n        const formattedValue = formatCreditCardNumber(\n            value.replace(new RegExp(separator, 'g'), '').slice(0, maxLength),\n            separator,\n        );\n\n        if (selectionEnd === value.length && value.length < formattedValue.length) {\n            this.nextSelectionEnd = formattedValue.length;\n        } else {\n            this.nextSelectionEnd = selectionEnd || 0;\n        }\n\n        return form.setFieldValue(name, formattedValue);\n    };\n}\n\nconst CreditCardNumberField: FunctionComponent<CreditCardNumberFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field, form, meta }: FieldProps<string>) => (\n            <CreditCardNumberInput field={field} form={form} meta={meta} />\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_number_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNumberField);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeVisa: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV visa, mc, disc</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <path d=\"M0 5h88v12H0z\" fill=\"#838383\" />\n            <path d=\"M3 23h82v10H3z\" fill=\"#FFF\" />\n            <path\n                d=\"M69.81 29.053c.015.297.13.502.343.616.11.058.233.088.37.088.258 0 .477-.107.66-.32.18-.215.31-.65.384-1.306-.12.19-.267.322-.444.4-.176.076-.366.114-.57.114-.412 0-.74-.13-.98-.386-.24-.257-.36-.588-.36-.993 0-.388.12-.73.357-1.025.237-.295.587-.443 1.05-.443.623 0 1.054.28 1.29.842.133.31.2.696.2 1.16 0 .525-.08.99-.238 1.394-.26.674-.703 1.01-1.327 1.01-.42 0-.737-.11-.954-.328-.217-.22-.325-.494-.325-.825h.544zm1.4-1.09c.176-.14.265-.387.265-.737 0-.315-.08-.55-.238-.705-.16-.153-.36-.23-.606-.23-.262 0-.47.088-.625.264-.155.177-.232.412-.232.707 0 .28.068.502.203.667.136.164.352.246.65.246.213 0 .408-.07.584-.21zm3.414-.563c.133-.132.2-.29.2-.474 0-.16-.064-.306-.19-.44-.13-.133-.323-.2-.585-.2-.26 0-.447.067-.563.2-.115.134-.173.29-.173.47 0 .202.075.36.224.473.15.112.326.17.53.17.237 0 .422-.067.556-.2zm.097 2.118c.165-.135.247-.336.247-.603 0-.277-.084-.487-.254-.63-.17-.144-.386-.216-.652-.216-.256 0-.466.072-.628.22-.163.145-.244.348-.244.607 0 .223.074.416.223.58.15.16.38.243.69.243.25 0 .456-.068.62-.202zm-1.735-1.937c-.158-.158-.236-.365-.236-.62 0-.32.114-.594.345-.823.232-.23.56-.344.984-.344.41 0 .732.108.965.325.233.216.35.47.35.758 0 .267-.068.483-.203.65-.076.092-.194.184-.353.274.176.08.316.175.418.28.19.2.284.46.284.778 0 .377-.127.697-.38.96-.253.26-.61.392-1.074.392-.416 0-.77-.113-1.057-.34-.287-.226-.43-.554-.43-.985 0-.253.06-.472.184-.656.124-.186.307-.327.55-.424-.15-.064-.265-.14-.35-.225zm5.614-1.42c.188.248.282.503.282.766h-.532c-.032-.17-.083-.302-.153-.397-.13-.18-.326-.27-.59-.27-.3 0-.54.14-.717.417-.177.278-.276.676-.296 1.194.124-.18.28-.316.467-.405.172-.08.364-.12.575-.12.36 0 .672.115.94.344.266.228.4.57.4 1.025 0 .388-.127.733-.38 1.033-.253.3-.614.45-1.083.45-.4 0-.746-.152-1.037-.456-.29-.304-.437-.816-.437-1.536 0-.532.065-.983.194-1.354.25-.71.705-1.065 1.367-1.065.478 0 .81.124 1 .372zm-.404 3.274c.14-.19.21-.415.21-.674 0-.22-.062-.43-.188-.627-.126-.198-.354-.297-.685-.297-.23 0-.434.076-.608.23-.175.153-.262.385-.262.694 0 .27.08.498.238.683.16.184.38.277.66.277.283 0 .495-.096.636-.286z\"\n                fill=\"#636363\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"19\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeVisa);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeAmex: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV amex</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <text\n                fill=\"#979BA1\"\n                fontFamily=\"Avenir Next\"\n                fontSize=\"6\"\n                fontWeight=\"420\"\n                letterSpacing=\".2\"\n            >\n                <tspan x=\"11\" y=\"35\">\n                    3712 567890 374\n                </tspan>\n                <tspan x=\"70.21\" y=\"35\">\n                    5\n                </tspan>\n            </text>\n            <path\n                d=\"M69.182 26.767h-.55v-3.35l-.762.635-.324-.38 1.142-.926h.494v4.02zm4.19 0H70.75v-.528l1.6-1.59c.122-.126.226-.257.313-.393s.13-.29.13-.46c0-.106-.018-.202-.056-.287-.038-.085-.09-.158-.153-.22-.065-.06-.14-.106-.228-.138-.087-.032-.18-.048-.278-.048-.204 0-.373.065-.505.196-.133.13-.216.298-.25.503l-.54-.09c.023-.153.07-.294.145-.424.074-.132.168-.246.28-.342.115-.097.246-.17.396-.224.15-.053.31-.08.48-.08.166 0 .326.025.48.074.153.05.288.12.406.216.117.094.21.214.28.357.07.145.106.31.106.496 0 .128-.017.248-.05.357-.035.11-.082.214-.14.313-.06.098-.128.192-.208.28-.08.09-.162.178-.25.265l-1.306 1.273h1.97v.494zm1.625-2.328h.176c.114 0 .225-.012.333-.033.107-.02.203-.056.286-.107.084-.052.15-.12.202-.208.05-.087.077-.195.077-.323 0-.104-.018-.196-.056-.277-.038-.08-.09-.15-.156-.207-.067-.057-.142-.102-.227-.134-.085-.032-.175-.048-.27-.048-.17 0-.314.044-.434.13-.12.088-.21.21-.27.364l-.5-.176c.1-.242.257-.433.475-.57.22-.14.47-.208.753-.208.167 0 .325.024.475.07.15.048.28.117.394.208.114.09.204.205.27.34.066.137.1.294.1.472 0 .114-.018.22-.054.318-.036.1-.086.188-.148.267-.063.08-.137.147-.224.204-.087.057-.182.098-.284.125v.01c.117.023.226.063.326.12.1.056.187.127.26.212.07.086.127.183.17.293.04.11.06.23.06.358 0 .2-.036.377-.112.53-.076.154-.176.282-.3.384-.126.102-.27.18-.433.233-.163.053-.33.08-.5.08-.318 0-.598-.073-.84-.216-.242-.144-.418-.368-.528-.67l.51-.17c.06.173.165.315.31.425.146.11.325.164.537.164.102 0 .202-.016.298-.05.097-.03.183-.08.26-.143.074-.064.135-.143.18-.238.046-.095.07-.206.07-.335 0-.14-.032-.257-.092-.352-.06-.095-.14-.17-.236-.23-.097-.06-.205-.1-.327-.125-.12-.025-.24-.037-.357-.037h-.17v-.454zm4.73.953h.58v.47h-.58v.904h-.533v-.903h-1.85v-.5l1.708-2.618h.676v2.647zm-.533-2.016h-.01l-1.273 2.016h1.284v-2.016z\"\n                fill=\"#636363\"\n                opacity=\".9\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"16\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeAmex);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconCardCodeAmex, IconCardCodeVisa, IconSize } from '@bigcommerce/checkout/ui';\n\nimport './CreditCardCodeTooltip.scss';\n\nconst CreditCardCodeTooltip: FunctionComponent = () => (\n    <div className=\"dropdown-menu dropdown-menu--content dropdown-menu--card-code\">\n        <div className=\"form-ccFields-cvvExample\">\n            <div className=\"form-ccFields-cvvExampleDescription\">\n                <p>\n                    <TranslatedString id=\"payment.credit_card_cvv_help_text\" />\n                </p>\n            </div>\n\n            <div className=\"form-ccFields-cvvExampleFigures\">\n                <figure>\n                    <IconCardCodeVisa size={IconSize.Large} />\n                </figure>\n\n                <figure>\n                    <IconCardCodeAmex size={IconSize.Large} />\n                </figure>\n            </div>\n        </div>\n    </div>\n);\n\nexport default CreditCardCodeTooltip;\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconHelp, IconLock, TextInput, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport CreditCardCodeTooltip from './CreditCardCodeTooltip';\n\nexport interface CreditCardCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCodeField: FunctionComponent<CreditCardCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-csc\"\n                    id={field.name}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardCodeField);\n","import React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CreditCardCodeField, CreditCardNumberField } from '../index';\n\ninterface CreditCardValidationProps {\n    shouldShowCardCodeField: boolean;\n    shouldShowNumberField: boolean;\n}\n\nconst CreditCardValidation: React.FunctionComponent<CreditCardValidationProps> = ({\n    shouldShowNumberField,\n    shouldShowCardCodeField,\n}) => (\n    <>\n        {shouldShowNumberField && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {shouldShowNumberField && <CreditCardNumberField name=\"ccNumber\" />}\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n        </div>\n    </>\n);\n\nexport default CreditCardValidation;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport React, { ChangeEvent, FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nimport { formatCreditCardExpiryDate } from '.';\n\ninterface CreditCardExpiryFieldProps {\n    name: string;\n}\n\nconst CreditCardExpiryField: FunctionComponent<CreditCardExpiryFieldProps> = ({ name }) => {\n    const { language } = useLocale();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const handleChange = useCallback(\n        memoizeOne((field: FieldProps['field'], form: FieldProps['form']) => {\n            return (event: ChangeEvent<any>) => {\n                void form.setFieldValue(field.name, formatCreditCardExpiryDate(event.target.value));\n            };\n        }),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps) => (\n            <TextInput\n                {...field}\n                autoComplete=\"cc-exp\"\n                id={field.name}\n                onChange={handleChange(field, form)}\n                placeholder={language.translate('payment.credit_card_expiration_placeholder_text')}\n                type=\"tel\"\n            />\n        ),\n        [handleChange, language],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_expiration_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardExpiryField);\n","export default function formatCreditCardExpiryDate(value: string): string {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n    const trimmedMonth = month.slice(0, 2);\n    const trimmedYear =\n        year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n    // i.e.: '1'\n    if (value.length < 2) {\n        return month;\n    }\n\n    // ie.: '10 /' (without trailing space)\n    if (value.length > 3 && !trimmedYear) {\n        return trimmedMonth;\n    }\n\n    return `${trimmedMonth} / ${trimmedYear}`;\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardNameFieldProps {\n    name: string;\n}\n\nconst CreditCardNameField: FunctionComponent<CreditCardNameFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"cc-name\" id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_name_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNameField);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardCustomerCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCustomerCodeField: FunctionComponent<CreditCardCustomerCodeFieldProps> = ({\n    name,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_customer_code_label\" />{' '}\n                <small className=\"optimizedCheckout-contentSecondary\">\n                    <TranslatedString id=\"common.optional_text\" />\n                </small>\n            </>\n        ),\n        [],\n    );\n\n    return <FormField input={renderInput} labelContent={labelContent} name={name} />;\n};\n\nexport default memo(CreditCardCustomerCodeField);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    CreditCardCodeField,\n    CreditCardCustomerCodeField,\n    CreditCardExpiryField,\n    CreditCardNameField,\n    CreditCardNumberField,\n} from '../';\n\nexport interface CreditCardFieldsetProps {\n    shouldShowCardCodeField?: boolean;\n    shouldShowCustomerCodeField?: boolean;\n    shouldShowSaveCardField?: boolean;\n}\n\nconst CreditCardFieldset: FunctionComponent<CreditCardFieldsetProps> = ({\n    shouldShowCardCodeField,\n    shouldShowCustomerCodeField,\n}) => (\n    <Fieldset\n        additionalClassName=\"creditCardFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <CreditCardNumberField name=\"ccNumber\" />\n\n            <CreditCardExpiryField name=\"ccExpiry\" />\n\n            <CreditCardNameField name=\"ccName\" />\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n\n            {shouldShowCustomerCodeField && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />}\n        </div>\n    </Fieldset>\n);\n\nexport default memo(CreditCardFieldset);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, number } from 'card-validator';\nimport creditCardType from 'credit-card-type';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport { CardInstrumentFieldsetValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { mapFromInstrumentCardType } from '../';\n\nexport interface InstrumentValidationSchemaOptions {\n    instrumentBrand: string;\n    instrumentLast4: string;\n    isCardCodeRequired: boolean;\n    isCardNumberRequired: boolean;\n    language: LanguageService;\n}\n\ninterface InstrumentValidationSchema {\n    ccCvv?: StringSchema;\n    ccNumber?: StringSchema;\n    instrumentId: StringSchema;\n}\n\nexport default memoize(function getInstrumentValidationSchema({\n    instrumentBrand,\n    instrumentLast4,\n    isCardCodeRequired,\n    isCardNumberRequired,\n    language,\n}: InstrumentValidationSchemaOptions): ObjectSchema<CardInstrumentFieldsetValues> {\n    const schema: InstrumentValidationSchema = {\n        instrumentId: string().required(),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value = '') {\n                    const cardType = mapFromInstrumentCardType(instrumentBrand);\n                    const cardInfo = creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined)\n                        .isValid;\n                },\n            });\n    }\n\n    if (isCardNumberRequired) {\n        schema.ccNumber = string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: language.translate('payment.credit_card_number_mismatch_error'),\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                test: (value = '') => value.slice(-instrumentLast4.length) === instrumentLast4,\n            });\n    }\n\n    return object(schema);\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, expirationDate, number } from 'card-validator';\nimport { object, ObjectSchema, string } from 'yup';\n\nimport { CreditCardFieldsetValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface CreditCardValidationSchemaOptions {\n    isCardCodeRequired: boolean;\n    language: LanguageService;\n}\n\nexport default memoize(function getCreditCardValidationSchema({\n    isCardCodeRequired,\n    language,\n}: CreditCardValidationSchemaOptions): ObjectSchema<CreditCardFieldsetValues> {\n    const schema = {\n        ccCustomerCode: string(),\n        ccCvv: string(),\n        ccExpiry: string()\n            .required(language.translate('payment.credit_card_expiration_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_expiration_invalid_error'),\n\n                test: (value) => expirationDate(value).isValid,\n            }),\n        ccName: string()\n            .max(200)\n            .required(language.translate('payment.credit_card_name_required_error')),\n        ccNumber: string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n\n                test: (value) => number(value).isValid,\n            }),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value) {\n                    const { card } = number(this.parent.ccNumber);\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    return object(schema);\n});\n","import { createCurrencyService, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport getLanguageService from './getLanguageService';\nimport { LocaleContextType } from './LocaleContext';\n\nexport default function createLocaleContext(config: StoreConfig): Required<LocaleContextType> {\n    if (!config) {\n        throw new Error('Missing configuration data');\n    }\n\n    const { inputDateFormat } = config;\n\n    return {\n        currency: createCurrencyService(config),\n        date: {\n            inputFormat: inputDateFormat,\n        },\n        language: getLanguageService(),\n    };\n}\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    HostedFieldType,\n    Instrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport {\n    CardInstrumentFieldset,\n    configureCardValidator,\n    CreditCardFieldset,\n    CreditCardFieldsetValues,\n    CreditCardValidation,\n    getCreditCardValidationSchema,\n    getInstrumentValidationSchema,\n    isCardInstrument,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { createLocaleContext, LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    CardInstrumentFieldsetValues,\n    PaymentMethodProps,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardPaymentMethodProps {\n    cardFieldset?: ReactNode;\n    cardValidationSchema?: ObjectSchema;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    getHostedFormOptions?(selectedInstrument?: CardInstrument): Promise<LegacyHostedFormOptions>;\n    getStoredCardValidationFieldset?(selectedInstrument?: CardInstrument): ReactNode;\n}\n\ninterface CreditCardPaymentMethodDerivedProps {\n    instruments: CardInstrument[];\n    isCardCodeRequired: boolean;\n    isCustomerCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    shouldShowInstrumentFieldset: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\ninterface CreditCardPaymentMethodState {\n    focusedHostedFieldType?: HostedFieldType;\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport type CreditCardPaymentMethodValues = CreditCardFieldsetValues | CardInstrumentFieldsetValues;\n\nclass CreditCardPaymentMethodComponent extends Component<\n    CreditCardPaymentMethodProps & PaymentMethodProps\n> {\n    state: CreditCardPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    private filterInstruments = memoizeOne(\n        (instruments: PaymentInstrument[] = []): CardInstrument[] =>\n            instruments.filter(isCardInstrument),\n    );\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n        const { isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp, loadInstruments } =\n            this.getCreditCardPaymentMethodDerivedProps();\n\n        setValidationSchema(method, this.getValidationSchema());\n        configureCardValidator();\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await initializePayment(\n                {\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                },\n                this.getSelectedInstrument(),\n            );\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n\n        setValidationSchema(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentDidUpdate(\n        _prevProps: Readonly<CreditCardPaymentMethodProps>,\n        prevState: Readonly<CreditCardPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            initializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            isAddingNewCard !== prevState.isAddingNewCard\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                await initializePayment(\n                    {\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    },\n                    this.getSelectedInstrument(),\n                );\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            checkoutState,\n            cardFieldset,\n            getStoredCardValidationFieldset,\n            isInitializing,\n            method,\n        } = this.props;\n        const {\n            instruments,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldShowInstrumentFieldset,\n        } = this.getCreditCardPaymentMethodDerivedProps();\n        const {\n            data: { getConfig },\n        } = checkoutState;\n\n        const { isAddingNewCard } = this.state;\n\n        const selectedInstrument = this.getSelectedInstrument();\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowNumberField = selectedInstrument\n            ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n            : false;\n        const shouldShowCardCodeField = selectedInstrument\n            ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n            : false;\n\n        const storeConfig = getConfig();\n\n        if (!storeConfig) {\n            throw Error('Unable to get config or customer');\n        }\n\n        return (\n            <LocaleContext.Provider value={createLocaleContext(storeConfig)}>\n                <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                    <div className=\"paymentMethod paymentMethod--creditCard\">\n                        {shouldShowInstrumentFieldset && (\n                            <CardInstrumentFieldset\n                                instruments={instruments}\n                                onDeleteInstrument={this.handleDeleteInstrument}\n                                onSelectInstrument={this.handleSelectInstrument}\n                                onUseNewInstrument={this.handleUseNewCard}\n                                selectedInstrumentId={\n                                    selectedInstrument && selectedInstrument.bigpayToken\n                                }\n                                validateInstrument={\n                                    getStoredCardValidationFieldset ? (\n                                        getStoredCardValidationFieldset(selectedInstrument)\n                                    ) : (\n                                        <CreditCardValidation\n                                            shouldShowCardCodeField={shouldShowCardCodeField}\n                                            shouldShowNumberField={shouldShowNumberField}\n                                        />\n                                    )\n                                }\n                            />\n                        )}\n\n                        {shouldShowCreditCardFieldset && !cardFieldset && (\n                            <CreditCardFieldset\n                                shouldShowCardCodeField={\n                                    method.config.cardCode || method.config.cardCode === null\n                                }\n                                shouldShowCustomerCodeField={method.config.requireCustomerCode}\n                            />\n                        )}\n\n                        {shouldShowCreditCardFieldset && cardFieldset}\n\n                        {isInstrumentFeatureAvailableProp && (\n                            <StoreInstrumentFieldset\n                                instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                                instruments={instruments}\n                            />\n                        )}\n                    </div>\n                </LoadingOverlay>\n            </LocaleContext.Provider>\n        );\n    }\n\n    private getSelectedInstrument(): CardInstrument | undefined {\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const { cardValidationSchema, language, method, storedCardValidationSchema } = this.props;\n        const {\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n        } = this.getCreditCardPaymentMethodDerivedProps();\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return (\n                storedCardValidationSchema ||\n                getInstrumentValidationSchema({\n                    instrumentBrand: selectedInstrument.brand,\n                    instrumentLast4: selectedInstrument.last4,\n                    isCardCodeRequired: isInstrumentCardCodeRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    isCardNumberRequired: isInstrumentCardNumberRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    language,\n                })\n            );\n        }\n\n        return (\n            cardValidationSchema ||\n            getCreditCardValidationSchema({\n                isCardCodeRequired: method.config.cardCode === true,\n                language,\n            })\n        );\n    }\n\n    private handleUseNewCard: () => void = () => {\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const {\n            paymentForm: { setFieldValue },\n        } = this.props;\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getCreditCardPaymentMethodDerivedProps(): CreditCardPaymentMethodDerivedProps {\n        const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = this.props;\n\n        const {\n            data: { getConfig, getCustomer, getInstruments, isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer || !method) {\n            throw new Error('Unable to get checkout');\n        }\n\n        const instruments = this.filterInstruments(getInstruments(method));\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            isUsingMultiShipping,\n            paymentMethod: method,\n        });\n\n        return {\n            instruments,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isCustomerCodeRequired: !!method.config.requireCustomerCode,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n            shouldShowInstrumentFieldset:\n                isInstrumentFeatureAvailableProp && instruments.length > 0,\n        };\n    }\n}\n\nexport default CreditCardPaymentMethodComponent;\n","import { creditCardType } from 'card-validator';\n\nexport default function configureCardValidator(): void {\n    const discoverInfo = creditCardType.getTypeInfo('discover');\n    const visaInfo = creditCardType.getTypeInfo('visa');\n\n    // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n    creditCardType.updateCard('visa', {\n        lengths: [13, ...(visaInfo.lengths || [])],\n    });\n\n    // Add support for 8-BIN Discover Cards.\n    creditCardType.updateCard('discover', {\n        patterns: [...(discoverInfo.patterns || []), [810, 817]],\n    });\n\n    // Add support for Mada-BIN Cards.\n    creditCardType.addCard({\n        niceType: 'Mada',\n        type: 'mada',\n        patterns: [\n            400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817, 422818,\n            422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954, 440533, 440647,\n            440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865, 458456, 462220, 468540,\n            468541, 468542, 468543, 483010, 483011, 483012, 484783, 486094, 486095, 486096, 489317,\n            489318, 489319, 493428, 504300, 506968, 508160, 513213, 520058, 521076, 524130, 524514,\n            529415, 529741, 530060, 530906, 531095, 531196, 532013, 535825, 535989, 536023, 537767,\n            539931, 543085, 543357, 549760, 554180, 557606, 558848, 585265, 588845, 588846, 588847,\n            588848, 588849, 588850, 588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120,\n            968201, 968202, 968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n        ],\n        gaps: [4, 8, 12],\n        lengths: [16, 18, 19],\n        code: {\n            name: 'CVV',\n            size: 3,\n        },\n    });\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNameField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div\n            className={classNames('form-ccFields', {\n                'form-ccFields--without-card-name': !cardNameId,\n                'form-ccFields--without-card-code': !cardCodeId,\n            })}\n        >\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {Boolean(cardNameId) && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {Boolean(cardCodeId) && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object()\n            .required()\n            .shape<HostedCreditCardValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedCreditCardValidationSchemaShape['hostedForm']['errors']>({\n                        cardCode: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardExpiry: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_expiry',\n                            }),\n\n                        cardName: string().test({\n                            message: language.translate('payment.credit_card_name_required_error'),\n                            test: (value) => value !== 'required',\n                        }),\n\n                        cardNumber: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            }),\n                    }),\n            }),\n    });\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = (\n    props,\n) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeBigCommercePaymentsCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    bigcommerce_payments_creditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching BigCommercePayments Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsCreditCardPaymentMethod,\n    [{ id: 'bigcommerce_payments_creditcards' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneCreditCardForm.scss';\n\ninterface BigCommercePaymentsFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst BigCommercePaymentsFastlaneCreditCardForm: FunctionComponent<\n    BigCommercePaymentsFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#big-commerce-payments-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-cc-form-container\"\n            data-test=\"big-commerce-payments-fastlane-cc-form-container\"\n            id=\"big-commerce-payments-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BigCommercePaymentsFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BigCommercePaymentsFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BigCommercePaymentsFastlaneInstrumentsForm: FunctionComponent<\n    BigCommercePaymentsFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-instrument\"\n            data-test=\"big-commerce-payments-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"big-commerce-payments-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"big-commerce-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"big-commerce-payments-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"big-commerce-payments-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"big-commerce-payments-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\nimport { useBigCommercePaymentsFastlaneInstruments } from '../hooks/useBigCommercePaymentsFastlaneInstruments';\n\nimport BigCommercePaymentsFastlaneCreditCardForm from './BigCommercePaymentsFastlaneCreditCardForm';\nimport BigCommercePaymentsFastlaneInstrumentsForm from './BigCommercePaymentsFastlaneInstrumentsForm';\n\ninterface BigCommercePaymentsFastlaneFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst BigCommercePaymentsFastlaneForm: FunctionComponent<BigCommercePaymentsFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBigCommercePaymentsFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument, handleSelectInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneForm;\n","import { CardInstrument, PaymentProviderCustomer } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBigCommercePaymentsFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n\n    const paymentProviderCustomer: PaymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsFastlaneForm from './components/BigCommercePaymentsFastlaneForm';\n\nimport './BigCommercePaymentsFastlanePaymentMethod.scss';\nimport { isErrorWithTranslationKey } from '@bigcommerce/checkout/utility';\n\nexport interface BigCommercePaymentsFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BigCommercePaymentsFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<BigCommercePaymentsFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n\n                bigcommerce_payments_fastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BigCommercePaymentsFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsFastlanePaymentMethod,\n    [{ id: 'bigcommerce_payments_fastlane' }],\n);\n","import BigCommercePaymentsFastlanePaymentMethod from './BigCommercePaymentsFastlanePaymentMethod';\n\nexport default BigCommercePaymentsFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsPayLaterPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_paylater\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPayLaterPaymentMethod,\n    [{ id: 'bigcommerce_payments_paylater' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const isPaymentDataRequired = props.checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_venmo\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsVenmoPaymentMethod,\n    [{ id: 'bigcommerce_payments_venmo' }],\n);\n","export interface CountryData {\n    name: string;\n    dialCode: string;\n    code: string;\n}\n\nconst COUNTRY_DATA = [\n    {\n        name: 'Afghanistan',\n        dialCode: '+93',\n        code: 'AF',\n    },\n    {\n        name: 'Aland Islands',\n        dialCode: '+358',\n        code: 'AX',\n    },\n    {\n        name: 'Albania',\n        dialCode: '+355',\n        code: 'AL',\n    },\n    {\n        name: 'Algeria',\n        dialCode: '+213',\n        code: 'DZ',\n    },\n    {\n        name: 'American Samoa',\n        dialCode: '+1684',\n        code: 'AS',\n    },\n    {\n        name: 'Andorra',\n        dialCode: '+376',\n        code: 'AD',\n    },\n    {\n        name: 'Angola',\n        dialCode: '+244',\n        code: 'AO',\n    },\n    {\n        name: 'Anguilla',\n        dialCode: '+1264',\n        code: 'AI',\n    },\n    {\n        name: 'Antarctica',\n        dialCode: '+672',\n        code: 'AQ',\n    },\n    {\n        name: 'Antigua and Barbuda',\n        dialCode: '+1268',\n        code: 'AG',\n    },\n    {\n        name: 'Argentina',\n        dialCode: '+54',\n        code: 'AR',\n    },\n    {\n        name: 'Armenia',\n        dialCode: '+374',\n        code: 'AM',\n    },\n    {\n        name: 'Aruba',\n        dialCode: '+297',\n        code: 'AW',\n    },\n    {\n        name: 'Australia',\n        dialCode: '+61',\n        code: 'AU',\n    },\n    {\n        name: 'Austria',\n        dialCode: '+43',\n        code: 'AT',\n    },\n    {\n        name: 'Azerbaijan',\n        dialCode: '+994',\n        code: 'AZ',\n    },\n    {\n        name: 'Bahamas',\n        dialCode: '+1242',\n        code: 'BS',\n    },\n    {\n        name: 'Bahrain',\n        dialCode: '+973',\n        code: 'BH',\n    },\n    {\n        name: 'Bangladesh',\n        dialCode: '+880',\n        code: 'BD',\n    },\n    {\n        name: 'Barbados',\n        dialCode: '+1246',\n        code: 'BB',\n    },\n    {\n        name: 'Belarus',\n        dialCode: '+375',\n        code: 'BY',\n    },\n    {\n        name: 'Belgium',\n        dialCode: '+32',\n        code: 'BE',\n    },\n    {\n        name: 'Belize',\n        dialCode: '+501',\n        code: 'BZ',\n    },\n    {\n        name: 'Benin',\n        dialCode: '+229',\n        code: 'BJ',\n    },\n    {\n        name: 'Bermuda',\n        dialCode: '+1441',\n        code: 'BM',\n    },\n    {\n        name: 'Bhutan',\n        dialCode: '+975',\n        code: 'BT',\n    },\n    {\n        name: 'Bolivia, Plurinational State of',\n        dialCode: '+591',\n        code: 'BO',\n    },\n    {\n        name: 'Bosnia and Herzegovina',\n        dialCode: '+387',\n        code: 'BA',\n    },\n    {\n        name: 'Botswana',\n        dialCode: '+267',\n        code: 'BW',\n    },\n    {\n        name: 'Brazil',\n        dialCode: '+55',\n        code: 'BR',\n    },\n    {\n        name: 'British Indian Ocean Territory',\n        dialCode: '+246',\n        code: 'IO',\n    },\n    {\n        name: 'Brunei Darussalam',\n        dialCode: '+673',\n        code: 'BN',\n    },\n    {\n        name: 'Bulgaria',\n        dialCode: '+359',\n        code: 'BG',\n    },\n    {\n        name: 'Burkina Faso',\n        dialCode: '+226',\n        code: 'BF',\n    },\n    {\n        name: 'Burundi',\n        dialCode: '+257',\n        code: 'BI',\n    },\n    {\n        name: 'Cambodia',\n        dialCode: '+855',\n        code: 'KH',\n    },\n    {\n        name: 'Cameroon',\n        dialCode: '+237',\n        code: 'CM',\n    },\n    {\n        name: 'Canada',\n        dialCode: '+1',\n        code: 'CA',\n    },\n    {\n        name: 'Cape Verde',\n        dialCode: '+238',\n        code: 'CV',\n    },\n    {\n        name: 'Cayman Islands',\n        dialCode: '+ 345',\n        code: 'KY',\n    },\n    {\n        name: 'Central African Republic',\n        dialCode: '+236',\n        code: 'CF',\n    },\n    {\n        name: 'Chad',\n        dialCode: '+235',\n        code: 'TD',\n    },\n    {\n        name: 'Chile',\n        dialCode: '+56',\n        code: 'CL',\n    },\n    {\n        name: 'China',\n        dialCode: '+86',\n        code: 'CN',\n    },\n    {\n        name: 'Christmas Island',\n        dialCode: '+61',\n        code: 'CX',\n    },\n    {\n        name: 'Cocos (Keeling) Islands',\n        dialCode: '+61',\n        code: 'CC',\n    },\n    {\n        name: 'Colombia',\n        dialCode: '+57',\n        code: 'CO',\n    },\n    {\n        name: 'Comoros',\n        dialCode: '+269',\n        code: 'KM',\n    },\n    {\n        name: 'Congo',\n        dialCode: '+242',\n        code: 'CG',\n    },\n    {\n        name: 'Congo, The Democratic Republic of the Congo',\n        dialCode: '+243',\n        code: 'CD',\n    },\n    {\n        name: 'Cook Islands',\n        dialCode: '+682',\n        code: 'CK',\n    },\n    {\n        name: 'Costa Rica',\n        dialCode: '+506',\n        code: 'CR',\n    },\n    {\n        name: \"Cote d'Ivoire\",\n        dialCode: '+225',\n        code: 'CI',\n    },\n    {\n        name: 'Croatia',\n        dialCode: '+385',\n        code: 'HR',\n    },\n    {\n        name: 'Cuba',\n        dialCode: '+53',\n        code: 'CU',\n    },\n    {\n        name: 'Cyprus',\n        dialCode: '+357',\n        code: 'CY',\n    },\n    {\n        name: 'Czech Republic',\n        dialCode: '+420',\n        code: 'CZ',\n    },\n    {\n        name: 'Denmark',\n        dialCode: '+45',\n        code: 'DK',\n    },\n    {\n        name: 'Djibouti',\n        dialCode: '+253',\n        code: 'DJ',\n    },\n    {\n        name: 'Dominica',\n        dialCode: '+1767',\n        code: 'DM',\n    },\n    {\n        name: 'Dominican Republic',\n        dialCode: '+1849',\n        code: 'DO',\n    },\n    {\n        name: 'Ecuador',\n        dialCode: '+593',\n        code: 'EC',\n    },\n    {\n        name: 'Egypt',\n        dialCode: '+20',\n        code: 'EG',\n    },\n    {\n        name: 'El Salvador',\n        dialCode: '+503',\n        code: 'SV',\n    },\n    {\n        name: 'Equatorial Guinea',\n        dialCode: '+240',\n        code: 'GQ',\n    },\n    {\n        name: 'Eritrea',\n        dialCode: '+291',\n        code: 'ER',\n    },\n    {\n        name: 'Estonia',\n        dialCode: '+372',\n        code: 'EE',\n    },\n    {\n        name: 'Ethiopia',\n        dialCode: '+251',\n        code: 'ET',\n    },\n    {\n        name: 'Falkland Islands (Malvinas)',\n        dialCode: '+500',\n        code: 'FK',\n    },\n    {\n        name: 'Faroe Islands',\n        dialCode: '+298',\n        code: 'FO',\n    },\n    {\n        name: 'Fiji',\n        dialCode: '+679',\n        code: 'FJ',\n    },\n    {\n        name: 'Finland',\n        dialCode: '+358',\n        code: 'FI',\n    },\n    {\n        name: 'France',\n        dialCode: '+33',\n        code: 'FR',\n    },\n    {\n        name: 'French Guiana',\n        dialCode: '+594',\n        code: 'GF',\n    },\n    {\n        name: 'French Polynesia',\n        dialCode: '+689',\n        code: 'PF',\n    },\n    {\n        name: 'Gabon',\n        dialCode: '+241',\n        code: 'GA',\n    },\n    {\n        name: 'Gambia',\n        dialCode: '+220',\n        code: 'GM',\n    },\n    {\n        name: 'Georgia',\n        dialCode: '+995',\n        code: 'GE',\n    },\n    {\n        name: 'Germany',\n        dialCode: '+49',\n        code: 'DE',\n    },\n    {\n        name: 'Ghana',\n        dialCode: '+233',\n        code: 'GH',\n    },\n    {\n        name: 'Gibraltar',\n        dialCode: '+350',\n        code: 'GI',\n    },\n    {\n        name: 'Greece',\n        dialCode: '+30',\n        code: 'GR',\n    },\n    {\n        name: 'Greenland',\n        dialCode: '+299',\n        code: 'GL',\n    },\n    {\n        name: 'Grenada',\n        dialCode: '+1473',\n        code: 'GD',\n    },\n    {\n        name: 'Guadeloupe',\n        dialCode: '+590',\n        code: 'GP',\n    },\n    {\n        name: 'Guam',\n        dialCode: '+1671',\n        code: 'GU',\n    },\n    {\n        name: 'Guatemala',\n        dialCode: '+502',\n        code: 'GT',\n    },\n    {\n        name: 'Guernsey',\n        dialCode: '+44',\n        code: 'GG',\n    },\n    {\n        name: 'Guinea',\n        dialCode: '+224',\n        code: 'GN',\n    },\n    {\n        name: 'Guinea-Bissau',\n        dialCode: '+245',\n        code: 'GW',\n    },\n    {\n        name: 'Guyana',\n        dialCode: '+595',\n        code: 'GY',\n    },\n    {\n        name: 'Haiti',\n        dialCode: '+509',\n        code: 'HT',\n    },\n    {\n        name: 'Holy See (Vatican City State)',\n        dialCode: '+379',\n        code: 'VA',\n    },\n    {\n        name: 'Honduras',\n        dialCode: '+504',\n        code: 'HN',\n    },\n    {\n        name: 'Hong Kong',\n        dialCode: '+852',\n        code: 'HK',\n    },\n    {\n        name: 'Hungary',\n        dialCode: '+36',\n        code: 'HU',\n    },\n    {\n        name: 'Iceland',\n        dialCode: '+354',\n        code: 'IS',\n    },\n    {\n        name: 'India',\n        dialCode: '+91',\n        code: 'IN',\n    },\n    {\n        name: 'Indonesia',\n        dialCode: '+62',\n        code: 'ID',\n    },\n    {\n        name: 'Iran, Islamic Republic of',\n        dialCode: '+98',\n        code: 'IR',\n    },\n    {\n        name: 'Iraq',\n        dialCode: '+964',\n        code: 'IQ',\n    },\n    {\n        name: 'Ireland',\n        dialCode: '+353',\n        code: 'IE',\n    },\n    {\n        name: 'Isle of Man',\n        dialCode: '+44',\n        code: 'IM',\n    },\n    {\n        name: 'Israel',\n        dialCode: '+972',\n        code: 'IL',\n    },\n    {\n        name: 'Italy',\n        dialCode: '+39',\n        code: 'IT',\n    },\n    {\n        name: 'Jamaica',\n        dialCode: '+1876',\n        code: 'JM',\n    },\n    {\n        name: 'Japan',\n        dialCode: '+81',\n        code: 'JP',\n    },\n    {\n        name: 'Jersey',\n        dialCode: '+44',\n        code: 'JE',\n    },\n    {\n        name: 'Jordan',\n        dialCode: '+962',\n        code: 'JO',\n    },\n    {\n        name: 'Kazakhstan',\n        dialCode: '+7',\n        code: 'KZ',\n    },\n    {\n        name: 'Kenya',\n        dialCode: '+254',\n        code: 'KE',\n    },\n    {\n        name: 'Kiribati',\n        dialCode: '+686',\n        code: 'KI',\n    },\n    {\n        name: \"Korea, Democratic People's Republic of Korea\",\n        dialCode: '+850',\n        code: 'KP',\n    },\n    {\n        name: 'Korea, Republic of South Korea',\n        dialCode: '+82',\n        code: 'KR',\n    },\n    {\n        name: 'Kuwait',\n        dialCode: '+965',\n        code: 'KW',\n    },\n    {\n        name: 'Kyrgyzstan',\n        dialCode: '+996',\n        code: 'KG',\n    },\n    {\n        name: 'Laos',\n        dialCode: '+856',\n        code: 'LA',\n    },\n    {\n        name: 'Latvia',\n        dialCode: '+371',\n        code: 'LV',\n    },\n    {\n        name: 'Lebanon',\n        dialCode: '+961',\n        code: 'LB',\n    },\n    {\n        name: 'Lesotho',\n        dialCode: '+266',\n        code: 'LS',\n    },\n    {\n        name: 'Liberia',\n        dialCode: '+231',\n        code: 'LR',\n    },\n    {\n        name: 'Libyan Arab Jamahiriya',\n        dialCode: '+218',\n        code: 'LY',\n    },\n    {\n        name: 'Liechtenstein',\n        dialCode: '+423',\n        code: 'LI',\n    },\n    {\n        name: 'Lithuania',\n        dialCode: '+370',\n        code: 'LT',\n    },\n    {\n        name: 'Luxembourg',\n        dialCode: '+352',\n        code: 'LU',\n    },\n    {\n        name: 'Macao',\n        dialCode: '+853',\n        code: 'MO',\n    },\n    {\n        name: 'Macedonia',\n        dialCode: '+389',\n        code: 'MK',\n    },\n    {\n        name: 'Madagascar',\n        dialCode: '+261',\n        code: 'MG',\n    },\n    {\n        name: 'Malawi',\n        dialCode: '+265',\n        code: 'MW',\n    },\n    {\n        name: 'Malaysia',\n        dialCode: '+60',\n        code: 'MY',\n    },\n    {\n        name: 'Maldives',\n        dialCode: '+960',\n        code: 'MV',\n    },\n    {\n        name: 'Mali',\n        dialCode: '+223',\n        code: 'ML',\n    },\n    {\n        name: 'Malta',\n        dialCode: '+356',\n        code: 'MT',\n    },\n    {\n        name: 'Marshall Islands',\n        dialCode: '+692',\n        code: 'MH',\n    },\n    {\n        name: 'Martinique',\n        dialCode: '+596',\n        code: 'MQ',\n    },\n    {\n        name: 'Mauritania',\n        dialCode: '+222',\n        code: 'MR',\n    },\n    {\n        name: 'Mauritius',\n        dialCode: '+230',\n        code: 'MU',\n    },\n    {\n        name: 'Mayotte',\n        dialCode: '+262',\n        code: 'YT',\n    },\n    {\n        name: 'Mexico',\n        dialCode: '+52',\n        code: 'MX',\n    },\n    {\n        name: 'Micronesia, Federated States of Micronesia',\n        dialCode: '+691',\n        code: 'FM',\n    },\n    {\n        name: 'Moldova',\n        dialCode: '+373',\n        code: 'MD',\n    },\n    {\n        name: 'Monaco',\n        dialCode: '+377',\n        code: 'MC',\n    },\n    {\n        name: 'Mongolia',\n        dialCode: '+976',\n        code: 'MN',\n    },\n    {\n        name: 'Montenegro',\n        dialCode: '+382',\n        code: 'ME',\n    },\n    {\n        name: 'Montserrat',\n        dialCode: '+1664',\n        code: 'MS',\n    },\n    {\n        name: 'Morocco',\n        dialCode: '+212',\n        code: 'MA',\n    },\n    {\n        name: 'Mozambique',\n        dialCode: '+258',\n        code: 'MZ',\n    },\n    {\n        name: 'Myanmar',\n        dialCode: '+95',\n        code: 'MM',\n    },\n    {\n        name: 'Namibia',\n        dialCode: '+264',\n        code: 'NA',\n    },\n    {\n        name: 'Nauru',\n        dialCode: '+674',\n        code: 'NR',\n    },\n    {\n        name: 'Nepal',\n        dialCode: '+977',\n        code: 'NP',\n    },\n    {\n        name: 'Netherlands',\n        dialCode: '+31',\n        code: 'NL',\n    },\n    {\n        name: 'Netherlands Antilles',\n        dialCode: '+599',\n        code: 'AN',\n    },\n    {\n        name: 'New Caledonia',\n        dialCode: '+687',\n        code: 'NC',\n    },\n    {\n        name: 'New Zealand',\n        dialCode: '+64',\n        code: 'NZ',\n    },\n    {\n        name: 'Nicaragua',\n        dialCode: '+505',\n        code: 'NI',\n    },\n    {\n        name: 'Niger',\n        dialCode: '+227',\n        code: 'NE',\n    },\n    {\n        name: 'Nigeria',\n        dialCode: '+234',\n        code: 'NG',\n    },\n    {\n        name: 'Niue',\n        dialCode: '+683',\n        code: 'NU',\n    },\n    {\n        name: 'Norfolk Island',\n        dialCode: '+672',\n        code: 'NF',\n    },\n    {\n        name: 'Northern Mariana Islands',\n        dialCode: '+1670',\n        code: 'MP',\n    },\n    {\n        name: 'Norway',\n        dialCode: '+47',\n        code: 'NO',\n    },\n    {\n        name: 'Oman',\n        dialCode: '+968',\n        code: 'OM',\n    },\n    {\n        name: 'Pakistan',\n        dialCode: '+92',\n        code: 'PK',\n    },\n    {\n        name: 'Palau',\n        dialCode: '+680',\n        code: 'PW',\n    },\n    {\n        name: 'Palestinian Territory, Occupied',\n        dialCode: '+970',\n        code: 'PS',\n    },\n    {\n        name: 'Panama',\n        dialCode: '+507',\n        code: 'PA',\n    },\n    {\n        name: 'Papua New Guinea',\n        dialCode: '+675',\n        code: 'PG',\n    },\n    {\n        name: 'Paraguay',\n        dialCode: '+595',\n        code: 'PY',\n    },\n    {\n        name: 'Peru',\n        dialCode: '+51',\n        code: 'PE',\n    },\n    {\n        name: 'Philippines',\n        dialCode: '+63',\n        code: 'PH',\n    },\n    {\n        name: 'Pitcairn',\n        dialCode: '+872',\n        code: 'PN',\n    },\n    {\n        name: 'Poland',\n        dialCode: '+48',\n        code: 'PL',\n    },\n    {\n        name: 'Portugal',\n        dialCode: '+351',\n        code: 'PT',\n    },\n    {\n        name: 'Puerto Rico',\n        dialCode: '+1939',\n        code: 'PR',\n    },\n    {\n        name: 'Qatar',\n        dialCode: '+974',\n        code: 'QA',\n    },\n    {\n        name: 'Romania',\n        dialCode: '+40',\n        code: 'RO',\n    },\n    {\n        name: 'Russia',\n        dialCode: '+7',\n        code: 'RU',\n    },\n    {\n        name: 'Rwanda',\n        dialCode: '+250',\n        code: 'RW',\n    },\n    {\n        name: 'Reunion',\n        dialCode: '+262',\n        code: 'RE',\n    },\n    {\n        name: 'Saint Barthelemy',\n        dialCode: '+590',\n        code: 'BL',\n    },\n    {\n        name: 'Saint Helena, Ascension and Tristan Da Cunha',\n        dialCode: '+290',\n        code: 'SH',\n    },\n    {\n        name: 'Saint Kitts and Nevis',\n        dialCode: '+1869',\n        code: 'KN',\n    },\n    {\n        name: 'Saint Lucia',\n        dialCode: '+1758',\n        code: 'LC',\n    },\n    {\n        name: 'Saint Martin',\n        dialCode: '+590',\n        code: 'MF',\n    },\n    {\n        name: 'Saint Pierre and Miquelon',\n        dialCode: '+508',\n        code: 'PM',\n    },\n    {\n        name: 'Saint Vincent and the Grenadines',\n        dialCode: '+1784',\n        code: 'VC',\n    },\n    {\n        name: 'Samoa',\n        dialCode: '+685',\n        code: 'WS',\n    },\n    {\n        name: 'San Marino',\n        dialCode: '+378',\n        code: 'SM',\n    },\n    {\n        name: 'Sao Tome and Principe',\n        dialCode: '+239',\n        code: 'ST',\n    },\n    {\n        name: 'Saudi Arabia',\n        dialCode: '+966',\n        code: 'SA',\n    },\n    {\n        name: 'Senegal',\n        dialCode: '+221',\n        code: 'SN',\n    },\n    {\n        name: 'Serbia',\n        dialCode: '+381',\n        code: 'RS',\n    },\n    {\n        name: 'Seychelles',\n        dialCode: '+248',\n        code: 'SC',\n    },\n    {\n        name: 'Sierra Leone',\n        dialCode: '+232',\n        code: 'SL',\n    },\n    {\n        name: 'Singapore',\n        dialCode: '+65',\n        code: 'SG',\n    },\n    {\n        name: 'Slovakia',\n        dialCode: '+421',\n        code: 'SK',\n    },\n    {\n        name: 'Slovenia',\n        dialCode: '+386',\n        code: 'SI',\n    },\n    {\n        name: 'Solomon Islands',\n        dialCode: '+677',\n        code: 'SB',\n    },\n    {\n        name: 'Somalia',\n        dialCode: '+252',\n        code: 'SO',\n    },\n    {\n        name: 'South Africa',\n        dialCode: '+27',\n        code: 'ZA',\n    },\n    {\n        name: 'South Sudan',\n        dialCode: '+211',\n        code: 'SS',\n    },\n    {\n        name: 'South Georgia and the South Sandwich Islands',\n        dialCode: '+500',\n        code: 'GS',\n    },\n    {\n        name: 'Spain',\n        dialCode: '+34',\n        code: 'ES',\n    },\n    {\n        name: 'Sri Lanka',\n        dialCode: '+94',\n        code: 'LK',\n    },\n    {\n        name: 'Sudan',\n        dialCode: '+249',\n        code: 'SD',\n    },\n    {\n        name: 'Suriname',\n        dialCode: '+597',\n        code: 'SR',\n    },\n    {\n        name: 'Svalbard and Jan Mayen',\n        dialCode: '+47',\n        code: 'SJ',\n    },\n    {\n        name: 'Swaziland',\n        dialCode: '+268',\n        code: 'SZ',\n    },\n    {\n        name: 'Sweden',\n        dialCode: '+46',\n        code: 'SE',\n    },\n    {\n        name: 'Switzerland',\n        dialCode: '+41',\n        code: 'CH',\n    },\n    {\n        name: 'Syrian Arab Republic',\n        dialCode: '+963',\n        code: 'SY',\n    },\n    {\n        name: 'Taiwan',\n        dialCode: '+886',\n        code: 'TW',\n    },\n    {\n        name: 'Tajikistan',\n        dialCode: '+992',\n        code: 'TJ',\n    },\n    {\n        name: 'Tanzania, United Republic of Tanzania',\n        dialCode: '+255',\n        code: 'TZ',\n    },\n    {\n        name: 'Thailand',\n        dialCode: '+66',\n        code: 'TH',\n    },\n    {\n        name: 'Timor-Leste',\n        dialCode: '+670',\n        code: 'TL',\n    },\n    {\n        name: 'Togo',\n        dialCode: '+228',\n        code: 'TG',\n    },\n    {\n        name: 'Tokelau',\n        dialCode: '+690',\n        code: 'TK',\n    },\n    {\n        name: 'Tonga',\n        dialCode: '+676',\n        code: 'TO',\n    },\n    {\n        name: 'Trinidad and Tobago',\n        dialCode: '+1868',\n        code: 'TT',\n    },\n    {\n        name: 'Tunisia',\n        dialCode: '+216',\n        code: 'TN',\n    },\n    {\n        name: 'Turkey',\n        dialCode: '+90',\n        code: 'TR',\n    },\n    {\n        name: 'Turkmenistan',\n        dialCode: '+993',\n        code: 'TM',\n    },\n    {\n        name: 'Turks and Caicos Islands',\n        dialCode: '+1649',\n        code: 'TC',\n    },\n    {\n        name: 'Tuvalu',\n        dialCode: '+688',\n        code: 'TV',\n    },\n    {\n        name: 'Uganda',\n        dialCode: '+256',\n        code: 'UG',\n    },\n    {\n        name: 'Ukraine',\n        dialCode: '+380',\n        code: 'UA',\n    },\n    {\n        name: 'United Arab Emirates',\n        dialCode: '+971',\n        code: 'AE',\n    },\n    {\n        name: 'United Kingdom',\n        dialCode: '+44',\n        code: 'GB',\n    },\n    {\n        name: 'United States',\n        dialCode: '+1',\n        code: 'US',\n    },\n    {\n        name: 'Uruguay',\n        dialCode: '+598',\n        code: 'UY',\n    },\n    {\n        name: 'Uzbekistan',\n        dialCode: '+998',\n        code: 'UZ',\n    },\n    {\n        name: 'Vanuatu',\n        dialCode: '+678',\n        code: 'VU',\n    },\n    {\n        name: 'Venezuela, Bolivarian Republic of Venezuela',\n        dialCode: '+58',\n        code: 'VE',\n    },\n    {\n        name: 'Vietnam',\n        dialCode: '+84',\n        code: 'VN',\n    },\n    {\n        name: 'Virgin Islands, British',\n        dialCode: '+1284',\n        code: 'VG',\n    },\n    {\n        name: 'Virgin Islands, U.S.',\n        dialCode: '+1340',\n        code: 'VI',\n    },\n    {\n        name: 'Wallis and Futuna',\n        dialCode: '+681',\n        code: 'WF',\n    },\n    {\n        name: 'Yemen',\n        dialCode: '+967',\n        code: 'YE',\n    },\n    {\n        name: 'Zambia',\n        dialCode: '+260',\n        code: 'ZM',\n    },\n    {\n        name: 'Zimbabwe',\n        dialCode: '+263',\n        code: 'ZW',\n    },\n];\n\nexport const getCountryData = (countryName: string) => {\n    return COUNTRY_DATA.filter((country: CountryData) => country.name === countryName);\n};\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, StringSchema } from 'yup';\n\nexport default memoize(function getBigCommercePaymentsRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n    CustomError,\n    SpecificError,\n    CountryData,\n    getCountryData,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getBigCommercePaymentsRatePayValidationSchema from '../validation-schemas/getBigCommercePaymentsRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst BigCommercePaymentsRatePayPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n    const getCountryInfo = (): CountryData => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        return getCountryData(billing.country)[0] || '';\n    };\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                bigcommerce_payments_ratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => fieldsValues.current,\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }) => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const validationSchema = useMemo(\n        () =>\n            getBigCommercePaymentsRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setFieldValue('ratepayPhoneCountryCode', getCountryInfo().dialCode);\n    }, []);\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={{ isSubmitted, setSubmitted }}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsRatePayPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms', id: 'ratepay' }],\n);\n","export enum BluesnapECPAccountType {\n    ConsumerChecking = 'CONSUMER_CHECKING',\n    ConsumerSavings = 'CONSUMER_SAVINGS',\n    CorporateChecking = 'CORPORATE_CHECKING',\n    CorporateSavings = 'CORPORATE_SAVINGS',\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectNumberFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectNumberField: FunctionComponent<BlueSnapDirectNumberFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete=\"cc-number\"\n                fieldType={DynamicFormFieldType.TELEPHONE}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectNumberField);\n","import { FormFieldOptions } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectSelectFieldProps {\n    labelContent: string;\n    name: string;\n    options: FormFieldOptions;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectSelectField: FunctionComponent<BlueSnapDirectSelectFieldProps> = ({\n    options: { helperLabel, items, rows },\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderSelect = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                fieldType={DynamicFormFieldType.DROPDOWM}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                options={items}\n                placeholder={helperLabel}\n                rows={rows}\n            />\n        ),\n        [helperLabel, items, rows, useFloatingLabel],\n    );\n\n    return <FormField {...rest} input={renderSelect} />;\n};\n\nexport default memo(BlueSnapDirectSelectField);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectTextFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    autoComplete?: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectTextField: FunctionComponent<BlueSnapDirectTextFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    autoComplete,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete={autoComplete}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel, autoComplete],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectTextField);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { BluesnapECPAccountType } from '../constants';\n\nimport BlueSnapDirectNumberField from './BlueSnapDirectNumberField';\nimport BlueSnapDirectSelectField from './BlueSnapDirectSelectField';\nimport BlueSnapDirectTextField from './BlueSnapDirectTextField';\n\nexport interface BlueSnapDirectEcpFieldsetProps {\n    language: LanguageService;\n    useFloatingLabel?: boolean;\n    shouldRenderCompanyName: boolean;\n}\n\nconst BlueSnapDirectEcpFieldset: FunctionComponent<BlueSnapDirectEcpFieldsetProps> = ({\n    language,\n    useFloatingLabel,\n    shouldRenderCompanyName,\n}) => {\n    const options = {\n        helperLabel: language.translate('payment.bluesnap_direct_account_type_select.label'),\n        items: [\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_checking',\n                ),\n                value: BluesnapECPAccountType.ConsumerChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_savings',\n                ),\n                value: BluesnapECPAccountType.ConsumerSavings,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_checking',\n                ),\n                value: BluesnapECPAccountType.CorporateChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_savings',\n                ),\n                value: BluesnapECPAccountType.CorporateSavings,\n            },\n        ],\n    };\n\n    return (\n        <>\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_account_number.label')}\n                maxLength={17}\n                name=\"accountNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_routing_number.label')}\n                maxLength={9}\n                name=\"routingNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.bluesnap_direct_account_type.label')}\n                name=\"accountType\"\n                options={options}\n                useFloatingLabel={useFloatingLabel}\n            />\n            {shouldRenderCompanyName && (\n                <BlueSnapDirectTextField\n                    labelContent={language.translate('address.company_name_label')}\n                    name=\"companyName\"\n                    useFloatingLabel={useFloatingLabel}\n                />\n            )}\n        </>\n    );\n};\n\nexport default memo(BlueSnapDirectEcpFieldset);\n","import { AchInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useEcpInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isAchInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useEcpInstruments;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getEcpValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n    shouldRenderCompanyName: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  accountNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_account_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_account_number.only_numbers'),\n                      )\n                      .min(4, language.translate('payment.bluesnap_direct_account_number.length'))\n                      .max(\n                          17,\n                          language.translate('payment.bluesnap_direct_account_number.length_max'),\n                      ),\n                  routingNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_routing_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_routing_number.only_numbers'),\n                      )\n                      .length(\n                          9,\n                          language.translate('payment.bluesnap_direct_routing_number.length'),\n                      ),\n                  ...(shouldRenderCompanyName\n                      ? {\n                            companyName: string()\n                                .required(language.translate('address.company_name_required_error'))\n                                .max(\n                                    50,\n                                    language.translate(\n                                        'payment.bluesnap_direct_company_name.length_max',\n                                    ),\n                                ),\n                        }\n                      : {}),\n                  accountType: string().required(\n                      language.translate('payment.bluesnap_direct_account_type.is_required'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { BluesnapECPAccountType } from './constants';\nimport BlueSnapDirectEcpFieldset from './fields/BlueSnapDirectEcpFieldset';\nimport useEcpInstruments from './hooks/useEcpInstruments';\nimport getEcpValidationSchema from './validation-schemas/getEcpValidationSchema';\n\nconst BlueSnapDirectEcpPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n    checkoutState: {\n        data: { isPaymentDataRequired, getCustomer, getBillingAddress },\n        statuses: { isLoadingInstruments },\n    },\n    paymentForm: { disableSubmit, setValidationSchema, setFieldValue, getFormValues },\n    language,\n    onUnhandledError,\n}) => {\n    const [disabled, setDisabled] = useState(true);\n    const onChange = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeEcp = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeEcp = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeEcp();\n\n        return () => {\n            void deinitializeEcp();\n        };\n    }, [deinitializeEcp, initializeEcp]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useEcpInstruments(method);\n\n    const isLoading = isLoadingInstruments();\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n    const accountType = getFormValues().accountType;\n    const shouldRenderCompanyName =\n        accountType === BluesnapECPAccountType.CorporateChecking ||\n        accountType === BluesnapECPAccountType.CorporateSavings;\n\n    useEffect(() => {\n        if (shouldRenderCompanyName) {\n            setFieldValue('companyName', getBillingAddress()?.company);\n        } else {\n            setFieldValue('companyName', undefined);\n        }\n    }, [shouldRenderCompanyName, setFieldValue, getBillingAddress]);\n\n    useEffect(() => {\n        setValidationSchema(\n            method,\n            getEcpValidationSchema(language, shouldShowForm, shouldRenderCompanyName),\n        );\n    }, [language, shouldShowForm, shouldRenderCompanyName, setValidationSchema, method]);\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_electronic_check_label')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <BlueSnapDirectEcpFieldset\n                        language={language}\n                        shouldRenderCompanyName={shouldRenderCompanyName}\n                    />\n                )}\n                <CheckboxFormField\n                    labelContent={language.translate('payment.bluesnap_direct_permission')}\n                    name=\"shopperPermission\"\n                    onChange={onChange}\n                />\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectEcpPaymentMethod,\n    [{ id: 'ecp', gateway: 'bluesnapdirect' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BlueSnapDirectAlternativePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectAlternativePaymentMethod,\n    [{ gateway: 'bluesnapdirect' }],\n);\n","export interface BlueSnapDirectInitializationData {\n    sepaCreditorCompanyName: string;\n    idealIssuers: IdealIssuer[];\n}\n\ninterface IdealIssuer {\n    issuerId: string;\n    issuerName: string;\n}\n\nexport const isBlueSnapDirectIdealIssuerList = (array: unknown): array is IdealIssuer[] => {\n    if (\n        !(\n            Array.isArray(array) &&\n            array.length &&\n            'issuerId' in array[0] &&\n            'issuerName' in array[0]\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const isBlueSnapDirectInitializationData = (\n    object: unknown,\n): object is BlueSnapDirectInitializationData => {\n    if (\n        !(\n            typeof object === 'object' &&\n            object !== null &&\n            (('sepaCreditorCompanyName' in object &&\n                typeof object.sepaCreditorCompanyName === 'string') ||\n                ('idealIssuers' in object && isBlueSnapDirectIdealIssuerList(object.idealIssuers)))\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n","import { BankInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isSepaInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useSepaInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<BankInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isSepaInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): BankInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useSepaInstruments;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getSepaValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  iban: string()\n                      .matches(\n                          /^[a-zA-Z0-9]+$/i,\n                          language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n                      )\n                      .required(language.translate('payment.sepa_account_number_required')),\n                  firstName: string().required(\n                      language.translate('address.first_name_required_error'),\n                  ),\n                  lastName: string().required(\n                      language.translate('address.last_name_required_error'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport useSepaInstruments from './hooks/useSepaInstruments';\nimport getSepaValidationSchema from './validation-schemas/getSepaValidationSchema';\n\nconst BlueSnapDirectSepaPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        method,\n        checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n        checkoutState: {\n            data: { isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        },\n        paymentForm: { disableSubmit, setValidationSchema },\n        language,\n        onUnhandledError,\n    } = props;\n\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const [disabled, setDisabled] = useState(true);\n    const toggleSubmitButton = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeSepa = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeSepa = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeSepa();\n\n        return () => {\n            void deinitializeSepa();\n        };\n    }, [deinitializeSepa, initializeSepa]);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useSepaInstruments(method);\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n\n    useEffect(() => {\n        setValidationSchema(method, getSepaValidationSchema(language, shouldShowForm));\n    }, [language, shouldShowForm, setValidationSchema, method]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (isInstrumentFeatureAvailable) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const isLoading = isLoadingInstruments();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_sepa_direct_debit')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <>\n                        <BlueSnapDirectTextField\n                            autoComplete=\"iban\"\n                            labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                            name=\"iban\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.first_name_label')}\n                            name=\"firstName\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.last_name_label')}\n                            name=\"lastName\"\n                            useFloatingLabel={true}\n                        />\n                    </>\n                )}\n\n                <CheckboxFormField\n                    labelContent={language.translate(\n                        'payment.bluesnap_direct_sepa_mandate_disclaimer',\n                        {\n                            creditorName: method.initializationData.sepaCreditorCompanyName,\n                        },\n                    )}\n                    name=\"shopperPermission\"\n                    onChange={toggleSubmitButton}\n                />\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectSepaPaymentMethod,\n    [{ id: 'sepa_direct_debit', gateway: 'bluesnapdirect' }],\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getIdealValidationSchema(language: LanguageService): ObjectSchema {\n    return object({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    });\n});\n","import React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectSelectField from './fields/BlueSnapDirectSelectField';\nimport getIdealValidationSchema from './validation-schemas/getIdealValidationSchema';\n\nconst BlueSnapDirectIdealPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment },\n    paymentForm: { setValidationSchema },\n    language,\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const { idealIssuers } = method.initializationData;\n\n    const idealIssuersSelectOptions = idealIssuers.map((issuer) => ({\n        value: issuer.issuerId,\n        label: issuer.issuerName,\n    }));\n\n    const initializeIdeal = useCallback(async () => {\n        setValidationSchema(method, getIdealValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method, setValidationSchema, language]);\n\n    const deinitializeIdeal = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeIdeal();\n\n        return () => {\n            void deinitializeIdeal();\n        };\n    }, [deinitializeIdeal, initializeIdeal]);\n\n    return (\n        <Fieldset\n            legend={<Legend hidden>{language.translate('payment.ideal.label')}</Legend>}\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.ideal.label')}\n                name=\"bic\"\n                options={{\n                    helperLabel: language.translate('payment.select_your_bank'),\n                    items: idealIssuersSelectOptions,\n                }}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectIdealPaymentMethod,\n    [{ id: 'ideal', gateway: 'bluesnapdirect' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport {\n    HostedPaymentComponent,\n    HostedPaymentMethodProps,\n} from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay, Modal } from '@bigcommerce/checkout/ui';\n\nexport type BlueSnapV2PaymentMethodProps = HostedPaymentMethodProps;\n\ninterface BlueSnapV2PaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelBlueSnapV2Payment?(): void;\n}\n\nconst BlueSnapV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [isLoadingIframe, setisLoadingIframe] = useState<boolean>(false);\n    const [paymentPageContent, setPaymentPageContent] = useState<HTMLElement>();\n    const ref = useRef<BlueSnapV2PaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n\n    const cancelBlueSnapV2ModalFlow = useCallback(() => {\n        setPaymentPageContent(undefined);\n\n        if (ref.current.cancelBlueSnapV2Payment) {\n            ref.current.cancelBlueSnapV2Payment();\n            ref.current.cancelBlueSnapV2Payment = undefined;\n        }\n    }, []);\n\n    const initializeBlueSnapV2Payment = useCallback(\n        (options: PaymentInitializeOptions) => {\n            return checkoutService.initializePayment({\n                ...options,\n                bluesnapv2: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setPaymentPageContent(content);\n                        setisLoadingIframe(true);\n                        ref.current.cancelBlueSnapV2Payment = cancel;\n                    },\n                    style: {\n                        border: '1px solid lightgray',\n                        height: '60vh',\n                        width: '100%',\n                    },\n                },\n            });\n        },\n        [checkoutService],\n    );\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (ref.current.paymentPageContentRef.current && paymentPageContent) {\n            paymentPageContent.addEventListener('load', () => {\n                setisLoadingIframe(false);\n            });\n            ref.current.paymentPageContentRef.current.appendChild(paymentPageContent);\n        }\n    }, [paymentPageContent]);\n\n    return (\n        <>\n            <HostedPaymentComponent\n                {...rest}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                initializePayment={initializeBlueSnapV2Payment}\n                method={method}\n                paymentForm={paymentForm}\n            />\n            <Modal\n                additionalModalClassName=\"modal--bluesnap\"\n                isOpen={!!paymentPageContent}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelBlueSnapV2ModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <LoadingOverlay isLoading={isLoadingIframe}>\n                    <div ref={ref.current.paymentPageContentRef} />\n                </LoadingOverlay>\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapV2PaymentMethod,\n    [{ gateway: 'bluesnapv2' }],\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getPayByBankValidationSchema(\n    language: LanguageService,\n): ObjectSchema {\n    return object({\n        iban: string()\n            .matches(\n                /^[a-zA-Z0-9]+$/i,\n                language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n            )\n            .required(language.translate('payment.pay_by_bank_iban_required')),\n    });\n});\n","import React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport getPayByBankValidationSchema from './validation-schemas/getPayByBankValidationSchema';\n\nconst BlueSnapDirectPayByBankPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    language,\n    paymentForm: { setValidationSchema },\n    checkoutService: { initializePayment, deinitializePayment },\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const initializePayByBank = useCallback(async () => {\n        setValidationSchema(method, getPayByBankValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, language, method, setValidationSchema]);\n\n    const deinitializePayByBank = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayByBank();\n\n        return () => {\n            void deinitializePayByBank();\n        };\n    }, [deinitializePayByBank, initializePayByBank]);\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>{language.translate('payment.bluesnap_direct_iban.label')}</Legend>\n            }\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectTextField\n                autoComplete=\"iban\"\n                labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                name=\"iban\"\n                useFloatingLabel={true}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectPayByBankPaymentMethod,\n    [{ id: 'pay_by_bank', gateway: 'bluesnapdirect' }],\n);\n","import { CheckoutService, PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BoltClientPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    ...rest\n}) => {\n    const initializeBoltPayment: CheckoutService['initializePayment'] = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    useBigCommerceCheckout: true,\n                },\n            }),\n        [checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBoltPayment}\n            method={method}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltClientPaymentMethod;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nexport interface BoltCustomFormProps {\n    containerId: string;\n    showCreateAccountCheckbox: boolean;\n}\n\nconst agreementTranslationOptions = {\n    privacyPolicyUrl: 'https://www.bolt.com/privacy/',\n    termsUrl: 'https://www.bolt.com/end-user-terms/',\n};\n\nconst benefitsList = [\n    { id: 'payment.bolt_benefit_1' },\n    { id: 'payment.bolt_benefit_2' },\n    { id: 'payment.bolt_benefit_3' },\n];\n\nconst BoltCreateAccountCheckbox: FunctionComponent = () => {\n    const labelContent = (\n        <>\n            <TranslatedHtml\n                data={agreementTranslationOptions}\n                id=\"payment.bolt_checkbox_agreement\"\n            />\n            <ul>\n                {benefitsList.map(({ id }, key) => (\n                    <li key={key}>\n                        <TranslatedString id={id} />\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-checkbox form-field--createAccount\"\n            labelContent={labelContent}\n            name=\"shouldCreateAccount\"\n        />\n    );\n};\n\nconst BoltCustomForm: FunctionComponent<BoltCustomFormProps> = ({\n    containerId,\n    showCreateAccountCheckbox,\n}) => {\n    return (\n        <div className=\"form-ccFields\">\n            <div className=\"form-field form-field--bolt-embed\" id={containerId} />\n            {showCreateAccountCheckbox ? <BoltCreateAccountCheckbox /> : null}\n        </div>\n    );\n};\n\nexport default BoltCustomForm;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltCustomForm from './BoltCustomForm';\n\nconst BoltEmbeddedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [showCreateAccountCheckbox, setShowCreateAccountCheckbox] = useState(false);\n\n    const boltEmbeddedContainerId = 'bolt-embedded';\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const initializeBoltPayment = useCallback(\n        (options: any) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    containerId: boltEmbeddedContainerId,\n                    useBigCommerceCheckout: true,\n                    onPaymentSelect: (hasBoltAccount: boolean) => {\n                        setShowCreateAccountCheckbox(!hasBoltAccount);\n\n                        if (hasBoltAccount) {\n                            setFieldValue('shouldCreateAccount', false);\n                        }\n                    },\n                },\n            }),\n        [checkoutService, boltEmbeddedContainerId, setFieldValue],\n    );\n\n    const renderCustomPaymentForm = useCallback(\n        () => (\n            <BoltCustomForm\n                containerId={boltEmbeddedContainerId}\n                showCreateAccountCheckbox={showCreateAccountCheckbox}\n            />\n        ),\n        [boltEmbeddedContainerId, showCreateAccountCheckbox],\n    );\n\n    const { getInstruments, isPaymentDataRequired } = checkoutState.data;\n    const { isInitializingPayment, isLoadingInstruments } = checkoutState.statuses;\n    const instruments = getInstruments(method) || [];\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId=\"boltEmbeddedOneClick\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeBoltPayment}\n            instruments={instruments}\n            isInitializing={isInitializingPayment()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={!isGuestCustomer}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltEmbeddedPaymentMethod;\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltClientPaymentMethod from './BoltClientPaymentMethod';\nimport BoltEmbeddedPaymentMethod from './BoltEmbeddedPaymentMethod';\n\nconst BoltPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const useBoltEmbedded = method.initializationData?.embeddedOneClickEnabled;\n\n    if (useBoltEmbedded) {\n        return (\n            <BoltEmbeddedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                method={method}\n                paymentForm={paymentForm}\n                {...rest}\n            />\n        );\n    }\n\n    return (\n        <BoltClientPaymentMethod\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            method={method}\n            paymentForm={paymentForm}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BoltPaymentMethod,\n    [{ id: 'bolt' }],\n);\n","import { FormField } from '@bigcommerce/checkout-sdk';\n\nimport { DynamicFormFieldType } from '@bigcommerce/checkout/ui';\n\nexport enum BraintreeAchFieldType {\n    BusinessName = 'businessName',\n    AccountType = 'accountType',\n    AccountNumber = 'accountNumber',\n    RoutingNumber = 'routingNumber',\n    OwnershipType = 'ownershipType',\n    FirstName = 'firstName',\n    LastName = 'lastName',\n}\n\nexport enum OwnershipTypes {\n    Personal = 'Personal',\n    Business = 'Business',\n}\n\nexport enum AccountTypes {\n    Savings = 'Savings',\n    Checking = 'Checking',\n}\n\nconst accountTypeOptions = [\n    {\n        value: AccountTypes.Savings,\n        label: AccountTypes.Savings,\n    },\n    {\n        value: AccountTypes.Checking,\n        label: AccountTypes.Checking,\n    },\n];\n\nexport const ownershipTypeOptions = [\n    {\n        value: OwnershipTypes.Personal,\n        label: OwnershipTypes.Personal,\n    },\n    {\n        value: OwnershipTypes.Business,\n        label: OwnershipTypes.Business,\n    },\n];\n\nexport const defaultBraintreeAchFormFields: FormField[] = [\n    {\n        name: BraintreeAchFieldType.AccountType,\n        custom: false,\n        id: BraintreeAchFieldType.AccountType,\n        label: 'Account Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: accountTypeOptions,\n        },\n    },\n    {\n        name: BraintreeAchFieldType.AccountNumber,\n        custom: false,\n        id: BraintreeAchFieldType.AccountNumber,\n        label: 'Account Number',\n        required: true,\n        max: 9,\n        min: 8,\n    },\n    {\n        name: BraintreeAchFieldType.RoutingNumber,\n        custom: false,\n        id: BraintreeAchFieldType.RoutingNumber,\n        label: 'Routing Number',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.OwnershipType,\n        custom: false,\n        id: BraintreeAchFieldType.OwnershipType,\n        label: 'Ownership Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: ownershipTypeOptions,\n        },\n    },\n];\n\nexport const personalBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.FirstName,\n        custom: false,\n        id: BraintreeAchFieldType.FirstName,\n        label: 'First Name',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.LastName,\n        custom: false,\n        id: BraintreeAchFieldType.LastName,\n        label: 'Last Name',\n        required: true,\n    },\n];\n\nexport const businessBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.BusinessName,\n        custom: false,\n        id: BraintreeAchFieldType.BusinessName,\n        label: 'Business Name',\n        required: true,\n    },\n];\n","import { AchInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBraintreeAchInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => instruments.filter(isAchInstrument), [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset &&\n        !!currentInstrument &&\n        !currentInstrument.trustedShippingAddress;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBraintreeAchInstruments;\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { useCallback } from 'react';\nimport { object, string, StringSchema } from 'yup';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormValues,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst useBraintreeAchValidation = (method: PaymentMethod) => {\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const getValidationSchema = () => {\n        const ownershipType = paymentForm.getFieldValue('ownershipType');\n        const formFields =\n            ownershipType === OwnershipTypes.Business\n                ? businessBraintreeAchFormFields\n                : personalBraintreeAchFormFields;\n\n        const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n            [BraintreeAchFieldType.FirstName]: 'address.first_name',\n            [BraintreeAchFieldType.LastName]: 'address.last_name',\n            [BraintreeAchFieldType.AccountNumber]: 'payment.errors.account_number',\n            [BraintreeAchFieldType.RoutingNumber]: 'payment.errors.routing_number',\n            [BraintreeAchFieldType.BusinessName]: 'payment.errors.business_name',\n        };\n\n        return object(\n            formFields.reduce(\n                (schema, { id, required }) => {\n                    if (required) {\n                        if (requiredFieldErrorTranslationIds[id]) {\n                            schema[id] = string().required(\n                                language.translate(\n                                    `${requiredFieldErrorTranslationIds[id]}_required_error`,\n                                ),\n                            );\n\n                            if (id === BraintreeAchFieldType.AccountNumber) {\n                                schema[id] = schema[id].matches(\n                                    /^\\d+$/,\n                                    language.translate('payment.errors.only_numbers_error', {\n                                        label: language.translate('payment.account_number_label'),\n                                    }),\n                                );\n                            }\n\n                            if (id === BraintreeAchFieldType.RoutingNumber) {\n                                schema[id] = schema[id]\n                                    .matches(\n                                        /^\\d+$/,\n                                        language.translate('payment.errors.only_numbers_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                        }),\n                                    )\n                                    .min(\n                                        8,\n                                        language.translate('customer.min_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            min: 8,\n                                        }),\n                                    )\n                                    .max(\n                                        9,\n                                        language.translate('customer.max_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            max: 9,\n                                        }),\n                                    );\n                            }\n                        }\n                    }\n\n                    return schema;\n                },\n                // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n                {} as { [key: string]: StringSchema },\n            ),\n        );\n    };\n\n    const validateBraintreeAchForm = useCallback(\n        async (braintreeAchFormValues: PaymentFormValues): Promise<boolean> => {\n            const {\n                accountNumber,\n                businessName,\n                routingNumber,\n                ownershipType,\n                firstName,\n                lastName,\n            } = braintreeAchFormValues;\n\n            const validationSchema = getValidationSchema();\n\n            paymentForm.setValidationSchema(method, validationSchema);\n\n            const [\n                isValidAccountNumber,\n                isValidRoutingNumber,\n                isValidFirstName,\n                isValidLastName,\n                isValidBusinessName,\n            ] = await Promise.all([\n                await validationSchema.fields.accountNumber?.isValid(accountNumber),\n                await validationSchema.fields.routingNumber?.isValid(routingNumber),\n                await validationSchema.fields.firstName?.isValid(firstName),\n                await validationSchema.fields.lastName?.isValid(lastName),\n                await validationSchema.fields.businessName?.isValid(businessName),\n            ]);\n\n            const isValidDepositoryName =\n                ownershipType === OwnershipTypes.Business\n                    ? isValidBusinessName\n                    : isValidFirstName && isValidLastName;\n\n            return isValidRoutingNumber && isValidAccountNumber && isValidDepositoryName;\n        },\n        [getValidationSchema],\n    );\n\n    const resetFormValidation = useCallback(() => {\n        paymentForm.setValidationSchema(method, null);\n    }, [paymentForm, method]);\n\n    return {\n        validateBraintreeAchForm,\n        resetFormValidation,\n    };\n};\n\nexport default useBraintreeAchValidation;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField } from '@bigcommerce/checkout/ui';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst isBraintreeAchFormFieldName = (fieldName: string): fieldName is BraintreeAchFieldType => {\n    return Object.values(BraintreeAchFieldType).includes(fieldName as BraintreeAchFieldType);\n};\n\nconst getTranslatedLabelByFieldName = (fieldName: string, language: LanguageService) => {\n    const braintreeAchFormLabelsMap = {\n        firstName: language.translate('address.first_name_label'),\n        lastName: language.translate('address.last_name_label'),\n        accountNumber: language.translate('payment.account_number_label'),\n        routingNumber: language.translate('payment.account_routing_label'),\n        businessName: language.translate('payment.business_name_label'),\n        ownershipType: language.translate('payment.ownership_type_label'),\n        accountType: language.translate('payment.account_type_label'),\n    };\n\n    return isBraintreeAchFormFieldName(fieldName)\n        ? braintreeAchFormLabelsMap[fieldName]\n        : fieldName;\n};\n\nconst BraintreeAchFormFields: FunctionComponent = () => {\n    const { language } = useLocale();\n    const { paymentForm } = usePaymentFormContext();\n    const { getFieldValue, setFieldValue } = paymentForm;\n\n    const ownershipTypeValue = getFieldValue(BraintreeAchFieldType.OwnershipType);\n    const fieldValues =\n        ownershipTypeValue === OwnershipTypes.Business\n            ? businessBraintreeAchFormFields\n            : personalBraintreeAchFormFields;\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n        },\n        [setFieldValue],\n    );\n\n    return (\n        <>\n            {fieldValues.map((field) => (\n                <DynamicFormField\n                    extraClass={`dynamic-form-field--${field.id}`}\n                    field={field}\n                    key={field.id}\n                    label={getTranslatedLabelByFieldName(field.name, language)}\n                    onChange={handleChange(field.id)}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default BraintreeAchFormFields;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nimport { OwnershipTypes } from '../constants';\n\nexport interface BraintreeAchMandateTextProps {\n    isInstrumentFeatureAvailable?: boolean;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchMandateText: FunctionComponent<BraintreeAchMandateTextProps> = ({\n    isInstrumentFeatureAvailable,\n    updateMandateText,\n}) => {\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const {\n        businessName,\n        accountType,\n        accountNumber,\n        routingNumber,\n        ownershipType,\n        firstName,\n        lastName,\n    } = paymentForm.getFormValues();\n\n    const fullName = `${String(firstName)} ${String(lastName)}`;\n\n    const depositoryName = ownershipType === OwnershipTypes.Business ? businessName : fullName;\n    const outstandingBalance = checkoutState.data.getCheckout()?.outstandingBalance;\n    const storeName = checkoutState.data.getConfig()?.storeProfile.storeName;\n    const symbol = checkoutState.data.getCart()?.currency.symbol;\n\n    const mandateTextTranslationKey = isInstrumentFeatureAvailable\n        ? 'payment.braintreeach_vaulting_mandate_text'\n        : 'payment.braintreeach_mandate_text';\n\n    const currentDate = new Date(Date.now()).toJSON().slice(0, 10); // yyyy-mm-dd\n    const formattedDate = currentDate.split('-').reverse().join('.'); // dd.mm.yyyy\n\n    const mandateTextTranslationProps = {\n        accountType: String(accountType).toLowerCase(),\n        accountNumber: String(accountNumber),\n        currentDate: formattedDate,\n        depositoryName: String(depositoryName),\n        routingNumber: String(routingNumber),\n        outstandingBalance: `${symbol || ''}${outstandingBalance || ''}`,\n        storeName: String(storeName),\n    };\n\n    const mandateText = language.translate(mandateTextTranslationKey, mandateTextTranslationProps);\n\n    useEffect(() => {\n        updateMandateText(mandateText);\n    }, [mandateText, updateMandateText]);\n\n    const handleChange = (value: boolean) => {\n        paymentForm.setFieldValue('orderConsent', value);\n    };\n\n    return (\n        <div className=\"mandate-text\" data-test=\"mandate-text\">\n            <CheckboxFormField\n                labelContent={mandateText}\n                name=\"orderConsent\"\n                onChange={handleChange}\n            />\n        </div>\n    );\n};\n\nexport default BraintreeAchMandateText;\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { AccountTypes, OwnershipTypes } from '../constants';\nimport useBraintreeAchInstruments from '../hooks/useBraintreeAchInstruments';\nimport useBraintreeAchValidation from '../hooks/useBraintreeAchValidation';\n\nimport BraintreeAchFormFields from './BraintreeAchFormFields';\nimport BraintreeAchMandateText from './BraintreeAchMandateText';\n\nexport interface BraintreeAchPaymentFormProps {\n    method: PaymentMethod;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchPaymentForm: FunctionComponent<BraintreeAchPaymentFormProps> = ({\n    method,\n    updateMandateText,\n}) => {\n    const [isValidForm, setIsValidForm] = useState(false);\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { disableSubmit, getFieldValue, getFormValues, setFieldValue } = paymentForm;\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    } = useBraintreeAchInstruments(method);\n    const { validateBraintreeAchForm, resetFormValidation } = useBraintreeAchValidation(method);\n\n    const resetFormValues = () => {\n        const { firstName, lastName } = checkoutState.data.getBillingAddress() || {};\n\n        const defaultFormValues = {\n            ownershipType: OwnershipTypes.Personal,\n            accountType: AccountTypes.Savings,\n            accountNumber: '',\n            routingNumber: '',\n            businessName: '',\n            firstName: firstName || '',\n            lastName: lastName || '',\n            shouldSaveInstrument: false,\n            shouldSetAsDefaultInstrument: false,\n            instrumentId: currentInstrument?.bigpayToken || '',\n            orderConsent: false,\n        };\n\n        for (const [key, value] of Object.entries(defaultFormValues)) {\n            setFieldValue(key, value);\n        }\n    };\n\n    useEffect(() => {\n        resetFormValues();\n    }, [currentInstrument?.bigpayToken]);\n\n    const shouldShowForm =\n        !shouldShowInstrumentFieldset || shouldCreateNewInstrument || shouldConfirmInstrument;\n    const shouldShowMandateTextCheckbox = shouldShowForm && isValidForm && !shouldConfirmInstrument;\n\n    useEffect(() => {\n        if (shouldShowForm) {\n            const validate = async () => {\n                const braintreeAchFormValues = getFormValues();\n                const isValid = await validateBraintreeAchForm(braintreeAchFormValues);\n\n                if (!isValid && getFieldValue('orderConsent')) {\n                    setFieldValue('orderConsent', false);\n                }\n\n                setIsValidForm(isValid);\n            };\n\n            void validate();\n        } else {\n            resetFormValidation();\n        }\n    }, [\n        getFormValues,\n        setFieldValue,\n        setIsValidForm,\n        shouldShowForm,\n        validateBraintreeAchForm,\n        resetFormValidation,\n    ]);\n\n    useEffect(() => {\n        const mandateTextConfirmationCheckboxValue = getFieldValue('orderConsent');\n\n        const inValidForInstrumentConfirmation = shouldConfirmInstrument && !isValidForm;\n        const inValidForDefaultTransactions =\n            shouldShowMandateTextCheckbox && !mandateTextConfirmationCheckboxValue;\n\n        const shouldDisableSubmit = shouldShowForm\n            ? inValidForInstrumentConfirmation || inValidForDefaultTransactions\n            : false;\n\n        disableSubmit(method, shouldDisableSubmit);\n    }, [disableSubmit, getFieldValue, isValidForm, method, shouldShowMandateTextCheckbox]);\n\n    return (\n        <div className=\"checkout-ach-form\" data-test=\"checkout-ach-form\">\n            {shouldShowInstrumentFieldset && (\n                <div className=\"checkout-ach-form__instrument\">\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                </div>\n            )}\n\n            {shouldConfirmInstrument && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            {shouldShowForm && <BraintreeAchFormFields />}\n\n            {isInstrumentFeatureAvailable && (\n                <StoreInstrumentFieldset\n                    instrumentId={currentInstrument?.bigpayToken}\n                    instruments={accountInstruments}\n                    isAccountInstrument\n                />\n            )}\n\n            {shouldShowMandateTextCheckbox && (\n                <BraintreeAchMandateText\n                    isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                    updateMandateText={updateMandateText}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeAchPaymentForm;\n","import React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeAchPaymentForm from './components/BraintreeAchPaymentForm';\n\nconst BraintreeAchPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const currentMandateTextRef = useRef('');\n    const updateMandateText = (currentMandateText: string) => {\n        currentMandateTextRef.current = currentMandateText;\n    };\n\n    useEffect(() => {\n        const initializePaymentOrThrow = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    braintreeach: {\n                        getMandateText: () => currentMandateTextRef.current,\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePaymentOrThrow();\n\n        return () => {\n            const deinitializePaymentOrThrow = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePaymentOrThrow();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = checkoutState.data.getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeAchPaymentForm\n                                method={method}\n                                updateMandateText={updateMandateText}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeAchPaymentMethod,\n    [{ id: 'braintreeach' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneCreditCardForm.scss';\n\ninterface BraintreeFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n}\n\nconst BraintreeFastlaneCreditCardForm: FunctionComponent<BraintreeFastlaneCreditCardFormProps> = ({\n    renderPayPalCardComponent,\n}) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#braintree-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"braintree-fastlane-cc-form-container\"\n            data-test=\"braintree-fastlane-cc-form-container\"\n            id=\"braintree-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BraintreeFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BraintreeFastlaneInstrumentsFormProps {\n    onChange: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n    selectedInstrument: CardInstrument;\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BraintreeFastlaneInstrumentsForm: FunctionComponent<\n    BraintreeFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"braintree-fastlane-instrument\"\n            data-test=\"braintree-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"braintree-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"braintree-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"braintree-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"braintree-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"braintree-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\nimport { useBraintreeFastlaneInstruments } from '../hooks/useBraintreeFastlaneInstruments';\n\nimport BraintreFastlaneCreditCardForm from './BraintreeFastlaneCreditCardForm';\nimport BraintreeFastlaneInstrumentsForm from './BraintreeFastlaneInstrumentsForm';\n\ninterface BraintreeFastlaneFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n}\n\nconst BraintreeFastlaneForm: FunctionComponent<BraintreeFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBraintreeFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\" id=\"braintree-fastlane\">\n            {shouldShowInstrumentsForm && (\n                <BraintreeFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BraintreFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBraintreeFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeFastlaneForm from './components/BraintreeFastlaneForm';\n\nimport './BraintreeFastlanePaymentMethod.scss';\n\nexport interface BraintreeFastlaneComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BraintreeFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const paypalFastlaneComponentRef = useRef<BraintreeFastlaneComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                braintreefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalFastlaneComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalFastlaneComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: Error) => {\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalFastlaneComponentRef?.current?.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalFastlaneComponentRef.current?.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeFastlanePaymentMethod,\n    [{ id: 'braintreeacceleratedcheckout' }],\n);\n","import BraintreeFastlanePaymentMethod from './BraintreeFastlanePaymentMethod';\n\nexport default BraintreeFastlanePaymentMethod;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreeLocalPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const methodId = method.id;\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                braintreelocalmethods: {\n                    container: '#checkout-payment-continue',\n                    buttonText: language.translate('payment.continue_with_brand', {\n                        brandName: methodId,\n                    }),\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeLocalPaymentMethod,\n    [{ gateway: 'braintreelocalmethods' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const initializeBraintreePaypalPaymentMethod = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const { onUnhandledError, language, method, paymentForm } = rest;\n\n            return checkoutService.initializePayment({\n                ...defaultOptions,\n                braintree: {\n                    containerId: '#checkout-payment-continue',\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError?.(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError?.(error);\n                        }\n                    },\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                },\n            });\n        },\n        [rest, checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBraintreePaypalPaymentMethod}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreePaypalPaymentMethod,\n    [{ id: 'braintreepaypal' }],\n);\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { number } from 'card-validator';\n\nimport { WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","import {\n    CheckoutSelectors,\n    CustomerRequestOptions,\n    LanguageService,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    getPaymentMethodName,\n    PaymentFormService,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\n\nexport interface WalletButtonPaymentMethodProps {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WalletButtonPaymentMethodDerivedProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentDataRequired: boolean;\n    isPaymentSelected: boolean;\n}\n\nclass WalletButtonPaymentMethodComponent extends Component<WalletButtonPaymentMethodProps> {\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            paymentForm: { disableSubmit },\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<WalletButtonPaymentMethodProps & WalletButtonPaymentMethodDerivedProps>,\n    ): void {\n        const { method } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n        const { method: prevMethod, isPaymentDataRequired: prevIsPaymentDataRequired } = prevProps;\n\n        if (\n            method.initializationData !== prevMethod.initializationData ||\n            isPaymentDataRequired !== prevIsPaymentDataRequired\n        ) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const { isInitializing = false } = this.props;\n        const { isPaymentSelected } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    {isPaymentSelected ? this.renderPaymentView() : this.renderSignInView()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const { buttonId, signInButtonClassName, signInButtonLabel, method, language } = this.props;\n\n        return (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n                {signInButtonLabel || (\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_in_action\"\n                    />\n                )}\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const { buttonId, editButtonClassName, editButtonLabel, shouldShowEditButton, method } =\n            this.props;\n        const { accountMask, cardName, cardType, expiryMonth, expiryYear } =\n            this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <>\n                {!!cardName && (\n                    <p data-test=\"payment-method-wallet-card-name\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_name_label\" />:\n                        </strong>{' '}\n                        {cardName}\n                    </p>\n                )}\n\n                {!!accountMask && !!cardType && (\n                    <p data-test=\"payment-method-wallet-card-type\">\n                        <strong>{`${cardType}:`}</strong> {accountMask}\n                    </p>\n                )}\n\n                {!!expiryMonth && !!expiryYear && (\n                    <p data-test=\"payment-method-wallet-card-expiry\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                        </strong>{' '}\n                        {`${expiryMonth}/${expiryYear}`}\n                    </p>\n                )}\n\n                {!!shouldShowEditButton && (\n                    <p>\n                        {\n                            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                            <a\n                                className={editButtonClassName}\n                                href=\"#\"\n                                id={buttonId}\n                                onClick={preventDefault()}\n                            >\n                                {editButtonLabel || (\n                                    <TranslatedString id=\"remote.select_different_card_action\" />\n                                )}\n                            </a>\n                        }\n                    </p>\n                )}\n\n                <SignOutLink method={method} onSignOut={this.handleSignOut} />\n            </>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const {\n            paymentForm: { disableSubmit },\n            method,\n        } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        if (normalizeWalletPaymentData(method.initializationData) || !isPaymentDataRequired) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const { signOutCustomer, method, onSignOut = noop, onSignOutError = noop } = this.props;\n\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n\n    private getWalletButtonPaymentMethodDerivedProps(): WalletButtonPaymentMethodDerivedProps {\n        const { checkoutState, method } = this.props;\n        const {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        } = checkoutState;\n        const billingAddress = getBillingAddress();\n        const checkout = getCheckout();\n\n        if (!billingAddress || !checkout) {\n            throw new Error('Unable to get checkout');\n        }\n\n        const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n        return {\n            ...walletPaymentData,\n            // FIXME: I'm not sure how this would work for non-English names.\n            cardName:\n                walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        };\n    }\n}\n\nexport default WalletButtonPaymentMethodComponent;\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    CheckoutButtonResolveId,\n    PaymentMethodId,\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst VisaCheckoutPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeVisaCheckoutPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const mergedOptions = {\n                ...defaultOptions,\n                braintreevisacheckout: {\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"visaCheckoutWalletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            editButtonClassName=\"v-button\"\n            initializePayment={initializeVisaCheckoutPayment}\n            method={method}\n            shouldShowEditButton\n            signInButtonClassName=\"v-button\"\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    VisaCheckoutPaymentMethod,\n    [{ id: PaymentMethodId.BraintreeVisaCheckout }],\n);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface TextFieldProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nexport interface TextFieldFormProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nconst TextField: FunctionComponent<TextFieldProps> = (props) => {\n    const { additionalClassName, autoComplete, labelId, name } = props;\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <TextInput {...field} autoComplete={autoComplete} id={field.name} />\n        ),\n        [autoComplete],\n    );\n\n    const labelContent = useMemo(() => <TranslatedString id={labelId} />, [labelId]);\n\n    return (\n        <FormField\n            additionalClassName={additionalClassName}\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nconst TextFieldForm: FunctionComponent<TextFieldFormProps> = ({\n    additionalClassName,\n    autoComplete,\n    labelId,\n    name,\n}) => (\n    <Fieldset>\n        <div className=\"form-ccFields\">\n            <TextField\n                additionalClassName={additionalClassName}\n                autoComplete={autoComplete}\n                labelId={labelId}\n                name={name}\n            />\n        </div>\n    </Fieldset>\n);\n\nexport default memo(TextFieldForm);\n","import { BillingAddress, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, {\n    FunctionComponent,\n    SyntheticEvent,\n    useCallback,\n    useContext,\n    useEffect,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nimport TextFieldForm from './checkoutcomFieldsets/TextFieldForm';\n\ninterface CheckoutcomAPMFormProps {\n    method: PaymentMethod;\n    debtor: BillingAddress;\n}\n\ninterface Issuer {\n    bic: string;\n    name: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: string;\n}\n\ninterface DropdownButtonProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface OptionButtonProps {\n    className?: string;\n    issuer: Issuer;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\ninterface SepaCreditor {\n    sepaCreditorAddress: string;\n    sepaCreditorCity: string;\n    sepaCreditorCompanyName: string;\n    sepaCreditorCountry: string;\n    sepaCreditorIdentifier: string;\n    sepaCreditorPostalCode: string;\n}\n\nconst Sepa: FunctionComponent<CheckoutcomAPMFormProps> = ({ method, debtor }) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const creditor: SepaCreditor = method.initializationData.sepaCreditor;\n\n    useEffect(() => {\n        paymentContext?.paymentForm.disableSubmit(method, true);\n\n        return () => paymentContext?.paymentForm.disableSubmit(method, false);\n    }, [paymentContext, method]);\n\n    function toggleSubmitButton(isChecked: boolean) {\n        paymentContext?.paymentForm.disableSubmit(method, !isChecked);\n    }\n\n    return (\n        <>\n            <div className=\"checkoutcom-sepa-column-container\">\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_creditor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{creditor.sepaCreditorCompanyName}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorAddress}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${creditor.sepaCreditorPostalCode} ${creditor.sepaCreditorCity}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorCountry}</p>\n                    <br />\n                    <p className=\"checkoutcom-sepa-line\">\n                        <TranslatedString\n                            data={{ creditorId: creditor.sepaCreditorIdentifier }}\n                            id=\"payment.checkoutcom_sepa_creditor_id\"\n                        />\n                    </p>\n                </div>\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_debtor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{`${debtor.firstName} ${debtor.lastName}`}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.address1}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${debtor.postalCode} ${debtor.city}, ${debtor.stateOrProvinceCode}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.countryCode}</p>\n                </div>\n            </div>\n            <p className=\"checkoutcom-sepa-line\">\n                <TranslatedString id=\"payment.checkoutcom_sepa_payment_type\" />\n            </p>\n            <br />\n\n            <TextFieldForm\n                additionalClassName=\"form-field--iban\"\n                autoComplete=\"iban\"\n                labelId=\"payment.sepa_account_number\"\n                name=\"iban\"\n            />\n            <CheckboxFormField\n                labelContent={\n                    <TranslatedString\n                        data={{ creditorName: creditor.sepaCreditorCompanyName }}\n                        id=\"payment.checkoutcom_sepa_mandate_disclaimer\"\n                    />\n                }\n                name=\"sepaMandate\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onChange={toggleSubmitButton}\n            />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    form,\n    selectedIssuer,\n}) => {\n    const Input = useCallback(() => <input {...restField} type=\"hidden\" />, [restField]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void form.setFieldValue(restField.name, selectedIssuer);\n    }, [value, form, selectedIssuer, restField.name]);\n\n    return <Input />;\n};\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...restProps }) => {\n    const { bic, name } = issuer;\n\n    return (\n        <button data-bic={bic} type=\"button\" {...restProps}>\n            <div className=\"instrumentSelect-details\">{`${bic} / ${name}`}</div>\n        </button>\n    );\n};\n\nconst DropdownButton: FunctionComponent<DropdownButtonProps> = ({ selectedIssuer }) => {\n    if (!selectedIssuer) {\n        return (\n            <button\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                type=\"button\"\n            >\n                <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n                    <div className=\"instrumentSelect-card\">Your bank</div>\n                </div>\n            </button>\n        );\n    }\n\n    return (\n        <OptionButton\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            issuer={selectedIssuer}\n        />\n    );\n};\n\nconst Fawry: FunctionComponent<CheckoutcomAPMFormProps> = () => {\n    return (\n        <>\n            <TextFieldForm\n                additionalClassName=\"form-field--customerMobile\"\n                autoComplete=\"tel\"\n                labelId=\"payment.checkoutcom_fawry_customer_mobile_label\"\n                name=\"customerMobile\"\n            />\n            <TextFieldForm\n                additionalClassName=\"form-field--customerEmail\"\n                autoComplete=\"email\"\n                labelId=\"payment.checkoutcom_fawry_customer_email_label\"\n                name=\"customerEmail\"\n            />\n        </>\n    );\n};\n\nconst Ideal: FunctionComponent<CheckoutcomAPMFormProps> = ({ method }) => {\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer | undefined>();\n    const [bicValue, setBicValue] = useState<string>('');\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={bicValue} />,\n        [bicValue],\n    );\n\n    const issuers: Issuer[] = method.initializationData.idealIssuers;\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        // eslint-disable-next-line no-underscore-dangle\n        const _selectedIssuer = issuers.find(({ bic }) => bic === currentTarget.dataset.bic);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n        setBicValue(_selectedIssuer.bic);\n    };\n\n    const issuersList = (\n        <ul className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\">\n            {issuers.map((issuer) => (\n                <li className=\"instrumentSelect-option dropdown-menu-item\" key={issuer.bic}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <DropdownButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"bic\" />\n        </>\n    );\n};\n\nconst checkoutcomCustomFormFields: CheckoutcomCustomFormFields = {\n    fawry: Fawry,\n    sepa: Sepa,\n    ideal: Ideal,\n};\n\ninterface CheckoutcomCustomFormFields {\n    [key: string]: React.FunctionComponent<CheckoutcomAPMFormProps>;\n}\n\nexport const ccDocumentField = ({ method }: CheckoutcomAPMFormProps) => (\n    <TextFieldForm\n        additionalClassName=\"form-field--ccDocument\"\n        autoComplete=\"cc-document\"\n        labelId={`payment.checkoutcom_document_label_${method.id}`}\n        name=\"ccDocument\"\n    />\n);\n\nexport default checkoutcomCustomFormFields;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { boolean, object, ObjectSchema, string } from 'yup';\n\nimport {\n    DocumentOnlyCustomFormFieldsetValues,\n    FawryCustomFormFieldsetValues,\n    IdealCustomFormFieldsetValues,\n    SepaCustomFormFieldsetValues,\n} from './CheckoutcomFormValues';\n\nexport type checkoutcomCustomPaymentMethods = 'fawry' | 'sepa';\nexport type documentPaymentMethods = 'oxxo' | 'qpay' | 'boleto' | 'ideal';\nexport type checkoutcomPaymentMethods = documentPaymentMethods | checkoutcomCustomPaymentMethods;\nexport const checkoutcomPaymentMethodsArray = ['fawry', 'sepa', 'oxxo', 'qpay', 'boleto', 'ideal'];\nexport interface CustomValidationSchemaOptions {\n    paymentMethod: checkoutcomPaymentMethods;\n    language: LanguageService;\n}\n\nconst checkoutComShemas: {\n    [key in checkoutcomPaymentMethods]: (language: LanguageService) => any;\n} = {\n    oxxo: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_oxxo'))\n            .length(18, language.translate('payment.checkoutcom_document_invalid_error_oxxo')),\n    }),\n    qpay: (language: LanguageService) => ({\n        ccDocument: string()\n            .notRequired()\n            .max(32, language.translate('payment.checkoutcom_document_invalid_error_qpay')),\n    }),\n    boleto: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .min(11, language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .max(14, language.translate('payment.checkoutcom_document_invalid_error_boleto')),\n    }),\n    sepa: (language: LanguageService) => ({\n        iban: string().required(language.translate('payment.sepa_account_number_required')),\n        sepaMandate: boolean().required(language.translate('payment.sepa_mandate_required')),\n    }),\n    ideal: (language: LanguageService) => ({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    }),\n    fawry: (language: LanguageService) => ({\n        customerMobile: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'))\n            .matches(\n                new RegExp(`^\\\\d{11}$`),\n                language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'),\n            ),\n        customerEmail: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error'))\n            .email(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error')),\n    }),\n};\n\nexport default memoize(function getCheckoutcomValidationSchemas({\n    paymentMethod,\n    language,\n}: CustomValidationSchemaOptions): ObjectSchema<\n    | DocumentOnlyCustomFormFieldsetValues\n    | FawryCustomFormFieldsetValues\n    | IdealCustomFormFieldsetValues\n    | SepaCustomFormFieldsetValues\n> {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return object(checkoutComShemas[paymentMethod](language));\n});\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport checkoutcomCustomFormFields, { ccDocumentField } from './CheckoutcomCustomFormFields';\nimport { checkoutcomPaymentMethods, getCheckoutcomValidationSchemas } from './checkoutcomFieldsets';\nimport { checkoutcomPaymentMethodsArray } from './checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas';\n\nexport interface CheckoutcomCustomPaymentMethodProps\n    extends Omit<CreditCardPaymentMethodProps, 'cardFieldset' | 'cardValidationSchema'> {\n    checkoutCustomMethod: string;\n}\n\nconst isCheckoutcomPaymentMethod = (methodId: string): methodId is checkoutcomPaymentMethods => {\n    return Object.values(checkoutcomPaymentMethodsArray).includes(methodId);\n};\nconst CheckoutcomCustomPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    method,\n    checkoutService,\n    checkoutState,\n    ...rest\n}) => {\n    const { getConfig } = checkoutState.data;\n    const isIdealHostedPageExperimentOn =\n        getConfig()?.checkoutSettings.features['PI-2979.checkoutcom_enable_ideal_hosted_page'];\n\n    const checkoutCustomMethod = method.id;\n    const CheckoutcomCustomFieldset =\n        checkoutCustomMethod in checkoutcomCustomFormFields\n            ? checkoutcomCustomFormFields[checkoutCustomMethod]\n            : ccDocumentField;\n\n    const billingAddress = checkoutState.data.getBillingAddress();\n\n    if (\n        !isCheckoutcomPaymentMethod(checkoutCustomMethod) ||\n        (checkoutCustomMethod === 'ideal' && isIdealHostedPageExperimentOn)\n    ) {\n        return null;\n    }\n\n    return (\n        <CreditCardPaymentMethodComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            {...rest}\n            cardFieldset={<CheckoutcomCustomFieldset debtor={billingAddress!} method={method} />}\n            cardValidationSchema={getCheckoutcomValidationSchemas({\n                paymentMethod: checkoutCustomMethod,\n                language,\n            })}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    CheckoutcomCustomPaymentMethod,\n    [\n        { gateway: 'checkoutcom', id: 'ideal' },\n        { gateway: 'checkoutcom', id: 'fawry' },\n        { gateway: 'checkoutcom', id: 'oxxo' },\n        { gateway: 'checkoutcom', id: 'boleto' },\n        { gateway: 'checkoutcom', id: 'sepa' },\n        { gateway: 'checkoutcom', id: 'qpay' },\n        { gateway: 'checkoutcom', id: 'p24' },\n    ],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ClearpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ClearpayPaymentMethod,\n    [{ gateway: 'clearpay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    CheckoutButtonResolveId,\n    PaymentMethodId,\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst GooglePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeGooglePayPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const loadingContainerId = 'checkout-app';\n            const mergedOptions = {\n                ...defaultOptions,\n                [PaymentMethodId.AdyenV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AdyenV3GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AuthorizeNetGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BNZGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BigCommercePaymentsGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BraintreeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.PayPalCommerceGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeUPEGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CybersourceV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.OrbitalGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CheckoutcomGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.WorldpayAccessGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.TdOnlineMartGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeOCSGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"walletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeGooglePayPayment}\n            method={method}\n            shouldShowEditButton\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    GooglePayPaymentMethod,\n    [\n        { id: PaymentMethodId.AdyenV2GooglePay },\n        { id: PaymentMethodId.AdyenV3GooglePay },\n        { id: PaymentMethodId.AuthorizeNetGooglePay },\n        { id: PaymentMethodId.BNZGooglePay },\n        { id: PaymentMethodId.BraintreeGooglePay },\n        { id: PaymentMethodId.PayPalCommerceGooglePay },\n        { id: PaymentMethodId.BigCommercePaymentsGooglePay },\n        { id: PaymentMethodId.CheckoutcomGooglePay },\n        { id: PaymentMethodId.CybersourceV2GooglePay },\n        { id: PaymentMethodId.OrbitalGooglePay },\n        { id: PaymentMethodId.StripeGooglePay },\n        { id: PaymentMethodId.StripeUPEGooglePay },\n        { id: PaymentMethodId.WorldpayAccessGooglePay },\n        { id: PaymentMethodId.TdOnlineMartGooglePay },\n        { id: PaymentMethodId.StripeOCSGooglePay },\n    ],\n);\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from './components';\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n    const {\n        config: { cardCode, showCardHolderName },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId = '';\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: isCardHolderNameRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_name_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccName'),\n                                }\n                              : undefined,\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const hostedFieldset = (\n        <HostedCreditCardFieldset\n            additionalFields={\n                method.config.requireCustomerCode && (\n                    <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                )\n            }\n            cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n            cardExpiryId={getHostedFieldId('ccExpiry')}\n            cardNameId={isCardHolderNameRequired ? getHostedFieldId('ccName') : undefined}\n            cardNumberId={getHostedFieldId('ccNumber')}\n            focusedFieldType={focusedFieldType}\n        />\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: {\n                        form: await getHostedFormOptions(selectedInstrument),\n                        bigpayToken: selectedInstrument?.bigpayToken,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const props = {\n        checkoutService,\n        checkoutState,\n        paymentForm,\n        language,\n        method,\n        onUnhandledError,\n    };\n\n    return (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedCreditCardPaymentMethod,\n    [\n        {\n            id: 'hosted-credit-card',\n        },\n        { id: 'credit_card', gateway: 'bluesnapdirect' },\n        { id: 'tdonlinemart' },\n    ],\n);\n","import { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaPayment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarna: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaPaymentMethod,\n    [{ id: 'klarna' }],\n);\n","import { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaV2Payment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarnav2: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaV2PaymentMethod,\n    [{ gateway: 'klarna' }],\n);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FieldProps, useField } from 'formik';\nimport React, { FunctionComponent, SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface MollieCustomCardFormProps {\n    method: PaymentMethod;\n}\n\nexport interface Issuer {\n    name: string;\n    image: {\n        size1x: string;\n    };\n    id: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface SelecteIssuerProp {\n    selectedIssuer: Issuer;\n}\n\ninterface OptionButtonProps {\n    issuer: Issuer;\n    className?: string;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\nconst MollieAPMCustomForm: FunctionComponent<MollieCustomCardFormProps & WithLanguageProps> = ({\n    method,\n    language,\n}) => {\n    const issuers: Issuer[] = method.initializationData?.paymentMethodsResponse;\n\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer>({\n        name: language.translate('payment.select_your_bank'),\n        id: '',\n        image: { size1x: '' },\n    });\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={selectedIssuer} />,\n        [selectedIssuer],\n    );\n\n    if (!issuers || issuers.length === 0) {\n        return <></>;\n    }\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        const _selectedIssuer = issuers.find(({ id }) => id === currentTarget.dataset.id);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n    };\n\n    const issuersList = (\n        <ul\n            className=\"dropdown-menu instrumentSelect-dropdownMenu mollie-instrument-card\"\n            id=\"issuersDropdown\"\n        >\n            {issuers.map((issuer) => (\n                <li className=\"dropdown-menu-item dropdown-menu-item--select\" key={issuer.id}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <IssuerSelectButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"issuer\" />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    selectedIssuer,\n}) => {\n    const [field, _, helpers] = useField(restField.name);\n    const Input = useCallback(() => <input {...field} type=\"hidden\" />, [field]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void helpers.setValue(selectedIssuer?.id);\n    }, [value, selectedIssuer, helpers]);\n\n    return <Input />;\n};\n\nexport const IssuerSelectButton: FunctionComponent<SelecteIssuerProp> = ({ selectedIssuer }) => (\n    <a\n        className=\"instrumentSelect instrumentSelect-card button dropdown-button dropdown-toogle--select\"\n        href=\"#\"\n        id=\"issuerToggle\"\n        onClick={preventDefault()}\n    >\n        {selectedIssuer.name}\n    </a>\n);\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...props }) => {\n    const { name, image, id } = issuer;\n\n    return (\n        <a className=\"instrumentSelect-details mollie-instrument-list\" {...props} data-id={id}>\n            <label className=\"mollie-instrument-left\">{name}</label>\n            <img alt={name} data-test=\"cart-item-image\" src={image.size1x} />\n        </a>\n    );\n};\n\nexport default withLanguage(MollieAPMCustomForm);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport MollieAPMCustomForm from './MollieAPMCustomForm';\n\nexport interface MollieCustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n        cardHolderElementOptions: {\n            containerId: string;\n        };\n    };\n    isCreditCard: boolean;\n    method: PaymentMethod;\n}\n\nconst MollieCustomCardForm: React.FunctionComponent<MollieCustomCardFormProps> = ({\n    options,\n    isCreditCard,\n    method,\n}) =>\n    !isCreditCard ? (\n        <MollieAPMCustomForm method={method} />\n    ) : (\n        <div className=\"form-ccFields\">\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardNumberElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_number_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input', 'has-icon')}\n                    data-cse=\"CardNumber\"\n                    id={options.cardNumberElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardHolderElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_name_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"CardHolder\"\n                    id={options.cardHolderElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside', 'mollie-paddingRight')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardCvcElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                    <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                        <span className=\"has-tip\">\n                            <IconHelp />\n                        </span>\n                    </TooltipTrigger>\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"SecurityCode\"\n                    id={options.cardCvcElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardExpiryElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"ExpiryDate\"\n                    id={options.cardExpiryElementOptions.containerId}\n                />\n            </div>\n        </div>\n    );\n\nexport default MollieCustomCardForm;\n","import {\n    CardInstrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn, some } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useContext, useState } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport MollieCustomCardForm from './MollieCustomCardForm';\n\nexport enum MolliePaymentMethodType {\n    creditcard = 'credit_card',\n}\n\nconst MolliePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutState,\n    checkoutService,\n    language,\n    paymentForm,\n    ...props\n}) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const localeContext = useContext(LocaleContext);\n    const containerId = `mollie-${method.method}`;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const {\n        setFieldTouched,\n        setFieldValue,\n        setSubmitted,\n        submitForm,\n        setSubmit,\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n    const initializeMolliePayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const mollieElements = getMolliesElementOptions();\n\n            return checkoutService.initializePayment({\n                ...options,\n                mollie: {\n                    containerId,\n                    cardNumberId: mollieElements.cardNumberElementOptions.containerId,\n                    cardCvcId: mollieElements.cardCvcElementOptions.containerId,\n                    cardHolderId: mollieElements.cardHolderElementOptions.containerId,\n                    cardExpiryId: mollieElements.cardExpiryElementOptions.containerId,\n                    styles: {\n                        base: {\n                            color: '#333333',\n                            '::placeholder': {\n                                color: '#999999',\n                            },\n                        },\n                        valid: {\n                            color: '#090',\n                        },\n                        invalid: {\n                            color: '#D14343',\n                        },\n                    },\n                    unsupportedMethodMessage: localeContext?.language.translate(\n                        'payment.mollie_unsupported_method_error',\n                    ),\n                    disableButton: (disabled: boolean) => {\n                        if (paymentContext) {\n                            disableSubmit(method, disabled);\n                        }\n                    },\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            disableSubmit,\n            localeContext?.language,\n            getHostedFormOptions,\n            paymentContext,\n            method,\n        ],\n    );\n\n    const getMolliesElementOptions = () => {\n        return {\n            cardNumberElementOptions: {\n                containerId: 'mollie-card-number-component-field',\n            },\n            cardExpiryElementOptions: {\n                containerId: 'mollie-card-expiry-component-field',\n            },\n            cardCvcElementOptions: {\n                containerId: 'mollie-card-cvc-component-field',\n            },\n            cardHolderElementOptions: {\n                containerId: 'mollie-card-holder-component-field',\n            },\n        };\n    };\n\n    function renderCustomPaymentForm() {\n        const options = getMolliesElementOptions();\n\n        return (\n            <MollieCustomCardForm isCreditCard={isCreditCard()} method={method} options={options} />\n        );\n    }\n\n    function isCreditCard(): boolean {\n        return method.method === MolliePaymentMethodType.creditcard;\n    }\n\n    function validateInstrument(_shouldShowNumber: boolean, selectedInstrument: CardInstrument) {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    }\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...props}\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hideContentWhenSignedOut\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMolliePayment}\n            instruments={instruments}\n            isAccountInstrument={!isCreditCard()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument={true}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n            validateInstrument={validateInstrument}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MolliePaymentMethod,\n    [{ gateway: 'mollie' }, { gateway: 'mollie', id: 'applepay' }],\n);\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    LanguageService,\n    LegacyHostedFormOptions,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n","import { CardInstrument, PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst MonerisPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const containerId = `moneris-iframe-container`;\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const initializeMonerisPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const paymentConfig = {\n                ...options,\n                moneris: {\n                    containerId,\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            };\n\n            return checkoutService.initializePayment(paymentConfig);\n        },\n        [containerId, getHostedFormOptions, checkoutService],\n    );\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMonerisPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n            validateInstrument={validateInstrument}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MonerisPaymentMethod,\n    [{ id: 'moneris' }],\n);\n","import { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst OfflinePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    return null;\n};\n\nexport default toResolvableComponent(OfflinePaymentMethod, [\n    {\n        type: 'PAYMENT_TYPE_OFFLINE',\n    },\n]);\n","import {\n    AccountInstrument,\n    HostedInstrument,\n    PayPalCommerceAlternativeMethodsPaymentOptions,\n    PayPalCommerceCreditPaymentInitializeOptions,\n    PayPalCommercePaymentInitializeOptions,\n    PayPalCommerceVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype PayPalCommerceProvidersPaymentInitializeOptions =\n    PayPalCommerceAlternativeMethodsPaymentOptions &\n        PayPalCommerceCreditPaymentInitializeOptions &\n        PayPalCommercePaymentInitializeOptions &\n        PayPalCommerceVenmoPaymentInitializeOptions;\n\ninterface PayPalCommercePaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<PayPalCommerceProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst PayPalCommercePaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & PayPalCommercePaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default PayPalCommercePaymentMethodComponent;\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const { id } = method;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"paypalcommercealternativemethods\"\n            {...props}\n        >\n            <div className={`widget widget--${id} payment-widget`} id={widgetContainerId} />\n        </PayPalCommercePaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceAPMsPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceCreditPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsKey=\"paypalcommercecredit\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditPaymentMethod,\n    [{ id: 'paypalcommercecredit' }],\n);\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst PayPalCommerceCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializePayPalCommerceCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    paypalcommercecreditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching PayPal Commerce Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditCardPaymentMethod,\n    [{ id: 'paypalcommercecreditcards' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneCreditCardForm.scss';\n\ninterface PayPalCommerceFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst PayPalCommerceFastlaneCreditCardForm: FunctionComponent<\n    PayPalCommerceFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#paypal-commerce-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-cc-form-container\"\n            data-test=\"paypal-commerce-fastlane-cc-form-container\"\n            id=\"paypal-commerce-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default PayPalCommerceFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface PayPalCommerceFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst PayPalCommerceFastlaneInstrumentsForm: FunctionComponent<\n    PayPalCommerceFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-instrument\"\n            data-test=\"paypal-commerce-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"paypal-commerce-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"paypal-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"paypal-commerce-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"paypal-commerce-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"paypal-commerce-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { usePayPalCommerceFastlaneInstruments } from '../hooks/usePayPalCommerceFastlaneInstruments';\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport PayPalCommerceFastlaneCreditCardForm from './PayPalCommerceFastlaneCreditCardForm';\nimport PayPalCommerceFastlaneInstrumentsForm from './PayPalCommerceFastlaneInstrumentsForm';\n\ninterface PayPalCommerceFastlaneFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst PayPalCommerceFastlaneForm: FunctionComponent<PayPalCommerceFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        usePayPalCommerceFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const usePayPalCommerceFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommerceFastlaneForm from './components/PayPalCommerceFastlaneForm';\n\nimport './PayPalCommerceFastlanePaymentMethod.scss';\nimport isErrorWithTranslationKey from './is-error-with-translation-key';\n\nexport interface PayPalFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst PayPalCommerceFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<PayPalFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                paypalcommercefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <PayPalCommerceFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceFastlanePaymentMethod,\n    [{ id: 'paypalcommerceacceleratedcheckout' }],\n);\n","import PayPalCommerceFastlanePaymentMethod from './PayPalCommerceFastlanePaymentMethod';\n\nexport default PayPalCommerceFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import { AccountInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst usePaypalCommerceInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default usePaypalCommerceInstrument;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nimport usePaypalCommerceInstrument from './hooks/usePaypalCommerceInstruments';\n\nconst PayPalCommercePaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = usePaypalCommerceInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <PayPalCommercePaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"paypalcommerce\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </PayPalCommercePaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommercePaymentMethod,\n    [{ id: 'paypalcommerce' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent providerOptionsKey=\"paypalcommercevenmo\" {...props} />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceVenmoPaymentMethod,\n    [{ id: 'paypalcommercevenmo' }],\n);\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, StringSchema } from 'yup';\n\nexport default memoize(function getPaypalCommerceRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    CountryData,\n    CustomError,\n    getCountryData,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    SpecificError,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getPaypalCommerceRatePayValidationSchema from './validation-schema/getPaypalCommerceRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst PaypalCommerceRatePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    const getCountryInfo = (): CountryData | undefined => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        if (billing && !billing.country) {\n            return getCountryData(billing.country)[0];\n        }\n    };\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                paypalcommerceratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => {\n                        // TODO: update PPCP Ratepay initialization data with getFieldsValues optional return data in checkout-sdk\n                        const defaultFieldValues = {\n                            ratepayBirthDate: {\n                                getDate: () => 0,\n                                getMonth: () => 0,\n                                getFullYear: () => 0,\n                            },\n                            ratepayPhoneCountryCode: '',\n                            ratepayPhoneNumber: '',\n                        };\n\n                        return {\n                            ...defaultFieldValues,\n                            ...fieldsValues.current,\n                        };\n                    },\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }): void => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    const validationSchema = useMemo(\n        () =>\n            getPaypalCommerceRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    useEffect(() => {\n        const countryInfo = getCountryInfo();\n\n        if (countryInfo) {\n            setFieldValue('ratepayPhoneCountryCode', countryInfo.dialCode);\n        }\n    }, []);\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const formContextProps = {\n        isSubmitted: isSubmitted(),\n        setSubmitted,\n    };\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={formContextProps}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalCommerceRatePayPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods', id: 'ratepay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaypalExpressPaymentMethodProps {\n    isEmbedded?: boolean;\n}\n\nconst PaypalExpressPaymentMethod: FunctionComponent<\n    PaymentMethodProps & PaypalExpressPaymentMethodProps\n> = ({ checkoutService, isEmbedded = false, ...rest }) => {\n    const initializePaypalExpressPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                paypalexpress: {\n                    useRedirectFlow: isEmbedded,\n                },\n            }),\n        [checkoutService, isEmbedded],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePaypalExpressPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalExpressPaymentMethod,\n    [{ id: 'paypalexpress' }],\n);\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    CheckoutService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport {\n    CardInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface SquareV2FormProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    containerId: string;\n    deinitializePayment: () => Promise<void>;\n    initializePayment: () => Promise<void>;\n    method: PaymentMethod;\n}\n\nconst SquareV2Form: FunctionComponent<SquareV2FormProps> = ({\n    checkoutService,\n    checkoutState,\n    containerId,\n    deinitializePayment,\n    initializePayment,\n    method,\n}) => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n\n    const { getCustomer, getInstruments } = checkoutState.data;\n    const isSignedIn = getCustomer()?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n\n    useEffect(() => {\n        if (isInstrumentFeatureAvailable) {\n            void checkoutService.loadInstruments();\n        }\n    }, [checkoutService, isInstrumentFeatureAvailable]);\n\n    const instruments = useMemo(() => getInstruments(method) || [], [getInstruments, method]);\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n\n    const getDefaultInstrumentId = useCallback(() => {\n        if (isAddingNewCard) {\n            return;\n        }\n\n        if (instruments.length > 0) {\n            const defaultInstrument =\n                instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n            return defaultInstrument.bigpayToken;\n        }\n    }, [instruments, isAddingNewCard]);\n\n    useEffect(() => {\n        const defaultInstrumentId = getDefaultInstrumentId() || undefined;\n\n        setSelectedInstrumentId(defaultInstrumentId);\n    }, [getDefaultInstrumentId, instruments]);\n\n    const { setFieldValue } = usePaymentFormContext().paymentForm;\n\n    const handleSelectInstrument: (id: string) => void = (id) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    };\n\n    const handleDeleteInstrument: (id: string) => void = (id) => {\n        if (instruments.length === 0) {\n            setIsAddingNewCard(true);\n            setSelectedInstrumentId(undefined);\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            setSelectedInstrumentId(getDefaultInstrumentId());\n\n            setFieldValue('instrumentId', getDefaultInstrumentId());\n        }\n    };\n\n    const handleUseNewCard: () => void = () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        void deinitializePayment();\n\n        void initializePayment();\n    };\n\n    const renderPlaceholderFields = () => {\n        return (\n            <div data-test=\"squarev2_placeholder_form\" style={{ display: 'none' }}>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-label optimizedCheckout-form-label\"\n                        id=\"messageIsDefault\"\n                    />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsDefault\" />\n                </div>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-input optimizedCheckout-form-input form-input--focus optimizedCheckout-form-input--focus\"\n                        id=\"inputIsFocus\"\n                    />\n                </div>\n                <div className=\"form-field form-field--error\">\n                    <div className=\"form-inlineMessage\" id=\"messageIsError\" />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsError\" />\n                </div>\n            </div>\n        );\n    };\n\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    return (\n        <LoadingOverlay\n            data-test=\"squarev2_loading_overlay\"\n            hideContentWhenLoading\n            isLoading={isLoadingInstruments()}\n        >\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                        instruments={instruments as CardInstrument[]}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={selectedInstrumentId || getDefaultInstrumentId()}\n                    />\n                )}\n                <div\n                    className={classNames('widget', `widget--${method.id}`, 'payment-widget')}\n                    data-test={containerId}\n                    style={{\n                        display: !shouldShowCreditCardFieldset ? 'none' : undefined,\n                    }}\n                    tabIndex={-1}\n                >\n                    {renderPlaceholderFields()}\n                    <div id={containerId} />\n                </div>\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={selectedInstrumentId}\n                        instruments={instruments}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default SquareV2Form;\n","import { difference } from 'lodash';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport SquareV2Form from './SquareV2Form';\n\nconst SquareV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n}) => {\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const container = document.querySelector<HTMLDivElement>(`#${id}`);\n\n        if (!container) {\n            throw new Error(\n                `Unable to retrieve input styles as the provided container ID \"${id}\" is not valid.`,\n            );\n        }\n\n        return getAppliedStyles(container, properties);\n    };\n\n    const copyStylesFromDummyFormFields = useCallback(() => {\n        const styleProps = [\n            'backgroundColor',\n            'borderColor',\n            'borderRadius',\n            'borderWidth',\n            'color',\n            'fontSize',\n            'fontWeight',\n        ];\n\n        return {\n            default: {\n                message: getStylesFromElement('messageIsDefault', ['color']),\n                input: getStylesFromElement('inputIsDefault', styleProps),\n            },\n            focus: {\n                input: getStylesFromElement(\n                    'inputIsFocus',\n                    difference(styleProps, ['borderRadius']),\n                ),\n            },\n            error: {\n                message: getStylesFromElement('messageIsError', ['color']),\n                input: getStylesFromElement('inputIsError', [\n                    'borderColor',\n                    'borderWidth',\n                    'color',\n                ]),\n            },\n        };\n    }, []);\n\n    const mapToSquareStyles = useCallback(\n        (styles: ReturnType<typeof copyStylesFromDummyFormFields>) => {\n            const { borderColor, borderRadius, borderWidth, ...input } = styles.default.input;\n            const {\n                borderColor: borderColorIsFocus,\n                borderWidth: borderWidthIsFocus,\n                ...inputIsFocus\n            } = styles.focus.input;\n            const {\n                borderColor: borderColorIsError,\n                borderWidth: borderWidthIsError,\n                color: colorIsError,\n            } = styles.error.input;\n\n            return {\n                input,\n                'input.is-focus': {\n                    ...inputIsFocus,\n                },\n                'input.is-error': {\n                    color: colorIsError,\n                },\n                '.input-container': {\n                    borderColor,\n                    borderRadius,\n                    borderWidth,\n                },\n                '.input-container.is-focus': {\n                    borderColor: borderColorIsFocus,\n                    borderWidth: borderWidthIsFocus,\n                },\n                '.input-container.is-error': {\n                    borderColor: borderColorIsError,\n                    borderWidth: borderWidthIsError,\n                },\n                '.message-text': {\n                    color: styles.default.message.color,\n                },\n                '.message-icon': {\n                    color: styles.default.message.color,\n                },\n                '.message-text.is-error': {\n                    color: styles.error.message.color,\n                },\n                '.message-icon.is-error': {\n                    color: styles.error.message.color,\n                },\n            };\n        },\n        [],\n    );\n\n    const containerId = 'squarev2_payment_element_container';\n\n    const initializePayment = useCallback(async () => {\n        let style;\n\n        try {\n            style = mapToSquareStyles(copyStylesFromDummyFormFields());\n        } catch {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        await checkoutService.initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n            squarev2: {\n                containerId,\n                style,\n            },\n        });\n    }, [\n        checkoutService,\n        copyStylesFromDummyFormFields,\n        mapToSquareStyles,\n        method.gateway,\n        method.id,\n    ]);\n\n    const deinitializePayment = useCallback(async () => {\n        await checkoutService.deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [checkoutService, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, [deinitializePayment, initializePayment]);\n\n    return (\n        <SquareV2Form\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            containerId={containerId}\n            deinitializePayment={deinitializePayment}\n            initializePayment={initializePayment}\n            method={method}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    SquareV2PaymentMethod,\n    [{ id: 'squarev2' }],\n);\n","import { StripeAppearanceOptions, StripeCustomFont } from '@bigcommerce/checkout-sdk';\nimport { isEmpty } from 'lodash';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nconst getStylesFromElement = (\n    selector: string,\n    properties: string[],\n    pseudoElementSelector?: string,\n) => {\n    const element = document.querySelector<HTMLElement>(selector);\n\n    return element ? getAppliedStyles(element, properties, pseudoElementSelector) : {};\n};\n\nconst parseRadioIconSize = (size: string | number = 0): number =>\n    typeof size !== 'number' ? parseInt(size, 10) : size;\n\nconst getRadioIconSizes = (sizes?: Record<string, string | number | undefined>) => {\n    const {\n        radioIconOuterWidth = 26,\n        radioIconOuterStrokeWidth = 1,\n        radioIconInnerWidth = 17,\n    } = sizes || {};\n    const stripeSVGSizeCoefficient = 0.88; // Provided by Stripe team for scaling SVGs.\n\n    const percentageCoefficient = stripeSVGSizeCoefficient * 100;\n    const outerWidth = parseRadioIconSize(radioIconOuterWidth);\n    const outerStrokeWidth = parseRadioIconSize(radioIconOuterStrokeWidth);\n    const innerWidth = parseRadioIconSize(radioIconInnerWidth);\n\n    const stripeEqualOuterWidth = (outerWidth / stripeSVGSizeCoefficient).toFixed(2);\n    const stripeEqualOuterStrokeWidth = (\n        (outerStrokeWidth / outerWidth) *\n        percentageCoefficient\n    ).toFixed(2);\n    const stripeEqualInnerRadius = (\n        ((innerWidth / outerWidth) * percentageCoefficient) /\n        2\n    ).toFixed(2);\n\n    return {\n        outerWidth: `${stripeEqualOuterWidth}px`,\n        outerStrokeWidth: `${stripeEqualOuterStrokeWidth}px`,\n        innerRadius: stripeEqualInnerRadius,\n    };\n};\n\nexport const getFonts = (selector = 'link[href*=\"font\"]'): StripeCustomFont[] => {\n    const elementsList: NodeListOf<Element> = document.querySelectorAll(selector);\n    const fonts: StripeCustomFont[] = [];\n\n    elementsList.forEach((element: Element | null) => {\n        const fontSrc = element?.getAttribute('href');\n\n        if (fontSrc) {\n            fonts.push({ cssSrc: fontSrc });\n        }\n    });\n\n    return fonts;\n};\n\nexport const getAppearanceForOCSElement = (containerId: string): StripeAppearanceOptions => {\n    const defaultAccordionPaddingHorizontal = '18px';\n    const defaultAccordionPaddingVertical = '13px';\n    const defaultRadioIconInnerScale = 0.66;\n\n    const formInputStyles = getStylesFromElement(`#${containerId}--input`, [\n        'color',\n        'background-color',\n        'border-color',\n        'box-shadow',\n        'font-family',\n    ]);\n    const formLabelStyles = getStylesFromElement(`#${containerId}--label`, ['color']);\n    const formErrorStyles = getStylesFromElement(`#${containerId}--error`, ['color']);\n    const accordionHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        [\n            'color',\n            'font-size',\n            'font-family',\n            'font-weight',\n            'padding-top',\n            'padding-right',\n            'padding-bottom',\n        ],\n    );\n    const accordionSelectedHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header-selected`,\n        ['background-color'],\n    );\n    const formChecklistStyles = getStylesFromElement(\n        `#${containerId}--accordion-header.optimizedCheckout-form-checklist-item`,\n        ['border-bottom', 'border-color'],\n    );\n    const {\n        color: accordionHeaderColor,\n        'font-size': accordionItemTitleFontSize,\n        'font-family': accordionHeaderFontFamily,\n        'font-weight': accordionItemTitleFontWeight,\n        'padding-top': accordionPaddingTop = defaultAccordionPaddingVertical,\n        'padding-right': accordionPaddingRight = defaultAccordionPaddingHorizontal,\n        'padding-bottom': accordionPaddingBottom = defaultAccordionPaddingVertical,\n    } = accordionHeaderStyles;\n    const accordionHeaderPadding = !isEmpty(accordionHeaderStyles)\n        ? `${accordionPaddingTop} ${accordionPaddingRight} ${accordionPaddingBottom} ${defaultAccordionPaddingHorizontal}`\n        : undefined;\n    const radioOuter = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        ['border-color', 'border-width', 'width'],\n        '::before',\n    );\n    const radioOuterChecked = getStylesFromElement(\n        `#${containerId}--accordion-header-selected .form-label`,\n        ['border-color'],\n        '::before',\n    );\n    const radioIconSize = getRadioIconSizes({\n        radioIconOuterWidth: radioOuter.width,\n        radioIconOuterStrokeWidth: radioOuter['border-width'],\n        radioIconInnerWidth:\n            radioOuter.width && parseRadioIconSize(radioOuter.width) * defaultRadioIconInnerScale,\n    });\n    const radioIconColor = radioOuter['border-color'];\n    const radioIconFocusColor = radioOuterChecked['border-color'];\n\n    return {\n        variables: {\n            colorPrimary: formInputStyles['box-shadow'],\n            colorBackground: formInputStyles['background-color'],\n            colorText: formLabelStyles.color,\n            colorDanger: formErrorStyles.color,\n            colorTextSecondary: formLabelStyles.color,\n            colorTextPlaceholder: formInputStyles.color,\n            colorIcon: formInputStyles.color,\n            fontFamily: accordionHeaderFontFamily || formInputStyles['font-family'],\n        },\n        rules: {\n            '.Input': {\n                borderColor: formInputStyles['border-color'],\n                color: formInputStyles.color,\n                boxShadow: formInputStyles['box-shadow'],\n            },\n            '.AccordionItem': {\n                borderRadius: 0,\n                borderWidth: 0,\n                borderBottom: formChecklistStyles['border-bottom'],\n                borderColor: formChecklistStyles['border-color'],\n                boxShadow: 'none',\n                fontSize: accordionItemTitleFontSize,\n                fontWeight: accordionItemTitleFontWeight,\n                color: accordionHeaderColor,\n                padding: accordionHeaderPadding,\n            },\n            '.AccordionItem:hover': {\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n                color: accordionHeaderColor,\n            },\n            '.AccordionItem--selected': {\n                fontWeight: 'bold',\n                color: accordionHeaderColor,\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n            },\n            '.TabLabel': {\n                color: accordionHeaderColor,\n            },\n            '.RadioIcon': {\n                width: radioIconSize.outerWidth,\n            },\n            '.RadioIconInner': {\n                r: radioIconSize.innerRadius,\n                fill: radioIconFocusColor,\n            },\n            '.RadioIconOuter': {\n                strokeWidth: radioIconSize.outerStrokeWidth,\n                stroke: radioIconColor,\n            },\n            '.RadioIconOuter--checked': {\n                stroke: radioIconFocusColor,\n            },\n        },\n    };\n};\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, {\n    FunctionComponent,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { AccordionContext, ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { getAppearanceForOCSElement, getFonts } from './getStripeOCSStyles';\n\nconst StripeOCSPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const collapseStripeElement = useRef<() => void>();\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const [isOCSLoading, setIsOCSLoading] = useState(false);\n    const methodSelector = `${method.gateway}-${method.id}`;\n    const containerId = `${methodSelector}-component-field`;\n    const paymentContext = paymentForm;\n\n    useEffect(() => {\n        if (selectedItemId?.includes(`${method.gateway}-`)) {\n            return;\n        }\n\n        collapseStripeElement.current?.();\n    }, [selectedItemId, method.gateway]);\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            setIsOCSLoading(true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeocs: {\n                    containerId,\n                    layout: {\n                        type: 'accordion',\n                        defaultCollapsed: selectedItemId !== methodSelector,\n                        radios: true,\n                        linkInAccordion: true,\n                        spacedAccordionItems: false,\n                        visibleAccordionItemsCount: 0,\n                    },\n                    appearance: getAppearanceForOCSElement(containerId),\n                    fonts: getFonts(),\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                    paymentMethodSelect: onToggle,\n                    handleClosePaymentMethod: (collapseElement: () => void) => {\n                        collapseStripeElement.current = collapseElement;\n                    },\n                    togglePreloader: setIsOCSLoading,\n                },\n            });\n        },\n        [\n            containerId,\n            selectedItemId,\n            methodSelector,\n            checkoutService,\n            onUnhandledError,\n            renderSubmitButton,\n            onToggle,\n            setIsOCSLoading,\n        ],\n    );\n\n    const renderCustomOCSSectionStyles = () => (\n        <style>\n            {`\n                .custom-checklist-item#radio-${methodSelector} {\n                    border-bottom: none;\n                }\n                .custom-checklist-item#radio-${methodSelector}:last-of-type {\n                    margin-bottom: -1px;\n                }\n            `}\n        </style>\n    );\n\n    const renderCheckoutElementsForStripeOCSStyling = () => (\n        <div style={{ display: 'none' }}>\n            <div\n                className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n                id={`${containerId}--accordion-header`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    id={`${containerId}-radio-input`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div\n                className=\"form-checklist-header--selected\"\n                id={`${containerId}--accordion-header-selected`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    defaultChecked\n                    id={`${containerId}-radio-input-selected`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        </div>\n    );\n\n    const renderPreloader = () => (\n        <div data-test=\"stripe-accordion-skeleton\" style={{ padding: '10px 18px' }}>\n            <ChecklistSkeleton />\n        </div>\n    );\n\n    return (\n        <>\n            {isOCSLoading ? renderPreloader() : renderCustomOCSSectionStyles()}\n\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={false}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutElementsForStripeOCSStyling()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeOCSPaymentMethod,\n    [{ gateway: 'stripeocs', id: 'optimized_checkout' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst StripeUPEPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const containerId = `stripe-${method.id}-component-field`;\n    const paymentContext = paymentForm;\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getPaymentProviderCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const isStripeLinkAuthenticated = paymentProviderCustomer?.stripeLinkAuthenticationState;\n    const isGuestCustomer = customer?.isGuest;\n    const shouldSavingCardsBeEnabled = useMemo((): boolean => {\n        if (!isGuestCustomer && isStripeLinkAuthenticated) {\n            return false;\n        }\n\n        return true;\n    }, [isGuestCustomer, isStripeLinkAuthenticated]);\n    const isInstrumentFeatureAvailable =\n        shouldSavingCardsBeEnabled && !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (!parentContainer) {\n            throw new Error(\n                'Unable to retrieve input styles as the provided container ID is not valid.',\n            );\n        }\n\n        return getAppliedStyles(parentContainer, properties);\n    };\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            const formInput = getStylesFromElement(`${containerId}--input`, [\n                'color',\n                'background-color',\n                'border-color',\n                'box-shadow',\n            ]);\n            const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n            const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n            paymentContext.hidePaymentSubmitButton(method, true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeupe: {\n                    containerId,\n                    style: {\n                        labelText: formLabel.color,\n                        fieldText: formInput.color,\n                        fieldPlaceholderText: formInput.color,\n                        fieldErrorText: formError.color,\n                        fieldBackground: formInput['background-color'],\n                        fieldInnerShadow: formInput['box-shadow'],\n                        fieldBorder: formInput['border-color'],\n                    },\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            onUnhandledError,\n            method,\n            paymentContext,\n            renderSubmitButton,\n        ],\n    );\n\n    const renderCheckoutThemeStylesForStripeUPE = () => {\n        return (\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        );\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutThemeStylesForStripeUPE()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeUPEPaymentMethod,\n    [{ gateway: 'stripeupe' }, { gateway: 'stripeupe', id: 'klarna' }],\n);\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, IconLock, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nexport interface StripeV3CustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n    };\n}\n\nconst StripeV3CustomCardForm: React.FunctionComponent<StripeV3CustomCardFormProps> = ({\n    options,\n}) => (\n    <div className=\"form-ccFields\">\n        <div className={classNames('form-field', 'form-field--stripe-ccNumber')}>\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardNumberElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_number_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"CardNumber\"\n                id={options.cardNumberElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n        <div className=\"form-field form-field--ccExpiry\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardExpiryElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_expiration_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"ExpiryDate\"\n                id={options.cardExpiryElementOptions.containerId}\n            />\n        </div>\n        <div className=\"form-field form-ccFields-field--ccCvv\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardCvcElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"SecurityCode\"\n                id={options.cardCvcElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n    </div>\n);\n\nexport default StripeV3CustomCardForm;\n","import {\n    CardInstrument,\n    CustomError,\n    PaymentInitializeOptions,\n    StripeElementOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { useHostedCreditCard } from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport StripeV3CustomCardForm from './StripeV3CustomCardForm';\n\nexport interface StripeOptions {\n    alipay?: StripeElementOptions;\n    card: StripeElementOptions;\n    cardCvc: StripeElementOptions;\n    cardExpiry: StripeElementOptions;\n    cardNumber: StripeElementOptions;\n    iban: StripeElementOptions;\n    idealBank: StripeElementOptions;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    Card = 'card',\n    CardCvc = 'cardCvc',\n    CardExpiry = 'cardExpiry',\n    CardNumber = 'cardNumber',\n    Iban = 'iban',\n    IdealBank = 'idealBank',\n}\n\nconst StripeV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const { useIndividualCardFields } = method.initializationData;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const paymentMethodType = method.id as StripeElementType;\n    const additionalStripeV3Classes =\n        paymentMethodType !== StripeElementType.Alipay\n            ? 'optimizedCheckout-form-input widget--stripev3'\n            : '';\n    const containerId = `stripe-${paymentMethodType}-component-field`;\n    const stripeOptions: StripeOptions = useMemo(() => {\n        const classes = {\n            base: 'form-input optimizedCheckout-form-input',\n        };\n\n        return {\n            [StripeElementType.Card]: {\n                classes,\n            },\n            [StripeElementType.CardCvc]: {\n                classes,\n                placeholder: '',\n            },\n            [StripeElementType.CardExpiry]: {\n                classes,\n            },\n            [StripeElementType.CardNumber]: {\n                classes,\n                showIcon: true,\n                placeholder: '',\n            },\n            [StripeElementType.Iban]: {\n                classes,\n                supportedCountries: ['SEPA'],\n            },\n            [StripeElementType.IdealBank]: {\n                classes,\n            },\n        };\n    }, []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer, getConfig },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const storeUrl = useMemo(() => {\n        if (!config) {\n            return null;\n        }\n\n        return config.links.siteLink;\n    }, [config]);\n\n    const onUnhandledStripeV3Error = useCallback(\n        (error: CustomError) => {\n            if (error.type === 'stripev3_error' && error.subtype === 'auth_failure') {\n                error.message = language.translate('payment.stripev3_auth_3ds_fail');\n            }\n\n            onUnhandledError(error);\n        },\n        [language, onUnhandledError],\n    );\n\n    const getIndividualCardElementOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            return {\n                cardNumberElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardNumber],\n                    containerId: 'stripe-card-number-component-field',\n                },\n                cardExpiryElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardExpiry],\n                    containerId: 'stripe-expiry-component-field',\n                },\n                cardCvcElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardCvc],\n                    containerId: 'stripe-cvc-component-field',\n                },\n            };\n        },\n        [],\n    );\n\n    const getStripeOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            if (useIndividualCardFields) {\n                return getIndividualCardElementOptions(stripeInitializeOptions);\n            }\n\n            return stripeInitializeOptions[paymentMethodType];\n        },\n        [paymentMethodType, getIndividualCardElementOptions, useIndividualCardFields],\n    );\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                stripev3: {\n                    containerId,\n                    options: getStripeOptions(stripeOptions),\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [containerId, getStripeOptions, stripeOptions, checkoutService, getHostedFormOptions],\n    );\n\n    const renderCustomPaymentForm = () => {\n        const optionsCustomForm = getIndividualCardElementOptions(stripeOptions);\n\n        return <StripeV3CustomCardForm options={optionsCustomForm} />;\n    };\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                additionalContainerClassName={additionalStripeV3Classes}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledStripeV3Error}\n                renderCustomPaymentForm={renderCustomPaymentForm}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldRenderCustomInstrument={useIndividualCardFields}\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            {method.id === 'iban' && (\n                <p className=\"stripe-sepa-mandate-disclaimer\">\n                    <TranslatedString\n                        data={{ storeUrl }}\n                        id=\"payment.stripe_sepa_mandate_disclaimer\"\n                    />\n                </p>\n            )}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeV3PaymentMethod,\n    [{ gateway: 'stripev3' }],\n);\n","import {\n    CardInstrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { CreditCardPaymentMethodComponent } from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\ninterface WorldpayPaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst WorldpayCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const [threeDSecureVerification, setThreeDSecureVerification] = useState<HTMLElement>();\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const { getHostedStoredCardValidationFieldset } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const ref = useRef<WorldpayPaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const cancelWorldpayModalFlow = useCallback(() => {\n        setThreeDSecureVerification(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n    const initializeWorldpayPayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                creditCard: {\n                    form: getHostedFormOptions && (await getHostedFormOptions(selectedInstrument)),\n                },\n                worldpay: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setThreeDSecureVerification(content);\n                        ref.current.cancelThreeDSecureVerification = cancel;\n                    },\n                },\n            });\n        },\n        [checkoutService, getHostedFormOptions],\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (threeDSecureVerification) {\n            ref.current.paymentPageContentRef.current?.appendChild(threeDSecureVerification);\n        }\n    }, [threeDSecureVerification]);\n\n    return (\n        <>\n            <CreditCardPaymentMethodComponent\n                {...rest}\n                cardFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                cardValidationSchema={hostedValidationSchema}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeWorldpayPayment}\n                language={language}\n                method={method}\n                paymentForm={paymentForm}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n            <Modal\n                isOpen={!!threeDSecureVerification}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelWorldpayModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div ref={ref.current.paymentPageContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    WorldpayCreditCardPaymentMethod,\n    [{ id: 'worldpayaccess' }],\n);\n","import { ComponentType } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { resolveComponent } from '../common/resolver';\nimport * as paymentMethods from '../generated/paymentIntegrations';\n\nexport default function resolvePaymentMethod(\n    query: PaymentMethodResolveId,\n): ComponentType<PaymentMethodProps> | undefined {\n    return resolveComponent<PaymentMethodResolveId, PaymentMethodProps>(query, paymentMethods);\n}\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\n\nimport PaymentContext, { PaymentContextProps } from './PaymentContext';\n\nexport type WithPaymentProps = PaymentContextProps;\n\nconst withPayment = createInjectHoc(PaymentContext, { displayNamePrefix: 'WithPayment' });\n\nexport default withPayment;\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { FormFieldContainer, TextInput } from '../../ui/form';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardCustomerCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCustomerCodeField: FunctionComponent<CreditCardCustomerCodeFieldProps> = ({\n    name,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_customer_code_label\" />{' '}\n                <small className=\"optimizedCheckout-contentSecondary\">\n                    <TranslatedString id=\"common.optional_text\" />\n                </small>\n            </>\n        ),\n        [],\n    );\n\n    return <FormField input={renderInput} labelContent={labelContent} name={name} />;\n};\n\nexport default memo(CreditCardCustomerCodeField);\n","import { CheckoutSettings, Customer, PaymentMethod, PaymentMethodConfig, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    paymentMethod: PaymentMethod;\n    shouldSavingCardsBeEnabled?: boolean;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    paymentMethod,\n    shouldSavingCardsBeEnabled = true,\n}: IsInstrumentFeatureAvailableState): boolean {\n    const { checkoutSettings } = config;\n\n    if (\n        isVaultingNotEnabled(checkoutSettings, paymentMethod.config) ||\n        customer.isGuest ||\n        !shouldSavingCardsBeEnabled\n    ) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction isVaultingNotEnabled(checkoutSettings: CheckoutSettings, paymentMethodConfig: PaymentMethodConfig): boolean {\n    return !checkoutSettings.isCardVaultingEnabled || !paymentMethodConfig.isVaultingEnabled;\n}\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass InstrumentSelect extends PureComponent<InstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<InstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            field,\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate = false,\n        } = this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <InstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideExpiryDate}\n                        />\n                    }\n                >\n                    <InstrumentSelectButton\n                        instrument={selectedInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" {...field} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{ cardTitle: cardInfo.niceType, endingIn: instrument.last4 }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default InstrumentSelect;\n","import { AccountInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is AccountInstrument {\n    return instrument.type === 'account';\n}\n","import { AchInstrument, BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isBankAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is BankInstrument | AchInstrument {\n    return instrument.type === 'bank';\n}\n","import { CardInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isCardInstrument(\n    instrument: PaymentInstrument,\n): instrument is CardInstrument {\n    return instrument.type === 'card';\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconPaypal: FunctionComponent = () => (\n    <svg height=\"300\" viewBox=\"0 0 255 300\" width=\"255\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M228.03 77.2c3.6-23.02-.03-38.7-12.48-52.89C201.83 8.7 177.07 2 145.4 2H53.4c-6.47 0-11.99 4.7-12.99 11.11L2.1 256.03a7.9 7.9 0 0 0 7.8 9.14h56.78c79.33-53.38 148.45-81.4 161.35-187.97z\"\n            fill=\"#253B80\"\n        />\n        <path\n            d=\"M228.02 77.2C124 73 95 98 80.5 177.52l-13.82 87.65-3.91 24.85a6.9 6.9 0 0 0 6.82 7.98h47.86c5.67 0 10.48-4.12 11.37-9.71l.48-2.43 9-57.2.59-3.15c.88-5.6 5.7-9.73 11.37-9.73h7.16c46.38 0 82.68-18.83 93.29-73.33 4.43-22.76 2.14-41.77-9.6-55.14a45.77 45.77 0 0 0-13.1-10.1z\"\n            fill=\"#179BD7\"\n        />\n        <path\n            d=\"M215.33 72.14c-3.88-1.12-7.82-2-11.8-2.62a149.83 149.83 0 0 0-23.79-1.73h-72.1a11.49 11.49 0 0 0-11.36 9.73l-15.34 97.16-.44 2.84a13.1 13.1 0 0 1 12.95-11.1h27c53 0 94.5-21.53 106.62-83.82.37-1.85.67-3.64.95-5.4a64.66 64.66 0 0 0-9.98-4.2c-.9-.3-1.8-.59-2.71-.86z\"\n            fill=\"#222D65\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconPaypal);\n","import { AccountInstrument, BankInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface ManageAccountInstrumentsTableProps {\n    instruments: Array<AccountInstrument | BankInstrument>;\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsTable: FunctionComponent<ManageAccountInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: AccountInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-accountExternalId\">\n                {isBankAccountInstrument(instrument) ? (\n                    <span className=\"instrumentModal-instrumentAccountNumber\">\n                        <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        <span>{` ${instrument.accountNumber}`}</span>\n                    </span>\n                ) : (\n                    <>\n                        <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n                        <span className=\"instrumentModal-instrumentAccountExternalId\">\n                            {instrument.externalId}\n                        </span>\n                    </>\n                )}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageInstrumentsTable);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface ManageCardInstrumentsTableProps {\n    instruments: CardInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageCardInstrumentsTable: FunctionComponent<ManageCardInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_expiry_date_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: CardInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired =\n        !expirationDate({\n            month: instrument.expiryMonth,\n            year: instrument.expiryYear,\n        }).isValid;\n\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-cardType\">\n                <CreditCardIcon cardType={cardType} />\n\n                {cardInfo && (\n                    <span className=\"instrumentModal-instrumentCardType\">{cardInfo.niceType}</span>\n                )}\n            </td>\n            <td data-test=\"manage-instrument-last4\">{instrument.last4}</td>\n            <td\n                className={classNames({ 'instrumentModal-instrumentExpiry--expired': isExpired })}\n                data-test=\"manage-instrument-expiry\"\n            >\n                {`${instrument.expiryMonth}/${instrument.expiryYear}`}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageCardInstrumentsTable);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Alert, AlertType } from '../../ui/alert';\n\nexport interface ManageInstrumentsAlertProps {\n    error: any; // TODO: Fix typing\n}\n\nconst ManageInstrumentsAlert: FunctionComponent<ManageInstrumentsAlertProps> = ({ error }) => {\n    const { status } = error;\n\n    if (status === 401) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_auth_error\" />\n            </Alert>\n        );\n    }\n\n    if (status >= 400 && status < 500) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_client_error\" />\n            </Alert>\n        );\n    }\n\n    return (\n        <Alert type={AlertType.Error}>\n            <TranslatedString id=\"payment.instrument_manage_delete_server_error\" />\n        </Alert>\n    );\n};\n\nexport default memo(ManageInstrumentsAlert);\n","import { CheckoutSelectors, PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../../ui/button';\nimport { Modal, ModalHeader } from '../../ui/modal';\n\nimport isAccountInstrument from './isAccountInstrument';\nimport isBankAccountInstrument from './isBankAccountInstrument';\nimport isCardInstrument from './isCardInstrument';\nimport ManageAccountInstrumentsTable from './ManageAccountInstrumentsTable';\nimport ManageCardInstrumentsTable from './ManageCardInstrumentsTable';\nimport ManageInstrumentsAlert from './ManageInstrumentsAlert';\n\nexport interface ManageInstrumentsModalProps {\n    isOpen: boolean;\n    instruments: PaymentInstrument[];\n    onAfterOpen?(): void;\n    onDeleteInstrument?(instrumentId: string): void;\n    onDeleteInstrumentError?(error: Error): void;\n    onRequestClose?(): void;\n}\n\nexport interface ManageInstrumentsModalState {\n    isConfirmingDelete: boolean;\n    selectedInstrumentId?: string;\n}\n\ninterface WithCheckoutProps {\n    deleteInstrumentError?: Error;\n    isDeletingInstrument: boolean;\n    isLoadingInstruments: boolean;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    deleteInstrument(id: string): Promise<CheckoutSelectors>;\n}\n\nclass ManageInstrumentsModal extends Component<\n    ManageInstrumentsModalProps & WithCheckoutProps,\n    ManageInstrumentsModalState\n> {\n    state: ManageInstrumentsModalState = {\n        isConfirmingDelete: false,\n    };\n\n    render(): ReactNode {\n        const { deleteInstrumentError, isOpen, onRequestClose } = this.props;\n\n        return (\n            <Modal\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                footer={this.renderFooter()}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"payment.instrument_manage_modal_title_text\" />\n                    </ModalHeader>\n                }\n                isOpen={isOpen}\n                onAfterOpen={this.handleAfterOpen}\n                onRequestClose={onRequestClose}\n            >\n                {deleteInstrumentError && <ManageInstrumentsAlert error={deleteInstrumentError} />}\n\n                {this.renderContent()}\n            </Modal>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { instruments, isDeletingInstrument } = this.props;\n\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <p>\n                    <TranslatedString id=\"payment.instrument_manage_modal_confirmation_label\" />\n                </p>\n            );\n        }\n\n        const cardInstruments = instruments.filter(isCardInstrument);\n        const bankInstruments = instruments.filter(isBankAccountInstrument);\n        const accountInstruments = instruments.filter(isAccountInstrument);\n\n        const bankAndAccountInstruments = [...bankInstruments, ...accountInstruments];\n\n        if (bankAndAccountInstruments.length) {\n            return (\n                <ManageAccountInstrumentsTable\n                    instruments={bankAndAccountInstruments}\n                    isDeletingInstrument={isDeletingInstrument}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        return (\n            <ManageCardInstrumentsTable\n                instruments={cardInstruments}\n                isDeletingInstrument={isDeletingInstrument}\n                onDeleteInstrument={this.handleDeleteInstrument}\n            />\n        );\n    }\n\n    private renderFooter(): ReactNode {\n        const { isDeletingInstrument, isLoadingInstruments, onRequestClose } = this.props;\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <>\n                    <Button\n                        data-test=\"manage-instrument-cancel-button\"\n                        onClick={this.handleCancel}\n                        size={ButtonSize.Small}\n                    >\n                        <TranslatedString id=\"common.cancel_action\" />\n                    </Button>\n\n                    <Button\n                        data-test=\"manage-instrument-confirm-button\"\n                        disabled={isDeletingInstrument || isLoadingInstruments}\n                        onClick={this.handleConfirmDelete}\n                        size={ButtonSize.Small}\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"payment.instrument_manage_modal_confirmation_action\" />\n                    </Button>\n                </>\n            );\n        }\n\n        return (\n            <Button\n                data-test=\"manage-instrument-close-button\"\n                onClick={onRequestClose}\n                size={ButtonSize.Small}\n            >\n                <TranslatedString id=\"common.close_action\" />\n            </Button>\n        );\n    }\n\n    private handleAfterOpen: () => void = () => {\n        const { onAfterOpen } = this.props;\n\n        this.setState(\n            {\n                isConfirmingDelete: false,\n            },\n            onAfterOpen,\n        );\n    };\n\n    private handleCancel: () => void = () => {\n        const { clearError, deleteInstrumentError } = this.props;\n\n        if (deleteInstrumentError) {\n            clearError(deleteInstrumentError);\n        }\n\n        this.setState({\n            isConfirmingDelete: false,\n        });\n    };\n\n    private handleConfirmDelete: () => void = async () => {\n        const {\n            deleteInstrument,\n            onDeleteInstrument = noop,\n            onDeleteInstrumentError = noop,\n            onRequestClose = noop,\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (!selectedInstrumentId) {\n            return;\n        }\n\n        try {\n            await deleteInstrument(selectedInstrumentId);\n            onDeleteInstrument(selectedInstrumentId);\n            onRequestClose();\n        } catch (error) {\n            onDeleteInstrumentError(error);\n        }\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isConfirmingDelete: true,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport function mapFromCheckoutProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutProps | null {\n    const {\n        errors: { getDeleteInstrumentError },\n        statuses: { isDeletingInstrument, isLoadingInstruments },\n    } = checkoutState;\n\n    return {\n        clearError: checkoutService.clearError,\n        deleteInstrument: checkoutService.deleteInstrument,\n        deleteInstrumentError: getDeleteInstrumentError(),\n        isDeletingInstrument: isDeletingInstrument(),\n        isLoadingInstruments: isLoadingInstruments(),\n    };\n}\n\nexport default withCheckout(mapFromCheckoutProps)(ManageInstrumentsModal);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, ModalTriggerModalProps } from '../../ui/modal';\n\nimport InstrumentSelect from './InstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan'\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import { LineItemMap, PaymentInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport { UntrustedShippingCardVerificationType } from './CardInstrumentFieldset';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    if (PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider)) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!paymentMethod.config.isVaultingCvvEnabled;\n    }\n\n    // If the shipping address is untrusted, card verficiation mode has set with cvv, card code is required\n    if ('untrustedShippingCardVerificationMode' in instrument && instrument.untrustedShippingCardVerificationMode === UntrustedShippingCardVerificationType.CVV) {\n        return true;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(paymentMethod.config.isVaultingCvvEnabled || paymentMethod.config.cardCode);\n}\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { CheckoutSelectors, Instrument } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { Instrument, LineItemMap } from '@bigcommerce/checkout-sdk';\n\nimport { UntrustedShippingCardVerificationType } from './CardInstrumentFieldset';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    if (lineItems.physicalItems.length === 0) {\n        return false;\n    }\n\n    if (instrument.trustedShippingAddress) {\n        return false;\n    }  \n    \n    return !(instrument.untrustedShippingCardVerificationMode === UntrustedShippingCardVerificationType.CVV);\n}\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object().required().shape<HostedCreditCardValidationSchemaShape[\"hostedForm\"]>({\n            errors: object().required().shape<HostedCreditCardValidationSchemaShape[\"hostedForm\"][\"errors\"]>({\n                cardCode: string()\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_invalid_error'),\n                        test: (value) => value !== 'invalid_card_code',\n                    }),\n\n                cardExpiry: string()\n                    .test({\n                        message: language.translate(\n                            'payment.credit_card_expiration_required_error',\n                        ),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_expiration_invalid_error'),\n                        test: (value) => value !== 'invalid_card_expiry',\n                    }),\n\n                cardName: string()\n                    .test({\n                        message: language.translate('payment.credit_card_name_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_name_invalid_error'),\n                        test: (value) => value !== 'invalid_card_name',\n                    }),\n\n                cardNumber: string()\n                    .test({\n                        message: language.translate('payment.credit_card_number_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_invalid_error'),\n                        test: (value) => value !== 'invalid_card_number',\n                    }),\n            }),\n        }),\n    });\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object().required().shape<HostedInstrumentValidationSchemaShape[\"hostedForm\"]>({\n            errors: object().required().shape<HostedInstrumentValidationSchemaShape[\"hostedForm\"][\"errors\"]>({\n                cardCodeVerification: string()\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_invalid_error'),\n                        test: (value) => value !== 'invalid_card_code',\n                    }),\n\n                cardNumberVerification: string()\n                    .test({\n                        message: language.translate('payment.credit_card_number_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_invalid_error'),\n                        test: (value) => value !== 'invalid_card_number',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_mismatch_error'),\n                        test: (value) => value !== 'mismatched_card_number',\n                    }),\n\n            ...(isCardExpiryRequired ? {\n                cardExpiryVerification: string()\n                    .test({\n                        message: language.translate(\n                            'payment.credit_card_expiration_required_error',\n                        ),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_expiration_invalid_error'),\n                        test: (value) => value !== 'invalid_card_expiry',\n                    }),\n            } : {})\n            }),\n        }),\n    });\n});\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconLock: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconLock);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","\nimport { Placement } from '@popperjs/core';\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children: ReactNode;\n}\n\nexport interface TooltipTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\n    static defaultProps = {\n        placement: 'bottom',\n    };\n\n    state: Readonly<TooltipTriggerState> = {\n        shouldShow: false,\n    };\n\n    render() {\n        const { children, placement, tooltip } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <span\n                            onBlur={this.handleHide}\n                            onFocus={this.handleShow}\n                            onMouseEnter={this.handleShow}\n                            onMouseLeave={this.handleHide}\n                            ref={ref}\n                        >\n                            {children}\n                        </span>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={[\n                        { name: 'hide', enabled: false },\n                        { name: 'flip', enabled: false },\n                        { name: 'preventOverflow', enabled: false },\n                    ]}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        shouldShow && (\n                            <div ref={ref} style={style}>\n                                {tooltip}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: true });\n    };\n\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: false });\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeVisa: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV visa, mc, disc</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <path d=\"M0 5h88v12H0z\" fill=\"#838383\" />\n            <path d=\"M3 23h82v10H3z\" fill=\"#FFF\" />\n            <path\n                d=\"M69.81 29.053c.015.297.13.502.343.616.11.058.233.088.37.088.258 0 .477-.107.66-.32.18-.215.31-.65.384-1.306-.12.19-.267.322-.444.4-.176.076-.366.114-.57.114-.412 0-.74-.13-.98-.386-.24-.257-.36-.588-.36-.993 0-.388.12-.73.357-1.025.237-.295.587-.443 1.05-.443.623 0 1.054.28 1.29.842.133.31.2.696.2 1.16 0 .525-.08.99-.238 1.394-.26.674-.703 1.01-1.327 1.01-.42 0-.737-.11-.954-.328-.217-.22-.325-.494-.325-.825h.544zm1.4-1.09c.176-.14.265-.387.265-.737 0-.315-.08-.55-.238-.705-.16-.153-.36-.23-.606-.23-.262 0-.47.088-.625.264-.155.177-.232.412-.232.707 0 .28.068.502.203.667.136.164.352.246.65.246.213 0 .408-.07.584-.21zm3.414-.563c.133-.132.2-.29.2-.474 0-.16-.064-.306-.19-.44-.13-.133-.323-.2-.585-.2-.26 0-.447.067-.563.2-.115.134-.173.29-.173.47 0 .202.075.36.224.473.15.112.326.17.53.17.237 0 .422-.067.556-.2zm.097 2.118c.165-.135.247-.336.247-.603 0-.277-.084-.487-.254-.63-.17-.144-.386-.216-.652-.216-.256 0-.466.072-.628.22-.163.145-.244.348-.244.607 0 .223.074.416.223.58.15.16.38.243.69.243.25 0 .456-.068.62-.202zm-1.735-1.937c-.158-.158-.236-.365-.236-.62 0-.32.114-.594.345-.823.232-.23.56-.344.984-.344.41 0 .732.108.965.325.233.216.35.47.35.758 0 .267-.068.483-.203.65-.076.092-.194.184-.353.274.176.08.316.175.418.28.19.2.284.46.284.778 0 .377-.127.697-.38.96-.253.26-.61.392-1.074.392-.416 0-.77-.113-1.057-.34-.287-.226-.43-.554-.43-.985 0-.253.06-.472.184-.656.124-.186.307-.327.55-.424-.15-.064-.265-.14-.35-.225zm5.614-1.42c.188.248.282.503.282.766h-.532c-.032-.17-.083-.302-.153-.397-.13-.18-.326-.27-.59-.27-.3 0-.54.14-.717.417-.177.278-.276.676-.296 1.194.124-.18.28-.316.467-.405.172-.08.364-.12.575-.12.36 0 .672.115.94.344.266.228.4.57.4 1.025 0 .388-.127.733-.38 1.033-.253.3-.614.45-1.083.45-.4 0-.746-.152-1.037-.456-.29-.304-.437-.816-.437-1.536 0-.532.065-.983.194-1.354.25-.71.705-1.065 1.367-1.065.478 0 .81.124 1 .372zm-.404 3.274c.14-.19.21-.415.21-.674 0-.22-.062-.43-.188-.627-.126-.198-.354-.297-.685-.297-.23 0-.434.076-.608.23-.175.153-.262.385-.262.694 0 .27.08.498.238.683.16.184.38.277.66.277.283 0 .495-.096.636-.286z\"\n                fill=\"#636363\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"19\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeVisa);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeAmex: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV amex</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <text\n                fill=\"#979BA1\"\n                fontFamily=\"Avenir Next\"\n                fontSize=\"6\"\n                fontWeight=\"420\"\n                letterSpacing=\".2\"\n            >\n                <tspan x=\"11\" y=\"35\">\n                    3712 567890 374\n                </tspan>\n                <tspan x=\"70.21\" y=\"35\">\n                    5\n                </tspan>\n            </text>\n            <path\n                d=\"M69.182 26.767h-.55v-3.35l-.762.635-.324-.38 1.142-.926h.494v4.02zm4.19 0H70.75v-.528l1.6-1.59c.122-.126.226-.257.313-.393s.13-.29.13-.46c0-.106-.018-.202-.056-.287-.038-.085-.09-.158-.153-.22-.065-.06-.14-.106-.228-.138-.087-.032-.18-.048-.278-.048-.204 0-.373.065-.505.196-.133.13-.216.298-.25.503l-.54-.09c.023-.153.07-.294.145-.424.074-.132.168-.246.28-.342.115-.097.246-.17.396-.224.15-.053.31-.08.48-.08.166 0 .326.025.48.074.153.05.288.12.406.216.117.094.21.214.28.357.07.145.106.31.106.496 0 .128-.017.248-.05.357-.035.11-.082.214-.14.313-.06.098-.128.192-.208.28-.08.09-.162.178-.25.265l-1.306 1.273h1.97v.494zm1.625-2.328h.176c.114 0 .225-.012.333-.033.107-.02.203-.056.286-.107.084-.052.15-.12.202-.208.05-.087.077-.195.077-.323 0-.104-.018-.196-.056-.277-.038-.08-.09-.15-.156-.207-.067-.057-.142-.102-.227-.134-.085-.032-.175-.048-.27-.048-.17 0-.314.044-.434.13-.12.088-.21.21-.27.364l-.5-.176c.1-.242.257-.433.475-.57.22-.14.47-.208.753-.208.167 0 .325.024.475.07.15.048.28.117.394.208.114.09.204.205.27.34.066.137.1.294.1.472 0 .114-.018.22-.054.318-.036.1-.086.188-.148.267-.063.08-.137.147-.224.204-.087.057-.182.098-.284.125v.01c.117.023.226.063.326.12.1.056.187.127.26.212.07.086.127.183.17.293.04.11.06.23.06.358 0 .2-.036.377-.112.53-.076.154-.176.282-.3.384-.126.102-.27.18-.433.233-.163.053-.33.08-.5.08-.318 0-.598-.073-.84-.216-.242-.144-.418-.368-.528-.67l.51-.17c.06.173.165.315.31.425.146.11.325.164.537.164.102 0 .202-.016.298-.05.097-.03.183-.08.26-.143.074-.064.135-.143.18-.238.046-.095.07-.206.07-.335 0-.14-.032-.257-.092-.352-.06-.095-.14-.17-.236-.23-.097-.06-.205-.1-.327-.125-.12-.025-.24-.037-.357-.037h-.17v-.454zm4.73.953h.58v.47h-.58v.904h-.533v-.903h-1.85v-.5l1.708-2.618h.676v2.647zm-.533-2.016h-.01l-1.273 2.016h1.284v-2.016z\"\n                fill=\"#636363\"\n                opacity=\".9\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"16\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeAmex);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconCardCodeAmex, IconCardCodeVisa, IconSize } from '../../ui/icon';\n\nimport './CreditCardCodeTooltip.scss';\n\nconst CreditCardCodeTooltip: FunctionComponent = () => (\n    <div className=\"dropdown-menu dropdown-menu--content dropdown-menu--card-code\">\n        <div className=\"form-ccFields-cvvExample\">\n            <div className=\"form-ccFields-cvvExampleDescription\">\n                <p>\n                    <TranslatedString id=\"payment.credit_card_cvv_help_text\" />\n                </p>\n            </div>\n\n            <div className=\"form-ccFields-cvvExampleFigures\">\n                <figure>\n                    <IconCardCodeVisa size={IconSize.Large} />\n                </figure>\n\n                <figure>\n                    <IconCardCodeAmex size={IconSize.Large} />\n                </figure>\n            </div>\n        </div>\n    </div>\n);\n\nexport default CreditCardCodeTooltip;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\nimport { IconHelp, IconLock } from '../../ui/icon';\nimport { TooltipTrigger } from '../../ui/tooltip';\nimport { CreditCardCodeTooltip } from '../creditCard';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\nimport { IconLock } from '../../ui/icon';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport HostedCreditCardCodeField from './HostedCreditCardCodeField';\nimport HostedCreditCardExpiryField from './HostedCreditCardExpiryField';\nimport HostedCreditCardNameField from './HostedCreditCardNameField';\nimport HostedCreditCardNumberField from './HostedCreditCardNumberField';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {cardNameId && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport HostedCreditCardCodeField from './HostedCreditCardCodeField';\nimport HostedCreditCardExpiryField from \"./HostedCreditCardExpiryField\";\nimport HostedCreditCardNumberField from './HostedCreditCardNumberField';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n","import {\n    CardInstrument,\n    Instrument,\n    LegacyHostedFormOptions,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { ComponentType, FunctionComponent, ReactNode, useCallback, useState } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n} from '../creditCard';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\n\nimport getHostedCreditCardValidationSchema, {\n    HostedCreditCardValidationSchemaShape,\n} from './getHostedCreditCardValidationSchema';\nimport getHostedInstrumentValidationSchema, {\n    HostedInstrumentValidationSchemaShape,\n} from './getHostedInstrumentValidationSchema';\nimport HostedCreditCardFieldset from './HostedCreditCardFieldset';\nimport HostedCreditCardValidation from './HostedCreditCardValidation';\n\nexport interface WithHostedCreditCardFieldsetProps {\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n}\n\nexport interface WithInjectedHostedCreditCardFieldsetProps {\n    hostedFieldset: ReactNode;\n    hostedStoredCardValidationSchema: ObjectSchema<HostedInstrumentValidationSchemaShape>;\n    hostedValidationSchema: ObjectSchema<HostedCreditCardValidationSchemaShape>;\n    getHostedFormOptions(selectedInstrument?: CardInstrument): Promise<LegacyHostedFormOptions>;\n    getHostedStoredCardValidationFieldset(selectedInstrument?: CardInstrument): ReactNode;\n}\n\ninterface WithCheckoutContextProps {\n    isCardCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n}\n\nexport default function withHostedCreditCardFieldset<\n    TProps extends WithHostedCreditCardFieldsetProps,\n>(\n    OriginalComponent: ComponentType<TProps & Partial<WithInjectedHostedCreditCardFieldsetProps>>,\n): ComponentType<Omit<TProps, keyof WithInjectedHostedCreditCardFieldsetProps>> {\n    const Component: FunctionComponent<\n        WithHostedCreditCardFieldsetProps &\n            WithCheckoutContextProps &\n            WithLanguageProps &\n            WithFormProps &\n            ConnectFormikProps<PaymentFormValues>\n    > = ({\n        formik: { setFieldValue, setFieldTouched, submitForm },\n        isCardCodeRequired,\n        isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n        isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        isSubmitted,\n        language,\n        method,\n        setSubmitted,\n        ...rest\n    }) => {\n        const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n        const getHostedFieldId: (name: string) => string = useCallback(\n            (name) => {\n                return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n            },\n            [method],\n        );\n\n        const getHostedFormOptions: (\n            selectedInstrument?: CardInstrument,\n        ) => Promise<LegacyHostedFormOptions> = useCallback(\n            async (selectedInstrument) => {\n                const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n                const styleContainerId = selectedInstrument\n                    ? isInstrumentCardCodeRequired\n                        ? getHostedFieldId('ccCvv')\n                        : undefined\n                    : getHostedFieldId('ccNumber');\n\n                return {\n                    fields: selectedInstrument\n                        ? {\n                              cardCodeVerification:\n                                  isInstrumentCardCodeRequired && selectedInstrument\n                                      ? {\n                                            accessibilityLabel: language.translate(\n                                                'payment.credit_card_cvv_label',\n                                            ),\n                                            containerId: getHostedFieldId('ccCvv'),\n                                            instrumentId: selectedInstrument.bigpayToken,\n                                        }\n                                      : undefined,\n                              cardNumberVerification:\n                                  isInstrumentCardNumberRequired && selectedInstrument\n                                      ? {\n                                            accessibilityLabel: language.translate(\n                                                'payment.credit_card_number_label',\n                                            ),\n                                            containerId: getHostedFieldId('ccNumber'),\n                                            instrumentId: selectedInstrument.bigpayToken,\n                                        }\n                                      : undefined,\n                          }\n                        : {\n                              cardCode: isCardCodeRequired\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                    }\n                                  : undefined,\n                              cardExpiry: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_expiration_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccExpiry'),\n                                  placeholder: language.translate(\n                                      'payment.credit_card_expiration_placeholder_text',\n                                  ),\n                              },\n                              cardName: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_name_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccName'),\n                              },\n                              cardNumber: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_number_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccNumber'),\n                              },\n                          },\n                    styles: styleContainerId\n                        ? {\n                              default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                              error: await getCreditCardInputStyles(\n                                  styleContainerId,\n                                  styleProps,\n                                  CreditCardInputStylesType.Error,\n                              ),\n                              focus: await getCreditCardInputStyles(\n                                  styleContainerId,\n                                  styleProps,\n                                  CreditCardInputStylesType.Focus,\n                              ),\n                          }\n                        : {},\n                    onBlur: ({ fieldType }) => {\n                        if (focusedFieldType === fieldType) {\n                            setFocusedFieldType(undefined);\n                        }\n                    },\n                    onCardTypeChange: ({ cardType }) => {\n                        setFieldValue('hostedForm.cardType', cardType);\n                    },\n                    onEnter: () => {\n                        setSubmitted(true);\n                        submitForm();\n                    },\n                    onFocus: ({ fieldType }) => {\n                        setFocusedFieldType(fieldType);\n                    },\n                    onValidate: ({ errors = {} }) => {\n                        forIn(errors, (fieldErrors = [], fieldType) => {\n                            const errorKey = `hostedForm.errors.${fieldType}`;\n\n                            setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                            if (fieldErrors[0]) {\n                                setFieldTouched(errorKey);\n                            }\n                        });\n                    },\n                };\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isCardCodeRequired,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                language,\n                method,\n                setFieldValue,\n                setFieldTouched,\n                setFocusedFieldType,\n                setSubmitted,\n                submitForm,\n            ],\n        );\n\n        const getHostedStoredCardValidationFieldset: (\n            selectedInstrument: CardInstrument,\n        ) => ReactNode = useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n        if (!method.config.isHostedFormEnabled) {\n            return <OriginalComponent {...(rest as TProps)} method={method} />;\n        }\n\n        return (\n            <OriginalComponent\n                {...(rest as TProps)}\n                getHostedFormOptions={getHostedFormOptions}\n                getHostedStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                hostedFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                hostedStoredCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n                hostedValidationSchema={getHostedCreditCardValidationSchema({ language })}\n                method={method}\n            />\n        );\n    };\n\n    return connectFormik(\n        withForm(withLanguage(withCheckout(mapFromCheckoutProps)(Component))),\n    ) as ComponentType<Omit<TProps, keyof WithInjectedHostedCreditCardFieldsetProps>>;\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutContextProps,\n    WithHostedCreditCardFieldsetProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    return ({ checkoutState }, { method }) => {\n        const {\n            data: { getConfig, getCustomer },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer) {\n            return null;\n        }\n\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            paymentMethod: method,\n        });\n\n        return {\n            method,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        };\n    };\n};\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconHelp, IconLock } from '../../ui/icon';\nimport { TooltipTrigger } from '../../ui/tooltip';\n\nimport CreditCardCodeTooltip from './CreditCardCodeTooltip';\n\nexport interface CreditCardCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCodeField: FunctionComponent<CreditCardCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-csc\"\n                    id={field.name}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardCodeField);\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport React, { ChangeEvent, FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nimport formatCreditCardExpiryDate from './formatCreditCardExpiryDate';\n\nexport interface CreditCardExpiryFieldProps {\n    name: string;\n}\n\nconst CreditCardExpiryField: FunctionComponent<CreditCardExpiryFieldProps & WithLanguageProps> = ({\n    language,\n    name,\n}) => {\n    const handleChange = useCallback(\n        memoizeOne((field: FieldProps['field'], form: FieldProps['form']) => {\n            return (event: ChangeEvent<any>) => {\n                form.setFieldValue(field.name, formatCreditCardExpiryDate(event.target.value));\n            };\n        }),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps) => (\n            <TextInput\n                {...field}\n                autoComplete=\"cc-exp\"\n                id={field.name}\n                onChange={handleChange(field, form)}\n                placeholder={language.translate('payment.credit_card_expiration_placeholder_text')}\n                type=\"tel\"\n            />\n        ),\n        [handleChange, language],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_expiration_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(withLanguage(CreditCardExpiryField));\n","export default function formatCreditCardExpiryDate(value: string): string {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n    const trimmedMonth = month.slice(0, 2);\n    const trimmedYear =\n        year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n    // i.e.: '1'\n    if (value.length < 2) {\n        return month;\n    }\n\n    // ie.: '10 /' (without trailing space)\n    if (value.length > 3 && !trimmedYear) {\n        return trimmedMonth;\n    }\n\n    return `${trimmedMonth} / ${trimmedYear}`;\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardNameFieldProps {\n    name: string;\n}\n\nconst CreditCardNameField: FunctionComponent<CreditCardNameFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"cc-name\" id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_name_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNameField);\n","import creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { max } from 'lodash';\nimport React, {\n    ChangeEventHandler,\n    FunctionComponent,\n    memo,\n    ReactElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconLock } from '../../ui/icon';\n\nimport formatCreditCardNumber from './formatCreditCardNumber';\n\nexport interface CreditCardNumberFieldProps {\n    name: string;\n}\n\nconst CreditCardNumberField: FunctionComponent<CreditCardNumberFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps<string>) => (\n            <CreditCardNumberInput field={field} form={form} />\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_number_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\ninterface CreditCardNumberInputProps {\n    field: FieldProps<string>['field'];\n    form: FieldProps<string>['form'];\n}\n\nconst CreditCardNumberInput: FunctionComponent<CreditCardNumberInputProps> = ({ field, form }): ReactElement => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const nextSelectionEndRef = useRef(0);\n\n    useEffect(() => {\n        if (inputRef.current && inputRef.current.selectionEnd !== nextSelectionEndRef.current) {\n            inputRef.current.setSelectionRange(nextSelectionEndRef.current, nextSelectionEndRef.current);\n        }\n    });\n\n    const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n        (event) => {\n            const separator = ' ';\n            const { value = '' } = event.target;\n            const { name, value: previousValue = '' } = field;\n            const selectionEnd = inputRef.current && inputRef.current.selectionEnd;\n\n            // Only allow digits and spaces\n            if (new RegExp(`[^\\\\d${separator}]`).test(value)) {\n                return form.setFieldValue(name, previousValue);\n            }\n\n            const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n\n            const formattedValue = formatCreditCardNumber(\n                value.replace(new RegExp(separator, 'g'), '').slice(0, maxLength),\n                separator,\n            );\n\n            if (selectionEnd === value.length && value.length < formattedValue.length) {\n                nextSelectionEndRef.current = formattedValue.length;\n            } else {\n                nextSelectionEndRef.current = selectionEnd || 0;\n            }\n\n            void form.setFieldValue(name, formattedValue);\n        },\n        [field, form],\n    );\n\n    return (\n        <>\n            <TextInput\n                {...field}\n                additionalClassName=\"has-icon\"\n                autoComplete=\"cc-number\"\n                id={field.name}\n                onChange={handleChange}\n                ref={inputRef}\n                type=\"tel\"\n            />\n\n            <IconLock />\n        </>\n    );\n};\n\nexport default memo(CreditCardNumberField);\n","import { number } from 'card-validator';\n\nimport unformatCreditCardNumber from './unformatCreditCardNumber';\n\nexport default function formatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    const unformattedValue = unformatCreditCardNumber(value, separator);\n\n    return card.gaps\n        .filter((gapIndex) => unformattedValue.length > gapIndex)\n        .reduce(\n            (output, gapIndex, index) =>\n                [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(separator),\n            unformattedValue,\n        );\n}\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport CreditCardCodeField from './CreditCardCodeField';\nimport CreditCardCustomerCodeField from './CreditCardCustomerCodeField';\nimport CreditCardExpiryField from './CreditCardExpiryField';\nimport CreditCardNameField from './CreditCardNameField';\nimport CreditCardNumberField from './CreditCardNumberField';\n\nexport interface CreditCardFieldsetProps {\n    shouldShowCardCodeField?: boolean;\n    shouldShowCustomerCodeField?: boolean;\n    shouldShowSaveCardField?: boolean;\n}\n\nconst CreditCardFieldset: FunctionComponent<CreditCardFieldsetProps> = ({\n    shouldShowCardCodeField,\n    shouldShowCustomerCodeField,\n}) => (\n    <Fieldset\n        additionalClassName=\"creditCardFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <CreditCardNumberField name=\"ccNumber\" />\n\n            <CreditCardExpiryField name=\"ccExpiry\" />\n\n            <CreditCardNameField name=\"ccName\" />\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n\n            {shouldShowCustomerCodeField && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />}\n        </div>\n    </Fieldset>\n);\n\nexport default memo(CreditCardFieldset);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, expirationDate, number } from 'card-validator';\nimport { object, ObjectSchema, string } from 'yup';\n\nimport { CreditCardFieldsetValues } from '../paymentMethod';\n\nexport interface CreditCardValidationSchemaOptions {\n    isCardCodeRequired: boolean;\n    language: LanguageService;\n}\n\nexport default memoize(function getCreditCardValidationSchema({\n    isCardCodeRequired,\n    language,\n}: CreditCardValidationSchemaOptions): ObjectSchema<CreditCardFieldsetValues> {\n    const schema = {\n        ccCustomerCode: string(),\n        ccCvv: string(),\n        ccExpiry: string()\n            .required(language.translate('payment.credit_card_expiration_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_expiration_invalid_error'),\n                test: (value) => expirationDate(value).isValid,\n            }),\n        ccName: string()\n            .max(200)\n            .required(language.translate('payment.credit_card_name_required_error')),\n        ccNumber: string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value) => number(value).isValid,\n            }),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value) {\n                    const { card } = number(this.parent.ccNumber);\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    return object(schema);\n});\n","import React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CreditCardCodeField, CreditCardNumberField } from '../creditCard';\n\ninterface CreditCardValidationProps {\n    shouldShowCardCodeField: boolean;\n    shouldShowNumberField: boolean;\n}\n\nconst CreditCardValidation: React.FunctionComponent<CreditCardValidationProps> = ({\n    shouldShowNumberField,\n    shouldShowCardCodeField,\n}) => (\n    <>\n        {shouldShowNumberField && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {shouldShowNumberField && <CreditCardNumberField name=\"ccNumber\" />}\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n        </div>\n    </>\n);\n\nexport default CreditCardValidation;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, number } from 'card-validator';\nimport creditCardType from 'credit-card-type';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport CardInstrumentFieldsetValues from './CardInstrumentFieldsetValues';\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface InstrumentValidationSchemaOptions {\n    instrumentBrand: string;\n    instrumentLast4: string;\n    isCardCodeRequired: boolean;\n    isCardNumberRequired: boolean;\n    language: LanguageService;\n}\n\ninterface InstrumentValidationSchema {\n    ccCvv?: StringSchema;\n    ccNumber?: StringSchema;\n    instrumentId: StringSchema;\n}\n\nexport default memoize(function getInstrumentValidationSchema({\n    instrumentBrand,\n    instrumentLast4,\n    isCardCodeRequired,\n    isCardNumberRequired,\n    language,\n}: InstrumentValidationSchemaOptions): ObjectSchema<CardInstrumentFieldsetValues> {\n    const schema: InstrumentValidationSchema = {\n        instrumentId: string().required(),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value = '') {\n                    const cardType = mapFromInstrumentCardType(instrumentBrand);\n                    const cardInfo = creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined)\n                        .isValid;\n                },\n            });\n    }\n\n    if (isCardNumberRequired) {\n        schema.ccNumber = string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: language.translate('payment.credit_card_number_mismatch_error'),\n                test: (value = '') => value.slice(-instrumentLast4.length) === instrumentLast4,\n            });\n    }\n\n    return object(schema);\n});\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../../ui/form';\n\ninterface InstrumentStorageFieldProps {\n    isAccountInstrument: boolean;\n}\n\nconst InstrumentStorageField: FunctionComponent<InstrumentStorageFieldProps> = ({\n    isAccountInstrument,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_payment_method_label'\n        : 'payment.instrument_save_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--saveInstrument\"\n            labelContent={labelContent}\n            name=\"shouldSaveInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStorageField);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../../ui/form';\n\ninterface InstrumentStoreAsDefaultFieldProps {\n    isAccountInstrument: boolean;\n    disabled?: boolean;\n}\n\nconst InstrumentStoreAsDefaultField: FunctionComponent<InstrumentStoreAsDefaultFieldProps> = ({\n    isAccountInstrument,\n    disabled = false,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_as_default_payment_method_label'\n        : 'payment.instrument_save_as_default_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--setAsDefaultInstrument\"\n            disabled={disabled}\n            labelContent={labelContent}\n            name=\"shouldSetAsDefaultInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStoreAsDefaultField);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport InstrumentStorageField from './InstrumentStorageField';\nimport InstrumentStoreAsDefaultField from './InstrumentStoreAsDefaultField';\n\ninterface StoreInstrumentFieldsetProps {\n    isAccountInstrument?: boolean;\n    instrumentId?: string;\n}\n\ninterface WithStorageSettings {\n    showSave: boolean;\n    showSetAsDefault: boolean;\n    setAsDefaultEnabled: boolean;\n}\n\ntype WithFormValues = ConnectFormikProps<{ shouldSaveInstrument: boolean }>;\n\nconst StoreInstrumentFieldset: FunctionComponent<\n    StoreInstrumentFieldsetProps & WithStorageSettings\n> = ({ showSave, showSetAsDefault, isAccountInstrument = false, setAsDefaultEnabled }) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.instrument_storage_options_text\" />\n            </Legend>\n        }\n    >\n        {showSave && <InstrumentStorageField isAccountInstrument={isAccountInstrument} />}\n\n        {showSetAsDefault && (\n            <InstrumentStoreAsDefaultField\n                disabled={!setAsDefaultEnabled}\n                isAccountInstrument={isAccountInstrument}\n            />\n        )}\n    </Fieldset>\n);\n\nconst mapToProps = (\n    context: CheckoutContextProps,\n    props: StoreInstrumentFieldsetProps & WithFormValues,\n): WithStorageSettings | null => {\n    const {\n        checkoutState: {\n            data: { getInstruments },\n        },\n    } = context;\n\n    const allInstruments = getInstruments();\n\n    const {\n        formik: {\n            values: { shouldSaveInstrument: saveIsChecked },\n        },\n        instrumentId,\n    } = props;\n\n    const addingNewInstrument = !instrumentId;\n    const hasAnyOtherInstruments = !!allInstruments && allInstruments.length > 0;\n    const instrument =\n        allInstruments && allInstruments.find(({ bigpayToken }) => bigpayToken === instrumentId);\n\n    return {\n        ...props,\n        showSave: addingNewInstrument,\n        showSetAsDefault:\n            (addingNewInstrument && hasAnyOtherInstruments) ||\n            Boolean(instrument && !instrument.defaultInstrument),\n        setAsDefaultEnabled: !addingNewInstrument || saveIsChecked,\n    };\n};\n\nexport default connectFormik(withCheckout(mapToProps)(StoreInstrumentFieldset));\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    HostedFieldType,\n    Instrument,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport {\n    configureCardValidator,\n    CreditCardFieldset,\n    getCreditCardValidationSchema,\n} from '../creditCard';\nimport {\n    CardInstrumentFieldset,\n    CardInstrumentFieldsetValues,\n    CreditCardValidation,\n    getInstrumentValidationSchema,\n    isCardInstrument,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport CreditCardFieldsetValues from './CreditCardFieldsetValues';\n\nexport interface CreditCardPaymentMethodProps {\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    cardFieldset?: ReactNode;\n    cardValidationSchema?: ObjectSchema;\n    storedCardValidationSchema?: ObjectSchema;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    getStoredCardValidationFieldset?(selectedInstrument?: CardInstrument): ReactNode;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nexport type CreditCardPaymentMethodValues = CreditCardFieldsetValues | CardInstrumentFieldsetValues;\n\ninterface WithCheckoutCreditCardPaymentMethodProps {\n    instruments: CardInstrument[];\n    isCardCodeRequired: boolean;\n    isCustomerCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    shouldShowInstrumentFieldset: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\ninterface CreditCardPaymentMethodState {\n    focusedHostedFieldType?: HostedFieldType;\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n    isPreloaderOn: boolean;\n}\n\nclass CreditCardPaymentMethod extends Component<\n    CreditCardPaymentMethodProps &\n        WithCheckoutCreditCardPaymentMethodProps &\n        WithFormProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    CreditCardPaymentMethodState\n> {\n    state: CreditCardPaymentMethodState = {\n        isAddingNewCard: false,\n        isPreloaderOn: true,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n        configureCardValidator();\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await initializePayment(\n                {\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                },\n                this.getSelectedInstrument(),\n            ).then(() => this.setState({ isPreloaderOn: false }));\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        _prevProps: Readonly<CreditCardPaymentMethodProps>,\n        prevState: Readonly<CreditCardPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            initializePayment,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            isAddingNewCard !== prevState.isAddingNewCard\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                await initializePayment(\n                    {\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    },\n                    this.getSelectedInstrument(),\n                );\n\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            cardFieldset,\n            getStoredCardValidationFieldset,\n            instruments,\n            isInitializing,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldShowInstrumentFieldset,\n            method,\n        } = this.props;\n\n        const { isAddingNewCard, isPreloaderOn } = this.state;\n\n        const selectedInstrument = this.getSelectedInstrument();\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments || isPreloaderOn;\n        const shouldShowNumberField = selectedInstrument\n            ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n            : false;\n        const shouldShowCardCodeField = selectedInstrument\n            ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n            : false;\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--creditCard\" data-test='credit-cart-payment-method'>\n                    {shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            instruments={instruments}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={\n                                selectedInstrument && selectedInstrument.bigpayToken\n                            }\n                            validateInstrument={\n                                getStoredCardValidationFieldset ? (\n                                    getStoredCardValidationFieldset(selectedInstrument)\n                                ) : (\n                                    <CreditCardValidation\n                                        shouldShowCardCodeField={shouldShowCardCodeField}\n                                        shouldShowNumberField={shouldShowNumberField}\n                                    />\n                                )\n                            }\n                        />\n                    )}\n\n                    {shouldShowCreditCardFieldset && !cardFieldset && (\n                        <CreditCardFieldset\n                            shouldShowCardCodeField={\n                                method.config.cardCode || method.config.cardCode === null\n                            }\n                            shouldShowCustomerCodeField={method.config.requireCustomerCode}\n                        />\n                    )}\n\n                    {shouldShowCreditCardFieldset && cardFieldset}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getSelectedInstrument(): CardInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            cardValidationSchema,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            language,\n            method,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return (\n                storedCardValidationSchema ||\n                getInstrumentValidationSchema({\n                    instrumentBrand: selectedInstrument.brand,\n                    instrumentLast4: selectedInstrument.last4,\n                    isCardCodeRequired: isInstrumentCardCodeRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    isCardNumberRequired: isInstrumentCardNumberRequiredProp(selectedInstrument),\n                    language,\n                })\n            );\n        }\n\n        return (\n            cardValidationSchema ||\n            getCreditCardValidationSchema({\n                isCardCodeRequired: method.config.cardCode === true,\n                language,\n            })\n        );\n    }\n\n    private handleUseNewCard: () => void = () => {\n        const {\n            formik: { setFieldValue },\n        } = this.props;\n\n        setFieldValue('hostedForm.cardType', '');\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const {\n            formik: { setFieldValue },\n        } = this.props;\n\n        setFieldValue('hostedForm.cardType', '');\n\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const {\n            instruments,\n            formik: { setFieldValue },\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutCreditCardPaymentMethodProps,\n    CreditCardPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isCardInstrument),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: { getConfig, getCustomer, getInstruments, isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer || !method) {\n            return null;\n        }\n\n        const instruments = filterInstruments(getInstruments(method));\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            paymentMethod: method,\n        });\n\n        return {\n            instruments,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isCustomerCodeRequired: !!method.config.requireCustomerCode,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n            shouldShowInstrumentFieldset:\n                isInstrumentFeatureAvailableProp && instruments.length > 0,\n        };\n    };\n};\n\nexport default connectFormik(\n    withForm(\n        withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(CreditCardPaymentMethod))),\n    ),\n);\n","import { creditCardType } from 'card-validator';\n\nexport default function configureCardValidator(): void {\n    const discoverInfo = creditCardType.getTypeInfo('discover');\n    const visaInfo = creditCardType.getTypeInfo('visa');\n\n    // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n    creditCardType.updateCard('visa', {\n        lengths: [13, ...(visaInfo.lengths || [])],\n    });\n\n    // Add support for 8-BIN Discover Cards.\n    creditCardType.updateCard('discover', {\n        patterns: [...(discoverInfo.patterns || []), [810, 817]],\n    });\n\n    // Add support for Mada-BIN Cards.\n    creditCardType.addCard({\n        niceType: 'Mada',\n        type: 'mada',\n        patterns: [\n            400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817, 422818,\n            422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954, 440533, 440647,\n            440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865, 458456, 462220, 468540,\n            468541, 468542, 468543, 483010, 483011, 483012, 484783, 486094, 486095, 486096, 489317,\n            489318, 489319, 493428, 504300, 506968, 508160, 513213, 520058, 521076, 524130, 524514,\n            529415, 529741, 530060, 530906, 531095, 531196, 532013, 535825, 535989, 536023, 537767,\n            539931, 543085, 543357, 549760, 554180, 557606, 558848, 585265, 588845, 588846, 588847,\n            588848, 588849, 588850, 588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120,\n            968201, 968202, 968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n        ],\n        gaps: [4, 8, 12],\n        lengths: [16, 18, 19],\n        code: {\n            name: 'CVV',\n            size: 3,\n        },\n    });\n}\n","import { noop } from 'lodash';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Modal } from '../../ui/modal';\nimport {\n    withHostedCreditCardFieldset,\n    WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type BraintreeCreditCardPaymentMethodProps = CreditCardPaymentMethodProps;\n\ninterface BraintreeCreditCardPaymentMethodRef {\n    threeDSecureContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst BraintreeCreditCardPaymentMethod: FunctionComponent<\n    BraintreeCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const [threeDSecureContent, setThreeDSecureContent] = useState<HTMLElement>();\n    const ref = useRef<BraintreeCreditCardPaymentMethodRef>({\n        threeDSecureContentRef: createRef(),\n    });\n\n    const initializeBraintreePayment: BraintreeCreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    braintree: {\n                        threeDSecure: {\n                            addFrame(error, content, cancel) {\n                                if (error) {\n                                    return onUnhandledError(error);\n                                }\n\n                                setThreeDSecureContent(content);\n                                ref.current.cancelThreeDSecureVerification = cancel;\n                            },\n                            removeFrame() {\n                                setThreeDSecureContent(undefined);\n                                ref.current.cancelThreeDSecureVerification = undefined;\n                            },\n                        },\n                        form:\n                            getHostedFormOptions &&\n                            (await getHostedFormOptions(selectedInstrument)),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment, onUnhandledError],\n        );\n\n    const appendThreeDSecureContent = useCallback(() => {\n        if (ref.current.threeDSecureContentRef.current && threeDSecureContent) {\n            ref.current.threeDSecureContentRef.current.appendChild(threeDSecureContent);\n        }\n    }, [threeDSecureContent]);\n\n    const cancelThreeDSecureModalFlow = useCallback(() => {\n        setThreeDSecureContent(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n\n    return (\n        <>\n            <CreditCardPaymentMethod\n                {...rest}\n                cardFieldset={hostedFieldset}\n                cardValidationSchema={hostedValidationSchema}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeBraintreePayment}\n                onUnhandledError={onUnhandledError}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                isOpen={!!threeDSecureContent}\n                onAfterOpen={appendThreeDSecureContent}\n                onRequestClose={cancelThreeDSecureModalFlow}\n            >\n                <div ref={ref.current.threeDSecureContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default withHostedCreditCardFieldset(BraintreeCreditCardPaymentMethod);\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    withHostedCreditCardFieldset,\n    WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type HostedCreditCardPaymentMethodProps = Omit<\n    CreditCardPaymentMethodProps,\n    | 'cardFieldset'\n    | 'cardValidationSchema'\n    | 'storedCardValidationSchema'\n    | 'getStoredCardValidationFieldset'\n>;\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<\n    HostedCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    ...rest\n}) => {\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: getHostedFormOptions && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    return (\n        <CreditCardPaymentMethod\n            {...rest}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default withHostedCreditCardFieldset(HostedCreditCardPaymentMethod);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import { AccountInstrument, AchInstrument, BankInstrument, PayPalInstrument } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { IconNewAccount, IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument | AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default AccountInstrumentSelect;\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, ModalTriggerModalProps } from '../../ui/modal';\n\nimport AccountInstrumentSelect from './AccountInstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","import {\n    AccountInstrument,\n    CheckoutSelectors,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nexport interface HostedPaymentMethodProps {\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface WithCheckoutHostedPaymentMethodProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nclass HostedPaymentMethod extends Component<\n    HostedPaymentMethodProps &\n        WithCheckoutHostedPaymentMethodProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            description,\n            isInitializing = false,\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = this.props;\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n        const { instruments } = this.props;\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = this.props;\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutHostedPaymentMethodProps,\n    HostedPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n                isPaymentDataSubmitted,\n            },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const cart = getCart();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !cart || !customer || !method) {\n            return null;\n        }\n\n        const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n        const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n        return {\n            instruments: trustedInstruments,\n            isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n            isInstrumentFeatureAvailable:\n                !isPaymentDataSubmitted(method.id, method.gateway) &&\n                isInstrumentFeatureAvailable({\n                    config,\n                    customer,\n                    paymentMethod: method,\n                }),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n        };\n    };\n};\n\nexport default connectFormik(\n    withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(HostedPaymentMethod))),\n);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport getPaymentMethodName from './getPaymentMethodName';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps & WithLanguageProps> = ({\n    language,\n    method,\n    onSignOut,\n}) => (\n    <div className=\"signout-link\">\n        <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n        <a href=\"#\" onClick={preventDefault(onSignOut)}>\n            <TranslatedString\n                data={{ providerName: getPaymentMethodName(language)(method) }}\n                id=\"remote.sign_out_action\"\n            />\n        </a>{' '}\n        <TranslatedString id=\"remote.sign_out_after_action\" />\n    </div>\n);\n\nexport default withLanguage(SignOutLink);\n","import {\n    CheckoutSelectors,\n    CustomerRequestOptions,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport { noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport SignOutLink from './SignOutLink';\n\nexport interface WalletButtonPaymentMethodProps {\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutWalletButtonPaymentMethodProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentDataRequired: boolean;\n    isPaymentSelected: boolean;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nclass WalletButtonPaymentMethod extends Component<\n    WalletButtonPaymentMethodProps &\n        WithCheckoutWalletButtonPaymentMethodProps &\n        WithLanguageProps &\n        WithPaymentProps\n> {\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, disableSubmit, method, onUnhandledError = noop } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<\n            PaymentMethodProps &\n                WalletButtonPaymentMethodProps &\n                WithCheckoutWalletButtonPaymentMethodProps &\n                WithLanguageProps\n        >,\n    ): void {\n        const { method, isPaymentDataRequired } = this.props;\n        const { method: prevMethod, isPaymentDataRequired: prevIsPaymentDataRequired } = prevProps;\n\n        if (\n            method.initializationData !== prevMethod.initializationData ||\n            isPaymentDataRequired !== prevIsPaymentDataRequired\n        ) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const { isInitializing = false, isPaymentSelected } = this.props;\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    {isPaymentSelected ? this.renderPaymentView() : this.renderSignInView()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const { buttonId, language, signInButtonClassName, signInButtonLabel, method } = this.props;\n\n        return (\n            <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n                {signInButtonLabel || (\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_in_action\"\n                    />\n                )}\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const {\n            accountMask,\n            buttonId,\n            cardName,\n            cardType,\n            editButtonClassName,\n            editButtonLabel,\n            expiryMonth,\n            expiryYear,\n            shouldShowEditButton,\n            method,\n        } = this.props;\n\n        return (\n            <>\n                {cardName && (\n                    <p data-test=\"payment-method-wallet-card-name\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_name_label\" />:\n                        </strong>{' '}\n                        {cardName}\n                    </p>\n                )}\n\n                {accountMask && (\n                    <p data-test=\"payment-method-wallet-card-type\">\n                        <strong>{`${cardType}:`}</strong> {accountMask}\n                    </p>\n                )}\n\n                {expiryMonth && expiryYear && (\n                    <p data-test=\"payment-method-wallet-card-expiry\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                        </strong>{' '}\n                        {`${expiryMonth}/${expiryYear}`}\n                    </p>\n                )}\n\n                {shouldShowEditButton && (\n                    <p>\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    </p>\n                )}\n\n                <SignOutLink method={method} onSignOut={this.handleSignOut} />\n            </>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const { disableSubmit, method, isPaymentDataRequired } = this.props;\n\n        if (normalizeWalletPaymentData(method.initializationData) || !isPaymentDataRequired) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const { method, signOut, onSignOut = noop, onSignOutError = noop } = this.props;\n\n        try {\n            await signOut({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n}\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nfunction normalizeWalletPaymentData(data: any): WalletPaymentData | undefined {\n    if (!data) {\n        return;\n    }\n\n    if (data.card_information) {\n        return {\n            accountMask: formatAccountMask(data.card_information.number),\n            cardType: data.card_information.type,\n        };\n    }\n\n    if (data.cardData) {\n        return {\n            accountMask: formatAccountMask(data.cardData.accountMask),\n            cardType: data.cardData.cardType,\n            expiryMonth: data.cardData.expMonth,\n            expiryYear: data.cardData.expYear,\n        };\n    }\n\n    if (data.accountNum) {\n        const { card } = number(data.accountNum);\n\n        return {\n            accountMask: formatAccountMask(data.accountMask),\n            expiryMonth: data.expDate && `${data.expDate}`.substr(0, 2),\n            expiryYear: data.expDate && `${data.expDate}`.substr(2, 2),\n            cardType: card ? card.niceType : '',\n        };\n    }\n}\n\nfunction formatAccountMask(accountMask = '', padding = '****'): string {\n    return accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n}\n\nfunction mapFromCheckoutProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: WalletButtonPaymentMethodProps,\n): WithCheckoutWalletButtonPaymentMethodProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n    } = checkoutState;\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        return null;\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n    return {\n        ...walletPaymentData,\n        // FIXME: I'm not sure how this would work for non-English names.\n        cardName:\n            walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        signOut: checkoutService.signOutCustomer,\n    };\n}\n\nexport default withLanguage(\n    withPayment(withCheckout(mapFromCheckoutProps)(WalletButtonPaymentMethod)),\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { Omit } from 'utility-types';\n\nimport { masterpassFormatLocale, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nimport WalletButtonPaymentMethod, {\n    WalletButtonPaymentMethodProps,\n} from './WalletButtonPaymentMethod';\n\nexport type MasterpassPaymentMethodProps = Omit<WalletButtonPaymentMethodProps, 'buttonId'>;\n\ninterface WithCheckoutMasterpassProps {\n    storeLanguage: string;\n}\n\nconst MasterpassPaymentMethod: FunctionComponent<\n    MasterpassPaymentMethodProps & WithLanguageProps & WithCheckoutMasterpassProps\n> = ({ initializePayment, language, storeLanguage, ...rest }) => {\n    const initializeMasterpassPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            initializePayment({\n                ...options,\n                masterpass: {\n                    walletButton: 'walletButton',\n                },\n            }),\n        [initializePayment],\n    );\n\n    const {\n        config: { testMode },\n        initializationData: { checkoutId, isMasterpassSrcEnabled },\n    } = rest.method;\n\n    const locale = masterpassFormatLocale(storeLanguage);\n\n    const signInButtonLabel = useMemo(\n        () => (\n            <img\n                alt={language.translate('payment.masterpass_name_text')}\n                id=\"mpbutton\"\n                src={\n                    isMasterpassSrcEnabled\n                        ? `https://${\n                              testMode ? 'sandbox.' : ''\n                          }src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg?locale=${locale}&paymentmethod=master,visa,amex,discover&checkoutid=${checkoutId}`\n                        : `https://masterpass.com/dyn/img/btn/global/mp_chk_btn_126x030px.svg`\n                }\n            />\n        ),\n        [checkoutId, language, locale, testMode, isMasterpassSrcEnabled],\n    );\n\n    return (\n        <WalletButtonPaymentMethod\n            {...rest}\n            buttonId=\"walletButton\"\n            initializePayment={initializeMasterpassPayment}\n            signInButtonLabel={signInButtonLabel}\n        />\n    );\n};\n\nfunction mapFromCheckoutProps({ checkoutState }: CheckoutContextProps) {\n    const {\n        data: { getConfig },\n    } = checkoutState;\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        storeLanguage: config.storeProfile.storeLanguage,\n    };\n}\n\nexport default withCheckout(mapFromCheckoutProps)(withLanguage(MasterpassPaymentMethod));\n","export default function masterpassFormatLocale(localeLanguage: string): string {\n    return localeLanguage.replace('-', '_').toLowerCase();\n}\n","enum PaymentMethodProviderType {\n    Api = 'PAYMENT_TYPE_API',\n    Hosted = 'PAYMENT_TYPE_HOSTED',\n    Offline = 'PAYMENT_TYPE_OFFLINE',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n}\n\nexport default PaymentMethodProviderType;\n","import React, { FunctionComponent } from 'react';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { EMPTY_ARRAY } from '../../common/utility';\n\nimport HostedCreditCardPaymentMethod, {\n    HostedCreditCardPaymentMethodProps,\n} from './HostedCreditCardPaymentMethod';\nimport HostedPaymentMethod, { HostedPaymentMethodProps } from './HostedPaymentMethod';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\n\nexport type PaypalPaymentsProPaymentMethodProps =\n    | HostedPaymentMethodProps\n    | HostedCreditCardPaymentMethodProps;\n\ninterface WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    isHostedPayment: boolean;\n}\n\n/**\n * Paypal Payments Pro is a snowflake payment method - it can be a hosted\n * payment method or a credit card payment method depending on where the\n * checkout process is initiated. If it is started from the cart page via the\n * PayPal button, it behaves as a hosted payment method. But if it is started\n * from the checkout page, it behaves as a credit card payment method.\n */\nconst PaypalPaymentsProPaymentMethod: FunctionComponent<\n    PaypalPaymentsProPaymentMethodProps & WithCheckoutPaypalPaymentsProPaymentMethodProps\n> = ({ isHostedPayment, ...props }) => {\n    if (isHostedPayment) {\n        return <HostedPaymentMethod {...props} />;\n    }\n\n    return <HostedCreditCardPaymentMethod {...props} />;\n};\n\nfunction mapToPaypalPaymentsProPaymentMethodProps(\n    { checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    const {\n        data: { getCheckout },\n    } = checkoutState;\n    const { payments = EMPTY_ARRAY } = getCheckout() || {};\n    const selectedHostedMethod = payments.find(\n        ({ providerType }) => providerType === PaymentMethodProviderType.Hosted,\n    );\n\n    return {\n        isHostedPayment: selectedHostedMethod\n            ? selectedHostedMethod.providerId === method.id &&\n              selectedHostedMethod.gatewayId === method.gateway\n            : false,\n    };\n}\n\nexport default withCheckout(mapToPaypalPaymentsProPaymentMethodProps)(\n    PaypalPaymentsProPaymentMethod,\n);\n","import { CheckoutService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport { useCallback, useMemo } from 'react';\n\ntype CheckoutServiceInstance = InstanceType<typeof CheckoutService>;\n\ninterface Props {\n    method: PaymentMethod;\n    deinitializePayment: CheckoutServiceInstance['deinitializePayment'];\n    initializePayment: CheckoutServiceInstance['initializePayment'];\n    onUnhandledError?(error: Error): void;\n}\n\nexport const usePropsToOnMount = (props: Props): (() => () => void) => {\n    const { initializePayment, deinitializePayment, method, onUnhandledError = noop } = props;\n\n    const options = useMemo(\n        () => ({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        }),\n        [method.gateway, method.id],\n    );\n\n    const onInit = useCallback(() => initializePayment(options), [initializePayment, options]);\n    const onDeinit = useCallback(\n        () => deinitializePayment(options),\n        [deinitializePayment, options],\n    );\n\n    return useCallback(() => {\n        onInit().catch(onUnhandledError);\n\n        return () => {\n            onDeinit().catch(onUnhandledError);\n        };\n    }, [onInit, onUnhandledError, onDeinit]);\n};\n","import React, { FunctionComponent, useEffect } from 'react';\n\ninterface Props {\n    onMount(): () => void;\n    children?: React.ReactNode;\n}\n\nexport const Wrapper: FunctionComponent<Props> = (props) => {\n    const { children, onMount } = props;\n\n    useEffect(onMount, [onMount]);\n\n    return <>{children}</>;\n};\n","import { ComponentType } from 'react';\n\nimport HostedCreditCardPaymentMethod from '../HostedCreditCardPaymentMethod';\n\nimport { NoUI } from './NoUI';\n\ntype ComponentMap = Record<string, ComponentType<any>>;\n\nexport const initializationComponentMap: ComponentMap = {\n    card_ui: HostedCreditCardPaymentMethod,\n    none: NoUI,\n};\n","import React from 'react';\n\nimport { Props } from './PPSDKPaymentMethod';\nimport { usePropsToOnMount } from './usePropsToOnMount';\nimport { Wrapper } from './Wrapper';\n\nexport const NoUI = (props: Props) => {\n    const onMount = usePropsToOnMount(props);\n\n    return <Wrapper onMount={onMount} />;\n};\n","import { CheckoutService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent } from 'react';\n\nimport { initializationComponentMap } from './initializationComponentMap';\n\ntype CheckoutServiceInstance = InstanceType<typeof CheckoutService>;\n\nexport interface Props {\n    method: PaymentMethod;\n    deinitializePayment: CheckoutServiceInstance['deinitializePayment'];\n    initializePayment: CheckoutServiceInstance['initializePayment'];\n    onUnhandledError?(error: Error): void;\n}\n\nexport const PPSDKPaymentMethod: FunctionComponent<Props> = (props) => {\n    const { method, onUnhandledError = noop } = props;\n\n    const componentKey = method.initializationStrategy?.type || '';\n    const Component = initializationComponentMap[componentKey];\n\n    if (!Component) {\n        onUnhandledError(new Error('PPSDK initialization strategy not found'));\n\n        return null;\n    }\n\n    return <Component {...props} />;\n};\n","import {\n    CheckoutSelectors,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nimport BraintreeCreditCardPaymentMethod from './BraintreeCreditCardPaymentMethod';\nimport HostedCreditCardPaymentMethod from './HostedCreditCardPaymentMethod';\nimport HostedPaymentMethod from './HostedPaymentMethod';\nimport MasterpassPaymentMethod from './MasterpassPaymentMethod';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\nimport PaymentMethodType from './PaymentMethodType';\nimport PaypalPaymentsProPaymentMethod from './PaypalPaymentsProPaymentMethod';\nimport PPSDKPaymentMethod from './PPSDKPaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError?(error: Error): void;\n    submitForm?(): void;\n}\n\nexport interface WithCheckoutPaymentMethodProps {\n    isInitializing: boolean;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n}\n\n/**\n * If possible, try to avoid having components that are specific to a specific\n * payment provider or method. Instead, try to generalise the requirements and\n * use components that can are reusable for multiple payment methods. i.e.:\n * CreditCardPaymentMethod, HostedPaymentMethod etc... If it is really necessary\n * for a particular payment method, you may write a method-specific component for\n * the purpose of configuring a general-purpose component in order to fulfill\n * its specific product or technical requirements.\n */\nconst PaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & WithCheckoutPaymentMethodProps\n> = (props) => {\n    const { method } = props;\n\n    if (method.type === PaymentMethodProviderType.PPSDK) {\n        return <PPSDKPaymentMethod {...props} />;\n    }\n\n    if (method.id === PaymentMethodId.Masterpass) {\n        return <MasterpassPaymentMethod {...props} />;\n    }\n\n    if (method.id === PaymentMethodId.Braintree) {\n        return <BraintreeCreditCardPaymentMethod {...props} />;\n    }\n\n    if (\n        method.type !== PaymentMethodProviderType.Hosted &&\n        method.id === PaymentMethodId.PaypalPaymentsPro\n    ) {\n        return <PaypalPaymentsProPaymentMethod {...props} />;\n    }\n\n\n    if (\n        method.id === PaymentMethodId.BraintreeVenmo ||\n        method.id === PaymentMethodId.Humm ||\n        method.id === PaymentMethodId.Laybuy ||\n        method.id === PaymentMethodId.Quadpay ||\n        method.id === PaymentMethodId.Sezzle ||\n        method.id === PaymentMethodId.Zip ||\n        method.method === PaymentMethodType.Paypal ||\n        method.method === PaymentMethodType.PaypalCredit ||\n        method.type === PaymentMethodProviderType.Hosted\n    ) {\n        return <HostedPaymentMethod {...props} />;\n    }\n\n    // NOTE: Some payment methods have `method` as `credit-card` but they are\n    // actually not. Therefore, as a workaround, we are doing the following\n    // check last.\n    if (\n        method.method === PaymentMethodType.CreditCard ||\n        method.type === PaymentMethodProviderType.Api\n    ) {\n        return <HostedCreditCardPaymentMethod {...props} />;\n    }\n\n    return null;\n};\n\nfunction mapToWithCheckoutPaymentMethodProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaymentMethodProps {\n    const {\n        statuses: { isInitializingPayment },\n    } = checkoutState;\n\n    return {\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        deinitializePayment: checkoutService.deinitializePayment,\n        initializeCustomer: checkoutService.initializeCustomer,\n        initializePayment: checkoutService.initializePayment,\n        isInitializing: isInitializingPayment(method.id),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutPaymentMethodProps)(memo(PaymentMethodComponent));\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { ComponentType } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormProvider,\n    PaymentFormValues,\n    PaymentMethodResolveId,\n    PaymentMethodProps as ResolvedPaymentMethodProps,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout, WithCheckoutProps } from '../../checkout';\nimport { connectFormik, WithFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport createPaymentFormService from '../createPaymentFormService';\nimport resolvePaymentMethod from '../resolvePaymentMethod';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport { default as PaymentMethodV1 } from './PaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    resolveComponent?(\n        query: PaymentMethodResolveId,\n    ): ComponentType<ResolvedPaymentMethodProps> | undefined;\n    onUnhandledError(error: Error): void;\n}\n\nconst PaymentMethodContainer: ComponentType<\n    PaymentMethodProps &\n        WithCheckoutProps &\n        WithLanguageProps &\n        WithPaymentProps &\n        WithFormProps &\n        WithFormikProps<PaymentFormValues>\n> = ({\n    formik: formikContext,\n    checkoutService,\n    checkoutState,\n    disableSubmit,\n    hidePaymentSubmitButton,\n    isEmbedded,\n    isSubmitted,\n    isUsingMultiShipping,\n    language,\n    method,\n    onUnhandledError,\n    resolveComponent = resolvePaymentMethod,\n    setSubmit,\n    setSubmitted,\n    setValidationSchema,\n}) => {\n    const formContext = {\n        isSubmitted,\n        setSubmitted,\n    };\n\n    const paymentContext = {\n        disableSubmit,\n        hidePaymentSubmitButton,\n        setSubmit,\n        setValidationSchema,\n    };\n\n    const ResolvedPaymentMethod = resolveComponent({\n        id: method.id,\n        gateway: method.gateway,\n        type: method.type,\n    });\n\n    if (!ResolvedPaymentMethod) {\n        return (\n            <PaymentMethodV1\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    const paymentForm = createPaymentFormService(formikContext, formContext, paymentContext);\n\n    return (\n        <PaymentFormProvider paymentForm={paymentForm}>\n            <ResolvedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                language={language}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                paymentForm={paymentForm}\n            />\n        </PaymentFormProvider>\n    );\n};\n\nexport default withCheckout((props) => props)(\n    withLanguage(withPayment(withForm(connectFormik(PaymentMethodContainer)))),\n) as ComponentType<PaymentMethodProps>;\n","import { FormikContextType } from 'formik';\n\nimport {\n    PaymentFormService,\n    PaymentFormValues,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContextType } from '@bigcommerce/checkout/ui';\n\nimport { PaymentContextProps } from './PaymentContext';\n\nexport default function createPaymentFormService(\n    formikContext: FormikContextType<PaymentFormValues>,\n    formContext: FormContextType,\n    paymentContext: PaymentContextProps,\n): PaymentFormService {\n    const {\n        setFieldTouched,\n        setFieldValue,\n        submitForm,\n        validateForm,\n        values,\n    } = formikContext;\n\n    const { isSubmitted, setSubmitted } = formContext;\n\n    const { disableSubmit, setSubmit, setValidationSchema, hidePaymentSubmitButton } =\n        paymentContext;\n\n    const getFieldValue = <T>(key: string): T | unknown => values[key];\n\n    return {\n        disableSubmit,\n        getFieldValue,\n        getFormValues: () => values,\n        hidePaymentSubmitButton,\n        isSubmitted: () => isSubmitted,\n        setFieldTouched: setFieldTouched as PaymentFormService['setFieldTouched'],\n        setFieldValue: setFieldValue as PaymentFormService['setFieldValue'],\n        setSubmit,\n        setSubmitted,\n        setValidationSchema,\n        submitForm,\n        validateForm,\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find, get, noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { isMobile } from '../../common/utility';\nimport { Checklist, ChecklistItem, CustomChecklistItem } from '../../ui/form';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport getUniquePaymentMethodId, { parseUniquePaymentMethodId } from './getUniquePaymentMethodId';\nimport PaymentMethodTitle, { getPaymentMethodTitle } from './PaymentMethodTitle';\nimport PaymentMethodV2 from './PaymentMethodV2';\n\nexport interface PaymentMethodListProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    onSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n}\n\nfunction getPaymentMethodFromListValue(methods: PaymentMethod[], value: string): PaymentMethod {\n    const { gatewayId: gateway, methodId: id } = parseUniquePaymentMethodId(value);\n    const method = gateway ? find(methods, { gateway, id }) : find(methods, { id });\n\n    if (!method) {\n        throw new Error(`Unable to find payment method with id: ${id}`);\n    }\n\n    return method;\n}\n\nconst PaymentMethodList: FunctionComponent<\n    PaymentMethodListProps & ConnectFormikProps<{ paymentProviderRadio?: string }>\n> = ({\n    formik: { values },\n    isEmbedded,\n    isInitializingPayment,\n    isUsingMultiShipping,\n    methods,\n    onSelect = noop,\n    onUnhandledError,\n}) => {\n    const { language } = useLocale();\n    const {\n        checkoutState: {\n            data: { getConfig }\n        }\n    } = useCheckout();\n\n    const config = getConfig();\n\n    const titleText = useMemo(() => {\n        if (config && values.paymentProviderRadio) {\n            const checkoutSettings = config.checkoutSettings;\n            const cdnBasePath = config.cdnPath;\n            const storeCountryCode = config.storeProfile.storeCountryCode;\n            const paymentMethod = getPaymentMethodFromListValue(methods, values.paymentProviderRadio);\n            const methodName = getPaymentMethodName(language)(paymentMethod);\n            const { titleText } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(paymentMethod);\n\n            return titleText || methodName;\n        }\n\n        return '';\n    }, [config, values.paymentProviderRadio])\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelect(getPaymentMethodFromListValue(methods, value));\n        },\n        [methods, onSelect],\n    );\n\n    return (\n        <>\n            <div aria-live=\"assertive\" className='is-srOnly' role=\"status\">{titleText}</div>\n            <Checklist\n                defaultSelectedItemId={values.paymentProviderRadio}\n                isDisabled={isInitializingPayment}\n                name=\"paymentProviderRadio\"\n                onSelect={handleSelect}\n            >\n                {methods.map((method) => {\n                    const value = getUniquePaymentMethodId(method.id, method.gateway);\n                    const showOnlyOnMobileDevices = get(\n                        method,\n                        'initializationData.showOnlyOnMobileDevices',\n                        false,\n                    );\n\n                    if (showOnlyOnMobileDevices && !isMobile()) {\n                        return;\n                    }\n\n                    return (\n                        <PaymentMethodListItem\n                            isDisabled={isInitializingPayment}\n                            isEmbedded={isEmbedded}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            key={value}\n                            method={method}\n                            onUnhandledError={onUnhandledError}\n                            value={value}\n                        />\n                    );\n                })}\n            </Checklist>\n        </>\n    );\n};\n\ninterface PaymentMethodListItemProps {\n    isDisabled?: boolean;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    value: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentMethodListItem: FunctionComponent<PaymentMethodListItemProps> = ({\n    isDisabled,\n    isEmbedded,\n    isUsingMultiShipping,\n    method,\n    onUnhandledError,\n    value,\n}) => {\n    const renderPaymentMethod = useMemo(() => {\n        return (\n            <PaymentMethodV2\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError || noop}\n            />\n        );\n    }, [isEmbedded, isUsingMultiShipping, method, onUnhandledError]);\n\n    const renderPaymentMethodTitle = useCallback(\n        (isSelected: boolean) => <PaymentMethodTitle isSelected={isSelected} method={method} onUnhandledError={onUnhandledError} />,\n        [method],\n    );\n\n    if (method.initializationData?.isCustomChecklistItem) {\n        return (\n            <CustomChecklistItem\n                content={renderPaymentMethod}\n                htmlId={`radio-${value}`}\n            />\n        );\n    }\n\n    return (\n        <ChecklistItem\n            content={renderPaymentMethod}\n            htmlId={`radio-${value}`}\n            isDisabled={isDisabled}\n            label={renderPaymentMethodTitle}\n            value={value}\n        />\n    );\n};\n\nexport default connectFormik(memo(PaymentMethodList));\n","export default function isMobile(): boolean {\n    return /Android|iPhone|iPad|iPod/i.test(window.navigator.userAgent);\n}\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { mapToRedeemableProps, Redeemable, RedeemableProps } from '../cart';\nimport { withCheckout } from '../checkout';\nimport { Fieldset, Legend } from '../ui/form';\n\nconst PaymentRedeemables: FunctionComponent<RedeemableProps> = (redeemableProps) => (\n    <Fieldset \n        additionalClassName=\"redeemable-payments\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.redeemable_payments_text\" />\n            </Legend>\n        }\n    >\n        <Redeemable {...redeemableProps} showAppliedRedeemables={true} />\n    </Fieldset>\n);\n\nexport default withCheckout(mapToRedeemableProps)(memo(PaymentRedeemables));\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { withCheckout } from '../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { IconBolt } from '../ui/icon';\n\nimport { PaymentMethodId, PaymentMethodType } from './paymentMethod';\n\ninterface PaymentSubmitButtonTextProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodType?: string;\n    methodName?: string;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\nconst providersWithCustomClasses = [PaymentMethodId.Bolt];\n\nconst PaymentSubmitButtonText: FunctionComponent<PaymentSubmitButtonTextProps> = memo(\n    ({\n        methodId,\n        methodName,\n        methodType,\n        methodGateway,\n        initialisationStrategyType,\n        brandName,\n        isComplete,\n        isPaymentDataRequired,\n    }) => {\n        if (!isPaymentDataRequired) {\n            return <TranslatedString id=\"payment.place_order_action\" />;\n        }\n\n        if (methodName && initialisationStrategyType === 'none') {\n            return <TranslatedString data={{ methodName }} id=\"payment.ppsdk_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.AmazonPay) {\n            return <TranslatedString id=\"payment.amazonpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Bolt) {\n            return (\n                <>\n                    <IconBolt additionalClassName=\"payment-submit-button-bolt-icon\" />\n                    <TranslatedString id=\"payment.place_order_action\" />\n                </>\n            );\n        }\n\n        if (methodGateway === PaymentMethodId.Barclaycard) {\n            return <TranslatedString id=\"payment.barclaycard_continue_action\" />;\n        }\n\n        if (methodGateway === PaymentMethodId.BlueSnapV2) {\n            return <TranslatedString id=\"payment.bluesnap_v2_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.VisaCheckout) {\n            return <TranslatedString id=\"payment.visa_checkout_continue_action\" />;\n        }\n\n        if (\n            methodType === PaymentMethodType.PaypalVenmo ||\n            methodId === PaymentMethodId.BraintreeVenmo\n        ) {\n            return <TranslatedString id=\"payment.paypal_venmo_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.Paypal) {\n            const continueActionId = methodId === PaymentMethodId.PaypalCommerce\n                ? 'payment.place_order_action'\n                : 'payment.paypal_continue_action';\n\n            return <TranslatedString\n                data={{ isComplete }}\n                id={isComplete ? 'payment.paypal_complete_action' : continueActionId}\n            />;\n        }\n\n        if (methodType === PaymentMethodType.PaypalCredit) {\n            const continueTranslationId = brandName\n                ? 'payment.continue_with_brand'\n                : 'payment.paypal_pay_later_continue_action'\n            const completeTranslationId = brandName\n                ? 'payment.complete_with_brand'\n                : 'payment.paypal_pay_later_complete_action'\n\n            return (\n                <TranslatedString\n                    data={{ brandName, isComplete, continueTranslationId, completeTranslationId }}\n                    id={\n                        isComplete\n                            ? completeTranslationId\n                            : continueTranslationId\n                    }\n                />\n            );\n        }\n\n        if (methodId === PaymentMethodId.Quadpay) {\n            return <TranslatedString id=\"payment.quadpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Zip) {\n            return <TranslatedString id=\"payment.zip_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Klarna) {\n            return <TranslatedString id=\"payment.klarna_continue_action\" />;\n        }\n\n        return <TranslatedString id=\"payment.place_order_action\" />;\n    },\n);\n\nexport interface PaymentSubmitButtonProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodName?: string;\n    methodType?: string;\n    isDisabled?: boolean;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\ninterface WithCheckoutPaymentSubmitButtonProps {\n    isInitializing?: boolean;\n    isSubmitting?: boolean;\n}\n\nconst PaymentSubmitButton: FunctionComponent<\n    PaymentSubmitButtonProps & WithCheckoutPaymentSubmitButtonProps\n> = ({\n    isDisabled,\n    isInitializing,\n    isSubmitting,\n    isPaymentDataRequired,\n    methodGateway,\n    methodId,\n    methodName,\n    methodType,\n    initialisationStrategyType,\n    brandName,\n    isComplete,\n}) => (\n    <Button\n        className={\n            providersWithCustomClasses.includes(methodId as PaymentMethodId)\n                ? `payment-submit-button-${methodId}`\n                : undefined\n        }\n        data-test=\"payment-submit-button\"\n        disabled={isInitializing || isSubmitting || isDisabled}\n        id=\"checkout-payment-continue\"\n        isFullWidth\n        isLoading={isSubmitting}\n        size={ButtonSize.Large}\n        type=\"submit\"\n        variant={ButtonVariant.Action}\n    >\n        <PaymentSubmitButtonText\n            brandName={brandName}\n            initialisationStrategyType={initialisationStrategyType}\n            isComplete={isComplete}\n            isPaymentDataRequired={isPaymentDataRequired}\n            methodGateway={methodGateway}\n            methodId={methodId}\n            methodName={methodName}\n            methodType={methodType}\n        />\n    </Button>\n);\n\nexport default withCheckout(({ checkoutState }) => {\n    const {\n        data: { isPaymentDataRequired },\n        statuses: { isInitializingCustomer, isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    return {\n        isInitializing: isInitializingCustomer() || isInitializingPayment(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isSubmitting: isSubmittingOrder(),\n    };\n})(memo(PaymentSubmitButton));\n","import { CheckoutSelectors } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, MouseEvent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../checkout';\nimport { isErrorWithType } from '../common/error';\n\nexport interface SpamProtectionProps {\n    didExceedSpamLimit?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface SpamProtectionState {\n    shouldShowRetryButton: boolean;\n}\n\ninterface WithCheckoutSpamProtectionProps {\n    isExecutingSpamCheck: boolean;\n    executeSpamCheck(): Promise<CheckoutSelectors>;\n}\n\nfunction mapToSpamProtectionProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutSpamProtectionProps {\n    return {\n        isExecutingSpamCheck: checkoutState.statuses.isExecutingSpamCheck(),\n        executeSpamCheck: checkoutService.executeSpamCheck,\n    };\n}\n\nclass SpamProtectionField extends Component<\n    SpamProtectionProps & WithCheckoutSpamProtectionProps,\n    SpamProtectionState\n> {\n    state = {\n        shouldShowRetryButton: false,\n    };\n\n    async componentDidMount() {\n        const { didExceedSpamLimit } = this.props;\n\n        if (didExceedSpamLimit) {\n            return;\n        }\n\n        this.verify();\n    }\n\n    render() {\n        const { isExecutingSpamCheck } = this.props;\n\n        return (\n            <div className=\"spamProtection-container\">\n                <LoadingOverlay isLoading={isExecutingSpamCheck}>\n                    {this.renderContent()}\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { didExceedSpamLimit } = this.props;\n        const { shouldShowRetryButton } = this.state;\n\n        if (!didExceedSpamLimit && !shouldShowRetryButton) {\n            return;\n        }\n\n        return (\n            <div className=\"spamProtection-panel optimizedCheckout-overlay\">\n                <a\n                    className=\"spamProtection-panel-message optimizedCheckout-primaryContent\"\n                    data-test=\"spam-protection-verify-button\"\n                    onClick={this.handleRetry}\n                >\n                    <TranslatedString id=\"spam_protection.verify_action\" />\n                </a>\n            </div>\n        );\n    }\n\n    private async verify(): Promise<void> {\n        const { executeSpamCheck, onUnhandledError = noop } = this.props;\n\n        try {\n            await executeSpamCheck();\n        } catch (error) {\n            this.setState({ shouldShowRetryButton: true });\n\n            // Notify the parent component if the user experiences a problem other than cancelling the reCaptcha challenge.\n            if (\n                isErrorWithType(error) &&\n                error.type !== 'spam_protection_challenge_not_completed'\n            ) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    private handleRetry: (event: MouseEvent) => void = (event) => {\n        event.preventDefault();\n\n        this.verify();\n    };\n}\n\nexport default withCheckout(mapToSpamProtectionProps)(SpamProtectionField);\n","import { noop } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withCurrency, WithCurrencyProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { CheckboxInput } from '../../ui/form';\nimport { Tooltip, TooltipTrigger } from '../../ui/tooltip';\n\nexport interface StoreCreditFieldProps {\n    availableStoreCredit: number;\n    name: string;\n    usableStoreCredit: number;\n    isStoreCreditApplied: boolean;\n    onChange?(value: boolean): void;\n}\n\nconst StoreCreditField: FunctionComponent<StoreCreditFieldProps & WithCurrencyProps> = ({\n    availableStoreCredit,\n    currency,\n    name,\n    onChange = noop,\n    usableStoreCredit,\n    isStoreCreditApplied,\n}) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n\n    const handleChange = useCallback((event: any) => onChange(event.target.checked), [onChange]);\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"redeemable.apply_store_credit_before_action\" />{' '}\n                <TooltipTrigger\n                    placement=\"top-start\"\n                    tooltip={\n                        <Tooltip testId=\"payment-store-credit-tooltip\">\n                            <TranslatedString\n                                data={{\n                                    storeCredit: currency.toCustomerCurrency(availableStoreCredit),\n                                }}\n                                id=\"redeemable.store_credit_available_text\"\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <a href=\"#\" onClick={preventDefault()}>\n                        {currency.toCustomerCurrency(usableStoreCredit)}\n                    </a>\n                </TooltipTrigger>{' '}\n                <TranslatedString id=\"redeemable.apply_store_credit_after_action\" />\n            </>\n        ),\n        [availableStoreCredit, currency, usableStoreCredit],\n    );\n\n    return (\n        <CheckboxInput\n            checked={isStoreCreditApplied}\n            disabled={isSubmittingOrder()}\n            id={name}\n            label={labelContent}\n            name={name}\n            onChange={handleChange}\n            value={name}\n        />\n    );\n};\n\nexport default withCurrency(StoreCreditField);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst StoreCreditOverlay: FunctionComponent = () => (\n    <div className=\"storeCreditOverlay\" data-test=\"payment-store-credit-overlay\">\n        <p className=\"storeCreditOverlay-text\">\n            <TranslatedString id=\"payment.payment_not_required_text\" />\n        </p>\n    </div>\n);\n\nexport default StoreCreditOverlay;\n","import { ExtensionRegion, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, FormikState, withFormik, WithFormikConfig } from 'formik';\nimport { isNil, noop, omitBy } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useContext, useMemo } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { TermsConditions } from '../termsConditions';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getPaymentValidationSchema from './getPaymentValidationSchema';\nimport {\n    getPaymentMethodName,\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodList,\n} from './paymentMethod';\nimport PaymentRedeemables from './PaymentRedeemables';\nimport PaymentSubmitButton from './PaymentSubmitButton';\nimport SpamProtectionField from './SpamProtectionField';\nimport { StoreCreditField, StoreCreditOverlay } from './storeCredit';\n\nexport interface PaymentFormProps {\n    availableStoreCredit?: number;\n    defaultGatewayId?: string;\n    defaultMethodId: string;\n    didExceedSpamLimit?: boolean;\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isTermsConditionsRequired?: boolean;\n    isUsingMultiShipping?: boolean;\n    isStoreCreditApplied: boolean;\n    methods: PaymentMethod[];\n    selectedMethod?: PaymentMethod;\n    shouldShowStoreCredit?: boolean;\n    shouldDisableSubmit?: boolean;\n    shouldHidePaymentSubmitButton?: boolean;\n    shouldExecuteSpamCheck?: boolean;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit?: number;\n    validationSchema?: ObjectSchema<Partial<PaymentFormValues>>;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onStoreCreditChange?(useStoreCredit?: boolean): void;\n    onSubmit?(values: PaymentFormValues): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentForm: FunctionComponent<\n    PaymentFormProps & FormikProps<PaymentFormValues> & WithLanguageProps\n> = ({\n    availableStoreCredit = 0,\n    didExceedSpamLimit,\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isTermsConditionsRequired,\n    isStoreCreditApplied,\n    isUsingMultiShipping,\n    language,\n    methods,\n    onMethodSelect,\n    onStoreCreditChange,\n    onUnhandledError,\n    resetForm,\n    selectedMethod,\n    shouldDisableSubmit,\n    shouldHidePaymentSubmitButton,\n    shouldExecuteSpamCheck,\n    termsConditionsText = '',\n    termsConditionsUrl,\n    usableStoreCredit = 0,\n    values,\n}) => {\n    const selectedMethodId = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        switch (selectedMethod.id) {\n            case PaymentMethodId.AmazonPay:\n                if (selectedMethod.initializationData.paymentToken) {\n                    return;\n                }\n\n                return selectedMethod.id;\n\n            default:\n                return selectedMethod.id;\n        }\n    }, [selectedMethod]);\n\n    const brandName = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        return (\n            selectedMethod.initializationData?.payPalCreditProductBrandName?.credit ||\n            selectedMethod.initializationData?.payPalCreditProductBrandName\n        );\n    }, [selectedMethod]);\n\n    if (shouldExecuteSpamCheck) {\n        return (\n            <SpamProtectionField\n                didExceedSpamLimit={didExceedSpamLimit}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    return (\n        <Form className=\"checkout-form\" testId=\"payment-form\">\n            {usableStoreCredit > 0 && (\n                <StoreCreditField\n                    availableStoreCredit={availableStoreCredit}\n                    isStoreCreditApplied={isStoreCreditApplied}\n                    name=\"useStoreCredit\"\n                    onChange={onStoreCreditChange}\n                    usableStoreCredit={usableStoreCredit}\n                />\n            )}\n\n            <PaymentMethodListFieldset\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isPaymentDataRequired={isPaymentDataRequired}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onMethodSelect={onMethodSelect}\n                onUnhandledError={onUnhandledError}\n                resetForm={resetForm}\n                values={values}\n            />\n\n            <PaymentRedeemables />\n\n            {isTermsConditionsRequired && (\n                <TermsConditions\n                    termsConditionsText={termsConditionsText}\n                    termsConditionsUrl={termsConditionsUrl}\n                />\n            )}\n\n            <div className=\"form-actions\">\n                {shouldHidePaymentSubmitButton ? (\n                    <PaymentMethodSubmitButtonContainer />\n                ) : (\n                    <PaymentSubmitButton\n                        brandName={brandName}\n                        initialisationStrategyType={\n                            selectedMethod && selectedMethod.initializationStrategy?.type\n                        }\n                        isComplete={!!selectedMethod?.initializationData?.isComplete}\n                        isDisabled={shouldDisableSubmit}\n                        methodGateway={selectedMethod && selectedMethod.gateway}\n                        methodId={selectedMethodId}\n                        methodName={\n                            selectedMethod && getPaymentMethodName(language)(selectedMethod)\n                        }\n                        methodType={selectedMethod && selectedMethod.method}\n                    />\n                )}\n            </div>\n        </Form>\n    );\n};\n\nconst PaymentMethodSubmitButtonContainer: FunctionComponent = () => {\n    return <div className=\"submitButtonContainer\" id=\"checkout-payment-continue\" />;\n};\n\ninterface PaymentMethodListFieldsetProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    values: PaymentFormValues;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n    resetForm(nextValues?: Partial<FormikState<PaymentFormValues>>): void;\n}\n\nconst PaymentMethodListFieldset: FunctionComponent<PaymentMethodListFieldsetProps> = ({\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isUsingMultiShipping,\n    methods,\n    onMethodSelect = noop,\n    onUnhandledError,\n    resetForm,\n    values,\n}) => {\n    const { setSubmitted } = useContext(FormContext);\n\n    const handlePaymentMethodSelect = useCallback(\n        (method: PaymentMethod) => {\n            const updatedValues = {\n                ...values,\n                ccCustomerCode: '',\n                ccCvv: '',\n                ccDocument: '',\n                customerEmail: '',\n                customerMobile: '',\n                ccExpiry: '',\n                ccName: '',\n                ccNumber: '',\n                instrumentId: '',\n                paymentProviderRadio: getUniquePaymentMethodId(method.id, method.gateway),\n                shouldCreateAccount: true,\n                shouldSaveInstrument: false,\n            };\n\n            resetForm({ values: updatedValues });\n            setSubmitted(false);\n            onMethodSelect(method);\n        },\n        [values, onMethodSelect, resetForm, setSubmitted],\n    );\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.payment_methods_text\" />\n                </Legend>\n            }\n        >\n            {!isPaymentDataRequired() && <StoreCreditOverlay />}\n\n            <Extension region={ExtensionRegion.PaymentPaymentMethodListBefore}/>\n\n            <PaymentMethodList\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onSelect={handlePaymentMethodSelect}\n                onUnhandledError={onUnhandledError}\n            />\n        </Fieldset>\n    );\n};\n\nconst paymentFormConfig: WithFormikConfig<PaymentFormProps & WithLanguageProps, PaymentFormValues> =\n    {\n        mapPropsToValues: ({ defaultGatewayId, defaultMethodId }) => ({\n            ccCustomerCode: '',\n            ccCvv: '',\n            ccDocument: '',\n            customerEmail: '',\n            customerMobile: '',\n            ccExpiry: '',\n            ccName: '',\n            ccNumber: '',\n            paymentProviderRadio: getUniquePaymentMethodId(defaultMethodId, defaultGatewayId),\n            instrumentId: '',\n            shouldCreateAccount: true,\n            shouldSaveInstrument: false,\n            terms: false,\n            hostedForm: {\n                cardType: '',\n                errors: {\n                    cardCode: '',\n                    cardCodeVerification: '',\n                    cardExpiry: '',\n                    cardName: '',\n                    cardNumber: '',\n                    cardNumberVerification: '',\n                },\n            },\n            accountNumber: '',\n            routingNumber: '',\n        }),\n\n        handleSubmit: (values, { props: { onSubmit = noop } }) => {\n            onSubmit(\n                omitBy(\n                    values,\n                    (value, key) => isNil(value) || value === '' || key === 'hostedForm',\n                ),\n            );\n        },\n\n        validationSchema: ({\n            language,\n            isTermsConditionsRequired = false,\n            validationSchema,\n        }: PaymentFormProps & WithLanguageProps) =>\n            getPaymentValidationSchema({\n                additionalValidation: validationSchema,\n                isTermsConditionsRequired,\n                language,\n            }),\n    };\n\nexport default withLanguage(withFormik(paymentFormConfig)(memo(PaymentForm)));\n","import {\n    CartChangedError,\n    CheckoutSelectors,\n    CheckoutService,\n    CheckoutSettings,\n    OrderRequestBody,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { compact, find, isEmpty, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { ErrorLogger } from '@bigcommerce/checkout/error-handling-utils';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { withAnalytics } from '../analytics';\nimport { withCheckout } from '../checkout';\nimport {\n    ErrorModal,\n    ErrorModalOnCloseProps,\n    isCartChangedError,\n    isErrorWithType,\n} from '../common/error';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TermsConditionsType } from '../termsConditions';\n\nimport mapSubmitOrderErrorMessage, { mapSubmitOrderErrorTitle } from './mapSubmitOrderErrorMessage';\nimport mapToOrderRequestBody from './mapToOrderRequestBody';\nimport PaymentContext from './PaymentContext';\nimport PaymentForm from './PaymentForm';\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodProviderType,\n} from './paymentMethod';\n\nexport interface PaymentProps {\n    errorLogger: ErrorLogger;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void; // TODO: We're currently doing this check in multiple places, perhaps we should move it up so this check get be done in a single place instead.\n    onCartChangedError?(error: CartChangedError): void;\n    onFinalize?(): void;\n    onFinalizeError?(error: Error): void;\n    onReady?(): void;\n    onSubmit?(): void;\n    onSubmitError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutPaymentProps {\n    availableStoreCredit: number;\n    cartUrl: string;\n    defaultMethod?: PaymentMethod;\n    finalizeOrderError?: Error;\n    isInitializingPayment: boolean;\n    isSubmittingOrder: boolean;\n    isStoreCreditApplied: boolean;\n    isTermsConditionsRequired: boolean;\n    methods: PaymentMethod[];\n    shouldExecuteSpamCheck: boolean;\n    shouldLocaliseErrorMessages: boolean;\n    submitOrderError?: Error;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit: number;\n    applyStoreCredit(useStoreCredit: boolean): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n    finalizeOrderIfNeeded(): Promise<CheckoutSelectors>;\n    isPaymentDataRequired(): boolean;\n    loadCheckout(): Promise<CheckoutSelectors>;\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\n    submitOrder(values: OrderRequestBody): Promise<CheckoutSelectors>;\n    checkoutServiceSubscribe: CheckoutService['subscribe'];\n}\n\ninterface PaymentState {\n    didExceedSpamLimit: boolean;\n    isReady: boolean;\n    selectedMethod?: PaymentMethod;\n    shouldDisableSubmit: { [key: string]: boolean };\n    shouldHidePaymentSubmitButton: { [key: string]: boolean };\n    submitFunctions: { [key: string]: ((values: PaymentFormValues) => void) | null };\n    validationSchemas: { [key: string]: ObjectSchema<Partial<PaymentFormValues>> | null };\n}\n\nclass Payment extends Component<\n    PaymentProps & WithCheckoutPaymentProps & WithLanguageProps & AnalyticsContextProps,\n    PaymentState\n> {\n    state: PaymentState = {\n        didExceedSpamLimit: false,\n        isReady: false,\n        shouldDisableSubmit: {},\n        shouldHidePaymentSubmitButton: {},\n        validationSchemas: {},\n        submitFunctions: {},\n    };\n\n    private grandTotalChangeUnsubscribe?: () => void;\n\n    private getContextValue = memoizeOne(() => {\n        return {\n            disableSubmit: this.disableSubmit,\n            setSubmit: this.setSubmit,\n            setValidationSchema: this.setValidationSchema,\n            hidePaymentSubmitButton: this.hidePaymentSubmitButton,\n        };\n    });\n\n    async componentDidMount(): Promise<void> {\n        const {\n            finalizeOrderIfNeeded,\n            onFinalize = noop,\n            onFinalizeError = noop,\n            onReady = noop,\n            usableStoreCredit,\n            checkoutServiceSubscribe,\n        } = this.props;\n\n        if (usableStoreCredit) {\n            this.handleStoreCreditChange(true);\n        }\n\n        await this.loadPaymentMethodsOrThrow();\n\n        try {\n            const state = await finalizeOrderIfNeeded();\n            const order = state.data.getOrder();\n\n            onFinalize(order?.orderId);\n        } catch (error) {\n            if (isErrorWithType(error) && error.type !== 'order_finalization_not_required') {\n                onFinalizeError(error);\n            }\n        }\n\n        this.grandTotalChangeUnsubscribe = checkoutServiceSubscribe(\n            () => this.handleCartTotalChange(),\n            ({ data }) => data.getCheckout()?.grandTotal,\n            ({ data }) => data.getCheckout()?.outstandingBalance,\n        );\n\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        this.setState({ isReady: true });\n        onReady();\n    }\n\n    componentDidUpdate(): void {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        checkEmbeddedSupport(methods.map(({ id }) => id));\n    }\n\n    componentWillUnmount(): void {\n        if (this.grandTotalChangeUnsubscribe) {\n            this.grandTotalChangeUnsubscribe();\n            this.grandTotalChangeUnsubscribe = undefined;\n        }\n\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n    }\n\n    render(): ReactNode {\n        const {\n            defaultMethod,\n            finalizeOrderError,\n            isInitializingPayment,\n            isUsingMultiShipping,\n            methods,\n            applyStoreCredit,\n            ...rest\n        } = this.props;\n\n        const {\n            didExceedSpamLimit,\n            isReady,\n            selectedMethod = defaultMethod,\n            shouldDisableSubmit,\n            validationSchemas,\n            shouldHidePaymentSubmitButton,\n        } = this.state;\n\n        const uniqueSelectedMethodId =\n            selectedMethod && getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway);\n\n        return (\n            <PaymentContext.Provider value={this.getContextValue()}>\n                <ChecklistSkeleton isLoading={!isReady}>\n                    {!isEmpty(methods) && defaultMethod && (\n                        <PaymentForm\n                            {...rest}\n                            defaultGatewayId={defaultMethod.gateway}\n                            defaultMethodId={defaultMethod.id}\n                            didExceedSpamLimit={didExceedSpamLimit}\n                            isInitializingPayment={isInitializingPayment}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            methods={methods}\n                            onMethodSelect={this.setSelectedMethod}\n                            onStoreCreditChange={this.handleStoreCreditChange}\n                            onSubmit={this.handleSubmit}\n                            onUnhandledError={this.handleError}\n                            selectedMethod={selectedMethod}\n                            shouldDisableSubmit={\n                                (uniqueSelectedMethodId &&\n                                    shouldDisableSubmit[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            shouldHidePaymentSubmitButton={\n                                (uniqueSelectedMethodId &&\n                                    rest.isPaymentDataRequired() &&\n                                    shouldHidePaymentSubmitButton[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            validationSchema={\n                                (uniqueSelectedMethodId &&\n                                    validationSchemas[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                        />\n                    )}\n                </ChecklistSkeleton>\n\n                {this.renderOrderErrorModal()}\n                {this.renderEmbeddedSupportErrorModal()}\n            </PaymentContext.Provider>\n        );\n    }\n\n    private renderOrderErrorModal(): ReactNode {\n        const { finalizeOrderError, language, shouldLocaliseErrorMessages, submitOrderError } =\n            this.props;\n\n        // FIXME: Export correct TS interface\n        const error: any = submitOrderError || finalizeOrderError;\n\n        if (\n            !error ||\n            error.type === 'order_finalization_not_required' ||\n            error.type === 'payment_cancelled' ||\n            error.type === 'payment_invalid_form' ||\n            error.type === 'spam_protection_not_completed' ||\n            error.type === 'invalid_hosted_form_value'\n        ) {\n            return null;\n        }\n\n        return (\n            <ErrorModal\n                error={error}\n                message={mapSubmitOrderErrorMessage(\n                    error,\n                    language.translate.bind(language),\n                    shouldLocaliseErrorMessages,\n                )}\n                onClose={this.handleCloseModal}\n                title={mapSubmitOrderErrorTitle(error, language.translate.bind(language))}\n            />\n        );\n    }\n\n    private renderEmbeddedSupportErrorModal(): ReactNode {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        try {\n            checkEmbeddedSupport(methods.map(({ id }) => id));\n        } catch (error) {\n            if (error instanceof Error) {\n                return <ErrorModal error={error} onClose={this.handleCloseModal} />;\n            }\n        }\n\n        return null;\n    }\n\n    private disableSubmit: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldDisableSubmit } = this.state;\n\n        if (shouldDisableSubmit[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldDisableSubmit: {\n                ...shouldDisableSubmit,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private hidePaymentSubmitButton: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldHidePaymentSubmitButton } = this.state;\n\n        if (shouldHidePaymentSubmitButton[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldHidePaymentSubmitButton: {\n                ...shouldHidePaymentSubmitButton,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private handleBeforeUnload: (event: BeforeUnloadEvent) => string | undefined = (event) => {\n        const { defaultMethod, isSubmittingOrder, language } = this.props;\n        const { selectedMethod = defaultMethod } = this.state;\n\n        if (\n            !isSubmittingOrder ||\n            !selectedMethod ||\n            selectedMethod.type === PaymentMethodProviderType.Hosted ||\n            selectedMethod.type === PaymentMethodProviderType.PPSDK ||\n            selectedMethod.skipRedirectConfirmationAlert\n        ) {\n            return;\n        }\n\n        const message = language.translate('common.leave_warning');\n\n        event.returnValue = message;\n\n        return message;\n    };\n\n    private handleCloseModal: (event: Event, props: ErrorModalOnCloseProps) => Promise<void> =\n        async (_, { error }) => {\n            if (!error) {\n                return;\n            }\n\n            const { cartUrl, clearError, loadCheckout } = this.props;\n            const { type: errorType } = error as any; // FIXME: Export correct TS interface\n\n            if (\n                errorType === 'provider_fatal_error' ||\n                errorType === 'order_could_not_be_finalized_error'\n            ) {\n                window.location.replace(cartUrl || '/');\n            }\n\n            if (errorType === 'tax_provider_unavailable') {\n                window.location.reload();\n            }\n\n            if (errorType === 'cart_consistency') {\n                await loadCheckout();\n            }\n\n            if (isErrorWithType(error) && error.body) {\n                const { body, headers, status } = error;\n\n                if (body.type === 'provider_error' && headers.location) {\n                    window.top?.location.assign(headers.location);\n                }\n\n                // Reload the checkout object to get the latest `shouldExecuteSpamCheck` value,\n                // which will in turn make `SpamProtectionField` visible again.\n                // NOTE: As a temporary fix, we're checking the status code instead of the error\n                // type because of an issue with Nginx config, which causes the server to return\n                // HTML page instead of JSON response when there is a 429 error.\n                if (\n                    status === 429 ||\n                    body.type === 'spam_protection_expired' ||\n                    body.type === 'spam_protection_failed'\n                ) {\n                    this.setState({ didExceedSpamLimit: true });\n\n                    await loadCheckout();\n                }\n            }\n\n            clearError(error);\n        };\n\n    private handleStoreCreditChange: (useStoreCredit: boolean) => void = async (useStoreCredit) => {\n        const { applyStoreCredit, onUnhandledError = noop } = this.props;\n\n        try {\n            await applyStoreCredit(useStoreCredit);\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    };\n\n    private handleError: (error: Error) => void = (error: Error) => {\n        const { onUnhandledError = noop, errorLogger } = this.props;\n\n        const { type } = error as any;\n\n        if (type === 'unexpected_detachment') {\n            errorLogger.log(error);\n\n            return;\n        }\n\n        return onUnhandledError(error);\n    };\n\n    private handleSubmit: (values: PaymentFormValues) => void = async (values) => {\n        const {\n            defaultMethod,\n            loadPaymentMethods,\n            isPaymentDataRequired,\n            onCartChangedError = noop,\n            onSubmit = noop,\n            onSubmitError = noop,\n            submitOrder,\n            analyticsTracker\n        } = this.props;\n\n        const { selectedMethod = defaultMethod, submitFunctions } = this.state;\n\n        analyticsTracker.clickPayButton({shouldCreateAccount: values.shouldCreateAccount});\n\n        const customSubmit =\n            selectedMethod &&\n            submitFunctions[getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway)];\n\n        if (customSubmit) {\n            return customSubmit(values);\n        }\n\n        try {\n            const state = await submitOrder(mapToOrderRequestBody(values, isPaymentDataRequired()));\n            const order = state.data.getOrder();\n\n            analyticsTracker.paymentComplete();\n\n            onSubmit(order?.orderId);\n        } catch (error) {\n            analyticsTracker.paymentRejected();\n\n            if (isErrorWithType(error) && error.type === 'payment_method_invalid') {\n                return loadPaymentMethods();\n            }\n\n            if (isCartChangedError(error)) {\n                return onCartChangedError(error);\n            }\n\n            onSubmitError(error);\n        }\n    };\n\n    private setSelectedMethod: (method?: PaymentMethod) => void = (method) => {\n        const { selectedMethod } = this.state;\n\n        if (selectedMethod === method) {\n            return;\n        }\n\n        if (method) {\n            this.trackSelectedPaymentMethod(method);\n        }\n\n        this.setState({ selectedMethod: method });\n    };\n\n    private setSubmit: (\n        method: PaymentMethod,\n        fn: (values: PaymentFormValues) => void | null,\n    ) => void = (method, fn) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { submitFunctions } = this.state;\n\n        if (submitFunctions[uniqueId] === fn) {\n            return;\n        }\n\n        this.setState({\n            submitFunctions: {\n                ...submitFunctions,\n                [uniqueId]: fn,\n            },\n        });\n    };\n\n    private setValidationSchema: (\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ) => void = (method, schema) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { validationSchemas } = this.state;\n\n        if (validationSchemas[uniqueId] === schema) {\n            return;\n        }\n\n        this.setState({\n            validationSchemas: {\n                ...validationSchemas,\n                [uniqueId]: schema,\n            },\n        });\n    };\n\n    private trackSelectedPaymentMethod(method: PaymentMethod) {\n        const { analyticsTracker } = this.props;\n\n        const methodName = method.config.displayName || method.id;\n        const methodId = method.id;\n\n        analyticsTracker.selectedPaymentMethod(methodName, methodId);\n    }\n\n    private async loadPaymentMethodsOrThrow(): Promise<void> {\n        const {\n            loadPaymentMethods,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await loadPaymentMethods();\n\n            const selectedMethod = this.state.selectedMethod || this.props.defaultMethod;\n\n            if (selectedMethod) {\n                this.trackSelectedPaymentMethod(selectedMethod);\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    private async handleCartTotalChange(): Promise<void> {\n        const { isReady } = this.state;\n\n        if (!isReady) {\n            return;\n        }\n\n        this.setState({ isReady: false });\n\n        await this.loadPaymentMethodsOrThrow();\n\n        this.setState({ isReady: true });\n    }\n}\n\nexport function mapToPaymentProps({\n        checkoutService,\n        checkoutState,\n}: CheckoutContextProps): WithCheckoutPaymentProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getOrder,\n            getPaymentMethod,\n            getPaymentMethods,\n            isPaymentDataRequired,\n            getPaymentProviderCustomer,\n        },\n        errors: { getFinalizeOrderError, getSubmitOrderError },\n        statuses: { isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const customer = getCustomer();\n    const consignments = getConsignments();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n\n    const { isComplete = false } = getOrder() || {};\n    let methods = getPaymentMethods() || EMPTY_ARRAY;\n\n    // TODO: In accordance with the checkout team, this functionality is temporary and will be implemented in the backend instead.\n    if (paymentProviderCustomer?.stripeLinkAuthenticationState) {\n        const stripeUpePaymentMethod = methods.filter(method =>\n            method.id === 'card' && method.gateway === PaymentMethodId.StripeUPE\n        );\n\n        methods = stripeUpePaymentMethod.length ? stripeUpePaymentMethod : methods;\n    }\n\n    if (!checkout || !config || !customer || isComplete) {\n        return null;\n    }\n\n    const {\n        enableTermsAndConditions: isTermsConditionsEnabled,\n        features,\n        orderTermsAndConditionsType: termsConditionsType,\n        orderTermsAndConditions: termsCondtitionsText,\n        orderTermsAndConditionsLink: termsCondtitionsUrl,\n    } = config.checkoutSettings as CheckoutSettings & { orderTermsAndConditionsLocation: string };\n\n    const isTermsConditionsRequired = isTermsConditionsEnabled;\n    const selectedPayment = find(checkout.payments, {\n        providerType: PaymentMethodProviderType.Hosted,\n    });\n\n    const { isStoreCreditApplied } = checkout;\n\n    let selectedPaymentMethod;\n    let filteredMethods;\n\n    filteredMethods = methods.filter((method: PaymentMethod) => {\n        if (method.id === PaymentMethodId.Bolt && method.initializationData) {\n            return !!method.initializationData.showInCheckout;\n        }\n\n        if (method.id === PaymentMethodId.BraintreeLocalPaymentMethod) {\n            return false;\n        }\n\n        return true;\n    });\n\n    if (consignments && consignments.length > 1) {\n        const multiShippingIncompatibleMethodIds: string[] = [\n            PaymentMethodId.AmazonPay,\n        ];\n\n        filteredMethods = methods.filter((method: PaymentMethod) => {\n            return !multiShippingIncompatibleMethodIds.includes(method.id);\n        });\n    }\n\n    if (selectedPayment) {\n        selectedPaymentMethod = getPaymentMethod(\n            selectedPayment.providerId,\n            selectedPayment.gatewayId,\n        );\n        filteredMethods = selectedPaymentMethod\n            ? compact([selectedPaymentMethod])\n            : filteredMethods;\n    } else {\n        selectedPaymentMethod = find(filteredMethods, {\n            config: { hasDefaultStoredInstrument: true },\n        });\n        // eslint-disable-next-line no-self-assign\n        filteredMethods = filteredMethods;\n    }\n\n    return {\n        applyStoreCredit: checkoutService.applyStoreCredit,\n        availableStoreCredit: customer.storeCredit,\n        cartUrl: config.links.cartLink,\n        clearError: checkoutService.clearError,\n        defaultMethod: selectedPaymentMethod || filteredMethods[0],\n        finalizeOrderError: getFinalizeOrderError(),\n        finalizeOrderIfNeeded: checkoutService.finalizeOrderIfNeeded,\n        loadCheckout: checkoutService.loadCheckout,\n        isInitializingPayment: isInitializingPayment(),\n        isPaymentDataRequired,\n        isStoreCreditApplied,\n        isSubmittingOrder: isSubmittingOrder(),\n        isTermsConditionsRequired,\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\n        methods: filteredMethods,\n        shouldExecuteSpamCheck: checkout.shouldExecuteSpamCheck,\n        shouldLocaliseErrorMessages:\n            features['PAYMENTS-6799.localise_checkout_payment_error_messages'],\n        submitOrder: checkoutService.submitOrder,\n        submitOrderError: getSubmitOrderError(),\n        checkoutServiceSubscribe: checkoutService.subscribe,\n        termsConditionsText:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.TextArea\n                ? termsCondtitionsText\n                : undefined,\n        termsConditionsUrl:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.Link\n                ? termsCondtitionsUrl\n                : undefined,\n        usableStoreCredit:\n            checkout.grandTotal > 0 ? Math.min(checkout.grandTotal, customer.storeCredit || 0) : 0,\n    };\n}\n\nexport default withAnalytics(withLanguage(withCheckout(mapToPaymentProps)(Payment)));\n","import { CartChangedError } from '@bigcommerce/checkout-sdk';\n\nexport default function isCartChangedError(error: unknown): error is CartChangedError {\n    const requestError = error as CartChangedError;\n\n    return requestError.type === 'cart_changed';\n}\n","import { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { EMPTY_ARRAY } from '../common/utility';\n\nimport { RedeemableProps } from './Redeemable';\n\nexport default function mapToRedeemableProps(\n    context: CheckoutContextProps,\n): RedeemableProps | null {\n    const {\n        checkoutService,\n        checkoutState: {\n            data: { getConfig, getCoupons, getGiftCertificates },\n            statuses: {\n                isApplyingCoupon,\n                isApplyingGiftCertificate,\n                isRemovingCoupon,\n                isRemovingGiftCertificate,\n            },\n            errors: {\n                getApplyCouponError,\n                getApplyGiftCertificateError,\n                getRemoveCouponError,\n                getRemoveGiftCertificateError,\n            },\n        },\n    } = context;\n\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        appliedRedeemableError: getApplyCouponError() || getApplyGiftCertificateError(),\n        applyCoupon: checkoutService.applyCoupon,\n        applyGiftCertificate: checkoutService.applyGiftCertificate,\n        clearError: checkoutService.clearError,\n        coupons: getCoupons() || EMPTY_ARRAY,\n        giftCertificates: getGiftCertificates() || EMPTY_ARRAY,\n        isApplyingRedeemable: isApplyingCoupon() || isApplyingGiftCertificate(),\n        isRemovingCoupon: isRemovingCoupon(),\n        isRemovingGiftCertificate: isRemovingGiftCertificate(),\n        onRemovedCoupon: checkoutService.removeCoupon,\n        onRemovedGiftCertificate: checkoutService.removeGiftCertificate,\n        removedRedeemableError: getRemoveCouponError() || getRemoveGiftCertificateError(),\n        shouldCollapseCouponCode: config.checkoutSettings.isCouponCodeCollapsed,\n    };\n}\n","import React, {\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactElement,\n    ReactNode,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler<HTMLDivElement> }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nconst ModalTrigger = ({ children, modal }: ModalTriggerProps): ReactElement => {\n    const [isOpen, setIsOpen] = useState(false);\n    const canHandleEventRef = useRef(false);\n\n    useEffect(() => {\n        canHandleEventRef.current = true;\n\n        return () => {\n            canHandleEventRef.current = false;\n        };\n    }, []);\n\n    const handleOpen = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(true);\n    };\n\n    const handleClose = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(false);\n    };\n\n    const handleKeyOpen = (keyboardEvent: KeyboardEvent<HTMLElement>): void => {\n        if (keyboardEvent.key === 'Enter') {\n            handleOpen();\n        }\n    };\n\n    return (\n        <>\n            {children({\n                onClick: handleOpen,\n                onKeyPress: handleKeyOpen,\n            })}\n\n            {modal({\n                isOpen,\n                onRequestClose: handleClose,\n            })}\n        </>\n    );\n};\n\nexport default ModalTrigger;\n"],"names":["memo","coupon","className","displayName","TranslatedString","id","code","giftCertificate","ShopperCurrency","amount","used","remaining","height","viewBox","width","xmlns","d","children","isRemoving","onRemove","disabled","onClick","type","AppliedCouponChecklistItem","onRemoved","handleRemove","useCallback","AppliedGiftCertificateChecklistItem","coupons","giftCertificates","isRemovingCoupon","isRemovingGiftCertificate","onRemovedCoupon","onRemovedGiftCertificate","length","map","key","RedeemableForm","appliedRedeemableError","isApplyingRedeemable","clearError","noop","submitForm","language","isSubmittingOrder","themeV2","handleSubmitForm","setSubmitted","handleKeyDown","memoizeOne","event","keyCode","preventDefault","handleSubmit","renderLabel","name","Label","hidden","htmlFor","renderErrorMessage","errorCode","errorMessage","renderInput","field","errors","Alert","A","Error","message","TextInput","translate","onKeyDown","testId","Button","isLoading","variant","Secondary","renderContent","FormField","input","label","withLanguage","mapPropsToValues","redeemableCode","props","applyCoupon","applyGiftCertificate","trim","validationSchema","required","shouldCollapseCouponCode","showAppliedRedeemables","formProps","Toggle","openByDefault","toggle","isOpen","href","body","header","renderModal","Modal","additionalBodyClassName","footer","onRequestClose","size","Small","shouldShowCloseButton","ModalTrigger","modal","split","line","Fragment","TermsConditionsType","TermsConditionsModalCheckboxField","terms","translatedLabel","url","parsedLabel","parseAnchor","labelContent","ModalHeader","CheckboxFormField","TermsConditionsCheckboxField","useMemo","TranslatedHtml","data","TermsConditionsTextField","TextArea","defaultValue","readOnly","Fieldset","additionalClassName","legend","Legend","isTermsConditionsTextArea","isTermsConditionModal","mapSubmitOrderErrorMessage","error","shouldLocalise","subtype","includes","err","join","mapSubmitOrderErrorTitle","unformatCreditCardExpiryDate","value","RegExp","month","year","test","slice","unformatCreditCardNumber","separator","number","replace","getUniquePaymentMethodId","methodId","gatewayId","compact","parseUniquePaymentMethodId","undefined","hasCreditCardNumber","values","Object","hasCreditCardExpiry","mapToOrderRequestBody","isPaymentDataRequired","paymentProviderRadio","rest","payload","payment","paymentData","omitBy","ccExpiry","ccNumber","isNil","isEmpty","createContext","TermsConditions","termsConditionsUrl","termsConditionsText","TermsConditionsField","Link","getPaymentValidationSchema","additionalValidation","isTermsConditionsRequired","schemaFields","schemaFieldsWithTerms","concat","oneOf","getTermsConditionsValidationSchema","PaymentMethodType","getPaymentMethodName","method","translations","PaymentMethodId","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","config","capitalize","get","content","htmlId","onUnhandledError","checkoutService","useEffect","initializePayment","BigCommercePaymentsPayLater","bigcommerce_payments_paylater","bannerContainerId","deinitializePayment","BraintreePaypalCredit","braintree","containerId","instrumentTypeMap","AMEX","instrument","component","lazy","BITCOIN","BITCOIN_CASH","BANCONTACT","CARNET","CB","DINERS","DANKORT","DISCOVER","DOGECOIN","ELECTRON","ELO","ETHEREUM","HIPER","JCB","LITECOIN","MADA","MAESTRO","MC","SHIBA_INU","TROY","CUP","USD_COIN","VISA","mapFromPaymentMethodCardType","filterInstrumentTypes","instrumentTypes","supportedInstrumentTypes","record","filter","cardType","iconProps","Medium","IconComponent","instrumentType","find","getPaymentMethodIconComponent","Suspense","selectedCardType","filteredCardTypes","getPaymentMethodTitle","basePath","checkoutSettings","storeCountryCode","cdnPath","path","paymentWithLogo","initializationData","methodsWithLogo","methodName","methodDisplayName","isCreditCard","toLowerCase","PaypalCommerceCredit","payPalCreditProductBrandName","credit","AdyenV2","AdyenV3","getPaymentMethodDisplayName","customTitles","CreditCard","logoUrl","titleText","BraintreeVenmo","subtitle","BraintreeAch","BraintreeLocalPaymentMethod","BigCommercePaymentsPayPal","BigCommercePaymentsAlternativeMethod","PaypalCommerce","PaypalCommerceAlternativeMethod","isExperimentEnabled","ApplePay","PayWithGoogle","Humm","enableBillie","Laybuy","Masterpass","Quadpay","Sezzle","Zip","Barclaycard","Mollie","Checkoutcom","StripeV3","StripeUPE","WorldpayAccess","gateway","BlueSnapDirect","PaypalCommerceVenmo","BigCommercePaymentsVenmo","PaypalPaymentsPro","Ratepay","connectFormik","withCheckout","getConfig","getInstruments","instruments","storeProfile","cdnBasePath","node","isSelected","alt","src","Function","cardTypes","supportedCards","instrumentSelected","provider","bigpayToken","instrumentId","getInstrumentForMethod","hostedForm","card","brand","getSelectedCardType","PaymentFormContext","usePaymentFormContext","context","useContext","PaymentFormProvider","paymentForm","Provider","createInjectHoc","FormContext","displayNamePrefix","AdyenCardFields","getInitialValidationState","shouldShowNumberField","validationState","CardNumber","valid","SecurityCode","ExpiryDate","isFieldInvalid","fieldKey","fieldsValidation","verificationFieldsContainerId","selectedInstrument","paymentMethod","cardValidationState","useState","setFieldsValidation","fieldType","endDigits","last4","showValidationIcon","style","transform","right","isBankAccountInstrument","state","canHandleEvent","handleOpen","setState","handleClose","handleKeyOpen","keyboardEvent","componentDidMount","this","componentWillUnmount","render","onKeyPress","Component","withIconContainer","clipRule","fill","fillRule","xmlSpace","rx","stroke","x","y","maskUnits","maskType","mask","shouldShow","handleClick","nativeEvent","getRootElement","addEventListener","removeEventListener","placement","dropdown","ref","modifiers","enabled","zIndex","document","getElementById","defaultProps","isAchInstrument","isSepaInstrument","AccountInstrumentUseNewButton","AccountInstrumentMenuItem","externalId","AchInstrumentMenuItem","accountNumber","issuer","SepaInstrumentMenuItem","BankInstrumentMenuItem","AccountInstrumentOption","AccountInstrumentMenu","selectedInstrumentId","onSelectInstrument","onUseNewInstrument","AccountInstrumentSelectButton","setTimeout","updateFieldValue","componentDidUpdate","prevProps","prevSelectedInstrumentId","otherFieldProps","form","setFieldValue","PureComponent","isCardInstrument","isAccountInstrument","ManageInstrumentsRow","onDeleteInstrument","handleDelete","isDeletingInstrument","LoadingOverlay","mapFromInstrumentCardType","cardInfo","isExpired","expirationDate","expiryMonth","expiryYear","isValid","niceType","status","isConfirmingDelete","handleAfterOpen","onAfterOpen","handleCancel","getDeleteInstrumentError","deleteInstrumentError","handleConfirmDelete","deleteInstrument","onDeleteInstrumentError","handleDeleteInstrument","closeButtonLabel","renderFooter","cardInstruments","bankInstruments","accountInstruments","achInstrument","bankAndAccountInstruments","ManageAccountInstrumentsTable","isLoadingInstruments","Primary","contextType","CheckoutContext","BasicFormField","InstrumentMenuItem","shouldHideExpiryDate","cardTitle","endingIn","expiryDate","InstrumentOption","InstrumentUseNewButton","InstrumentMenu","InstrumentSelectButton","validateInstrument","display","onChange","renderField","CheckboxInput","checked","FormFieldError","errorId","kebabCase","translationId","saveIsChecked","Boolean","getFieldValue","addingNewInstrument","hasAnyOtherInstruments","showSave","showSetAsDefault","defaultInstrument","setAsDefaultEnabled","useProps","isAddingNewCard","getDefaultInstrumentId","handleUseNewCard","handleSelectInstrument","isInstrumentFeatureAvailableProp","loadInstruments","setValidationSchema","getValidationSchema","initializeMethod","prevState","deinitializeCustomer","setSubmit","hideWidget","isInitializing","shouldHideInstrumentExpiryDate","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","hideContentWhenLoading","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","renderEditButtonIfAvailable","hideVerificationFields","isInstrumentCardNumberRequiredProp","assertIsCardInstrument","hideContentWhenSignedOut","isSignInRequired","isSignedIn","additionalContainerClassName","shouldRenderCustomInstrument","renderCustomPaymentForm","tabIndex","storedCardValidationSchema","getSelectedInstrument","shouldShowEditButton","buttonId","translatedString","shouldShowDescriptor","paymentDescriptor","initializeCustomer","signInCustomer","Promise","resolve","PROVIDERS_WITHOUT_CARD_CODE","createSelector","cart","getCart","lineItems","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","digitalItems","trustedShippingAddress","isInstrumentCardCodeRequired","isVaultingCardNumberValidationAvailable","physicalItems","isInstrumentCardNumberRequired","showAdditionalActionContent","cancelAdditionalActionModalFlow","additionalActionContainerId","checkoutState","hidePaymentSubmitButton","disableSubmit","customer","getCustomer","statuses","isGuest","isInstrumentFeatureAvailable","isVaultingEnabled","signOut","signOutCustomer","AdyenV2PaymentMethodType","toResolvableComponent","useRef","shouldShowModal","setShowAdditionalActionContent","setCardValidationState","cardVerificationContainerId","threeDS2ContainerId","bcmc","onBeforeLoad","shopperInteraction","current","onComplete","cancelAdditionalAction","onLoad","cancel","initializeAdyenPayment","options","scheme","hasHolderName","holderNameRequired","ideal","showImage","adyenOptions","adyenv2","hasVaultedInstruments","additionalActionOptions","widgetSize","validateCardFields","isLoadingPaymentMethod","formContextProps","isSubmitted","LocaleProvider","UntrustedShippingCardVerificationType","shouldRenderAdditionalActionContentModal","isModalVisible","overlay","AdyenV3PaymentMethodType","setShouldRenderAdditionalActionContentModal","isAdditionalActionContentModalVisible","setIsAdditionalActionContentModalVisible","onActionHandled","adyenv3","isUsingMultiShipping","isCardVaultingEnabled","getHostedPaymentMethodDerivedProps","filterAccountInstruments","filterTrustedInstruments","isPaymentDataSubmitted","currentMethodInstruments","trustedInstruments","isNewAddress","isAddingNewInstrument","handleUseNewInstrument","description","getDefaultInstrument","HostedPaymentComponent","paymentToken","initializeAmazonPayV2Payment","amazonpay","editButtonId","reload","window","location","getCheckout","checkout","some","payments","providerId","onSignOut","applepay","shippingLabel","subtotalLabel","providerOptionsKey","providerOptionsData","currentInstrument","shouldConfirmInstrument","buttonActionsRef","fieldsValuesRef","renderButtonRef","hasPayPalButton","termsValue","shouldSaveInstrument","validateForm","validationErrors","keys","validateButton","disable","enable","togglePaypalButton","container","shouldRenderPayPalButtonOnInitialization","onRenderButton","onInit","onError","onValidate","reject","keysValidation","forEach","setFieldTouched","onInitButton","actions","getFieldsValues","setCurrentInstrument","trustedAccountInstruments","hasAccountInstruments","isComplete","shouldCreateNewInstrument","defaultAccountInstrument","allInstruments","widgetContainerId","extraOptions","apmFieldsContainer","apmFieldsStyles","variables","fontFamily","colorBackground","textColor","fontSizeBase","spacingUnit","borderColor","borderRadius","borderWidth","rules","backgroundColor","color","fontSize","formatCreditCardNumber","unformattedValue","gaps","gapIndex","reduce","output","index","inputRef","createRef","nextSelectionEnd","handleChange","target","previousValue","selectionEnd","maxLength","max","info","lengths","formattedValue","setSelectionRange","autoComplete","meta","CreditCardNumberInput","strokeWidth","fontWeight","letterSpacing","opacity","Large","TooltipTrigger","tooltip","IconHelp","shouldShowCardCodeField","trimmedMonth","trimmedYear","formatCreditCardExpiryDate","placeholder","shouldShowCustomerCodeField","memoize","instrumentBrand","instrumentLast4","isCardCodeRequired","isCardNumberRequired","schema","ccCvv","cvv","ccCustomerCode","ccName","parent","createLocaleContext","inputDateFormat","currency","createCurrencyService","date","inputFormat","getLanguageService","filterInstruments","getCreditCardPaymentMethodDerivedProps","discoverInfo","creditCardType","getTypeInfo","visaInfo","updateCard","patterns","addCard","_prevProps","cardFieldset","getStoredCardValidationFieldset","isInstrumentCardCodeRequiredProp","storeConfig","LocaleContext","requireCustomerCode","cardValidationSchema","getInstrumentValidationSchema","getCreditCardValidationSchema","isCustomerCodeRequired","appearFocused","cardCodeId","cardNumberId","cardExpiryId","focusedFieldType","additionalFields","cardNameId","shape","cardExpiry","cardName","cardNumber","isCardExpiryRequired","cardCodeVerification","cardNumberVerification","cardExpiryVerification","CreditCardInputStylesType","getCreditCardInputStyles","properties","Default","createElement","parentContainer","appendChild","FormFieldContainer","hasError","Focus","element","getAppliedStyles","parentElement","removeChild","showCardHolderName","isHostedFormEnabled","setFocusedFieldType","isCardHolderNameRequired","getHostedFieldId","getHostedFormOptions","styleProps","shouldRenderHostedFields","styleContainerId","fields","accessibilityLabel","default","focus","styles","onBlur","onCardTypeChange","onEnter","onFocus","forIn","fieldErrors","errorKey","getHostedStoredCardValidationFieldset","initializeBigCommercePaymentsCreditCardPayment","bigcommerce_payments_creditcards","getHostedCreditCardValidationSchema","getHostedInstrumentValidationSchema","renderPayPalCardComponent","PoweredByPayPalFastlaneLabel","result","Tiny","showPayPalCardSelector","setSelectedInstrument","paymentProviderCustomer","getPaymentProviderCustomer","paypalFastlaneCustomer","useBigCommercePaymentsFastlaneInstruments","shouldShowInstrumentsForm","paypalCardComponentRef","isInitializingPayment","bigcommerce_payments_fastlane","finalError","isErrorWithTranslationKey","translationKey","COUNTRY_DATA","dialCode","getCountryData","countryName","country","formFieldData","requiredFieldErrorTranslationIds","ratepayPhoneCountryCode","ratepayPhoneNumber","ratepayBirthDate","nullable","fieldName","matches","ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE","custom","DynamicFormFieldType","DATE","TEXT","fieldsValues","bigcommerce_payments_ratepay","legalTextContainer","loadingContainerId","ratepaySpecificError","e","provider_error","translationCode","ratepayError","ratepaySpecificErrorCode","CustomError","shouldBeTranslatedAsHtml","fieldId","getBigCommercePaymentsRatePayValidationSchema","billing","getBillingAddress","marginBottom","DynamicFormField","extraClass","BluesnapECPAccountType","useFloatingLabel","DynamicInput","TELEPHONE","isFloatingLabelEnabled","helperLabel","items","rows","renderSelect","DROPDOWM","shouldRenderCompanyName","ConsumerChecking","ConsumerSavings","CorporateChecking","CorporateSavings","shouldRenderFields","min","routingNumber","companyName","accountType","getFormValues","setDisabled","shopperPermission","initializeEcp","deinitializeEcp","shouldShowForm","company","getEcpValidationSchema","paddingBottom","isBlueSnapDirectInitializationData","object","sepaCreditorCompanyName","array","idealIssuers","Array","isArray","iban","firstName","lastName","toggleSubmitButton","initializeSepa","deinitializeSepa","getSepaValidationSchema","creditorName","bic","idealIssuersSelectOptions","issuerId","issuerName","initializeIdeal","getIdealValidationSchema","deinitializeIdeal","isLoadingIframe","setisLoadingIframe","paymentPageContent","setPaymentPageContent","paymentPageContentRef","cancelBlueSnapV2ModalFlow","cancelBlueSnapV2Payment","initializeBlueSnapV2Payment","bluesnapv2","border","appendPaymentPageContent","additionalModalClassName","initializePayByBank","getPayByBankValidationSchema","deinitializePayByBank","initializeBoltPayment","bolt","useBigCommerceCheckout","agreementTranslationOptions","privacyPolicyUrl","termsUrl","benefitsList","BoltCreateAccountCheckbox","showCreateAccountCheckbox","setShowCreateAccountCheckbox","boltEmbeddedContainerId","onPaymentSelect","hasBoltAccount","isGuestCustomer","embeddedOneClickEnabled","BraintreeAchFieldType","OwnershipTypes","AccountTypes","accountTypeOptions","Savings","Checking","ownershipTypeOptions","Personal","Business","defaultBraintreeAchFormFields","AccountType","AccountNumber","RoutingNumber","OwnershipType","personalBraintreeAchFormFields","FirstName","LastName","businessBraintreeAchFormFields","BusinessName","formFields","validateBraintreeAchForm","braintreeAchFormValues","businessName","ownershipType","all","isValidAccountNumber","isValidRoutingNumber","isValidFirstName","isValidLastName","isValidBusinessName","isValidDepositoryName","resetFormValidation","getTranslatedLabelByFieldName","braintreeAchFormLabelsMap","isBraintreeAchFormFieldName","fieldValues","updateMandateText","fullName","String","depositoryName","outstandingBalance","storeName","symbol","mandateTextTranslationKey","formattedDate","Date","now","toJSON","reverse","mandateTextTranslationProps","currentDate","mandateText","isValidForm","setIsValidForm","defaultFormValues","shouldSetAsDefaultInstrument","orderConsent","entries","resetFormValues","shouldShowMandateTextCheckbox","mandateTextConfirmationCheckboxValue","currentMandateTextRef","braintreeach","getMandateText","currentMandateText","useBraintreeFastlaneInstruments","paypalFastlaneComponentRef","braintreefastlane","braintreelocalmethods","buttonText","brandName","initializeBraintreePaypalPaymentMethod","defaultOptions","providerName","formatAccountMask","accountMask","padding","card_information","cardData","isWalletButtonInitializationData","expMonth","expYear","accountNum","expDate","substr","handleSignOut","onSignOutError","toggleSubmit","getWalletButtonPaymentMethodDerivedProps","prevMethod","prevIsPaymentDataRequired","isPaymentSelected","renderPaymentView","renderSignInView","signInButtonClassName","signInButtonLabel","editButtonClassName","editButtonLabel","billingAddress","walletPaymentData","initializeVisaCheckoutPayment","mergedOptions","braintreevisacheckout","BraintreeVisaCheckout","TextField","labelId","HiddenInput","restField","selectedIssuer","Input","OptionButton","restProps","DropdownButton","ccDocumentField","fawry","sepa","debtor","paymentContext","creditor","sepaCreditor","sepaCreditorAddress","sepaCreditorPostalCode","sepaCreditorCity","sepaCreditorCountry","creditorId","sepaCreditorIdentifier","address1","postalCode","city","stateOrProvinceCode","countryCode","isChecked","setSelectedIssuer","bicValue","setBicValue","issuers","currentTarget","_selectedIssuer","dataset","issuersList","checkoutcomPaymentMethodsArray","checkoutComShemas","oxxo","ccDocument","qpay","notRequired","boleto","sepaMandate","customerMobile","customerEmail","email","isIdealHostedPageExperimentOn","features","checkoutCustomMethod","CheckoutcomCustomFieldset","initializeGooglePayPayment","reinitializePayment","AdyenV2GooglePay","walletButton","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BigCommercePaymentsGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","StripeGooglePay","StripeUPEGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","CheckoutcomGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay","hostedFieldset","hostedValidationSchema","initializeHostedCreditCardPayment","creditCard","hostedStoredCardValidationSchema","initializeKlarnaPayment","klarna","initializeKlarnaV2Payment","klarnav2","helpers","setValue","IssuerSelectButton","image","size1x","paymentMethodsResponse","cardNumberElementOptions","cardHolderElementOptions","cardCvcElementOptions","cardExpiryElementOptions","MolliePaymentMethodType","localeContext","initializeMolliePayment","mollieElements","getMolliesElementOptions","cardCvcId","cardHolderId","base","invalid","unsupportedMethodMessage","disableButton","mollie","creditcard","_shouldShowNumber","useHostedCreditCard","requireCardCode","initializeMonerisPayment","paymentConfig","moneris","initializePayPalCommerceCreditCardPayment","paypalcommercecreditcards","usePayPalCommerceFastlaneInstruments","paypalcommercefastlane","paypalcommerceratepay","getDate","getMonth","getFullYear","getPaypalCommerceRatePayValidationSchema","countryInfo","getCountryInfo","isEmbedded","initializePaypalExpressPayment","paypalexpress","useRedirectFlow","setIsAddingNewCard","setSelectedInstrumentId","defaultInstrumentId","getStylesFromElement","querySelector","copyStylesFromDummyFormFields","difference","mapToSquareStyles","borderColorIsFocus","borderWidthIsFocus","inputIsFocus","borderColorIsError","borderWidthIsError","colorIsError","squarev2","selector","pseudoElementSelector","parseRadioIconSize","parseInt","getFonts","elementsList","querySelectorAll","fonts","fontSrc","getAttribute","push","cssSrc","getAppearanceForOCSElement","defaultAccordionPaddingHorizontal","defaultAccordionPaddingVertical","formInputStyles","formLabelStyles","formErrorStyles","accordionHeaderStyles","accordionSelectedHeaderStyles","formChecklistStyles","accordionHeaderColor","accordionItemTitleFontSize","accordionHeaderFontFamily","accordionItemTitleFontWeight","accordionPaddingTop","accordionPaddingRight","accordionPaddingBottom","accordionHeaderPadding","radioOuter","radioOuterChecked","radioIconSize","sizes","radioIconOuterWidth","radioIconOuterStrokeWidth","radioIconInnerWidth","outerWidth","outerStrokeWidth","innerWidth","stripeEqualOuterWidth","toFixed","stripeEqualOuterStrokeWidth","stripeSVGSizeCoefficient","stripeEqualInnerRadius","innerRadius","getRadioIconSizes","radioIconColor","radioIconFocusColor","colorPrimary","colorText","colorDanger","colorTextSecondary","colorTextPlaceholder","colorIcon","boxShadow","borderBottom","r","collapseStripeElement","AccordionContext","onToggle","selectedItemId","isOCSLoading","setIsOCSLoading","methodSelector","renderSubmitButton","initializeStripePayment","stripeocs","layout","defaultCollapsed","radios","linkInAccordion","spacedAccordionItems","visibleAccordionItemsCount","appearance","paymentMethodSelect","handleClosePaymentMethod","collapseElement","togglePreloader","ChecklistSkeleton","defaultChecked","isStripeLinkAuthenticated","stripeLinkAuthenticationState","formInput","formLabel","formError","stripeupe","labelText","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","StripeElementType","useIndividualCardFields","paymentMethodType","additionalStripeV3Classes","Alipay","stripeOptions","classes","Card","CardCvc","CardExpiry","showIcon","Iban","supportedCountries","IdealBank","storeUrl","links","siteLink","onUnhandledStripeV3Error","getIndividualCardElementOptions","stripeInitializeOptions","getStripeOptions","stripev3","optionsCustomForm","threeDSecureVerification","setThreeDSecureVerification","cancelWorldpayModalFlow","cancelThreeDSecureVerification","initializeWorldpayPayment","worldpay","resolvePaymentMethod","query","resolveComponent","shouldSavingCardsBeEnabled","paymentMethodConfig","isVaultingNotEnabled","untrustedShippingCardVerificationMode","CVV","handleShow","handleHide","onMouseEnter","onMouseLeave","withHostedCreditCardFieldset","OriginalComponent","formik","nextSelectionEndRef","isPreloaderOn","then","CreditCardPaymentMethod","threeDSecureContent","setThreeDSecureContent","threeDSecureContentRef","initializeBraintreePayment","threeDSecure","addFrame","removeFrame","appendThreeDSecureContent","cancelThreeDSecureModalFlow","HostedPaymentMethod","WalletButtonPaymentMethod","storeLanguage","initializeMasterpassPayment","masterpass","testMode","checkoutId","isMasterpassSrcEnabled","locale","PaymentMethodProviderType","selectedHostedMethod","Hosted","isHostedPayment","Wrapper","onMount","initializationComponentMap","card_ui","none","onDeinit","catch","usePropsToOnMount","PPSDKPaymentMethod","componentKey","initializationStrategy","PPSDK","Braintree","Api","formikContext","formContext","ResolvedPaymentMethod","PaymentMethod","createPaymentFormService","getPaymentMethodFromListValue","methods","PaymentMethodListItem","isDisabled","renderPaymentMethod","PaymentMethodV2","renderPaymentMethodTitle","isCustomChecklistItem","ChecklistItem","onSelect","handleSelect","role","Checklist","defaultSelectedItemId","navigator","userAgent","mapToRedeemableProps","redeemableProps","Redeemable","providersWithCustomClasses","PaymentSubmitButtonText","methodType","methodGateway","initialisationStrategyType","IconBolt","BlueSnapV2","PaypalVenmo","continueActionId","continueTranslationId","completeTranslationId","isInitializingCustomer","isSubmitting","isFullWidth","Action","shouldShowRetryButton","handleRetry","verify","isExecutingSpamCheck","didExceedSpamLimit","executeSpamCheck","isErrorWithType","SpamProtectionField","withCurrency","availableStoreCredit","usableStoreCredit","isStoreCreditApplied","Tooltip","storeCredit","toCustomerCurrency","PaymentMethodSubmitButtonContainer","PaymentMethodListFieldset","onMethodSelect","resetForm","handlePaymentMethodSelect","updatedValues","shouldCreateAccount","Extension","region","paymentFormConfig","defaultGatewayId","onSubmit","onStoreCreditChange","selectedMethod","shouldDisableSubmit","shouldHidePaymentSubmitButton","shouldExecuteSpamCheck","selectedMethodId","Form","isReady","validationSchemas","submitFunctions","getContextValue","uniqueId","handleBeforeUnload","defaultMethod","skipRedirectConfirmationAlert","returnValue","handleCloseModal","_","cartUrl","loadCheckout","errorType","headers","top","assign","handleStoreCreditChange","useStoreCredit","applyStoreCredit","handleError","errorLogger","log","loadPaymentMethods","onCartChangedError","onSubmitError","submitOrder","analyticsTracker","clickPayButton","customSubmit","order","getOrder","paymentComplete","orderId","paymentRejected","setSelectedMethod","trackSelectedPaymentMethod","fn","finalizeOrderIfNeeded","onFinalize","onFinalizeError","onReady","checkoutServiceSubscribe","loadPaymentMethodsOrThrow","grandTotalChangeUnsubscribe","handleCartTotalChange","grandTotal","checkEmbeddedSupport","uniqueSelectedMethodId","defaultMethodId","renderOrderErrorModal","renderEmbeddedSupportErrorModal","finalizeOrderError","shouldLocaliseErrorMessages","ErrorModal","bind","onClose","title","selectedPaymentMethod","mapToPaymentProps","getConsignments","getPaymentMethod","getPaymentMethods","getFinalizeOrderError","getSubmitOrderError","consignments","stripeUpePaymentMethod","filteredMethods","isTermsConditionsEnabled","termsConditionsType","termsCondtitionsText","termsCondtitionsUrl","selectedPayment","providerType","showInCheckout","hasDefaultStoredInstrument","cartLink","submitOrderError","subscribe","Math","withAnalytics","Payment","getCoupons","getGiftCertificates","isApplyingCoupon","isApplyingGiftCertificate","getApplyCouponError","getApplyGiftCertificateError","getRemoveCouponError","getRemoveGiftCertificateError","removeCoupon","removeGiftCertificate","removedRedeemableError","isCouponCodeCollapsed","setIsOpen","canHandleEventRef"],"sourceRoot":""}