{"version":3,"file":"payment-e58a6685.js","mappings":"mIAIA,MAMA,GAAe,E,QAAA,IANqB,IAChC,uBAAKA,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,mR,4HCgBhB,MA6CA,GAAe,IAAAC,OA7C8C,EACzDC,gBAAgB,sBAChBC,WACAC,YAAY,iBACZC,oBAAoB,2BACpBC,kBAAkB,wBAClBC,0BAA0B,kCAC1BC,gBACAC,aAEA,MAAM,SAAEC,EAAQ,eAAEC,IAAmB,IAAAC,YAAWC,EAAAC,GAC1CC,EAAaJ,IAAmBF,EAEhCO,GAAwB,IAAAC,cAAY,CAACC,EAAYC,KACnDD,EAAKE,iBAAiB,iBAAiB,EAAGC,aAClCA,IAAWH,GACXC,SAGT,IAEH,OACI,sBAAIf,UAAW,IAAWA,EAAW,CAAE,CAACC,GAAoBU,KACxD,uBAAKX,UAAW,IAAWE,EAAiB,CAAE,CAACC,GAA0BQ,KACpEP,EAAc,CAAEO,aAAYL,cAGhCP,EACG,gBAACmB,EAAA,EAAa,CACVC,eAAgBP,EAChBQ,WAAYtB,EACZuB,GAAIV,EACJW,cAAY,EACZC,QAAS,CAAC,EACVC,eAAa,GAEb,mCAAe,SAASxB,UAAWF,GAC9BC,IAGT,S,gDCrDhB,MAmBA,EAnBwE,I,IAAA,GACpE0B,EAAE,WACFd,EAAU,SACVZ,GAAQ,EACL2B,GAAK,cAJ4D,gCAKlE,OACF,gCACI,gBAACC,EAAA,EAAK,iBACED,EAAK,CACTE,QAASjB,EACTX,UAAU,oEACVyB,GAAIA,EACJI,KAAK,WAGT,gBAACC,EAAA,EAAK,CAACC,QAASN,GAAK1B,KCyD7B,GAAe,IAAAF,OA9D+C,I,IAAA,WAC1DmC,EAAU,MACVC,EAAK,QACLC,EAAO,OACPC,GAAS,IAAAC,WAAUH,GAAM,MACzBI,GAAK,EACFC,GAAI,cANmD,mDAQ1D,MAAM,KAAEC,EAAO,KAAO,IAAA/B,YAAWgC,EAAAC,IAAqB,CAAC,EAEjDC,GAAc,IAAA7B,cAChB,IAAA8B,aAAYhC,GAAwB,EAAGiC,WACnC,gBAAC,EAAkB,iBACXA,EAAK,CACTC,SAAUb,EACVP,GAAIU,EACJxB,WAAYiC,EAAMX,QAAUA,EAC5BA,MAAOA,IAENI,aAAiBS,SAAWT,EAAM1B,GAAc0B,KAGzD,CAACF,EAAQH,EAAYK,EAAOJ,IAG1Bc,GAAe,IAAAlC,cACjB,IAAA8B,aAAYrC,GAAoC0C,IACxCf,IAAUe,GACV1C,EAAS2B,MAGjB,IAGEgB,GAAsB,IAAApC,cACxB,EAAGF,aAAYL,cACX,gBAAC4C,EAAA,EAAc,CACXlD,UAAU,wBACVuC,KAAMA,EACNY,SAAUJ,EAAazC,GACvB8C,OAAQV,EAAY/B,MAG5B,CAACoC,EAAcR,EAAMG,IAGzB,OACI,gBAAC,EAAa,iBACNJ,EAAI,CACRxC,cAAc,sBACdE,UAAU,4DACVC,kBAAkB,gFAClBC,gBAAgB,wBAChBC,wBAAwB,kCACxBC,cAAe6C,EACf5C,OAAQ4B,IAEPC,K,0HCxEb,MAMA,GAAe,E,QAAA,IANsB,IACjC,uBAAK1C,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,6GC+FhB,EA7E8C,I,IAAA,SAC1CG,EAAQ,iBACRsD,EAAmB,QAAO,OAC1BC,EAAM,OACNC,EAAM,0BACNC,EAAyB,wBACzBC,EAAuB,yBACvBC,EAAwB,eACxBC,EAAiB,EAAAC,KAAI,sBACrBC,GAAwB,GAAK,EAC1BvB,GAAI,cAVmC,6KAY1C,MAAMwB,GAAc,IAAAjD,cACfkD,IACGJ,EAAeI,KAEnB,CAACJ,IAGL,OACI,gBAAC,IAAU,iBACHrB,EAAI,CACR0B,aAAa,EACbC,kBAAkB,kBAClBjE,UAAW,CACPkE,KAAM,IACF,yCACAR,GAEJS,UAAW,mBACXC,YAAa,sBAEjBC,eAAgB,IAChBV,eAAgBA,EAChBW,iBAAkB,CACdJ,KAAM,eACNC,UAAW,0BACXC,YAAa,6BAEjBG,kBAAkB,EAClBC,2BAA2B,IAE3B,uBAAKxE,UAAW,IAAW,eAAgBwD,IACtCD,EAEAM,GACG,qBACI7D,UAAU,cAAa,YACb,qBACVyE,KAAK,IACLC,SAAS,EAAAC,EAAA,GAAeb,IAEvBc,QAAQvB,IACL,wBAAMrD,UAAU,aAAaqD,GAGjC,gBAAC,EAAS,QAKtB,uBACIrD,UAAW,IAAW,aAAcyD,GAAwB,YAClD,cAET1D,GAGJ6E,QAAQtB,IACL,uBAAKtD,UAAU,eAAc,YAAW,gBACnCsD,I,gFCrFrB,MAkBA,GAlBiB,IAAAuB,aACb,CACI,EACAC,K,IADA,oBAAEC,EAAmB,SAAEhF,EAAQ,UAAEC,EAAS,OAAEgF,EAAM,OAAEC,GAAM,EAAK3C,GAAI,cAAnE,kEAEC,OACD,4CACQA,EAAI,CACRtC,UAAWA,GAAa,IAAW,gBAAiB+E,GAAoB,YAC7DE,EACXH,IAAKA,IAEJE,EAED,uBAAKhF,UAAU,aAAaD,M,+PCbxC,MAeA,GAAe,IAAAF,OAf8C,EAAGqF,YAC5D,uBAAKlF,UAAU,oCAAmC,YAAW,2BACzD,wBAAMA,UAAU,0BACZ,wBAAMA,UAAU,oCAAmC,YAAW,iBACzDkF,EAAOC,aACJ,IACR,gBAACC,EAAA,EAAgB,CAAC3D,GAAG,4BAGzB,wBAAMzB,UAAU,4BAA2B,YAAW,eACjDkF,EAAOG,S,eCRpB,MA0BA,GAAe,IAAAxF,OA1BgE,EAC3EyF,qBAEA,uBAAKtF,UAAU,oCAAmC,YAAW,oCACzD,wBAAMA,UAAU,0BACZ,wBAAMA,UAAU,oCAAmC,YAAW,0BAC1D,gBAACuF,EAAA,EAAe,CAACC,OAAQF,EAAgBG,QACrC,IACR,gBAACL,EAAA,EAAgB,CAAC3D,GAAG,sCAGzB,wBAAMzB,UAAU,6BACXsF,EAAgBI,UAAY,GACzB,wBAAM1F,UAAU,wCACZ,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,+CAAgD,IACrE,oCAAgB,6BACZ,gBAAC8D,EAAA,EAAe,CAACC,OAAQF,EAAgBI,cAKrD,oCAAgB,wBAAwBJ,EAAgBD,UC5BpE,MAMA,GAAe,E,SAAA,IANuB,IAClC,uBAAK7F,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,iPCwChB,EA/BqE,EACjEG,WACA4F,aACAC,cAEA,uBAAK5F,UAAU,yBACX,uBAAKA,UAAU,qEACX,wBAAMA,UAAU,aACZ,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,8BAI7B,uBAAKzB,UAAU,oCACX,uBAAKA,UAAU,cACVD,EACD,uBAAKC,UAAU,wCACX,0BACIA,UAAW,IAAW,oBAAqB,CAAE,aAAc2F,IAAa,YAC9D,oBACV9C,SAAU8C,EACVjB,QAASkB,EACT/D,KAAK,UAEL,gBAAC,EAAU,WCxB7BgE,EAAoE,EACtEX,SACAY,YACAH,cAAa,MAEb,MAAMI,GAAe,IAAAlF,cAAY,KAC7BiF,EAAUZ,EAAOG,QAClB,CAACH,EAAQY,IAEZ,OACI,sBAAI9F,UAAU,6DACV,gBAAC,EAAiB,CAAC2F,WAAYA,EAAYC,SAAUG,GACjD,gBAAC,EAAa,CAACb,OAAQA,OAYjCc,EAAsF,EACxFV,kBACAQ,YACAH,cAAa,MAEb,MAAMI,GAAe,IAAAlF,cAAY,KAC7BiF,EAAUR,EAAgBD,QAC3B,CAACC,EAAiBQ,IAErB,OACI,sBAAI9F,UAAU,6DACV,gBAAC,EAAiB,CAAC2F,WAAYA,EAAYC,SAAUG,GACjD,gBAAC,EAAsB,CAACT,gBAAiBA,OAqDzD,GAAe,IAAAzF,OAtCwD,EACnEoG,UAAU,GACVC,mBAAmB,GACnBC,oBAAmB,EACnBC,6BAA4B,EAC5BC,kBACAC,8BAEKL,EAAQM,QAAWL,EAAiBK,OAKrC,sBACIvG,UAAU,kDAAiD,YACjD,oBAETiG,EAAQO,KAAKtB,GACV,gBAACW,EAA0B,CACvBX,OAAQA,EACRS,WAAYQ,EACZM,IAAKvB,EAAOG,KACZS,UAAWO,MAIlBH,EAAiBM,KAAKlB,GACnB,gBAACU,EAAmC,CAChCV,gBAAiBA,EACjBK,WAAYS,EACZK,IAAKnB,EAAgBD,KACrBS,UAAWQ,OAtBhB,OCUTI,EAEF,EAAGC,yBAAwBC,uBAAsBC,aAAa,EAAAjD,KAAMkD,aAAYC,eAChF,MACIC,eACIC,UAAU,kBAAEC,MAEhB,UACE,QAAEC,IAAY,SAEdC,EAAoBC,IAClBH,MAIJG,GAAa,GACbP,MAGEQ,GAAgB,IAAAzG,cAClB,IAAA8B,aAAY0E,GAAmDtD,IACvD4C,GACAE,EAAWF,GAKO,KAAlB5C,EAAMwD,SAAgC,UAAdxD,EAAM0C,MAC9BW,EAAiBC,GACjBtD,EAAMY,qBAGd,CAACgC,EAAwBE,EAAYC,IAGnCU,GAAe,IAAA3G,cACjB,IAAA8B,aAAY0E,GAAkD,KAC1DD,EAAiBC,MAErB,IAGEI,GAAc,IAAA5G,cACf0B,GACG,gBAACT,EAAA,EAAK,CAAC4F,QAAM,EAAC3F,QAASQ,GACnB,gBAAC6C,EAAA,EAAgB,CAAC3D,GAAG,4BAG7B,IAGEkG,GAAqB,IAAA9G,cAAY,CAAC+G,EAAmBC,KACvD,OAAQD,GACJ,IAAK,eACD,OAAO,gBAACxC,EAAA,EAAgB,CAAC3D,GAAG,sCAEhC,IAAK,iBACD,OAAO,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,qCAEhC,QACI,OAAOoG,GAAgB,gBAACzC,EAAA,EAAgB,CAAC3D,GAAG,qCAErD,IAEGiB,GAAc,IAAA7B,cACfwG,GACG,EAAGzE,WAEK,gCACK+D,GACGA,EAAuBmB,QACvBnB,EAAuBmB,OAAO,IAC1B,gBAACC,EAAArH,EAAK,CAACmB,KAAMkG,EAAA,EAAUC,OAClBL,EAAmBhB,EAAuBmB,OAAO,GAAGzC,KAAMsB,EAAuBmB,OAAO,GAAGG,UAIxG,uBAAKjI,UAAU,sBACX,gBAACkI,EAAA,EAAS,iBACFtF,EAAK,cACGmE,EAASoB,UAAU,yBAC/BnI,UAAU,0CACVoI,UAAWd,EAAcD,GACzBpC,OAAO,wBACPkC,QAASA,KAGb,gBAACkB,EAAA,GAAM,CACHrI,UAAW,IAAW,qCAAsC,CACxD,YAAamH,IAEjBtE,SAAUqE,IACVzF,GAAG,wBACH6G,UAAW1B,EACXlC,QAAS8C,EAAaH,GACtBpC,OAAO,yBACPsD,QAASF,EAAA,GAAcG,WAEvB,gBAACpD,EAAA,EAAgB,CAAC3D,GAAG,gCAK7C,CACIkF,EACAW,EACAE,EACAZ,EACAG,EACAG,EACAS,IAIFc,GAAgB,IAAA5H,cAClB,IAAA8B,aAAW,EAAG0E,kBACV,gBAACqB,EAAA,EAAS,CACNC,MAAOjG,EAAY2E,GACnBhF,MAAOoF,EACPlF,KAAK,qBAGb,CAACkF,EAAa/E,IAGlB,OACI,4BAAU1C,UAAU,kCAChB,gBAAC,KAAY,KAAEyI,KAK3B,GAAe,EAAAG,EAAA,IACX,QAAsE,CAClEC,iBAAgB,KACL,CACHC,eAAgB,KAIlB,YAAAtB,CAAa,EAAD,G,wDACd,eAAEsB,IACApH,OAAO,YAAEqH,EAAW,qBAAEC,EAAoB,WAAEnC,KAE9C,MAAMxB,EAAOyD,EAAeG,OAE5B,UACUD,EAAqB3D,EAC/B,CAAE,MAAO6D,GACDA,aAAiBlB,OACjBnB,EAAWqC,GAGfH,EAAY1D,EAChB,CACJ,G,EAEA8D,iBAAgB,EAAC,SAAEpC,MACR,QAAO,CACV+B,gBAAgB,UAASM,SACrBrC,EAASoB,UAAU,sCA3BnC,EA+BG,IAAAtI,OAxME,I,IAAA,yBAAEwJ,EAAwB,uBAAEC,GAAsB,EAAKC,GAAS,cAAhE,uDACD,MAAM,QAAEpC,IAAY,SAEpB,OACI,gBAACqC,EAAA,EAAM,CAACC,eAAgBJ,IACnB,EAAGK,SAAQC,YACR,gCACKN,GACG,qCACkB,yBAAwB,gBACvBM,EACf3J,UAAW,IAAW,mBAAoB,CAAE,WAAYmH,IAAU,YACxD,mBACV1C,KAAK,IACLC,SAAS,EAAAC,EAAA,GAAe+E,IAExB,gBAACtE,EAAA,EAAgB,CAAC3D,GAAG,+BAG3B4H,GACE,uBAAKrJ,UAAW,IAAW,mBAAoB,CAAE,WAAYmH,KACzD,gBAAC/B,EAAA,EAAgB,CAAC3D,GAAG,+BAG3BkI,IAAWN,IACT,mCAAe,yBAAyB5H,GAAG,0BACvC,gBAACiF,EAAc,iBAAK6C,IACnBD,GAA0B,gBAAC,EAAkB,iBAAKC,Y,kDCnEnF,MAEA,GAFyB,E,SAAAK,eAAqC,CAAEtJ,SAAU,EAAAsD,M,kDCC1E,MAMA,EANiD,EAAG7D,WAAUkF,YAC1D,wBAAMjF,UAAU,yBAAwB,YAAYiF,GAC/ClF,E,uFCPT,MAMA,GAAe,EAAA8J,EAAA,IANsB,IACjC,uBAAKrK,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,wGCIhB,GAAe,EAAAiK,EAAA,IANwB,IACnC,uBAAKrK,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,6HCIhB,GAAe,EAAAiK,EAAA,IANqB,IAChC,uBAAKrK,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,wGCOhB,IAAYkK,GAAZ,SAAYA,GACR,gBACA,cACA,oBACA,mBACH,CALD,CAAYA,IAAAA,EAAS,KAsBrB,MAoCA,EApC6C,EACzC/E,sBACAhF,WACAgK,OACA9E,SACApD,WAEA,MAAMmI,GAAc,IAAAC,SAEpB,OACI,0CACsBD,EAClBhK,UAAW,IACP,WACA+E,EACA,CAAE,iBAAkBlD,IAASiI,EAAUI,OAASrI,GAChD,CAAE,kBAAmBA,IAASiI,EAAU9B,OACxC,CAAE,oBAAqBnG,IAASiI,EAAUK,SAC1C,CAAE,oBAAqBtI,IAASiI,EAAUM,UAC7C,YACUnF,GAEX,uBAAKjF,UAAU,iCAAiC+J,GArC5D,SAA2BlI,GACvB,OAAQA,GACJ,KAAKiI,EAAU9B,MACf,KAAK8B,EAAUM,QACX,OAAO,gBAAC,EAAS,MAErB,KAAKN,EAAUK,QACX,OAAO,gBAAC,EAAW,MAEvB,KAAKL,EAAUI,KACf,QACI,OAAO,gBAAC,EAAQ,MAE5B,CAwBoEG,CAAkBxI,IAE1E,mCACeA,IAASiI,EAAU9B,MAAQ,YAAc,SACpDhI,UAAU,mCACVyB,GAAIuI,EACJM,KAAMzI,IAASiI,EAAU9B,MAAQ,QAAU,UAE1CjI,I,kDC3DF,SAASwK,EACpBC,GAEA,MAAM,gBACFC,EACAzD,eACI0D,MAAM,UAAEC,EAAS,WAAEC,EAAU,oBAAEC,GAC/B5D,UAAU,iBACN6D,EAAgB,0BAChBC,EAAyB,iBACzB5E,EAAgB,0BAChBC,GAEJ0B,QAAQ,oBACJkD,EAAmB,6BACnBC,EAA4B,qBAC5BC,EAAoB,8BACpBC,KAGRX,EAEEY,EAAST,IAEf,OAAKS,EAIE,CACHzE,uBAAwBqE,KAAyBC,IACjDlC,YAAa0B,EAAgB1B,YAC7BC,qBAAsByB,EAAgBzB,qBACtCnC,WAAY4D,EAAgB5D,WAC5BZ,QAAS2E,KAAgB,IACzB1E,iBAAkB2E,KAAyB,IAC3CjE,qBAAsBkE,KAAsBC,IAC5C5E,iBAAkBA,IAClBC,0BAA2BA,IAC3BC,gBAAiBoE,EAAgBY,aACjC/E,yBAA0BmE,EAAgBa,sBAC1CC,uBAAwBL,KAA0BC,IAClD9B,yBAA0B+B,EAAOI,iBAAiBC,uBAhB3C,IAkBf,C,shECxCA,MAwBA,GAxBiB,IAAA5G,aACb,CACI,EACAC,K,IADA,oBAAEC,EAAmB,OAAEE,EAAM,UAAEjF,EAAS,uBAAE0L,GAAsB,EAAKpJ,GAAI,cAAzE,uEAGA,OACI,4CACQA,EAAI,CACRtC,UACIA,GACA,IACI,CAAE,oBAAqB0L,GACvB,aACA,+BACA3G,GACH,YAEME,EACXH,IAAKA,Q,iFCVrB,MA4BA,EA5BqD,EAAG/E,WAAU4L,OAAMpI,aACpE,MAAMqI,GAAc,IAAA/K,cACfa,GACG,gBAACmK,EAAA,EAAK,iBACEnK,EAAK,CACT+B,wBAAwB,kBACxBH,OACI,gBAAC+E,EAAA,GAAM,CAAC3D,QAAShD,EAAMiC,eAAgBmI,KAAMzD,EAAA,GAAW0D,OACpD,gBAAC3G,EAAA,EAAgB,CAAC3D,GAAG,sBAG7B8B,OAAQA,EACRM,uBAAuB,IAEtB8H,IAGT,CAACpI,EAAQoI,IAGb,OACI,gBAACK,EAAA,EAAY,CAACC,MAAOL,IAEhB,EAAGlH,aAAc,qBAAGA,SAAS,EAAAC,EAAA,GAAeD,IAAW3E,M,eCtCpE,MAWA,EAX+D,EAAGA,cAC9D,gCACKA,EAASmM,MAAM,MAAM1F,KAAI,CAAC2F,EAAM1F,IAC7B,gBAAC,EAAA2F,SAAQ,CAAC3F,IAAKA,GACV0F,EACD,+BCGhB,IAAYE,GAAZ,SAAYA,GACR,cACA,sBACA,eACH,CAJD,CAAYA,IAAAA,EAAmB,KA2B/B,MA8BMC,GAAoC,EAAA1D,EAAA,IA5BtC,EAAG7B,WAAUxE,OAAMgK,YACnB,MAAMC,EAAkBzF,EAASoB,UAAU,gDAAiD,CACxFsE,IAAK,KAEHC,GAAc,EAAAC,EAAA,GAAYH,GAE1BI,EAAeF,EACjB,gCACKA,EAAY,GACb,gBAAC,EAAS,CACNf,KAAM,gBAAC,EAAa,KAAEY,GACtBhJ,OACI,gBAACsJ,EAAA,EAAW,KACR,gBAACzH,EAAA,EAAgB,CAAC3D,GAAG,mCAI5BiL,EAAY,IAEhBA,EAAY,IAEjB,EAIJ,OAAO,gBAACI,EAAA,EAAiB,CAACF,aAAcA,EAAcrK,KAAMA,OAW1DwK,EAAqF,EACvFxK,OACAkK,UAEA,MAAMG,GAAe,IAAAI,UACjB,IACIP,EACI,gBAACQ,EAAA,EAAc,CAACvC,KAAM,CAAE+B,OAAOhL,GAAG,kDAElC,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,yCAE7B,CAACgL,IAGL,OAAO,gBAACK,EAAA,EAAiB,CAACF,aAAcA,EAAcrK,KAAMA,KAG1D2K,EAA6E,EAC/E3K,OACAgK,YAEA,MAAM7J,GAAc,IAAA7B,cAChB,EAAG+B,WAAwB,gBAAC,EAAQ,CAACuK,aAAcZ,EAAOhK,KAAMK,EAAML,KAAM6K,UAAQ,KACpF,CAACb,IAGL,OAAO,gBAAC7D,EAAA,EAAS,CAACC,MAAOjG,EAAaH,KAAM,GAAGA,WAiCnD,SAAe,IAAA1C,OA9BgE6B,IAC3E,MAAM,KAAEG,GAASH,EAEjB,OACI,gBAAC2L,EAAA,EAAQ,CACLtI,oBAAoB,iBACpBC,OACI,gBAACsI,EAAA,EAAM,KACH,gBAAClI,EAAA,EAAgB,CAAC3D,GAAG,wDAczC,SAAmCC,GAC/B,OAAOA,EAAMG,OAASwK,EAAoBkB,QAC9C,CAZaC,CAA0B9L,IAAU,gBAACwL,EAAwB,iBAAKxL,IAc/E,SAA+BA,GAC3B,OAAOA,EAAMG,OAASwK,EAAoBR,KAC9C,CAfa4B,CAAsB/L,IAAUG,IAASwK,EAAoBR,MAC1D,gBAACS,EAAiC,iBAAK5K,IAEvC,gBAACqL,EAA4B,iBAAKrL,QCrHnC,SAASgM,EACpBxE,EACAf,EACAwF,GAEA,OAAQzE,EAAMrH,MACV,IAAK,kBACD,OAAOsG,EAAU,yBAErB,IAAK,gCACD,OAAOA,EAAUe,EAAM0E,SAE3B,IAAK,oBACD,OAAOzF,EAAU,6BAErB,IAAK,yBACD,OAAOA,EAAU,yCAErB,IAAK,2BACD,OAAOA,EAAU,oCAErB,IAAK,eACD,OAAOA,EAAU,8BAErB,IAAK,mBACD,OAAOA,EAAU,0BAErB,QACI,IACI,IAAA0F,UACI,CACI,qCACA,uBACA,kBACA,iBACA,wBACA,sBAEJ3E,EAAMyC,MAAQzC,EAAMyC,KAAK9J,MAG7B,OAAOsG,EAAU,+BAAgC,CAAEF,QAASiB,EAAMjB,UAGtE,GAAI0F,GAAkBzE,EAAMyC,MAAQzC,EAAMyC,KAAK7D,QAAUoB,EAAMyC,KAAK7D,OAAOvB,OAAQ,CAK/E,OAJiB2C,EAAMyC,KAAK7D,OAAOtB,KAAKsH,GACpC3F,EAAU,kBAAkB2F,EAAIzI,UAGpB0I,KAAK,IACzB,CAEA,OAAI7E,EAAMjB,QACCiB,EAAMjB,QAGK,kBAAfiB,EAAMrH,KACPsG,EAAU,4BACVA,EAAU,6BAE5B,CAEO,SAAS6F,EACZ9E,EACAf,GAEA,MAAmB,kBAAfe,EAAMrH,KACCsG,EAAU,8BAGF,4BAAfe,EAAMrH,KACCsG,EAAU,0CAGF,6BAAfe,EAAMrH,KACCsG,EAAU,mCAGdA,EAAU,uBACrB,CC7Ee,SAAS8F,EAA6BhM,GACjD,MACOiM,EAAQ,GAAIC,EAAO,IAAMlM,EAAMiK,MAAM,IAAIkC,OAAO,cAEvD,MAAK,QAAQC,KAAKH,IAAW,QAAQG,KAAKF,GAInC,CACHD,MAAwB,IAAjBA,EAAM3H,OAAe,IAAI2H,IAAUA,EAAMI,MAAM,EAAG,GACzDH,KAAsB,IAAhBA,EAAK5H,OAAe,KAAK4H,IAASA,EAAKG,MAAM,EAAG,IAL/C,CAAEJ,MAAO,GAAIC,KAAM,GAOlC,C,eCfe,SAASI,EAAyBtM,EAAeuM,EAAY,KACxE,MAAM,KAAEC,IAAS,IAAAC,QAAOzM,GAExB,OAAKwM,EAIExM,EAAM0M,QAAQ,IAAIP,OAAOI,EAAW,KAAM,IAHtCvM,CAIf,CCRe,SAAS2M,EAAyBC,EAAkBC,GAC/D,OAAO,IAAAC,SAAQ,CAACD,EAAWD,IAAWd,KAAK,IAC/C,CAEO,SAASiB,EAA2B/M,GAIvC,MAAO6M,EAAWD,GAAY5M,EAAM4L,SAAS,KAAO5L,EAAMiK,MAAM,KAAO,MAAC+C,EAAWhN,GAEnF,MAAO,CAAE6M,YAAWD,WACxB,CCGO,SAASK,EAAoBC,GAChC,OAAMA,aAAkBC,QAIjB,aAAcD,CACzB,CAEO,SAASE,EAAoBF,GAChC,OAAMA,aAAkBC,QAIjB,aAAcD,CACzB,CCPA,MAEA,GAFuB,IAAAvF,oBAA+CqF,G,oCCd/D,MAAMK,EAA2D,EACpEC,qBACAC,sBAAsB,MAEtB,gCACKD,EACG,gBAACE,EAAoB,CACjBlN,KAAK,QACLV,KAAMwK,EAAoBqD,KAC1BjD,IAAK8C,IAGT,gBAACE,EAAoB,CACjBlN,KAAK,QACLgK,MAAOiD,EACP3N,KAAMwK,EAAoBkB,Y,yBCX3B,SAASoC,GAA2B,qBAC/CC,EAAoB,0BACpBC,EAAyB,SACzB9I,IAEA,MAAM+I,EAEF,CACAC,sBAAsB,UAAS3G,YAG7B4G,GAAwB,QAAOF,GAAcG,OChBxC,UAA4C,0BACvDJ,EAAyB,SACzB9I,IAEA,MAAM+I,EAEF,CAAC,EASL,OAPID,IACAC,EAAavD,OAAQ,UAAU2D,MAC3B,EAAC,GACDnJ,EAASoB,UAAU,oDAIpB,QAAO2H,EAClB,CDCQK,CAAmC,CAAEN,4BAA2B9I,cAGpE,OAAO6I,EACDI,EAAsBC,OAAOL,GAC7BI,CACV,C,IE/BKI,G,aAAL,SAAKA,GACD,sBACA,4BACA,2BACA,wBACA,gCACA,0BACA,6BACA,kBACA,+BACA,6BACA,8BACH,CAZD,CAAKA,KAAAA,GAAiB,KActB,YCAe,SAASC,GACpBtJ,GAEA,OAAQuJ,IACJ,IAAI/N,EAkBL,SACHwE,GAEA,OAAQuJ,IACJ,MAAMC,EAA0C,CAC5C,CAACC,GAAA,EAAgBC,QAAS1J,EAASoB,UAAU,4BAC7C,CAACqI,GAAA,EAAgBE,UAAW3J,EAASoB,UAAU,8BAC/C,CAACqI,GAAA,EAAgBG,WAAY5J,EAASoB,UAAU,4BAChD,CAACqI,GAAA,EAAgBI,MAAO7J,EAASoB,UAAU,0BAC3C,CAACqI,GAAA,EAAgBK,UAAW9J,EAASoB,UAAU,8BAC/C,CAAC,GAAkB2I,WAAY/J,EAASoB,UAAU,gCAClD,CAACqI,GAAA,EAAgBO,QAAShK,EAASoB,UAAU,4BAC7C,CAAC,GAAkB6I,QAASjK,EAASoB,UAAU,4BAC/C,CAAC,GAAkB8I,cAAelK,EAASoB,UAAU,mCACrD,CAAC,GAAkB+I,cAAenK,EAASoB,UAAU,0BAGzD,OAAOoI,EAAaD,EAAO7O,KAAO8O,EAAaD,EAAOA,QAE9D,CArCmBa,CAA+BpK,EAA/BoK,CAAyCb,GAcpD,OAZK/N,GAAQ+N,EAAOA,SAAW,GAAkBc,cAC7C7O,EAAO+N,EAAOlF,QAAUkF,EAAOlF,OAAOjG,aAGrC5C,IACDA,GAAO,IAAA8O,aACH,IAAAC,KAAIhB,EAAQ,gEACRA,EAAOA,QACPA,EAAO7O,KAIZc,EAEf,C,wDC3BA,MAcA,IAAe,IAAA1C,OAd0D,EACrEqC,UACAC,YAGI,sBACInC,UAAU,kFACVyB,GAAIU,GAEHD,K,4BCZb,MAgCA,GA9BK,EAAGqP,uBACJ,MAAM,gBAAE9G,IAAoB,UAqB5B,OAnBA,IAAA+G,YAAU,KACN,IACS/G,EAAgBgH,kBAAkB,CACnC5C,SAAU,KAAgB6C,4BAC1BC,8BAA+B,CAC3BC,kBAAmB,2CAItBnH,EAAgBoH,oBAAoB,CACrChD,SAAU,KAAgB6C,6BAElC,CAAE,MAAOxI,GACDA,aAAiBlB,QACjBuJ,SAAAA,EAAmBrI,GAE3B,IACD,IAGC,mCACc,wCACVzH,GAAG,2CCaf,GAxCkG,EAC9F8P,uBAEA,MAAM,gBAAE9G,IAAoB,UAkC5B,OAhCA,IAAA+G,YAAU,KACN,IACS/G,EAAgBgH,kBAAkB,CACnC5C,SAAU,KAAgBiD,sBAC1BC,UAAW,CACPH,kBAAmB,gCAItBnH,EAAgBoH,oBAAoB,CACrChD,SAAU,KAAgBiD,uBAElC,CAAE,MAAO5I,GACDA,aAAiBlB,QACjBuJ,SAAAA,EAAmBrI,GAE3B,CAEA,MAAO,KACH,IACSuB,EAAgBoH,oBAAoB,CACrChD,SAAU,KAAgBiD,uBAElC,CAAE,MAAO5I,GACDA,aAAiBlB,QACjBuJ,SAAAA,EAAmBrI,GAE3B,KAGL,IAEI,mCAAe,6BAA6BzH,GAAG,gCCP1D,GA1BK,EAAGoN,WAAUmD,cAAaT,uBAC3B,MAAM,gBAAE9G,IAAoB,UAsB5B,OApBA,IAAA+G,YAAU,KACN,IACS/G,EAAgBgH,kBAAkB,CACnC5C,WACA,CAACA,GAAW,CACR+C,kBAAmBI,KAItBvH,EAAgBoH,oBAAoB,CACrChD,YAER,CAAE,MAAO3F,GACDA,aAAiBlB,QACjBuJ,SAAAA,EAAmBrI,GAE3B,IAED,IAEI,mCAAgB8I,EAAavQ,GAAIuQ,K,gBCtB5C,MAAMC,GAAyD,CAC3DC,KAAM,CACFC,WAAY,mBACZC,WAAW,IAAAC,OAAK,IAAM,kCAE1BC,QAAS,CACLH,WAAY,UACZC,WAAW,IAAAC,OAAK,IAAM,kCAE1BE,aAAc,CACVJ,WAAY,eACZC,WAAW,IAAAC,OACP,IAAM,iCAGdG,WAAY,CACRL,WAAY,aACZC,WAAW,IAAAC,OACP,IAAM,kCAGdI,OAAQ,CACJN,WAAY,SACZC,WAAW,IAAAC,OACP,IAAM,kCAGdK,GAAI,CACAP,WAAY,KACZC,WAAW,IAAAC,OAAK,IAAM,kCAE1BM,OAAQ,CACJR,WAAY,cACZC,WAAW,IAAAC,OACP,IAAM,kCAGdO,QAAS,CACLT,WAAY,UACZC,WAAW,IAAAC,OACP,IAAM,iCAGdQ,SAAU,CACNV,WAAY,WACZC,WAAW,IAAAC,OACP,IAAM,iCAGdS,SAAU,CACNX,WAAY,WACZC,WAAW,IAAAC,OAAK,IAAM,iCAE1BU,SAAU,CACNZ,WAAY,WACZC,WAAW,IAAAC,OACP,IAAM,kCAGdW,IAAK,CACDb,WAAY,MACZC,WAAW,IAAAC,OAAK,IAAM,kCAE1BY,SAAU,CACNd,WAAY,WACZC,WAAW,IAAAC,OAAK,IAAM,kCAE1Ba,MAAO,CACHf,WAAY,QACZC,WAAW,IAAAC,OACP,IAAM,kCAGdc,IAAK,CACDhB,WAAY,MACZC,WAAW,IAAAC,OAAK,IAAM,kCAE1Be,SAAU,CACNjB,WAAY,WACZC,WAAW,IAAAC,OAAK,IAAM,kCAE1BgB,KAAM,CACFlB,WAAY,OACZC,WAAW,IAAAC,OAAK,IAAM,kCAE1BiB,QAAS,CACLnB,WAAY,UACZC,WAAW,IAAAC,OACP,IAAM,kCAGdkB,GAAI,CACApB,WAAY,aACZC,WAAW,IAAAC,OACP,IAAM,kCAGdmB,UAAW,CACPrB,WAAY,YACZC,WAAW,IAAAC,OAAK,IAAM,kCAE1BoB,KAAM,CACFtB,WAAY,OACZC,WAAW,IAAAC,OAAK,IAAM,kCAE1BqB,IAAK,CACDvB,WAAY,WACZC,WAAW,IAAAC,OACP,IAAM,kCAGdsB,SAAU,CACNxB,WAAY,WACZC,WAAW,IAAAC,OAAK,IAAM,kCAE1BuB,KAAM,CACFzB,WAAY,OACZC,WAAW,IAAAC,OAAK,IAAM,mCAIf,SAASwB,GAA6BhS,G,MAEjD,OAA8B,QAAvB,EAAAoQ,GAAkBpQ,UAAK,eAAEsQ,kBAAclD,CAClD,CAkBO,SAAS6E,GAAsBC,GAClC,MAAMC,EAJC5E,OAAOD,OAAO8C,IAAmBzL,KAAKyN,GAAWA,EAAO9B,aAM/D,OAAO4B,EAAgBG,QAAQrS,GAASmS,EAAyBnG,SAAShM,IAC9E,C,eClJA,MAkBA,IAAe,IAAAhC,OAlBgD,EAAGsU,eAC9D,MAAMC,EAAY,CACdrP,oBAAqB,gBACrB+G,KAAM,KAASuI,OACfpP,OAAQ,oBAAoBkP,GAAY,aAGtCG,EDuHH,SAAuCzS,GAC1C,IAAKA,EACD,OAGJ,MAAM0S,EAAiBnF,OAAOD,OAAO8C,IAAmBuC,MACnDP,GAAWA,EAAO9B,aAAetQ,IAGtC,OAAO0S,EAAiBA,EAAenC,eAAYnD,CACvD,CCjI0BwF,CAA8BN,GAEpD,OAAOG,EACH,gBAAC,EAAAI,SAAQ,KACL,gBAACJ,EAAa,iBAAKF,KAGvB,uBAAKpU,UAAU,8DCkBvB,IAAe,IAAAH,OA/BwD,EACnE8U,mBACAC,gBAEA,MAAMC,EAAoBf,GAAsBc,GAEhD,OAAKC,EAAkBtO,OAKnB,sBAAIvG,UAAU,wBACT6U,EAAkBrO,KAAK3E,GACpB,sBACI7B,UAAW,IACP,4BACA,CAAE,YAAa2U,IAAqB9S,GACpC,CAAE,aAAc8S,GAAoBA,IAAqB9S,IAC5D,YACU,GAAGA,SACd4E,IAAK5E,GAEL,wBAAM7B,UAAU,YACZ,gBAAC,GAAc,CAACmU,SAAUtS,SAhBnC,Q,gBC0BR,SAASiT,GACZ/N,EACAgO,EACAvJ,EACAwJ,GAMA,MAAMC,EAAWC,GAAiB,GAAGH,IAAWG,IAEhD,OAAQ5E,I,QACJ,MAAM6E,GAA2C,QAAzB,EAAA7E,EAAO8E,0BAAkB,eAAEC,iBAC7C/E,EAAO8E,mBAAmBC,gBAC1B,GACAC,EAAajF,GAAqBtJ,EAArBsJ,CAA+BC,GAC5CiF,ECxDC,SACXxO,GAEA,OAAQuJ,IACJ,MAAM,YAAEnL,GAAgBmL,EAAOlF,OAEzBoK,EAA8C,iBAA/BrQ,aAAW,EAAXA,EAAasQ,eAElC,GACInF,EAAO7O,KAAO+O,GAAA,EAAgBkF,sBAC9BpF,EAAO7O,KAAO+O,GAAA,EAAgBkB,6BAC9BpB,EAAO7O,KAAO+O,GAAA,EAAgBsB,sBAChC,CACE,MAAM,6BAAE6D,GAAiCrF,EAAO8E,mBAEhD,OAAIO,EACOA,EAA6BC,QAAUD,EAG3C,WACX,CAEA,OACKH,GAAgBlF,EAAO7O,KAAO+O,GAAA,EAAgBqF,SAC/CvF,EAAO7O,KAAO+O,GAAA,EAAgBsF,QAEvB/O,EAASoB,UAAU,kCAG1BqN,EACOzO,EAASoB,UAAU,4BAGvBhD,GAAe,GAE9B,CDqBkC4Q,CAA4BhP,EAA5BgP,CAAsCzF,GAG1D0F,EAA8H,CAChI,CAAC,GAAkBC,YAAa,CAC5BC,QAAS,GACTC,UAAWb,GAEf,CAAC9E,GAAA,EAAgB4F,gBAAiB,CAC9BF,QAAS5F,EAAO4F,SAAW,GAC3BC,UAAW7F,EAAO4F,QAAU,GAAKX,GAErC,CAAC/E,GAAA,EAAgBsB,uBAAwB,CACrCoE,QAASjB,EAAQ,0DACjBkB,UAAWZ,EACXc,SAAW3U,GAAgE,gBAAC,GAA2B,iBAAKA,KAEhH,CAAC,GAAkBuP,cAAe,CAC9BiF,QAASjB,EAAQ,0DACjBkB,UAAWZ,GAEf,CAAC/E,GAAA,EAAgB8F,cAAe,CAC5BJ,QAAS5F,EAAO4F,SAAW,GAC3BC,UAAWZ,GAEf,CAAC/E,GAAA,EAAgB+F,6BAA8B,CAC3CL,QAAS5F,EAAO4F,SAAW,GAC3BC,UAAWZ,GAEf,CAAC/E,GAAA,EAAgBgG,2BAA4B,CACzCN,QAASjB,EAAQ,mDACjBkB,UAAW,GACXE,SAAW3U,GAAsC,gBAAC,GAAiC,iBAAKA,KAE5F,CAAC8O,GAAA,EAAgBkB,6BAA8B,CAC3CwE,QAASjB,EAAQ,0DACjBkB,UAAWZ,EACXc,SAAW3U,GAAsC,gBAAC,GAAiC,iBAAKA,KAE5F,CAAC8O,GAAA,EAAgBiG,sCAAuC,CACpDP,QAAS5F,EAAO4F,SAAW,GAC3BC,UAAW7F,EAAO4F,QAAU,GAAKX,GAErC,CAAC/E,GAAA,EAAgBkG,gBAAiB,CAC9BR,QAASjB,EAAQ,mDACjBkB,UAAW,GACXE,SAAW3U,GAAsC,gBAAC,GAA0B,eAACsQ,YAAY,oCAAuCtQ,KAEpI,CAAC8O,GAAA,EAAgBkF,sBAAuB,CACpCQ,QAASjB,EAAQ,0DACjBkB,UAAWZ,EACXc,SAAW3U,GAAsC,gBAAC,GAA0B,eAACsQ,YAAY,2CAA8CtQ,KAE3I,CAAC8O,GAAA,EAAgBmG,iCAAkC,CAC/CT,QAAS5F,EAAO4F,SAAW,GAC3BC,UAAW7F,EAAO4F,QAAU,GAAKX,GAErC,CAAC,GAAkBrE,cAAe,CAC9BgF,QAASjB,EAAQ,4CACjBkB,UAAWb,GAEf,CAAC9E,GAAA,EAAgBC,QAAS,CACtByF,QAASjB,EAAQ,qDACjBkB,UAAWpP,EAASoB,UAAU,qCAElC,CAACqI,GAAA,EAAgBE,UAAW,CACxBwF,SAAS,EAAAU,GAAA,GAAoBpL,EAAkB,oDAA2E,OAArBwJ,EAA4BC,EAAQ,8CAAgDA,EAAQ,yDACjMkB,UAAWb,GAEf,CAAC9E,GAAA,EAAgBG,WAAY,CACzBuF,QAASjB,EAAQ,4CACjBkB,UAAW,IAEf,CAAC3F,GAAA,EAAgBqG,UAAW,CACxBX,QAASjB,EAAQ,4DACjBkB,UAAW,IAEf,CAAC3F,GAAA,EAAgBI,MAAO,CACpBsF,QAAS,GACTC,UAAWZ,GAEf,CAAC/E,GAAA,EAAgBK,UAAW,CACxBqF,QAASjB,EAAQ,8CACjBkB,UAAW,IAEf,CAAC,GAAkBrF,WAAY,CAC3BoF,QAASjB,EAAQ,yCACjBkB,UAAW,IAEf,CAAC,GAAkBW,eAAgB,CAC/BZ,QAASjB,EAAQ,yCACjBkB,UAAW,IAEf,CAAC3F,GAAA,EAAgBuG,MAAO,CACpBb,QAASjB,EAAQ,mDACjBkB,UAAW,IAEf,CAAC3F,GAAA,EAAgBO,QAAS,CACtBmF,SAAkC,QAAzB,EAAA5F,EAAO8E,0BAAkB,eAAE4B,cAC1B/B,EAAQ,mDACRA,EAAQ,4CAClBkB,UAAWZ,GAEf,CAAC/E,GAAA,EAAgByG,QAAS,CACtBf,QAASjB,EAAQ,qDACjBkB,UAAW,IAEf,CAAC3F,GAAA,EAAgB0G,YAAa,CAC1BhB,QAAS,gEACTC,UAAW,IAEf,CAAC,GAAkBnF,QAAS,CAExBkF,QACI5F,EAAO7O,KAAO+O,GAAA,EAAgB4F,gBAAkB9F,EAAO4F,QACjD5F,EAAO4F,QACPjB,EAAQ,kDAClBkB,UAAW,IAEf,CAAC3F,GAAA,EAAgB2G,SAAU,CACvBjB,QAASjB,EAAQ,sCACjBkB,UAAWpP,EAASoB,UAAU,sCAElC,CAACqI,GAAA,EAAgB4G,QAAS,CACtBlB,QAASjB,EAAQ,qDACjBkB,UAAWpP,EAASoB,UAAU,qCAElC,CAACqI,GAAA,EAAgB6G,KAAM,CACnBnB,QAASjB,EAAQ,kCACjBkB,UAAWpP,EAASoB,UAAU,kCAElC,CAAC,GAAkBmP,aAAc,CAC7BpB,QAASjB,EACL,sCAAsC3E,EAAO7O,GAAGgU,qBAEpDU,UAAW,IAEf,CAAC3F,GAAA,EAAgBqF,SAAU,CACvBK,QAAS,uEACa,WAAlB5F,EAAOA,OAAsB,OAASA,EAAOA,aAEjD6F,UAAWZ,GAEf,CAAC/E,GAAA,EAAgBsF,SAAU,CACvBI,QAAS,uEACa,WAAlB5F,EAAOA,OAAsB,OAASA,EAAOA,aAEjD6F,UAAWZ,GAEf,CAAC/E,GAAA,EAAgB+G,QAAS,CACtBrB,QACsB,gBAAlB5F,EAAOA,OACD,GACA2E,EAAQ,iCAAiC3E,EAAOA,cAC1D6F,UAAWZ,GAEf,CAAC/E,GAAA,EAAgBgH,aAAc,CAC3BtB,QAAS,CAAC,cAAe,OAAQ,eAAerI,SAASyC,EAAO7O,IAC1D,GACAwT,EAAQ,sCAAsC3E,EAAO7O,GAAGgU,qBAC9DU,UAAWb,GAEf,CAAC9E,GAAA,EAAgBiH,UAAW,CACxBvB,QAASf,EAAgBtH,SAASyC,EAAO7O,IACnCwT,EAAQ,iCAAiC3E,EAAO7O,GAAGgU,qBACnD,GACNU,UACsB,SAAlB7F,EAAOA,OACDvJ,EAASoB,UAAU,yCACnBmN,GAEd,CAAC9E,GAAA,EAAgBkH,WAAY,CACzBxB,QAASf,EAAgBtH,SAASyC,EAAO7O,IACnCwT,EAAQ,iCAAiC3E,EAAO7O,GAAGgU,qBACnD,GACNU,UACsB,SAAlB7F,EAAOA,OACDvJ,EAASoB,UAAU,yCACnBmN,GAEd,CAAC9E,GAAA,EAAgBmH,gBAAiB,CAC9BzB,QAAS,GACTC,UAAWpP,EAASoB,UAAU,oCAItC,GAAImI,EAAOsH,UAAYpH,GAAA,EAAgBqH,eAAgB,CACnD,GAAkB,gBAAdvH,EAAO7O,GACP,MAAO,CAAEyU,QAAS,GAAIC,UAAWpP,EAASoB,UAAU,6BAGxD,GAAkB,QAAdmI,EAAO7O,GACP,MAAO,CAAEyU,QAAS,GAAIC,UAAWpP,EAASoB,UAAU,mDAGxD,GAAkB,iBAAdmI,EAAO7O,GACP,MAAO,CAAEyU,QAAS,GAAIC,UAAWpP,EAASoB,UAAU,qDAE5D,CAEA,OAAImI,EAAO7O,KAAO+O,GAAA,EAAgBsH,oBACvB9B,EAAaxF,GAAA,EAAgBmG,iCAGpCrG,EAAO7O,KAAO+O,GAAA,EAAgBuH,yBACvB/B,EAAaxF,GAAA,EAAgBiG,sCAOpCnG,EAAO7O,KAAO+O,GAAA,EAAgBwH,mBAC9B1H,EAAOA,SAAW,GAAkB2F,WAE7BD,EAAa,GAAkBC,YAGtC3F,EAAO7O,KAAO+O,GAAA,EAAgByH,QACvB,CAAE/B,QAAS5F,EAAO4F,SAAW,GAAIC,UAAWpP,EAASoB,UAAU,yCAItE6N,EAAa1F,EAAOsH,SAAW,KAC/B5B,EAAa1F,EAAO7O,KACpBuU,EAAa1F,EAAOA,SACpB0F,EAAa,GAAkBC,YAG3C,CA0HA,UAAe,EAAAiC,GAAA,IACX,EAAAtP,EAAA,IAAa,EAAAuP,EAAA,IAvBjB,UAA4B,cAAEnR,IAC1B,MACI0D,MAAM,UAAEC,EAAS,eAAEyN,IACnBpR,EACEoE,EAAST,IAET0N,EAAcD,KAAoB,GAExC,IAAKhN,EACD,OAAO,KAGX,MAAM4J,EAAmB5J,EAAOkN,aAAatD,iBAE7C,MAAO,CACHqD,cACA7M,iBAAkBJ,EAAOI,iBACzBwJ,mBACAuD,YAAanN,EAAO6J,QAE5B,GAGiB,EAAiC,IAAApV,OAzG9C,EAAG0Y,cAAa/M,mBAAkBwJ,mBAAkBzD,mBAAkBiH,QAAUrJ,UAAUkJ,cAAa1X,aAAYoG,WAAUuJ,aAC7H,MAAMgF,EAAajF,GAAqBtJ,EAArBsJ,CAA+BC,IAC5C,QAAE4F,EAAO,UAAEC,EAAS,SAAEE,GAAavB,GAAsB/N,EAAUwR,EAAa/M,EAAkBwJ,EAA/DF,CAAiFxE,IACpH,QAAEnJ,IAAY,UAoCpB,OACI,uBAAKnH,UACD,IACI,kCACA,CAAC,4CAA6CsQ,EAAO7O,GAAGoM,SAAS,gBAGrE,uBACI7N,UAAU,sCAAqC,YACpC,kBAAkBsQ,EAAO7O,MAEnCyU,GACG,uBACIuC,IAAK,GAAGnD,SACRtV,UAAW,IACP,4BACA,CAAC,qCAAoD,aAAdsQ,EAAO7O,IAC9C,CAAC,sCAAuC6O,EAAO7O,GAAGoM,SAAS,eAC9D,YACS,sBACV6K,IAAKxC,IAIZC,GACG,uBAAKnW,UAAW,IAAW,6BACvB,CAAE,aAAcmH,IAAU,YAChB,uBACTgP,GApCD,MAChB,MAAMrV,EAAOuV,aAAoBvT,SAAWuT,EAAS,CAAE9E,mBAAkB1C,SAAUyB,EAAO7O,KAAQ4U,EAElG,OAAOvV,EAAO,uBAAKd,UAAU,2CACxBc,GACI,MAkCA6X,IAEL,uBAAK3Y,UAAU,4BACX,gBAAC,GAAkB,CACf4U,WAAW,IAAA7F,SAAQuB,EAAOsI,eAAepS,IAAIqN,KAC7Cc,iBAtEY,MACxB,IAAKhU,EACD,OAGJ,MAAMkY,EA1Bd,SACIR,EACA/H,EACAnB,GAKA,OAH6BkJ,EAAYnE,QAAO/B,GAAcA,EAAW2G,WAAaxI,EAAO7O,KAC7C+S,MAAKrC,GAAcA,EAAW4G,cAAgB5J,EAAO6J,cAGzG,CAiBmCC,CAAuBZ,EAAa/H,EAAQnB,GAEvE,IElTJlN,EFkTyCkN,aEhTlBC,QAIjB,eAAgBnN,GF4S8BkN,EAAO+J,WAAW/E,SAC9D,OAAOhF,EAAO+J,WAAW/E,SEpT9B,IACHlS,EFsTI,GAAIiN,EAAoBC,IAAWA,EAAOgK,SAAU,CAChD,MAAM,KAAE1K,IAAS,IAAAC,QAAOS,EAAOgK,UAE/B,IAAK1K,EACD,OAGJ,OAAOA,EAAK5M,IAChB,CAEA,OAAIgX,EACOA,EAAmBO,WAD9B,GAiD8BC,aGxXzBC,IAAqB,IAAA1P,oBAAmDqF,GAE9E,SAASsK,KACZ,MAAM/O,GAAU,IAAAhK,YAAW8Y,IAE3B,IAAK9O,EACD,MAAM,IAAIxC,MAAM,0EAGpB,OAAOwC,CACX,CCLO,MAAMgP,GAAsB,EAAGzZ,WAAU0Z,iBAExC,gBAACH,GAAmBI,SAAQ,CAACzX,MAAO,CAAEwX,gBACjC1Z,G,gBCTb,MAEA,IAFiB,EAAA4Z,GAAA,GAAgBC,EAAA,GAAa,CAAEC,kBAAmB,a,ICM9DC,G,iDAAL,SAAKA,GACD,mCACA,uCACA,kCACH,CAJD,CAAKA,KAAAA,GAAe,KAepB,MAAMC,GAA4B,EAC9BC,wBACA1J,aAKA,MAAM2J,EAAoC,CAAC,EAc3C,OAZID,IACAC,EAAgBH,GAAgBI,YAAc,CAAEC,OAAO,IAG5C,WAAX7J,IACA2J,EAAgBH,GAAgBM,cAAgB,CAAED,OAAO,IAG9C,SAAX7J,IACA2J,EAAgBH,GAAgBO,YAAc,CAAEF,OAAO,IAGpDF,GAGLK,GAAiB,CAACC,EAA2BC,MAC7CA,EAAiBD,KAAcC,EAAiBD,GAAUJ,MA4KhE,GA1K6E,EACzEM,gCACAT,wBACAU,qBACAC,gBACAC,sBACA7T,eAEA,MAAOyT,EAAkBK,IAAuB,IAAAC,UAC5Cf,GAA0B,CAAEC,wBAAuB1J,OAAQqK,EAAcrK,WAG7E,IAAAkB,YAAU,K,MACDoJ,KAKDA,EAAoBG,WAClBP,EAAiBI,EAAoBG,aACY,QAA/C,EAAAP,EAAiBI,EAAoBG,kBAAU,eAAEZ,SAC7CS,EAAoBT,QAExBS,EAAoBG,YAAcjB,GAAgBI,WAClDW,EAAoB,OAAD,wBACZL,GAAgB,CACnB,CAACV,GAAgBI,YACbU,EAAoBI,aAAcN,aAAkB,EAAlBA,EAAoBO,OAChD,OAAD,wBAAML,GAAmB,CAAET,OAAO,IACjC,OAAD,UAAMS,MAGnBC,EAAoB,OAAD,wBACZL,GAAgB,CACnB,CAACI,EAAoBG,WAAYH,SAK9C,CAACA,EAAqBC,EAAqBH,aAAkB,EAAlBA,EAAoBO,SAElE,IAAAzJ,YAAU,MACFkJ,aAAkB,EAAlBA,EAAoB3B,cACpB8B,EACId,GAA0B,CAAEC,wBAAuB1J,OAAQqK,EAAcrK,YAGlF,CAACoK,aAAkB,EAAlBA,EAAoB3B,YAAa4B,EAAcrK,OAAQ0J,IAE3D,MAAMkB,EAAsBzU,GACxB6T,GAAe7T,EAAK+T,IAChB,wBACIxa,UAAU,2FACVmb,MAAO,CAAEC,UAAW,OAAQC,MAAO,SAEnC,uBACI5C,IAAI,sBACJzY,UAAU,uBACV0Y,IAAI,8FAKpB,OACI,2BACKsB,GACG,yBACI,8BACKjT,aAAQ,EAARA,EAAUoB,UACP,2DAIR,2BAECpB,aAAQ,EAARA,EAAUoB,UAAU,qDAI7B,uBAAKnI,UAAU,gBAAgByB,GAAIgZ,GAC9BT,GACG,uBACIha,UAAW,IACP,aACA,uBACA,CACI,sCAC6B,SAAzB2a,EAAcrK,QAItB,CAAE,6BAA8B0J,KAGpC,yBAAOjY,QAAS+X,GAAgBI,YAC3BnT,aAAQ,EAARA,EAAUoB,UAAU,qCAEzB,uBACInI,UAAW,IACP,aACA,+BACA,WACA,gCACA,CACI,+BAAgCsa,GAC5BR,GAAgBI,WAChBM,KAGX,WACSV,GAAgBI,WAC1BzY,GAAIqY,GAAgBI,aAEvBgB,EAAmBpB,GAAgBI,aAIlB,WAAzBS,EAAcrK,QACX,uBAAKtQ,UAAU,yCACX,yBAAO+B,QAAS+X,GAAgBM,cAC3BrT,aAAQ,EAARA,EAAUoB,UAAU,kCAEzB,uBACInI,UAAW,IACP,aACA,+BACA,WACA,gCACA,CACI,+BAAgCsa,GAC5BR,GAAgBM,aAChBI,KAGX,WACSV,GAAgBM,aAC1B3Y,GAAIqY,GAAgBM,eAEvBc,EAAmBpB,GAAgBM,eAGlB,SAAzBO,EAAcrK,QACX,uBAAKtQ,UAAU,mCACX,yBAAO+B,QAAS+X,GAAgBO,YAC3BtT,aAAQ,EAARA,EAAUoB,UAAU,yCAEzB,uBACInI,UAAW,IACP,aACA,+BACA,WACA,gCACA,CACI,+BAAgCsa,GAC5BR,GAAgBO,WAChBG,KAGX,WACSV,GAAgBO,WAC1B5Y,GAAIqY,GAAgBO,aAEvBa,EAAmBpB,GAAgBO,gBCrNrD,SAASiB,GACZnJ,GAEA,MACyB,UAArBA,aAAU,EAAVA,EAAYtQ,OAA0C,SAAvBsQ,aAAU,EAAVA,EAAY7B,SAA2C,SAAvB6B,aAAU,EAAVA,EAAY7B,OAEnF,C,gBCAA,MAoBA,GApBgD,I,IAAA,SAC5CvQ,EAAQ,UACRC,EAAS,OACT0H,EAAM,OACNzC,GAAM,EACH3C,GAAI,cALqC,4CAM1C,OACF,0CACQA,EAAI,CACRtC,UAAW,IACPA,GAAa,cACb,CAAE,YAAa0H,GACf,CAAE,sCAAuCA,IAC5C,YACUzC,IAEVlF,ICFM,MAAM,WAAqB,EAAAwb,UAA1C,c,oBACI,KAAAC,MAAQ,CACJ7R,QAAQ,GAGJ,KAAA8R,gBAAiB,EA6BjB,KAAAC,WAAyB,KACxBC,KAAKF,gBAIVE,KAAKC,SAAS,CACVjS,QAAQ,KAIR,KAAA7F,YAA0B,KACzB6X,KAAKF,gBAIVE,KAAKC,SAAS,CACVjS,QAAQ,KAIR,KAAAkS,cACJC,IAE0B,UAAtBA,EAAcrV,KACdkV,KAAKD,aAGjB,CAtDI,iBAAAK,GACIJ,KAAKF,gBAAiB,CAC1B,CAEA,oBAAAO,GACIL,KAAKF,gBAAiB,CAC1B,CAEA,MAAArY,GACI,MAAM,SAAErD,EAAQ,MAAEkM,GAAU0P,KAAKja,OAC3B,OAAEiI,GAAWgS,KAAKH,MAExB,OACI,gCACKzb,EAAS,CACN2E,QAASiX,KAAKD,WACdO,WAAYN,KAAKE,gBAGpB5P,EAAM,CACHtC,SACAhG,eAAgBgY,KAAK7X,cAIrC,E,gBClDJ,MAuBA,IAAe,EAAA+F,GAAA,IAvB2B,IACtC,uBAAKrK,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBACIuc,SAAS,UACTtc,EAAE,6IACFuc,KAAK,UACLC,SAAS,YAEb,wBACIF,SAAS,UACTtc,EAAE,sIACFuc,KAAK,UACLC,SAAS,YAEb,wBACIF,SAAS,UACTtc,EAAE,gIACFuc,KAAK,UACLC,SAAS,eCDrB,IAAe,EAAAvS,GAAA,IAjBuB,IAClC,uBAAKrK,OAAO,MAAMC,QAAQ,cAAcC,MAAM,MAAMC,MAAM,8BACtD,wBACIC,EAAE,4LACFuc,KAAK,YAET,wBACIvc,EAAE,iRACFuc,KAAK,YAET,wBACIvc,EAAE,0QACFuc,KAAK,eCEjB,IAAe,EAAAtS,GAAA,IAdoB,IAC/B,uBAAKpK,QAAQ,aAAa4c,SAAS,WAAW1c,MAAM,8BAChD,yBAAO8B,GAAG,gBAAc,OACxB,wBACI7B,EAAE,gHACFuc,KAAK,YAET,wBACIvc,EAAE,gfACFuc,KAAK,YC4LjB,IAAe,EAAAtS,GAAA,IArMqB,IAChC,uBAAKsS,KAAK,OAAO3c,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAC9D,wBAAMwc,KAAK,UAAU3c,OAAO,KAAK8c,GAAG,MAAMC,OAAO,UAAU7c,MAAM,KAAK8c,EAAE,MAAMC,EAAE,QAChF,wBACI7c,EAAE,m4EACFuc,KAAK,YAET,wBACI3c,OAAO,KACPiC,GAAG,kBACHib,UAAU,iBACVvB,MAAO,CAAEwB,SAAU,aACnBjd,MAAM,KACN8c,EAAE,IACFC,EAAE,MAEF,wBAAM7c,EAAE,kCAAkCuc,KAAK,UAEnD,qBAAGS,KAAK,yBACJ,wBACIhd,EAAE,2EACFuc,KAAK,aAGb,wBACI3c,OAAO,KACPiC,GAAG,kBACHib,UAAU,iBACVvB,MAAO,CAAEwB,SAAU,aACnBjd,MAAM,KACN8c,EAAE,IACFC,EAAE,MAEF,wBAAM7c,EAAE,kCAAkCuc,KAAK,UAEnD,qBAAGS,KAAK,yBACJ,wBACIhd,EAAE,+MACFuc,KAAK,aAGb,wBACI3c,OAAO,KACPiC,GAAG,kBACHib,UAAU,iBACVvB,MAAO,CAAEwB,SAAU,aACnBjd,MAAM,KACN8c,EAAE,IACFC,EAAE,MAEF,wBAAM7c,EAAE,kCAAkCuc,KAAK,UAEnD,qBAAGS,KAAK,yBACJ,wBACIhd,EAAE,oXACFuc,KAAK,aAGb,wBACI3c,OAAO,KACPiC,GAAG,kBACHib,UAAU,iBACVvB,MAAO,CAAEwB,SAAU,aACnBjd,MAAM,KACN8c,EAAE,IACFC,EAAE,MAEF,wBAAM7c,EAAE,kCAAkCuc,KAAK,UAEnD,qBAAGS,KAAK,yBACJ,wBACIhd,EAAE,yYACFuc,KAAK,aAGb,wBACI3c,OAAO,KACPiC,GAAG,kBACHib,UAAU,iBACVvB,MAAO,CAAEwB,SAAU,aACnBjd,MAAM,KACN8c,EAAE,IACFC,EAAE,MAEF,wBAAM7c,EAAE,kCAAkCuc,KAAK,UAEnD,qBAAGS,KAAK,yBACJ,wBACIhd,EAAE,oQACFuc,KAAK,aAGb,wBACI3c,OAAO,KACPiC,GAAG,kBACHib,UAAU,iBACVvB,MAAO,CAAEwB,SAAU,aACnBjd,MAAM,KACN8c,EAAE,IACFC,EAAE,MAEF,wBAAM7c,EAAE,kCAAkCuc,KAAK,UAEnD,qBAAGS,KAAK,yBACJ,wBACIhd,EAAE,yVACFuc,KAAK,aAGb,wBACI3c,OAAO,KACPiC,GAAG,kBACHib,UAAU,iBACVvB,MAAO,CAAEwB,SAAU,aACnBjd,MAAM,KACN8c,EAAE,IACFC,EAAE,MAEF,wBAAM7c,EAAE,kCAAkCuc,KAAK,UAEnD,qBAAGS,KAAK,yBACJ,wBACIhd,EAAE,0XACFuc,KAAK,aAGb,wBACI3c,OAAO,KACPiC,GAAG,kBACHib,UAAU,iBACVvB,MAAO,CAAEwB,SAAU,aACnBjd,MAAM,KACN8c,EAAE,IACFC,EAAE,MAEF,wBAAM7c,EAAE,kCAAkCuc,KAAK,UAEnD,qBAAGS,KAAK,yBACJ,wBACIhd,EAAE,4VACFuc,KAAK,aAGb,wBACI3c,OAAO,KACPiC,GAAG,kBACHib,UAAU,iBACVvB,MAAO,CAAEwB,SAAU,aACnBjd,MAAM,KACN8c,EAAE,IACFC,EAAE,MAEF,wBAAM7c,EAAE,kCAAkCuc,KAAK,UAEnD,qBAAGS,KAAK,yBACJ,wBACIhd,EAAE,2EACFuc,KAAK,aAGb,wBACI3c,OAAO,KACPiC,GAAG,kBACHib,UAAU,iBACVvB,MAAO,CAAEwB,SAAU,aACnBjd,MAAM,KACN8c,EAAE,IACFC,EAAE,MAEF,wBAAM7c,EAAE,kCAAkCuc,KAAK,UAEnD,qBAAGS,KAAK,yBACJ,wBACIhd,EAAE,iQACFuc,KAAK,aAGb,wBACI3c,OAAO,KACPiC,GAAG,mBACHib,UAAU,iBACVvB,MAAO,CAAEwB,SAAU,aACnBjd,MAAM,KACN8c,EAAE,IACFC,EAAE,MAEF,wBAAM7c,EAAE,kCAAkCuc,KAAK,UAEnD,qBAAGS,KAAK,0BACJ,wBACIhd,EAAE,sdACFuc,KAAK,gB,oDC/KrB,MAAqBU,WAAwB,EAAAtB,UAA7C,c,oBAKI,KAAAC,MAAwC,CACpCsB,YAAY,GAkDR,KAAAC,YAA+ChZ,IACnD,MAAM,WAAE+Y,GAAenB,KAAKH,MAExBsB,EACAnB,KAAK7X,YAAYC,EAAMiZ,aAEvBrB,KAAKD,WAAW3X,EAAMiZ,cAItB,KAAAtB,WAA0C,KAC9C,MAAM,WAAEoB,GAAenB,KAAKH,MAExBsB,GAIJnB,KAAKC,SAAS,CAAEkB,YAAY,IAAQ,K,MACX,QAArB,EAAAnB,KAAKsB,wBAAgB,SAAEjc,iBAAiB,QAAS2a,KAAK7X,iBAItD,KAAAA,YAA2C,KAC/C,MAAM,WAAEgZ,GAAenB,KAAKH,MAEvBsB,GAILnB,KAAKC,SAAS,CAAEkB,YAAY,IAAS,K,MACZ,QAArB,EAAAnB,KAAKsB,wBAAgB,SAAEC,oBAAoB,QAASvB,KAAK7X,gBAUrE,CAvFI,oBAAAkY,G,MACyB,QAArB,EAAAL,KAAKsB,wBAAgB,SAAEC,oBAAoB,QAASvB,KAAK7X,YAC7D,CAEA,MAAAV,GACI,MAAM,SAAErD,EAAQ,UAAEod,EAAS,SAAEC,GAAazB,KAAKja,OACzC,WAAEob,GAAenB,KAAKH,MAE5B,OACI,gBAAC6B,GAAA,GAAO,KACJ,gBAACC,GAAA,EAAS,MACL,EAAGxY,SAEA,uBAAK9E,UAAU,kBAAkB0E,QAASiX,KAAKoB,YAAajY,IAAKA,GAC5D/E,KAKb,gBAACwd,GAAA,EAAM,CACHC,UAAW,CACP,CAAEjb,KAAM,OAAQkb,SAAS,GACzB,CAAElb,KAAM,OAAQkb,SAAS,GACzB,CAAElb,KAAM,kBAAmBkb,SAAS,IAExCN,UAAWA,IAEV,EAAGrY,MAAKqW,WACJ2B,EACG,uBACI9c,UAAU,eACV8E,IAAKA,EACLqW,MAAK,+BACEA,GAAK,CACRzb,MAAO,OACPge,OAAQ,KAGXN,GAVK,OAiBlC,CAoCQ,cAAAH,GACJ,OACIU,SAASC,eAAe,OACxBD,SAASC,eAAe,KAEhC,EA9FO,GAAAC,aAAe,CAClBV,UAAW,gB,YCpBJ,SAASW,GACpB3L,GAEA,MACwB,SAApBA,EAAWtQ,OAA0C,QAAtBsQ,EAAW7B,QAA0C,QAAtB6B,EAAW7B,OAEjF,CCNO,SAASyN,GAAiB5L,GAC7B,MACyB,UAArBA,aAAU,EAAVA,EAAYtQ,QACY,UAAvBsQ,aAAU,EAAVA,EAAY7B,SAA4C,uBAAvB6B,aAAU,EAAVA,EAAY7B,QAEtD,CCsBA,MAAM0N,GAAuF,EACzFhe,YACAiF,SACAP,UAAU,EAAAd,QAEV,0BAAQ5D,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBAAK7B,UAAU,6DACX,gBAAC,GAAc,CAAC+E,oBAAoB,mBAAmB+G,KAAM,KAASuI,SAEtE,uBAAKrU,UAAU,4BACX,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,6CAa/Bwc,GAA+E,EACjFje,YACAmS,YAAc+L,cACdjZ,SACAP,aAGI,0BAAQ1E,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBAAK7B,UAAU,4BAKX,gBAAC,GAAU,CAAC+E,oBAAoB,mBAAmB+G,KAAM,KAASuI,SAElE,uBAAKrU,UAAU,2BAA0B,YAAY,GAAGiF,GAAU,iBAC7DiZ,KAcfC,GAAuE,EACzEne,YACAmS,aACAlN,SACAP,aAGI,0BAAQ1E,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBAAK7B,UAAU,4BACX,gBAAC,GAAO,CAAC8L,KAAM,KAASuI,SAExB,uBAAKrU,UAAU,yBACX,2BACI,gBAACoF,EAAA,EAAgB,CACbsF,KAAM,CAAE0T,cAAejM,EAAWiM,eAClC3c,GAAG,8CAGX,2BACI,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,+D,KAClB0Q,EAAWkM,WAehCC,GAAyE,EAC3Ete,YACAmS,aACAlN,SACAP,aAGI,0BAAQ1E,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBAAK7B,UAAU,4BACX,gBAAC,GAAQ,CAAC8L,KAAM,KAASuI,SACzB,uBAAKrU,UAAU,yBACX,uBAAKA,UAAU,yBACX,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,gC,IAAkC,IACtD0Q,EAAWiM,kBAQ9BG,GAAyE,EAC3Eve,YACAmS,aACAlN,SACAP,aAGI,0BAAQ1E,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBAAK7B,UAAU,4BAKX,uBAAKA,UAAU,yBACX,gBAACoF,EAAA,EAAgB,CACbsF,KAAM,CAAE0T,cAAejM,EAAWiM,eAClC3c,GAAG,8CAGX,uBAAKzB,UAAU,2BACX,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,8B,KAAiC0Q,EAAWkM,UAa/EG,GAA2E,EAC7ErM,aACAzN,UAAU,EAAAd,SAEV,MAAMmZ,GAAc,IAAAlc,cAAY,KAC5B6D,EAAQyN,EAAW4G,eACpB,CAACrU,EAASyN,IAEb,OAAI2L,GAAgB3L,GAEZ,gBAACgM,GAAqB,CAClBhM,WAAYA,EACZzN,QAASqY,EACT9X,OAAO,6BAKf8Y,GAAiB5L,GAEb,gBAACmM,GAAsB,CACnBnM,WAAYA,EACZzN,QAASqY,EACT9X,OAAO,6BAKXqW,GAAwBnJ,GAO5B,gBAACoM,GAAsB,CACnBpM,WAAYA,EACZzN,QAASqY,EACT9X,OAAO,6BATX,gBAACgZ,GAAyB,CACtB9L,WAAYA,EACZzN,QAASqY,EACT9X,OAAO,8BAkBbwZ,GAAuE,EACzEpG,cACAqG,uBACAC,qBACAC,wBAGI,sBACI5e,UAAU,gFAA+E,YAC/E,0BAETqY,EAAY7R,KAAK2L,GACd,sBACInS,UAAW,IAAW,6CAA8C,CAChE,oCACImS,EAAW4G,cAAgB2F,IAEnCjY,IAAK0L,EAAW4G,aAEhB,gBAACyF,GAAuB,CACpBrM,WAAYA,EACZzN,QAASia,EACT1Z,OAAO,gCAKnB,sBAAIjF,UAAU,8EACV,gBAACge,GAA6B,CAC1BtZ,QAASka,EACT3Z,OAAO,uCAarB4Z,GAAuF,EACzF1M,aACAlN,SACAP,aAEKyN,EASD4L,GAAiB5L,GAEb,gBAACmM,GAAsB,CACnBte,UAAU,mFACVmS,WAAYA,EACZzN,QAASA,EACTO,OAAQA,IAKhB6Y,GAAgB3L,GAEZ,gBAACgM,GAAqB,CAClBne,UAAU,mFACVmS,WAAYA,EACZzN,QAASA,EACTO,OAAQA,IAKZqW,GAAwBnJ,GAQ5B,gBAACoM,GAAsB,CACnBve,UAAU,mFACVmS,WAAYA,EACZzN,QAASA,EACTO,OAAQA,IAXZ,gBAACgZ,GAAyB,CACtBje,UAAU,mFACVmS,WAAYA,EACZzN,QAASA,EACTO,OAAQA,IAlCR,gBAAC+Y,GAA6B,CAC1Bhe,UAAU,mFACViF,OAAQA,IAuDxB,MAAM6Z,WAAgC,EAAAC,cAClC,iBAAAhD,GACI,MAAM,qBAAE2C,GAAyB/C,KAAKja,MAKtCsd,YAAW,IAAMrD,KAAKsD,iBAAiBP,IAC3C,CAEA,kBAAAQ,CAAmBC,GACf,MAAQT,qBAAsBU,GAA6BD,GACrD,qBAAET,GAAyB/C,KAAKja,MAElC0d,IAA6BV,GAI7BM,YAAW,IAAMrD,KAAKsD,iBAAiBP,IAE/C,CAEA,oBAAA1C,GACI,MAAM,qBAAE0C,EAAoB,MAAE9b,GAAU+Y,KAAKja,MAEzB,KAAhBkB,EAAMX,YAAyCgN,IAAzByP,GACtB/C,KAAKsD,kBAEb,CAEA,MAAA7b,GACI,MAAM,MAAER,EAAK,YAAEyV,EAAW,mBAAEsG,EAAkB,mBAAEC,EAAkB,qBAAEF,GAChE/C,KAAKja,MAEHgZ,GAAqB,IAAAlG,MAAK6D,EAAa,CAAEU,YAAa2F,KAEtD,MAAEzc,GAA8BW,EAApByc,GAAe,YAAKzc,EAAhC,WAEN,OACI,uBAAK5C,UAAU,mBAAkB,YAAW,6BACxC,gBAAC,GAAe,CACZod,SACI,gBAACqB,GAAqB,CAClBpG,YAAaA,EACbsG,mBAAoBA,EACpBC,mBAAoBA,EACpBF,qBAAsBA,KAI9B,gBAACG,GAA6B,CAC1B1M,WAAYuI,EACZzV,OAAO,sBAGX,uCAAOpD,KAAK,SAASI,MAAOA,GAAS,IAAQod,KAI7D,CAEQ,gBAAAJ,CAAiBjG,EAAe,IACpC,MAAM,KAAEsG,EAAI,MAAE1c,GAAU+Y,KAAKja,MAExB4d,EAAKC,cAAc3c,EAAML,KAAMyW,EACxC,EAGJ,Y,wCC1YO,SAASwG,GAAiBrN,GAC7B,YAAsBlD,IAAfkD,GAAgD,SAApBA,EAAWtQ,IAClD,CCFe,SAAS4d,GACpBtN,GAEA,MAA2B,YAApBA,EAAWtQ,IACtB,CCOA,MAAM6d,GAAqE,EACvEvN,aACAwN,yBAEA,MAAMC,GAAe,IAAA/e,cAAY,KAC7B8e,EAAmBxN,EAAW4G,eAC/B,CAAC5G,EAAYwN,IAEhB,OACI,0BACI,kCAAc,uCACTrE,GAAwBnJ,IAAe2L,GAAgB3L,GACpD,wBAAMnS,UAAU,2CACX+d,GAAiB5L,GACd,gBAAC/M,EAAA,EAAgB,CAAC3D,GAAG,gCAErB,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,0DAExB,IAAI0Q,EAAWiM,iBAGpB,gCACI,gBAAC,GAAU,CAACrZ,oBAAoB,mBAAmB+G,KAAM,KAASuI,SAClE,wBAAMrU,UAAU,+CACXmS,EAAW+L,cAK5B,0BACI,0BACIle,UAAU,2EAA0E,YAC1E,kCACV0E,QAASkb,EACT/d,KAAK,UAEL,gBAACuD,EAAA,EAAgB,CAAC3D,GAAG,6BAoDzC,IAAe,IAAA5B,OAvCuE,EAClFwY,cACAwH,uBACAF,wBAE2B,IAAvBtH,EAAY9R,OAER,yBACI,gBAACnB,EAAA,EAAgB,CAAC3D,GAAG,gDAM7B,gBAACqe,GAAA,EAAc,CAACxX,UAAWuX,GACvB,yBAAO7f,UAAU,QAAO,YAAW,4BAC/B,yBAAOA,UAAU,eACb,0BACI,0BACI,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,gEAEzB,6BAIR,yBAAOzB,UAAU,eACZqY,EAAY7R,KAAK2L,GACd,gBAACuN,GAAoB,CACjBvN,WAAYA,EACZ1L,IAAK0L,EAAW4G,YAChB4G,mBAAoBA,WCjF1C,GAAqE,EACvExN,aACAwN,yBAEA,MAAMC,GAAe,IAAA/e,cAAY,KAC7B8e,EAAmBxN,EAAW4G,eAC/B,CAAC5G,EAAYwN,IAEhB,OACI,0BACI,kCAAc,8BACV,gBAAC,GAAO,CAAC7T,KAAM,KAASuI,UAE5B,kCAAc,mCAAmClC,EAAWiM,eAC5D,kCAAc,4BAA4BjM,EAAWkM,QACrD,0BACI,0BACIre,UAAU,2EAA0E,YAC1E,kCACV0E,QAASkb,EACT/d,KAAK,UAEL,gBAACuD,EAAA,EAAgB,CAAC3D,GAAG,6BA0DzC,GA7CqF,EACjF4W,cACAwH,uBACAF,wBAE2B,IAAvBtH,EAAY9R,OAER,yBACI,gBAACnB,EAAA,EAAgB,CAAC3D,GAAG,gDAM7B,gBAACqe,GAAA,EAAc,CAACxX,UAAWuX,GACvB,yBAAO7f,UAAU,QAAO,YAAW,gCAC/B,yBAAOA,UAAU,eACb,0BACI,0BACI,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,gEAEzB,0BACI,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,2DAEzB,0BACI,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,gEAEzB,6BAIR,yBAAOzB,UAAU,eACZqY,EAAY7R,KAAK2L,GACd,gBAAC,GAAoB,CACjBA,WAAYA,EACZ1L,IAAK0L,EAAW4G,YAChB4G,mBAAoBA,S,2BCtDhD,MAAM,GAAqE,EACvExN,aACAwN,yBAEA,MAAMxL,EAvBV,SAAmCtS,GAC/B,OAAQA,GACJ,IAAK,OACL,IAAK,mBACD,MAAO,mBAEX,IAAK,SACD,MAAO,cAEX,QACI,OAAOA,EAEnB,CAWqBke,CAA0B5N,EAAWiH,OAChD4G,EAAW,iBAA2B7L,GACtC8L,IAAa,IAAAC,gBAAe,CAC9BhS,MAAOiE,EAAWgO,YAClBhS,KAAMgE,EAAWiO,aAClBC,QAEGT,GAAe,IAAA/e,cAAY,KAC7B8e,EAAmBxN,EAAW4G,eAC/B,CAAC5G,EAAYwN,IAEhB,OACI,0BACI,kCAAc,8BACV,gBAAC,GAAc,CAACxL,SAAUA,IAEzB6L,GACG,wBAAMhgB,UAAU,sCAAsCggB,EAASM,WAGvE,kCAAc,2BAA2BnO,EAAW8I,OACpD,sBACIjb,UAAW,IAAW,CAAE,4CAA6CigB,IAAY,YACvE,4BAET,GAAG9N,EAAWgO,eAAehO,EAAWiO,cAE7C,0BACI,0BACIpgB,UAAU,2EAA0E,YAC1E,kCACV0E,QAASkb,EACT/d,KAAK,UAEL,gBAACuD,EAAA,EAAgB,CAAC3D,GAAG,6BA0DzC,IAAe,IAAA5B,OA7CwE,EACnFwY,cACAwH,uBACAF,wBAE2B,IAAvBtH,EAAY9R,OAER,yBACI,gBAACnB,EAAA,EAAgB,CAAC3D,GAAG,gDAM7B,gBAACqe,GAAA,EAAc,CAACxX,UAAWuX,GACvB,yBAAO7f,UAAU,QAAO,YAAW,iCAC/B,yBAAOA,UAAU,eACb,0BACI,0BACI,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,gEAEzB,0BACI,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,2DAEzB,0BACI,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,6DAEzB,6BAIR,yBAAOzB,UAAU,eACZqY,EAAY7R,KAAK2L,GACd,gBAAC,GAAoB,CACjBA,WAAYA,EACZ1L,IAAK0L,EAAW4G,YAChB4G,mBAAoBA,W,gBC1GhD,MA0BA,IAAe,IAAA9f,OA1BgE,EAAGqJ,YAC9E,MAAM,OAAEqX,GAAWrX,EAEnB,OAAe,MAAXqX,EAEI,gBAACxY,GAAArH,EAAK,CAACmB,KAAMkG,GAAA,EAAUC,OACnB,gBAAC5C,EAAA,EAAgB,CAAC3D,GAAG,iDAK7B8e,GAAU,KAAOA,EAAS,IAEtB,gBAACxY,GAAArH,EAAK,CAACmB,KAAMkG,GAAA,EAAUC,OACnB,gBAAC5C,EAAA,EAAgB,CAAC3D,GAAG,mDAM7B,gBAACsG,GAAArH,EAAK,CAACmB,KAAMkG,GAAA,EAAUC,OACnB,gBAAC5C,EAAA,EAAgB,CAAC3D,GAAG,sDCGjC,MAAM+e,WAA+B,EAAAjF,UAArC,c,oBAOI,KAAAC,MAAqC,CACjCiF,oBAAoB,GAiJhB,KAAAC,gBAA8B,KAClC,MAAM,YAAEC,GAAgBhF,KAAKja,MAE7Bia,KAAKC,SACD,CACI6E,oBAAoB,GAExBE,IAIA,KAAAC,aAA2B,KAC/B,IAAKjF,KAAKnR,QACN,MAAMxC,MAAM,oCAGhB,MACIhB,eACIc,QAAQ,yBAAE+Y,IAEdpW,iBAAiB,WAAE5D,IACnB8U,KAAKnR,QAEHsW,EAAwBD,IAE1BC,GACKja,EAAWia,GAGpBnF,KAAKC,SAAS,CACV6E,oBAAoB,KAIpB,KAAAM,oBAAkC,KAAY,+CAClD,IAAKpF,KAAKnR,QACN,MAAMxC,MAAM,oCAGhB,MACIyC,iBAAiB,iBAAEuW,IACnBrF,KAAKnR,SAEH,mBACFmV,EAAqB,EAAA/b,KAAI,wBACzBqd,EAA0B,EAAArd,KAAI,eAC9BD,EAAiB,EAAAC,MACjB+X,KAAKja,OACH,qBAAEgd,GAAyB/C,KAAKH,MAEtC,GAAKkD,EAIL,UACUsC,EAAiBtC,GACvBiB,EAAmBjB,GACnB/a,GACJ,CAAE,MAAOuF,GACL+X,EAAwB/X,EAC5B,CACJ,IAEQ,KAAAgY,uBAAgDzf,IACpDka,KAAKC,SAAS,CACV6E,oBAAoB,EACpB/B,qBAAsBjd,IAGlC,CAnNI,MAAA2B,GACI,IAAKuY,KAAKnR,QACN,MAAMxC,MAAM,oCAGhB,MACIhB,eACIc,QAAQ,yBAAE+Y,KAEdlF,KAAKnR,QAEHsW,EAAwBD,KAExB,OAAElX,EAAM,eAAEhG,GAAmBgY,KAAKja,MAExC,OACI,gBAAC,KAAK,CACF2B,iBAAkB,gBAAC+B,EAAA,EAAgB,CAAC3D,GAAG,wBACvC6B,OAAQqY,KAAKwF,eACb5d,OACI,gBAAC,KAAW,KACR,gBAAC6B,EAAA,EAAgB,CAAC3D,GAAG,gDAG7BkI,OAAQA,EACRgX,YAAahF,KAAK+E,gBAClB/c,eAAgBA,GAEfmd,GAAyB,gBAAC,GAAsB,CAAC5X,MAAO4X,IAExDnF,KAAKlT,gBAGlB,CAEQ,aAAAA,GACJ,IAAKkT,KAAKnR,QACN,MAAMxC,MAAM,oCAGhB,MACIhB,eACIC,UAAU,qBAAE4Y,KAEhBlE,KAAKnR,SACH,YAAE6N,GAAgBsD,KAAKja,OAEvB,mBAAE+e,GAAuB9E,KAAKH,MAEpC,GAAIiF,EACA,OACI,yBACI,gBAACrb,EAAA,EAAgB,CAAC3D,GAAG,wDAKjC,MAAM2f,EAAkB/I,EAAYnE,OAAOsL,IACrC6B,EAAkBhJ,EAAYnE,OAAOoH,IACrCgG,EAAqBjJ,EAAYnE,OAAOuL,IACxC8B,EAAgBlJ,EAAYnE,OAAO4J,IAEzC,GAAIyD,EAAchb,OACd,OACI,gBAAC,GAAyB,CACtB8R,YAAakJ,EACb1B,qBAAsBA,IACtBF,mBAAoBhE,KAAKuF,yBAKrC,MAAMM,EAA4B,IAAIH,KAAoBC,GAE1D,OAAIE,EAA0Bjb,OAEtB,gBAACkb,GAA6B,CAC1BpJ,YAAamJ,EACb3B,qBAAsBA,IACtBF,mBAAoBhE,KAAKuF,yBAMjC,gBAAC,GAA0B,CACvB7I,YAAa+I,EACbvB,qBAAsBA,IACtBF,mBAAoBhE,KAAKuF,wBAGrC,CAEQ,YAAAC,GACJ,IAAKxF,KAAKnR,QACN,MAAMxC,MAAM,oCAGhB,MACIhB,eACIC,UAAU,qBAAE4Y,EAAoB,qBAAE6B,KAEtC/F,KAAKnR,SAEH,eAAE7G,GAAmBgY,KAAKja,OAC1B,mBAAE+e,GAAuB9E,KAAKH,MAEpC,OAAIiF,EAEI,gCACI,gBAAC,MAAM,CACH/b,QAASiX,KAAKiF,aACd9U,KAAM,MAAWC,MACjB9G,OAAO,mCAEP,gBAACG,EAAA,EAAgB,CAAC3D,GAAG,0BAGzB,gBAAC,MAAM,CACHoB,SAAUgd,KAA0B6B,IACpChd,QAASiX,KAAKoF,oBACdjV,KAAM,MAAWC,MACjB9G,OAAO,mCACPsD,QAAS,MAAcoZ,SAEvB,gBAACvc,EAAA,EAAgB,CAAC3D,GAAG,0DAOjC,gBAAC,MAAM,CACHiD,QAASf,EACTmI,KAAM,MAAWC,MACjB9G,OAAO,kCAEP,gBAACG,EAAA,EAAgB,CAAC3D,GAAG,wBAGjC,EAnJO,GAAAmgB,YAAcC,GAAA,EA4NzB,YC/KA,IAAe,IAAAhiB,OAvDsE,EACjFwY,cACAsG,qBACAC,qBACAlE,yBAEA,MAAMhY,GAAc,IAAA7B,cACf+B,GACG,gBAAC,GAAuB,iBAChBA,EAAK,CACTyV,YAAaA,EACbsG,mBAAoBA,EACpBC,mBAAoBA,EACpBF,qBAAsBhE,GAAsBA,EAAmB3B,gBAGvE,CAACV,EAAasG,EAAoBC,EAAoBlE,IAGpD9O,GAAc,IAAA/K,cACfa,GACG,gBAAC,GAAsB,eAAC2W,YAAaA,GAAiB3W,KAE1D,CAAC2W,IAGL,OACI,gBAAC,KAAQ,CACLtT,oBAAoB,qBACpBC,OACI,gBAAC,GAAM,CAAC0C,QAAM,GACV,gBAACtC,EAAA,EAAgB,CAAC3D,GAAG,qCAG7BwD,OAAO,+BAEP,gBAAC,GAAY,CAACgH,MAAOL,IAChB,EAAGlH,aACA,0BAAQ1E,UAAU,0BAA0B0E,QAASA,EAAS7C,KAAK,UAC/D,gBAACuD,EAAA,EAAgB,CAAC3D,GAAG,wCAKjC,gBAACyB,GAAA,EAAc,CAACX,KAAK,eAAea,OAAQV,IAEpB,IAAvB2V,EAAY9R,QACT,uBAAKvG,UAAU,wBAAuB,YAAW,0BAC7C,gBAACiN,EAAA,EAAc,CAACxL,GAAG,yDC3ExB,SAAS,GAA0BI,GAC9C,OAAQA,GACJ,IAAK,OACL,IAAK,mBACD,MAAO,mBAEX,IAAK,SACL,IAAK,cACD,MAAO,cAEX,QACI,OAAOA,EAEnB,CCoBA,MAAMigB,GAAiE,EACnE9hB,YACAmS,aACAlN,SACA8c,wBAAuB,EACvBrd,c,MAEA,MAAMyP,EAAW,GAA0BhC,EAAWiH,OAChD4G,EAAW,iBAA2B7L,GACtC8L,IAAa,IAAAC,gBAAe,CAC9BhS,MAAOiE,EAAWgO,YAClBhS,KAAMgE,EAAWiO,aAClBC,QAEH,OACI,0BAAQrgB,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBACI7B,UAAW,IAAW,2BAA4B,CAC9C,oCAAqCigB,KAGzC,gBAAC,GAAc,CAAC9L,SAAUA,IAE1B,uBAAKnU,UAAU,wBAAuB,YAAY,GAAGiF,QAAAA,EAAU,YAC1D+a,EACG,gBAAC5a,EAAA,EAAgB,CACbsF,KAAM,CACFsX,UAA4B,QAAjB,EAAAhC,EAASM,gBAAQ,QAAI,GAChC2B,SAAU9P,EAAW8I,OAEzBxZ,GAAG,sCAGP,gBAAC2D,EAAA,EAAgB,CACbsF,KAAM,CAAEuX,SAAU9P,EAAW8I,OAC7BxZ,GAAG,gDAKbsgB,GACE,uBACI/hB,UAAW,IAAW,0BAA2B,CAC7C,mCAAoCigB,IACtC,YACS,GAAGhb,GAAU,aAEvBgb,EACG,gBAAC7a,EAAA,EAAgB,CACbsF,KAAM,CACFwX,WAAY,GAAG/P,EAAWgO,eAAehO,EAAWiO,cAExD3e,GAAG,oCAGP,gBAAC2D,EAAA,EAAgB,CACbsF,KAAM,CACFwX,WAAY,GAAG/P,EAAWgO,eAAehO,EAAWiO,cAExD3e,GAAG,wCAiB7B0gB,GAA6D,EAC/DhQ,aACA4P,wBAAuB,EACvBrd,UAAU,EAAAd,SAEV,MAAMmZ,GAAc,IAAAlc,cAAY,KAC5B6D,EAAQyN,EAAW4G,eACpB,CAACrU,EAASyN,IAEb,OACI,gBAAC2P,GAAkB,CACf3P,WAAYA,EACZzN,QAASqY,EACTgF,qBAAsBA,EACtB9c,OAAO,8BAWbmd,GAAyE,EAC3EpiB,YACAiF,SACAP,UAAU,EAAAd,QAEV,0BAAQ5D,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBAAK7B,UAAU,6DACX,gBAAC,GAAc,MAEf,uBAAKA,UAAU,yBACX,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,0CAc/B4gB,GAAyD,EAC3DhK,cACAqG,uBACAqD,wBAAuB,EACvBpD,qBACAC,wBAGI,sBACI5e,UAAU,gFAA+E,YAC/E,0BAETqY,EAAY7R,KAAK2L,GACd,sBACInS,UAAW,IAAW,6CAA8C,CAChE,oCACImS,EAAW4G,cAAgB2F,IAEnCjY,IAAK0L,EAAW4G,aAEhB,gBAACoJ,GAAgB,CACbhQ,WAAYA,EACZzN,QAASia,EACToD,qBAAsBA,EACtB9c,OAAO,gCAKnB,sBAAIjF,UAAU,8EACV,gBAACoiB,GAAsB,CACnB1d,QAASka,EACT3Z,OAAO,uCAcrBqd,GAAyE,EAC3EnQ,aACA4P,wBAAuB,EACvB9c,SACAP,aAEKyN,EAUD,gBAAC2P,GAAkB,CACf9hB,UAAU,mFACVmS,WAAYA,EACZzN,QAASA,EACTqd,qBAAsBA,EACtB9c,OAAQA,IAbR,gBAACmd,GAAsB,CACnBpiB,UAAU,mFACViF,OAAQA,IAgBxB,MAAMsd,WAAyB,EAAAxD,cAC3B,iBAAAhD,GACI,MAAM,qBAAE2C,GAAyB/C,KAAKja,MAKtCsd,YAAW,IAAMrD,KAAKsD,iBAAiBP,IAC3C,CAEA,kBAAAQ,CAAmBC,GACf,MAAQT,qBAAsBU,GAA6BD,GACrD,qBAAET,GAAyB/C,KAAKja,MAElC0d,IAA6BV,GAC7B/C,KAAKsD,iBAAiBP,EAE9B,CAEA,oBAAA1C,GACI,MAAM,qBAAE0C,EAAoB,MAAE9b,GAAU+Y,KAAKja,MAEzB,KAAhBkB,EAAMX,YAAyCgN,IAAzByP,GACtB/C,KAAKsD,kBAEb,CAEA,MAAA7b,GACI,MAAM,MACFR,EAAK,YACLyV,EAAW,mBACXsG,EAAkB,mBAClBC,EAAkB,qBAClBF,EAAoB,qBACpBqD,GAAuB,GACvBpG,KAAKja,MAEHgZ,GAAqB,IAAAlG,MAAK6D,EAAa,CAAEU,YAAa2F,IAE5D,OACI,uBAAK1e,UAAU,oBACX,gBAAC,GAAe,CACZod,SACI,gBAACiF,GAAc,CACXhK,YAAaA,EACbsG,mBAAoBA,EACpBC,mBAAoBA,EACpBF,qBAAsBA,EACtBqD,qBAAsBA,KAI9B,gBAACO,GAAsB,CACnBnQ,WAAYuI,EACZqH,qBAAsBA,EACtB9c,OAAO,sBAGX,uCAAOpD,KAAK,UAAae,KAIzC,CAEQ,gBAAAqc,CAAiBjG,EAAe,IACpC,MAAM,KAAEsG,EAAI,MAAE1c,GAAU+Y,KAAKja,MAExB4d,EAAKC,cAAc3c,EAAML,KAAMyW,EACxC,EAGJ,YCjNA,IAAe,IAAAnZ,OAlEgE,EAC3EwY,cACAsH,qBACAhB,qBACAC,qBACAF,uBACAqD,wBAAuB,EACvBS,qBAAqB,SAErB,MAAM9f,GAAc,IAAA7B,cACf+B,GACG,gBAAC,GAAgB,iBACTA,EAAK,CACTyV,YAAaA,EACbsG,mBAAoBA,EACpBC,mBAAoBA,EACpBF,qBAAsBA,EACtBqD,qBAAsBA,MAG9B,CACI1J,EACAsG,EACAC,EACAF,EACAqD,IAIFnW,GAAc,IAAA/K,cACfa,GACG,gBAAC,GAAsB,eACnB2W,YAAaA,EACbsH,mBAAoBA,GAChBje,KAGZ,CAAC2W,EAAasH,IAGlB,OACI,gBAAC,KAAQ,CACL5a,oBAAoB,qBACpBC,OACI,gBAAC,GAAM,CAAC0C,QAAM,GACV,gBAACtC,EAAA,EAAgB,CAAC3D,GAAG,8BAI7B,gBAAC,GAAY,CAACwK,MAAOL,IAChB,EAAGlH,aACA,0BAAQ1E,UAAU,0BAA0B0E,QAASA,EAAS7C,KAAK,UAC/D,gBAACuD,EAAA,EAAgB,CAAC3D,GAAG,wCAKjC,gBAACyB,GAAA,EAAc,CAACX,KAAK,eAAea,OAAQV,IAE5C,uBAAKyY,MAAO,CAAEsH,QAAS/D,OAAuBzP,EAAY,SACrDuT,O,4BCrEjB,MAuCA,IAAe,IAAA3iB,OAvCsD,EACjEkF,sBACAlC,YAAW,EACX+J,eACAzJ,WACAZ,OACAd,SAEA,MAAMihB,GAAc,IAAA7hB,cAChB,EAAG+B,WACC,gCACI,gBAAC+f,GAAA,EAAa,iBACN/f,EAAK,CACThB,UAAWgB,EAAMX,MACjBY,SAAUA,EACVpB,GAAIA,GAAMmB,EAAML,KAChBF,MAAOuK,KAGX,gBAACgW,GAAA,EAAc,CACXC,QAAS,GAAGphB,QAAAA,EAAMc,wBAClBA,KAAMA,EACN0C,OAAQ,IAAG,IAAA7C,WAAUG,6BAIjC,CAACM,EAAUpB,EAAImL,EAAcrK,IAGjC,OACI,gBAACW,GAAA,EAAc,CACX6B,oBAAqBA,EACrBxC,KAAMA,EACNY,SAAUA,EACVC,OAAQsf,OCxBpB,IAAe,IAAA7iB,OAlBgE,EAC3E4f,0BAEA,MAAMqD,EAAgBrD,EAChB,uDACA,+CAEA7S,GAAe,IAAAI,UAAQ,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAIqhB,KAAmB,CAACA,IAE7E,OACI,gBAAC,GAAiB,CACd/d,oBAAoB,6BACpB6H,aAAcA,EACdrK,KAAK,4BCkBjB,IAAe,IAAA1C,OA7B8E,EACzF4f,sBACA5c,YAAW,MAEX,MAAM,YAAE4W,GAAgBF,KAClBuJ,EAAgBrD,EAChB,kEACA,2DAEN,IAAAjO,YAAU,KACF3O,GACA4W,EAAY8F,cAAc,gCAAgC,KAI/D,CAAC1c,IAEJ,MAAM+J,GAAe,IAAAI,UAAQ,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAIqhB,KAAmB,CAACA,IAE7E,OACI,gBAAC,GAAiB,CACd/d,oBAAoB,qCACpBlC,SAAUA,EACV+J,aAAcA,EACdrK,KAAK,oCCkCjB,GAtBkF,I,IAAA,oBAC9Ekd,GAAsB,GAAK,EACxB/d,GAAK,cAFsE,yBAI9E,MAAM,YAAE+X,GAAgBF,MAElB,SAAEwJ,EAAQ,iBAAEC,EAAgB,oBAAEC,GA7BvB,EACbvhB,EACA+X,KAEA,MAAMyJ,EAAgBte,QAAQ6U,EAAY0J,cAAuB,0BAE3D,aAAEnK,EAAY,YAAEX,GAAgB3W,EAEhC0hB,GAAuBpK,EACvBqK,IAA2BhL,GAAeA,EAAY9R,OAAS,EAC/D4L,EACFkG,GAAeA,EAAY7D,MAAK,EAAGuE,iBAAkBA,IAAgBC,IAEzE,OAAO,OAAP,wBACOtX,GAAK,CACRqhB,SAAUK,EACVJ,iBACKI,GAAuBC,GACxBze,QAAQuN,IAAeA,EAAWmR,mBACtCL,qBAAsBG,GAAuBF,KAUWK,CAAS7hB,EAAO+X,GAE5E,OACI,gBAAC,KAAQ,KACJsJ,GAAY,gBAAC,GAAsB,CAACtD,oBAAqBA,IAEzDuD,GACG,gBAAC,GAA6B,CAC1BngB,UAAWogB,EACXxD,oBAAqBA,MCgDzC,MAAM+D,WAAqC,EAAAjI,UAA3C,c,oBAGI,KAAAC,MAAwC,CACpCiI,iBAAiB,GA0Qb,KAAAvC,uBAAgDzf,IACpD,MAAM,YAAE4W,EAAW,cAAEkH,GAAkB5D,KAAKja,OACtC,qBAAEgd,GAAyB/C,KAAKH,MAEX,IAAvBnD,EAAY9R,QACZoV,KAAKC,SAAS,CACV6H,iBAAiB,EACjB/E,0BAAsBzP,IAG1BsQ,EAAc,eAAgB,KACvBb,IAAyBjd,IAChCka,KAAKC,SAAS,CACV8C,qBAAsB/C,KAAK+H,2BAG/BnE,EAAc,eAAgB5D,KAAK+H,4BA0GnC,KAAAC,iBAA+B,KAAY,+CAC/C,MAAM,oBAAE9R,EAAmB,kBAAEJ,EAAoB,EAAA7N,KAAI,OAAE0M,GAAWqL,KAAKja,MAEvEia,KAAKC,SAAS,CACV6H,iBAAiB,EACjB/E,0BAAsBzP,UAGpB4C,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,WAIfgQ,EAAkB,CACpB3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,IAEQ,KAAAmiB,uBAAgDniB,IACpDka,KAAKC,SAAS,CACV6H,iBAAiB,EACjB/E,qBAAsBjd,IAGlC,CA3ZU,iBAAAsa,G,sDACF,MACI8H,6BAA8BC,EAAgC,gBAC9DC,EAAe,OACfzT,EAAM,iBACNiB,EAAmB,EAAA3N,KAAI,oBACvBogB,GACArI,KAAKja,MAETsiB,EAAoB1T,EAAQqL,KAAKsI,uBAEjC,IACQH,UACMC,WAGJpI,KAAKuI,kBACf,CAAE,MAAOhb,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEM,kBAAAgW,CACFC,EAGAgF,G,sDAEA,MAAM,oBACFtS,EAAmB,YACnBwG,EAAW,OACX/H,EAAM,iBACNiB,EAAmB,EAAA3N,KAAI,oBACvBogB,EAAmB,sBACnBI,GACAzI,KAAKja,OAEH,qBAAEgd,GAAyB/C,KAAKH,MAItC,GAFAwI,EAAoB1T,EAAQqL,KAAKsI,uBAG7BvF,IAAyByF,EAAUzF,sBAClCS,EAAU9G,YAAY9R,OAAS,GAA4B,IAAvB8R,EAAY9R,QACjD4Y,EAAUiF,wBAA0BA,EAEpC,UACUvS,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,WAEfka,KAAKuI,kBACf,CAAE,MAAOhb,GACLqI,EAAiBrI,EACrB,CAER,G,CAEM,oBAAA8S,G,sDACF,MAAM,qBACFqI,EAAuB,EAAAzgB,KAAI,oBAC3BiO,EAAmB,OACnBvB,EAAM,iBACNiB,EAAmB,EAAA3N,KAAI,UACvB0gB,EAAS,oBACTN,GACArI,KAAKja,MAETsiB,EAAoB1T,EAAQ,MAC5BgU,EAAUhU,EAAQ,MAElB,UACUuB,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,WAIf4iB,EAAqB,CACvBxV,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEA,MAAA9F,GACI,MAAM,YACFiV,EAAW,WACXkM,GAAa,EAAK,eAClBC,GAAiB,EAAK,oBACtB/E,EACAoE,6BAA8BC,EAAgC,qBAC9DpC,EAAoB,+BACpB+C,GAAiC,EAAK,WACtC3H,GAAa,GACbnB,KAAKja,OAEH,gBAAE+hB,EAAe,qBAAE/E,EAAuB/C,KAAK+H,0BACjD/H,KAAKH,MAET,IAAKsB,EACD,OAAO,KAGX,MAAMpC,EACFrC,EAAY7D,MAAMrC,GAAeA,EAAW4G,cAAgB2F,KAC5DrG,EAAY,GAEVqM,EACFZ,GAAoCzL,EAAY9R,OAAS,EACvDoe,GAAgCD,GAAgCjB,EAChEnb,GAAakc,GAAkB9C,KAA0B6C,EAEzDK,EAA4BjJ,KAAKkJ,iCACnCpB,EACA/I,GAEEoK,EACFzM,EAAY,IAAMiD,GAAwBjD,EAAY,IAE1D,OACI,gBAACyH,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,uBAAKtI,UAAU,yBACV8kB,GAA+BJ,GAC5B,gBAAC,G,CAEGrM,YAAaA,EACbsG,mBAAoBhD,KAAKiI,uBACzBhF,mBAAoBjD,KAAKgI,iBACzBjJ,mBAAoBkK,KAI1BE,GAA+BJ,GAC7B,gBAAC,G,CAEGrM,YAAaA,EACbsH,mBAAoBhE,KAAKuF,uBACzBvC,mBAAoBhD,KAAKiI,uBACzBhF,mBAAoBjD,KAAKgI,iBACzBjF,qBAAsBA,EACtBqD,qBAAsB0C,EACtBjC,mBAAoB7G,KAAKqJ,0BAIhCrJ,KAAKsJ,qCAELtJ,KAAKuJ,gBAAgBP,GAErBb,GACG,gBAAC,GAAuB,CACpB9K,aAAc0F,EACdrG,YAAaA,EACboH,oBAAqBA,GAAuBqF,IAInDnJ,KAAKwJ,+BAItB,CAEA,qBAAAH,GACI,MAAM,uBACFI,EAAsB,YACtB/M,EAAW,OACX/H,EACA+U,+BAAgCC,EAAkC,mBAClE9C,GACA7G,KAAKja,OAEH,qBAAEgd,EAAuB/C,KAAK+H,0BAA6B/H,KAAKH,MAChEd,GAAqB,IAAAlG,MAAK6D,EAAa,CACzCU,YAAa2F,IAGjB,GAAIhE,EAAoB,EflSjB,SACXvI,GAEA,IAAKqN,GAAiBrN,GAClB,MAAM,IAAInK,MAAM,4BAExB,Ce6RYud,CAAuB7K,GAEvB,MAAMV,EAAwBsL,EAC1B5K,EACApK,GAGJ,GAAI8U,EACA,OAGJ,GAAI5C,EACA,OAAOA,EAAmBxI,EAAuBU,EAEzD,CACJ,CAEA,eAAAwK,CAAgBP,GACZ,MAAM,YACF3S,EAAW,yBACXwT,GAA2B,EAAK,WAChCjB,EAAU,iBACVkB,GAAmB,EAAK,WACxBC,EAAU,OACVpV,EAAM,6BACNqV,EAA4B,6BAC5BC,GAA+B,EAAK,wBACpCC,GACAlK,KAAKja,MAET,OACI,uBACI1B,UAAW,IACP,SACA,WAAWsQ,EAAO7O,KAClB,iBACAmkB,EAA+B,GAAKD,GAExClkB,GAAIuQ,EACJmJ,MAAO,CACHsH,QACK+C,GAA4BC,IAAqBC,IACjDf,GACDJ,EACM,YACAtV,GAEd6W,UAAW,GAEVF,GACGC,GACAA,IAGhB,CAEQ,mBAAA5B,GACJ,MACIJ,6BAA8BC,EAAgC,sBAC9DM,EAAqB,2BACrB2B,GACApK,KAAKja,MAET,IAAK0iB,EACD,OAAO,KAGX,MAAM1J,EAAqBiB,KAAKqK,wBAEhC,OAAIlC,GAAoCpJ,GAC7BqL,GAGJ,IACX,CAEQ,qBAAAC,GACJ,MAAM,YAAE3N,GAAgBsD,KAAKja,OACvB,qBAAEgd,EAAuB/C,KAAK+H,0BAA6B/H,KAAKH,MAEtE,OAAO,IAAAhH,MAAK6D,EAAa,CAAEU,YAAa2F,GAC5C,CAsBQ,gCAAAmG,CACJpB,EACA/I,GAEA,OAAQ+I,GAAmBnI,GAAwBZ,GAC7CA,OACAzL,CACV,CAEQ,2BAAAkW,GACJ,MAAM,qBAAEc,EAAoB,SAAEC,GAAavK,KAAKja,MAC1CykB,EAAmB,gBAAC/gB,EAAA,EAAgB,CAAC3D,GAAG,wCAE9C,GAAIwkB,EACA,OACI,yBAGQ,qBACIjmB,UAAW,IAAW,aAAc,yBACpCyB,GAAIykB,EACJxhB,SAAS,EAAAC,EAAA,MAERwhB,GAMzB,CAEQ,kCAAAlB,GACJ,MAAM,qBAAEmB,EAAoB,kBAAEC,GAAsB1K,KAAKja,MAEzD,GAAI0kB,GAAwBC,EACxB,OAAO,uBAAKrmB,UAAU,sBAAsBqmB,EAEpD,CAEc,gBAAAnC,G,sDACV,MAAM,sBACFE,EAAqB,WACrBsB,EAAU,iBACVD,EAAgB,mBAChBa,EAAqB,EAAA1iB,KAAI,kBACzB6N,EAAoB,EAAA7N,KAAI,YACxByU,EAAW,OACX/H,EAAM,UACNgU,EAAS,eACTiC,EAAiB,EAAA3iB,MACjB+X,KAAKja,OAEH,qBAAEgd,EAAuB/C,KAAK+H,yBAAwB,gBAAED,GAC1D9H,KAAKH,MAET,IAAId,EAEJ,OAAK0J,EAMDqB,IAAqBC,GACrBpB,EAAUhU,EAAQiW,GAEXD,EAAmB,CACtBzX,SAAUyB,EAAO7O,OAIzB6iB,EAAUhU,EAAQ,MAEbmT,IACD/I,EACIrC,EAAY7D,MAAMrC,GAAeA,EAAW4G,cAAgB2F,KAC5DrG,EAAY,IAGb5G,EACH,CACI3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAErBiZ,KA1BA4J,EAAUhU,EAAQ,MAEXkW,QAAQC,UA0BvB,G,CAEQ,sBAAA/C,GACJ,MAAM,gBAAED,GAAoB9H,KAAKH,MAEjC,GAAIiI,EACA,OAGJ,MAAM,YAAEpL,GAAgBsD,KAAKja,MACvB4hB,EACFjL,EAAY7D,MAAMrC,GAAeA,EAAWmR,qBAAsBjL,EAAY,GAElF,OAAOiL,GAAqBA,EAAkBvK,WAClD,EA8BJ,Y,gBChhBO,MAAM2N,GAA8B,CAAC,kBCG5C,MAmBA,IAnB6C,KAAAC,iBACzC,EAAGjc,WACC,MAAMkc,EAAOlc,EAAKmc,UAElB,OAAOD,GAAQA,EAAKE,aAEvBA,GAAc,CAAC3U,EAAwB7B,MAC/BwW,GDFE,UAAsC,WACjD3U,EAAU,UACV2U,EAAS,cACTnM,IAEA,MACIvP,QAAQ,qBAAE2b,EAAoB,SAAEC,GAAU,mBAC1C5R,GACAuF,GACE,sCAAEsM,GAAwC,GAAS7R,GAAsB,CAAC,EAEhF,QACIsR,GAA4B7Y,SAASsE,EAAW2G,YAC/CmO,KAMDH,EAAUI,aAAa3gB,OAAS,GAAKugB,EAAU5gB,iBAAiBK,OAAS,KAKzE4L,EAAWgV,wBACFJ,GAKHA,IAAwBC,GACtC,CCzBeI,CAA6B,CAChCjV,aACA2U,YACAnM,cAAerK,MCd3B,MAmBA,IAnB+C,KAAAqW,iBAC3C,EAAGjc,WACC,MAAMkc,EAAOlc,EAAKmc,UAElB,OAAOD,GAAQA,EAAKE,aAEvBA,GAAc,CAAC3U,EAAwBwI,MAC/BmM,GCJE,UAAwC,UACnDA,EAAS,WACT3U,EAAU,cACVwI,IAEA,MAAM,wCAAE0M,GAA0C,IAC9C1M,aAAa,EAAbA,EAAevF,qBAAsB,CAAC,EAE1C,QAAuC,IAAnC0R,EAAUQ,cAAc/gB,SAAiB8gB,GAIrClV,EAAWgV,uBACvB,CDLe9B,CAA+B,CAClCyB,YACA3U,aACAwI,oBEyGZ,GApF+E,I,IAAA,OAC3ErK,EAAM,YACN0B,EAAW,kBACXP,EAAiB,oBACjBgO,EAAmB,+BACnBgF,EAA8B,mBAC9BjC,EAAkB,SAClBzb,EAAQ,4BACRwgB,EAA2B,gCAC3BC,EAA+B,4BAC/BC,EAA2B,iBAC3BlW,EAAgB,gBAChB9G,EAAe,cACfzD,EAAa,YACbyS,GAAW,EACRnX,GAAI,cAfoE,sSAiB3E,MAAM,wBACFolB,EAAuB,cACvBC,EAAa,cACbpI,EAAa,UACb+E,EAAS,oBACTN,GACAvK,EACEmO,EAAW5gB,EAAc0D,KAAKmd,eAC9B,qBAAEnG,GAAyB1a,EAAcC,SAEzCoR,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,IAG7DtJ,eACI0D,MAAM,sBAAE0Z,MAEZ,UACEsB,EAAakC,aAAQ,EAARA,EAAUE,QACvBjE,GAAgC6B,GAAc9gB,QAAQ0L,EAAOlF,OAAO2c,mBACpEX,EAA+B,GAAqCpgB,GACpEqe,EAAiC,GAAuCre,GAE9E,OACI,gCACI,gBAAC,GAA4B,iBACrB1E,EAAI,CACR0P,YAAaA,EACbH,oBAAqBpH,EAAgBoH,oBACrC8V,cAAeA,EACfnC,0BAAwB,EACxBkC,wBAAyBA,EACzBjW,kBAAmBA,EACnB4G,YAAaA,EACboH,oBAAqBA,EACrB2H,6BAA8BA,EAC9B/B,+BAAgCA,EAChCxB,6BAA8BA,EAC9BnC,qBAAsBA,IACtB0C,sBAAuBA,IACvBsB,YAAaA,EACb3B,gBAAiBtZ,EAAgBsZ,gBACjCzT,OAAQA,EACRiB,iBAAkBA,EAClBgO,cAAeA,EACf+E,UAAWA,EACXN,oBAAqBA,EACrBS,+BAAgCA,EAChCmB,8BAA4B,EAC5BoC,QAASvd,EAAgBwd,gBACzBzF,mBAAoBA,KAExB,gBAAC,KAAK,CACF/e,wBAAwB,qBACxBJ,iBAAkB0D,EAASoB,UAAU,uBACrCwB,OAAQ4d,EACR5jB,eAAgB6jB,EAChB3jB,uBAAuB,GAEvB,uBAAKpC,GAAIgmB,EAA6BtM,MAAO,CAAEzb,MAAO,YAExD6nB,GACE,uBAAK9lB,GAAIgmB,EAA6BtM,MAAO,CAAEsH,QAAS,YCzFxE,IAAYyF,IAAZ,SAAYA,GAER,kBAEA,cAEA,eACH,CAPD,CAAYA,KAAAA,GAAwB,KAepC,MAyKA,IAAe,EAAAC,GAAA,IAzKsD,I,IAAA,gBACjE1d,EAAe,cACfzD,EAAa,YACbyS,EAAW,OACXnJ,EAAM,SACNvJ,GAAQ,EACLzE,GAAI,cAN0D,uEAQjE,MAAMwC,GAAM,IAAAsjB,QAA8B,CACtCC,iBAAiB,KAEdd,EAA6Be,IAAkC,IAAAxN,WAAkB,IACjFF,EAAqB2N,IAA0B,IAAAzN,YAChD9I,EAAc,SAAS1B,EAAO7O,qBAC9BgmB,EAA8B,SAASnX,EAAO7O,uCAC9C+mB,EAA8B,SAASlY,EAAO7O,yBAC9CgnB,EAAsB,SAASnY,EAAO7O,uCAEtC2Q,EAAY9B,EAAO7O,GACnBgjB,EAAiCrS,IAAc8V,GAAyBQ,KAExEC,GAAe,IAAA9nB,cAAa+nB,IAC9B9jB,EAAI+jB,QAAQR,gBAAkBO,EAE9BN,EAA+BxjB,EAAI+jB,QAAQR,mBAC5C,IAEGS,GAAa,IAAAjoB,cAAY,KAC3BynB,GAA+B,GAC/BxjB,EAAI+jB,QAAQE,4BAAyB9Z,IACtC,IAEG+Z,GAAS,IAAAnoB,cAAaooB,IAExBnkB,EAAI+jB,QAAQE,uBAAyBE,IACtC,IAEGzB,GAAkC,IAAA3mB,cAAY,KAChDynB,GAA+B,GAE3BxjB,EAAI+jB,QAAQE,yBACZjkB,EAAI+jB,QAAQE,yBACZjkB,EAAI+jB,QAAQE,4BAAyB9Z,KAE1C,IAEGia,GAA0E,IAAAroB,cAC5E,CAAOsoB,EAAmCzO,KAAuC,iDAE7E,MAAMgE,EAAuBhE,aAAkB,EAAlBA,EAAoB3B,YAC3CqQ,EAA6B,CAC/B,CAAClB,GAAyBmB,QAAS,CAC/BC,eAAe,EACfC,oBAAoB,GAExB,CAACrB,GAAyBQ,MAAO,CAC7BY,eAAe,GAEnB,CAACpB,GAAyBsB,OAAQ,CAC9BC,WAAW,IAInB,OAAOhf,EAAgBgH,kBAAkB,OAAD,wBACjC0X,GAAO,CACVO,QAAS,CACLlB,4BACI9J,GAAwB8J,EAC5BxW,cACA2X,wBAAyBjL,EACzByK,QAASC,EAAahX,GACtBqW,sBACAmB,wBAAyB,CACrBC,WAAY,KACZ7X,YAAayV,EACbkB,eACAG,aACAE,UAEJhP,sBAAuBlV,EAAI+jB,QAAQ7O,sBACnC8P,mBAAqBtO,IACjB+M,EAAuB/M,OAIvC,KACA,CACIpJ,EACAoW,EACAxW,EACAyV,EACAgB,EACAE,EACAG,EACAE,EACAve,IAmCFnC,EACFtB,EAAcC,SAASya,wBACvB1a,EAAcC,SAAS8iB,uBAAuBzZ,EAAO7O,IAEnDuoB,EAAmB,CACrBC,YAAaxQ,EAAYwQ,cACzB5iB,aAAcoS,EAAYpS,cAG9B,OACI,gBAACuS,EAAA,GAAYF,SAAQ,CAACzX,MAAO+nB,GACzB,gBAACnI,GAAA,EAAgBnI,SAAQ,CAACzX,MAAO,CAAE+E,gBAAeyD,oBAC9C,gBAACyf,GAAA,EAAc,CAACzf,gBAAiBA,GAC7B,gBAAC6O,GAAmBI,SAAQ,CAACzX,MAAO,CAAEwX,gBAClC,gBAACqG,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,gBAAC,GAAW,iBACJhG,EAAI,CACRmlB,4BAA6BA,EAC7BD,gCAAiCA,EACjC/c,gBAAiBA,EACjBzD,cAAeA,EACfgL,YAAaA,EACbP,kBAAmByX,EACnBzJ,oBApCA,MACxB,OAAQnP,EAAOA,QACX,IAAK,iBACL,IAAK,UACL,IAAK,QACL,IAAK,kBACD,OAAO,EAEX,QACI,OAAO,IA2B8BmP,GACrB1Y,SAAUA,EACVuJ,OAAQA,EACRmJ,YAAaA,EACbgL,+BAAgCA,EAChC8C,4BAA6BA,EAC7B/E,mBA5DD,CACvBxI,EACAU,KAEA5V,EAAI+jB,QAAQ7O,sBAAwBA,EAGhC,gBAAC,GAAqB,CAClBY,oBAAqBA,EACrB7T,SAAUA,EACV4T,cAAerK,EACfoK,mBAAoBA,EACpBV,sBAAuBA,EACvBS,8BAA+B+N,eA2D3C,CAAC,CAAE5Q,QAAS,aC/MhB,IAAK,IAAL,SAAKkC,GACD,mCACA,uCACA,kCACH,CAJD,CAAK,QAAe,KAcpB,MAAM,GAA4B,EAC9BE,wBACA1J,aAKA,MAAM2J,EAAoC,CAAC,EAc3C,OAZID,IACAC,EAAgB,GAAgBC,YAAc,CAAEC,OAAO,IAG5C,WAAX7J,IACA2J,EAAgB,GAAgBG,cAAgB,CAAED,OAAO,IAG9C,SAAX7J,IACA2J,EAAgB,GAAgBI,YAAc,CAAEF,OAAO,IAGpDF,GAGL,GAAiB,CAACM,EAA2BC,MAC7CA,EAAiBD,KAAcC,EAAiBD,GAAUJ,MAwKhE,GAtK6E,EACzEM,gCACAT,wBACAU,qBACAC,gBACAC,0BAEA,MAAOJ,EAAkBK,IAAuB,IAAAC,UAC5C,GAA0B,CAAEd,wBAAuB1J,OAAQqK,EAAcrK,WAG7E,IAAAkB,YAAU,K,MACDoJ,KAKDA,EAAoBG,WAClBP,EAAiBI,EAAoBG,aACY,QAA/C,EAAAP,EAAiBI,EAAoBG,kBAAU,eAAEZ,SAC7CS,EAAoBT,QAExBS,EAAoBG,YAAc,GAAgBb,WAClDW,EAAoB,OAAD,wBACZL,GAAgB,CACnB,CAAC,GAAgBN,YACbU,EAAoBI,aAAcN,aAAkB,EAAlBA,EAAoBO,OAChD,OAAD,wBAAML,GAAmB,CAAET,OAAO,IACjC,OAAD,UAAMS,MAGnBC,EAAoB,OAAD,wBACZL,GAAgB,CACnB,CAACI,EAAoBG,WAAYH,SAK9C,CAACA,EAAqBC,EAAqBH,aAAkB,EAAlBA,EAAoBO,SAElE,IAAAzJ,YAAU,MACFkJ,aAAkB,EAAlBA,EAAoB3B,cACpB8B,EACI,GAA0B,CAAEb,wBAAuB1J,OAAQqK,EAAcrK,YAGlF,CAACoK,aAAkB,EAAlBA,EAAoB3B,YAAa4B,EAAcrK,OAAQ0J,IAE3D,MAAMkB,EAAsBzU,GACxB,GAAeA,EAAK+T,IAChB,wBACIxa,UAAU,2FACVmb,MAAO,CAAEC,UAAW,OAAQC,MAAO,SAEnC,uBACI5C,IAAI,sBACJzY,UAAU,uBACV0Y,IAAI,8FAKpB,OACI,2BACKsB,GACG,yBACI,8BACI,gBAAC5U,EAAA,EAAgB,CAAC3D,GAAG,4DAGzB,2BAEA,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,sDAI7B,uBAAKzB,UAAU,gBAAgByB,GAAIgZ,GAC9BT,GACG,uBACIha,UAAW,IACP,aACA,uBACA,CACI,sCAC6B,SAAzB2a,EAAcrK,QAItB,CAAE,6BAA8B0J,KAGpC,yBAAOjY,QAAS,GAAgBmY,YAC5B,gBAAC9U,EAAA,EAAgB,CAAC3D,GAAG,sCAEzB,uBACIzB,UAAW,IACP,aACA,+BACA,WACA,gCACA,CACI,+BAAgC,GAC5B,GAAgBka,WAChBM,KAGX,WACS,GAAgBN,WAC1BzY,GAAI,GAAgByY,aAEvBgB,EAAmB,GAAgBhB,aAGlB,WAAzBS,EAAcrK,QACX,uBAAKtQ,UAAU,yCACX,yBAAO+B,QAAS,GAAgBqY,cAC5B,gBAAChV,EAAA,EAAgB,CAAC3D,GAAG,mCAEzB,uBACIzB,UAAW,IACP,aACA,+BACA,WACA,gCACA,CACI,+BAAgC,GAC5B,GAAgBoa,aAChBI,KAGX,WACS,GAAgBJ,aAC1B3Y,GAAI,GAAgB2Y,eAEvBc,EAAmB,GAAgBd,eAGlB,SAAzBO,EAAcrK,QACX,uBAAKtQ,UAAU,mCACX,yBAAO+B,QAAS,GAAgBsY,YAC5B,gBAACjV,EAAA,EAAgB,CAAC3D,GAAG,0CAEzB,uBACIzB,UAAW,IACP,aACA,+BACA,WACA,gCACA,CACI,+BAAgC,GAC5B,GAAgBqa,WAChBG,KAGX,WACS,GAAgBH,WAC1B5Y,GAAI,GAAgB4Y,aAEvBa,EAAmB,GAAgBb,gBC7L5D,IAAY8P,IAAZ,SAAYA,GACR,YACA,WACH,CAHD,CAAYA,KAAAA,GAAqC,KAgCjD,MAuFA,GAvF+E,I,IAAA,OAC3E7Z,EAAM,YACN0B,EAAW,kBACXP,EAAiB,oBACjBgO,EAAmB,+BACnBgF,EAA8B,mBAC9BjC,EAAkB,SAClBzb,EAAQ,yCACRqjB,EAAwC,eACxCC,EAAc,gCACd7C,EAA+B,4BAC/BC,EAA2B,cAC3BzgB,EAAa,gBACbyD,EAAe,iBACf8G,GAAgB,EACbjP,GAAI,cAfoE,sTAiB3E,MAAM,YAAEmX,GAAgBF,KAClBqO,EAAW5gB,EAAc0D,KAAKmd,eAC9B,qBAAEnG,GAAyB1a,EAAcC,UACzC,sBAAEmd,GAA0Bpd,EAAc0D,KAC1C2N,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,GAC3DoV,EAAakC,aAAQ,EAARA,EAAUE,QACvBjE,GAAgC6B,GAAc9gB,QAAQ0L,EAAOlF,OAAO2c,mBACpEX,EAA+B,GAAqCpgB,GACpEqe,EAAiC,GAAuCre,IAExE,wBACF0gB,EAAuB,cACvBC,EAAa,cACbpI,EAAa,UACb+E,EAAS,oBACTN,GACAvK,EAEJ,OACI,gCACI,gBAAC,GAA4B,iBACrBnX,EAAI,CACR0P,YAAaA,EACbH,oBAAqBpH,EAAgBoH,oBACrC8V,cAAeA,EACfnC,0BAAwB,EACxBkC,wBAAyBA,EACzBjW,kBAAmBA,EACnB4G,YAAaA,EACboH,oBAAqBA,EACrB2H,6BAA8BA,EAC9B/B,+BAAgCA,EAChCxB,6BAA8BA,EAC9BnC,qBAAsBA,IACtB0C,sBAAuBA,IACvBsB,YAAaA,EACb3B,gBAAiBtZ,EAAgBsZ,gBACjCzT,OAAQA,EACRiB,iBAAkBA,EAClBgO,cAAeA,EACf+E,UAAWA,EACXN,oBAAqBA,EACrBS,+BAAgCA,EAChCmB,8BAA4B,EAC5BoC,QAASvd,EAAgBwd,gBACzBzF,mBAAoBA,KAExB,gBAAC,KAAK,CACF/e,wBAAwB,qBACxBJ,iBAAkB0D,EAASoB,UAAU,uBACrCwB,OAAQygB,EACRzmB,eAAgB6jB,EAChB3jB,uBAAuB,EACvBsX,MACKkP,GAAgC,WAAd/Z,EAAO7O,GAMpB,CAAC,EALD,CACI6oB,QAAS,CACL7H,QAAS,UAM3B,uBAAKhhB,GAAIgmB,EAA6BtM,MAAO,CAAEzb,MAAO,YAExD0qB,GAA4C,uBAAK3oB,GAAIgmB,MC1GnE,IAAY8C,IAAZ,SAAYA,GAER,kBAEA,aACH,CALD,CAAYA,KAAAA,GAAwB,KAapC,MAgLA,IAAe,EAAApC,GAAA,IAhLsD,I,IAAA,gBACjE1d,EAAe,cACfzD,EAAa,YACbyS,EAAW,OACXnJ,EAAM,SACNvJ,EAAQ,iBACRwK,GAAgB,EACbjP,GAAI,cAP0D,0FASjE,MAAMwC,GAAM,IAAAsjB,QAA8B,CACtCC,iBAAiB,KAGd+B,EAA0CI,IAC7C,IAAA1P,WAAkB,IACf2P,EAAuCC,IAC1C,IAAA5P,WAAkB,IACfF,EAAqB2N,IAA0B,IAAAzN,YAChD9I,EAAc,SAAS1B,EAAO7O,qBAC9BgmB,EAA8B,SAASnX,EAAO7O,uCAC9C+mB,EAA8B,SAASlY,EAAO7O,yBAC9C2Q,EAAY9B,EAAO7O,GACnBgjB,EAAiCrS,IAAcmY,GAAyB7B,KAExEC,GAAe,IAAA9nB,cAAa+nB,IAC9B9jB,EAAI+jB,QAAQR,gBAAkBO,EAE9B4B,EAA4C1lB,EAAI+jB,QAAQR,mBACzD,IAEGS,GAAa,IAAAjoB,cAAY,KAC3B6pB,GAAyC,GACzCF,GAA4C,GAC5C1lB,EAAI+jB,QAAQE,4BAAyB9Z,IACtC,IAEG0b,GAAkB,IAAA9pB,cAAY,KAChC6pB,GAAyC,KAC1C,IAEG1B,GAAS,IAAAnoB,cAAaooB,IAExBnkB,EAAI+jB,QAAQE,uBAAyBE,IACtC,IAEGzB,GAAkC,IAAA3mB,cAAY,KAChD6pB,GAAyC,GACzCF,GAA4C,GAExC1lB,EAAI+jB,QAAQE,yBACZjkB,EAAI+jB,QAAQE,yBACZjkB,EAAI+jB,QAAQE,4BAAyB9Z,KAE1C,IAEGia,GAA0E,IAAAroB,cAC5E,CAAOsoB,EAAmCzO,KAAuC,iDAC7E,MAAM0O,EAA6B,CAC/B,CAACmB,GAAyBlB,QAAS,CAC/BC,eAAe,EACfC,oBAAoB,IAItB7K,EAAuBhE,aAAkB,EAAlBA,EAAoB3B,YAEjD,OAAOtO,EAAgBgH,kBAAkB,OAAD,wBACjC0X,GAAO,CACVyB,QAAS,CACLpC,4BACI9J,GAAwB8J,EAC5BxW,cACA2X,wBAAyBjL,EACzByK,QAASC,EAAahX,GACtBwX,wBAAyB,CACrBC,WAAY,KACZ7X,YAAayV,EACbkB,eACAG,aACAE,SACA2B,mBAEJ3Q,sBAAuBlV,EAAI+jB,QAAQ7O,sBACnC8P,mBAAqBtO,IACjB+M,EAAuB/M,OAIvC,KACA,CACIpJ,EACAoW,EACAxW,EACAyV,EACAkB,EACAG,EACAE,EACA2B,EACAlgB,IAkCFnC,EACFtB,EAAcC,SAASya,wBACvB1a,EAAcC,SAAS8iB,uBAAuBzZ,EAAO7O,IAEnDuoB,EAAmB,CACrBC,YAAaxQ,EAAYwQ,cACzB5iB,aAAcoS,EAAYpS,cAG9B,OACI,gBAACuS,EAAA,GAAYF,SAAQ,CAACzX,MAAO+nB,GACzB,gBAACnI,GAAA,EAAgBnI,SAAQ,CAACzX,MAAO,CAAE+E,gBAAeyD,oBAC9C,gBAACyf,GAAA,EAAc,CAACzf,gBAAiBA,GAC7B,gBAAC6O,GAAmBI,SAAQ,CAACzX,MAAO,CAAEwX,gBAClC,gBAACqG,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,gBAAC,GAAW,iBACJhG,EAAI,CACRmlB,4BAA6BA,EAC7BD,gCAAiCA,EACjC/c,gBAAiBA,EACjBzD,cAAeA,EACfgL,YAAaA,EACbwT,0BAAwB,EACxB/T,kBAAmByX,EACnBzJ,oBArCA,MACxB,OAAQnP,EAAOA,QACX,IAAK,iBACL,IAAK,UACL,IAAK,QACL,IAAK,kBACD,OAAO,EAEX,QACI,OAAO,IA4B8BmP,GACrB4K,eAAgBI,EAChB1jB,SAAUA,EACVuJ,OAAQA,EACRiB,iBAAkBA,EAClBkI,YAAaA,EACbgL,+BAAgCA,EAChC2F,yCACIA,EAEJ5H,mBAhED,CACvBxI,EACAU,KAEA5V,EAAI+jB,QAAQ7O,sBAAwBA,EAGhC,gBAAC,GAAqB,CAClBY,oBAAqBA,EACrBD,cAAerK,EACfoK,mBAAoBA,EACpBV,sBAAuBA,EACvBS,8BAA+B+N,eAgE3C,CAAC,CAAE5Q,QAAS,aChND,SAASiM,IAA6B,OACjDzY,EAAM,SACNwc,EAAQ,qBACRiD,EAAoB,cACpBlQ,IAEA,SACKvP,EAAOI,iBAAiBsf,wBACxBnQ,EAAcvP,OAAO2c,mBACtBH,EAASE,SACT+C,EAMR,CC0BA,SAASE,GACLrpB,GAEA,MAAMspB,GAA2B,IAAAroB,aAAW,CAAC0V,EAAmC,KAC5EA,EAAYnE,OAAOuL,MAEjBwL,GAA2B,IAAAtoB,aAAW,CAAC0V,EAAmC,KAC5EA,EAAYnE,QAAO,EAAGiT,4BAA6BA,OAEjD,gBAAE1c,EAAe,cAAEzD,EAAa,qBAAE6jB,GAAuB,EAAK,OAAEva,GAAW5O,GAG7EgJ,MAAM,QACFmc,EAAO,UACPlc,EAAS,YACTkd,EAAW,eACXzP,EAAc,sBACdgM,EAAqB,uBACrB8G,GAEJjkB,UAAU,qBAAEya,IACZ1a,EAEE4f,EAAOC,IACPzb,EAAST,IACTid,EAAWC,IAEjB,IAAKzc,IAAWwb,IAASgB,EACrB,MAAM,IAAI5f,MAAM,0BAGpB,MAAMmjB,EAA2BH,EAAyB5S,EAAe9H,IACnE8a,EAAqBH,EAAyBE,GAEpD,MAAO,CACH9S,YAAa+S,EACbC,aAA4C,IAA9BD,EAAmB7kB,QAAgB4kB,EAAyB5kB,OAAS,EACnFsd,8BACKqH,EAAuB5a,EAAO7O,GAAI6O,EAAOsH,UAC1CiM,GAA6B,CACzBzY,SACAwc,WACAiD,uBACAlQ,cAAerK,IAEvBoR,qBAAsBA,IACtB0C,sBAAuBA,IACvBL,gBAAiBtZ,EAAgBsZ,gBAEzC,CAEA,MAAMuH,WAAqC,EAAA/P,UAA3C,c,oBAII,KAAAC,MAAkC,CAC9B+P,uBAAuB,GA8FnB,KAAAC,uBAAqC,KACzC7P,KAAKC,SAAS,CACV2P,uBAAuB,EACvB7Q,wBAAoBzL,KAIpB,KAAA2U,uBAAgDniB,IACpD,MAAM,YAAE4W,GAAgB0S,GAAmCpP,KAAKja,OAEhEia,KAAKC,SAAS,CACV2P,uBAAuB,EACvB7Q,oBAAoB,IAAAlG,MAAK6D,EAAa,CAAEU,YAAatX,MAGjE,CA1GU,iBAAAsa,G,sDACF,MAAM,kBAAEtK,EAAiB,OAAEnB,EAAM,iBAAEiB,EAAmB,EAAA3N,MAAS+X,KAAKja,OAE5DmiB,6BAA8BC,EAAgC,gBAAEC,GACpEgH,GAAmCpP,KAAKja,OAE5C,UACU+P,EAAkB,CACpB3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,KAGjBqiB,UACMC,IAEd,CAAE,MAAO7a,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEM,oBAAA8S,G,sDACF,MAAM,oBAAEnK,EAAmB,OAAEvB,EAAM,iBAAEiB,EAAmB,EAAA3N,MAAS+X,KAAKja,MAEtE,UACUmQ,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEA,MAAA9F,GACI,MAAM,YAAEqoB,EAAW,eAAEjH,GAAiB,GAAU7I,KAAKja,OAE/C,qBACFggB,EAAoB,YACpBrJ,EAAW,aACXgT,EACAxH,6BAA8BC,GAC9BiH,GAAmCpP,KAAKja,QAEtC,mBAAEgZ,EAAqBiB,KAAK+P,wBAA2B/P,KAAKH,MAE5DlT,EAAYkc,GAAkB9C,EAC9BgD,EACFZ,IAAqCzL,EAAY9R,OAAS,GAAK8kB,GAEnE,OAAKI,GAAgB3H,EAKjB,gBAAChE,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,uBAAKtI,UAAU,uCACVyrB,EAEA/G,GACG,gBAAC,GAAyB,CACtBrM,YAAaA,EACbsG,mBAAoBhD,KAAKiI,uBACzBhF,mBAAoBjD,KAAK6P,uBACzB9Q,mBAAoBA,IAI3BoJ,GACG,gBAAC,GAAuB,CACpB9K,aAAc0B,GAAsBA,EAAmB3B,YACvDV,YAAaA,EACboH,qBAAqB,MArB9B,IA2Bf,CAEQ,oBAAAiM,GACJ,MAAM,sBAAEH,GAA0B5P,KAAKH,OAEjC,YAAEnD,GAAgB0S,GAAmCpP,KAAKja,OAEhE,IAAI6pB,GAA0BlT,EAAY9R,OAI1C,OAAO,IAAAiO,MAAK6D,EAAa,CAAEiL,mBAAmB,KAAWjL,EAAY,EACzE,EAmBJ,YC/LA,IAAe,EAAA8P,GAAA,IAjBqD,I,IAAA,gBAChE1d,GAAe,EACZnI,GAAI,cAFyD,qBAIhE,MAAMmpB,GAAc,IAAAze,UAAQ,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,8BAA+B,IAEtF,OACI,gBAACkqB,GAAsB,iBACfrpB,EAAI,CACRmI,gBAAiBA,EACjBoH,oBAAqBpH,EAAgBoH,oBACrC4Z,YAAaA,EACbha,kBAAmBhH,EAAgBgH,uBAO3C,CAAC,CAAEhQ,GAAI,YCAX,IAAe,EAAA0mB,GAAA,IApBuD,I,IAAA,gBAClE1d,EAAe,cACfzD,EAAa,OACbsJ,EAAM,YACNmJ,GAAW,EACRnX,GAAI,cAL2D,4DAOlE,OACI,gBAACqpB,GAAsB,iBACfrpB,EAAI,CACRmI,gBAAiBA,EACjBzD,cAAeA,EACf6K,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmBhH,EAAgBgH,kBACnCnB,OAAQA,EACRmJ,YAAaA,OAOrB,CAAC,CAAE7B,QAAS,cC6DhB,IAAe,EAAAuQ,GAAA,IA7E0D,I,IAAA,gBACrE1d,EAAe,cACfzD,EAAa,YACbyS,EAAW,OACXnJ,EACAA,QACI8E,oBAAoB,kBAAEiR,EAAiB,aAAEuF,KAC5C,EACEtpB,GAAI,cAR8D,qEAUrE,MAAMupB,GAA+B,IAAAhrB,cAChCsoB,GACG1e,EAAgBgH,kBAAkB,OAAD,wBAC1B0X,GAAO,CACV2C,UAAW,CACPC,aAAc,oBAG1B,CAACthB,IAGCuhB,GAAS,IAAAnrB,cAAY,IAAMorB,OAAOC,SAASF,UAAU,KAErD,wBACFtE,EAAuB,cACvBC,EAAa,cACbpI,EAAa,UACb+E,EAAS,oBACTN,GACAvK,GAGA/O,MAAM,YAAEyhB,EAAW,sBAAE/H,GACrBnd,UAAU,qBAAEya,IACZ1a,EAEEolB,EAAWD,IACXvE,EAAW5gB,EAAc0D,KAAKmd,cAE9BhE,IADkB+D,aAAQ,EAARA,EAAUE,UAEVljB,QAAQ0L,EAAOlF,OAAO2c,mBAExC1P,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,GAEjE,OACI,gBAAC,GAA4B,iBACrBhO,EAAI,CACR4jB,SAAS,eACTlU,YAAY,gBACZH,oBAAqBpH,EAAgBoH,oBACrC8V,cAAeA,EACfD,wBAAyBA,EACzBnD,YAAU,EACV9S,kBAAmBoa,EACnBxT,YAAaA,EACb+O,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAAuCre,GACvE6c,6BAA8BA,EAC9BnC,qBAAsBA,IACtB0C,sBAAuBA,IACvBqB,kBAAkB,EAClBC,YAAY,IAAA2G,MAAKD,aAAQ,EAARA,EAAUE,SAAU,CAAEC,WAAYjc,EAAO7O,KAC1DsiB,gBAAiBtZ,EAAgBsZ,gBACjCzT,OAAQA,EACRkc,UAAWR,EACX3F,kBAAmBA,EACnB9G,cAAeA,EACf+E,UAAWA,EACXN,oBAAqBA,EACrBlH,aAAc8O,EACdxF,uBAAwBwF,EACxB3F,uBAAwB2F,EACxB5D,QAASvd,EAAgBwd,qBAOjC,CAAC,CAAExmB,GAAI,eCtCX,IAAe,EAAA0mB,GAAA,IAhDmD,EAC9D7X,SACA7F,kBACA1D,WACAwK,wBAEA,IAAAC,YAAU,MACgC,iDAClC,UACU/G,EAAgBgH,kBAAkB,CACpC3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,GACjBgrB,SAAU,CACNC,cAAe3lB,EAASoB,UAAU,sBAClCwkB,cAAe5lB,EAASoB,UAAU,wBAG9C,CAAE,MAAOe,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAIO,MACqC,iDACpC,UACUuB,EAAgBoH,oBAAoB,CACtC/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,OAIL,CAACuB,EAAiB1D,EAAUuJ,EAAQiB,IAGhC,mCAKP,CAAC,CAAE9P,GAAI,cC7BX,IAAe,EAAA0mB,GAAA,IApB0D,I,IAAA,gBACrE1d,EAAe,cACfzD,EAAa,OACbsJ,EAAM,YACNmJ,GAAW,EACRnX,GAAI,cAL8D,4DAOrE,OACI,gBAACqpB,GAAsB,iBACfrpB,EAAI,CACRmI,gBAAiBA,EACjBzD,cAAeA,EACf6K,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmBhH,EAAgBgH,kBACnCnB,OAAQA,EACRmJ,YAAaA,OAOrB,CAAC,CAAE7B,QAAS,iBCoJhB,GAnJI,EACAtH,SACA7F,kBACAgP,cACAlI,mBACAqb,qBACAC,sBACA9sB,WACA+sB,oBACA/lB,WACAgmB,8BAEA,MAAMC,GAAmB,IAAA5E,QAA6B,MAChD6E,GAAkB,IAAA7E,QAAgC,MAClD8E,GAAkB,IAAA9E,QAA4B,MAC9C+E,GAAkB,IAAA/E,SAAO,GAEzBgF,EAAa3T,EAAY0J,cAAc,SACvCkK,EAAuB5T,EAAY0J,cAAc,wBAEjDmK,EAAe,KAAY,iDAC7B,MAAMC,QAAyB9T,EAAY6T,eAE3C,OAAOle,OAAOoe,KAAKD,EACvB,IAEME,EAAiB,KAAY,iDAC/B,IAAKT,EAAiBnE,QAAS,cAEFyE,KAEV/mB,OACfymB,EAAiBnE,QAAQ6E,UAEzBV,EAAiBnE,QAAQ8E,QAEjC,IAEMC,GAAqB,IAAA/sB,cAAY,KAC/BisB,IAAsBC,GACtBtT,EAAYiO,wBAAwBpX,GAAQ,GAC5C6c,EAAgBtE,SAAU,IAClBsE,EAAgBtE,SAAWqE,EAAgBrE,UACnDpP,EAAYiO,wBAAwBpX,GAAQ,GAE5C0O,YAAW,K,MACgB,QAAvB,EAAAkO,EAAgBrE,eAAO,iBAEvBsE,EAAgBtE,SAAU,IAC3B,MAER,CAACiE,KAEJ,IAAAtb,YAAU,KACNoc,MACD,CAACA,EAAoBV,EAAgBrE,WAExC,IAAArX,YAAU,KACDic,MACN,CAACL,KAEJ,IAAA5b,YAAU,KACNyb,EAAgBpE,QAAU,CACtBwE,qBAAsBN,GAA2BnoB,QAAQyoB,MAE9D,CAACA,EAAsBN,IA+E1B,OARA,IAAAvb,YAAU,MArE4B,iDAClC,UACU/G,EAAgBgH,kBAAkB,CACpC3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,GACjB,CAACmrB,GAAqB,OAAF,QAChBiB,UAAW,6BACXC,0CAA0C,EAC1CC,eAAgB,KACZtU,EAAYiO,wBAAwBpX,GAAQ,IAEhD0d,OAASD,IACLb,EAAgBrE,QAAUkF,GAE9BjnB,WAAY,KACR2S,EAAYpS,cAAa,GACzBoS,EAAY3S,cAEhBmnB,QAAU/kB,IACNuQ,EAAYkO,cAAcrX,GAAQ,GAEZ,wBAAlBpH,EAAMjB,QACNsJ,EACI,IAAIvJ,MAAMjB,EAASoB,UAAU,wCAGjCoJ,EAAiBrI,IAGzBglB,WAAY,CAAOzH,EAAqB0H,KAAsC,iDAC1E,MAAMC,QAAuBd,IAE7B,OAAIc,EAAe7nB,QACfkT,EAAYpS,cAAa,GACzB+mB,EAAeC,SAAS5nB,GAAQgT,EAAY6U,gBAAgB7nB,KAErD0nB,KAGJ1H,GACX,IACA8H,aAAqBC,IAA2B,iDAC5CxB,EAAiBnE,QAAU2F,QACrBf,GACV,IACAgB,gBAAiB,IAAMxB,EAAgBpE,SACnCgE,GAAuB,CAAC,IAGxC,CAAE,MAAO3jB,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAkBW,MAhB6B,iDACpC,UACUuB,EAAgBoH,oBAAoB,CACtC/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,OAQG,IAEInJ,EAAW,gCAAGA,GAAe,kCCvFxC,GAlF0CuQ,IACtC,MAAOwc,EAAmB4B,IAAwB,IAAA5T,aAE5C,cAAE9T,IAAkB,UACpB4gB,EAAW5gB,EAAc0D,KAAKmd,cAC9BxP,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,IAE3D,YAAEmJ,GAAgBF,MAClB,cAAEgG,GAAkB9F,EAEpB6H,GAAqB,IAAAtU,UACvB,IAAMqL,EAAYnE,OAAOuL,KACzB,CAACpH,IAGCsW,GAA4B,IAAA3hB,UAC9B,IAAMsU,EAAmBpN,QAAQ/B,GAAeA,EAAWgV,0BAC3D,CAAC7F,IAGCsN,EAAwBtN,EAAmB/a,OAAS,EAEpDsd,IACD+D,aAAQ,EAARA,EAAUE,UACXljB,QAAQ0L,EAAOlF,OAAO2c,qBACrBzX,EAAO8E,mBAAmByZ,WACzBnK,EAA+Bb,GAAgC+K,EAE/DE,EAA4BpK,IAAiCoI,EAC7DC,EACFrI,KAAkCoI,IAAsB6B,EAA0BpoB,QActF,IAAAiL,YAAU,KACNkd,EAAqB7K,EAbI,MACzB,IAAK8K,EAA0BpoB,OAC3B,OAOJ,OAJiCooB,EAA0Bza,QACvD,EAAGoP,uBAAwBA,IAGC,IAAMqL,EAA0B,IAIZjD,QAAyBzc,KAC9E,CAAC4U,EAA8B8K,KAElC,IAAAnd,YAAU,KACDkT,GACDnF,EAAc,eAAgB,MAEnC,CAACA,EAAemF,IAEnB,MAAMd,GAAyB,IAAA/iB,cAC1BY,IACGitB,GAAqB,IAAAla,MAAKma,EAA2B,CAAE5V,YAAatX,KACpE8d,EAAc,eAAgB9d,GAC9B8d,EAAc,gCAAgC,KAElD,CAACoP,EAA2BpP,IAG1BiM,GAAyB,IAAA3qB,cAAY,KACvC6tB,OAAqBzf,GACrBsQ,EAAc,eAAgB,IAC9BA,EAAc,wBAAwB,GACtCA,EAAc,gCAAgC,KAC/C,CAACA,IAEJ,MAAO,CACHoP,4BACA7B,oBACAlJ,yBACA4H,yBACA3H,+BACAa,+BACAoK,4BACA/B,4BCmBR,IAAe,EAAA5E,GAAA,IAvFkEzmB,IAC7E,MACIsF,eACI0D,MAAM,sBAAE0Z,EAAqB,YAAEyD,EAAW,eAAEzP,GAC5CnR,UAAU,qBAAEya,EAAoB,uBAAEqI,KAStCroB,EAPA,EAOAA,EAAK,QAND0J,QAAQ,kBAAE2c,IAAmB,EACJ8G,GAAU,iCAAf,KAPtB,OASFve,EAAM,gBACN7F,EAAe,iBACf8G,GACA7P,GAEE,0BACFitB,EAAyB,kBACzB7B,EAAiB,uBACjBlJ,EAAsB,uBACtB4H,EAAsB,6BACtB3H,EAA4B,6BAC5Ba,EAA4B,wBAC5BqI,GACA,GAAiCzc,GAsBrC,IApBA,IAAAkB,YAAU,KACN,MAUM,QAAEsW,GAAYD,KAAiB,CAAC,GAEPC,GAAWC,IAAsB8G,IAZrB,iDACvC,UACUpkB,EAAgBsZ,iBAC1B,CAAE,MAAO7a,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,QAWCkb,IACD,OAAO,KAGX,MAAM9b,EAAYoZ,KAA0BqI,EAAuBzZ,EAAO7O,IACpEstB,EAAiB3W,KAAoB,GAE3C,OACI,gBAAC0H,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,gBAAC,GAAyC,eACtCwkB,kBAAmBA,EACnBF,mBAAmB,uBACnBG,wBAAyBA,GACrBrrB,GAEHgjB,GACG,gBAAC,GAAyB,CACtBrM,YAAasW,EACbhQ,mBAAoBiF,EACpBhF,mBAAoB4M,EACpB9Q,mBAAoBoS,IAI3BC,GACG,2BACI,gBAAC9f,EAAA,EAAc,CAACxL,GAAG,qDAI1BoiB,GACG,gBAAC,GAAuB,CACpB7K,aAAc8T,aAAiB,EAAjBA,EAAmB/T,YACjCV,YAAa0W,EACbtP,qBAAmB,QAUvC,CAAC,CAAEhe,GAAI,0BCxGI,SAAS,GAAyBoN,EAAkBC,GAC/D,OAAO,IAAAC,SAAQ,CAACD,EAAWD,IAAWd,KAAK,IAC/C,CCOA,MAiDA,IAAe,EAAAoa,GAAA,IAjDsEzmB,IACjF,MAAM,OAAE4O,EAAM,cAAEtJ,GAAkBtF,EAGlC,IAF8BsF,EAAc0D,KAAK0Z,wBAG7C,OAAO,KAGX,MAAM4K,EAAoB,GAAyB1e,EAAO7O,GAAI6O,EAAOsH,SAC/DqX,EAAe,CACjBC,mBAAoB,IAAIF,IACxBG,gBAAiB,CACbC,UAAW,CACPC,WAAY,+CACZC,gBAAiB,cACjBC,UAAW,QACXC,aAAc,OACdC,YAAa,OACbC,YAAa,UACbC,aAAc,MACdC,YAAa,OAEjBC,MAAO,CACH,SAAU,CACNC,gBAAiB,QACjBC,MAAO,OACPC,SAAU,QAEd,gBAAiB,CACbD,MAAO,WAEX,kBAAmB,CACfA,MAAO,cAMvB,OACI,gBAAC,GAAyC,eACtClD,oBAAqBoC,EACrBrC,mBAAmB,6BACflrB,GAEJ,uBAAK1B,UAAW,kBAAkBsQ,EAAO7O,oBAAqBA,GAAIutB,OAO1E,CAAC,CAAEpX,QAAS,+B,gBC1DhB,MAMA,IAAe,EAAA/N,GAAA,IANqB,IAChC,uBAAKrK,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,yO,gBCFD,SAASqwB,GAAuBhuB,EAAeuM,EAAY,KACtE,MAAM,KAAEC,IAAS,IAAAC,QAAOzM,GAExB,IAAKwM,EACD,OAAOxM,EAGX,MAAMiuB,ECTK,SAAkCjuB,EAAeuM,EAAY,KACxE,MAAM,KAAEC,IAAS,IAAAC,QAAOzM,GAExB,OAAKwM,EAIExM,EAAM0M,QAAQ,IAAIP,OAAOI,EAAW,KAAM,IAHtCvM,CAIf,CDC6B,CAAyBA,EAAOuM,GAEzD,OAAOC,EAAK0hB,KACPjc,QAAQkc,GAAaF,EAAiB3pB,OAAS6pB,IAC/CC,QACG,CAACC,EAAQF,EAAUG,IACf,CAACD,EAAOhiB,MAAM,EAAG8hB,EAAWG,GAAQD,EAAOhiB,MAAM8hB,EAAWG,IAAQxiB,KAAKS,IAC7E0hB,EAEZ,CEIA,MAAMM,WAA8B,EAAAzR,cAApC,c,oBACY,KAAA0R,UAAwC,IAAAC,aACxC,KAAAC,iBAAmB,EA4BnB,KAAA5tB,aAAsDgB,IAC1D,MACM,MAAE9B,EAAQ,IAAO8B,EAAM9C,QACvB,MAAE2B,EAAK,KAAE0c,GAAS3D,KAAKja,OACvB,KAAEa,EAAMN,MAAO2uB,EAAgB,IAAOhuB,EACtCiuB,EAAelV,KAAK8U,SAAS5H,SAAWlN,KAAK8U,SAAS5H,QAAQgI,aAGpE,GAAI,IAAIziB,OAAO,WAAsBC,KAAKpM,GACtC,OAAOqd,EAAKC,cAAchd,EAAMquB,GAGpC,MAAME,GAAY,IAAAC,KAAI,KAAe9uB,GAAOuE,KAAKwqB,IAAS,IAAAD,KAAIC,EAAKC,YAE7DC,EAAiBjB,GACnBhuB,EAAM0M,QAAQ,IAAIP,OAdJ,IAcsB,KAAM,IAAIE,MAAM,EAAGwiB,GAdzC,KAwBlB,OANID,IAAiB5uB,EAAMsE,QAAUtE,EAAMsE,OAAS2qB,EAAe3qB,OAC/DoV,KAAKgV,iBAAmBO,EAAe3qB,OAEvCoV,KAAKgV,iBAAmBE,GAAgB,EAGrCvR,EAAKC,cAAchd,EAAM2uB,GAExC,CArDI,kBAAAhS,GACQvD,KAAK8U,SAAS5H,SAAWlN,KAAK8U,SAAS5H,QAAQgI,eAAiBlV,KAAKgV,kBACrEhV,KAAK8U,SAAS5H,QAAQsI,kBAAkBxV,KAAKgV,iBAAkBhV,KAAKgV,iBAE5E,CAEA,MAAAvtB,GACI,MAAM,MAAER,GAAU+Y,KAAKja,MAEvB,OACI,gCACI,gBAACwG,GAAA,EAAS,iBACFtF,EAAK,CACTmC,oBAAoB,WACpBqsB,aAAa,YACb3vB,GAAImB,EAAML,KACVY,SAAUwY,KAAK5Y,aACf+B,IAAK6W,KAAK8U,SACV5uB,KAAK,SAGT,gBAAC,GAAQ,MAGrB,EA+BJ,MAuBA,IAAe,IAAAhC,OAvB8D,EAAG0C,WAC5E,MAAMG,GAAc,IAAA7B,cAChB,EAAG+B,QAAO0c,OAAM+R,UACZ,gBAACb,GAAqB,CAAC5tB,MAAOA,EAAO0c,KAAMA,EAAM+R,KAAMA,KAE3D,IAGEzkB,GAAe,IAAAI,UACjB,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,sCAC3B,IAGJ,OACI,gBAAC,KAAS,CACNsD,oBAAoB,uBACpB4D,MAAOjG,EACPkK,aAAcA,EACdrK,KAAMA,O,2BCjGlB,MAgBA,IAAe,EAAAsH,GAAA,IAhB6B,IACxC,uBAAKrK,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,mDACA,qBAAGwc,KAAK,OAAOC,SAAS,WACpB,wBAAMD,KAAK,UAAU3c,OAAO,KAAK8c,GAAG,IAAI5c,MAAM,OAC9C,wBAAME,EAAE,gBAAgBuc,KAAK,YAC7B,wBAAMvc,EAAE,iBAAiBuc,KAAK,SAC9B,wBACIvc,EAAE,yhEACFuc,KAAK,YAET,wBAAM3c,OAAO,KAAK8c,GAAG,KAAKC,OAAO,UAAU+U,YAAY,IAAI5xB,MAAM,KAAK8c,EAAE,KAAKC,EAAE,WCkB3F,IAAe,EAAA5S,GAAA,IA7B6B,IACxC,uBAAKrK,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,yCACA,qBAAGwc,KAAK,OAAOC,SAAS,WACpB,wBAAMD,KAAK,UAAU3c,OAAO,KAAK8c,GAAG,IAAI5c,MAAM,OAC9C,wBACIyc,KAAK,UACLkT,WAAW,cACXW,SAAS,IACTuB,WAAW,MACXC,cAAc,MAEd,yBAAOhV,EAAE,KAAKC,EAAE,MAAI,mBAGpB,yBAAOD,EAAE,QAAQC,EAAE,MAAI,MAI3B,wBACI7c,EAAE,8uDACFuc,KAAK,UACLsV,QAAQ,OAEZ,wBAAMjyB,OAAO,KAAK8c,GAAG,KAAKC,OAAO,UAAU+U,YAAY,IAAI5xB,MAAM,KAAK8c,EAAE,KAAKC,EAAE,WCC3F,GAtBiD,IAC7C,uBAAKzc,UAAU,iEACX,uBAAKA,UAAU,4BACX,uBAAKA,UAAU,uCACX,yBACI,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,wCAI7B,uBAAKzB,UAAU,mCACX,8BACI,gBAAC,GAAgB,CAAC8L,KAAM,KAAS4lB,SAGrC,8BACI,gBAAC,GAAgB,CAAC5lB,KAAM,KAAS4lB,YCiCrD,IAAe,IAAA7xB,OA3C0D,EAAG0C,WACxE,MAAMG,GAAc,IAAA7B,cAChB,EAAG+B,WACC,gCACI,gBAACsF,GAAA,EAAS,iBACFtF,EAAK,CACTmC,oBAAoB,WACpBqsB,aAAa,SACb3vB,GAAImB,EAAML,KACVV,KAAK,SAGT,gBAAC,GAAQ,QAGjB,IAGE+K,GAAe,IAAAI,UACjB,IACI,gCACI,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,kCAErB,gBAACkwB,GAAA,EAAc,CAACxU,UAAU,YAAYyU,QAAS,gBAAC,GAAqB,OACjE,wBAAM5xB,UAAU,WACZ,gBAAC6xB,GAAA,EAAQ,UAKzB,IAGJ,OACI,gBAAC,KAAS,CACN9sB,oBAAoB,6BACpB4D,MAAOjG,EACPkK,aAAcA,EACdrK,KAAMA,OCdlB,GAzBiF,EAC7EyX,wBACA8X,6BAEA,gCACK9X,GACG,yBACI,8BACI,gBAAC5U,EAAA,EAAgB,CAAC3D,GAAG,4DAGzB,2BAEA,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,sDAI7B,uBAAKzB,UAAU,iBACVga,GAAyB,gBAAC,GAAqB,CAACzX,KAAK,aAErDuvB,GAA2B,gBAAC,GAAmB,CAACvvB,KAAK,YClBlE,MAyCA,IAAe,IAAA1C,OAzC8D,EAAG0C,WAC5E,MAAM,SAAEwE,IAAa,UAEfhE,GAAe,IAAAlC,cACjB,IAAA8B,aAAW,CAACC,EAA4B0c,IAC5Bvb,IACCub,EAAKC,cAAc3c,EAAML,KCnB/B,SAAoCN,GAC/C,MACOiM,EAAQ,GAAIC,EAAO,IAAMlM,EAAMiK,MAAM,IAAIkC,OAAO,cACjD2jB,EAAe7jB,EAAMI,MAAM,EAAG,GAC9B0jB,EACc,IAAhB7jB,EAAK5H,OAAe4H,EAAKG,OAAO,GAAKH,EAAOA,EAAKG,MAAM,EAAG,GAAKJ,EAAMI,MAAM,GAG/E,OAAIrM,EAAMsE,OAAS,EACR2H,EAIPjM,EAAMsE,OAAS,IAAMyrB,EACdD,EAGJ,GAAGA,OAAkBC,GAChC,CDCoDC,CAA2BluB,EAAM9C,OAAOgB,WAGpF,IAGES,GAAc,IAAA7B,cAChB,EAAG+B,QAAO0c,UACN,gBAACpX,GAAA,EAAS,iBACFtF,EAAK,CACTwuB,aAAa,SACb3vB,GAAImB,EAAML,KACVY,SAAUJ,EAAaH,EAAO0c,GAC9B4S,YAAanrB,EAASoB,UAAU,mDAChCtG,KAAK,UAGb,CAACkB,EAAcgE,IAGb6F,GAAe,IAAAI,UACjB,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,0CAC3B,IAGJ,OACI,gBAAC,KAAS,CACNsD,oBAAoB,uBACpB4D,MAAOjG,EACPkK,aAAcA,EACdrK,KAAMA,OElBlB,IAAe,IAAA1C,OArB0D,EAAG0C,WACxE,MAAMG,GAAc,IAAA7B,cAChB,EAAG+B,WAAwB,gBAACsF,GAAA,EAAS,iBAAKtF,EAAK,CAAEwuB,aAAa,UAAU3vB,GAAImB,EAAML,SAClF,IAGEqK,GAAe,IAAAI,UACjB,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,oCAC3B,IAGJ,OACI,gBAAC,KAAS,CACNsD,oBAAoB,qBACpB4D,MAAOjG,EACPkK,aAAcA,EACdrK,KAAMA,OCOlB,IAAe,IAAA1C,OAvB0E,EACrF0C,WAEA,MAAMG,GAAc,IAAA7B,cAChB,EAAG+B,WAAwB,gBAACsF,GAAA,EAAS,iBAAKtF,EAAK,CAAEnB,GAAImB,EAAML,SAC3D,IAGEqK,GAAe,IAAAI,UACjB,IACI,gCACI,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,4CAA6C,IAClE,yBAAOzB,UAAU,sCACb,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,4BAIjC,IAGJ,OAAO,gBAAC,KAAS,CAACkH,MAAOjG,EAAakK,aAAcA,EAAcrK,KAAMA,OCe5E,IAAe,IAAA1C,OA1BwD,EACnEiyB,0BACAK,iCAEA,gBAAC,KAAQ,CACLptB,oBAAoB,qBACpBC,OACI,gBAAC,GAAM,CAAC0C,QAAM,GACV,gBAACtC,EAAA,EAAgB,CAAC3D,GAAG,+BAI7B,uBAAKzB,UAAU,iBACX,gBAAC,GAAqB,CAACuC,KAAK,aAE5B,gBAAC,GAAqB,CAACA,KAAK,aAE5B,gBAAC,GAAmB,CAACA,KAAK,WAEzBuvB,GAA2B,gBAAC,GAAmB,CAACvvB,KAAK,UAErD4vB,GAA+B,gBAAC,GAA2B,CAAC5vB,KAAK,uBChB9E,IAAe,IAAA6vB,UAAQ,UAAuC,gBAC1DC,EAAe,gBACfC,EAAe,mBACfC,EAAkB,qBAClBC,EAAoB,SACpBzrB,IAEA,MAAM0rB,EAAqC,CACvCzZ,cAAc,UAAS5P,YAgC3B,OA7BImpB,IACAE,EAAOC,OAAQ,UACVtpB,SAASrC,EAASoB,UAAU,2CAC5BkG,KAAK,CACFpG,QAASlB,EAASoB,UAAU,yCAC5B,IAAAkG,CAAKpM,EAAQ,IACT,MAAMkS,EAAW,GAA0Bke,GACrCrS,EAAW,iBAA2B7L,GAE5C,OAAO,IAAAwe,KAAI1wB,EAAO+d,GAAYA,EAAS3a,KAAO2a,EAAS3a,KAAKyG,UAAOmD,GAC9DoR,OACT,KAIRmS,IACAC,EAAOtZ,UAAW,UACb/P,SAASrC,EAASoB,UAAU,8CAC5BkG,KAAK,CACFpG,QAASlB,EAASoB,UAAU,4CAC5BkG,KAAM,CAACpM,EAAQ,MAAO,IAAAyM,QAAOzM,GAAOoe,UAEvChS,KAAK,CACFpG,QAASlB,EAASoB,UAAU,6CAE5BkG,KAAM,CAACpM,EAAQ,KAAOA,EAAMqM,OAAOgkB,EAAgB/rB,UAAY+rB,MAIpE,QAAOG,EAClB,ICrDA,IAAe,IAAAL,UAAQ,UAAuC,mBAC1DG,EAAkB,SAClBxrB,IAEA,MAAM0rB,EAAS,CACXG,gBAAgB,UAChBF,OAAO,UACPG,UAAU,UACLzpB,SAASrC,EAASoB,UAAU,kDAC5BkG,KAAK,CACFpG,QAASlB,EAASoB,UAAU,gDAE5BkG,KAAOpM,IAAU,IAAAie,gBAAeje,GAAOoe,UAE/CyS,QAAQ,UACH/B,IAAI,KACJ3nB,SAASrC,EAASoB,UAAU,4CACjCgR,UAAU,UACL/P,SAASrC,EAASoB,UAAU,8CAC5BkG,KAAK,CACFpG,QAASlB,EAASoB,UAAU,4CAE5BkG,KAAOpM,IAAU,IAAAyM,QAAOzM,GAAOoe,WAiB3C,OAbIkS,IACAE,EAAOC,OAAQ,UACVtpB,SAASrC,EAASoB,UAAU,2CAC5BkG,KAAK,CACFpG,QAASlB,EAASoB,UAAU,yCAC5B,IAAAkG,CAAKpM,GACD,MAAM,KAAEwM,IAAS,IAAAC,QAAOiN,KAAKoX,OAAO5Z,UAEpC,OAAO,IAAAwZ,KAAI1wB,EAAOwM,GAAQA,EAAKpJ,KAAOoJ,EAAKpJ,KAAKyG,UAAOmD,GAAWoR,OACtE,MAIL,QAAOoS,EAClB,I,4BC/Ce,SAASO,GAAoB5nB,GACxC,IAAKA,EACD,MAAM,IAAIpD,MAAM,8BAGpB,MAAM,gBAAEirB,GAAoB7nB,EAE5B,MAAO,CACH8nB,UAAU,KAAAC,uBAAsB/nB,GAChCgoB,KAAM,CACFC,YAAaJ,GAEjBlsB,UAAU,EAAAusB,GAAA,KAElB,CCsDA,MAAMC,WAAyC,EAAAhY,UAA/C,c,oBAGI,KAAAC,MAAsC,CAClCiI,iBAAiB,GAGb,KAAA+P,mBAAoB,IAAA7wB,aACxB,CAAC0V,EAAmC,KAChCA,EAAYnE,OAAOsL,MA0PnB,KAAAmE,iBAA+B,KACnChI,KAAKC,SAAS,CACV6H,iBAAiB,EACjB/E,0BAAsBzP,KAItB,KAAA2U,uBAAgDniB,IACpDka,KAAKC,SAAS,CACV6H,iBAAiB,EACjB/E,qBAAsBjd,KAItB,KAAAyf,uBAAgDzf,IACpD,MACIgY,aAAa,cAAE8F,IACf5D,KAAKja,OACH,YAAE2W,GAAgBsD,KAAK8X,0CACvB,qBAAE/U,GAAyB/C,KAAKH,MAEX,IAAvBnD,EAAY9R,QACZoV,KAAKC,SAAS,CACV6H,iBAAiB,EACjB/E,0BAAsBzP,IAG1BsQ,EAAc,eAAgB,KACvBb,IAAyBjd,IAChCka,KAAKC,SAAS,CACV8C,qBAAsB/C,KAAK+H,2BAG/BnE,EAAc,eAAgB5D,KAAK+H,2BAyC/C,CAjUU,iBAAA3H,G,sDACF,MAAM,kBACFtK,EAAiB,OACjBnB,EAAM,iBACNiB,EACAkI,aAAa,oBAAEuK,IACfrI,KAAKja,OACDmiB,6BAA8BC,EAAgC,gBAAEC,GACpEpI,KAAK8X,yCAETzP,EAAoB1T,EAAQqL,KAAKsI,uBC7F1B,WACX,MAAMyP,EAAe,EAAAC,eAAeC,YAAY,YAC1CC,EAAW,EAAAF,eAAeC,YAAY,QAG5C,EAAAD,eAAeG,WAAW,OAAQ,CAC9B7C,QAAS,CAAC,MAAQ4C,EAAS5C,SAAW,MAI1C,EAAA0C,eAAeG,WAAW,WAAY,CAClCC,SAAU,IAAKL,EAAaK,UAAY,GAAK,CAAC,IAAK,QAIvD,EAAAJ,eAAeK,QAAQ,CACnB1T,SAAU,OACVze,KAAM,OACNkyB,SAAU,CACN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAEpF5D,KAAM,CAAC,EAAG,EAAG,IACbc,QAAS,CAAC,GAAI,GAAI,IAClB5rB,KAAM,CACF9C,KAAM,MACNuJ,KAAM,IAGlB,CD0DQmoB,GAEA,IACQnQ,UACMC,WAGJtS,EACF,CACI3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAErBka,KAAKqK,wBAEb,CAAE,MAAO9c,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,G,CAEM,oBAAA8S,G,sDACF,MAAM,oBACFnK,EAAmB,OACnBvB,EAAM,iBACNiB,EACAkI,aAAa,oBAAEuK,IACfrI,KAAKja,MAETsiB,EAAoB1T,EAAQ,MAE5B,UACUuB,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,G,CAEM,kBAAAgW,CACFgV,EACA/P,G,sDAEA,MAAM,oBACFtS,EAAmB,kBACnBJ,EAAiB,OACjBnB,EAAM,iBACNiB,EACAkI,aAAa,oBAAEuK,IACfrI,KAAKja,OAEH,gBAAE+hB,EAAe,qBAAE/E,GAAyB/C,KAAKH,MAIvD,GAFAwI,EAAoB1T,EAAQqL,KAAKsI,uBAG7BvF,IAAyByF,EAAUzF,sBACnC+E,IAAoBU,EAAUV,gBAE9B,UACU5R,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,WAGfgQ,EACF,CACI3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAErBka,KAAKqK,wBAEb,CAAE,MAAO9c,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CAER,G,CAEA,MAAA9F,GACI,MAAM,cACF4D,EAAa,aACbmtB,EAAY,gCACZC,EAA+B,eAC/B5P,EAAc,OACdlU,GACAqL,KAAKja,OACH,YACF2W,EACA+O,6BAA8BiN,EAC9BhP,+BAAgCC,EAChCzB,6BAA8BC,EAAgC,qBAC9DpC,EAAoB,6BACpBgD,GACA/I,KAAK8X,0CAEL/oB,MAAM,UAAEC,IACR3D,GAEE,gBAAEyc,GAAoB9H,KAAKH,MAE3Bd,EAAqBiB,KAAKqK,wBAC1BrB,GAAgCD,GAAgCjB,EAChEnb,EAAYkc,GAAkB9C,EAC9B1H,IAAwBU,GACxB4K,EAAmC5K,EAAoBpK,GAEvDwhB,IAA0BpX,GAC1B2Z,EAAiC3Z,EAAoBpK,GAGrDgkB,EAAc3pB,IAEpB,IAAK2pB,EACD,MAAMtsB,MAAM,oCAGhB,OACI,gBAACusB,GAAA,EAAc7a,SAAQ,CAACzX,MAAO+wB,GAAoBsB,IAC/C,gBAACxU,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,uBAAKtI,UAAU,2CACV0kB,GACG,gBAAC,GAAsB,CACnBrM,YAAaA,EACbsH,mBAAoBhE,KAAKuF,uBACzBvC,mBAAoBhD,KAAKiI,uBACzBhF,mBAAoBjD,KAAKgI,iBACzBjF,qBACIhE,GAAsBA,EAAmB3B,YAE7CyJ,mBACI4R,EACIA,EAAgC1Z,GAEhC,gBAAC,GAAoB,CACjBoX,wBAAyBA,EACzB9X,sBAAuBA,MAO1C2K,IAAiCwP,GAC9B,gBAAC,GAAkB,CACfrC,wBACIxhB,EAAOlF,OAAO4b,UAAuC,OAA3B1W,EAAOlF,OAAO4b,SAE5CmL,4BAA6B7hB,EAAOlF,OAAOopB,sBAIlD7P,GAAgCwP,EAEhCrQ,GACG,gBAAC,GAAuB,CACpB9K,aAAc0B,GAAsBA,EAAmB3B,YACvDV,YAAaA,MAOzC,CAEQ,qBAAA2N,GACJ,MAAM,YAAE3N,GAAgBsD,KAAK8X,0CACvB,qBAAE/U,EAAuB/C,KAAK+H,0BAA6B/H,KAAKH,MAEtE,OAAO,IAAAhH,MAAK6D,EAAa,CAAEU,YAAa2F,GAC5C,CAEQ,sBAAAgF,GACJ,MAAM,gBAAED,GAAoB9H,KAAKH,MAEjC,GAAIiI,EACA,OAGJ,MAAM,YAAEpL,GAAgBsD,KAAK8X,yCAEvBnQ,EACFjL,EAAY7D,MAAMrC,GAAeA,EAAWmR,qBAAsBjL,EAAY,GAElF,OAAOiL,GAAqBA,EAAkBvK,WAClD,CAEQ,mBAAAkL,GACJ,MAAM,qBAAEwQ,EAAoB,SAAE1tB,EAAQ,OAAEuJ,EAAM,2BAAEyV,GAA+BpK,KAAKja,OAEhF0lB,6BAA8BiN,EAC9BhP,+BAAgCC,EAChCzB,6BAA8BC,EAAgC,sBAC9DM,GACAzI,KAAK8X,yCAET,IAAKrP,EACD,OAAO,KAGX,MAAM1J,EAAqBiB,KAAKqK,wBAEhC,OAAIlC,GAAoCpJ,EAEhCqL,GACA2O,GAA8B,CAC1BrC,gBAAiB3X,EAAmBtB,MACpCkZ,gBAAiB5X,EAAmBO,MACpCsX,mBAAoB8B,EAChB3Z,EACApK,GAEJkiB,qBAAsBlN,EAClB5K,EACApK,GAEJvJ,aAMR0tB,GACAE,GAA8B,CAC1BpC,oBAA+C,IAA3BjiB,EAAOlF,OAAO4b,SAClCjgB,YAGZ,CAuCQ,sCAAA0sB,GACJ,MAAM,gBAAEhpB,EAAe,cAAEzD,EAAa,qBAAE6jB,GAAuB,EAAK,OAAEva,GAAWqL,KAAKja,OAGlFgJ,MAAM,UAAEC,EAAS,YAAEkd,EAAW,eAAEzP,EAAc,sBAAEgM,GAChDnd,UAAU,qBAAEya,IACZ1a,EAEEoE,EAAST,IACTid,EAAWC,IAEjB,IAAKzc,IAAWwc,IAAatX,EACzB,MAAM,IAAItI,MAAM,0BAGpB,MAAMqQ,EAAcsD,KAAK6X,kBAAkBpb,EAAe9H,IACpDwT,EAAmCD,GAA6B,CAClEzY,SACAwc,WACAiD,uBACAlQ,cAAerK,IAGnB,MAAO,CACH+H,cACAka,mBAAoBjiB,EAAOlF,OAAO4b,UAAuC,OAA3B1W,EAAOlF,OAAO4b,SAC5D4N,yBAA0BtkB,EAAOlF,OAAOopB,oBACxCpN,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAAuCre,GACvE6c,6BAA8BC,EAC9BpC,qBAAsBA,IACtB0C,sBAAuBA,IACvBL,gBAAiBtZ,EAAgBsZ,gBACjCW,6BACIZ,GAAoCzL,EAAY9R,OAAS,EAErE,EAGJ,YE5XA,GAnBoF,I,IAAA,oBAChFxB,EAAmB,cACnB8vB,EAAa,OACb5vB,GAAM,EACHvD,GAAK,cAJwE,kDAK9E,OACF,uCACQA,EAAK,CACT1B,UAAW,IACP,aACA,+BACA,CAAE,oBAAqB60B,GACvB,CAAE,sCAAuCA,GACzC9vB,GACH,YACUE,MCiBnB,GA9ByF,EACrF4vB,gBACApzB,KACAc,WAEA,MAAMG,GAAc,IAAA7B,cAChB,IACI,gCACI,gBAAC,GAAwB,CACrBkE,oBAAoB,WACpB8vB,cAAeA,EACfpzB,GAAIA,IAGR,gBAAC,GAAQ,QAGjB,CAACA,EAAIozB,IAGT,OACI,gBAAC,KAAS,CACN9vB,oBAAoB,uBACpB4D,MAAOjG,EACPkK,aAAc,gBAACxH,EAAA,EAAgB,CAAC3D,GAAG,qCACnCc,KAAMA,KC2BlB,GA7CqF,EACjFsyB,gBACApzB,KACAc,WAEA,MAAMG,GAAc,IAAA7B,cAChB,IACI,gCACI,gBAAC,GAAwB,CACrBkE,oBAAoB,WACpB8vB,cAAeA,EACfpzB,GAAIA,IAGR,gBAAC,GAAQ,QAGjB,CAACA,EAAIozB,IAGHjoB,GAAe,IAAAI,UACjB,IACI,gCACI,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,kCAErB,gBAACkwB,GAAA,EAAc,CAACxU,UAAU,YAAYyU,QAAS,gBAAC,GAAqB,OACjE,wBAAM5xB,UAAU,WACZ,gBAAC6xB,GAAA,EAAQ,UAKzB,IAGJ,OACI,gBAAC,KAAS,CACN9sB,oBAAoB,6BACpB4D,MAAOjG,EACPkK,aAAcA,EACdrK,KAAMA,KC3BlB,GApByF,EACrFsyB,gBACApzB,KACAc,WAEA,MAAMG,GAAc,IAAA7B,cAChB,IAAM,gBAAC,GAAwB,CAACg0B,cAAeA,EAAepzB,GAAIA,KAClE,CAACA,EAAIozB,IAGT,OACI,gBAAC,KAAS,CACN9vB,oBAAoB,uBACpB4D,MAAOjG,EACPkK,aAAc,gBAACxH,EAAA,EAAgB,CAAC3D,GAAG,yCACnCc,KAAMA,KCsClB,GA/CuF,EACnFuyB,aACAC,eACAC,eACAC,sBAEA,gCACKF,GACG,yBACI,8BACI,gBAAC3vB,EAAA,EAAgB,CAAC3D,GAAG,4DAGzB,2BAEA,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,sDAI7B,uBAAKzB,UAAU,iBACV+0B,GACG,gBAAC,GAA2B,CACxBF,cAAoC,eAArBI,EACfxzB,GAAIszB,EACJxyB,KAAK,6CAIZuyB,GACG,gBAAC,GAAyB,CACtBD,cAAoC,aAArBI,EACfxzB,GAAIqzB,EACJvyB,KAAK,2CAIZyyB,GACG,gBAAC,GAA2B,CACxBH,cAAoC,eAArBI,EACfxzB,GAAIuzB,EACJzyB,KAAK,+CC1BzB,GApBqF,EACjFsyB,gBACApzB,KACAc,WAEA,MAAMG,GAAc,IAAA7B,cAChB,IAAM,gBAAC,GAAwB,CAACg0B,cAAeA,EAAepzB,GAAIA,KAClE,CAACA,EAAIozB,IAGT,OACI,gBAAC,KAAS,CACN9vB,oBAAoB,qBACpB4D,MAAOjG,EACPkK,aAAc,gBAACxH,EAAA,EAAgB,CAAC3D,GAAG,mCACnCc,KAAMA,KCkDlB,GAtDmF,EAC/E2yB,mBACAJ,aACAE,eACAG,aACAJ,eACAE,sBAEA,gBAAC,KAAQ,CACLjwB,OACI,gBAAC,GAAM,CAAC0C,QAAM,GACV,gBAACtC,EAAA,EAAgB,CAAC3D,GAAG,+BAI7B,uBACIzB,UAAW,IAAW,gBAAiB,CACnC,oCAAqCm1B,EACrC,oCAAqCL,KAGzC,gBAAC,GAA2B,CACxBD,cAAoC,eAArBI,EACfxzB,GAAIszB,EACJxyB,KAAK,iCAGT,gBAAC,GAA2B,CACxBsyB,cAAoC,eAArBI,EACfxzB,GAAIuzB,EACJzyB,KAAK,iCAGRqC,QAAQuwB,IACL,gBAAC,GAAyB,CACtBN,cAAoC,aAArBI,EACfxzB,GAAI0zB,EACJ5yB,KAAK,+BAIZqC,QAAQkwB,IACL,gBAAC,GAAyB,CACtBD,cAAoC,aAArBI,EACfxzB,GAAIqzB,EACJvyB,KAAK,+BAIZ2yB,ICpDb,IAAe,IAAA9C,UAAQ,UAA6C,SAChErrB,IAEA,OAAO,UAASquB,MAA6C,CACzDlc,YAAY,UACP9P,WACAgsB,MAA2D,CACxDttB,QAAQ,UACHsB,WACAgsB,MAAqE,CAClEpO,UAAU,UACL3Y,KAAK,CACFpG,QAASlB,EAASoB,UACd,0CAEJkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UACd,yCAEJkG,KAAOpM,GAAoB,sBAAVA,IAGzBozB,YAAY,UACPhnB,KAAK,CACFpG,QAASlB,EAASoB,UACd,iDAEJkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UACd,gDAEJkG,KAAOpM,GAAoB,wBAAVA,IAGzBqzB,UAAU,UAASjnB,KAAK,CACpBpG,QAASlB,EAASoB,UAAU,2CAC5BkG,KAAOpM,GAAoB,aAAVA,IAGrBszB,YAAY,UACPlnB,KAAK,CACFpG,QAASlB,EAASoB,UACd,6CAEJkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UACd,4CAEJkG,KAAOpM,GAAoB,wBAAVA,SAKjD,IC3DA,IAAe,IAAAmwB,UAAQ,UAA6C,SAChErrB,EAAQ,qBACRyuB,GAAuB,IAEvB,OAAO,UAASJ,MAA6C,CACzDpc,cAAc,UAAS5P,WAEvB8P,YAAY,UACP9P,WACAgsB,MAA2D,CACxDttB,QAAQ,UACHsB,WACAgsB,MAAK,eACFK,sBAAsB,UACjBpnB,KAAK,CACFpG,QAASlB,EAASoB,UACd,0CAEJkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UACd,yCAEJkG,KAAOpM,GAAoB,sBAAVA,IAGzByzB,wBAAwB,UACnBrnB,KAAK,CACFpG,QAASlB,EAASoB,UACd,6CAEJkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UACd,4CAEJkG,KAAOpM,GAAoB,wBAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UACd,6CAEJkG,KAAOpM,GAAoB,2BAAVA,KAErBuzB,EACE,CACIG,wBAAwB,UACnBtnB,KAAK,CACFpG,QAASlB,EAASoB,UACd,iDAEJkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UACd,gDAEJkG,KAAOpM,GAAoB,wBAAVA,KAG7B,CAAC,OAI/B,I,IC9EY2zB,G,oCAMG,SAASC,GACpB7jB,EACA8jB,EACAj0B,EAAkC+zB,GAA0BG,SAE5D,MAAMlI,EAAYlQ,SAASqY,cAAc,OACnCC,EAAkBtY,SAASC,eAAe5L,GAEhD,IAAKikB,EACD,MAAM,IAAIjuB,MACN,8EAMR,OAFAiuB,EAAgBC,YAAYrI,GAErB,IAAIrH,SAASC,IAehB,UACI,gBAAC7M,EAAA,GAAYF,SAAQ,CAACzX,MAAO,CAAEgoB,aAAa,EAAM5iB,aAAc,EAAAzD,OAC5D,gBAACuyB,GAAA,EAAkB,CAACC,SAAUv0B,IAAS+zB,GAA0B5tB,OAC7D,gBAACE,GAAA,EAAS,CACN2sB,cAAehzB,IAAS+zB,GAA0BS,MAClDvxB,IAnBKwxB,IACZA,IAIL7P,GAAQ,EAAA8P,GAAA,GAAiBD,EAASR,IAElC,0BAAgCjI,GAE5BA,EAAU2I,eACV3I,EAAU2I,cAAcC,YAAY5I,SAaxCA,KAGZ,EAjDA,SAAY+H,GACR,oBACA,gBACA,eACH,CAJD,CAAYA,KAAAA,GAAyB,KCoBrC,MA+QA,IAAe,EAAAzN,GAAA,IA9QXzmB,IAEA,MAAM,gBAAE+I,EAAe,cAAEzD,EAAa,YAAEyS,EAAW,SAAE1S,EAAQ,OAAEuJ,GAAW5O,GAEpE,SAAEslB,EAAQ,mBAAE0P,EAAkB,oBAAEC,EAAmB,oBAAEnC,GACvDlkB,EAAOlF,QAEJ6pB,EAAkB2B,IAAuB,IAAA9b,aAE1C,gBAAEwT,EAAe,cAAE/O,EAAa,aAAElY,EAAY,WAAEP,GAAe2S,EAC/D4a,EAAmC,GAAqCrtB,GACxEse,EACF,GAAuCte,GAIrCurB,EAAqBvL,GAAyB,OAAbA,EACjC6P,EAA2BH,SAAAA,EAE3BI,GAA6C,IAAAj2B,cAC9C0B,GACU,IAAG,IAAAwM,SAAQ,CAACuB,EAAOsH,QAAStH,EAAO7O,KAAKsM,KAAK,QAAQxL,KAEhE,CAAC+N,IAGCymB,GAEkC,IAAAl2B,cAC7B6Z,IAAuB,iDAC1B,MAAMsc,EAAa,CAAC,QAAS,aAAc,WAAY,cAEjD3R,IAAiC3K,GACjC4K,EAAmC5K,EAAoBpK,GAEvD8W,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAIrD2mB,EACF5R,GAAkC+B,EAEtC,IAAI8P,EAUJ,OARIxc,GAAsBuc,IACtBC,EAAmBJ,EAAiB,UAGnCpc,IACDwc,EAAmBJ,EAAiB,aAGjC,CACHK,OAAQzc,EACF,CACI+a,qBAAsBwB,EAChB,CACIG,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,SAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,EACNymB,uBAAwBuB,EAClB,CACIG,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,YAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,EACN0mB,uBAAwBsB,EAClB,CACIG,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,YAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,GAEV,CACI+X,SAAUuL,EACJ,CACI6E,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,eAElC7nB,EACNomB,WAAY,CACR+B,mBAAoBrwB,EAASoB,UACzB,wCAEJ6J,YAAa8kB,EAAiB,YAC9B5E,YAAanrB,EAASoB,UAClB,oDAGRmtB,SAAU,CACN8B,mBAAoBrwB,EAASoB,UACzB,kCAEJ6J,YAAa8kB,EAAiB,WAElCvB,WAAY,CACR6B,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,cAG5CO,OAAQH,EACF,CACII,cAAezB,GAAyBqB,EAAkBF,GAC1D9tB,YAAa2sB,GACTqB,EACAF,EACApB,GAA0B5tB,OAE9BuvB,YAAa1B,GACTqB,EACAF,EACApB,GAA0BS,QAGlC,CAAC,EACPmB,OAAQ,EAAGzc,gBACHka,IAAqBla,GACrB6b,OAAoB3nB,IAG5BwoB,iBAAkB,EAAGtjB,eACjBoL,EAAc,sBAAuBpL,IAEzCujB,QAAS,KACLrwB,GAAa,GACbP,KAEJ6wB,QAAS,EAAG5c,gBACR6b,EAAoB7b,IAExBmT,WAAY,EAAGpmB,SAAS,CAAC,OACrB,IAAA8vB,OAAM9vB,GAAQ,CAAC+vB,EAAa9c,KACxB,MAAM+c,EAAW,qBAAqB/c,IAEtCwE,EACIuY,EACAD,GAAeA,EAAY,GAAGh2B,KAAOg2B,EAAY,GAAGh2B,KAAO,IAG3Dg2B,GAAeA,EAAY,IAC3BvJ,EAAgBwJ,OAKpC,KACA,CACI7C,EACA6B,EACAvE,EACAsE,EACAxC,EACA/O,EACAve,EACAuJ,EACAiP,EACA+O,EACAsI,EACAvvB,EACAP,IAIFixB,GAEW,IAAAl3B,cACZ6Z,IACG,MAAM2K,IAAiC3K,GACjC4K,EAAmC5K,EAAoBpK,GAEvD8W,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAIrD2mB,EACF5R,GAAkC+B,EAEtC,OACI,gBAAC,GAA0B,CACvB0N,WACI1N,EAA+B0P,EAAiB,cAAW7nB,EAE/D+lB,aACIiC,EAA2BH,EAAiB,iBAAc7nB,EAE9D8lB,aACI1P,EAAiCyR,EAAiB,iBAAc7nB,EAEpEgmB,iBAAkBA,MAI9B,CACIA,EACA6B,EACAzC,EACA/O,EACAhV,IAIFmB,EAAoBhH,EAAgBgH,kBAEpCumB,GACF,IAAAn3B,cACI,CAAOsoB,EAASzO,KAAuB,iDACnC,OAAOjJ,EAAkB,OAAD,wBACjB0X,GAAO,CACV8O,iCAAkC,CAC9B3Y,KAAMqX,QACMI,EAAqBrc,QAC3BzL,KAGlB,KACA,CAAC8nB,EAAsBtlB,IAK/B,OAAOklB,EACH,gBAAC,GAAgC,iBACzBj1B,EAAK,CACTyyB,aACI,gBAAC,GAAwB,CACrBe,iBACIV,GAAuB,gBAAC,GAA2B,CAACjyB,KAAK,mBAE7DuyB,WAAYvC,EAAqBuE,EAAiB,cAAW7nB,EAC7D+lB,aAAc8B,EAAiB,YAC/B3B,WAAY2B,EAAiB,UAC7B/B,aAAc+B,EAAiB,YAC/B7B,iBAAkBA,IAG1BR,qBAAsByD,GAAoC,CAAEnxB,aAC5D8K,oBAAqBpH,EAAgBoH,oBACrCklB,qBAAsBA,EACtB3C,gCAAiC2D,EACjCtmB,kBAAmBumB,EACnBjS,2BAA4BoS,GAAoC,CAC5DpxB,WACAyuB,sBAAsB,OAI9B,gBAAC,GAAgC,iBACzB9zB,EAAK,CACTmQ,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmBumB,OAO3B,CAAC,CAAEv2B,GAAI,sC,gBCtSJ,MCsBP,GAhBI,EAAG22B,iCACH,IAAA5mB,YAAU,KACmC,mBAA9B4mB,GACPA,EAA0B,uDAE/B,CAACA,IAGA,uBACIp4B,UAAU,mDAAkD,YAClD,mDACVyB,GAAG,sD,gBCWf,MAmDA,GAjDI,EAAG0B,WAAUygB,yBAAwBlJ,yBACrC,MAAMvG,EA1BV,SAAmCtS,GAC/B,OAAQA,EAAK4T,eACT,IAAK,OACL,IAAK,mBACD,MAAO,mBAEX,IAAK,SACD,MAAO,cAEX,IAAK,cACD,MAAO,aAEX,QACI,OAAO5T,EAEnB,CAWqB,CAA0B6Y,EAAmBtB,OAAO3D,cAYrE,OACI,uBACIzV,UAAU,4CAA2C,YAC3C,kDAEV,2BACI,uBAAKA,UAAU,qDACX,gBAAC,GAAc,CAACmU,SAAUA,IAE1B,uBACInU,UAAU,wBAAuB,YACvB,0CAGV,4B,QAAoC0a,EAAmBO,SAG/D,uBAAKjb,UAAU,sDACX,gBAACq4B,GAAA,EAA4B,QAIrC,uBAAKr4B,UAAU,2DACX,gBAAC,MAAM,CACH0E,QAlCK,KAAY,iDAC7B,GAAwB,mBAAbvB,EAAyB,CAChC,MAAMm1B,QAAen1B,IAEjBm1B,GACA1U,EAAuB0U,EAE/B,CACJ,IA2BgBxsB,KAAM,MAAWysB,KACjBtzB,OAAO,mDACPsD,QAAS,MAAcC,WAEvB,gBAACpD,EAAA,EAAgB,CAAC3D,GAAG,6BC/BzC,GAlCiG,EAC7F22B,4BACAI,6BAEA,MAAM,YAAEngB,EAAW,uBAAEuL,EAAsB,mBAAElJ,GHXQ,MACrD,MAAOA,EAAoB+d,IAAyB,IAAA3d,aAE9C,2BAAE4d,IAA+B,UAAc1xB,cAAc0D,KAE7DiuB,EAAmDD,IACnDE,GAAyB,QAAyBD,GAClDA,EACA,CAAC,GAED,YAAElf,GAAgBF,KAOxB,MAAO,CACHlB,YAAaugB,EAAuBvgB,aAAe,GACnDuL,uBAP4BzR,IAC5BsmB,EAAsBtmB,GACtBsH,EAAY8F,cAAc,eAAgBpN,EAAW4G,cAMrD2B,uBGRAme,GAEEC,EAA4BzgB,EAAY9R,OAAS,EAQvD,OANA,IAAAiL,YAAU,MACDkJ,GAAsBrC,EAAY9R,OAAS,GAC5Cqd,EAAuBvL,EAAY,MAExC,CAACA,EAAaqC,EAAoBkJ,IAGjC,uBAAK5jB,UAAU,2CACV84B,GACG,gBAAC,GAA0C,CACvClV,uBAAwBA,EACxBzgB,SAAUq1B,EACV9d,mBAAoBA,GAAsBrC,EAAY,MAI5DygB,GACE,gBAAC,GAAyC,CACtCV,0BAA2BA,MCjB/C,MCrBA,IDwHe,EAAAjQ,GAAA,IAnGyE,EACpF7X,SACA7F,kBACAzD,gBACAuK,mBACAkI,cACA1S,eAEA,MAAMgyB,GAAyB,IAAA3Q,QAAoD,CAAC,IAE9E,uBAAE2B,EAAsB,sBAAEiP,GAA0BhyB,EAAcC,UAoDxE,IAAAuK,YAAU,MAlDmC,iDACzC,UACU/G,EAAgBgH,kBAAkB,CACpC5C,SAAUyB,EAAO7O,GAEjBw3B,8BAA+B,CAC3BjL,OAASoK,IACLW,EAAuBlQ,QAAQuP,0BAC3BA,GAERj1B,SAAWq1B,IACPO,EAAuBlQ,QAAQ2P,uBAC3BA,GAERvK,QAAU/kB,IACN,IAAIgwB,EAYJ,OAPIA,EEnDb,SACXhwB,GAEA,MAAwB,iBAAVA,GAAgC,OAAVA,GAAkB,mBAAoBA,CAC9E,CF4C4BiwB,CAA0BjwB,GACb,IAAIlB,MAAMjB,EAASoB,UAAUe,EAAMkwB,iBACzClwB,aAAiBlB,MACXkB,EAEA,IAAIlB,MACbjB,EAASoB,UAAU,iCAIpBoJ,EAAiB2nB,MAIxC,CAAE,MAAOhwB,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAiBW,MAfoC,iDAC3C,UACUuB,EAAgBoH,oBAAoB,CACtChD,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,OAQG,IAEH,MAAMZ,EAAY0wB,KAA2BjP,EAAuBzZ,EAAO7O,IAErEuoB,EAAmB,CACrBC,YAAaxQ,EAAYwQ,cACzB5iB,aAAcoS,EAAYpS,cAG9B,OACI,gBAACuS,EAAA,GAAYF,SAAQ,CAACzX,MAAO+nB,GACzB,gBAACnI,GAAA,EAAgBnI,SAAQ,CAACzX,MAAO,CAAE+E,gBAAeyD,oBAC9C,gBAACyf,GAAA,EAAc,CAACzf,gBAAiBA,GAC7B,gBAAC6O,GAAmBI,SAAQ,CAACzX,MAAO,CAAEwX,gBAClC,gBAACqG,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,gBAAC,GAA+B,CAC5B8vB,0BACIW,EAAuBlQ,QAAQuP,0BAEnCI,uBACIO,EAAuBlQ,QAAQ2P,gCAa/D,CAAC,CAAE/2B,GAAI,mCGlGX,IAAe,EAAA0mB,GAAA,IAhB0EzmB,IACrF,MAAM,cAAEsF,GAAkBtF,EAG1B,OAF8BsF,EAAc0D,KAAK0Z,wBAO7C,gBAAC,GAAyC,eACtCwI,mBAAmB,iCACflrB,IAND,OAaX,CAAC,CAAED,GAAI,mCCHX,IAAe,EAAA0mB,GAAA,IAfuEzmB,GACpDA,EAAMsF,cAAc0D,KAAK0Z,wBAOnD,gBAAC,GAAyC,eACtCwI,mBAAmB,8BACflrB,IAND,MAaX,CAAC,CAAED,GAAI,gCCrBL43B,GAAe,CACjB,CACI92B,KAAM,cACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,gBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,iBACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,sBACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,kCACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,yBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,iCACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,oBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,eACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,KACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,iBACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,2BACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,OACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,mBACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,0BACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,8CACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,eACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,gBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,OACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,iBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,qBACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,cACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,oBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,8BACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,gBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,OACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,gBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,mBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,OACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,gBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,gCACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,4BACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,OACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,cACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,KACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,+CACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,iCACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,OACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,yBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,gBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,OACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,mBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,6CACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,cACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,uBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,gBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,cACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,OACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,iBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,2BACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,OACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,kCACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,mBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,OACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,cACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,cACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,KACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,mBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,+CACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,wBACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,cACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,eACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,4BACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,mCACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,wBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,eACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,eACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,kBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,eACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,cACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,+CACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,yBACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,YACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,cACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,uBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,wCACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,cACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,OACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,sBACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,eACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,2BACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,uBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,iBACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,gBACN+2B,SAAU,KACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,aACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,8CACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,UACN+2B,SAAU,MACVj0B,KAAM,MAEV,CACI9C,KAAM,0BACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,uBACN+2B,SAAU,QACVj0B,KAAM,MAEV,CACI9C,KAAM,oBACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,QACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,SACN+2B,SAAU,OACVj0B,KAAM,MAEV,CACI9C,KAAM,WACN+2B,SAAU,OACVj0B,KAAM,OAIDk0B,GAAkBC,GACpBH,GAAanlB,QAAQulB,GAAyBA,EAAQl3B,OAASi3B,I,wCChsC1E,UAAe,IAAApH,UAAQ,UAAuD,cAC1EsH,EAAa,SACb3yB,IAKA,MAAM4yB,EAAoE,CACtEC,wBAAyB,qCACzBC,mBAAoB,+BACpBC,iBAAkB,8BAGtB,OAAO,QACHJ,EAAcrJ,QACV,CAACoC,GAAUhxB,KAAI2H,eACPA,GACIuwB,EAAiCl4B,KACjCgxB,EAAOhxB,IAAM,UACRs4B,WACA3wB,SACGrC,EAASoB,UAAU,oCAAqC,CACpD6xB,UAAWjzB,EAASoB,UAChBwxB,EAAiCl4B,OAKtC,4BAAPA,IACAgxB,EAAOhxB,GAAMgxB,EAAOhxB,GAAIw4B,QACpB,aACAlzB,EAASoB,UAAU,mCAAoC,CACnD6xB,UAAWjzB,EAASoB,UAChB,0CAML,uBAAP1G,IACAgxB,EAAOhxB,GAAMgxB,EAAOhxB,GAAIw4B,QACpB,aACAlzB,EAASoB,UAAU,mCAAoC,CACnD6xB,UAAWjzB,EAASoB,UAAU,qCAO3CsqB,IAGX,CAAC,GAGb,IC1CMyH,GACF,gDAYER,GAA6B,CAC/B,CACIn3B,KAAM,mBACN43B,QAAQ,EACR14B,GAAI,mBACJY,MAAO,6BACP+G,UAAU,EACV2R,UAAWqf,GAAA,EAAqBC,KAChCpH,gBAAiB,cAErB,CACI1wB,KAAM,0BACN43B,QAAQ,EACR14B,GAAI,0BACJY,MAAO,qCACP+G,UAAU,EACV2R,UAAWqf,GAAA,EAAqBE,KAChCz4B,KAAM,UAEV,CACIU,KAAM,qBACN43B,QAAQ,EACR14B,GAAI,qBACJY,MAAO,+BACP+G,UAAU,EACV2R,UAAWqf,GAAA,EAAqBE,OAsKxC,IAAe,EAAAnS,GAAA,IAlKyD,EACpE7X,SACA7F,kBACA8G,mBACAkI,aAAewQ,cAAa1K,gBAAeyE,sBAAqB3c,gBAChEN,WACAC,oBAEA,MAAMuzB,GAAe,IAAAnS,QAAoC,CAAC,GACpDhE,EAAwBpd,EAAc0D,KAAK0Z,wBAOjD,IAAKA,EACD,OAAO,MAoFX,IAAA5S,YAAU,MAjF4B,iDAClC,UACU/G,EAAgBgH,kBAAkB,CACpC3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,GACjB+4B,6BAA8B,CAC1B3M,UAAW,6BACX4M,mBAAoB,uBACpBC,mBAAoB,0BACpBjM,gBAAiB,IAAM8L,EAAa1R,QACpCoF,QAAU/kB,I,QACN,MAAMyxB,EAAmC,QAAZ,EAAAzxB,EAAMpB,cAAM,eAAEoM,QAAQ0mB,GAAMA,EAAEC,iBAE3D,GAAIF,aAAoB,EAApBA,EAAsBp0B,OAAQ,CAC9B,IAAIu0B,EACAC,EACJ,MAAMC,EACoC,QAAtC,EAAAL,EAAqB,GAAGE,sBAAc,eAAEx1B,KAE5C,OAAQ21B,GACJ,IAnFa,uCAoFTF,EACI,0DACJ,MAEJ,IAzFe,yCA0FXA,EACI,2DACJ,MAEJ,KAAKZ,GACDY,EACI,iEACJ,MAEJ,QACIA,EAAkB,uBAiB1B,OAVIC,EAHAC,IACAd,GAEe,IAAIe,GAAA,EAAY,CAC3BvwB,KAAM,CACFwwB,0BAA0B,EAC1B9B,eAAgB0B,KAIT,IAAI9yB,MAAMjB,EAASoB,UAAU2yB,IAGzCvpB,EAAiBwpB,EAC5B,CAEAxpB,EAAiBrI,MAIjC,CAAE,MAAOA,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAmBW,MAjB6B,iDACpC,UACUuB,EAAgBoH,oBAAoB,CACtC/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,OASG,IAEH,MAKMnG,GAAe,IAAAlC,cAChBs6B,GAAqBl5B,IANA,IAACW,EAOnB2c,EAAc4b,EAASl5B,GAPJW,EAQD,CAAE,CAACu4B,GAAUl5B,GAPnCs4B,EAAa1R,QAAU,OAAH,wBAAQ0R,EAAa1R,SAAYjmB,KASrD,CAAC2c,IAICpW,GAAmB,IAAA6D,UACrB,IACIouB,GAA8C,CAC1C1B,iBACA3yB,cAER,CAACA,EAAU2yB,KAcf,OAVA,IAAAloB,YAAU,KACNnK,GAAa,GACb2c,EAAoB1T,EAAQnH,KAC7B,CAACA,EAAkBmH,EAAQ0T,EAAqB3c,KAGnD,IAAAmK,YAAU,KACN+N,EAAc,0BAlIK,MACnB,MAAM8b,EAAUr0B,EAAc0D,KAAK4wB,oBAEnC,OAAO/B,GAAe8B,EAAQ5B,SAAS,IAAM,IA+HJ8B,GAAiBjC,YAC3D,IAGC,uBAAKne,MAAO,CAAEqgB,aAAc,SACxB,gBAAC5hB,EAAA,GAAYF,SAAQ,CAACzX,MAAO,CAAEgoB,cAAa5iB,iBACvCqyB,GAAclzB,KAAK5D,GAEZ,gBAAC64B,GAAA,EAAgB,CACbC,WAAY,uBAAuB94B,EAAMnB,KACzCmB,MAAOA,EACP6D,IAAK7D,EAAMnB,GACXY,MAAO0E,EAASoB,UAAUvF,EAAMP,OAChCc,SAAUJ,EAAaH,EAAMnB,YAWrD,CAAC,CAAEmW,QAAS,4BAA6BnW,GAAI,aChOjD,IAAYk6B,IAAZ,SAAYA,GACR,uCACA,qCACA,yCACA,sCACH,CALD,CAAYA,KAAAA,GAAsB,K,gBCYlC,MAuBA,IAAe,IAAA97B,OAvBuE,I,IAAA,UAClFixB,EAAS,iBACT8K,GAAgB,EACbt5B,GAAI,cAH2E,kCAKlF,MAAMI,GAAc,IAAA7B,cAChB,EAAG+B,WACC,gBAACi5B,GAAA,EAAY,iBACLj5B,EAAK,mBACQ,GAAGA,EAAML,cAAcK,EAAML,2BAC9C6uB,aAAa,YACbrW,UAAWqf,GAAA,EAAqB0B,UAChCr6B,GAAImB,EAAML,KACVmJ,uBAAwBkwB,EACxB9K,UAAWA,MAGnB,CAACA,EAAW8K,IAGhB,OAAO,gBAAC,KAAS,eAACjzB,MAAOjG,GAAiBJ,OCK9C,IAAe,IAAAzC,OAxBuE,I,IAClFspB,SAAS,YAAE4S,EAAW,MAAEC,EAAK,KAAEC,GAAM,iBACrCL,GAAgB,EACbt5B,GAAI,cAH2E,gCAKlF,MAAM45B,GAAe,IAAAr7B,cACjB,EAAG+B,WACC,gBAACi5B,GAAA,EAAY,iBACLj5B,EAAK,mBACQ,GAAGA,EAAML,cAAcK,EAAML,2BAC9CwY,UAAWqf,GAAA,EAAqB+B,SAChC16B,GAAImB,EAAML,KACVmJ,uBAAwBkwB,EACxBzS,QAAS6S,EACT9J,YAAa6J,EACbE,KAAMA,MAGd,CAACF,EAAaC,EAAOC,EAAML,IAG/B,OAAO,gBAAC,KAAS,iBAAKt5B,EAAI,CAAEqG,MAAOuzB,QCEvC,IAAe,IAAAr8B,OAvBmE,I,IAAA,UAC9EixB,EAAS,iBACT8K,EAAgB,aAChBxK,GAAY,EACT9uB,GAAI,cAJuE,iDAM9E,MAAMI,GAAc,IAAA7B,cAChB,EAAG+B,WACC,gBAACi5B,GAAA,EAAY,iBACLj5B,EAAK,mBACQ,GAAGA,EAAML,cAAcK,EAAML,2BAC9C6uB,aAAcA,EACd3vB,GAAImB,EAAML,KACVmJ,uBAAwBkwB,EACxB9K,UAAWA,MAGnB,CAACA,EAAW8K,EAAkBxK,IAGlC,OAAO,gBAAC,KAAS,eAACzoB,MAAOjG,GAAiBJ,OCkD9C,IAAe,IAAAzC,OApEsE,EACjFkH,WACA60B,mBACAQ,8BAEA,MAAMjT,EAAU,CACZ4S,YAAah1B,EAASoB,UAAU,qDAChC6zB,MAAO,CACH,CACI35B,MAAO0E,EAASoB,UACZ,wEAEJlG,MAAO05B,GAAuBU,kBAElC,CACIh6B,MAAO0E,EAASoB,UACZ,uEAEJlG,MAAO05B,GAAuBW,iBAElC,CACIj6B,MAAO0E,EAASoB,UACZ,yEAEJlG,MAAO05B,GAAuBY,mBAElC,CACIl6B,MAAO0E,EAASoB,UACZ,wEAEJlG,MAAO05B,GAAuBa,oBAK1C,OACI,gCACI,gBAAC,GAAyB,CACtB5vB,aAAc7F,EAASoB,UAAU,gDACjC2oB,UAAW,GACXvuB,KAAK,gBACLq5B,iBAAkBA,IAGtB,gBAAC,GAAyB,CACtBhvB,aAAc7F,EAASoB,UAAU,gDACjC2oB,UAAW,EACXvuB,KAAK,gBACLq5B,iBAAkBA,IAGtB,gBAAC,GAAyB,CACtBhvB,aAAc7F,EAASoB,UAAU,8CACjC5F,KAAK,cACL4mB,QAASA,EACTyS,iBAAkBA,IAErBQ,GACG,gBAAC,GAAuB,CACpBxvB,aAAc7F,EAASoB,UAAU,8BACjC5F,KAAK,cACLq5B,iBAAkBA,QCGtC,GAxE2BtrB,IACvB,MAAOwc,EAAmB4B,IAAwB,IAAA5T,aAE5C,cAAE9T,IAAkB,UACpB4gB,EAAW5gB,EAAc0D,KAAKmd,cAC9BxP,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAEhD,YAAEmJ,GAAgBF,MAClB,cAAEgG,GAAkB9F,EAEpB6H,GAAqB,IAAAtU,UAAQ,IAC3BqL,EACOA,EAAYnE,OAAO4J,IAGvB,IACR,CAACzF,IACEwL,IACD+D,aAAQ,EAARA,EAAUE,UAAWljB,QAAQ0L,EAAOlF,OAAO2c,mBAC1CrD,EACFb,GAAgCvC,EAAmB/a,OAAS,EAC1DuoB,EAA4BpK,IAAiCoI,EAE7DpB,GAAuB,IAAA7qB,cAAY,KACrC,IAAKygB,EAAmB/a,OACpB,OAOJ,OAJiC+a,EAAmBpN,QAChD,EAAGoP,uBAAwBA,IAGC,IAAMhC,EAAmB,KAC1D,CAACA,KAEJ,IAAA9P,YAAU,KACNkd,EAAqB7K,EAA+B6H,SAAyBzc,KAC9E,CAAC4U,EAA8B6H,KAElC,IAAAla,YAAU,KACDkT,GACDnF,EAAc,eAAgB,MAEnC,CAACA,EAAemF,IAEnB,MAAMd,GAAyB,IAAA/iB,cAC1BY,IACGitB,GAAqB,IAAAla,MAAK8M,EAAoB,CAAEvI,YAAatX,KAC7D8d,EAAc,eAAgB9d,GAC9B8d,EAAc,gCAAgC,KAElD,CAAC+B,EAAoB/B,IAGnBiM,GAAyB,IAAA3qB,cAAY,KACvC6tB,OAAqBzf,GACrBsQ,EAAc,eAAgB,IAC9BA,EAAc,wBAAwB,GACtCA,EAAc,gCAAgC,KAC/C,CAACA,IAEJ,MAAO,CACH+B,qBACAwL,oBACAlJ,yBACA4H,yBACA3H,+BACAa,+BACAoK,8BCvER,IAAe,IAAAsD,UAAQ,SACnBrrB,EACA01B,EACAL,GAEA,MAAM3J,EAAS,OAAH,wBACHgK,EAA6D,CAAC,EAAzC,CAAEzjB,cAAc,UAAS5P,aAC/CqzB,EACE,OAAD,sBACKre,eAAe,UACVhV,SACGrC,EAASoB,UAAU,uDAEtB8xB,QACG,QACAlzB,EAASoB,UAAU,wDAEtBu0B,IAAI,EAAG31B,EAASoB,UAAU,kDAC1B4oB,IACG,GACAhqB,EAASoB,UAAU,sDAE3Bw0B,eAAe,UACVvzB,SACGrC,EAASoB,UAAU,uDAEtB8xB,QACG,QACAlzB,EAASoB,UAAU,wDAEtB5B,OACG,EACAQ,EAASoB,UAAU,mDAEvBi0B,EACE,CACIQ,aAAa,UACRxzB,SAASrC,EAASoB,UAAU,wCAC5B4oB,IACG,GACAhqB,EAASoB,UACL,qDAIhB,CAAC,GAAE,CACT00B,aAAa,UAASzzB,SAClBrC,EAASoB,UAAU,uDAG3B,CAAC,GAGX,OAAO,QAAOsqB,EAClB,ICqGA,IAAe,EAAAtK,GAAA,IA7I+D,EAC1E7X,SACA7F,iBAAmBgH,oBAAmBI,sBAAqBkS,mBAC3D/c,eACI0D,MAAQ0Z,wBAAuByD,cAAayT,qBAC5Cr0B,UAAYya,yBAEhBjI,aAAekO,gBAAe3D,sBAAqBzE,gBAAeud,iBAClE/1B,WACAwK,uBAEA,MAAO1O,EAAUk6B,IAAe,IAAAjiB,WAAS,GACnC3X,GAAW,IAAAtC,cACZm8B,GAA+BD,GAAaC,IAC7C,CAACD,KAGL,IAAAvrB,YACI,IAAMmW,EAAcrX,EAAQ8T,KAA2BvhB,IACvD,CAAC8kB,EAAe9kB,EAAUuhB,EAAuB9T,IAGrD,MAAM2sB,GAAgB,IAAAp8B,cAAY,KAAY,uDACpC4Q,EAAkB,CACpB3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,KAAG,CAACgQ,EAAmBnB,IAEjB4sB,GAAkB,IAAAr8B,cAAY,KAAY,uDACtCgR,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,KAAG,CAACoQ,EAAqBvB,EAAOsH,QAAStH,EAAO7O,MAEhD,IAAA+P,YAAU,KACDyrB,IAEE,KACEC,OAEV,CAACA,EAAiBD,KAErB,IAAAzrB,YAAU,KACN,MAUM,QAAEsW,GAAYD,KAAiB,CAAC,GAEPC,GAAWxX,EAAOlF,OAAO2c,oBAZb,iDACvC,UACUhE,GACV,CAAE,MAAO7a,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,MAUD,IAEH,MAAM,mBACFoY,EAAkB,kBAClBwL,EAAiB,uBACjBlJ,EAAsB,uBACtB4H,EAAsB,6BACtB3H,EAA4B,6BAC5Ba,EAA4B,0BAC5BoK,GACA,GAAkBxe,GAEhBhI,EAAYoZ,IAEZyb,GAAkBzY,GAAgCoK,EAClD+N,EAAcC,IAAgBD,YAC9BT,EACFS,IAAgBlB,GAAuBY,mBACvCM,IAAgBlB,GAAuBa,iBAiB3C,OAfA,IAAAhrB,YAAU,K,MAEF+N,EAAc,cADd6c,EACgD,QAAnB,EAAAd,WAAmB,eAAE8B,aAErBnuB,KAElC,CAACmtB,EAAyB7c,EAAe+b,KAE5C,IAAA9pB,YAAU,KACNwS,EACI1T,EACA+sB,GAAuBt2B,EAAUo2B,EAAgBf,MAEtD,CAACr1B,EAAUo2B,EAAgBf,EAAyBpY,EAAqB1T,IAGxE,gBAACwP,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,gBAAC,KAAQ,CACLtD,OACI,gBAAC,GAAM,CAAC0C,QAAM,GACTX,EAASoB,UAAU,mDAG5BgT,MAAO,CAAEmiB,cAAe,SAEvB5Y,GACG,uBAAK1kB,UAAU,iCACX,gBAAC,GAAyB,CACtBqY,YAAaiJ,EACb3C,mBAAoBiF,EACpBhF,mBAAoB4M,EACpB9Q,mBAAoBoS,KAI/BqQ,GACG,gBAAC,GAAyB,CACtBp2B,SAAUA,EACVq1B,wBAAyBA,IAGjC,gBAAC,GAAiB,CACdxvB,aAAc7F,EAASoB,UAAU,sCACjC5F,KAAK,oBACLY,SAAUA,IAEb0gB,GACG,gBAAC,GAAuB,CACpB7K,aAAc8T,aAAiB,EAAjBA,EAAmB/T,YACjCV,YAAaiJ,EACb7B,qBAAmB,QAUvC,CAAC,CAAEhe,GAAI,MAAOmW,QAAS,oBC1I3B,IAAe,EAAAuQ,GAAA,IAdwE,I,IAAA,gBACnF1d,GAAe,EACZnI,GAAI,cAF4E,qBAInF,OACI,gBAACqpB,GAAsB,iBACfrpB,EAAI,CACRmI,gBAAiBA,EACjBoH,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmBhH,EAAgBgH,uBAO3C,CAAC,CAAEmG,QAAS,oBCAH2lB,GACTC,IAEA,QAE0B,iBAAXA,GACI,OAAXA,KACE,4BAA6BA,GACe,iBAAnCA,EAAOC,yBACb,iBAAkBD,IAxBaE,EAwB6BF,EAAOG,aArBxEC,MAAMC,QAAQH,IACdA,EAAMn3B,QACN,aAAcm3B,EAAM,IACpB,eAAgBA,EAAM,MANa,IAACA,GCuEhD,GA1E4BptB,IACxB,MAAOwc,EAAmB4B,IAAwB,IAAA5T,aAE5C,cAAE9T,IAAkB,UACpB4gB,EAAW5gB,EAAc0D,KAAKmd,cAC9BxP,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAEhD,YAAEmJ,GAAgBF,MAClB,cAAEgG,GAAkB9F,EAEpB6H,GAAqB,IAAAtU,UAAQ,IAC3BqL,EACOA,EAAYnE,OAAO6J,IAGvB,IACR,CAAC1F,IAEEwL,IACD+D,aAAQ,EAARA,EAAUE,UAAWljB,QAAQ0L,EAAOlF,OAAO2c,mBAE1CrD,EACFb,GAAgCvC,EAAmB/a,OAAS,EAC1DuoB,EAA4BpK,IAAiCoI,EAE7DpB,GAAuB,IAAA7qB,cAAY,KACrC,IAAKygB,EAAmB/a,OACpB,OAOJ,OAJiC+a,EAAmBpN,QAChD,EAAGoP,uBAAwBA,IAGC,IAAMhC,EAAmB,KAC1D,CAACA,KAEJ,IAAA9P,YAAU,KACNkd,EAAqB7K,EAA+B6H,SAAyBzc,KAC9E,CAAC4U,EAA8B6H,KAElC,IAAAla,YAAU,KACDkT,GACDnF,EAAc,eAAgB,MAEnC,CAACA,EAAemF,IAEnB,MAAMd,GAAyB,IAAA/iB,cAC1BY,IACGitB,GAAqB,IAAAla,MAAK8M,EAAoB,CAAEvI,YAAatX,KAC7D8d,EAAc,eAAgB9d,GAC9B8d,EAAc,gCAAgC,KAElD,CAAC+B,EAAoB/B,IAGnBiM,GAAyB,IAAA3qB,cAAY,KACvC6tB,OAAqBzf,GACrBsQ,EAAc,eAAgB,IAC9BA,EAAc,wBAAwB,GACtCA,EAAc,gCAAgC,KAC/C,CAACA,IAEJ,MAAO,CACH+B,qBACAwL,oBACAlJ,yBACA4H,yBACA3H,+BACAa,+BACAoK,8BCzER,IAAe,IAAAsD,UAAQ,SACnBrrB,EACA01B,GAEA,MAAMhK,EAAS,OAAH,wBACHgK,EAA6D,CAAC,EAAzC,CAAEzjB,cAAc,UAAS5P,aAC/CqzB,EACE,CACIqB,MAAM,UACD7D,QACG,kBACAlzB,EAASoB,UAAU,mCAAoC,CAAE9F,MAAO,UAEnE+G,SAASrC,EAASoB,UAAU,yCACjC41B,WAAW,UAAS30B,SAChBrC,EAASoB,UAAU,sCAEvB61B,UAAU,UAAS50B,SACfrC,EAASoB,UAAU,sCAG3B,CAAC,GAGX,OAAO,QAAOsqB,EAClB,IC0IA,IAAe,EAAAtK,GAAA,IArJiEzmB,IAC5E,MAAM,OACF4O,EACA7F,iBAAiB,kBAAEgH,EAAiB,oBAAEI,EAAmB,gBAAEkS,GAC3D/c,eACI0D,MAAM,sBAAE0Z,GACRnd,UAAU,qBAAEya,IAEhBjI,aAAa,cAAEkO,EAAa,oBAAE3D,GAAqB,SACnDjd,EAAQ,iBACRwK,GACA7P,EAEJ,IAAK67B,GAAmCjtB,EAAO8E,oBAC3C,MAAM,IAAIpN,MAAM,qCAGpB,MAAOnF,EAAUk6B,IAAe,IAAAjiB,WAAS,GACnCmjB,GAAqB,IAAAp9B,cACtBm8B,GAA+BD,GAAaC,IAC7C,CAACD,KAGL,IAAAvrB,YACI,IAAMmW,EAAcrX,EAAQ8T,KAA2BvhB,IACvD,CAAC8kB,EAAe9kB,EAAUuhB,EAAuB9T,IAGrD,MAAM4tB,GAAiB,IAAAr9B,cAAY,KAAY,uDACrC4Q,EAAkB,CACpB3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,KAAG,CAACgQ,EAAmBnB,IAEjB6tB,GAAmB,IAAAt9B,cAAY,KAAY,uDACvCgR,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,KAAG,CAACoQ,EAAqBvB,EAAOsH,QAAStH,EAAO7O,MAEhD,IAAA+P,YAAU,KACD0sB,IAEE,KACEC,OAEV,CAACA,EAAkBD,IAEtB,MAAM,mBACF5c,EAAkB,kBAClBwL,EAAiB,uBACjBlJ,EAAsB,uBACtB4H,EAAsB,6BACtB3H,EAA4B,6BAC5Ba,EAA4B,0BAC5BoK,GACA,GAAmBxe,GAEjB6sB,GAAkBzY,GAAgCoK,GAExD,IAAAtd,YAAU,KACNwS,EAAoB1T,EAAQ8tB,GAAwBr3B,EAAUo2B,MAC/D,CAACp2B,EAAUo2B,EAAgBnZ,EAAqB1T,KAEnD,IAAAkB,YAAU,KAWFqS,IAVuC,iDACvC,UACUE,GACV,CAAE,MAAO7a,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,MAMD,IAEH,MAAMZ,EAAYoZ,IAElB,OACI,gBAAC5B,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,gBAAC,KAAQ,CACLtD,OACI,gBAAC,GAAM,CAAC0C,QAAM,GACTX,EAASoB,UAAU,8CAG5BgT,MAAO,CAAEmiB,cAAe,SAEvB5Y,GACG,uBAAK1kB,UAAU,iCACX,gBAAC,GAAyB,CACtBqY,YAAaiJ,EACb3C,mBAAoBiF,EACpBhF,mBAAoB4M,EACpB9Q,mBAAoBoS,KAI/BqQ,GACG,gCACI,gBAAC,GAAuB,CACpB/L,aAAa,OACbxkB,aAAc7F,EAASoB,UAAU,sCACjC5F,KAAK,OACLq5B,kBAAkB,IAEtB,gBAAC,GAAuB,CACpBhvB,aAAc7F,EAASoB,UAAU,4BACjC5F,KAAK,YACLq5B,kBAAkB,IAEtB,gBAAC,GAAuB,CACpBhvB,aAAc7F,EAASoB,UAAU,2BACjC5F,KAAK,WACLq5B,kBAAkB,KAK9B,gBAAC,GAAiB,CACdhvB,aAAc7F,EAASoB,UACnB,kDACA,CACIk2B,aAAc/tB,EAAO8E,mBAAmBqoB,0BAGhDl7B,KAAK,oBACLY,SAAU86B,IAGbpa,GACG,gBAAC,GAAuB,CACpB7K,aAAc8T,aAAiB,EAAjBA,EAAmB/T,YACjCV,YAAaiJ,EACb7B,qBAAmB,QAUvC,CAAC,CAAEhe,GAAI,oBAAqBmW,QAAS,oBCrKzC,IAAe,IAAAwa,UAAQ,SAAkCrrB,GACrD,OAAO,QAAO,CACVu3B,KAAK,UAASl1B,SAASrC,EAASoB,UAAU,gCAElD,IC+DA,IAAe,EAAAggB,GAAA,IA1DiE,EAC5E7X,SACA7F,iBAAmBgH,oBAAmBI,uBACtC4H,aAAeuK,uBACfjd,eAEA,IAAKw2B,GAAmCjtB,EAAO8E,oBAC3C,MAAM,IAAIpN,MAAM,qCAGpB,MAAM,aAAE21B,GAAiBrtB,EAAO8E,mBAE1BmpB,EAA4BZ,EAAan3B,KAAK6X,IAAW,CAC3Dpc,MAAOoc,EAAOmgB,SACdn8B,MAAOgc,EAAOogB,eAGZC,GAAkB,IAAA79B,cAAY,KAAY,iDAC5CmjB,EAAoB1T,EAAQquB,GAAyB53B,UAE/C0K,EAAkB,CACpB3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,KAAG,CAACgQ,EAAmBnB,EAAQ0T,EAAqBjd,IAE9C63B,GAAoB,IAAA/9B,cAAY,KAAY,uDACxCgR,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,KAAG,CAACoQ,EAAqBvB,EAAOsH,QAAStH,EAAO7O,KAUhD,OARA,IAAA+P,YAAU,KACDktB,IAEE,KACEE,OAEV,CAACA,EAAmBF,IAGnB,gBAAC,KAAQ,CACL15B,OAAQ,gBAAC,GAAM,CAAC0C,QAAM,GAAEX,EAASoB,UAAU,wBAC3CgT,MAAO,CAAEmiB,cAAe,SAExB,gBAAC,GAAyB,CACtB1wB,aAAc7F,EAASoB,UAAU,uBACjC5F,KAAK,MACL4mB,QAAS,CACL4S,YAAah1B,EAASoB,UAAU,4BAChC6zB,MAAOuC,QASvB,CAAC,CAAE98B,GAAI,QAASmW,QAAS,oBCiC7B,IAAe,EAAAuQ,GAAA,IA9EyD,I,IAAA,gBACpE1d,EAAe,cACfzD,EAAa,OACbsJ,EAAM,YACNmJ,GAAW,EACRnX,GAAI,cAL6D,4DAOpE,MAAOu8B,EAAiBC,IAAsB,IAAAhkB,WAAkB,IACzDikB,EAAoBC,IAAyB,IAAAlkB,YAC9ChW,GAAM,IAAAsjB,QAAmC,CAC3C6W,uBAAuB,IAAAvO,eAGrBwO,GAA4B,IAAAr+B,cAAY,KAC1Cm+B,OAAsB/vB,GAElBnK,EAAI+jB,QAAQsW,0BACZr6B,EAAI+jB,QAAQsW,0BACZr6B,EAAI+jB,QAAQsW,6BAA0BlwB,KAE3C,IAEGmwB,GAA8B,IAAAv+B,cAC/BsoB,GACU1e,EAAgBgH,kBAAkB,OAAD,wBACjC0X,GAAO,CACVkW,WAAY,CACR,MAAArW,CAAO9mB,EAA4B+mB,GAC/B+V,EAAsB98B,GACtB48B,GAAmB,GACnBh6B,EAAI+jB,QAAQsW,wBAA0BlW,CAC1C,EACA9N,MAAO,CACHmkB,OAAQ,sBACR9/B,OAAQ,OACRE,MAAO,aAKvB,CAAC+K,IAGC80B,GAA2B,IAAA1+B,cAAY,KACrCiE,EAAI+jB,QAAQoW,sBAAsBpW,SAAWkW,IAC7CA,EAAmB/9B,iBAAiB,QAAQ,KACxC89B,GAAmB,MAEvBh6B,EAAI+jB,QAAQoW,sBAAsBpW,QAAQqN,YAAY6I,MAE3D,CAACA,IAEJ,OACI,gCACI,gBAACpT,GAAsB,iBACfrpB,EAAI,CACRmI,gBAAiBA,EACjBzD,cAAeA,EACf6K,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmB2tB,EACnB9uB,OAAQA,EACRmJ,YAAaA,KAEjB,gBAAC,KAAK,CACF/V,yBAAyB,kBACzBiG,SAAUo1B,EACVpe,YAAa4e,EACb57B,eAAgBu7B,EAChBr7B,uBAAuB,GAEvB,gBAACic,GAAA,EAAc,CAACxX,UAAWu2B,GACvB,uBAAK/5B,IAAKA,EAAI+jB,QAAQoW,6BAStC,CAAC,CAAErnB,QAAS,gBCxGhB,IAAe,IAAAwa,UAAQ,SACnBrrB,GAEA,OAAO,QAAO,CACV+2B,MAAM,UACD7D,QACG,kBACAlzB,EAASoB,UAAU,mCAAoC,CAAE9F,MAAO,UAEnE+G,SAASrC,EAASoB,UAAU,uCAEzC,ICiDA,IAAe,EAAAggB,GAAA,IAnDqE,EAChF7X,SACAvJ,WACA0S,aAAeuK,uBACfvZ,iBAAmBgH,oBAAmBI,2BAEtC,IAAK0rB,GAAmCjtB,EAAO8E,oBAC3C,MAAM,IAAIpN,MAAM,qCAGpB,MAAMw3B,GAAsB,IAAA3+B,cAAY,KAAY,iDAChDmjB,EAAoB1T,EAAQmvB,GAA6B14B,UAEnD0K,EAAkB,CACpB3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,KAAG,CAACgQ,EAAmB1K,EAAUuJ,EAAQ0T,IAEnC0b,GAAwB,IAAA7+B,cAAY,KAAY,uDAC5CgR,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,KAAG,CAACoQ,EAAqBvB,EAAOsH,QAAStH,EAAO7O,KAUhD,OARA,IAAA+P,YAAU,KACDguB,IAEE,KACEE,OAEV,CAACA,EAAuBF,IAGvB,gBAAC,KAAQ,CACLx6B,OACI,gBAAC,GAAM,CAAC0C,QAAM,GAAEX,EAASoB,UAAU,uCAEvCgT,MAAO,CAAEmiB,cAAe,SAExB,gBAAC,GAAuB,CACpBlM,aAAa,OACbxkB,aAAc7F,EAASoB,UAAU,sCACjC5F,KAAK,OACLq5B,kBAAkB,OAQ9B,CAAC,CAAEn6B,GAAI,cAAemW,QAAS,oBC/BnC,GA7BwE,I,IAAA,gBACpEnN,EAAe,cACfzD,EAAa,OACbsJ,GAAM,EACHhO,GAAI,cAJ6D,8CAMpE,MAAMq9B,GAA8D,IAAA9+B,cAC/DsoB,GACG1e,EAAgBgH,kBAAkB,OAAD,wBAC1B0X,GAAO,CACVyW,KAAM,CACFC,wBAAwB,OAGpC,CAACp1B,IAGL,OACI,gBAACkhB,GAAsB,eACnBlhB,gBAAiBA,EACjBzD,cAAeA,EACf6K,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmBkuB,EACnBrvB,OAAQA,GACJhO,KCpBVw9B,GAA8B,CAChCC,iBAAkB,gCAClBC,SAAU,wCAGRC,GAAe,CACjB,CAAEx+B,GAAI,0BACN,CAAEA,GAAI,0BACN,CAAEA,GAAI,2BAGJy+B,GAA+C,KACjD,MAAMtzB,EACF,gCACI,gBAACK,EAAA,EAAc,CACXvC,KAAMo1B,GACNr+B,GAAG,oCAEP,0BACKw+B,GAAaz5B,KAAI,EAAG/E,MAAMgF,IACvB,sBAAIA,IAAKA,GACL,gBAACrB,EAAA,EAAgB,CAAC3D,GAAIA,SAO1C,OACI,gBAAC,GAAiB,CACdsD,oBAAoB,0CACpB6H,aAAcA,EACdrK,KAAK,yBAiBjB,GAZ+D,EAC3DyP,cACAmuB,+BAGI,uBAAKngC,UAAU,iBACX,uBAAKA,UAAU,oCAAoCyB,GAAIuQ,IACtDmuB,EAA4B,gBAACD,GAAyB,MAAM,MCyCzE,GApF0E,I,IAAA,gBACtEz1B,EAAe,cACfzD,EAAa,OACbsJ,EAAM,YACNmJ,GAAW,EACRnX,GAAI,cAL+D,4DAOtE,MAAO69B,EAA2BC,IAAgC,IAAAtlB,WAAS,GAErEulB,EAA0B,iBAE1B,wBACF3Y,EAAuB,cACvBC,EAAa,cACbpI,EAAa,UACb+E,EAAS,oBACTN,GACAvK,EAEEkmB,GAAwB,IAAA9+B,cACzBsoB,GACG1e,EAAgBgH,kBAAkB,OAAD,wBAC1B0X,GAAO,CACVyW,KAAM,CACF5tB,YAAaquB,EACbR,wBAAwB,EACxBS,gBAAkBC,IACdH,GAA8BG,GAE1BA,GACAhhB,EAAc,uBAAuB,SAKzD,CAAC9U,EAAiB41B,EAAyB9gB,IAGzCsG,GAA0B,IAAAhlB,cAC5B,IACI,gBAAC,GAAc,CACXmR,YAAaquB,EACbF,0BAA2BA,KAGnC,CAACE,EAAyBF,KAGxB,eAAE/nB,EAAc,sBAAEgM,GAA0Bpd,EAAc0D,MAC1D,sBAAEsuB,EAAqB,qBAAEtX,GAAyB1a,EAAcC,SAChEoR,EAAcD,EAAe9H,IAAW,GACxCsX,EAAW5gB,EAAc0D,KAAKmd,cAC9B2Y,EAAkB5Y,aAAQ,EAARA,EAAUE,QAC5BjE,GACD2c,GAAmB57B,QAAQ0L,EAAOlF,OAAO2c,mBAE9C,OACI,gBAAC,GAA4B,eACzB/V,YAAY,uBACZH,oBAAqBpH,EAAgBoH,oBACrC8V,cAAeA,EACfD,wBAAyBA,EACzBjW,kBAAmBkuB,EACnBtnB,YAAaA,EACbmM,eAAgBwU,IAChB5R,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAAuCre,GACvE6c,6BAA8BA,EAC9BnC,qBAAsBA,IACtB0C,sBAAuBA,IACvBsB,YAAa8a,EACbzc,gBAAiBtZ,EAAgBsZ,gBACjCzT,OAAQA,EACRuV,wBAAyBA,EACzBtG,cAAeA,EACf+E,UAAWA,EACXN,oBAAqBA,EACrB4B,8BAA4B,EAC5BoC,QAASvd,EAAgBwd,iBACrB3lB,KC/ChB,IAAe,EAAA6lB,GAAA,IAhCmD,I,OAAA,gBAC9D1d,EAAe,cACfzD,EAAa,OACbsJ,EAAM,YACNmJ,GAAW,EACRnX,GAAI,cALuD,4DAS9D,OAFiD,QAAzB,EAAAgO,EAAO8E,0BAAkB,eAAEqrB,yBAI3C,gBAAC,GAAyB,eACtBh2B,gBAAiBA,EACjBzD,cAAeA,EACfsJ,OAAQA,EACRmJ,YAAaA,GACTnX,IAMZ,gBAAC,GAAuB,eACpBmI,gBAAiBA,EACjBzD,cAAeA,EACfsJ,OAAQA,EACRmJ,YAAaA,GACTnX,MAOZ,CAAC,CAAEb,GAAI,UCzCX,IAAYi/B,GAUAC,GAKAC,IAfZ,SAAYF,GACR,8BACA,4BACA,gCACA,gCACA,gCACA,wBACA,qBACH,CARD,CAAYA,KAAAA,GAAqB,KAUjC,SAAYC,GACR,sBACA,qBACH,CAHD,CAAYA,KAAAA,GAAc,KAK1B,SAAYC,GACR,oBACA,qBACH,CAHD,CAAYA,KAAAA,GAAY,KAKxB,MAAMC,GAAqB,CACvB,CACI5+B,MAAO2+B,GAAaE,QACpBz+B,MAAOu+B,GAAaE,SAExB,CACI7+B,MAAO2+B,GAAaG,SACpB1+B,MAAOu+B,GAAaG,WAIfC,GAAuB,CAChC,CACI/+B,MAAO0+B,GAAeM,SACtB5+B,MAAOs+B,GAAeM,UAE1B,CACIh/B,MAAO0+B,GAAeO,SACtB7+B,MAAOs+B,GAAeO,WAIjBC,GAA6C,CACtD,CACI5+B,KAAMm+B,GAAsBU,YAC5BjH,QAAQ,EACR14B,GAAIi/B,GAAsBU,YAC1B/+B,MAAO,eACP+G,UAAU,EACV2R,UAAWqf,GAAA,EAAqB+B,SAChChT,QAAS,CACL6S,MAAO6E,KAGf,CACIt+B,KAAMm+B,GAAsBW,cAC5BlH,QAAQ,EACR14B,GAAIi/B,GAAsBW,cAC1Bh/B,MAAO,iBACP+G,UAAU,EACV2nB,IAAK,EACL2L,IAAK,GAET,CACIn6B,KAAMm+B,GAAsBY,cAC5BnH,QAAQ,EACR14B,GAAIi/B,GAAsBY,cAC1Bj/B,MAAO,iBACP+G,UAAU,GAEd,CACI7G,KAAMm+B,GAAsBa,cAC5BpH,QAAQ,EACR14B,GAAIi/B,GAAsBa,cAC1Bl/B,MAAO,iBACP+G,UAAU,EACV2R,UAAWqf,GAAA,EAAqB+B,SAChChT,QAAS,CACL6S,MAAOgF,MAKNQ,GAA8C,IACpDL,GACH,CACI5+B,KAAMm+B,GAAsBe,UAC5BtH,QAAQ,EACR14B,GAAIi/B,GAAsBe,UAC1Bp/B,MAAO,aACP+G,UAAU,GAEd,CACI7G,KAAMm+B,GAAsBgB,SAC5BvH,QAAQ,EACR14B,GAAIi/B,GAAsBgB,SAC1Br/B,MAAO,YACP+G,UAAU,IAILu4B,GAA8C,IACpDR,GACH,CACI5+B,KAAMm+B,GAAsBkB,aAC5BzH,QAAQ,EACR14B,GAAIi/B,GAAsBkB,aAC1Bv/B,MAAO,gBACP+G,UAAU,IClClB,GAvEoCkH,IAChC,MAAOwc,EAAmB4B,IAAwB,IAAA5T,aAE5C,cAAE9T,IAAkB,UACpB4gB,EAAW5gB,EAAc0D,KAAKmd,cAC9BxP,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,IAE3D,YAAEmJ,GAAgBF,MAClB,cAAEgG,GAAkB9F,EAEpB6H,GAAqB,IAAAtU,UAAQ,IAAMqL,EAAYnE,OAAO4J,KAAkB,CAACzF,IACzEwL,IACD+D,aAAQ,EAARA,EAAUE,UAAWljB,QAAQ0L,EAAOlF,OAAO2c,mBAC1CrD,EACFb,GAAgCvC,EAAmB/a,OAAS,EAC1DuoB,EAA4BpK,IAAiCoI,EAC7DC,EACFrI,KACEoI,IACDA,EAAkB3F,uBAEjBuE,GAAuB,IAAA7qB,cAAY,KACrC,IAAKygB,EAAmB/a,OACpB,OAOJ,OAJiC+a,EAAmBpN,QAChD,EAAGoP,uBAAwBA,IAGC,IAAMhC,EAAmB,KAC1D,CAACA,KAEJ,IAAA9P,YAAU,KACNkd,EAAqB7K,EAA+B6H,SAAyBzc,KAC9E,CAAC4U,EAA8B6H,KAElC,IAAAla,YAAU,KACDkT,GACDnF,EAAc,eAAgB,MAEnC,CAACA,EAAemF,IAEnB,MAAMd,GAAyB,IAAA/iB,cAC1BY,IACGitB,GAAqB,IAAAla,MAAK8M,EAAoB,CAAEvI,YAAatX,KAC7D8d,EAAc,eAAgB9d,GAC9B8d,EAAc,gCAAgC,KAElD,CAAC+B,EAAoB/B,IAGnBiM,GAAyB,IAAA3qB,cAAY,KACvC6tB,OAAqBzf,GACrBsQ,EAAc,eAAgB,IAC9BA,EAAc,wBAAwB,GACtCA,EAAc,gCAAgC,KAC/C,CAACA,IAEJ,MAAO,CACH+B,qBACAwL,oBACAlJ,yBACA4H,yBACA3H,+BACAa,+BACAoK,4BACA/B,4BCuER,GAhImCzc,IAC/B,MAAM,YAAEmJ,GAAgBF,MAClB,SAAExS,IAAa,UAEfkd,EAAsB,KACxB,MACM4d,EADgBpoB,EAAY0J,cAAc,mBAE1Bwd,GAAeO,SAC3BS,GACAH,GAEJ7H,EAAoE,CACtE,CAAC+G,GAAsBe,WAAY,qBACnC,CAACf,GAAsBgB,UAAW,oBAClC,CAAChB,GAAsBW,eAAgB,gCACvC,CAACX,GAAsBY,eAAgB,gCACvC,CAACZ,GAAsBkB,cAAe,gCAG1C,OAAO,QACHC,EAAWxR,QACP,CAACoC,GAAUhxB,KAAI2H,eACPA,GACIuwB,EAAiCl4B,KACjCgxB,EAAOhxB,IAAM,UAAS2H,SAClBrC,EAASoB,UACL,GAAGwxB,EAAiCl4B,sBAIxCA,IAAOi/B,GAAsBW,gBAC7B5O,EAAOhxB,GAAMgxB,EAAOhxB,GAAIw4B,QACpB,QACAlzB,EAASoB,UAAU,oCAAqC,CACpD9F,MAAO0E,EAASoB,UAAU,oCAKlC1G,IAAOi/B,GAAsBY,gBAC7B7O,EAAOhxB,GAAMgxB,EAAOhxB,GACfw4B,QACG,QACAlzB,EAASoB,UAAU,oCAAqC,CACpD9F,MAAO0E,EAASoB,UACZ,oCAIXu0B,IACG,EACA31B,EAASoB,UAAU,qBAAsB,CACrC9F,MAAO0E,EAASoB,UACZ,iCAEJu0B,IAAK,KAGZ3L,IACG,EACAhqB,EAASoB,UAAU,qBAAsB,CACrC9F,MAAO0E,EAASoB,UACZ,iCAEJ4oB,IAAK,OAOtB0B,IAGX,CAAC,KAgDb,MAAO,CACHqP,0BA5C6B,IAAAjhC,cACtBkhC,IAAgE,iD,cACnE,MAAM,cACF3jB,EAAa,aACb4jB,EAAY,cACZrF,EAAa,cACbsF,EAAa,UACblE,EAAS,SACTC,GACA+D,EAEE54B,EAAmB8a,IAEzBxK,EAAYuK,oBAAoB1T,EAAQnH,GAExC,MACI+4B,EACAC,EACAC,EACAC,EACAC,SACM9b,QAAQ+b,IAAI,OACyB,QAArC,EAAAp5B,EAAiBguB,OAAO/Y,qBAAa,eAAEiC,QAAQjC,SACV,QAArC,EAAAjV,EAAiBguB,OAAOwF,qBAAa,eAAEtc,QAAQsc,SACd,QAAjC,EAAAxzB,EAAiBguB,OAAO4G,iBAAS,eAAE1d,QAAQ0d,SACX,QAAhC,EAAA50B,EAAiBguB,OAAO6G,gBAAQ,eAAE3d,QAAQ2d,SACN,QAApC,EAAA70B,EAAiBguB,OAAO6K,oBAAY,eAAE3hB,QAAQ2hB,KAGlDQ,EACFP,IAAkBtB,GAAeO,SAC3BoB,EACAF,GAAoBC,EAE9B,OAAOF,GAAwBD,GAAwBM,CAC3D,KACA,CAACve,IASDwe,qBANwB,IAAA5hC,cAAY,KACpC4Y,EAAYuK,oBAAoB1T,EAAQ,QACzC,CAACmJ,EAAanJ,MCvHfoyB,GAAgC,CAAC1I,EAAmBjzB,KACtD,MAAM47B,EAA4B,CAC9B5E,UAAWh3B,EAASoB,UAAU,4BAC9B61B,SAAUj3B,EAASoB,UAAU,2BAC7BiW,cAAerX,EAASoB,UAAU,gCAClCw0B,cAAe51B,EAASoB,UAAU,iCAClC65B,aAAcj7B,EAASoB,UAAU,+BACjC85B,cAAel7B,EAASoB,UAAU,gCAClC00B,YAAa91B,EAASoB,UAAU,+BAGpC,MAfgC,CAAC6xB,GAC1B5qB,OAAOD,OAAOuxB,IAAuB7yB,SAASmsB,GAc9C4I,CAA4B5I,GAC7B2I,EAA0B3I,GAC1BA,GAoCV,GAjCkD,KAC9C,MAAM,SAAEjzB,IAAa,WACf,YAAE0S,GAAgBF,MAClB,cAAE4J,EAAa,cAAE5D,GAAkB9F,EAGnCopB,EADqB1f,EAAcud,GAAsBa,iBAEpCZ,GAAeO,SAChCS,GACAH,GAEJz+B,GAAe,IAAAlC,cAChBs6B,GAAqBl5B,IAClBsd,EAAc4b,EAASl5B,KAE3B,CAACsd,IAGL,OACI,gCACKsjB,EAAYr8B,KAAK5D,GACd,gBAAC64B,GAAA,EAAgB,CACbC,WAAY,uBAAuB94B,EAAMnB,KACzCmB,MAAOA,EACP6D,IAAK7D,EAAMnB,GACXY,MAAOqgC,GAA8B9/B,EAAML,KAAMwE,GACjD5D,SAAUJ,EAAaH,EAAMnB,UCgBjD,GA/DiF,EAC7EoiB,+BACAif,wB,UAEA,MAAM,cAAE97B,IAAkB,WACpB,YAAEyS,GAAgBF,MAClB,SAAExS,IAAa,WAEf,aACFi7B,EAAY,YACZnF,EAAW,cACXze,EAAa,cACbue,EAAa,cACbsF,EAAa,UACblE,EAAS,SACTC,GACAvkB,EAAYqjB,gBAEViG,EAAW,GAAGC,OAAOjF,MAAciF,OAAOhF,KAE1CiF,EAAiBhB,IAAkBtB,GAAeO,SAAWc,EAAee,EAC5EG,EAAqD,QAAhC,EAAAl8B,EAAc0D,KAAKyhB,qBAAa,eAAE+W,mBACvDC,EAA0C,QAA9B,EAAAn8B,EAAc0D,KAAKC,mBAAW,eAAE2N,aAAa6qB,UACzDC,EAAqC,QAA5B,EAAAp8B,EAAc0D,KAAKmc,iBAAS,eAAEqM,SAASkQ,OAEhDC,EAA4Bxf,EAC5B,6CACA,oCAGAyf,EADc,IAAIC,KAAKA,KAAKC,OAAOC,SAASn1B,MAAM,EAAG,IACzBpC,MAAM,KAAKw3B,UAAU31B,KAAK,KAEtD41B,EAA8B,CAChC9G,YAAamG,OAAOnG,GAAapnB,cACjC2I,cAAe4kB,OAAO5kB,GACtBwlB,YAAaN,EACbL,eAAgBD,OAAOC,GACvBtG,cAAeqG,OAAOrG,GACtBuG,mBAAoB,GAAGE,GAAU,KAAKF,GAAsB,KAC5DC,UAAWH,OAAOG,IAGhBU,EAAc98B,EAASoB,UAAUk7B,EAA2BM,IAElE,IAAAnyB,YAAU,KACNsxB,EAAkBe,KACnB,CAACA,EAAaf,IAMjB,OACI,uBAAK9iC,UAAU,eAAc,YAAW,gBACpC,gBAAC,GAAiB,CACd4M,aAAci3B,EACdthC,KAAK,eACLY,SATUlB,IAClBwX,EAAY8F,cAAc,eAAgBtd,QC+FlD,GAvIiF,EAC7EqO,SACAwyB,wBAEA,MAAOgB,EAAaC,IAAkB,IAAAjpB,WAAS,IACzC,cAAE9T,IAAkB,WACpB,YAAEyS,GAAgBF,MAClB,cAAEoO,EAAa,cAAExE,EAAa,cAAE2Z,EAAa,cAAEvd,GAAkB9F,GACjE,mBACF6H,EAAkB,kBAClBwL,EAAiB,uBACjBlJ,EAAsB,uBACtB4H,EAAsB,6BACtB3H,EAA4B,6BAC5Ba,EAA4B,0BAC5BoK,EAAyB,wBACzB/B,GACA,GAA2Bzc,IACzB,yBAAEwxB,EAAwB,oBAAEW,GAAwB,GAA0BnyB,IAwBpF,IAAAkB,YAAU,KAtBc,MACpB,MAAM,UAAEusB,EAAS,SAAEC,GAAah3B,EAAc0D,KAAK4wB,qBAAuB,CAAC,EAErE0I,EAAoB,CACtB/B,cAAetB,GAAeM,SAC9BpE,YAAa+D,GAAaE,QAC1B1iB,cAAe,GACfue,cAAe,GACfqF,aAAc,GACdjE,UAAWA,GAAa,GACxBC,SAAUA,GAAY,GACtB3Q,sBAAsB,EACtB4W,8BAA8B,EAC9BjrB,cAAc8T,aAAiB,EAAjBA,EAAmB/T,cAAe,GAChDmrB,cAAc,GAGlB,IAAK,MAAOz9B,EAAKxE,KAAUmN,OAAO+0B,QAAQH,GACtCzkB,EAAc9Y,EAAKxE,IAKvBmiC,KACD,CAACtX,aAAiB,EAAjBA,EAAmB/T,cAEvB,MAAMokB,GACDzY,GAAgCoK,GAA6B/B,EAC5DsX,EAAgClH,GAAkB2G,IAAgB/W,EA0CxE,OAxCA,IAAAvb,YAAU,KACN,GAAI2rB,EAAgB,CACC,MAAY,iDACzB,MAAM4E,EAAyBjF,IACzBzc,QAAgByhB,EAAyBC,IAE1C1hB,GAAW8C,EAAc,iBAC1B5D,EAAc,gBAAgB,GAGlCwkB,EAAe1jB,EACnB,IAEKikB,EACT,MACI7B,MAEL,CACC3F,EACAvd,EACAwkB,EACA5G,EACA2E,EACAW,KAGJ,IAAAjxB,YAAU,KACN,MAAM+yB,EAAuCphB,EAAc,gBAU3DwE,EAAcrX,IAJc6sB,IAJapQ,IAA4B+W,GAEjEO,IAAkCE,MAOvC,CAAC5c,EAAexE,EAAe2gB,EAAaxzB,EAAQ+zB,IAGnD,uBAAKrkC,UAAU,oBAAmB,YAAW,qBACxC0kB,GACG,uBAAK1kB,UAAU,iCACX,gBAAC,GAAyB,CACtBqY,YAAaiJ,EACb3C,mBAAoBiF,EACpBhF,mBAAoB4M,EACpB9Q,mBAAoBoS,KAK/BC,GACG,yBACI,8BACI,gBAAC3nB,EAAA,EAAgB,CAAC3D,GAAG,yEAGzB,2BAEA,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,mEAI5B07B,GAAkB,gBAAC,GAAsB,MAEzCtZ,GACG,gBAAC,GAAuB,CACpB7K,aAAc8T,aAAiB,EAAjBA,EAAmB/T,YACjCV,YAAaiJ,EACb7B,qBAAmB,IAI1B4kB,GACG,gBAAC,GAAuB,CACpBxgB,6BAA8BA,EAC9Bif,kBAAmBA,MCxCvC,IAAe,EAAA3a,GAAA,IAhG0D,EACrE7X,SACA7F,kBACAzD,gBACAuK,mBACAkI,kBAEA,MAAM+qB,GAAwB,IAAApc,QAAO,KAKrC,IAAA5W,YAAU,MACuC,iDACzC,UACU/G,EAAgBgH,kBAAkB,CACpC3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,GACjBgjC,aAAc,CACVC,eAAgB,IAAMF,EAAsB3b,UAGxD,CAAE,MAAO3f,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAIO,MAC4C,iDAC3C,UACUuB,EAAgBoH,oBAAoB,CACtC/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,OAIL,CAACuB,EAAiB6F,EAAOsH,QAAStH,EAAO7O,GAAI8P,KAEhD,IAAAC,YAAU,KACN,MAUM,QAAEsW,GAAY9gB,EAAc0D,KAAKmd,eAAiB,CAAC,GAE1BC,GAAWxX,EAAOlF,OAAO2c,oBAZb,iDACvC,UACUtd,EAAgBsZ,iBAC1B,CAAE,MAAO7a,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,MASD,IAEH,MAAMZ,EACFtB,EAAcC,SAASya,wBACvB1a,EAAcC,SAAS8iB,uBAAuBzZ,EAAO7O,IAEnDuoB,EAAmB,CACrBC,YAAaxQ,EAAYwQ,cACzB5iB,aAAcoS,EAAYpS,cAG9B,OACI,gBAACuS,EAAA,GAAYF,SAAQ,CAACzX,MAAO+nB,GACzB,gBAACnI,GAAA,EAAgBnI,SAAQ,CAACzX,MAAO,CAAE+E,gBAAeyD,oBAC9C,gBAACyf,GAAA,EAAc,CAACzf,gBAAiBA,GAC7B,gBAAC6O,GAAmBI,SAAQ,CAACzX,MAAO,CAAEwX,gBAClC,gBAACqG,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,gBAAC,GAAuB,CACpBgI,OAAQA,EACRwyB,kBA9ED6B,IACvBH,EAAsB3b,QAAU8b,YAyFpC,CAAC,CAAEljC,GAAI,kBCpFX,GAlBiG,EAC7F22B,iCAEA,IAAA5mB,YAAU,KACmC,mBAA9B4mB,GACPA,EAA0B,2CAE/B,CAACA,IAGA,uBACIp4B,UAAU,uCAAsC,YACtC,uCACVyB,GAAG,0CCWf,MAmDA,GAjDI,EAAG0B,WAAUygB,yBAAwBlJ,yBACrC,MAAMvG,EA1BV,SAAmCtS,GAC/B,OAAQA,EAAK4T,eACT,IAAK,OACL,IAAK,mBACD,MAAO,mBAEX,IAAK,SACD,MAAO,cAEX,IAAK,cACD,MAAO,aAEX,QACI,OAAO5T,EAEnB,CAWqB,CAA0B6Y,EAAmBtB,OAAO3D,cAYrE,OACI,uBACIzV,UAAU,gCAA+B,YAC/B,sCAEV,2BACI,uBAAKA,UAAU,yCACX,gBAAC,GAAc,CAACmU,SAAUA,IAE1B,uBACInU,UAAU,wBAAuB,YACvB,uCAGV,4B,QAAoC0a,EAAmBO,SAG/D,uBAAKjb,UAAU,0CACX,gBAACq4B,GAAA,EAA4B,QAIrC,uBAAKr4B,UAAU,+CACX,gBAAC,MAAM,CACH0E,QAlCK,KAAY,iDAC7B,GAAwB,mBAAbvB,EAAyB,CAChC,MAAMm1B,QAAen1B,IAEjBm1B,GACA1U,EAAuB0U,EAE/B,CACJ,IA2BgBxsB,KAAM,MAAWysB,KACjBtzB,OAAO,uCACPsD,QAAS,MAAcC,WAEvB,gBAACpD,EAAA,EAAgB,CAAC3D,GAAG,6BC/BzC,GAlC6E,EACzE22B,4BACAI,6BAEA,MAAM,YAAEngB,EAAW,uBAAEuL,EAAsB,mBAAElJ,GCXF,MAC3C,MAAOA,EAAoB+d,IAAyB,IAAA3d,aAE9C,2BAAE4d,IAA+B,UAAc1xB,cAAc0D,KAC7DiuB,EAA0BD,IAC1BE,GAAyB,QAAyBD,GAClDA,EACA,CAAC,GAED,YAAElf,GAAgBF,KAOxB,MAAO,CACHlB,YAAaugB,EAAuBvgB,aAAe,GACnDuL,uBAP4BzR,IAC5BsmB,EAAsBtmB,GACtBsH,EAAY8F,cAAc,eAAgBpN,EAAW4G,cAMrD2B,uBDPAkqB,GAEE9L,EAA4BzgB,EAAY9R,OAAS,EAQvD,OANA,IAAAiL,YAAU,MACDkJ,GAAsBrC,EAAY9R,OAAS,GAC5Cqd,EAAuBvL,EAAY,MAExC,CAACA,EAAaqC,IAGb,uBAAK1a,UAAU,0CAA0CyB,GAAG,sBACvDq3B,GACG,gBAAC,GAAgC,CAC7BlV,uBAAwBA,EACxBzgB,SAAUq1B,EACV9d,mBAAoBA,GAAsBrC,EAAY,MAI5DygB,GACE,gBAAC,GAA8B,CAC3BV,0BAA2BA,MEtC/C,ICyGe,EAAAjQ,GAAA,IArF+D,EAC1E7X,SACA7F,kBACAzD,gBACAuK,mBACAkI,kB,QAEA,MAAMorB,GAA6B,IAAAzc,QAAsC,CAAC,IAEpE,uBAAE2B,EAAsB,sBAAEiP,GAA0BhyB,EAAcC,UAuCxE,IAAAuK,YAAU,MArCmC,iDACzC,UACU/G,EAAgBgH,kBAAkB,CACpC5C,SAAUyB,EAAO7O,GACjBqjC,kBAAmB,CACf9W,OAASoK,IACLyM,EAA2Bhc,QAAQuP,0BAC/BA,GAERj1B,SAAWq1B,IACPqM,EAA2Bhc,QAAQ2P,uBAC/BA,GAERvK,QAAU/kB,IACNqI,EAAiBrI,MAIjC,CAAE,MAAOA,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAiBW,MAfoC,iDAC3C,UACUuB,EAAgBoH,oBAAoB,CACtChD,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,OAQG,IAEH,MAAMZ,EAAY0wB,KAA2BjP,EAAuBzZ,EAAO7O,IAErEuoB,EAAmB,CACrBC,YAAaxQ,EAAYwQ,cACzB5iB,aAAcoS,EAAYpS,cAG9B,OACI,gBAACuS,EAAA,GAAYF,SAAQ,CAACzX,MAAO+nB,GACzB,gBAACnI,GAAA,EAAgBnI,SAAQ,CAACzX,MAAO,CAAE+E,gBAAeyD,oBAC9C,gBAACyf,GAAA,EAAc,CAACzf,gBAAiBA,GAC7B,gBAAC6O,GAAmBI,SAAQ,CAACzX,MAAO,CAAEwX,gBAClC,gBAACqG,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,gBAAC,GAAqB,CAClB8vB,0BACuC,QAAnC,EAAAyM,aAA0B,EAA1BA,EAA4Bhc,eAAO,eAAEuP,0BAEzCI,uBACsC,QAAlC,EAAAqM,EAA2Bhc,eAAO,eAAE2P,gCAapE,CAAC,CAAE/2B,GAAI,kCCtCX,IAAe,EAAA0mB,GAAA,IA/D6C,EACxD7X,SACA7F,kBACAgP,cACA1S,WACAwK,uBAEA,MAAM1C,EAAWyB,EAAO7O,GAqDxB,OARA,IAAA+P,YAAU,MA3C4B,iDAClC,UACU/G,EAAgBgH,kBAAkB,CACpC3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,GACjBsjC,sBAAuB,CACnBlX,UAAW,6BACXmX,WAAYj+B,EAASoB,UAAU,8BAA+B,CAC1D88B,UAAWp2B,IAEfkf,eAAgB,KACZtU,EAAYiO,wBAAwBpX,GAAQ,IAEhDxJ,WAAY,KACR2S,EAAYpS,cAAa,GACzBoS,EAAY3S,cAEhBmnB,QAAU/kB,IACNuQ,EAAYkO,cAAcrX,GAAQ,GAClCiB,EAAiBrI,MAIjC,CAAE,MAAOA,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAkBW,MAhB6B,iDACpC,UACUuB,EAAgBoH,oBAAoB,CACtC/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,OAQG,IAEI,mCAKP,CAAC,CAAE0O,QAAS,2BCnBhB,IAAe,EAAAuQ,GAAA,IA5C8D,I,IAAA,gBACzE1d,GAAe,EACZnI,GAAI,cAFkE,qBAIzE,MAAM4iC,GAAyC,IAAArkC,cAC1CskC,IACG,MAAM,iBAAE5zB,EAAgB,SAAExK,EAAQ,OAAEuJ,EAAM,YAAEmJ,GAAgBnX,EAE5D,OAAOmI,EAAgBgH,kBAAkB,OAAD,wBACjC0zB,GAAc,CACjBpzB,UAAW,CACPC,YAAa,6BACblL,WAAY,KACR2S,EAAYpS,cAAa,GACzBoS,EAAY3S,cAEhBmnB,QAAU/kB,IACgB,wBAAlBA,EAAMjB,QACNsJ,SAAAA,EACI,IAAIvJ,MAAMjB,EAASoB,UAAU,wCAGjCoJ,SAAAA,EAAmBrI,IAG3B6kB,eAAgB,KACZtU,EAAYiO,wBAAwBpX,GAAQ,UAK5D,CAAChO,EAAMmI,IAGX,OACI,gBAACkhB,GAAsB,iBACfrpB,EAAI,CACRmI,gBAAiBA,EACjBoH,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmByzB,OAO3B,CAAC,CAAEzjC,GAAI,qBCxDX,IAAK,IAAL,SAAK2O,GACD,sBACA,4BACA,2BACA,wBACA,gCACA,0BACA,6BACA,kBACA,+BACA,6BACA,8BACH,CAZD,CAAK,QAAiB,KActB,YCAe,SAAS,GACpBrJ,GAEA,OAAQuJ,IACJ,IAAI/N,EAkBL,SACHwE,GAEA,OAAQuJ,IACJ,MAAMC,EAA0C,CAC5C,CAAC,KAAgBE,QAAS1J,EAASoB,UAAU,4BAC7C,CAAC,KAAgBuI,UAAW3J,EAASoB,UAAU,8BAC/C,CAAC,KAAgBwI,WAAY5J,EAASoB,UAAU,4BAChD,CAAC,KAAgByI,MAAO7J,EAASoB,UAAU,0BAC3C,CAAC,KAAgB0I,UAAW9J,EAASoB,UAAU,8BAC/C,CAAC,GAAkB2I,WAAY/J,EAASoB,UAAU,gCAClD,CAAC,KAAgB4I,QAAShK,EAASoB,UAAU,4BAC7C,CAAC,GAAkB6I,QAASjK,EAASoB,UAAU,4BAC/C,CAAC,GAAkB8I,cAAelK,EAASoB,UAAU,mCACrD,CAAC,GAAkB+I,cAAenK,EAASoB,UAAU,0BAGzD,OAAOoI,EAAaD,EAAO7O,KAAO8O,EAAaD,EAAOA,QAE9D,CArCmB,CAA+BvJ,EAA/B,CAAyCuJ,GAcpD,OAZK/N,GAAQ+N,EAAOA,SAAW,GAAkBc,cAC7C7O,EAAO+N,EAAOlF,OAAOjG,aAGpB5C,IACDA,GAAO,IAAA8O,aACH,IAAAC,KAAIhB,EAAQ,gEACRA,EAAOA,QACPA,EAAO7O,KAIZc,EAEf,CCtBA,MAoBA,GApByD,EAAG+N,SAAQkc,gBAChE,MAAM,SAAEzlB,IAAa,UAErB,OACI,uBAAK/G,UAAU,gBACX,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,kCAAmC,IAGpD,qBAAGgD,KAAK,IAAIC,SAAS,EAAAC,EAAA,GAAe6nB,IAChC,gBAACpnB,EAAA,EAAgB,CACbsF,KAAM,CAAE06B,aAAc,GAAqBr+B,EAArB,CAA+BuJ,IACrD7O,GAAG,4BAGb,IACF,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,mCChB3B4jC,GAAoB,CAACC,EAAc,GAAIC,EAAU,SACnDD,EAAYz3B,SAAS,KAAOy3B,EAAc,GAAGC,KAAWD,IAuE5D,GAjCoC56B,IAChC,GArCqC,CACrC8yB,IAEA,GAAsB,iBAAXA,GAAkC,OAAXA,EAAiB,CAC/C,GACI,qBAAsBA,GACa,iBAA5BA,EAAOgI,kBACc,OAA5BhI,EAAOgI,kBACP,WAAYhI,EAAOgI,kBACnB,SAAUhI,EAAOgI,iBAEjB,OAAO,EAGX,GACI,aAAchI,GACa,iBAApBA,EAAOiI,UACM,OAApBjI,EAAOiI,UACP,gBAAiBjI,EAAOiI,UACxB,aAAcjI,EAAOiI,UACrB,aAAcjI,EAAOiI,UACrB,YAAajI,EAAOiI,SAEpB,OAAO,EAGX,GAAI,eAAgBjI,GAAU,gBAAiBA,GAAU,YAAaA,EAClE,OAAO,CAEf,CAEA,OAAO,GAMHkI,CAAiCh7B,GAAO,CACxC,GAAIA,EAAK86B,iBACL,MAAO,CACHF,YAAaD,GAAkB36B,EAAK86B,iBAAiB92B,QACrDyF,SAAUzJ,EAAK86B,iBAAiB3jC,MAIxC,GAAI6I,EAAK+6B,SACL,MAAO,CACHH,YAAaD,GAAkB36B,EAAK+6B,SAASH,aAC7CnxB,SAAUzJ,EAAK+6B,SAAStxB,SACxBgM,YAAazV,EAAK+6B,SAASE,SAC3BvlB,WAAY1V,EAAK+6B,SAASG,SAIlC,GAAIl7B,EAAKm7B,WAAY,CACjB,MAAM,KAAEp3B,IAAS,IAAAC,QAAOhE,EAAKm7B,YAE7B,MAAO,CACHP,YAAaD,GAAkB36B,EAAK46B,aACpCnlB,YAAazV,EAAKo7B,SAAWp7B,EAAKo7B,QAAQC,OAAO,EAAG,GACpD3lB,WAAY1V,EAAKo7B,SAAWp7B,EAAKo7B,QAAQC,OAAO,EAAG,GACnD5xB,SAAU1F,EAAOA,EAAK6R,SAAW,GAEzC,CACJ,GC1BJ,MAAM0lB,WAA2C,EAAAzqB,UAAjD,c,oBAqJY,KAAA0qB,cAA4B,KAAY,+CAC5C,MAAM,gBAAEhe,EAAe,OAAE3X,EAAM,UAAEkc,EAAY,EAAA5oB,KAAI,eAAEsiC,EAAiB,EAAAtiC,MAAS+X,KAAKja,MAElF,UACUumB,EAAgB,CAAEpZ,SAAUyB,EAAO7O,KACzC+qB,IACAP,OAAOC,SAASF,QACpB,CAAE,MAAO9iB,GACLg9B,EAAeh9B,EACnB,CACJ,GAyBJ,CAvLU,iBAAA6S,G,sDACF,MAAM,kBAAEtK,EAAiB,OAAEnB,EAAM,iBAAEiB,EAAmB,EAAA3N,MAAS+X,KAAKja,MAEpEia,KAAKwqB,eAEL,UACU10B,EAAkB,CACpB3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEM,oBAAA8S,G,sDACF,MAAM,oBACFnK,EACA4H,aAAa,cAAEkO,GAAe,OAC9BrX,EAAM,iBACNiB,EAAmB,EAAA3N,MACnB+X,KAAKja,MAETimB,EAAcrX,GAAQ,GAEtB,UACUuB,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEA,kBAAAgW,CACIC,GAEA,MAAM,OAAE7O,GAAWqL,KAAKja,OAClB,sBAAE0iB,GAA0BzI,KAAKyqB,4CAC/B91B,OAAQ+1B,EAAYjiB,sBAAuBkiB,GAA8BnnB,EAG7E7O,EAAO8E,qBAAuBixB,EAAWjxB,oBACzCgP,IAA0BkiB,GAE1B3qB,KAAKwqB,cAEb,CAEA,MAAA/iC,GACI,MAAM,eAAEohB,GAAiB,GAAU7I,KAAKja,OAClC,kBAAE6kC,GAAsB5qB,KAAKyqB,2CAEnC,OACI,gBAACtmB,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWkc,GAC9C,uBAAKxkB,UAAU,6CACVumC,EAAoB5qB,KAAK6qB,oBAAsB7qB,KAAK8qB,oBAIrE,CAEQ,gBAAAA,GACJ,MAAM,SAAEvgB,EAAQ,sBAAEwgB,EAAqB,kBAAEC,EAAiB,OAAEr2B,EAAM,SAAEvJ,GAAa4U,KAAKja,MAEtF,OAEI,qBAAG1B,UAAW0mC,EAAuBjiC,KAAK,IAAIhD,GAAIykB,EAAUxhB,SAAS,EAAAC,EAAA,MAChEgiC,GACG,gBAACvhC,EAAA,EAAgB,CACbsF,KAAM,CAAE06B,aAAc,GAAqBr+B,EAArB,CAA+BuJ,IACrD7O,GAAG,0BAKvB,CAEQ,iBAAA+kC,GACJ,MAAM,SAAEtgB,EAAQ,oBAAE0gB,EAAmB,gBAAEC,EAAe,qBAAE5gB,EAAoB,OAAE3V,GAC1EqL,KAAKja,OACH,YAAE4jC,EAAW,SAAEhQ,EAAQ,SAAEnhB,EAAQ,YAAEgM,EAAW,WAAEC,GAClDzE,KAAKyqB,2CAET,OACI,kCACO9Q,GACC,iCAAa,mCACT,8BACI,gBAAClwB,EAAA,EAAgB,CAAC3D,GAAG,mC,KACf,IACT6zB,KAINgQ,KAAiBnxB,GAChB,iCAAa,mCACT,8BAAS,GAAGA,M,IAAuBmxB,KAIxCnlB,KAAiBC,GAChB,iCAAa,qCACT,8BACI,gBAAChb,EAAA,EAAgB,CAAC3D,GAAG,8C,KACf,IACT,GAAG0e,KAAeC,OAIxB6F,GACC,yBAGQ,qBACIjmB,UAAW4mC,EACXniC,KAAK,IACLhD,GAAIykB,EACJxhB,SAAS,EAAAC,EAAA,MAERkiC,GACG,gBAACzhC,EAAA,EAAgB,CAAC3D,GAAG,0CAOzC,gBAAC,GAAW,CAAC6O,OAAQA,EAAQkc,UAAW7Q,KAAKsqB,gBAGzD,CAEQ,YAAAE,GACJ,MACI1sB,aAAa,cAAEkO,GAAe,OAC9BrX,GACAqL,KAAKja,OACH,sBAAE0iB,GAA0BzI,KAAKyqB,2CAEnC,GAA2B91B,EAAO8E,sBAAwBgP,EAC1DuD,EAAcrX,GAAQ,GAEtBqX,EAAcrX,GAAQ,EAE9B,CAcQ,wCAAA81B,GACJ,MAAM,cAAEp/B,EAAa,OAAEsJ,GAAWqL,KAAKja,OAEnCgJ,MAAM,kBAAE4wB,EAAiB,YAAEnP,EAAW,sBAAE/H,IACxCpd,EACE8/B,EAAiBxL,IACjBlP,EAAWD,IAEjB,IAAK2a,IAAmB1a,EACpB,MAAM,IAAIpkB,MAAM,0BAGpB,MAAM++B,EAAoB,GAA2Bz2B,EAAO8E,oBAE5D,OAAO,OAAP,wBACO2xB,GAAiB,CAEpBzR,SACIyR,GAAqB,CAACD,EAAe/I,UAAW+I,EAAe9I,UAAUjwB,KAAK,KAClFqW,sBAAuBA,IACvBmiB,mBAAmB,IAAAla,MAAKD,EAASE,SAAU,CAAEC,WAAYjc,EAAO7O,MAExE,EAGJ,YC5KA,IAAe,EAAA0mB,GAAA,IAvD2D,I,IAAA,gBACtE1d,EAAe,OACf6F,EAAM,iBACNiB,GAAgB,EACbjP,GAAI,cAJ+D,iDAMtE,MAAM0kC,GAAgC,IAAAnmC,cACjCskC,IACG,MAmBM8B,EAAgB,OAAH,wBACZ9B,GAAc,CACjB+B,sBAAuB,CACnBjZ,QAAS1c,EACT+uB,gBAAiB,KAAM6G,OAvBIhe,EAuBgB8d,GAvBsB,iDACrE,UACUx8B,EAAgBoH,oBAAoB,CACtC/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,WAGfgJ,EAAgBgH,kBAAkB,OAAD,wBAChC0X,GAAO,CACVra,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,KAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAjB4B,IAAOigB,MA2BnC,OAAO1e,EAAgBgH,kBAAkBw1B,KAE7C,CAACx8B,EAAiB6F,EAAQiB,IAG9B,OACI,gBAAC,GAAkC,iBAC3BjP,EAAI,CACR4jB,SAAS,2BACTrU,oBAAqBpH,EAAgBoH,oBACrC+0B,oBAAoB,WACpBn1B,kBAAmBu1B,EACnB12B,OAAQA,EACR2V,sBAAoB,EACpBygB,sBAAsB,WACtBze,gBAAiBxd,EAAgBwd,qBAOzC,CAAC,CAAExmB,GAAI,KAAgB2lC,yBChDrBC,GAAgD3lC,IAClD,MAAM,oBAAEqD,EAAmB,aAAEqsB,EAAY,QAAEkW,EAAO,KAAE/kC,GAASb,EAEvDgB,GAAc,IAAA7B,cAChB,EAAG+B,WACC,gBAACsF,GAAA,EAAS,iBAAKtF,EAAK,CAAEwuB,aAAcA,EAAc3vB,GAAImB,EAAML,SAEhE,CAAC6uB,IAGCxkB,GAAe,IAAAI,UAAQ,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAI6lC,KAAa,CAACA,IAEvE,OACI,gBAAC,KAAS,CACNviC,oBAAqBA,EACrB4D,MAAOjG,EACPkK,aAAcA,EACdrK,KAAMA,KAuBlB,IAAe,IAAA1C,OAlB8C,EACzDkF,sBACAqsB,eACAkW,UACA/kC,UAEA,gBAAC,KAAQ,KACL,uBAAKvC,UAAU,iBACX,gBAACqnC,GAAS,CACNtiC,oBAAqBA,EACrBqsB,aAAcA,EACdkW,QAASA,EACT/kC,KAAMA,QCiETglC,GAAoD,I,IAC7D,IAAA3kC,OAAA,MAASX,GAAK,EAAKulC,GAAS,cAArB,YADsD,KAE7DloB,EAAI,eACJmoB,GAAc,EAEd,MAAM9lC,GAAQ,IAAAd,cAAY,IAAM,yCAAW2mC,EAAS,CAAE3lC,KAAK,aAAa,CAAC2lC,IAUzE,OARA,IAAAh2B,YAAU,KACFvP,IAAUwlC,GAITnoB,EAAKC,cAAcioB,EAAUjlC,KAAMklC,KACzC,CAACxlC,EAAOqd,EAAMmoB,EAAgBD,EAAUjlC,OAEpC,gBAACZ,EAAK,OAGJ+lC,GAAsD,I,IAAA,OAAErpB,GAAM,EAAKspB,GAAS,cAAtB,YAC/D,MAAM,IAAErJ,EAAG,KAAE/7B,GAAS8b,EAEtB,OACI,mDAAkBigB,EAAKz8B,KAAK,UAAa8lC,GACrC,uBAAK3nC,UAAU,4BAA4B,GAAGs+B,OAAS/7B,OAK7DqlC,GAAyD,EAAGH,oBACzDA,EAcD,gBAACC,GAAY,CACT1nC,UAAU,mFACVqe,OAAQopB,IAdR,0BACIznC,UAAU,mFACV6B,KAAK,UAEL,uBAAK7B,UAAU,6DACX,uBAAKA,UAAU,yBAAuB,eAqF7C6nC,GAAkB,EAAGv3B,YAC9B,gBAAC,GAAa,CACVvL,oBAAoB,yBACpBqsB,aAAa,cACbkW,QAAS,sCAAsCh3B,EAAO7O,KACtDc,KAAK,eAIb,GAnBiE,CAC7DulC,MA9DsD,IAElD,gCACI,gBAAC,GAAa,CACV/iC,oBAAoB,6BACpBqsB,aAAa,MACbkW,QAAQ,kDACR/kC,KAAK,mBAET,gBAAC,GAAa,CACVwC,oBAAoB,4BACpBqsB,aAAa,QACbkW,QAAQ,iDACR/kC,KAAK,mBAkDjBwlC,KAtLqD,EAAGz3B,SAAQ03B,aAChE,MAAMC,GAAiB,IAAAznC,YAAW8Y,IAC5B4uB,EAAyB53B,EAAO8E,mBAAmB+yB,aAYzD,OAVA,IAAA32B,YAAU,KACNy2B,SAAAA,EAAgBxuB,YAAYkO,cAAcrX,GAAQ,GAE3C,IAAM23B,aAAc,EAAdA,EAAgBxuB,YAAYkO,cAAcrX,GAAQ,KAChE,CAAC23B,EAAgB33B,IAOhB,gCACI,uBAAKtQ,UAAU,qCACX,uBAAKA,UAAU,mCACX,sBAAIA,UAAU,0BACV,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,6CAEzB,sBAAIzB,UAAU,0BAA0BkoC,EAASzK,yBACjD,qBAAGz9B,UAAU,yBAAyBkoC,EAASE,qBAC/C,qBAAGpoC,UAAU,yBAAyB,GAAGkoC,EAASG,0BAA0BH,EAASI,oBACrF,qBAAGtoC,UAAU,yBAAyBkoC,EAASK,qBAC/C,2BACA,qBAAGvoC,UAAU,yBACT,gBAACoF,EAAA,EAAgB,CACbsF,KAAM,CAAE89B,WAAYN,EAASO,wBAC7BhnC,GAAG,2CAIf,uBAAKzB,UAAU,mCACX,sBAAIA,UAAU,0BACV,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,2CAEzB,sBAAIzB,UAAU,0BAA0B,GAAGgoC,EAAOjK,aAAaiK,EAAOhK,YACtE,qBAAGh+B,UAAU,yBAAyBgoC,EAAOU,UAC7C,qBAAG1oC,UAAU,yBAAyB,GAAGgoC,EAAOW,cAAcX,EAAOY,SAASZ,EAAOa,uBACrF,qBAAG7oC,UAAU,yBAAyBgoC,EAAOc,eAGrD,qBAAG9oC,UAAU,yBACT,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,2CAEzB,2BAEA,gBAAC,GAAa,CACVsD,oBAAoB,mBACpBqsB,aAAa,OACbkW,QAAQ,8BACR/kC,KAAK,SAET,gBAAC,GAAiB,CACdqK,aACI,gBAACxH,EAAA,EAAgB,CACbsF,KAAM,CAAE2zB,aAAc6J,EAASzK,yBAC/Bh8B,GAAG,gDAGXc,KAAK,cAELY,SArDZ,SAA4B4lC,GACxBd,SAAAA,EAAgBxuB,YAAYkO,cAAcrX,GAASy4B,EACvD,MA2KAvf,MA7CsD,EAAGlZ,aACzD,MAAOm3B,EAAgBuB,IAAqB,IAAAluB,aACrCmuB,EAAUC,IAAe,IAAApuB,UAAiB,IAC3C1X,GAAS,IAAAvC,cACVa,GAAsB,gBAAC6lC,GAAW,iBAAK7lC,EAAK,CAAE+lC,eAAgBwB,MAC/D,CAACA,IAGCE,EAAoB74B,EAAO8E,mBAAmBuoB,aAE9C5gB,EAAc,EAAGqsB,oBAEnB,MAAMC,EAAkBF,EAAQ30B,MAAK,EAAG8pB,SAAUA,IAAQ8K,EAAcE,QAAQhL,MAE3E+K,IAILL,EAAkBK,GAClBH,EAAYG,EAAgB/K,OAG1BiL,EACF,sBAAIvpC,UAAU,iFACTmpC,EAAQ3iC,KAAK6X,GACV,sBAAIre,UAAU,6CAA6CyG,IAAK4X,EAAOigB,KACnE,gBAACoJ,GAAY,CAACrpB,OAAQA,EAAQ3Z,QAASqY,QAMvD,OACI,gCACI,gBAAC,GAAe,CAACK,SAAUmsB,GACvB,gBAAC3B,GAAc,CAACH,eAAgBA,KAEpC,gBAAC,KAAS,CAAC9+B,MAAOvF,EAAQb,KAAK,WCnN9BinC,GAAiC,CAAC,QAAS,OAAQ,OAAQ,OAAQ,SAAU,SAMpFC,GAEF,CACAC,KAAO3iC,IAA8B,CACjC4iC,YAAY,UACPvgC,SAASrC,EAASoB,UAAU,oDAC5B5B,OAAO,GAAIQ,EAASoB,UAAU,sDAEvCyhC,KAAO7iC,IAA8B,CACjC4iC,YAAY,UACPE,cACA9Y,IAAI,GAAIhqB,EAASoB,UAAU,sDAEpC2hC,OAAS/iC,IAA8B,CACnC4iC,YAAY,UACPvgC,SAASrC,EAASoB,UAAU,sDAC5Bu0B,IAAI,GAAI31B,EAASoB,UAAU,sDAC3B4oB,IAAI,GAAIhqB,EAASoB,UAAU,wDAEpC4/B,KAAOhhC,IAA8B,CACjC+2B,MAAM,UAAS10B,SAASrC,EAASoB,UAAU,yCAC3C4hC,aAAa,UAAU3gC,SAASrC,EAASoB,UAAU,oCAEvDqhB,MAAQziB,IAA8B,CAClCu3B,KAAK,UAASl1B,SAASrC,EAASoB,UAAU,iCAE9C2/B,MAAQ/gC,IAA8B,CAClCijC,gBAAgB,UACX5gC,SAASrC,EAASoB,UAAU,4DAC5B8xB,QACG,IAAI7rB,OAAO,aACXrH,EAASoB,UAAU,4DAE3B8hC,eAAe,UACV7gC,SAASrC,EAASoB,UAAU,2DAC5B+hC,MAAMnjC,EAASoB,UAAU,8DAItC,IAAe,IAAAiqB,UAAQ,UAAyC,cAC5DzX,EAAa,SACb5T,IAQA,OAAO,QAAO0iC,GAAkB9uB,GAAe5T,GACnD,ICFA,IAAe,EAAAohB,GAAA,IA5CgE,I,OAAA,SAC3EphB,EAAQ,OACRuJ,EAAM,gBACN7F,EAAe,cACfzD,GAAa,EACV1E,GAAI,cALoE,yDAO3E,MAAM,UAAEqI,GAAc3D,EAAc0D,KAC9By/B,EACS,QAAX,EAAAx/B,WAAW,eAAEa,iBAAiB4+B,SAAS,gDAErCC,EAAuB/5B,EAAO7O,GAC9B6oC,EACFD,KAAwB,GAClB,GAA4BA,GAC5BxC,GAEJf,EAAiB9/B,EAAc0D,KAAK4wB,oBAE1C,OAtBgCzsB,EAuBAw7B,GAtBzBj7B,OAAOD,OAAOq6B,IAAgC37B,SAASgB,IAuBhC,UAAzBw7B,GAAoCF,EAE9B,KAIP,gBAAC,GAAgC,eAC7B1/B,gBAAiBA,EACjBzD,cAAeA,EACf6K,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmBhH,EAAgBgH,kBACnC1K,SAAUA,EACVuJ,OAAQA,GACJhO,EAAI,CACR6xB,aAAc,gBAACmW,EAAyB,CAACtC,OAAQlB,EAAiBx2B,OAAQA,IAC1EmkB,qBAAsB,GAAgC,CAClD9Z,cAAe0vB,EACftjC,gBAzCmB,IAAC8H,IAiDhC,CACI,CAAE+I,QAAS,cAAenW,GAAI,SAC9B,CAAEmW,QAAS,cAAenW,GAAI,SAC9B,CAAEmW,QAAS,cAAenW,GAAI,QAC9B,CAAEmW,QAAS,cAAenW,GAAI,UAC9B,CAAEmW,QAAS,cAAenW,GAAI,QAC9B,CAAEmW,QAAS,cAAenW,GAAI,QAC9B,CAAEmW,QAAS,cAAenW,GAAI,SChDtC,IAAe,EAAA0mB,GAAA,IApBuD,I,IAAA,gBAClE1d,EAAe,cACfzD,EAAa,OACbsJ,EAAM,YACNmJ,GAAW,EACRnX,GAAI,cAL2D,4DAOlE,OACI,gBAACqpB,GAAsB,iBACfrpB,EAAI,CACRmI,gBAAiBA,EACjBzD,cAAeA,EACf6K,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmBhH,EAAgBgH,kBACnCnB,OAAQA,EACRmJ,YAAaA,OAOrB,CAAC,CAAE7B,QAAS,cCwHhB,IAAe,EAAAuQ,GAAA,IA5IwD,I,IAAA,gBACnE1d,EAAe,OACf6F,EAAM,iBACNiB,GAAgB,EACbjP,GAAI,cAJ4D,iDAMnE,MAAMioC,GAA6B,IAAA1pC,cAC9BskC,IACG,MAAMgC,EAA6Bhe,IAAsC,iDACrE,UACU1e,EAAgBoH,oBAAoB,CACtC/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,WAGfgJ,EAAgBgH,kBAAkB,OAAD,wBAChC0X,GAAO,CACVra,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,KAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAEMwxB,EAAqB,eACrBuM,EAAgB,OAAH,wBACZ9B,GAAc,CACjB,CAAC,KAAgBqF,kBAAmB,CAChC9P,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgByD,kBAAmB,CAChChQ,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgB0D,uBAAwB,CACrCjQ,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgB2D,cAAe,CAC5BlQ,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgB4D,8BAA+B,CAC5CnQ,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgB6D,oBAAqB,CAClCpQ,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgB8D,yBAA0B,CACvCrQ,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgB+D,iBAAkB,CAC/BtQ,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgBgE,oBAAqB,CAClCvQ,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgBiE,wBAAyB,CACtCxQ,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgBkE,kBAAmB,CAChCzQ,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgBmE,sBAAuB,CACpC1Q,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgBoE,yBAA0B,CACvC3Q,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgBqE,uBAAwB,CACrC5Q,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,IAE/C,CAAC,KAAgBsE,oBAAqB,CAClC7Q,qBACA+P,aAAc,eACdxc,QAAS1c,EACT+uB,gBAAiB,IAAM6G,EAAoBF,MAInD,OAAOx8B,EAAgBgH,kBAAkBw1B,KAE7C,CAACx8B,EAAiB6F,EAAQiB,IAG9B,OACI,gBAAC,GAAkC,iBAC3BjP,EAAI,CACR4jB,SAAS,eACTrU,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmB84B,EACnBj6B,OAAQA,EACR2V,sBAAoB,EACpBgC,gBAAiBxd,EAAgBwd,qBAOzC,CACI,CAAExmB,GAAI,KAAgB+oC,kBACtB,CAAE/oC,GAAI,KAAgBipC,kBACtB,CAAEjpC,GAAI,KAAgBkpC,uBACtB,CAAElpC,GAAI,KAAgBmpC,cACtB,CAAEnpC,GAAI,KAAgBqpC,oBACtB,CAAErpC,GAAI,KAAgBspC,yBACtB,CAAEtpC,GAAI,KAAgBopC,8BACtB,CAAEppC,GAAI,KAAgB2pC,sBACtB,CAAE3pC,GAAI,KAAgBypC,wBACtB,CAAEzpC,GAAI,KAAgB0pC,kBACtB,CAAE1pC,GAAI,KAAgBupC,iBACtB,CAAEvpC,GAAI,KAAgBwpC,oBACtB,CAAExpC,GAAI,KAAgB4pC,yBACtB,CAAE5pC,GAAI,KAAgB6pC,uBACtB,CAAE7pC,GAAI,KAAgB8pC,sBCqH9B,IAAe,EAAApjB,GAAA,IAjQ8D,EACzE7X,SACA7F,kBACAzD,gBACAyS,cACA1S,WACAwK,uBAEA,MAAO0jB,EAAkB2B,IAAuB,IAAA9b,aAE1C,gBAAEwT,EAAe,cAAE/O,EAAa,aAAElY,EAAY,WAAEP,GAAe2S,EAC/D4a,EAAmC,GAAqCrtB,GACxEse,EACF,GAAuCte,IAEvCoE,QAAQ,SAAE4b,EAAQ,mBAAE0P,IACpBpmB,EACEiiB,EAAqBvL,GAAyB,OAAbA,EACjC6P,EAA2BH,SAAAA,EAE3BI,GAA6C,IAAAj2B,cAC9C0B,GACU,IAAG,IAAAwM,SAAQ,CAACuB,EAAOsH,QAAStH,EAAO7O,KAAKsM,KAAK,QAAQxL,KAEhE,CAAC+N,IAGCymB,GAEkC,IAAAl2B,cAC7B6Z,IAAuB,iDAC1B,MAAMsc,EAAa,CAAC,QAAS,aAAc,WAAY,cACjD3R,IAAiC3K,GACjC4K,EAAmC5K,EAAoBpK,GAEvD8W,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAE3D,IAAI4mB,EAAmB,GAYvB,OAVIxc,EACI0M,EACA8P,EAAmBJ,EAAiB,SAC7BzR,IACP6R,EAAmBJ,EAAiB,aAGxCI,EAAmBJ,EAAiB,YAGjC,CACHK,OAAQzc,EACF,CACI+a,qBACIrO,GAAgC1M,EAC1B,CACI0c,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,SAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,EACVymB,uBACIrQ,GAAkC3K,EAC5B,CACI0c,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,YAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,GAEd,CACI+X,SAAUuL,EACJ,CACI6E,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,eAElC7nB,EACNomB,WAAY,CACR+B,mBAAoBrwB,EAASoB,UACzB,wCAEJ6J,YAAa8kB,EAAiB,YAC9B5E,YAAanrB,EAASoB,UAClB,oDAGRmtB,SAAUuB,EACJ,CACIO,mBAAoBrwB,EAASoB,UACzB,kCAEJ6J,YAAa8kB,EAAiB,gBAElC7nB,EACNsmB,WAAY,CACR6B,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,cAG5CO,OAAQH,EACF,CACII,cAAezB,GAAyBqB,EAAkBF,GAC1D9tB,YAAa2sB,GACTqB,EACAF,EACApB,GAA0B5tB,OAE9BuvB,YAAa1B,GACTqB,EACAF,EACApB,GAA0BS,QAGlC,CAAC,EACPmB,OAAQ,EAAGzc,gBACHka,IAAqBla,GACrB6b,OAAoB3nB,IAG5BwoB,iBAAkB,EAAGtjB,eACjBoL,EAAc,sBAAuBpL,IAEzCujB,QAAS,KACLrwB,GAAa,GACbP,KAEJ6wB,QAAS,EAAG5c,gBACR6b,EAAoB7b,IAExBmT,WAAY,EAAGpmB,SAAS,CAAC,OACrB,IAAA8vB,OAAM9vB,GAAQ,CAAC+vB,EAAc,GAAI9c,K,QAC7B,MAAM+c,EAAW,qBAAqB/c,IAEtCwE,EAAcuY,EAA8B,QAApB,EAAc,QAAd,EAAAD,EAAY,UAAE,eAAEh2B,YAAI,QAAI,IAE5Cg2B,EAAY,IACZvJ,EAAgBwJ,OAKpC,KACA,CACI7C,EACA6B,EACAvE,EACAsE,EACAxC,EACA/O,EACAve,EACAuJ,EACAiP,EACA+O,EACAsI,EACAvvB,EACAP,IAIF0kC,EACF,gBAAC,GAAwB,CACrBtW,iBACI5kB,EAAOlF,OAAOopB,qBACV,gBAAC,GAA2B,CAACjyB,KAAK,mBAG1CuyB,WAAYvC,EAAqBuE,EAAiB,cAAW7nB,EAC7D+lB,aAAc8B,EAAiB,YAC/B3B,WAAY0B,EAA2BC,EAAiB,eAAY7nB,EACpE8lB,aAAc+B,EAAiB,YAC/B7B,iBAAkBA,IAGpBwW,EAAyBvT,GAAoC,CAAEnxB,aAE/DgxB,GACF,IAAAl3B,cACK6Z,IACG,MAAM2K,IAAiC3K,GACjC4K,EAAmC5K,EAAoBpK,GAEvD8W,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAG3D,OACI,gBAAC,GAA0B,CACvBwkB,WACI1N,EAA+B0P,EAAiB,cAAW7nB,EAE/D8lB,aACI1P,EACMyR,EAAiB,iBACjB7nB,EAEVgmB,iBAAkBA,MAI9B,CACIA,EACA6B,EACAzC,EACA/O,EACAhV,IAINmB,EAAoBhH,EAAgBgH,kBAEpCi6B,GACF,IAAA7qC,cACI,CAAOsoB,EAASzO,KAAuB,iDACnC,OAAOjJ,EAAkB,OAAD,wBACjB0X,GAAO,CACVwiB,WAAY,CACRrsB,WAAYyX,EAAqBrc,GACjC3B,YAAa2B,aAAkB,EAAlBA,EAAoB3B,eAG7C,KACA,CAACge,EAAsBtlB,IAGzBm6B,EAAmCzT,GAAoC,CAAEpxB,aAEzErF,EAAQ,CACV+I,kBACAzD,gBACAyS,cACA1S,WACAuJ,SACAiB,oBAGJ,OACI,gBAAC,GAAgC,iBACzB7P,EAAK,CACTyyB,aAAcqX,EACd/W,qBAAsBgX,EACtB55B,oBAAqBpH,EAAgBoH,oBACrCklB,qBAAsBA,EACtB3C,gCAAiC2D,EACjCtmB,kBAAmBi6B,EACnB3lB,2BAA4B6lB,OAOpC,CACI,CACInqC,GAAI,sBAER,CAAEA,GAAI,cAAemW,QAAS,kBAC9B,CAAEnW,GAAI,kBCrNd,IAAe,EAAA0mB,GAAA,IAjEqD,I,IAAA,gBAChE1d,EAAe,cACfzD,EAAa,OACbsJ,EAAM,YACNmJ,GAAW,EACRnX,GAAI,cALyD,4DAOhE,MAAMupC,GAA0B,IAAAhrC,cAC3BsoB,GAEG1e,EAAgBgH,kBAAkB,OAAD,wBAC1B0X,GAAO,CACV2iB,OAAQ,CACJje,UAAW,IAAI1E,EAAQta,sBAGnC,CAACpE,KAGC,wBACFid,EAAuB,cACvBC,EAAa,cACbpI,EAAa,UACb+E,EAAS,oBACTN,GACAvK,EAEEpB,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,IAG7D5F,MAAM,YAAEyhB,EAAW,sBAAE/H,GACrBnd,UAAU,qBAAEya,IACZ1a,EAEEolB,EAAWD,IACXvE,EAAW5gB,EAAc0D,KAAKmd,cAE9BhE,IADkB+D,aAAQ,EAARA,EAAUE,UAEVljB,QAAQ0L,EAAOlF,OAAO2c,mBAE9C,OACI,gBAAC,GAA4B,eACzB/V,YAAa,GAAG1B,EAAO7O,WACvBoQ,oBAAqBpH,EAAgBoH,oBACrC8V,cAAeA,EACfD,wBAAyBA,EACzBjW,kBAAmBo6B,EACnBxzB,YAAaA,EACb+O,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAAuCre,GACvE6c,6BAA8BA,EAC9BnC,qBAAsBA,IACtB0C,sBAAuBA,IACvBsB,YAAY,IAAA2G,MAAKD,aAAQ,EAARA,EAAUE,SAAU,CAAEC,WAAYjc,EAAO7O,KAC1DsiB,gBAAiBtZ,EAAgBsZ,gBACjCzT,OAAQA,EACRiP,cAAeA,EACf+E,UAAWA,EACXN,oBAAqBA,EACrBgE,QAASvd,EAAgBwd,iBACrB3lB,MAOZ,CAAC,CAAEb,GAAI,YCFX,IAAe,EAAA0mB,GAAA,IAjEuD,I,IAAA,gBAClE1d,EAAe,cACfzD,EAAa,OACbsJ,EAAM,YACNmJ,GAAW,EACRnX,GAAI,cAL2D,4DAOlE,MAAMypC,GAA4B,IAAAlrC,cAC7BsoB,GAEG1e,EAAgBgH,kBAAkB,OAAD,wBAC1B0X,GAAO,CACV6iB,SAAU,CACNne,UAAW,IAAI1E,EAAQta,sBAGnC,CAACpE,KAGC,wBACFid,EAAuB,cACvBC,EAAa,cACbpI,EAAa,UACb+E,EAAS,oBACTN,GACAvK,EAEEpB,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,IAG7D5F,MAAM,YAAEyhB,EAAW,sBAAE/H,GACrBnd,UAAU,qBAAEya,IACZ1a,EAEEolB,EAAWD,IACXvE,EAAW5gB,EAAc0D,KAAKmd,cAE9BhE,IADkB+D,aAAQ,EAARA,EAAUE,UAEVljB,QAAQ0L,EAAOlF,OAAO2c,mBAE9C,OACI,gBAAC,GAA4B,eACzB/V,YAAa,GAAG1B,EAAO7O,WACvBoQ,oBAAqBpH,EAAgBoH,oBACrC8V,cAAeA,EACfD,wBAAyBA,EACzBjW,kBAAmBs6B,EACnB1zB,YAAaA,EACb+O,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAAuCre,GACvE6c,6BAA8BA,EAC9BnC,qBAAsBA,IACtB0C,sBAAuBA,IACvBsB,YAAY,IAAA2G,MAAKD,aAAQ,EAARA,EAAUE,SAAU,CAAEC,WAAYjc,EAAO7O,KAC1DsiB,gBAAiBtZ,EAAgBsZ,gBACjCzT,OAAQA,EACRiP,cAAeA,EACf+E,UAAWA,EACXN,oBAAqBA,EACrBgE,QAASvd,EAAgBwd,iBACrB3lB,MAOZ,CAAC,CAAEsV,QAAS,YCMH,GAAoD,I,IAC7D,IAAAhV,OAAA,MAASX,GAAK,EAAKulC,GAAS,cAArB,YADsD,eAE7DC,GAAc,EAEd,MAAO7kC,EAAOqpC,EAAGC,IAAW,QAAS1E,EAAUjlC,MACzCZ,GAAQ,IAAAd,cAAY,IAAM,yCAAW+B,EAAK,CAAEf,KAAK,aAAa,CAACe,IAUrE,OARA,IAAA4O,YAAU,KACFvP,IAAUwlC,GAITyE,EAAQC,SAAS1E,aAAc,EAAdA,EAAgBhmC,MACvC,CAACQ,EAAOwlC,EAAgByE,IAEpB,gBAACvqC,EAAK,OAGJyqC,GAA2D,EAAG3E,oBACvE,qBACIznC,UAAU,wFACVyE,KAAK,IACLhD,GAAG,eACHiD,SAAS,EAAAC,EAAA,MAER8iC,EAAellC,MAIX,GAAsD,I,IAAA,OAAE8b,GAAM,EAAK3c,GAAK,cAAlB,YAC/D,MAAM,KAAEa,EAAI,MAAE8pC,EAAK,GAAE5qC,GAAO4c,EAE5B,OACI,mCAAGre,UAAU,mDAAsD0B,EAAK,WAAWD,IAC/E,yBAAOzB,UAAU,0BAA0BuC,GAC3C,uBAAKkW,IAAKlW,EAAI,YAAY,kBAAkBmW,IAAK2zB,EAAMC,WAKnE,IAAe,EAAA1jC,EAAA,IA7F+E,EAC1F0H,SACAvJ,e,MAEA,MAAMoiC,EAA6C,QAAzB,EAAA74B,EAAO8E,0BAAkB,eAAEm3B,wBAE9C9E,EAAgBuB,IAAqB,IAAAluB,UAAiB,CACzDvY,KAAMwE,EAASoB,UAAU,4BACzB1G,GAAI,GACJ4qC,MAAO,CAAEC,OAAQ,MAEflpC,GAAS,IAAAvC,cACVa,GAAsB,gBAAC,GAAW,iBAAKA,EAAK,CAAE+lC,eAAgBA,MAC/D,CAACA,IAGL,IAAK0B,GAA8B,IAAnBA,EAAQ5iC,OACpB,OAAO,iCAGX,MAAMwW,EAAc,EAAGqsB,oBACnB,MAAMC,EAAkBF,EAAQ30B,MAAK,EAAG/S,QAASA,IAAO2nC,EAAcE,QAAQ7nC,KAEzE4nC,GAILL,EAAkBK,IAGhBE,EACF,sBACIvpC,UAAU,qEACVyB,GAAG,mBAEF0nC,EAAQ3iC,KAAK6X,GACV,sBAAIre,UAAU,gDAAgDyG,IAAK4X,EAAO5c,IACtE,gBAAC,GAAY,CAAC4c,OAAQA,EAAQ3Z,QAASqY,QAMvD,OACI,gCACI,gBAAC,GAAe,CAACK,SAAUmsB,GACvB,gBAAC6C,GAAkB,CAAC3E,eAAgBA,KAExC,gBAAC,KAAS,CAAC9+B,MAAOvF,EAAQb,KAAK,eCgB3C,GArEiF,EAC7E4mB,UACA3T,eACAlF,YAECkF,EAGG,uBAAKxV,UAAU,iBACX,uBAAKA,UAAW,IAAW,aAAc,gBACrC,yBACIA,UAAU,0CACV+B,QAASonB,EAAQqjB,yBAAyBx6B,aAE1C,gBAAC5M,EAAA,EAAgB,CAAC3D,GAAG,sCAEzB,uBACIzB,UAAW,IAAW,aAAc,+BAAgC,YAAW,WACtE,aACTyB,GAAI0nB,EAAQqjB,yBAAyBx6B,eAG7C,uBAAKhS,UAAW,IAAW,aAAc,gBACrC,yBACIA,UAAU,0CACV+B,QAASonB,EAAQsjB,yBAAyBz6B,aAE1C,gBAAC5M,EAAA,EAAgB,CAAC3D,GAAG,oCAEzB,uBACIzB,UAAW,IAAW,aAAc,gCAA+B,WAC1D,aACTyB,GAAI0nB,EAAQsjB,yBAAyBz6B,eAG7C,uBAAKhS,UAAW,IAAW,aAAc,eAAgB,wBACrD,yBACIA,UAAU,0CACV+B,QAASonB,EAAQujB,sBAAsB16B,aAEvC,gBAAC5M,EAAA,EAAgB,CAAC3D,GAAG,kCACrB,gBAACkwB,GAAA,EAAc,CAACxU,UAAU,YAAYyU,QAAS,gBAAC,GAAqB,OACjE,wBAAM5xB,UAAU,WACZ,gBAAC6xB,GAAA,EAAQ,SAIrB,uBACI7xB,UAAW,IAAW,aAAc,gCAA+B,WAC1D,eACTyB,GAAI0nB,EAAQujB,sBAAsB16B,eAG1C,uBAAKhS,UAAW,IAAW,aAAc,iBACrC,yBACIA,UAAU,0CACV+B,QAASonB,EAAQwjB,yBAAyB36B,aAE1C,gBAAC5M,EAAA,EAAgB,CAAC3D,GAAG,0CAEzB,uBACIzB,UAAW,IAAW,aAAc,gCAA+B,WAC1D,aACTyB,GAAI0nB,EAAQwjB,yBAAyB36B,gBAzDjD,gBAAC,GAAmB,CAAC1B,OAAQA,ICHrC,IAAYs8B,IAAZ,SAAYA,GACR,0BACH,CAFD,CAAYA,KAAAA,GAAuB,KAInC,MAwUA,IAAe,EAAAzkB,GAAA,IAxUqD,I,IAAA,OAChE7X,EAAM,cACNtJ,EAAa,gBACbyD,EAAe,SACf1D,EAAQ,YACR0S,GAAW,EACR/X,GAAK,cANwD,uEAQhE,MAAMumC,GAAiB,IAAAznC,YAAW8Y,IAC5BuzB,GAAgB,IAAArsC,YAAW+zB,GAAA,GAC3BviB,EAAc,UAAU1B,EAAOA,UAE9B2kB,EAAkB2B,IAAuB,IAAA9b,aAC1C,gBACFwT,EAAe,cACf/O,EAAa,aACblY,EAAY,WACZP,EAAU,UACVwd,EAAS,wBACToD,EAAuB,cACvBC,EAAa,oBACb3D,GACAvK,EAEE4a,EAAmC,GAAqCrtB,GACxEse,EACF,GAAuCte,IAGvCoE,QAAQ,SAAE4b,IACV1W,EACEiiB,EAAqBvL,GAAyB,OAAbA,EACjC8P,GAA6C,IAAAj2B,cAC9C0B,GACU,IAAG,IAAAwM,SAAQ,CAACuB,EAAOsH,QAAStH,EAAO7O,KAAKsM,KAAK,QAAQxL,KAEhE,CAAC+N,IAGCymB,GAEkC,IAAAl2B,cAC7B6Z,IAAuB,iDAC1B,MAAMsc,EAAa,CAAC,QAAS,aAAc,WAAY,cACjD3R,IAAiC3K,GACjC4K,EAAmC5K,GAEnC0M,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAErD4mB,EAAmBxc,EACnB0M,EACI0P,EAAiB,cACjB7nB,EACJ6nB,EAAiB,YAEvB,MAAO,CACHK,OAAQzc,EACF,CACI+a,qBACIrO,GAAgC1M,EAC1B,CACI0c,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,SAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,EACVymB,uBACIrQ,GAAkC3K,EAC5B,CACI0c,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,YAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,GAEd,CACI+X,SAAUuL,EACJ,CACI6E,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,eAElC7nB,EACNomB,WAAY,CACR+B,mBAAoBrwB,EAASoB,UACzB,wCAEJ6J,YAAa8kB,EAAiB,YAC9B5E,YAAanrB,EAASoB,UAClB,oDAGRmtB,SAAU,CACN8B,mBAAoBrwB,EAASoB,UACzB,kCAEJ6J,YAAa8kB,EAAiB,WAElCvB,WAAY,CACR6B,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,cAG5CO,OAAQH,EACF,CACII,cAAezB,GAAyBqB,EAAkBF,GAC1D9tB,YAAa2sB,GACTqB,EACAF,EACApB,GAA0B5tB,OAE9BuvB,YAAa1B,GACTqB,EACAF,EACApB,GAA0BS,QAGlC,CAAC,EACPmB,OAAQ,EAAGzc,gBACHka,IAAqBla,GACrB6b,OAAoB3nB,IAG5BwoB,iBAAkB,EAAGtjB,eACjBoL,EAAc,sBAAuBpL,IAEzCujB,QAAS,KACLrwB,GAAa,GACbP,KAEJ6wB,QAAS,EAAG5c,gBACR6b,EAAoB7b,IAExBmT,WAAY,EAAGpmB,SAAS,CAAC,OACrB,IAAA8vB,OAAM9vB,GAAQ,CAAC+vB,EAAc,GAAI9c,K,QAC7B,MAAM+c,EAAW,qBAAqB/c,IAEtCwE,EAAcuY,EAA8B,QAApB,EAAc,QAAd,EAAAD,EAAY,UAAE,eAAEh2B,YAAI,QAAI,IAE5Cg2B,EAAY,IACZvJ,EAAgBwJ,OAKpC,KACA,CACI7C,EACA6B,EACAvE,EACA8B,EACA/O,EACAve,EACAuJ,EACAge,EACA/O,EACAlY,EACAP,IAGFixB,GACF,IAAAl3B,cACK6Z,IACG,MAAM2K,IAAiC3K,GACjC4K,EAAmC5K,EAAoBpK,GAEvD8W,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAG3D,OACI,gBAAC,GAA0B,CACvBwkB,WACI1N,EAA+B0P,EAAiB,cAAW7nB,EAE/D8lB,aACI1P,EACMyR,EAAiB,iBACjB7nB,EAEVgmB,iBAAkBA,MAI9B,CACIA,EACA6B,EACAzC,EACA/O,EACAhV,IAGNw8B,GAA2E,IAAAjsC,cAC7E,CAAOsoB,EAAmCzO,KAAuB,iDAC7D,MAAMqyB,EAAiBC,IAEvB,OAAOviC,EAAgBgH,kBAAkB,OAAD,wBACjC0X,GAAO,CACV8jB,OAAQ,OAAF,QACFj7B,cACA+iB,aAAcgY,EAAeP,yBAAyBx6B,YACtDk7B,UAAWH,EAAeL,sBAAsB16B,YAChDm7B,aAAcJ,EAAeN,yBAAyBz6B,YACtDgjB,aAAc+X,EAAeJ,yBAAyB36B,YACtDqlB,OAAQ,CACJnzB,KAAM,CACF6rB,MAAO,UACP,gBAAiB,CACbA,MAAO,YAGf5V,MAAO,CACH4V,MAAO,QAEXqd,QAAS,CACLrd,MAAO,YAGfsd,yBAA0BR,aAAa,EAAbA,EAAe9lC,SAASoB,UAC9C,2CAEJmlC,cAAgBzqC,IACRolC,GACAtgB,EAAcrX,EAAQzN,KAG1B6X,GAAsB,CACtB4E,WAAYyX,EAAqBrc,OAIjD,KACA,CACIjQ,EACAuH,EACA2V,EACAklB,aAAa,EAAbA,EAAe9lC,SACfgwB,EACAkR,EACA33B,IAIF08B,EAA2B,KACtB,CACHR,yBAA0B,CACtBx6B,YAAa,sCAEjB26B,yBAA0B,CACtB36B,YAAa,sCAEjB06B,sBAAuB,CACnB16B,YAAa,mCAEjBy6B,yBAA0B,CACtBz6B,YAAa,wCAazB,SAASwD,IACL,OAAOlF,EAAOA,SAAWs8B,GAAwBW,UACrD,CAMA,MAAMl1B,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,IAG7D5F,MAAM,YAAEyhB,EAAW,sBAAE/H,EAAqB,YAAEyD,GAC5C5gB,UAAU,qBAAEya,IACZ1a,EAEEolB,EAAWD,IACXvE,EAAWC,IAEXhE,IADkB+D,aAAQ,EAARA,EAAUE,UAEVljB,QAAQ0L,EAAOlF,OAAO2c,mBAE9C,OACI,gBAAC,GAA4B,iBACrBrmB,EAAK,CACTsQ,YAAaA,EACbH,oBAAqBpH,EAAgBoH,oBACrC8V,cAAeA,EACfnC,0BAAwB,EACxBkC,wBAAyBA,EACzBjW,kBAAmBq7B,EACnBz0B,YAAaA,EACboH,qBAAsBjK,IACtB4R,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAAuCre,GACvE6c,6BAA8BA,EAC9BnC,qBAAsBA,IACtB0C,sBAAuBA,IACvBsB,YAAY,IAAA2G,MAAKD,aAAQ,EAARA,EAAUE,SAAU,CAAEC,WAAYjc,EAAO7O,KAC1DsiB,gBAAiBtZ,EAAgBsZ,gBACjCzT,OAAQA,EACRuV,wBAhDR,WACI,MAAMsD,EAAU6jB,IAEhB,OACI,gBAAC,GAAoB,CAACx3B,aAAcA,IAAgBlF,OAAQA,EAAQ6Y,QAASA,GAErF,EA2CQ5J,cAAeA,EACf+E,UAAWA,EACXN,oBAAqBA,EACrB4B,8BAA8B,EAC9BoC,QAASvd,EAAgBwd,gBACzBlC,2BAA4BoS,GAAoC,CAAEpxB,aAClEyb,mBA3CR,SAA4BgrB,EAA4B9yB,GACpD,OAAOqd,EAAsCrd,EACjD,OAgDA,CAAC,CAAE9C,QAAS,UAAY,CAAEA,QAAS,SAAUnW,GAAI,cCnVxCgsC,GAAsB,EAC/BzmC,gBACAsJ,SACAvJ,WACA0S,kBAEA,MAAM,gBAAE6U,EAAe,cAAE/O,EAAa,aAAElY,EAAY,WAAEP,GAAe2S,GAC/D,OAAErO,GAAWkF,GACX0W,SAAU0mB,GAAoBtiC,EAEhCmnB,EAAqBmb,GAAuC,OAApBA,EACxCrZ,EAAmC,GAAqCrtB,GACxEse,EACF,GAAuCte,GAErC8vB,GAA6C,IAAAj2B,cAC9C0B,GACU,IAAG,IAAAwM,SAAQ,CAACuB,EAAOsH,QAAStH,EAAO7O,KAAKsM,KAAK,QAAQxL,KAEhE,CAAC+N,KAGE2kB,EAAkB2B,IAAuB,IAAA9b,YAE1Cid,GACF,IAAAl3B,cACK6Z,IACG,MAAM2K,IAAiC3K,GACjC4K,EAAmC5K,EAAoBpK,GAEvD8W,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAG3D,OACI,gBAAC,GAA0B,CACvBwkB,WACI1N,EAA+B0P,EAAiB,cAAW7nB,EAE/D8lB,aACI1P,EACMyR,EAAiB,iBACjB7nB,EAEVgmB,iBAAkBA,MAI9B,CACIA,EACA6B,EACAzC,EACA/O,EACAhV,IAINymB,GAAuB,IAAAl2B,cAClB6Z,IAAyE,iDAC5E,MAAMsc,EAAa,CAAC,QAAS,aAAc,WAAY,cACjD3R,IAAiC3K,GACjC4K,EAAmC5K,EAAoBpK,GAEvD8W,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAE3D,IAAI4mB,EAYJ,OAVIxc,EACI0M,EACA8P,EAAmBJ,EAAiB,SAC7BzR,IACP6R,EAAmBJ,EAAiB,aAGxCI,EAAmBJ,EAAiB,YAGjC,CACHK,OAAQzc,EACF,CACI+a,qBACIrO,GAAgC1M,EAC1B,CACI0c,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,SAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,EACVymB,uBACIrQ,GAAkC3K,EAC5B,CACI0c,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,YAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,GAEd,CACI+X,SAAUuL,EACJ,CACI6E,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,eAElC7nB,EACNomB,WAAY,CACR+B,mBAAoBrwB,EAASoB,UACzB,wCAEJ6J,YAAa8kB,EAAiB,YAC9B5E,YAAanrB,EAASoB,UAClB,oDAGRmtB,SAAU,CACN8B,mBAAoBrwB,EAASoB,UACzB,kCAEJ6J,YAAa8kB,EAAiB,WAElCvB,WAAY,CACR6B,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,cAG5CO,OAAQH,EACF,CACII,cAAezB,GAAyBqB,EAAkBF,GAC1D9tB,YAAa2sB,GACTqB,EACAF,EACApB,GAA0B5tB,OAE9BuvB,YAAa1B,GACTqB,EACAF,EACApB,GAA0BS,QAGlC,CAAC,EACPmB,OAAQ,EAAGzc,gBACHka,IAAqBla,GACrB6b,OAAoB3nB,IAG5BwoB,iBAAkB,EAAGtjB,eACjBoL,EAAc,sBAAuBpL,IAEzCujB,QAAS,KACLrwB,GAAa,GACbP,KAEJ6wB,QAAS,EAAG5c,gBACR6b,EAAoB7b,IAExBmT,WAAY,EAAGpmB,SAAS,CAAC,OACrB,IAAA8vB,OAAM9vB,GAAQ,CAAC+vB,EAAc,GAAI9c,K,QAC7B,MAAM+c,EAAW,qBAAqB/c,IAEtCwE,EAAcuY,EAA8B,QAApB,EAAc,QAAd,EAAAD,EAAY,UAAE,eAAEh2B,YAAI,QAAI,IAE5Cg2B,EAAY,IACZvJ,EAAgBwJ,OAKpC,KACA,CACI7C,EACA6B,EACAvE,EACA8B,EACA/O,EACAve,EACAuJ,EACAge,EACA/O,EACAlY,EACAP,IAIR,MAAO,CAAEixB,wCAAuChB,yBC5GpD,IAAe,EAAA5O,GAAA,IAxFsD,I,IAAA,SACjEphB,EAAQ,YACR0S,EAAW,cACXzS,EAAa,gBACbyD,EAAe,OACf6F,GAAM,EACHhO,GAAI,cAN0D,uEAQjE,MAAM0P,EAAc,4BAEd,sCAAE+lB,EAAqC,qBAAEhB,GAAyB0W,GAAoB,CACxFzmC,gBACAsJ,SACAvJ,WACA0S,gBAGEmyB,EAAmCzT,GAAoC,CAAEpxB,cACzE,wBACF2gB,EAAuB,cACvBC,EAAa,cACbpI,EAAa,UACb+E,EAAS,oBACTN,GACAvK,EAEEpB,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,IAG7D5F,MAAM,YAAEyhB,EAAW,sBAAE/H,GACrBnd,UAAU,qBAAEya,IACZ1a,EAEEolB,EAAWD,IACXvE,EAAW5gB,EAAc0D,KAAKmd,cAG9BhE,IAFkB+D,aAAQ,EAARA,EAAUE,UAGVljB,QAAQ0L,EAAOlF,OAAO2c,mBAExC4lB,GAA4E,IAAA9sC,cAC9E,CAAOsoB,EAAmCzO,KAAuB,iDAC7D,MAAMkzB,EAAgB,OAAH,wBACZzkB,GAAO,CACV0kB,QAAS,OAAF,QACH77B,eACI0I,GAAsB,CACtB4E,WAAYyX,EAAqBrc,OAK7C,OAAOjQ,EAAgBgH,kBAAkBm8B,EAC7C,KACA,CAAC57B,EAAa+kB,EAAsBtsB,IAOxC,OACI,gBAAC,GAA4B,eACzBuH,YAAaA,EACbH,oBAAqBpH,EAAgBoH,oBACrC8V,cAAeA,EACfD,wBAAyBA,EACzBjW,kBAAmBk8B,EACnBt1B,YAAaA,EACb+O,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAAuCre,GACvE6c,6BAA8BA,EAC9BnC,qBAAsBA,IACtB0C,sBAAuBA,IACvBsB,YAAY,IAAA2G,MAAKD,aAAQ,EAARA,EAAUE,SAAU,CAAEC,WAAYjc,EAAO7O,KAC1DsiB,gBAAiBtZ,EAAgBsZ,gBACjCzT,OAAQA,EACRiP,cAAeA,EACf+E,UAAWA,EACXN,oBAAqBA,EACrBgE,QAASvd,EAAgBwd,gBACzBlC,2BAA4B6lB,EAC5BppB,mBAzBmB,CAACgrB,EAA4B9yB,IAC7Cqd,EAAsCrd,IAyBrCpY,MAOZ,CAAC,CAAEb,GAAI,aC/DX,IAAe,EAAA0mB,GAAA,IA1CqD,EAChE7X,SACA7F,kBACA8G,wBAEA,IAAAC,YAAU,MACgC,iDAClC,UACU/G,EAAgBgH,kBAAkB,CACpC3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAIO,MACqC,iDACpC,UACUuB,EAAgBoH,oBAAoB,CACtC/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,OAIL,CAACuB,EAAiB6F,EAAOsH,QAAStH,EAAO7O,GAAI8P,IAEzC,OAGgD,CACvD,CACI1P,KAAM,0BCgId,GAnJI,EACAyO,SACA7F,kBACAgP,cACAlI,mBACAqb,qBACAC,sBACA9sB,WACA+sB,oBACA/lB,WACAgmB,8BAEA,MAAMC,GAAmB,IAAA5E,QAA6B,MAChD6E,GAAkB,IAAA7E,QAAgC,MAClD8E,GAAkB,IAAA9E,QAA4B,MAC9C+E,GAAkB,IAAA/E,SAAO,GAEzBgF,EAAa3T,EAAY0J,cAAc,SACvCkK,EAAuB5T,EAAY0J,cAAc,wBAEjDmK,EAAe,KAAY,iDAC7B,MAAMC,QAAyB9T,EAAY6T,eAE3C,OAAOle,OAAOoe,KAAKD,EACvB,IAEME,EAAiB,KAAY,iDAC/B,IAAKT,EAAiBnE,QAAS,cAEFyE,KAEV/mB,OACfymB,EAAiBnE,QAAQ6E,UAEzBV,EAAiBnE,QAAQ8E,QAEjC,IAEMC,GAAqB,IAAA/sB,cAAY,KAC/BisB,IAAsBC,GACtBtT,EAAYiO,wBAAwBpX,GAAQ,GAC5C6c,EAAgBtE,SAAU,IAClBsE,EAAgBtE,SAAWqE,EAAgBrE,UACnDpP,EAAYiO,wBAAwBpX,GAAQ,GAE5C0O,YAAW,K,MACgB,QAAvB,EAAAkO,EAAgBrE,eAAO,iBAEvBsE,EAAgBtE,SAAU,IAC3B,MAER,CAACiE,KAEJ,IAAAtb,YAAU,KACNoc,MACD,CAACA,EAAoBV,EAAgBrE,WAExC,IAAArX,YAAU,KACDic,MACN,CAACL,KAEJ,IAAA5b,YAAU,KACNyb,EAAgBpE,QAAU,CACtBwE,qBAAsBN,GAA2BnoB,QAAQyoB,MAE9D,CAACA,EAAsBN,IA+E1B,OARA,IAAAvb,YAAU,MArE4B,iDAClC,UACU/G,EAAgBgH,kBAAkB,CACpC3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,GACjB,CAACmrB,GAAqB,OAAF,QAChBiB,UAAW,6BACXC,0CAA0C,EAC1CC,eAAgB,KACZtU,EAAYiO,wBAAwBpX,GAAQ,IAEhD0d,OAASD,IACLb,EAAgBrE,QAAUkF,GAE9BjnB,WAAY,KACR2S,EAAYpS,cAAa,GACzBoS,EAAY3S,cAEhBmnB,QAAU/kB,IACNuQ,EAAYkO,cAAcrX,GAAQ,GAEZ,wBAAlBpH,EAAMjB,QACNsJ,EACI,IAAIvJ,MAAMjB,EAASoB,UAAU,wCAGjCoJ,EAAiBrI,IAGzBglB,WAAY,CAAOzH,EAAqB0H,KAAsC,iDAC1E,MAAMC,QAAuBd,IAE7B,OAAIc,EAAe7nB,QACfkT,EAAYpS,cAAa,GACzB+mB,EAAeC,SAAS5nB,GAAQgT,EAAY6U,gBAAgB7nB,KAErD0nB,KAGJ1H,GACX,IACA8H,aAAqBC,IAA2B,iDAC5CxB,EAAiBnE,QAAU2F,QACrBf,GACV,IACAgB,gBAAiB,IAAMxB,EAAgBpE,SACnCgE,GAAuB,CAAC,IAGxC,CAAE,MAAO3jB,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAkBW,MAhB6B,iDACpC,UACUuB,EAAgBoH,oBAAoB,CACtC/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,OAQG,IAEInJ,EAAW,gCAAGA,GAAe,kCCnHxC,IAAe,EAAAooB,GAAA,IAlDiEzmB,IAC5E,MAAM,OAAE4O,EAAM,cAAEtJ,GAAkBtF,GAC5B,sBAAE0iB,GAA0Bpd,EAAc0D,MAC1C,GAAEjJ,GAAO6O,EAEf,IAAK8T,IACD,OAAO,KAGX,MAAM4K,EAAoB,GAAyBvtB,EAAI6O,EAAOsH,SACxDqX,EAAe,CACjBC,mBAAoB,IAAIF,IACxBG,gBAAiB,CACbC,UAAW,CACPC,WAAY,+CACZC,gBAAiB,cACjBC,UAAW,QACXC,aAAc,OACdC,YAAa,OACbC,YAAa,UACbC,aAAc,MACdC,YAAa,OAEjBC,MAAO,CACH,SAAU,CACNC,gBAAiB,QACjBC,MAAO,OACPC,SAAU,QAEd,gBAAiB,CACbD,MAAO,WAEX,kBAAmB,CACfA,MAAO,cAMvB,OACI,gBAAC,GAAoC,eACjClD,oBAAqBoC,EACrBrC,mBAAmB,oCACflrB,GAEJ,uBAAK1B,UAAW,kBAAkByB,mBAAqBA,GAAIutB,OAOnE,CAAC,CAAEpX,QAAS,sCCrChB,IAAe,EAAAuQ,GAAA,IAhBmEzmB,IAC9E,MAAM,cAAEsF,GAAkBtF,GACpB,sBAAE0iB,GAA0Bpd,EAAc0D,KAEhD,OAAK0Z,IAKD,gBAAC,GAAoC,eACjCwI,mBAAmB,wBACflrB,IAND,OAaX,CAAC,CAAED,GAAI,0BC4QX,IAAe,EAAA0mB,GAAA,IA7QuEzmB,IAClF,MAAM,gBAAE+I,EAAe,cAAEzD,EAAa,YAAEyS,EAAW,SAAE1S,EAAQ,OAAEuJ,GAAW5O,GAEpE,SAAEslB,EAAQ,mBAAE0P,EAAkB,oBAAEC,EAAmB,oBAAEnC,GACvDlkB,EAAOlF,QAEJ6pB,EAAkB2B,IAAuB,IAAA9b,aAE1C,gBAAEwT,EAAe,cAAE/O,EAAa,aAAElY,EAAY,WAAEP,GAAe2S,EAC/D4a,EAAmC,GAAqCrtB,GACxEse,EACF,GAAuCte,GAIrCurB,EAAqBvL,GAAyB,OAAbA,EACjC6P,EAA2BH,SAAAA,EAE3BI,GAA6C,IAAAj2B,cAC9C0B,GACU,IAAG,IAAAwM,SAAQ,CAACuB,EAAOsH,QAAStH,EAAO7O,KAAKsM,KAAK,QAAQxL,KAEhE,CAAC+N,IAGCymB,GAEkC,IAAAl2B,cAC7B6Z,IAAuB,iDAC1B,MAAMsc,EAAa,CAAC,QAAS,aAAc,WAAY,cAEjD3R,IAAiC3K,GACjC4K,EAAmC5K,EAAoBpK,GAEvD8W,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAIrD2mB,EACF5R,GAAkC+B,EAEtC,IAAI8P,EAUJ,OARIxc,GAAsBuc,IACtBC,EAAmBJ,EAAiB,UAGnCpc,IACDwc,EAAmBJ,EAAiB,aAGjC,CACHK,OAAQzc,EACF,CACI+a,qBAAsBwB,EAChB,CACIG,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,SAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,EACNymB,uBAAwBuB,EAClB,CACIG,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,YAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,EACN0mB,uBAAwBsB,EAClB,CACIG,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,YAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,GAEV,CACI+X,SAAUuL,EACJ,CACI6E,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,eAElC7nB,EACNomB,WAAY,CACR+B,mBAAoBrwB,EAASoB,UACzB,wCAEJ6J,YAAa8kB,EAAiB,YAC9B5E,YAAanrB,EAASoB,UAClB,oDAGRmtB,SAAU,CACN8B,mBAAoBrwB,EAASoB,UACzB,kCAEJ6J,YAAa8kB,EAAiB,WAElCvB,WAAY,CACR6B,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,cAG5CO,OAAQH,EACF,CACII,cAAezB,GAAyBqB,EAAkBF,GAC1D9tB,YAAa2sB,GACTqB,EACAF,EACApB,GAA0B5tB,OAE9BuvB,YAAa1B,GACTqB,EACAF,EACApB,GAA0BS,QAGlC,CAAC,EACPmB,OAAQ,EAAGzc,gBACHka,IAAqBla,GACrB6b,OAAoB3nB,IAG5BwoB,iBAAkB,EAAGtjB,eACjBoL,EAAc,sBAAuBpL,IAEzCujB,QAAS,KACLrwB,GAAa,GACbP,KAEJ6wB,QAAS,EAAG5c,gBACR6b,EAAoB7b,IAExBmT,WAAY,EAAGpmB,SAAS,CAAC,OACrB,IAAA8vB,OAAM9vB,GAAQ,CAAC+vB,EAAa9c,KACxB,MAAM+c,EAAW,qBAAqB/c,IAEtCwE,EACIuY,EACAD,GAAeA,EAAY,GAAGh2B,KAAOg2B,EAAY,GAAGh2B,KAAO,IAG3Dg2B,GAAeA,EAAY,IAC3BvJ,EAAgBwJ,OAKpC,KACA,CACI7C,EACA6B,EACAvE,EACAsE,EACAxC,EACA/O,EACAve,EACAuJ,EACAiP,EACA+O,EACAsI,EACAvvB,EACAP,IAIFixB,GAEW,IAAAl3B,cACZ6Z,IACG,MAAM2K,IAAiC3K,GACjC4K,EAAmC5K,EAAoBpK,GAEvD8W,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAIrD2mB,EACF5R,GAAkC+B,EAEtC,OACI,gBAAC,GAA0B,CACvB0N,WACI1N,EAA+B0P,EAAiB,cAAW7nB,EAE/D+lB,aACIiC,EAA2BH,EAAiB,iBAAc7nB,EAE9D8lB,aACI1P,EAAiCyR,EAAiB,iBAAc7nB,EAEpEgmB,iBAAkBA,MAI9B,CACIA,EACA6B,EACAzC,EACA/O,EACAhV,IAIFmB,EAAoBhH,EAAgBgH,kBAEpCq8B,GACF,IAAAjtC,cACI,CAAOsoB,EAASzO,KAAuB,iDACnC,OAAOjJ,EAAkB,OAAD,wBACjB0X,GAAO,CACV4kB,0BAA2B,CACvBzuB,KAAMqX,QACMI,EAAqBrc,QAC3BzL,KAGlB,KACA,CAAC8nB,EAAsBtlB,IAK/B,OAAOklB,EACH,gBAAC,GAAgC,iBACzBj1B,EAAK,CACTyyB,aACI,gBAAC,GAAwB,CACrBe,iBACIV,GAAuB,gBAAC,GAA2B,CAACjyB,KAAK,mBAE7DuyB,WAAYvC,EAAqBuE,EAAiB,cAAW7nB,EAC7D+lB,aAAc8B,EAAiB,YAC/B3B,WAAY2B,EAAiB,UAC7B/B,aAAc+B,EAAiB,YAC/B7B,iBAAkBA,IAG1BR,qBAAsByD,GAAoC,CAAEnxB,aAC5D8K,oBAAqBpH,EAAgBoH,oBACrCklB,qBAAsBA,EACtB3C,gCAAiC2D,EACjCtmB,kBAAmBq8B,EACnB/nB,2BAA4BoS,GAAoC,CAC5DpxB,WACAyuB,sBAAsB,OAI9B,gBAAC,GAAgC,iBACzB9zB,EAAK,CACTmQ,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmBq8B,OAO3B,CAAC,CAAErsC,GAAI,+BC9QX,GAhBI,EAAG22B,iCACH,IAAA5mB,YAAU,KACmC,mBAA9B4mB,GACPA,EAA0B,iDAE/B,CAACA,IAGA,uBACIp4B,UAAU,6CAA4C,YAC5C,6CACVyB,GAAG,gDCWf,MAmDA,GAjDI,EAAG0B,WAAUygB,yBAAwBlJ,yBACrC,MAAMvG,EA1BV,SAAmCtS,GAC/B,OAAQA,EAAK4T,eACT,IAAK,OACL,IAAK,mBACD,MAAO,mBAEX,IAAK,SACD,MAAO,cAEX,IAAK,cACD,MAAO,aAEX,QACI,OAAO5T,EAEnB,CAWqB,CAA0B6Y,EAAmBtB,OAAO3D,cAYrE,OACI,uBACIzV,UAAU,sCAAqC,YACrC,4CAEV,2BACI,uBAAKA,UAAU,+CACX,gBAAC,GAAc,CAACmU,SAAUA,IAE1B,uBACInU,UAAU,wBAAuB,YACvB,oCAGV,4B,QAAoC0a,EAAmBO,SAG/D,uBAAKjb,UAAU,gDACX,gBAACq4B,GAAA,EAA4B,QAIrC,uBAAKr4B,UAAU,qDACX,gBAAC,MAAM,CACH0E,QAlCK,KAAY,iDAC7B,GAAwB,mBAAbvB,EAAyB,CAChC,MAAMm1B,QAAen1B,IAEjBm1B,GACA1U,EAAuB0U,EAE/B,CACJ,IA2BgBxsB,KAAM,MAAWysB,KACjBtzB,OAAO,6CACPsD,QAAS,MAAcC,WAEvB,gBAACpD,EAAA,EAAgB,CAAC3D,GAAG,6BC/BzC,GAlCuF,EACnF22B,4BACAI,6BAEA,MAAM,YAAEngB,EAAW,uBAAEuL,EAAsB,mBAAElJ,GCXG,MAChD,MAAOA,EAAoB+d,IAAyB,IAAA3d,aAE9C,2BAAE4d,IAA+B,UAAc1xB,cAAc0D,KAC7DiuB,EAA0BD,IAC1BE,GAAyB,QAAyBD,GAClDA,EACA,CAAC,GAED,YAAElf,GAAgBF,KAOxB,MAAO,CACHlB,YAAaugB,EAAuBvgB,aAAe,GACnDuL,uBAP4BzR,IAC5BsmB,EAAsBtmB,GACtBsH,EAAY8F,cAAc,eAAgBpN,EAAW4G,cAMrD2B,uBDPAszB,GAEElV,EAA4BzgB,EAAY9R,OAAS,EAQvD,OANA,IAAAiL,YAAU,MACDkJ,GAAsBrC,EAAY9R,OAAS,GAC5Cqd,EAAuBvL,EAAY,MAExC,CAACA,EAAaqC,IAGb,uBAAK1a,UAAU,2CACV84B,GACG,gBAAC,GAAqC,CAClClV,uBAAwBA,EACxBzgB,SAAUq1B,EACV9d,mBAAoBA,GAAsBrC,EAAY,MAI5DygB,GACE,gBAAC,GAAoC,CACjCV,0BAA2BA,MEjB/C,MCrBA,IDuHe,EAAAjQ,GAAA,IAlGoE,EAC/E7X,SACA7F,kBACAzD,gBACAuK,mBACAkI,cACA1S,eAEA,MAAMgyB,GAAyB,IAAA3Q,QAAuC,CAAC,IAEjE,uBAAE2B,EAAsB,sBAAEiP,GAA0BhyB,EAAcC,UAmDxE,IAAAuK,YAAU,MAjDmC,iDACzC,UACU/G,EAAgBgH,kBAAkB,CACpC5C,SAAUyB,EAAO7O,GACjBwsC,uBAAwB,CACpBjgB,OAASoK,IACLW,EAAuBlQ,QAAQuP,0BAC3BA,GAERj1B,SAAWq1B,IACPO,EAAuBlQ,QAAQ2P,uBAC3BA,GAERvK,QAAU/kB,IACN,IAAIgwB,EAYJ,OAPIA,EElDb,SACXhwB,GAEA,MAAwB,iBAAVA,GAAgC,OAAVA,GAAkB,mBAAoBA,CAC9E,CF2C4B,CAA0BA,GACb,IAAIlB,MAAMjB,EAASoB,UAAUe,EAAMkwB,iBACzClwB,aAAiBlB,MACXkB,EAEA,IAAIlB,MACbjB,EAASoB,UAAU,iCAIpBoJ,EAAiB2nB,MAIxC,CAAE,MAAOhwB,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAiBW,MAfoC,iDAC3C,UACUuB,EAAgBoH,oBAAoB,CACtChD,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,OAQG,IAEH,MAAMZ,EAAY0wB,KAA2BjP,EAAuBzZ,EAAO7O,IAErEuoB,EAAmB,CACrBC,YAAaxQ,EAAYwQ,cACzB5iB,aAAcoS,EAAYpS,cAG9B,OACI,gBAACuS,EAAA,GAAYF,SAAQ,CAACzX,MAAO+nB,GACzB,gBAACnI,GAAA,EAAgBnI,SAAQ,CAACzX,MAAO,CAAE+E,gBAAeyD,oBAC9C,gBAACyf,GAAA,EAAc,CAACzf,gBAAiBA,GAC7B,gBAAC6O,GAAmBI,SAAQ,CAACzX,MAAO,CAAEwX,gBAClC,gBAACqG,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,gBAAC,GAA0B,CACvB8vB,0BACIW,EAAuBlQ,QAAQuP,0BAEnCI,uBACIO,EAAuBlQ,QAAQ2P,gCAa/D,CAAC,CAAE/2B,GAAI,uCGlCX,GAlFqC6O,IACjC,MAAOwc,EAAmB4B,IAAwB,IAAA5T,aAE5C,cAAE9T,IAAkB,UACpB4gB,EAAW5gB,EAAc0D,KAAKmd,cAC9BxP,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,IAE3D,YAAEmJ,GAAgBF,MAClB,cAAEgG,GAAkB9F,EAEpB6H,GAAqB,IAAAtU,UACvB,IAAMqL,EAAYnE,OAAOuL,KACzB,CAACpH,IAGCsW,GAA4B,IAAA3hB,UAC9B,IAAMsU,EAAmBpN,QAAQ/B,GAAeA,EAAWgV,0BAC3D,CAAC7F,IAGCsN,EAAwBtN,EAAmB/a,OAAS,EAEpDsd,IACD+D,aAAQ,EAARA,EAAUE,UACXljB,QAAQ0L,EAAOlF,OAAO2c,qBACrBzX,EAAO8E,mBAAmByZ,WACzBnK,EAA+Bb,GAAgC+K,EAE/DE,EAA4BpK,IAAiCoI,EAC7DC,EACFrI,KAAkCoI,IAAsB6B,EAA0BpoB,QActF,IAAAiL,YAAU,KACNkd,EAAqB7K,EAbI,MACzB,IAAK8K,EAA0BpoB,OAC3B,OAOJ,OAJiCooB,EAA0Bza,QACvD,EAAGoP,uBAAwBA,IAGC,IAAMqL,EAA0B,IAIZjD,QAAyBzc,KAC9E,CAAC4U,EAA8B8K,KAElC,IAAAnd,YAAU,KACDkT,GACDnF,EAAc,eAAgB,MAEnC,CAACA,EAAemF,IAEnB,MAAMd,GAAyB,IAAA/iB,cAC1BY,IACGitB,GAAqB,IAAAla,MAAKma,EAA2B,CAAE5V,YAAatX,KACpE8d,EAAc,eAAgB9d,GAC9B8d,EAAc,gCAAgC,KAElD,CAACoP,EAA2BpP,IAG1BiM,GAAyB,IAAA3qB,cAAY,KACvC6tB,OAAqBzf,GACrBsQ,EAAc,eAAgB,IAC9BA,EAAc,wBAAwB,GACtCA,EAAc,gCAAgC,KAC/C,CAACA,IAEJ,MAAO,CACHoP,4BACA7B,oBACAlJ,yBACA4H,yBACA3H,+BACAa,+BACAoK,4BACA/B,4BCoBR,IAAe,EAAA5E,GAAA,IAvF6DzmB,IACxE,MACIsF,eACI0D,MAAM,sBAAE0Z,EAAqB,YAAEyD,EAAW,eAAEzP,GAC5CnR,UAAU,qBAAEya,EAAoB,uBAAEqI,IAEtCzZ,QACIlF,QAAQ,kBAAE2c,GACV3S,oBAAoB,WAAEyZ,IACzB,OACDve,EAAM,gBACN7F,EAAe,iBACf8G,GACA7P,GAEE,0BACFitB,EAAyB,kBACzB7B,EAAiB,uBACjBlJ,EAAsB,uBACtB4H,EAAsB,6BACtB3H,EAA4B,6BAC5Ba,EAA4B,wBAC5BqI,GACA,GAA4Bzc,GAsBhC,IApBA,IAAAkB,YAAU,KACN,MAUM,QAAEsW,GAAYD,KAAiB,CAAC,GAEPC,GAAWC,IAAsB8G,IAZrB,iDACvC,UACUpkB,EAAgBsZ,iBAC1B,CAAE,MAAO7a,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,MASD,KAEEkb,IACD,OAAO,KAGX,MAAM9b,EAAYoZ,KAA0BqI,EAAuBzZ,EAAO7O,IACpEstB,EAAiB3W,KAAoB,GAE3C,OACI,gBAAC0H,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,gBAAC,GAAoC,eACjCwkB,kBAAmBA,EACnBF,mBAAmB,iBACnBG,wBAAyBA,GACrBrrB,GAEHgjB,GACG,gBAAC,GAAyB,CACtBrM,YAAasW,EACbhQ,mBAAoBiF,EACpBhF,mBAAoB4M,EACpB9Q,mBAAoBoS,IAI3BC,GACG,2BACI,gBAAC9f,EAAA,EAAc,CAACxL,GAAG,qDAI1BoiB,GACG,gBAAC,GAAuB,CACpB7K,aAAc8T,aAAiB,EAAjBA,EAAmB/T,YACjCV,YAAa0W,EACbtP,qBAAmB,QAUvC,CAAC,CAAEhe,GAAI,oBCpFX,IAAe,EAAA0mB,GAAA,IAbkEzmB,IAC7E,MAAM,cAAEsF,GAAkBtF,GACpB,sBAAE0iB,GAA0Bpd,EAAc0D,KAEhD,OAAK0Z,IAKD,gBAAC,GAAoC,eAACwI,mBAAmB,uBAA0BlrB,IAJ5E,OAUX,CAAC,CAAED,GAAI,yBCrBX,IAAe,IAAA2wB,UAAQ,UAAkD,cACrEsH,EAAa,SACb3yB,IAKA,MAAM4yB,EAAoE,CACtEC,wBAAyB,qCACzBC,mBAAoB,+BACpBC,iBAAkB,8BAGtB,OAAO,QACHJ,EAAcrJ,QACV,CAACoC,GAAUhxB,KAAI2H,eACPA,GACIuwB,EAAiCl4B,KACjCgxB,EAAOhxB,IAAM,UACRs4B,WACA3wB,SACGrC,EAASoB,UAAU,oCAAqC,CACpD6xB,UAAWjzB,EAASoB,UAChBwxB,EAAiCl4B,OAKtC,4BAAPA,IACAgxB,EAAOhxB,GAAMgxB,EAAOhxB,GAAIw4B,QACpB,aACAlzB,EAASoB,UAAU,mCAAoC,CACnD6xB,UAAWjzB,EAASoB,UAChB,0CAML,uBAAP1G,IACAgxB,EAAOhxB,GAAMgxB,EAAOhxB,GAAIw4B,QACpB,aACAlzB,EAASoB,UAAU,mCAAoC,CACnD6xB,UAAWjzB,EAASoB,UAAU,qCAO3CsqB,IAGX,CAAC,GAGb,IC1CM,GACF,gDAYE,GAA6B,CAC/B,CACIlwB,KAAM,mBACN43B,QAAQ,EACR14B,GAAI,mBACJY,MAAO,6BACP+G,UAAU,EACV2R,UAAWqf,GAAA,EAAqBC,KAChCpH,gBAAiB,cAErB,CACI1wB,KAAM,0BACN43B,QAAQ,EACR14B,GAAI,0BACJY,MAAO,qCACP+G,UAAU,EACV2R,UAAWqf,GAAA,EAAqBE,KAChCz4B,KAAM,UAEV,CACIU,KAAM,qBACN43B,QAAQ,EACR14B,GAAI,qBACJY,MAAO,+BACP+G,UAAU,EACV2R,UAAWqf,GAAA,EAAqBE,OA6LxC,IAAe,EAAAnS,GAAA,IAzLmE,EAC9E7X,SACA7F,kBACA8G,mBACAkI,aAAewQ,cAAa1K,gBAAeyE,sBAAqB3c,gBAChEN,WACAC,oBAEA,MAAMuzB,GAAe,IAAAnS,QAAoC,CAAC,GACpDhE,EAAwBpd,EAAc0D,KAAK0Z,yBA0GjD,IAAA5S,YAAU,MAhG4B,iDAClC,UACU/G,EAAgBgH,kBAAkB,CACpC3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,GACjBysC,sBAAuB,CACnBrgB,UAAW,6BACX4M,mBAAoB,uBACpBC,mBAAoB,0BACpBjM,gBAAiB,IAYN,OAAP,wBAV2B,CACvBqL,iBAAkB,CACdqU,QAAS,IAAM,EACfC,SAAU,IAAM,EAChBC,YAAa,IAAM,GAEvBzU,wBAAyB,GACzBC,mBAAoB,KAKjBU,EAAa1R,SAGxBoF,QAAU/kB,I,QACN,MAAMyxB,EAAmC,QAAZ,EAAAzxB,EAAMpB,cAAM,eAAEoM,QAAQ0mB,GAAMA,EAAEC,iBAE3D,GAAIF,aAAoB,EAApBA,EAAsBp0B,OAAQ,CAC9B,IAAIu0B,EACAC,EACJ,MAAMC,EACoC,QAAtC,EAAAL,EAAqB,GAAGE,sBAAc,eAAEx1B,KAE5C,OAAQ21B,GACJ,IAlGa,uCAmGTF,EACI,0DACJ,MAEJ,IAxGe,yCAyGXA,EACI,2DACJ,MAEJ,KAAK,GACDA,EACI,iEACJ,MAEJ,QACIA,EAAkB,uBAiB1B,OAVIC,EAHAC,IACA,GAEe,IAAIC,GAAA,EAAY,CAC3BvwB,KAAM,CACFwwB,0BAA0B,EAC1B9B,eAAgB0B,KAIT,IAAI9yB,MAAMjB,EAASoB,UAAU2yB,IAGzCvpB,EAAiBwpB,EAC5B,CAEAxpB,EAAiBrI,MAIjC,CAAE,MAAOA,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,IAkBW,MAhB6B,iDACpC,UACUuB,EAAgBoH,oBAAoB,CACtC/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACDA,aAAiBlB,OACjBuJ,EAAiBrI,EAEzB,CACJ,OAQG,IAEH,MAIMnG,GAAe,IAAAlC,cAChBs6B,GAAqBl5B,IALA,IAACW,EAMnB2c,EAAc4b,EAASl5B,GANJW,EAOD,CAAE,CAACu4B,GAAUl5B,GANnCs4B,EAAa1R,QAAU,OAAH,wBAAQ0R,EAAa1R,SAAYjmB,KAQrD,CAAC2c,IAGCpW,GAAmB,IAAA6D,UACrB,IACIshC,GAAyC,CACrC5U,cAAa,GACb3yB,cAER,CAACA,EAAU,KAgBf,IAbA,IAAAyK,YAAU,KACNnK,GAAa,GACb2c,EAAoB1T,EAAQnH,KAC7B,CAACA,EAAkBmH,EAAQ0T,EAAqB3c,KAEnD,IAAAmK,YAAU,KACN,MAAM+8B,EA3Ia,MACnB,MAAMlT,EAAUr0B,EAAc0D,KAAK4wB,oBAEnC,GAAID,IAAYA,EAAQ5B,QACpB,OAAOF,GAAe8B,EAAQ5B,SAAS,IAuIvB8B,GAEhBgT,GACAhvB,EAAc,0BAA2BgvB,EAAYjV,YAE1D,KAEElV,EACD,OAAO,KAGX,MAAM4F,EAAmB,CACrBC,YAAaA,IACb5iB,gBAGJ,OACI,uBAAK8T,MAAO,CAAEqgB,aAAc,SACxB,gBAAC5hB,EAAA,GAAYF,SAAQ,CAACzX,MAAO+nB,GACxB,GAAcxjB,KAAK5D,GAEZ,gBAAC64B,GAAA,EAAgB,CACbC,WAAY,uBAAuB94B,EAAMnB,KACzCmB,MAAOA,EACP6D,IAAK7D,EAAMnB,GACXY,MAAO0E,EAASoB,UAAUvF,EAAMP,OAChCc,SAAUJ,EAAaH,EAAMnB,YAWrD,CAAC,CAAEmW,QAAS,mCAAoCnW,GAAI,aCjNxD,IAAe,EAAA0mB,GAAA,IAtBV,I,IAAA,gBAAE1d,EAAe,WAAE+jC,GAAa,GAAK,EAAKlsC,GAAI,cAA9C,kCACD,MAAMmsC,GAAiC,IAAA5tC,cAClCsoB,GACG1e,EAAgBgH,kBAAkB,OAAD,wBAC1B0X,GAAO,CACVulB,cAAe,CACXC,gBAAiBH,OAG7B,CAAC/jC,EAAiB+jC,IAGtB,OACI,gBAAC7iB,GAAsB,iBACfrpB,EAAI,CACRmI,gBAAiBA,EACjBoH,oBAAqBpH,EAAgBoH,oBACrCJ,kBAAmBg9B,OAO3B,CAAC,CAAEhtC,GAAI,mBC4HX,GA3I2D,EACvDgJ,kBACAzD,gBACAgL,cACAH,sBACAJ,oBACAnB,a,MAEA,MAAOmT,EAAiBmrB,IAAsB,IAAA9zB,WAAS,IAChD4D,EAAsBmwB,IAA2B,IAAA/zB,eAA6B7L,IAE/E,YAAE4Y,EAAW,eAAEzP,GAAmBpR,EAAc0D,KAEhDmZ,IAD0B,QAAb,EAAAgE,WAAa,eAAEC,UACkBljB,QAAQ0L,EAAOlF,OAAO2c,oBAE1E,IAAAvW,YAAU,KACFqS,GACKpZ,EAAgBsZ,oBAE1B,CAACtZ,EAAiBoZ,IAErB,MAAMxL,GAAc,IAAArL,UAAQ,IAAMoL,EAAe9H,IAAW,IAAI,CAAC8H,EAAgB9H,IAC3EoU,EAA+Bb,GAAgCxL,EAAY9R,OAAS,EACpFoe,GAAgCD,GAAgCjB,EAEhEC,GAAyB,IAAA7iB,cAAY,KACvC,IAAI4iB,GAIApL,EAAY9R,OAAS,EAAG,CAIxB,OAFI8R,EAAY7D,MAAMrC,GAAeA,EAAWmR,qBAAsBjL,EAAY,IAEzDU,WAC7B,IACD,CAACV,EAAaoL,KAEjB,IAAAjS,YAAU,KACN,MAAMs9B,EAAsBprB,UAA4BzU,EAExD4/B,EAAwBC,KACzB,CAACprB,EAAwBrL,IAE5B,MAAM,cAAEkH,GAAkBhG,KAAwBE,aAqD5C,qBAAEiI,GAAyB1a,EAAcC,SAE/C,OACI,gBAAC6Y,GAAA,EAAc,aACD,2BACViF,wBAAsB,EACtBzc,UAAWoZ,KAEX,uBAAK1hB,UAAU,yBACV0kB,GACG,gBAAC,G,CAEGrM,YAAaA,EACbsH,mBA3DkCle,IACvB,IAAvB4W,EAAY9R,QACZqoC,GAAmB,GACnBC,OAAwB5/B,GAExBsQ,EAAc,eAAgB,KACvBb,IAAyBjd,IAChCotC,EAAwBnrB,KAExBnE,EAAc,eAAgBmE,OAmDlB/E,mBAjEkCld,IAClDmtC,GAAmB,GACnBC,EAAwBptC,IAgERmd,mBAhDiB,KACjCgwB,GAAmB,GACnBC,OAAwB5/B,GAEnB4C,IAEAJ,KA2CWiN,qBAAsBA,GAAwBgF,MAGtD,uBACI1jB,UAAW,IAAW,SAAU,WAAWsQ,EAAO7O,KAAM,kBAAiB,YAC9DuQ,EACXmJ,MAAO,CACHsH,QAAUkC,OAAwC1V,EAAT,QAE7C6W,UAAW,GA/CnB,mCAAe,4BAA4B3K,MAAO,CAAEsH,QAAS,SACzD,uBAAKziB,UAAU,cACX,uBACIA,UAAU,0CACVyB,GAAG,qBAEP,uBAAKzB,UAAU,0CAA0CyB,GAAG,oBAEhE,uBAAKzB,UAAU,cACX,uBACIA,UAAU,gGACVyB,GAAG,kBAGX,uBAAKzB,UAAU,gCACX,uBAAKA,UAAU,qBAAqByB,GAAG,mBACvC,uBAAKzB,UAAU,0CAA0CyB,GAAG,mBAkC5D,uBAAKA,GAAIuQ,KAGZ6R,GACG,gBAAC,GAAuB,CACpB7K,aAAc0F,EACdrG,YAAaA,OCYrC,IAAe,EAAA8P,GAAA,IA5JsD,EACjE7X,SACA7F,kBACAzD,oBAEA,MAAM+nC,EAAuB,CAACttC,EAAYq0B,KACtC,MAAMjI,EAAYlQ,SAASqxB,cAA8B,IAAIvtC,KAE7D,IAAKosB,EACD,MAAM,IAAI7lB,MACN,iEAAiEvG,oBAIzE,OAAO,EAAA80B,GAAA,GAAiB1I,EAAWiI,IAGjCmZ,GAAgC,IAAApuC,cAAY,KAC9C,MAAMm2B,EAAa,CACf,kBACA,cACA,eACA,cACA,QACA,WACA,cAGJ,MAAO,CACHM,QAAS,CACLrvB,QAAS8mC,EAAqB,mBAAoB,CAAC,UACnDpmC,MAAOomC,EAAqB,iBAAkB/X,IAElDO,MAAO,CACH5uB,MAAOomC,EACH,gBACA,IAAAG,YAAWlY,EAAY,CAAC,mBAGhC9tB,MAAO,CACHjB,QAAS8mC,EAAqB,iBAAkB,CAAC,UACjDpmC,MAAOomC,EAAqB,eAAgB,CACxC,cACA,cACA,cAIb,IAEGI,GAAoB,IAAAtuC,cACrBw2B,IACG,MAAM,EAAuDA,EAAOC,QAAQ3uB,OAAtE,YAAE+mB,EAAW,aAAEC,EAAY,YAAEC,GAAW,EAAKjnB,GAAK,cAAlD,8CACA,EAIF0uB,EAAOE,MAAM5uB,OAHb+mB,YAAa0f,EACbxf,YAAayf,GAAkB,EAC5BC,GAAY,cAHb,gCAMF5f,YAAa6f,EACb3f,YAAa4f,EACbzf,MAAO0f,GACPpY,EAAOnuB,MAAMP,MAEjB,MAAO,CACHA,QACA,iBAAkB,OAAF,UACT2mC,GAEP,iBAAkB,CACdvf,MAAO0f,GAEX,mBAAoB,CAChB/f,cACAC,eACAC,eAEJ,4BAA6B,CACzBF,YAAa0f,EACbxf,YAAayf,GAEjB,4BAA6B,CACzB3f,YAAa6f,EACb3f,YAAa4f,GAEjB,gBAAiB,CACbzf,MAAOsH,EAAOC,QAAQrvB,QAAQ8nB,OAElC,gBAAiB,CACbA,MAAOsH,EAAOC,QAAQrvB,QAAQ8nB,OAElC,yBAA0B,CACtBA,MAAOsH,EAAOnuB,MAAMjB,QAAQ8nB,OAEhC,yBAA0B,CACtBA,MAAOsH,EAAOnuB,MAAMjB,QAAQ8nB,UAIxC,IAGE/d,EAAc,qCAEdP,GAAoB,IAAA5Q,cAAY,KAAY,iDAC9C,IAAIsa,EAEJ,IACIA,EAAQg0B,EAAkBF,IAC9B,CAAE,SAEF,OAEMxkC,EAAgBgH,kBAAkB,CACpC3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,GACjBiuC,SAAU,CACN19B,cACAmJ,UAGZ,KAAG,CACC1Q,EACAwkC,EACAE,EACA7+B,EAAOsH,QACPtH,EAAO7O,KAGLoQ,GAAsB,IAAAhR,cAAY,KAAY,uDAC1C4J,EAAgBoH,oBAAoB,CACtC/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,KAAG,CAACgJ,EAAiB6F,EAAOsH,QAAStH,EAAO7O,KAU5C,OARA,IAAA+P,YAAU,KACDC,IAEE,KACEI,OAEV,CAACA,EAAqBJ,IAGrB,gBAAC,GAAY,CACThH,gBAAiBA,EACjBzD,cAAeA,EACfgL,YAAaA,EACbH,oBAAqBA,EACrBJ,kBAAmBA,EACnBnB,OAAQA,MAOhB,CAAC,CAAE7O,GAAI,c,gBCrKX,MAAMstC,GAAuB,CACzBY,EACA7Z,EACA8Z,KAEA,MAAMtZ,EAAU3Y,SAASqxB,cAA2BW,GAEpD,OAAOrZ,GAAU,EAAAC,GAAA,GAAiBD,EAASR,EAAY8Z,GAAyB,CAAC,GAG/EC,GAAqB,CAAC/jC,EAAwB,IAChC,iBAATA,EAAoBgkC,SAAShkC,EAAM,IAAMA,EAgCvCikC,GAAW,CAACJ,EAAW,wBAChC,MAAMK,EAAoCryB,SAASsyB,iBAAiBN,GAC9DO,EAA4B,GAUlC,OARAF,EAAa3hB,SAASiI,IAClB,MAAM6Z,EAAU7Z,aAAO,EAAPA,EAAS8Z,aAAa,QAElCD,GACAD,EAAMG,KAAK,CAAEC,OAAQH,OAItBD,GAGEK,GAA8Bv+B,IACvC,MAAMw+B,EAAoC,OACpCC,EAAkC,OAGlCC,EAAkB3B,GAAqB,IAAI/8B,WAAsB,CACnE,QACA,mBACA,eACA,aACA,gBAEE2+B,EAAkB5B,GAAqB,IAAI/8B,WAAsB,CAAC,UAClE4+B,EAAkB7B,GAAqB,IAAI/8B,WAAsB,CAAC,UAClE6+B,EAAwB9B,GAC1B,IAAI/8B,kCACJ,CACI,QACA,YACA,cACA,cACA,cACA,gBACA,mBAGF8+B,EAAgC/B,GAClC,IAAI/8B,+BACJ,CAAC,qBAEC++B,EAAsBhC,GACxB,IAAI/8B,4DACJ,CAAC,gBAAiB,kBAGlB+d,MAAOihB,EACP,YAAaC,EACb,cAAeC,EACf,cAAeC,EACf,cAAeC,EAAsBX,EACrC,gBAAiBY,EAAwBb,EACzC,iBAAkBc,EAAyBb,GAC3CI,EACEU,GAA0B,IAAAC,SAAQX,QAElC5hC,EADA,GAAGmiC,KAAuBC,KAAyBC,KAA0Bd,IAE7EiB,EAAa1C,GACf,IAAI/8B,kCACJ,CAAC,eAAgB,eAAgB,SACjC,YAEE0/B,EAAoB3C,GACtB,IAAI/8B,2CACJ,CAAC,gBACD,YAEE2/B,EArGgB,CAACC,IACvB,MAAM,oBACFC,EAAsB,GAAE,0BACxBC,EAA4B,EAAC,oBAC7BC,EAAsB,IACtBH,GAAS,CAAC,EAIRI,EAAanC,GAAmBgC,GAChCI,EAAmBpC,GAAmBiC,GACtCI,EAAarC,GAAmBkC,GAYtC,MAAO,CACHC,WAAY,IAXeA,EAPE,KAOqCG,QAAQ,OAY1EF,iBAAkB,IAVjBA,EAAmBD,EAPMI,IAS5BD,QAAQ,OASNE,aAPEH,EAAaF,EAXWI,GAY1B,GACFD,QAAQ,KAgFYG,CAAkB,CACpCT,oBAAqBJ,EAAW/xC,MAChCoyC,0BAA2BL,EAAW,gBACtCM,oBACIN,EAAW/xC,OAzDgB,IAyDPmwC,GAAmB4B,EAAW/xC,SAEpD6yC,EAAiBd,EAAW,gBAC5Be,EAAsBd,EAAkB,gBAE9C,MAAO,CACHtiB,UAAW,CACPqjB,aAAc/B,EAAgB,cAC9BphB,gBAAiBohB,EAAgB,oBACjCgC,UAAW/B,EAAgB5gB,MAC3B4iB,YAAa/B,EAAgB7gB,MAC7B6iB,mBAAoBjC,EAAgB5gB,MACpC8iB,qBAAsBnC,EAAgB3gB,MACtC+iB,UAAWpC,EAAgB3gB,MAC3BV,WAAY6hB,GAA6BR,EAAgB,gBAE7D7gB,MAAO,CACH,SAAU,CACNH,YAAaghB,EAAgB,gBAC7B3gB,MAAO2gB,EAAgB3gB,MACvBgjB,UAAWrC,EAAgB,eAE/B,iBAAkB,CACd/gB,aAAc,EACdC,YAAa,EACbojB,aAAcjC,EAAoB,iBAClCrhB,YAAaqhB,EAAoB,gBACjCgC,UAAW,OACX/iB,SAAUihB,EACV1f,WAAY4f,EACZphB,MAAOihB,EACPzL,QAASgM,GAEb,uBAAwB,CACpBzhB,gBAAiBghB,EAA8B,oBAC/C/gB,MAAOihB,GAEX,2BAA4B,CACxBzf,WAAY,OACZxB,MAAOihB,EACPlhB,gBAAiBghB,EAA8B,qBAEnD,YAAa,CACT/gB,MAAOihB,GAEX,aAAc,CACVtxC,MAAOiyC,EAAcK,YAEzB,kBAAmB,CACfiB,EAAGtB,EAAcU,YACjBl2B,KAAMq2B,GAEV,kBAAmB,CACflhB,YAAaqgB,EAAcM,iBAC3B11B,OAAQg2B,GAEZ,2BAA4B,CACxBh2B,OAAQi2B,MCaxB,IAAe,EAAArqB,GAAA,IAxKwD,I,IAAA,YACnE1O,EAAW,cACXzS,EAAa,gBACbyD,EAAe,OACf6F,EAAM,iBACNiB,EAAmB,EAAA3N,MAAI,EACpBtB,GAAI,cAN4D,+EAQnE,MAAM4wC,GAAwB,IAAA9qB,WACxB,SAAE9nB,EAAQ,eAAEC,IAAmB,IAAAC,YAAWC,GAAAC,IACzCyyC,EAAcC,IAAmB,IAAAt4B,WAAS,GAC3Cu4B,EAAiB,GAAG/iC,EAAOsH,WAAWtH,EAAO7O,KAC7CuQ,EAAc,GAAGqhC,oBACjBpL,EAAiBxuB,GAEvB,IAAAjI,YAAU,K,OACFjR,aAAc,EAAdA,EAAgBsN,SAAS,GAAGyC,EAAOsH,cAIV,QAA7B,EAAAs7B,EAAsBrqB,eAAO,mBAC9B,CAACtoB,EAAgB+P,EAAOsH,UAE3B,MAAM07B,GAAqB,IAAAzyC,cAAY,KACnConC,EAAevgB,wBAAwBpX,GAAQ,KAChD,CAAC23B,EAAgB33B,KAEd,wBACFoX,EAAuB,cACvBC,EAAa,cACbpI,EAAa,UACb+E,EAAS,oBACTN,GACAvK,EACEpB,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,IAG7D5F,MAAM,YAAEyhB,EAAW,sBAAE/H,GACrBnd,UAAU,qBAAEya,IACZ1a,EACEolB,EAAWD,IAEXonB,GAA0B,IAAA1yC,cACrBsoB,IAAsC,iDAGzC,OAFAiqB,GAAgB,GAET3oC,EAAgBgH,kBAAkB,OAAD,wBACjC0X,GAAO,CACVqqB,UAAW,CACPxhC,cACAyhC,OAAQ,CACJ5xC,KAAM,YACN6xC,iBAAkBnzC,IAAmB8yC,EACrCM,QAAQ,EACRC,iBAAiB,EACjBC,sBAAsB,EACtBC,2BAA4B,GAEhCC,WAAYxD,GAA2Bv+B,GACvCk+B,MAAOH,KACP9hB,QAAS1c,EACTnO,OAAQkwC,EACRU,oBAAqB1zC,EACrB2zC,yBAA2BC,IACvBhB,EAAsBrqB,QAAUqrB,GAEpCC,gBAAiBf,KAG7B,KACA,CACIphC,EACAzR,EACA8yC,EACA5oC,EACA8G,EACA+hC,EACAhzC,EACA8yC,IAyDR,OACI,gCACKD,EAPL,mCAAe,4BAA4Bh4B,MAAO,CAAEoqB,QAAS,cACzD,gBAAC6O,EAAA,EAAiB,OAhDtB,6BACK,kDACkCf,kHAGAA,+FAmDnC,gBAAC,GAA4B,iBACrB/wC,EAAI,CACR0P,YAAaA,EACbH,oBAAqBpH,EAAgBoH,oBACrC8V,cAAeA,EACfnC,0BAAwB,EACxBkC,wBAAyBA,EACzBjW,kBAAmB8hC,EACnBl7B,YAAaA,EACb+O,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAC5Bre,GAEJ6c,8BAA8B,EAC9BnC,qBAAsBA,IACtB0C,sBAAuBA,IACvBsB,YAAY,IAAA2G,MAAKD,aAAQ,EAARA,EAAUE,SAAU,CAAEC,WAAYjc,EAAO7O,KAC1DsiB,gBAAiBtZ,EAAgBsZ,gBACjCzT,OAAQA,EACRiP,cAAeA,EACf+E,UAAWA,EACXN,oBAAqBA,EACrBgE,QAASvd,EAAgBwd,mBAjEjC,uBAAK9M,MAAO,CAAEsH,QAAS,SACnB,uBACIziB,UAAU,4DACVyB,GAAI,GAAGuQ,uBAEP,yBACIhS,UAAU,oEACVyB,GAAI,GAAGuQ,gBACPnQ,KAAK,UAET,uBAAK7B,UAAU,6CAEnB,uBACIA,UAAU,kCACVyB,GAAI,GAAGuQ,gCAEP,yBACIhS,UAAU,oEACVq0C,gBAAc,EACd5yC,GAAI,GAAGuQ,yBACPnQ,KAAK,UAET,uBAAK7B,UAAU,6CAEnB,uBAAKA,UAAU,+BAA+ByB,GAAI,GAAGuQ,YACjD,uBAAKhS,UAAU,qBACX,uBAAKA,UAAU,+BAA+ByB,GAAI,GAAGuQ,cAEzD,uBAAKhS,UAAU,+BAA+ByB,GAAI,GAAGuQ,kBA8CjE,CAAC,CAAE4F,QAAS,YAAanW,GAAI,wBCzCjC,IAAe,EAAA0mB,GAAA,IA1IwD,I,IAAA,YACnE1O,EAAW,cACXzS,EAAa,gBACbyD,EAAe,OACf6F,EAAM,iBACNiB,EAAmB,EAAA3N,MAAI,EACpBtB,GAAI,cAN4D,+EAQnE,MAAM0P,EAAc,UAAU1B,EAAO7O,qBAC/BwmC,EAAiBxuB,EAEjB65B,GAAqB,IAAAzyC,cAAY,KACnConC,EAAevgB,wBAAwBpX,GAAQ,KAChD,CAAC23B,EAAgB33B,KAEd,wBACFoX,EAAuB,cACvBC,EAAa,cACbpI,EAAa,UACb+E,EAAS,oBACTN,GACAvK,EACEpB,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,IAG7D5F,MAAM,YAAEyhB,EAAW,sBAAE/H,EAAqB,2BAAEsU,GAC5CzxB,UAAU,qBAAEya,IACZ1a,EACEolB,EAAWD,IACXvE,EAAW5gB,EAAc0D,KAAKmd,cAC9B8Q,EAA0BD,IAC1B4b,EAA4B3b,aAAuB,EAAvBA,EAAyB4b,8BACrD/T,EAAkB5Y,aAAQ,EAARA,EAAUE,QAQ5BjE,GAP6B,IAAA7W,UAAQ,OAClCwzB,GAAmB8T,IAKzB,CAAC9T,EAAiB8T,MAEc9T,GAAmB57B,QAAQ0L,EAAOlF,OAAO2c,mBAEtEgnB,EAAuB,CAACttC,EAAYq0B,KACtC,MAAMG,EAAkBtY,SAASC,eAAenc,GAEhD,IAAKw0B,EACD,MAAM,IAAIjuB,MACN,8EAIR,OAAO,EAAAuuB,GAAA,GAAiBN,EAAiBH,IAGvCyd,GAA0B,IAAA1yC,cACrBsoB,IAAsC,iDACzC,MAAMqrB,EAAYzF,EAAqB,GAAG/8B,WAAsB,CAC5D,QACA,mBACA,eACA,eAEEyiC,EAAY1F,EAAqB,GAAG/8B,WAAsB,CAAC,UAC3D0iC,EAAY3F,EAAqB,GAAG/8B,WAAsB,CAAC,UAIjE,OAFAi2B,EAAevgB,wBAAwBpX,GAAQ,GAExC7F,EAAgBgH,kBAAkB,OAAD,wBACjC0X,GAAO,CACVwrB,UAAW,CACP3iC,cACAmJ,MAAO,CACHy5B,UAAWH,EAAU1kB,MACrB8kB,UAAWL,EAAUzkB,MACrB+kB,qBAAsBN,EAAUzkB,MAChCglB,eAAgBL,EAAU3kB,MAC1BilB,gBAAiBR,EAAU,oBAC3BS,iBAAkBT,EAAU,cAC5BU,YAAaV,EAAU,iBAE3BvmB,QAAS1c,EACTnO,OAAQkwC,KAGpB,KACA,CACI7oC,EACAuH,EACAT,EACAjB,EACA23B,EACAqL,IAeR,OACI,gCACI,gBAAC,GAA4B,iBACrBhxC,EAAI,CACR0P,YAAaA,EACbH,oBAAqBpH,EAAgBoH,oBACrC8V,cAAeA,EACfnC,0BAAwB,EACxBkC,wBAAyBA,EACzBjW,kBAAmB8hC,EACnBl7B,YAAaA,EACb+O,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAC5Bre,GAEJ6c,6BAA8BA,EAC9BnC,qBAAsBA,IACtB0C,sBAAuBA,IACvBsB,YAAY,IAAA2G,MAAKD,aAAQ,EAARA,EAAUE,SAAU,CAAEC,WAAYjc,EAAO7O,KAC1DsiB,gBAAiBtZ,EAAgBsZ,gBACjCzT,OAAQA,EACRiP,cAAeA,EACf+E,UAAWA,EACXN,oBAAqBA,EACrBgE,QAASvd,EAAgBwd,mBAjC7B,uBAAKjoB,UAAU,+BAA+ByB,GAAI,GAAGuQ,YACjD,uBAAKhS,UAAU,qBACX,uBAAKA,UAAU,+BAA+ByB,GAAI,GAAGuQ,cAEzD,uBAAKhS,UAAU,+BAA+ByB,GAAI,GAAGuQ,iBAsCjE,CAAC,CAAE4F,QAAS,aAAe,CAAEA,QAAS,YAAanW,GAAI,YCpE3D,GAnEqF,EACjF0nB,aAEA,uBAAKnpB,UAAU,iBACX,uBAAKA,UAAW,IAAW,aAAc,gCACrC,yBACIA,UAAU,0CACV+B,QAASonB,EAAQqjB,yBAAyBx6B,aAE1C,gBAAC5M,EAAA,EAAgB,CAAC3D,GAAG,sCAEzB,uBACIzB,UAAW,IACP,aACA,+BACA,WACA,0BACH,WACQ,aACTyB,GAAI0nB,EAAQqjB,yBAAyBx6B,cAEzC,gBAAC,GAAQ,OAEb,uBAAKhS,UAAU,mCACX,yBACIA,UAAU,0CACV+B,QAASonB,EAAQwjB,yBAAyB36B,aAE1C,gBAAC5M,EAAA,EAAgB,CAAC3D,GAAG,0CAEzB,uBACIzB,UAAW,IACP,aACA,+BACA,0BACH,WACQ,aACTyB,GAAI0nB,EAAQwjB,yBAAyB36B,eAG7C,uBAAKhS,UAAU,yCACX,yBACIA,UAAU,0CACV+B,QAASonB,EAAQujB,sBAAsB16B,aAEvC,gBAAC5M,EAAA,EAAgB,CAAC3D,GAAG,kCACrB,gBAACkwB,GAAA,EAAc,CAACxU,UAAU,YAAYyU,QAAS,gBAAC,GAAqB,OACjE,wBAAM5xB,UAAU,WACZ,gBAAC6xB,GAAA,EAAQ,SAIrB,uBACI7xB,UAAW,IACP,aACA,+BACA,WACA,0BACH,WACQ,eACTyB,GAAI0nB,EAAQujB,sBAAsB16B,cAEtC,gBAAC,GAAQ,QCjDrB,IAAYmjC,IAAZ,SAAYA,GACR,kBACA,cACA,oBACA,0BACA,0BACA,cACA,uBACH,CARD,CAAYA,KAAAA,GAAiB,KAU7B,MAkMA,IAAe,EAAAhtB,GAAA,IAlMuD,I,IAAA,SAClEphB,EAAQ,YACR0S,EAAW,cACXzS,EAAa,gBACbyD,EAAe,OACf6F,EAAM,iBACNiB,EAAmB,EAAA3N,MAAI,EACpBtB,GAAI,cAP2D,0FASlE,MAAM,wBAAE8yC,GAA4B9kC,EAAO8E,mBAErCigC,EAAoB/kC,EAAO7O,GAC3B6zC,EACFD,IAAsBF,GAAkBI,OAClC,gDACA,GACJvjC,EAAc,UAAUqjC,oBACxBG,GAA+B,IAAAxoC,UAAQ,KACzC,MAAMyoC,EAAU,CACZvxC,KAAM,2CAGV,MAAO,CACH,CAACixC,GAAkBO,MAAO,CACtBD,WAEJ,CAACN,GAAkBQ,SAAU,CACzBF,UACAvjB,YAAa,IAEjB,CAACijB,GAAkBS,YAAa,CAC5BH,WAEJ,CAACN,GAAkBj7B,YAAa,CAC5Bu7B,UACAI,UAAU,EACV3jB,YAAa,IAEjB,CAACijB,GAAkBW,MAAO,CACtBL,UACAM,mBAAoB,CAAC,SAEzB,CAACZ,GAAkBa,WAAY,CAC3BP,cAGT,KAEG,wBACF/tB,EAAuB,cACvBC,EAAa,cACbpI,EAAa,UACb+E,EAAS,oBACTN,GACAvK,GAEA/O,MAAM,YAAEyhB,EAAW,sBAAE/H,EAAqB,YAAEyD,EAAW,UAAEld,GACzD1D,UAAU,qBAAEya,IACZ1a,EAEEolB,EAAWD,IACXvE,EAAWC,IACXzc,EAAST,IACT0N,EAAcrR,EAAc0D,KAAK0N,eAAe9H,IAAW,GAE3DuT,IADkB+D,aAAQ,EAARA,EAAUE,UAEVljB,QAAQ0L,EAAOlF,OAAO2c,mBAExCkuB,GAAW,IAAAjpC,UAAQ,IAChB5B,EAIEA,EAAO8qC,MAAMC,SAHT,MAIZ,CAAC/qC,IAEEgrC,GAA2B,IAAAv1C,cAC5BqI,IACsB,mBAAfA,EAAMrH,MAA+C,iBAAlBqH,EAAM0E,UACzC1E,EAAMjB,QAAUlB,EAASoB,UAAU,mCAGvCoJ,EAAiBrI,KAErB,CAACnC,EAAUwK,IAGT8kC,GAAkC,IAAAx1C,cACnCy1C,IACU,CACH9J,yBAA0B,OAAF,wBACjB8J,EAAwBnB,GAAkBj7B,aAAW,CACxDlI,YAAa,uCAEjB26B,yBAA0B,OAAF,wBACjB2J,EAAwBnB,GAAkBS,aAAW,CACxD5jC,YAAa,kCAEjB06B,sBAAuB,OAAF,wBACd4J,EAAwBnB,GAAkBQ,UAAQ,CACrD3jC,YAAa,kCAIzB,IAGEukC,GAAmB,IAAA11C,cACpBy1C,GACOlB,EACOiB,EAAgCC,GAGpCA,EAAwBjB,IAEnC,CAACA,EAAmBgB,EAAiCjB,KAGnD,sCAAErd,EAAqC,qBAAEhB,GAAyB0W,GAAoB,CACxFzmC,gBACAsJ,SACAvJ,WACA0S,gBAGE85B,GAA0B,IAAA1yC,cAC5B,CAAOsoB,EAAmCzO,KAA4B,iDAClE,OAAOjQ,EAAgBgH,kBAAkB,OAAD,wBACjC0X,GAAO,CACVqtB,SAAU,OAAF,QACJxkC,cACAmX,QAASotB,EAAiBf,IACtB96B,GAAsB,CACtB4E,WAAYyX,EAAqBrc,OAIjD,KACA,CAAC1I,EAAaukC,EAAkBf,EAAe/qC,EAAiBssB,IAapE,OACI,gCACI,gBAAC,GAA4B,iBACrBz0B,EAAI,CACRqjB,6BAA8B2vB,EAC9BtjC,YAAaA,EACbH,oBAAqBpH,EAAgBoH,oBACrC8V,cAAeA,EACfnC,0BAAwB,EACxBkC,wBAAyBA,EACzBjW,kBAAmB8hC,EACnBl7B,YAAaA,EACb+O,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAC5Bre,GAEJ6c,6BAA8BA,EAC9BnC,qBAAsBA,IACtB0C,sBAAuBA,IACvBsB,YAAY,IAAA2G,MAAKD,aAAQ,EAARA,EAAUE,SAAU,CAAEC,WAAYjc,EAAO7O,KAC1DsiB,gBAAiBtZ,EAAgBsZ,gBACjCzT,OAAQA,EACRiB,iBAAkB6kC,EAClBvwB,wBAjCoB,KAC5B,MAAM4wB,EAAoBJ,EAAgCb,GAE1D,OAAO,gBAAC,GAAsB,CAACrsB,QAASstB,KA+BhCl3B,cAAeA,EACf+E,UAAWA,EACXN,oBAAqBA,EACrB4B,6BAA8BwvB,EAC9BptB,QAASvd,EAAgBwd,gBACzBzF,mBAjCe,CAACgrB,EAA4B9yB,IAC7Cqd,EAAsCrd,MAkC1B,SAAdpK,EAAO7O,IACJ,qBAAGzB,UAAU,kCACT,gBAACoF,EAAA,EAAgB,CACbsF,KAAM,CAAEurC,YACRx0C,GAAG,+CAUvB,CAAC,CAAEmW,QAAS,cC2ChB,IAAe,EAAAuQ,GAAA,IAlPiE,I,IAAA,SAC5EphB,EAAQ,YACR0S,EAAW,cACXzS,EAAa,gBACbyD,EAAe,OACf6F,GAAM,EACHhO,GAAI,cANqE,uEAQ5E,MAAOo0C,EAA0BC,IAA+B,IAAA77B,aACzDma,EAAkB2B,IAAuB,IAAA9b,aAC1C,sCAAEid,GAA0C0V,GAAoB,CAClEzmC,gBACAsJ,SACAvJ,WACA0S,iBAEE,gBAAE6U,EAAe,cAAE/O,EAAa,aAAElY,EAAY,WAAEP,GAAe2S,EAE/D4a,EAAmC,GAAqCrtB,GACxEse,EACF,GAAuCte,IAGvCoE,QAAQ,SAAE4b,IACV1W,EACEiiB,EAAqBvL,GAAyB,OAAbA,EACjC8P,GAA6C,IAAAj2B,cAC9C0B,GACU,IAAG,IAAAwM,SAAQ,CAACuB,EAAOsH,QAAStH,EAAO7O,KAAKsM,KAAK,QAAQxL,KAEhE,CAAC+N,IAGCs7B,EAAmCzT,GAAoC,CAAEpxB,aAEzEjC,GAAM,IAAAsjB,QAAiC,CACzC6W,uBAAuB,IAAAvO,eAErBqG,GAEkC,IAAAl2B,cAC7B6Z,IAAuB,iDAC1B,MAAMsc,EAAa,CAAC,QAAS,aAAc,WAAY,cACjD3R,IAAiC3K,GACjC4K,EAAmC5K,GAEnC0M,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAErD4mB,EAAmBxc,EACnB0M,EACI0P,EAAiB,cACjB7nB,EACJ6nB,EAAiB,YAEvB,MAAO,CACHK,OAAQzc,EACF,CACI+a,qBACIrO,GAAgC1M,EAC1B,CACI0c,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,SAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,EACVymB,uBACIrQ,GAAkC3K,EAC5B,CACI0c,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,YAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,GAEd,CACI+X,SAAUuL,EACJ,CACI6E,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,eAElC7nB,EACNomB,WAAY,CACR+B,mBAAoBrwB,EAASoB,UACzB,wCAEJ6J,YAAa8kB,EAAiB,YAC9B5E,YAAanrB,EAASoB,UAClB,oDAGRmtB,SAAU,CACN8B,mBAAoBrwB,EAASoB,UACzB,kCAEJ6J,YAAa8kB,EAAiB,WAElCvB,WAAY,CACR6B,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,cAG5CO,OAAQH,EACF,CACII,cAAezB,GAAyBqB,EAAkBF,GAC1D9tB,YAAa2sB,GACTqB,EACAF,EACApB,GAA0B5tB,OAE9BuvB,YAAa1B,GACTqB,EACAF,EACApB,GAA0BS,QAGlC,CAAC,EACPmB,OAAQ,EAAGzc,gBACHka,IAAqBla,GACrB6b,OAAoB3nB,IAG5BwoB,iBAAkB,EAAGtjB,eACjBoL,EAAc,sBAAuBpL,IAEzCujB,QAAS,KACLrwB,GAAa,GACbP,KAEJ6wB,QAAS,EAAG5c,gBACR6b,EAAoB7b,IAExBmT,WAAY,EAAGpmB,SAAS,CAAC,OACrB,IAAA8vB,OAAM9vB,GAAQ,CAAC+vB,EAAc,GAAI9c,K,QAC7B,MAAM+c,EAAW,qBAAqB/c,IAEtCwE,EAAcuY,EAA8B,QAApB,EAAc,QAAd,EAAAD,EAAY,UAAE,eAAEh2B,YAAI,QAAI,IAE5Cg2B,EAAY,IACZvJ,EAAgBwJ,OAKpC,KACA,CACI7C,EACA6B,EACAvE,EACA8B,EACA/O,EACAve,EACAuJ,EACAiP,EACA+O,EACAsI,EACAvvB,EACAP,IAGF8vC,GAA0B,IAAA/1C,cAAY,KACxC81C,OAA4B1nC,GAExBnK,EAAI+jB,QAAQguB,iCACZ/xC,EAAI+jB,QAAQguB,iCACZ/xC,EAAI+jB,QAAQguB,oCAAiC5nC,KAElD,IACG6nC,GAA4B,IAAAj2C,cAC9B,CAAOsoB,EAAmCzO,KAA4B,iDAClE,OAAOjQ,EAAgBgH,kBAAkB,OAAD,wBACjC0X,GAAO,CACVwiB,WAAY,CACRrsB,KAAMyX,UAA+BA,EAAqBrc,KAE9Dq8B,SAAU,CACN,MAAA/tB,CAAO9mB,EAA4B+mB,GAC/B0tB,EAA4Bz0C,GAC5B4C,EAAI+jB,QAAQguB,+BAAiC5tB,CACjD,KAGZ,KACA,CAACxe,EAAiBssB,IAEhB0U,EAAyBvT,GAAoC,CAAEnxB,aAE/Dw4B,GAA2B,IAAA1+B,cAAY,K,MACrC61C,IACyC,QAAzC,EAAA5xC,EAAI+jB,QAAQoW,sBAAsBpW,eAAO,SAAEqN,YAAYwgB,MAE5D,CAACA,IAEJ,OACI,gCACI,gBAAC,GAAgC,iBACzBp0C,EAAI,CACR6xB,aACI,gBAAC,GAAwB,CACrBe,iBACI5kB,EAAOlF,OAAOopB,qBACV,gBAAC,GAA2B,CAACjyB,KAAK,mBAG1CuyB,WAAYvC,EAAqBuE,EAAiB,cAAW7nB,EAC7D+lB,aAAc8B,EAAiB,YAC/B3B,WAAY2B,EAAiB,UAC7B/B,aAAc+B,EAAiB,YAC/B7B,iBAAkBA,IAG1BR,qBAAsBgX,EACtBhhC,gBAAiBA,EACjBzD,cAAeA,EACf6K,oBAAqBpH,EAAgBoH,oBACrCuiB,gCAAiC2D,EACjCtmB,kBAAmBqlC,EACnB/vC,SAAUA,EACVuJ,OAAQA,EACRmJ,YAAaA,EACbsM,2BAA4B6lB,KAEhC,gBAAC,KAAK,CACFjiC,SAAU+sC,EACV/1B,YAAa4e,EACb57B,eAAgBizC,EAChB/yC,uBAAuB,GAEvB,uBAAKiB,IAAKA,EAAI+jB,QAAQoW,4BAQlC,CAAC,CAAEx9B,GAAI,oBCnRI,SAASu1C,GACpBC,GAEA,OAAO,EAAAC,GAAA,GAA6DD,EAAO,EAC/E,CCRA,MAEA,IAFoB,EAAAt9B,GAAA,GAAgB,EAAgB,CAAEE,kBAAmB,gB,ICG7D,G,wBAMG,SAAS,GACpB7H,EACA8jB,EACAj0B,EAAkC,GAA0Bk0B,SAE5D,MAAMlI,EAAYlQ,SAASqY,cAAc,OACnCC,EAAkBtY,SAASC,eAAe5L,GAEhD,IAAKikB,EACD,MAAM,IAAIjuB,MACN,8EAMR,OAFAiuB,EAAgBC,YAAYrI,GAErB,IAAIrH,SAASC,IAehB,UACI,gBAAC7M,EAAA,GAAYF,SAAQ,CAACzX,MAAO,CAAEgoB,aAAa,EAAM5iB,aAAc,EAAAzD,OAC5D,gBAAC,KAAkB,CAACwyB,SAAUv0B,IAAS,GAA0BmG,OAC7D,gBAAC,KAAS,CACN6sB,cAAehzB,IAAS,GAA0Bw0B,MAClDvxB,IAnBKwxB,IACZA,IAIL7P,GAAQ,EAAA8P,GAAA,GAAiBD,EAASR,IAElC,0BAAgCjI,GAE5BA,EAAU2I,eACV3I,EAAU2I,cAAcC,YAAY5I,SAaxCA,KAGZ,EAjDA,SAAY+H,GACR,oBACA,gBACA,eACH,CAJD,CAAY,QAAyB,KCErC,MAuBA,IAAe,IAAA/1B,OAvB0E,EACrF0C,WAEA,MAAMG,GAAc,IAAA7B,cAChB,EAAG+B,WAAwB,gBAAC,KAAS,iBAAKA,EAAK,CAAEnB,GAAImB,EAAML,SAC3D,IAGEqK,GAAe,IAAAI,UACjB,IACI,gCACI,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,4CAA6C,IAClE,yBAAOzB,UAAU,sCACb,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,4BAIjC,IAGJ,OAAO,gBAACiH,EAAA,EAAS,CAACC,MAAOjG,EAAakK,aAAcA,EAAcrK,KAAMA,OCtB7D,SAAS,IAA6B,OACjD6I,EAAM,SACNwc,EAAQ,cACRjN,EAAa,2BACbw8B,GAA6B,IAE7B,MAAM,iBAAE3rC,GAAqBJ,EAE7B,QAWJ,SAA8BI,EAAoC4rC,GAC9D,OAAQ5rC,EAAiBsf,wBAA0BssB,EAAoBrvB,iBAC3E,CAZQsvB,CAAqB7rC,EAAkBmP,EAAcvP,SACrDwc,EAASE,UACRqvB,EAMT,C,4BC1Be,SAAS,GAA0Bt1C,GAC9C,OAAQA,GACJ,IAAK,OACL,IAAK,mBACD,MAAO,mBAEX,IAAK,SACL,IAAK,cACD,MAAO,cAEX,QACI,OAAOA,EAEnB,CCcA,MAAM,WAAyB,EAAAkd,cAC3B,iBAAAhD,GACI,MAAM,qBAAE2C,GAAyB/C,KAAKja,MAKtCsd,YAAW,IAAMrD,KAAKsD,iBAAiBP,IAC3C,CAEA,kBAAAQ,CAAmBC,GACf,MAAQT,qBAAsBU,GAA6BD,GACrD,qBAAET,GAAyB/C,KAAKja,MAElC0d,IAA6BV,GAC7B/C,KAAKsD,iBAAiBP,EAE9B,CAEA,oBAAA1C,GACI,MAAM,qBAAE0C,EAAoB,MAAE9b,GAAU+Y,KAAKja,MAEzB,KAAhBkB,EAAMX,YAAyCgN,IAAzByP,GACtB/C,KAAKsD,kBAEb,CAEA,MAAA7b,GACI,MAAM,MACFR,EAAK,YACLyV,EAAW,mBACXsG,EAAkB,mBAClBC,EAAkB,qBAClBF,EAAoB,qBACpBqD,GAAuB,GACvBpG,KAAKja,MAEHgZ,GAAqB,IAAAlG,MAAK6D,EAAa,CAAEU,YAAa2F,IAE5D,OACI,uBAAK1e,UAAU,oBACX,gBAAC,KAAe,CACZod,SACI,gBAAC,GAAc,CACX/E,YAAaA,EACbsG,mBAAoBA,EACpBC,mBAAoBA,EACpBF,qBAAsBA,EACtBqD,qBAAsBA,KAI9B,gBAAC,GAAsB,CACnB5P,WAAYuI,EACZqH,qBAAsBA,EACtB9c,OAAO,sBAGX,uCAAOpD,KAAK,UAAae,KAIzC,CAEQ,gBAAAqc,CAAiBjG,EAAe,IACpC,MAAM,KAAEsG,EAAI,MAAE1c,GAAU+Y,KAAKja,MAE7B4d,EAAKC,cAAc3c,EAAML,KAAMyW,EACnC,EAWJ,MAAM,GAAyD,EAC3DX,cACAqG,uBACAqD,wBAAuB,EACvBpD,qBACAC,wBAGI,sBACI5e,UAAU,gFAA+E,YAC/E,0BAETqY,EAAY7R,KAAK2L,GACd,sBACInS,UAAW,IAAW,6CAA8C,CAChE,oCACImS,EAAW4G,cAAgB2F,IAEnCjY,IAAK0L,EAAW4G,aAEhB,gBAAC,GAAgB,CACb5G,WAAYA,EACZzN,QAASia,EACToD,qBAAsBA,EACtB9c,OAAO,gCAKnB,sBAAIjF,UAAU,8EACV,gBAAC,GAAsB,CACnB0E,QAASka,EACT3Z,OAAO,uCAcrB,GAAyE,EAC3EkN,aACA4P,wBAAuB,EACvB9c,SACAP,aAEKyN,EAUD,gBAAC,GAAkB,CACfnS,UAAU,mFACVmS,WAAYA,EACZzN,QAASA,EACTqd,qBAAsBA,EACtB9c,OAAQA,IAbR,gBAAC,GAAsB,CACnBjF,UAAU,mFACViF,OAAQA,IAuBlB,GAA6D,EAC/DkN,aACA4P,wBAAuB,EACvBrd,UAAU,EAAAd,SAEV,MAAMmZ,GAAc,IAAAlc,cAAY,KAC5B6D,EAAQyN,EAAW4G,eACpB,CAACrU,EAASyN,IAEb,OACI,gBAAC,GAAkB,CACfA,WAAYA,EACZzN,QAASqY,EACTgF,qBAAsBA,EACtB9c,OAAO,8BAab,GAAiE,EACnEjF,YACAmS,aACAlN,SACA8c,wBAAuB,EACvBrd,cAEA,MAAMyP,EAAW,GAA0BhC,EAAWiH,OAChD4G,EAAW,iBAA2B7L,GACtC8L,IAAa,IAAAC,gBAAe,CAC9BhS,MAAOiE,EAAWgO,YAClBhS,KAAMgE,EAAWiO,aAClBC,QAEH,OACI,0BAAQrgB,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBACI7B,UAAW,IAAW,2BAA4B,CAC9C,oCAAqCigB,KAGzC,gBAAC,GAAc,CAAC9L,SAAUA,IAE1B,uBAAKnU,UAAU,wBAAuB,YAAY,GAAGiF,WAChD+a,EACG,gBAAC5a,EAAA,EAAgB,CACbsF,KAAM,CAAEsX,UAAWhC,EAASM,SAAU2B,SAAU9P,EAAW8I,OAC3DxZ,GAAG,sCAGP,gBAAC2D,EAAA,EAAgB,CACbsF,KAAM,CAAEuX,SAAU9P,EAAW8I,OAC7BxZ,GAAG,gDAKbsgB,GACE,uBACI/hB,UAAW,IAAW,0BAA2B,CAC7C,mCAAoCigB,IACtC,YACS,GAAGhb,YAEbgb,EACG,gBAAC7a,EAAA,EAAgB,CACbsF,KAAM,CACFwX,WAAY,GAAG/P,EAAWgO,eAAehO,EAAWiO,cAExD3e,GAAG,oCAGP,gBAAC2D,EAAA,EAAgB,CACbsF,KAAM,CACFwX,WAAY,GAAG/P,EAAWgO,eAAehO,EAAWiO,cAExD3e,GAAG,wCAgB7B,GAAyE,EAC3EzB,YACAiF,SACAP,UAAU,EAAAd,QAEV,0BAAQ5D,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBAAK7B,UAAU,6DACX,gBAAC,GAAc,MAEf,uBAAKA,UAAU,yBACX,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,0CAMrC,MC1Se,SAAS,GACpB0Q,GAEA,MAA2B,YAApBA,EAAWtQ,IACtB,CCJe,SAAS,GACpBsQ,GAEA,MAA2B,SAApBA,EAAWtQ,IACtB,CCJe,SAAS,GACpBsQ,GAEA,MAA2B,SAApBA,EAAWtQ,IACtB,C,gBCFA,MAiBA,IAAe,SAjBuB,IAClC,uBAAKrC,OAAO,MAAMC,QAAQ,cAAcC,MAAM,MAAMC,MAAM,8BACtD,wBACIC,EAAE,4LACFuc,KAAK,YAET,wBACIvc,EAAE,iRACFuc,KAAK,YAET,wBACIvc,EAAE,0QACFuc,KAAK,eC4CX,GAAqE,EACvEhK,aACAwN,yBAEA,MAAMC,GAAe,IAAA/e,cAAY,KAC7B8e,EAAmBxN,EAAW4G,eAC/B,CAAC5G,EAAYwN,IAEhB,OACI,0BACI,kCAAc,uCACT,GAAwBxN,GACrB,wBAAMnS,UAAU,2CACZ,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,0DACrB,4BAAO,IAAI0Q,EAAWiM,kBAG1B,gCACI,gBAAC,GAAU,CAACrZ,oBAAoB,mBAAmB+G,KAAM,KAASuI,SAClE,wBAAMrU,UAAU,+CACXmS,EAAW+L,cAK5B,0BACI,0BACIle,UAAU,2EAA0E,YAC1E,kCACV0E,QAASkb,EACT/d,KAAK,UAEL,gBAACuD,EAAA,EAAgB,CAAC3D,GAAG,6BAOzC,IAAe,IAAA5B,OAnFuE,EAClFwY,cACAwH,uBACAF,wBAE2B,IAAvBtH,EAAY9R,OAER,yBACI,gBAACnB,EAAA,EAAgB,CAAC3D,GAAG,gDAM7B,gBAACqe,GAAA,EAAc,CAACxX,UAAWuX,GACvB,yBAAO7f,UAAU,SACb,yBAAOA,UAAU,eACb,0BACI,0BACI,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,gEAEzB,6BAIR,yBAAOzB,UAAU,eACZqY,EAAY7R,KAAK2L,GACd,gBAAC,GAAoB,CACjBA,WAAYA,EACZ1L,IAAK0L,EAAW4G,YAChB4G,mBAAoBA,WCqB1C,GAAqE,EACvExN,aACAwN,yBAEA,MAAMxL,EAAW,GAA0BhC,EAAWiH,OAChD4G,EAAW,iBAA2B7L,GACtC8L,IACD,IAAAC,gBAAe,CACZhS,MAAOiE,EAAWgO,YAClBhS,KAAMgE,EAAWiO,aAClBC,QAEDT,GAAe,IAAA/e,cAAY,KAC7B8e,EAAmBxN,EAAW4G,eAC/B,CAAC5G,EAAYwN,IAEhB,OACI,0BACI,kCAAc,8BACV,gBAAC,GAAc,CAACxL,SAAUA,IAEzB6L,GACG,wBAAMhgB,UAAU,sCAAsCggB,EAASM,WAGvE,kCAAc,2BAA2BnO,EAAW8I,OACpD,sBACIjb,UAAW,IAAW,CAAE,4CAA6CigB,IAAY,YACvE,4BAET,GAAG9N,EAAWgO,eAAehO,EAAWiO,cAE7C,0BACI,0BACIpgB,UAAU,2EAA0E,YAC1E,kCACV0E,QAASkb,EACT/d,KAAK,UAEL,gBAACuD,EAAA,EAAgB,CAAC3D,GAAG,6BAOzC,IAAe,IAAA5B,OAhGwE,EACnFwY,cACAwH,uBACAF,wBAE2B,IAAvBtH,EAAY9R,OAER,yBACI,gBAACnB,EAAA,EAAgB,CAAC3D,GAAG,gDAM7B,gBAACqe,GAAA,EAAc,CAACxX,UAAWuX,GACvB,yBAAO7f,UAAU,SACb,yBAAOA,UAAU,eACb,0BACI,0BACI,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,gEAEzB,0BACI,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,2DAEzB,0BACI,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,6DAEzB,6BAIR,yBAAOzB,UAAU,eACZqY,EAAY7R,KAAK2L,GACd,gBAAC,GAAoB,CACjBA,WAAYA,EACZ1L,IAAK0L,EAAW4G,YAChB4G,mBAAoBA,W,gBC3ChD,MA0BA,IAAe,IAAA9f,OA1BgE,EAAGqJ,YAC9E,MAAM,OAAEqX,GAAWrX,EAEnB,OAAe,MAAXqX,EAEI,gBAAC,GAAA7f,EAAK,CAACmB,KAAM,KAAUmG,OACnB,gBAAC5C,EAAA,EAAgB,CAAC3D,GAAG,iDAK7B8e,GAAU,KAAOA,EAAS,IAEtB,gBAAC,GAAA7f,EAAK,CAACmB,KAAM,KAAUmG,OACnB,gBAAC5C,EAAA,EAAgB,CAAC3D,GAAG,mDAM7B,gBAAC,GAAAf,EAAK,CAACmB,KAAM,KAAUmG,OACnB,gBAAC5C,EAAA,EAAgB,CAAC3D,GAAG,sDCSjC,MAAM,WAA+B,EAAA8Z,UAArC,c,oBAII,KAAAC,MAAqC,CACjCiF,oBAAoB,GAuGhB,KAAAC,gBAA8B,KAClC,MAAM,YAAEC,GAAgBhF,KAAKja,MAE7Bia,KAAKC,SACD,CACI6E,oBAAoB,GAExBE,IAIA,KAAAC,aAA2B,KAC/B,MAAM,WAAE/Z,EAAU,sBAAEia,GAA0BnF,KAAKja,MAE/Cof,GACAja,EAAWia,GAGfnF,KAAKC,SAAS,CACV6E,oBAAoB,KAIpB,KAAAM,oBAAkC,KAAY,+CAClD,MAAM,iBACFC,EAAgB,mBAChBrB,EAAqB,EAAA/b,KAAI,wBACzBqd,EAA0B,EAAArd,KAAI,eAC9BD,EAAiB,EAAAC,MACjB+X,KAAKja,OACH,qBAAEgd,GAAyB/C,KAAKH,MAEtC,GAAKkD,EAIL,UACUsC,EAAiBtC,GACvBiB,EAAmBjB,GACnB/a,GACJ,CAAE,MAAOuF,GACL+X,EAAwB/X,EAC5B,CACJ,IAEQ,KAAAgY,uBAAgDzf,IACpDka,KAAKC,SAAS,CACV6E,oBAAoB,EACpB/B,qBAAsBjd,IAGlC,CAvJI,MAAA2B,GACI,MAAM,sBAAE0d,EAAqB,OAAEnX,EAAM,eAAEhG,GAAmBgY,KAAKja,MAE/D,OACI,gBAACmK,EAAA,EAAK,CACFxI,iBAAkB,gBAAC+B,EAAA,EAAgB,CAAC3D,GAAG,wBACvC6B,OAAQqY,KAAKwF,eACb5d,OACI,gBAACsJ,EAAA,EAAW,KACR,gBAACzH,EAAA,EAAgB,CAAC3D,GAAG,gDAG7BkI,OAAQA,EACRgX,YAAahF,KAAK+E,gBAClB/c,eAAgBA,GAEfmd,GAAyB,gBAAC,GAAsB,CAAC5X,MAAO4X,IAExDnF,KAAKlT,gBAGlB,CAEQ,aAAAA,GACJ,MAAM,YAAE4P,EAAW,qBAAEwH,GAAyBlE,KAAKja,OAE7C,mBAAE+e,GAAuB9E,KAAKH,MAEpC,GAAIiF,EACA,OACI,yBACI,gBAACrb,EAAA,EAAgB,CAAC3D,GAAG,wDAKjC,MAAM2f,EAAkB/I,EAAYnE,OAAO,IAIrCsN,EAA4B,IAHVnJ,EAAYnE,OAAO,OAChBmE,EAAYnE,OAAO,KAI9C,OAAIsN,EAA0Bjb,OAEtB,gBAAC,GAA6B,CAC1B8R,YAAamJ,EACb3B,qBAAsBA,EACtBF,mBAAoBhE,KAAKuF,yBAMjC,gBAAC,GAA0B,CACvB7I,YAAa+I,EACbvB,qBAAsBA,EACtBF,mBAAoBhE,KAAKuF,wBAGrC,CAEQ,YAAAC,GACJ,MAAM,qBAAEtB,EAAoB,qBAAE6B,EAAoB,eAAE/d,GAAmBgY,KAAKja,OACtE,mBAAE+e,GAAuB9E,KAAKH,MAEpC,OAAIiF,EAEI,gCACI,gBAACpY,EAAA,GAAM,aACO,kCACV3D,QAASiX,KAAKiF,aACd9U,KAAMzD,EAAA,GAAW0D,OAEjB,gBAAC3G,EAAA,EAAgB,CAAC3D,GAAG,0BAGzB,gBAAC4G,EAAA,GAAM,aACO,mCACVxF,SAAUgd,GAAwB6B,EAClChd,QAASiX,KAAKoF,oBACdjV,KAAMzD,EAAA,GAAW0D,MACjBxD,QAASF,EAAA,GAAcsZ,SAEvB,gBAACvc,EAAA,EAAgB,CAAC3D,GAAG,0DAOjC,gBAAC4G,EAAA,GAAM,aACO,iCACV3D,QAASf,EACTmI,KAAMzD,EAAA,GAAW0D,OAEjB,gBAAC3G,EAAA,EAAgB,CAAC3D,GAAG,wBAGjC,EAyEJ,UAAe,EAAA0W,EAAA,IAlBR,UAA8B,gBACjC1N,EAAe,cACfzD,IAEA,MACIc,QAAQ,yBAAE+Y,GACV5Z,UAAU,qBAAE4Y,EAAoB,qBAAE6B,IAClC1a,EAEJ,MAAO,CACHH,WAAY4D,EAAgB5D,WAC5Bma,iBAAkBvW,EAAgBuW,iBAClCF,sBAAuBD,IACvBhB,qBAAsBA,IACtB6B,qBAAsBA,IAE9B,GAEA,CAAkD,ICrMlD,IAAY,IAAZ,SAAYyI,GACR,YACA,WACH,CAHD,CAAY,QAAqC,KAKjD,MAkEA,IAAe,IAAAtqB,OAlEgE,EAC3EwY,cACAsH,qBACAhB,qBACAC,qBACAF,uBACAqD,wBAAuB,EACvBS,qBAAqB,SAErB,MAAM9f,GAAc,IAAA7B,cACf+B,GACG,gBAAC,GAAgB,iBACTA,EAAK,CACTyV,YAAaA,EACbsG,mBAAoBA,EACpBC,mBAAoBA,EACpBF,qBAAsBA,EACtBqD,qBAAsBA,MAG9B,CACI1J,EACAsG,EACAC,EACAF,EACAqD,IAIFnW,GAAc,IAAA/K,cACfa,GACG,gBAAC,GAAsB,eACnB2W,YAAaA,EACbsH,mBAAoBA,GAChBje,KAGZ,CAAC2W,EAAasH,IAGlB,OACI,gBAACtS,EAAA,EAAQ,CACLtI,oBAAoB,qBACpBC,OACI,gBAACsI,EAAA,EAAM,CAAC5F,QAAM,GACV,gBAACtC,EAAA,EAAgB,CAAC3D,GAAG,8BAI7B,gBAACuK,EAAA,EAAY,CAACC,MAAOL,IAChB,EAAGlH,aACA,0BAAQ1E,UAAU,0BAA0B0E,QAASA,EAAS7C,KAAK,UAC/D,gBAACuD,EAAA,EAAgB,CAAC3D,GAAG,wCAKjC,gBAAC,KAAc,CAACc,KAAK,eAAea,OAAQV,IAE5C,uBAAKyY,MAAO,CAAEsH,QAAS/D,OAAuBzP,EAAY,SACrDuT,OCnFJ,GAA8B,CAAC,kBCC5C,MAmBA,IAnB6C,KAAAmE,iBACzC,EAAGjc,WACC,MAAMkc,EAAOlc,EAAKmc,UAElB,OAAOD,GAAQA,EAAKE,aAEvBA,GAAc,CAAC3U,EAAwB7B,MAC/BwW,GDAE,UAAsC,WACjD3U,EAAU,UACV2U,EAAS,cACTnM,IAEA,OAAI,GAA4B9M,SAASsE,EAAW2G,YAKhDgO,EAAUI,aAAa3gB,OAAS,GAAKugB,EAAU5gB,iBAAiBK,OAAS,IAKzE4L,EAAWgV,yBACFxM,EAAcvP,OAAO2b,qBAI9B,0CAA2C5U,GAAcA,EAAWmlC,wCAA0C,GAAsCC,QAM9I58B,EAAcvP,OAAO2b,uBAAwBpM,EAAcvP,OAAO4b,WAChF,CCvBe,CAA6B,CAChC7U,aACA2U,YACAnM,cAAerK,MCd3B,MAkBA,IAlB+C,KAAAqW,iBAC3C,EAAGjc,WACC,MAAMkc,EAAOlc,EAAKmc,UAElB,OAAOD,GAAQA,EAAKE,aAEvBA,GAAe3U,KACP2U,GCHE,UAAwC,UACnDA,EAAS,WACT3U,IAEA,QAAuC,IAAnC2U,EAAUQ,cAAc/gB,QAIxB4L,EAAWgV,wBAINhV,EAAWmlC,wCAA0C,GAAsCC,IACxG,CDNe,CAA+B,CAClCzwB,YACA3U,iBECZ,IAAe,IAAAigB,UAAQ,UAA6C,SAChErrB,IAEA,OAAO,UAASquB,MAA6C,CACzDlc,YAAY,UAAS9P,WAAWgsB,MAA2D,CACvFttB,QAAQ,UAASsB,WAAWgsB,MAAqE,CAC7FpO,UAAU,UACL3Y,KAAK,CACFpG,QAASlB,EAASoB,UAAU,0CAC5BkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UAAU,yCAC5BkG,KAAOpM,GAAoB,sBAAVA,IAGzBozB,YAAY,UACPhnB,KAAK,CACFpG,QAASlB,EAASoB,UACd,iDAEJkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UAAU,gDAC5BkG,KAAOpM,GAAoB,wBAAVA,IAGzBqzB,UAAU,UACLjnB,KAAK,CACFpG,QAASlB,EAASoB,UAAU,2CAC5BkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UAAU,0CAC5BkG,KAAOpM,GAAoB,sBAAVA,IAGzBszB,YAAY,UACPlnB,KAAK,CACFpG,QAASlB,EAASoB,UAAU,6CAC5BkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UAAU,4CAC5BkG,KAAOpM,GAAoB,wBAAVA,SAKzC,IClDA,IAAe,IAAAmwB,UAAQ,UAA6C,SAChErrB,EAAQ,qBACRyuB,IAEA,OAAO,UAASJ,MAA6C,CACzDpc,cAAc,UAAS5P,WAEvB8P,YAAY,UAAS9P,WAAWgsB,MAA2D,CACvFttB,QAAQ,UAASsB,WAAWgsB,MAAK,eAC7BK,sBAAsB,UACjBpnB,KAAK,CACFpG,QAASlB,EAASoB,UAAU,0CAC5BkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UAAU,yCAC5BkG,KAAOpM,GAAoB,sBAAVA,IAGzByzB,wBAAwB,UACnBrnB,KAAK,CACFpG,QAASlB,EAASoB,UAAU,6CAC5BkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UAAU,4CAC5BkG,KAAOpM,GAAoB,wBAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UAAU,6CAC5BkG,KAAOpM,GAAoB,2BAAVA,KAGzBuzB,EAAuB,CACvBG,wBAAwB,UACnBtnB,KAAK,CACFpG,QAASlB,EAASoB,UACd,iDAEJkG,KAAOpM,GAAoB,aAAVA,IAEpBoM,KAAK,CACFpG,QAASlB,EAASoB,UAAU,gDAC5BkG,KAAOpM,GAAoB,wBAAVA,KAEzB,CAAC,OAIjB,ICxCA,GAnBoF,I,IAAA,oBAChF8C,EAAmB,cACnB8vB,EAAa,OACb5vB,GAAM,EACHvD,GAAK,cAJwE,kDAK9E,OACF,uCACQA,EAAK,CACT1B,UAAW,IACP,aACA,+BACA,CAAE,oBAAqB60B,GACvB,CAAE,sCAAuCA,GACzC9vB,GACH,YACUE,MCdnB,IAAe,SANqB,IAChC,uBAAKzF,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,yOCIhB,IAAe,SANqB,IAChC,uBAAKJ,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBAAMC,EAAE,oRCShB,MAAqB,WAAuB,EAAA2b,UAA5C,c,oBAKI,KAAAC,MAAuC,CACnCsB,YAAY,GA2CR,KAAA06B,WAA6C,KACjD77B,KAAKC,SAAS,CAAEkB,YAAY,KAGxB,KAAA26B,WAA6C,KACjD97B,KAAKC,SAAS,CAAEkB,YAAY,IAEpC,CA/CI,MAAA1Z,GACI,MAAM,SAAErD,EAAQ,UAAEod,EAAS,QAAEyU,GAAYjW,KAAKja,OACxC,WAAEob,GAAenB,KAAKH,MAE5B,OACI,gBAAC6B,GAAA,GAAO,KACJ,gBAACC,GAAA,EAAS,MACL,EAAGxY,SACA,wBACI0yB,OAAQ7b,KAAK87B,WACb9f,QAAShc,KAAK67B,WACdE,aAAc/7B,KAAK67B,WACnBG,aAAch8B,KAAK87B,WACnB3yC,IAAKA,GAEJ/E,KAKb,gBAACwd,GAAA,EAAM,CACHC,UAAW,CACP,CAAEjb,KAAM,OAAQkb,SAAS,GACzB,CAAElb,KAAM,OAAQkb,SAAS,GACzB,CAAElb,KAAM,kBAAmBkb,SAAS,IAExCN,UAAWA,IAEV,EAAGrY,MAAKqW,WACL2B,GACI,uBAAKhY,IAAKA,EAAKqW,MAAOA,GACjByW,KAO7B,EA9CO,GAAA/T,aAAe,CAClBV,UAAW,U,YCGnB,IAAe,SAhB6B,IACxC,uBAAK3d,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,mDACA,qBAAGwc,KAAK,OAAOC,SAAS,WACpB,wBAAMD,KAAK,UAAU3c,OAAO,KAAK8c,GAAG,IAAI5c,MAAM,OAC9C,wBAAME,EAAE,gBAAgBuc,KAAK,YAC7B,wBAAMvc,EAAE,iBAAiBuc,KAAK,SAC9B,wBACIvc,EAAE,yhEACFuc,KAAK,YAET,wBAAM3c,OAAO,KAAK8c,GAAG,KAAKC,OAAO,UAAU+U,YAAY,IAAI5xB,MAAM,KAAK8c,EAAE,KAAKC,EAAE,WCkB3F,IAAe,SA7B6B,IACxC,uBAAKjd,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,yCACA,qBAAGwc,KAAK,OAAOC,SAAS,WACpB,wBAAMD,KAAK,UAAU3c,OAAO,KAAK8c,GAAG,IAAI5c,MAAM,OAC9C,wBACIyc,KAAK,UACLkT,WAAW,cACXW,SAAS,IACTuB,WAAW,MACXC,cAAc,MAEd,yBAAOhV,EAAE,KAAKC,EAAE,MAAI,mBAGpB,yBAAOD,EAAE,QAAQC,EAAE,MAAI,MAI3B,wBACI7c,EAAE,8uDACFuc,KAAK,UACLsV,QAAQ,OAEZ,wBAAMjyB,OAAO,KAAK8c,GAAG,KAAKC,OAAO,UAAU+U,YAAY,IAAI5xB,MAAM,KAAK8c,EAAE,KAAKC,EAAE,WCE3F,GAtBiD,IAC7C,uBAAKzc,UAAU,iEACX,uBAAKA,UAAU,4BACX,uBAAKA,UAAU,uCACX,yBACI,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,wCAI7B,uBAAKzB,UAAU,mCACX,8BACI,gBAAC,GAAgB,CAAC8L,KAAM,KAAS4lB,SAGrC,8BACI,gBAAC,GAAgB,CAAC5lB,KAAM,KAAS4lB,YCqCrD,GA7CqF,EACjFmD,gBACApzB,KACAc,WAEA,MAAMG,GAAc,IAAA7B,cAChB,IACI,gCACI,gBAAC,GAAwB,CACrBkE,oBAAoB,WACpB8vB,cAAeA,EACfpzB,GAAIA,IAGR,gBAAC,GAAQ,QAGjB,CAACA,EAAIozB,IAGHjoB,GAAe,IAAAI,UACjB,IACI,gCACI,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,kCAErB,gBAAC,GAAc,CAAC0b,UAAU,YAAYyU,QAAS,gBAAC,GAAqB,OACjE,wBAAM5xB,UAAU,WACZ,gBAAC,GAAQ,UAKzB,IAGJ,OACI,gBAAC0I,EAAA,EAAS,CACN3D,oBAAoB,6BACpB4D,MAAOjG,EACPkK,aAAcA,EACdrK,KAAMA,KCvBlB,GApByF,EACrFsyB,gBACApzB,KACAc,WAEA,MAAMG,GAAc,IAAA7B,cAChB,IAAM,gBAAC,GAAwB,CAACg0B,cAAeA,EAAepzB,GAAIA,KAClE,CAACA,EAAIozB,IAGT,OACI,gBAACnsB,EAAA,EAAS,CACN3D,oBAAoB,uBACpB4D,MAAOjG,EACPkK,aAAc,gBAACxH,EAAA,EAAgB,CAAC3D,GAAG,yCACnCc,KAAMA,KCKlB,GApBqF,EACjFsyB,gBACApzB,KACAc,WAEA,MAAMG,GAAc,IAAA7B,cAChB,IAAM,gBAAC,GAAwB,CAACg0B,cAAeA,EAAepzB,GAAIA,KAClE,CAACA,EAAIozB,IAGT,OACI,gBAACnsB,EAAA,EAAS,CACN3D,oBAAoB,qBACpB4D,MAAOjG,EACPkK,aAAc,gBAACxH,EAAA,EAAgB,CAAC3D,GAAG,mCACnCc,KAAMA,KCgBlB,GA9ByF,EACrFsyB,gBACApzB,KACAc,WAEA,MAAMG,GAAc,IAAA7B,cAChB,IACI,gCACI,gBAAC,GAAwB,CACrBkE,oBAAoB,WACpB8vB,cAAeA,EACfpzB,GAAIA,IAGR,gBAAC,GAAQ,QAGjB,CAACA,EAAIozB,IAGT,OACI,gBAACnsB,EAAA,EAAS,CACN3D,oBAAoB,uBACpB4D,MAAOjG,EACPkK,aAAc,gBAACxH,EAAA,EAAgB,CAAC3D,GAAG,qCACnCc,KAAMA,KC+BlB,GAjDmF,EAC/E2yB,mBACAJ,aACAE,eACAG,aACAJ,eACAE,sBAEA,gBAAC5nB,EAAA,EAAQ,CACLrI,OACI,gBAACsI,EAAA,EAAM,CAAC5F,QAAM,GACV,gBAACtC,EAAA,EAAgB,CAAC3D,GAAG,+BAI7B,uBAAKzB,UAAU,iBACX,gBAAC,GAA2B,CACxB60B,cAAoC,eAArBI,EACfxzB,GAAIszB,EACJxyB,KAAK,iCAGT,gBAAC,GAA2B,CACxBsyB,cAAoC,eAArBI,EACfxzB,GAAIuzB,EACJzyB,KAAK,iCAGR4yB,GACG,gBAAC,GAAyB,CACtBN,cAAoC,aAArBI,EACfxzB,GAAI0zB,EACJ5yB,KAAK,+BAIZuyB,GACG,gBAAC,GAAyB,CACtBD,cAAoC,aAArBI,EACfxzB,GAAIqzB,EACJvyB,KAAK,+BAIZ2yB,ICFb,GA/CuF,EACnFJ,aACAC,eACAC,eACAC,sBAEA,gCACKF,GACG,yBACI,8BACI,gBAAC3vB,EAAA,EAAgB,CAAC3D,GAAG,4DAGzB,2BAEA,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,sDAI7B,uBAAKzB,UAAU,iBACV+0B,GACG,gBAAC,GAA2B,CACxBF,cAAoC,eAArBI,EACfxzB,GAAIszB,EACJxyB,KAAK,6CAIZuyB,GACG,gBAAC,GAAyB,CACtBD,cAAoC,aAArBI,EACfxzB,GAAIqzB,EACJvyB,KAAK,2CAIZyyB,GACG,gBAAC,GAA2B,CACxBH,cAAoC,eAArBI,EACfxzB,GAAIuzB,EACJzyB,KAAK,+CCEV,SAASq1C,GAGpBC,GAgOA,OAAO,EAAA3/B,GAAA,GACH,IAAS,EAAAtP,EAAA,IAAa,EAAAuP,EAAA,GAAa,GAAb,EAzNrB,I,IACDK,QAAQ,cAAE+G,EAAa,gBAAE+O,EAAe,WAAExnB,GAAY,mBACtDyrB,EACAnL,6BAA8BiN,EAC9BhP,+BAAgCC,EAChCzB,6BAA8BC,EAAgC,YAC9DmG,EAAW,SACXljB,EAAQ,OACRuJ,EAAM,aACNjJ,GAAY,EACT/E,GAAI,cAVN,iLAYD,MAAO2yB,EAAkB2B,IAAuB,IAAA9b,YAE1Cgc,GAA6C,IAAAj2B,cAC9C0B,GACU,IAAG,IAAAwM,SAAQ,CAACuB,EAAOsH,QAAStH,EAAO7O,KAAKsM,KAAK,QAAQxL,KAEhE,CAAC+N,IAGCymB,GAEkC,IAAAl2B,cAC7B6Z,IAAuB,+CAC1B,MAAMsc,EAAa,CAAC,QAAS,aAAc,WAAY,cACjD3R,IAAiC3K,GACjC4K,EAAmC5K,GAEnC0M,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAErD4mB,EAAmBxc,EACnB0M,EACI0P,EAAiB,cACjB7nB,EACJ6nB,EAAiB,YAEvB,MAAO,CACHK,OAAQzc,EACF,CACI+a,qBACIrO,GAAgC1M,EAC1B,CACI0c,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,SAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,EACVymB,uBACIrQ,GAAkC3K,EAC5B,CACI0c,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,YAC9B9d,aAAc0B,EAAmB3B,kBAErC9J,GAEd,CACI+X,SAAUuL,EACJ,CACI6E,mBAAoBrwB,EAASoB,UACzB,iCAEJ6J,YAAa8kB,EAAiB,eAElC7nB,EACNomB,WAAY,CACR+B,mBAAoBrwB,EAASoB,UACzB,wCAEJ6J,YAAa8kB,EAAiB,YAC9B5E,YAAanrB,EAASoB,UAClB,oDAGRmtB,SAAU,CACN8B,mBAAoBrwB,EAASoB,UACzB,kCAEJ6J,YAAa8kB,EAAiB,WAElCvB,WAAY,CACR6B,mBAAoBrwB,EAASoB,UACzB,oCAEJ6J,YAAa8kB,EAAiB,cAG5CO,OAAQH,EACF,CACII,cAAe,GAAyBJ,EAAkBF,GAC1D9tB,YAAa,GACTguB,EACAF,EACA,GAA0BhvB,OAE9BuvB,YAAa,GACTL,EACAF,EACA,GAA0BX,QAGlC,CAAC,EACPmB,OAAQ,EAAGzc,gBACHka,IAAqBla,GACrB6b,OAAoB3nB,IAG5BwoB,iBAAkB,EAAGtjB,eACjBoL,EAAc,sBAAuBpL,IAEzCujB,QAAS,KACLrwB,GAAa,GACbP,KAEJ6wB,QAAS,EAAG5c,gBACR6b,EAAoB7b,IAExBmT,WAAY,EAAGpmB,SAAS,CAAC,OACrB,IAAA8vB,OAAM9vB,GAAQ,CAAC+vB,EAAc,GAAI9c,K,QAC7B,MAAM+c,EAAW,qBAAqB/c,IAEtCwE,EAAcuY,EAA8B,QAApB,EAAc,QAAd,EAAAD,EAAY,UAAE,eAAEh2B,YAAI,QAAI,IAE5Cg2B,EAAY,IACZvJ,EAAgBwJ,OAKpC,KACA,CACI7C,EACA6B,EACAvE,EACA8B,EACA/O,EACAve,EACAuJ,EACAiP,EACA+O,EACAsI,EACAvvB,EACAP,IAIFixB,GAEW,IAAAl3B,cACZ6Z,IACG,MAAM2K,IAAiC3K,GACjC4K,EAAmC5K,GAEnC0M,IAA+B1M,GAC/B2Z,EAAiC3Z,EAAoBpK,GAG3D,OACI,gBAAC,GAA0B,CACvBwkB,WACI1N,EAA+B0P,EAAiB,cAAW7nB,EAE/D8lB,aACI1P,EACMyR,EAAiB,iBACjB7nB,EAEVgmB,iBAAkBA,MAI9B,CACIA,EACA6B,EACAzC,EACA/O,EACAhV,IAIR,OAAKA,EAAOlF,OAAOurB,oBAKf,gBAACkhB,EAAiB,iBACTv1C,EAAe,CACpBy0B,qBAAsBA,EACtBgB,sCAAuCA,EACvCyT,eACI,gBAAC,GAAwB,CACrBtW,iBACI5kB,EAAOlF,OAAOopB,qBACV,gBAAC,GAA2B,CAACjyB,KAAK,mBAG1CuyB,WAAYvC,EAAqBuE,EAAiB,cAAW7nB,EAC7D+lB,aAAc8B,EAAiB,YAC/B3B,WAAY2B,EAAiB,UAC7B/B,aAAc+B,EAAiB,YAC/B7B,iBAAkBA,IAG1B2W,iCAAkC,GAAoC,CAAE7kC,aACxE0kC,uBAAwB,GAAoC,CAAE1kC,aAC9DuJ,OAAQA,KAxBL,gBAACunC,EAAiB,iBAAMv1C,EAAe,CAAEgO,OAAQA,UAgCpE,CAEA,MAAM,GAIF,IACO,EAAGtJ,kBAAmBsJ,aACzB,MACI5F,MAAM,UAAEC,EAAS,YAAEkd,IACnB7gB,EAEEoE,EAAST,IACTid,EAAWC,IAEjB,IAAKzc,IAAWwc,EACZ,OAAO,KAGX,MAAM9D,EAAmC,GAA6B,CAClE1Y,SACAwc,WACAjN,cAAerK,IAGnB,MAAO,CACHA,SACAiiB,mBAAoBjiB,EAAOlF,OAAO4b,UAAuC,OAA3B1W,EAAOlF,OAAO4b,SAC5DI,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAAuCre,GACvE6c,6BAA8BC,IC9S1C,MA2CA,IAAe,IAAAjkB,OA3C0D,EAAG0C,WACxE,MAAMG,GAAc,IAAA7B,cAChB,EAAG+B,WACC,gCACI,gBAAC,KAAS,iBACFA,EAAK,CACTmC,oBAAoB,WACpBqsB,aAAa,SACb3vB,GAAImB,EAAML,KACVV,KAAK,SAGT,gBAAC,GAAQ,QAGjB,IAGE+K,GAAe,IAAAI,UACjB,IACI,gCACI,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,kCAErB,gBAAC,GAAc,CAAC0b,UAAU,YAAYyU,QAAS,gBAAC,GAAqB,OACjE,wBAAM5xB,UAAU,WACZ,gBAAC,GAAQ,UAKzB,IAGJ,OACI,gBAAC0I,EAAA,EAAS,CACN3D,oBAAoB,6BACpB4D,MAAOjG,EACPkK,aAAcA,EACdrK,KAAMA,OCvClB,MA0CA,IAAe,IAAA1C,OAAK,EAAA+I,EAAA,IA1C6E,EAC7F7B,WACAxE,WAEA,MAAMQ,GAAe,IAAAlC,cACjB,IAAA8B,aAAW,CAACC,EAA4B0c,IAC5Bvb,IACJub,EAAKC,cAAc3c,EAAML,KCrB1B,SAAoCN,GAC/C,MACOiM,EAAQ,GAAIC,EAAO,IAAMlM,EAAMiK,MAAM,IAAIkC,OAAO,cACjD2jB,EAAe7jB,EAAMI,MAAM,EAAG,GAC9B0jB,EACc,IAAhB7jB,EAAK5H,OAAe4H,EAAKG,OAAO,GAAKH,EAAOA,EAAKG,MAAM,EAAG,GAAKJ,EAAMI,MAAM,GAG/E,OAAIrM,EAAMsE,OAAS,EACR2H,EAIPjM,EAAMsE,OAAS,IAAMyrB,EACdD,EAGJ,GAAGA,OAAkBC,GAChC,CDG+C,CAA2BjuB,EAAM9C,OAAOgB,WAG/E,IAGES,GAAc,IAAA7B,cAChB,EAAG+B,QAAO0c,UACN,gBAAC,KAAS,iBACF1c,EAAK,CACTwuB,aAAa,SACb3vB,GAAImB,EAAML,KACVY,SAAUJ,EAAaH,EAAO0c,GAC9B4S,YAAanrB,EAASoB,UAAU,mDAChCtG,KAAK,UAGb,CAACkB,EAAcgE,IAGb6F,GAAe,IAAAI,UACjB,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,0CAC3B,IAGJ,OACI,gBAACiH,EAAA,EAAS,CACN3D,oBAAoB,uBACpB4D,MAAOjG,EACPkK,aAAcA,EACdrK,KAAMA,QEnBlB,IAAe,IAAA1C,OArB0D,EAAG0C,WACxE,MAAMG,GAAc,IAAA7B,cAChB,EAAG+B,WAAwB,gBAAC,KAAS,iBAAKA,EAAK,CAAEwuB,aAAa,UAAU3vB,GAAImB,EAAML,SAClF,IAGEqK,GAAe,IAAAI,UACjB,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,oCAC3B,IAGJ,OACI,gBAACiH,EAAA,EAAS,CACN3D,oBAAoB,qBACpB4D,MAAOjG,EACPkK,aAAcA,EACdrK,KAAMA,OCFlB,MA4BM,GAAuE,EAAGK,QAAO0c,WACnF,MAAMmR,GAAW,IAAArI,QAAyB,MACpC0vB,GAAsB,IAAA1vB,QAAO,IAEnC,IAAA5W,YAAU,KACFif,EAAS5H,SAAW4H,EAAS5H,QAAQgI,eAAiBinB,EAAoBjvB,SAC1E4H,EAAS5H,QAAQsI,kBAAkB2mB,EAAoBjvB,QAASivB,EAAoBjvB,YAI5F,MAAM9lB,GAAqD,IAAAlC,cACtDkD,IACG,MACM,MAAE9B,EAAQ,IAAO8B,EAAM9C,QACvB,KAAEsB,EAAMN,MAAO2uB,EAAgB,IAAOhuB,EACtCiuB,EAAeJ,EAAS5H,SAAW4H,EAAS5H,QAAQgI,aAG1D,GAAI,IAAIziB,OAAO,WAAsBC,KAAKpM,GACtC,OAAOqd,EAAKC,cAAchd,EAAMquB,GAGpC,MAAME,GAAY,IAAAC,KAAI,KAAe9uB,GAAOuE,KAAKwqB,IAAS,IAAAD,KAAIC,EAAKC,YAE7DC,ECzEH,SAAgCjvB,EAAeuM,EAAY,KACtE,MAAM,KAAEC,IAAS,IAAAC,QAAOzM,GAExB,IAAKwM,EACD,OAAOxM,EAGX,MAAMiuB,EAAmB3hB,EAAyBtM,EAAOuM,GAEzD,OAAOC,EAAK0hB,KACPjc,QAAQkc,GAAaF,EAAiB3pB,OAAS6pB,IAC/CC,QACG,CAACC,EAAQF,EAAUG,IACf,CAACD,EAAOhiB,MAAM,EAAG8hB,EAAWG,GAAQD,EAAOhiB,MAAM8hB,EAAWG,IAAQxiB,KAAKS,IAC7E0hB,EAEZ,CDyDmC,CACnBjuB,EAAM0M,QAAQ,IAAIP,OAbJ,IAasB,KAAM,IAAIE,MAAM,EAAGwiB,GAbzC,KAiBdD,IAAiB5uB,EAAMsE,QAAUtE,EAAMsE,OAAS2qB,EAAe3qB,OAC/DuxC,EAAoBjvB,QAAUqI,EAAe3qB,OAE7CuxC,EAAoBjvB,QAAUgI,GAAgB,EAG7CvR,EAAKC,cAAchd,EAAM2uB,KAElC,CAACtuB,EAAO0c,IAGZ,OACI,gCACI,gBAAC,KAAS,iBACF1c,EAAK,CACTmC,oBAAoB,WACpBqsB,aAAa,YACb3vB,GAAImB,EAAML,KACVY,SAAUJ,EACV+B,IAAK2rB,EACL5uB,KAAK,SAGT,gBAAC,GAAQ,QAKrB,IAAe,IAAAhC,OArF8D,EAAG0C,WAC5E,MAAMG,GAAc,IAAA7B,cAChB,EAAG+B,QAAO0c,UACN,gBAAC,GAAqB,CAAC1c,MAAOA,EAAO0c,KAAMA,KAE/C,IAGE1S,GAAe,IAAAI,UACjB,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,sCAC3B,IAGJ,OACI,gBAACiH,EAAA,EAAS,CACN3D,oBAAoB,uBACpB4D,MAAOjG,EACPkK,aAAcA,EACdrK,KAAMA,OEClB,IAAe,IAAA1C,OA1BwD,EACnEiyB,0BACAK,iCAEA,gBAAC9kB,EAAA,EAAQ,CACLtI,oBAAoB,qBACpBC,OACI,gBAACsI,EAAA,EAAM,CAAC5F,QAAM,GACV,gBAACtC,EAAA,EAAgB,CAAC3D,GAAG,+BAI7B,uBAAKzB,UAAU,iBACX,gBAAC,GAAqB,CAACuC,KAAK,aAE5B,gBAAC,GAAqB,CAACA,KAAK,aAE5B,gBAAC,GAAmB,CAACA,KAAK,WAEzBuvB,GAA2B,gBAAC,GAAmB,CAACvvB,KAAK,UAErD4vB,GAA+B,gBAAC,GAA2B,CAAC5vB,KAAK,uBC3B9E,IAAe,IAAA6vB,UAAQ,UAAuC,mBAC1DG,EAAkB,SAClBxrB,IAEA,MAAM0rB,EAAS,CACXG,gBAAgB,UAChBF,OAAO,UACPG,UAAU,UACLzpB,SAASrC,EAASoB,UAAU,kDAC5BkG,KAAK,CACFpG,QAASlB,EAASoB,UAAU,gDAC5BkG,KAAOpM,IAAU,IAAAie,gBAAeje,GAAOoe,UAE/CyS,QAAQ,UACH/B,IAAI,KACJ3nB,SAASrC,EAASoB,UAAU,4CACjCgR,UAAU,UACL/P,SAASrC,EAASoB,UAAU,8CAC5BkG,KAAK,CACFpG,QAASlB,EAASoB,UAAU,4CAC5BkG,KAAOpM,IAAU,IAAAyM,QAAOzM,GAAOoe,WAiB3C,OAbIkS,IACAE,EAAOC,OAAQ,UACVtpB,SAASrC,EAASoB,UAAU,2CAC5BkG,KAAK,CACFpG,QAASlB,EAASoB,UAAU,yCAC5B,IAAAkG,CAAKpM,GACD,MAAM,KAAEwM,IAAS,IAAAC,QAAOiN,KAAKoX,OAAO5Z,UAEpC,OAAO,IAAAwZ,KAAI1wB,EAAOwM,GAAQA,EAAKpJ,KAAOoJ,EAAKpJ,KAAKyG,UAAOmD,GAAWoR,OACtE,MAIL,QAAOoS,EAClB,ICdA,GAzBiF,EAC7EzY,wBACA8X,6BAEA,gCACK9X,GACG,yBACI,8BACI,gBAAC5U,EAAA,EAAgB,CAAC3D,GAAG,4DAGzB,2BAEA,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,sDAI7B,uBAAKzB,UAAU,iBACVga,GAAyB,gBAAC,GAAqB,CAACzX,KAAK,aAErDuvB,GAA2B,gBAAC,GAAmB,CAACvvB,KAAK,YCRlE,IAAe,IAAA6vB,UAAQ,UAAuC,gBAC1DC,EAAe,gBACfC,EAAe,mBACfC,EAAkB,qBAClBC,EAAoB,SACpBzrB,IAEA,MAAM0rB,EAAqC,CACvCzZ,cAAc,UAAS5P,YA+B3B,OA5BImpB,IACAE,EAAOC,OAAQ,UACVtpB,SAASrC,EAASoB,UAAU,2CAC5BkG,KAAK,CACFpG,QAASlB,EAASoB,UAAU,yCAC5B,IAAAkG,CAAKpM,EAAQ,IACT,MAAMkS,EAAW,GAA0Bke,GACrCrS,EAAW,iBAA2B7L,GAE5C,OAAO,IAAAwe,KAAI1wB,EAAO+d,GAAYA,EAAS3a,KAAO2a,EAAS3a,KAAKyG,UAAOmD,GAC9DoR,OACT,KAIRmS,IACAC,EAAOtZ,UAAW,UACb/P,SAASrC,EAASoB,UAAU,8CAC5BkG,KAAK,CACFpG,QAASlB,EAASoB,UAAU,4CAC5BkG,KAAM,CAACpM,EAAQ,MAAO,IAAAyM,QAAOzM,GAAOoe,UAEvChS,KAAK,CACFpG,QAASlB,EAASoB,UAAU,6CAC5BkG,KAAM,CAACpM,EAAQ,KAAOA,EAAMqM,OAAOgkB,EAAgB/rB,UAAY+rB,MAIpE,QAAOG,EAClB,ICnCA,IAAe,IAAA5yB,OAlBgE,EAC3E4f,0BAEA,MAAMqD,EAAgBrD,EAChB,uDACA,+CAEA7S,GAAe,IAAAI,UAAQ,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAIqhB,KAAmB,CAACA,IAE7E,OACI,gBAAChW,EAAA,EAAiB,CACd/H,oBAAoB,6BACpB6H,aAAcA,EACdrK,KAAK,4BCQjB,IAAe,IAAA1C,OApB8E,EACzF4f,sBACA5c,YAAW,MAEX,MAAMigB,EAAgBrD,EAChB,kEACA,0DAEA7S,GAAe,IAAAI,UAAQ,IAAM,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAIqhB,KAAmB,CAACA,IAE7E,OACI,gBAAChW,EAAA,EAAiB,CACd/H,oBAAoB,qCACpBlC,SAAUA,EACV+J,aAAcA,EACdrK,KAAK,oCCsDjB,IAAe,EAAA2V,GAAA,IAAc,EAAAC,EAAA,IAlCV,CACf3N,EACA9I,KAEA,MACIsF,eACI0D,MAAM,eAAE0N,KAEZ5N,EAEEukB,EAAiB3W,KAGnBI,QACIrJ,QAAUke,qBAAsBnK,IACnC,aACDlK,GACAtX,EAEE0hB,GAAuBpK,EACvBqK,IAA2B0L,GAAkBA,EAAexoB,OAAS,EACrE4L,EACF4c,GAAkBA,EAAeva,MAAK,EAAGuE,iBAAkBA,IAAgBC,IAE/E,OAAO,OAAP,wBACOtX,GAAK,CACRqhB,SAAUK,EACVJ,iBACKI,GAAuBC,GACxBze,QAAQuN,IAAeA,EAAWmR,mBACtCL,qBAAsBG,GAAuBF,MAIxB,EArDzB,EAAGH,WAAUC,mBAAkBvD,uBAAsB,EAAOwD,yBAC5D,gBAAC5V,EAAA,EAAQ,CACLrI,OACI,gBAACsI,EAAA,EAAM,CAAC5F,QAAM,GACV,gBAACtC,EAAA,EAAgB,CAAC3D,GAAG,8CAI5BshB,GAAY,gBAAC,GAAsB,CAACtD,oBAAqBA,IAEzDuD,GACG,gBAAC,GAA6B,CAC1BngB,UAAWogB,EACXxD,oBAAqBA,QCyCrC,MAAMs4B,WAAgC,EAAAx8B,UAAtC,c,oBASI,KAAAC,MAAsC,CAClCiI,iBAAiB,EACjBu0B,eAAe,GAqOX,KAAAr0B,iBAA+B,KACnC,MACInL,QAAQ,cAAE+G,IACV5D,KAAKja,MAET6d,EAAc,sBAAuB,IAErC5D,KAAKC,SAAS,CACV6H,iBAAiB,EACjB/E,0BAAsBzP,KAItB,KAAA2U,uBAAgDniB,IACpD,MACI+W,QAAQ,cAAE+G,IACV5D,KAAKja,MAET6d,EAAc,sBAAuB,IAErC5D,KAAKC,SAAS,CACV6H,iBAAiB,EACjB/E,qBAAsBjd,KAItB,KAAAyf,uBAAgDzf,IACpD,MAAM,YACF4W,EACAG,QAAQ,cAAE+G,IACV5D,KAAKja,OACH,qBAAEgd,GAAyB/C,KAAKH,MAEX,IAAvBnD,EAAY9R,QACZoV,KAAKC,SAAS,CACV6H,iBAAiB,EACjB/E,0BAAsBzP,IAG1BsQ,EAAc,eAAgB,KACvBb,IAAyBjd,IAChCka,KAAKC,SAAS,CACV8C,qBAAsB/C,KAAK+H,2BAG/BnE,EAAc,eAAgB5D,KAAK+H,2BAG/C,CAlRU,iBAAA3H,G,sDACF,MAAM,kBACFtK,EACAoS,6BAA8BC,EAAgC,gBAC9DC,EAAe,OACfzT,EAAM,iBACNiB,EAAmB,EAAA3N,KAAI,oBACvBogB,GACArI,KAAKja,MAETsiB,EAAoB1T,EAAQqL,KAAKsI,uBCvG1B,WACX,MAAMyP,EAAe,EAAAC,eAAeC,YAAY,YAC1CC,EAAW,EAAAF,eAAeC,YAAY,QAG5C,EAAAD,eAAeG,WAAW,OAAQ,CAC9B7C,QAAS,CAAC,MAAQ4C,EAAS5C,SAAW,MAI1C,EAAA0C,eAAeG,WAAW,WAAY,CAClCC,SAAU,IAAKL,EAAaK,UAAY,GAAK,CAAC,IAAK,QAIvD,EAAAJ,eAAeK,QAAQ,CACnB1T,SAAU,OACVze,KAAM,OACNkyB,SAAU,CACN,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChF,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAEpF5D,KAAM,CAAC,EAAG,EAAG,IACbc,QAAS,CAAC,GAAI,GAAI,IAClB5rB,KAAM,CACF9C,KAAM,MACNuJ,KAAM,IAGlB,CDoEQ,GAEA,IACQgY,UACMC,WAGJtS,EACF,CACI3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAErBka,KAAKqK,yBACPiyB,MAAK,IAAMt8B,KAAKC,SAAS,CAAEo8B,eAAe,KAChD,CAAE,MAAO9uC,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEM,oBAAA8S,G,sDACF,MAAM,oBACFnK,EAAmB,OACnBvB,EAAM,iBACNiB,EAAmB,EAAA3N,KAAI,oBACvBogB,GACArI,KAAKja,MAETsiB,EAAoB1T,EAAQ,MAE5B,UACUuB,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEM,kBAAAgW,CACFgV,EACA/P,G,sDAEA,MAAM,oBACFtS,EAAmB,kBACnBJ,EAAiB,OACjBnB,EAAM,iBACNiB,EAAmB,EAAA3N,KAAI,oBACvBogB,GACArI,KAAKja,OAEH,gBAAE+hB,EAAe,qBAAE/E,GAAyB/C,KAAKH,MAIvD,GAFAwI,EAAoB1T,EAAQqL,KAAKsI,uBAG7BvF,IAAyByF,EAAUzF,sBACnC+E,IAAoBU,EAAUV,gBAE9B,UACU5R,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,WAGfgQ,EACF,CACI3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAErBka,KAAKqK,wBAGb,CAAE,MAAO9c,GACLqI,EAAiBrI,EACrB,CAER,G,CAEA,MAAA9F,GACI,MAAM,aACF+wB,EAAY,gCACZC,EAA+B,YAC/B/b,EAAW,eACXmM,EACA4C,6BAA8BiN,EAC9BhP,+BAAgCC,EAChCzB,6BAA8BC,EAAgC,qBAC9DpC,EAAoB,6BACpBgD,EAA4B,OAC5BpU,GACAqL,KAAKja,OAEH,gBAAE+hB,EAAe,cAAEu0B,GAAkBr8B,KAAKH,MAE1Cd,EAAqBiB,KAAKqK,wBAC1BrB,GAAgCD,GAAgCjB,EAChEnb,EAAYkc,GAAkB9C,GAAwBs2B,EACtDh+B,IAAwBU,GACxB4K,EAAmC5K,GAEnCoX,IAA0BpX,GAC1B2Z,EAAiC3Z,EAAoBpK,GAG3D,OACI,gBAACwP,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,uBAAKtI,UAAU,0CAAyC,YAAW,8BAC9D0kB,GACG,gBAAC,GAAsB,CACnBrM,YAAaA,EACbsH,mBAAoBhE,KAAKuF,uBACzBvC,mBAAoBhD,KAAKiI,uBACzBhF,mBAAoBjD,KAAKgI,iBACzBjF,qBACIhE,GAAsBA,EAAmB3B,YAE7CyJ,mBACI4R,EACIA,EAAgC1Z,GAEhC,gBAAC,GAAoB,CACjBoX,wBAAyBA,EACzB9X,sBAAuBA,MAO1C2K,IAAiCwP,GAC9B,gBAAC,GAAkB,CACfrC,wBACIxhB,EAAOlF,OAAO4b,UAAuC,OAA3B1W,EAAOlF,OAAO4b,SAE5CmL,4BAA6B7hB,EAAOlF,OAAOopB,sBAIlD7P,GAAgCwP,EAEhCrQ,GACG,gBAAC,GAAuB,CACpB9K,aAAc0B,GAAsBA,EAAmB3B,eAM/E,CAEQ,qBAAAiN,GACJ,MAAM,YAAE3N,GAAgBsD,KAAKja,OACvB,qBAAEgd,EAAuB/C,KAAK+H,0BAA6B/H,KAAKH,MAEtE,OAAO,IAAAhH,MAAK6D,EAAa,CAAEU,YAAa2F,GAC5C,CAEQ,sBAAAgF,GACJ,MAAM,gBAAED,GAAoB9H,KAAKH,MAEjC,GAAIiI,EACA,OAGJ,MAAM,YAAEpL,GAAgBsD,KAAKja,MACvB4hB,EACFjL,EAAY7D,MAAMrC,GAAeA,EAAWmR,qBAAsBjL,EAAY,GAElF,OAAOiL,GAAqBA,EAAkBvK,WAClD,CAEQ,mBAAAkL,GACJ,MAAM,qBACFwQ,EACArN,6BAA8BiN,EAC9BhP,+BAAgCC,EAChCzB,6BAA8BC,EAAgC,sBAC9DM,EAAqB,SACrBrd,EAAQ,OACRuJ,EAAM,2BACNyV,GACApK,KAAKja,MAET,IAAK0iB,EACD,OAAO,KAGX,MAAM1J,EAAqBiB,KAAKqK,wBAEhC,OAAIlC,GAAoCpJ,EAEhCqL,GACA,GAA8B,CAC1BsM,gBAAiB3X,EAAmBtB,MACpCkZ,gBAAiB5X,EAAmBO,MACpCsX,mBAAoB8B,EAChB3Z,EACApK,GAEJkiB,qBAAsBlN,EAAmC5K,GACzD3T,aAMR0tB,GACA,GAA8B,CAC1BlC,oBAA+C,IAA3BjiB,EAAOlF,OAAO4b,SAClCjgB,YAGZ,EAoDJ,MAiDA,IAAe,EAAAmR,GAAA,GACX,IACI,EAAAtP,EAAA,GAAa,IAAY,EAAAuP,EAAA,IA/C7B,KACA,MAAMqb,GAAoB,IAAA7wB,aAAW,CAAC0V,EAAmC,KACrEA,EAAYnE,OAAO,MAGvB,MAAO,CAAC1J,EAAS9I,KACb,MAAM,OAAE4O,GAAW5O,GAEb,gBAAE+I,EAAe,cAAEzD,GAAkBwD,GAGvCE,MAAM,UAAEC,EAAS,YAAEkd,EAAW,eAAEzP,EAAc,sBAAEgM,GAChDnd,UAAU,qBAAEya,IACZ1a,EAEEoE,EAAST,IACTid,EAAWC,IAEjB,IAAKzc,IAAWwc,IAAatX,EACzB,OAAO,KAGX,MAAM+H,EAAcmb,EAAkBpb,EAAe9H,IAC/CwT,EAAmC,GAA6B,CAClE1Y,SACAwc,WACAjN,cAAerK,IAGnB,MAAO,CACH+H,cACAka,mBAAoBjiB,EAAOlF,OAAO4b,UAAuC,OAA3B1W,EAAOlF,OAAO4b,SAC5D4N,yBAA0BtkB,EAAOlF,OAAOopB,oBACxCpN,6BAA8B,GAAqCpgB,GACnEqe,+BAAgC,GAAuCre,GACvE6c,6BAA8BC,EAC9BpC,qBAAsBA,IACtB0C,sBAAuBA,IACvBL,gBAAiBtZ,EAAgBsZ,gBACjCW,6BACIZ,GAAoCzL,EAAY9R,OAAS,MAOxC,CAAmCwxC,QErTpE,GAAeH,IApFV,I,IAAA,qBACD7gB,EAAoB,sCACpBgB,EAAqC,eACrCyT,EAAc,iCACdI,EAAgC,uBAChCH,EAAsB,kBACtBh6B,EAAiB,iBACjBF,EAAmB,EAAA3N,MAAI,EACpBtB,GAAI,cARN,sLAUD,MAAO41C,EAAqBC,IAA0B,IAAAr9B,YAChDhW,GAAM,IAAAsjB,QAA4C,CACpDgwB,wBAAwB,IAAA1nB,eAGtB2nB,GACF,IAAAx3C,cACI,CAAOsoB,EAASzO,KAAuB,iDACnC,OAAOjJ,EAAkB,OAAD,wBACjB0X,GAAO,CACVpX,UAAW,CACPumC,aAAc,CACV,QAAAC,CAASrvC,EAAOhH,EAAS+mB,GACrB,GAAI/f,EACA,OAAOqI,EAAiBrI,GAG5BivC,EAAuBj2C,GACvB4C,EAAI+jB,QAAQguB,+BAAiC5tB,CACjD,EACA,WAAAuvB,GACIL,OAAuBlpC,GACvBnK,EAAI+jB,QAAQguB,oCAAiC5nC,CACjD,GAEJqQ,KACIyX,UACOA,EAAqBrc,OAG5C,KACA,CAACqc,EAAsBtlB,EAAmBF,IAG5CknC,GAA4B,IAAA53C,cAAY,KACtCiE,EAAI+jB,QAAQuvB,uBAAuBvvB,SAAWqvB,GAC9CpzC,EAAI+jB,QAAQuvB,uBAAuBvvB,QAAQqN,YAAYgiB,KAE5D,CAACA,IAEEQ,GAA8B,IAAA73C,cAAY,KAC5Cs3C,OAAuBlpC,GAEnBnK,EAAI+jB,QAAQguB,iCACZ/xC,EAAI+jB,QAAQguB,iCACZ/xC,EAAI+jB,QAAQguB,oCAAiC5nC,KAElD,IAEH,OACI,gCACI,gBAAC,GAAuB,iBAChB3M,EAAI,CACR6xB,aAAcqX,EACd/W,qBAAsBgX,EACtBrX,gCAAiC2D,EACjCtmB,kBAAmB4mC,EACnB9mC,iBAAkBA,EAClBwU,2BAA4B6lB,KAGhC,gBAAC//B,EAAA,EAAK,CACFpI,wBAAwB,qBACxBJ,iBAAkB,gBAAC+B,EAAA,EAAgB,CAAC3D,GAAG,wBACvCkI,SAAUuuC,EACVv3B,YAAa83B,EACb90C,eAAgB+0C,GAEhB,uBAAK5zC,IAAKA,EAAI+jB,QAAQuvB,8BCtDtC,GAAeR,IAlCV,I,IAAA,qBACD7gB,EAAoB,sCACpBgB,EAAqC,eACrCyT,EAAc,iCACdI,EAAgC,uBAChCH,EAAsB,kBACtBh6B,GAAiB,EACdnP,GAAI,cAPN,mKASD,MAAMopC,GACF,IAAA7qC,cACI,CAAOsoB,EAASzO,KAAuB,iDACnC,OAAOjJ,EAAkB,OAAD,wBACjB0X,GAAO,CACVwiB,WAAY5U,GAAwB,CAChCzX,WAAYyX,EAAqBrc,MAG7C,KACA,CAACqc,EAAsBtlB,IAG/B,OACI,gBAAC,GAAuB,iBAChBnP,EAAI,CACR6xB,aAAcqX,EACd/W,qBAAsBgX,EACtBrX,gCAAiC2D,EACjCtmB,kBAAmBi6B,EACnB3lB,2BAA4B6lB,QCrBxC,IAAe,SAvB2B,IACtC,uBAAKpsC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAClD,wBACIuc,SAAS,UACTtc,EAAE,6IACFuc,KAAK,UACLC,SAAS,YAEb,wBACIF,SAAS,UACTtc,EAAE,sIACFuc,KAAK,UACLC,SAAS,YAEb,wBACIF,SAAS,UACTtc,EAAE,gIACFuc,KAAK,UACLC,SAAS,eCErB,MAAM,WAAgC,EAAA2C,cAClC,iBAAAhD,GACI,MAAM,qBAAE2C,GAAyB/C,KAAKja,MAKtCsd,YAAW,IAAMrD,KAAKsD,iBAAiBP,IAC3C,CAEA,kBAAAQ,CAAmBC,GACf,MAAQT,qBAAsBU,GAA6BD,GACrD,qBAAET,GAAyB/C,KAAKja,MAElC0d,IAA6BV,GAC7B/C,KAAKsD,iBAAiBP,EAE9B,CAEA,oBAAA1C,GACI,MAAM,qBAAE0C,EAAoB,MAAE9b,GAAU+Y,KAAKja,MAEzB,KAAhBkB,EAAMX,YAAyCgN,IAAzByP,GACtB/C,KAAKsD,kBAEb,CAEA,MAAA7b,GACI,MAAM,MAAER,EAAK,YAAEyV,EAAW,mBAAEsG,EAAkB,mBAAEC,EAAkB,qBAAEF,GAChE/C,KAAKja,MAEHgZ,GAAqB,IAAAlG,MAAK6D,EAAa,CAAEU,YAAa2F,KACtD,MAAEzc,GAA8BW,EAApByc,GAAe,YAAKzc,EAAhC,WAEN,OACI,uBAAK5C,UAAU,oBACX,gBAAC,KAAe,CACZod,SACI,gBAAC,GAAqB,CAClB/E,YAAaA,EACbsG,mBAAoBA,EACpBC,mBAAoBA,EACpBF,qBAAsBA,KAI9B,gBAAC,GAA6B,CAC1BvM,WAAYuI,EACZzV,OAAO,sBAGX,uCAAOpD,KAAK,SAASI,MAAOA,GAAS,IAAQod,KAI7D,CAEQ,gBAAAJ,CAAiBjG,EAAe,IACpC,MAAM,KAAEsG,EAAI,MAAE1c,GAAU+Y,KAAKja,MAE7B4d,EAAKC,cAAc3c,EAAML,KAAMyW,EACnC,EAUJ,MAAM,GAAuE,EACzEX,cACAqG,uBACAC,qBACAC,wBAGI,sBACI5e,UAAU,gFAA+E,YAC/E,0BAETqY,EAAY7R,KAAK2L,GACd,sBACInS,UAAW,IAAW,6CAA8C,CAChE,oCACImS,EAAW4G,cAAgB2F,IAEnCjY,IAAK0L,EAAW4G,aAEhB,gBAAC,GAAuB,CACpB5G,WAAYA,EACZzN,QAASia,EACT1Z,OAAO,gCAKnB,sBAAIjF,UAAU,8EACV,gBAAC,GAA6B,CAC1B0E,QAASka,EACT3Z,OAAO,uCAarB,GAAuF,EACzFkN,aACAlN,SACAP,aAEKyN,EASG,GAAwBA,GAQ5B,gBAAC,GAAsB,CACnBnS,UAAU,mFACVmS,WAAYA,EACZzN,QAASA,EACTO,OAAQA,IAXZ,gBAAC,GAAyB,CACtBjF,UAAU,mFACVmS,WAAYA,EACZzN,QAASA,EACTO,OAAQA,IAZR,gBAAC,GAA6B,CAC1BjF,UAAU,mFACViF,OAAQA,IA4BlB,GAA2E,EAC7EkN,aACAzN,UAAU,EAAAd,SAEV,MAAMmZ,GAAc,IAAAlc,cAAY,KAC5B6D,EAAQyN,EAAW4G,eACpB,CAACrU,EAASyN,IAEb,OAAQ,GAAwBA,GAO5B,gBAAC,GAAsB,CACnBA,WAAYA,EACZzN,QAASqY,EACT9X,OAAO,6BATX,gBAAC,GAAyB,CACtBkN,WAAYA,EACZzN,QAASqY,EACT9X,OAAO,8BAkBb,GAA+E,EACjFjF,YACAmS,YAAc+L,cACdjZ,SACAP,aAGI,0BAAQ1E,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBAAK7B,UAAU,4BAKX,gBAAC,GAAU,CAAC+E,oBAAoB,mBAAmB+G,KAAM,KAASuI,SAElE,uBAAKrU,UAAU,2BAA0B,YAAY,GAAGiF,gBACnDiZ,KAcf,GAAyE,EAC3Ele,YACAmS,aACAlN,SACAP,aAGI,0BAAQ1E,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBAAK7B,UAAU,4BAKX,uBAAKA,UAAU,yBACX,gBAACoF,EAAA,EAAgB,CACbsF,KAAM,CAAE0T,cAAejM,EAAWiM,eAClC3c,GAAG,8CAGX,uBAAKzB,UAAU,2BACX,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,8B,KAAiC0Q,EAAWkM,UAa/E,GAAuF,EACzFre,YACAiF,SACAP,UAAU,EAAAd,QAEV,0BAAQ5D,UAAWA,EAAS,YAAaiF,EAAQP,QAASA,EAAS7C,KAAK,UACpE,uBAAK7B,UAAU,6DACX,gBAAC,GAAc,CAAC+E,oBAAoB,mBAAmB+G,KAAM,KAASuI,SAEtE,uBAAKrU,UAAU,4BACX,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,6CAMrC,MC/MA,IAAe,IAAA5B,OAtDsE,EACjFwY,cACAsG,qBACAC,qBACAlE,yBAEA,MAAMhY,GAAc,IAAA7B,cACf+B,GACG,gBAAC,GAAuB,iBAChBA,EAAK,CACTyV,YAAaA,EACbsG,mBAAoBA,EACpBC,mBAAoBA,EACpBF,qBAAsBhE,GAAsBA,EAAmB3B,gBAGvE,CAACV,EAAasG,EAAoBC,EAAoBlE,IAGpD9O,GAAc,IAAA/K,cACfa,GACG,gBAAC,GAAsB,eAAC2W,YAAaA,GAAiB3W,KAE1D,CAAC2W,IAGL,OACI,gBAAChL,EAAA,EAAQ,CACLtI,oBAAoB,qBACpBC,OACI,gBAACsI,EAAA,EAAM,CAAC5F,QAAM,GACV,gBAACtC,EAAA,EAAgB,CAAC3D,GAAG,sCAI7B,gBAACuK,EAAA,EAAY,CAACC,MAAOL,IAChB,EAAGlH,aACA,0BAAQ1E,UAAU,0BAA0B0E,QAASA,EAAS7C,KAAK,UAC/D,gBAACuD,EAAA,EAAgB,CAAC3D,GAAG,wCAKjC,gBAAC,KAAc,CAACc,KAAK,eAAea,OAAQV,IAEpB,IAAvB2V,EAAY9R,QACT,uBAAKvG,UAAU,yBACX,gBAACiN,EAAA,EAAc,CAACxL,GAAG,yDCnBvC,MAAMk3C,WAA4B,EAAAp9B,UAAlC,c,oBAQI,KAAAC,MAAkC,CAC9B+P,uBAAuB,GA+FnB,KAAAC,uBAAqC,KACzC7P,KAAKC,SAAS,CACV2P,uBAAuB,EACvB7Q,wBAAoBzL,KAIpB,KAAA2U,uBAAgDniB,IACpD,MAAM,YAAE4W,GAAgBsD,KAAKja,MAE7Bia,KAAKC,SAAS,CACV2P,uBAAuB,EACvB7Q,oBAAoB,IAAAlG,MAAK6D,EAAa,CAAEU,YAAatX,MAGjE,CA3GU,iBAAAsa,G,sDACF,MAAM,kBACFtK,EACAoS,6BAA8BC,EAAgC,gBAC9DC,EAAe,OACfzT,EAAM,iBACNiB,EAAmB,EAAA3N,MACnB+X,KAAKja,MAET,UACU+P,EAAkB,CACpB3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,KAGjBqiB,UACMC,IAEd,CAAE,MAAO7a,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEM,oBAAA8S,G,sDACF,MAAM,oBAAEnK,EAAmB,OAAEvB,EAAM,iBAAEiB,EAAmB,EAAA3N,MAAS+X,KAAKja,MAEtE,UACUmQ,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEA,MAAA9F,GACI,MAAM,YACFqoB,EAAW,eACXjH,GAAiB,EAAK,qBACtB9C,EAAoB,YACpBrJ,EAAW,aACXgT,EACAxH,6BAA8BC,GAC9BnI,KAAKja,OAEH,mBAAEgZ,EAAqBiB,KAAK+P,wBAA2B/P,KAAKH,MAE5DlT,EAAYkc,GAAkB9C,EAC9BgD,EACFZ,IAAqCzL,EAAY9R,OAAS,GAAK8kB,GAEnE,OAAKI,GAAgB3H,EAKjB,gBAAChE,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWA,GAC9C,uBAAKtI,UAAU,uCACVyrB,EAEA/G,GACG,gBAAC,GAAyB,CACtBrM,YAAaA,EACbsG,mBAAoBhD,KAAKiI,uBACzBhF,mBAAoBjD,KAAK6P,uBACzB9Q,mBAAoBA,IAI3BoJ,GACG,gBAAC,GAAuB,CACpB9K,aAAc0B,GAAsBA,EAAmB3B,YACvD0G,qBAAqB,MApB9B,IA0Bf,CAEQ,oBAAAiM,GACJ,MAAM,sBAAEH,GAA0B5P,KAAKH,OACjC,YAAEnD,GAAgBsD,KAAKja,MAE7B,IAAI6pB,GAA0BlT,EAAY9R,OAI1C,OAAO,IAAAiO,MAAK6D,EAAa,CAAEiL,mBAAmB,KAAWjL,EAAY,EACzE,EAmBJ,MAyDA,IAAe,EAAAH,GAAA,IACX,EAAAtP,EAAA,GAAa,IAAY,EAAAuP,EAAA,IAtDzB,KACA,MAAM6S,GAA2B,IAAAroB,aAAW,CAAC0V,EAAmC,KAC5EA,EAAYnE,OAAO,MAEjB+W,GAA2B,IAAAtoB,aAAW,CAAC0V,EAAmC,KAC5EA,EAAYnE,QAAO,EAAGiT,4BAA6BA,MAGvD,MAAO,CAAC3c,EAAS9I,KACb,MAAM,OAAE4O,GAAW5O,GAEb,gBAAE+I,EAAe,cAAEzD,GAAkBwD,GAGvCE,MAAM,QACFmc,EAAO,UACPlc,EAAS,YACTkd,EAAW,eACXzP,EAAc,sBACdgM,EAAqB,uBACrB8G,GAEJjkB,UAAU,qBAAEya,IACZ1a,EAEE4f,EAAOC,IACPzb,EAAST,IACTid,EAAWC,IAEjB,KAAKzc,GAAWwb,GAASgB,GAAatX,GAClC,OAAO,KAGX,MAAM6a,EAA2BH,EAAyB5S,EAAe9H,IACnE8a,EAAqBH,EAAyBE,GAEpD,MAAO,CACH9S,YAAa+S,EACbC,aAA4C,IAA9BD,EAAmB7kB,QAAgB4kB,EAAyB5kB,OAAS,EACnFsd,8BACKqH,EAAuB5a,EAAO7O,GAAI6O,EAAOsH,UAC1C,GAA6B,CACzBxM,SACAwc,WACAjN,cAAerK,IAEvBoR,qBAAsBA,IACtB0C,sBAAuBA,IACvBL,gBAAiBtZ,EAAgBsZ,oBAMhB,CAAmC40B,OCzNhE,MAiBA,IAAe,EAAA/vC,EAAA,IAjB8D,EACzE7B,WACAuJ,SACAkc,eAEA,uBAAKxsB,UAAU,gBACX,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,kCAAmC,IACxD,qBAAGgD,KAAK,IAAIC,SAAS,EAAAC,EAAA,GAAe6nB,IAChC,gBAACpnB,EAAA,EAAgB,CACbsF,KAAM,CAAE06B,aAAc/0B,GAAqBtJ,EAArBsJ,CAA+BC,IACrD7O,GAAG,4BAEN,IACL,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,oCCwB7B,MAAMm3C,WAAkC,EAAAr9B,UAAxC,c,oBAwJY,KAAA0qB,cAA4B,KAAY,+CAC5C,MAAM,OAAE31B,EAAM,QAAE0X,EAAO,UAAEwE,EAAY,EAAA5oB,KAAI,eAAEsiC,EAAiB,EAAAtiC,MAAS+X,KAAKja,MAE1E,UACUsmB,EAAQ,CAAEnZ,SAAUyB,EAAO7O,KACjC+qB,IACAP,OAAOC,SAASF,QACpB,CAAE,MAAO9iB,GACLg9B,EAAeh9B,EACnB,CACJ,GACJ,CA7JU,iBAAA6S,G,sDACF,MAAM,kBAAEtK,EAAiB,OAAEnB,EAAM,iBAAEiB,EAAmB,EAAA3N,MAAS+X,KAAKja,MAEpEia,KAAKwqB,eAEL,UACU10B,EAAkB,CACpB3C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEM,oBAAA8S,G,sDACF,MAAM,oBAAEnK,EAAmB,cAAE8V,EAAa,OAAErX,EAAM,iBAAEiB,EAAmB,EAAA3N,MAAS+X,KAAKja,MAErFimB,EAAcrX,GAAQ,GAEtB,UACUuB,EAAoB,CACtB/C,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,IAEzB,CAAE,MAAOyH,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEA,kBAAAgW,CACIC,GAOA,MAAM,OAAE7O,EAAM,sBAAE8T,GAA0BzI,KAAKja,OACvC4O,OAAQ+1B,EAAYjiB,sBAAuBkiB,GAA8BnnB,EAG7E7O,EAAO8E,qBAAuBixB,EAAWjxB,oBACzCgP,IAA0BkiB,GAE1B3qB,KAAKwqB,cAEb,CAEA,MAAA/iC,GACI,MAAM,eAAEohB,GAAiB,EAAK,kBAAE+hB,GAAsB5qB,KAAKja,MAE3D,OACI,gBAACoe,GAAA,EAAc,CAACiF,wBAAsB,EAACzc,UAAWkc,GAC9C,uBAAKxkB,UAAU,6CACVumC,EAAoB5qB,KAAK6qB,oBAAsB7qB,KAAK8qB,oBAIrE,CAEQ,gBAAAA,GACJ,MAAM,SAAEvgB,EAAQ,SAAEnf,EAAQ,sBAAE2/B,EAAqB,kBAAEC,EAAiB,OAAEr2B,GAAWqL,KAAKja,MAEtF,OACI,qBAAG1B,UAAW0mC,EAAuBjiC,KAAK,IAAIhD,GAAIykB,EAAUxhB,SAAS,EAAAC,EAAA,MAChEgiC,GACG,gBAACvhC,EAAA,EAAgB,CACbsF,KAAM,CAAE06B,aAAc/0B,GAAqBtJ,EAArBsJ,CAA+BC,IACrD7O,GAAG,0BAKvB,CAEQ,iBAAA+kC,GACJ,MAAM,YACFlB,EAAW,SACXpf,EAAQ,SACRoP,EAAQ,SACRnhB,EAAQ,oBACRyyB,EAAmB,gBACnBC,EAAe,YACf1mB,EAAW,WACXC,EAAU,qBACV6F,EAAoB,OACpB3V,GACAqL,KAAKja,MAET,OACI,gCACK4zB,GACG,iCAAa,mCACT,8BACI,gBAAClwB,EAAA,EAAgB,CAAC3D,GAAG,mC,KACf,IACT6zB,GAIRgQ,GACG,iCAAa,mCACT,8BAAS,GAAGnxB,M,IAAuBmxB,GAI1CnlB,GAAeC,GACZ,iCAAa,qCACT,8BACI,gBAAChb,EAAA,EAAgB,CAAC3D,GAAG,8C,KACf,IACT,GAAG0e,KAAeC,KAI1B6F,GACG,yBACI,qBACIjmB,UAAW4mC,EACXniC,KAAK,IACLhD,GAAIykB,EACJxhB,SAAS,EAAAC,EAAA,MAERkiC,GACG,gBAACzhC,EAAA,EAAgB,CAAC3D,GAAG,0CAMrC,gBAAC,GAAW,CAAC6O,OAAQA,EAAQkc,UAAW7Q,KAAKsqB,gBAGzD,CAEQ,YAAAE,GACJ,MAAM,cAAExe,EAAa,OAAErX,EAAM,sBAAE8T,GAA0BzI,KAAKja,MAE1D,GAA2B4O,EAAO8E,sBAAwBgP,EAC1DuD,EAAcrX,GAAQ,GAEtBqX,EAAcrX,GAAQ,EAE9B,EAwBJ,SAAS,GAA2B5F,GAChC,GAAKA,EAAL,CAIA,GAAIA,EAAK86B,iBACL,MAAO,CACHF,YAAa,GAAkB56B,EAAK86B,iBAAiB92B,QACrDyF,SAAUzJ,EAAK86B,iBAAiB3jC,MAIxC,GAAI6I,EAAK+6B,SACL,MAAO,CACHH,YAAa,GAAkB56B,EAAK+6B,SAASH,aAC7CnxB,SAAUzJ,EAAK+6B,SAAStxB,SACxBgM,YAAazV,EAAK+6B,SAASE,SAC3BvlB,WAAY1V,EAAK+6B,SAASG,SAIlC,GAAIl7B,EAAKm7B,WAAY,CACjB,MAAM,KAAEp3B,IAAS,IAAAC,QAAOhE,EAAKm7B,YAE7B,MAAO,CACHP,YAAa,GAAkB56B,EAAK46B,aACpCnlB,YAAazV,EAAKo7B,SAAW,GAAGp7B,EAAKo7B,UAAUC,OAAO,EAAG,GACzD3lB,WAAY1V,EAAKo7B,SAAW,GAAGp7B,EAAKo7B,UAAUC,OAAO,EAAG,GACxD5xB,SAAU1F,EAAOA,EAAK6R,SAAW,GAEzC,CA3BA,CA4BJ,CAEA,SAAS,GAAkBglB,EAAc,GAAIC,EAAU,QACnD,OAAOD,EAAYz3B,SAAS,KAAOy3B,EAAc,GAAGC,KAAWD,GACnE,CA6BA,UAAe,EAAA18B,EAAA,GACX,IAAY,EAAAuP,EAAA,IA5BhB,UACI,gBAAE1N,EAAe,cAAEzD,IACnB,OAAEsJ,IAEF,MACI5F,MAAM,kBAAE4wB,EAAiB,YAAEnP,EAAW,sBAAE/H,IACxCpd,EACE8/B,EAAiBxL,IACjBlP,EAAWD,IAEjB,IAAK2a,IAAmB1a,EACpB,OAAO,KAGX,MAAM2a,EAAoB,GAA2Bz2B,EAAO8E,oBAE5D,OAAO,OAAP,wBACO2xB,GAAiB,CAEpBzR,SACIyR,GAAqB,CAACD,EAAe/I,UAAW+I,EAAe9I,UAAUjwB,KAAK,KAClFqW,sBAAuBA,IACvBmiB,mBAAmB,IAAAla,MAAKD,EAASE,SAAU,CAAEC,WAAYjc,EAAO7O,KAChEumB,QAASvd,EAAgBwd,iBAEjC,GAGgB,CAAmC2wB,MC/MnD,UAAe,EAAAzgC,EAAA,IAff,UAA8B,cAAEnR,IAC5B,MACI0D,MAAM,UAAEC,IACR3D,EACEoE,EAAST,IAEf,OAAKS,EAIE,CACHytC,cAAeztC,EAAOkN,aAAaugC,eAJ5B,IAMf,GAEA,EAAkD,EAAAjwC,EAAA,IA7D7C,I,IAAA,kBAAE6I,EAAiB,SAAE1K,EAAQ,cAAE8xC,GAAa,EAAKv2C,GAAI,cAArD,kDACD,MAAMw2C,GAA8B,IAAAj4C,cAC/BsoB,GACG1X,EAAkB,OAAD,wBACV0X,GAAO,CACV4vB,WAAY,CACRtO,aAAc,oBAG1B,CAACh5B,KAIDrG,QAAQ,SAAE4tC,GACV5jC,oBAAoB,WAAE6jC,EAAU,uBAAEC,IAClC52C,EAAKgO,OAEH6oC,EAAgCN,ECrChBlqC,QAAQ,IAAK,KAAK8G,cDuCxC,MAAMkxB,GAAoB,IAAA35B,UACtB,IACI,uBACIyL,IAAK1R,EAASoB,UAAU,gCACxB1G,GAAG,WACHiX,IACIwgC,EACM,WACIF,EAAW,WAAa,wEAC0CG,wDAA6DF,IACnI,wEAIlB,CAACA,EAAYlyC,EAAUoyC,EAAQH,EAAUE,IAG7C,OACI,gBAAC,GAAyB,iBAClB52C,EAAI,CACR4jB,SAAS,eACTzU,kBAAmBqnC,EACnBnS,kBAAmBA,SE9D/B,IAAKyS,IAAL,SAAKA,GACD,yBACA,+BACA,iCACA,0BACH,CALD,CAAKA,KAAAA,GAAyB,KAO9B,YCoDA,UAAe,EAAAjhC,EAAA,IApBf,UACI,cAAEnR,IACF,OAAEsJ,IAEF,MACI5F,MAAM,YAAEyhB,IACRnlB,GACE,SAAEslB,EAAW,KAAgBH,KAAiB,CAAC,EAC/CktB,EAAuB/sB,EAAS9X,MAClC,EAAG8kC,kBAAmBA,IAAiB,GAA0BC,SAGrE,MAAO,CACHC,kBAAiBH,IACXA,EAAqB9sB,aAAejc,EAAO7O,IAC3C43C,EAAqBvqC,YAAcwB,EAAOsH,SAGxD,GAEA,EA5BK,I,IAAA,gBAAE4hC,GAAe,EAAK93C,GAAK,cAA3B,qBACD,OAAI83C,EACO,gBAAC,GAAmB,iBAAK93C,IAG7B,gBAAC,GAA6B,iBAAKA,OC7BjC+3C,GAAqC/3C,IAC9C,MAAM,SAAE3B,EAAQ,QAAE25C,GAAYh4C,EAI9B,OAFA,IAAA8P,WAAUkoC,EAAS,CAACA,IAEb,gCAAG35C,ICJD45C,GAA2C,CACpDC,QAAS,GACTC,KCJiBn4C,IACjB,MAAMg4C,ECMuB,CAACh4C,IAC9B,MAAM,kBAAE+P,EAAiB,oBAAEI,EAAmB,OAAEvB,EAAM,iBAAEiB,EAAmB,EAAA3N,MAASlC,EAE9EynB,GAAU,IAAAnc,UACZ,KAAM,CACF8B,UAAWwB,EAAOsH,QAClB/I,SAAUyB,EAAO7O,MAErB,CAAC6O,EAAOsH,QAAStH,EAAO7O,KAGtBusB,GAAS,IAAAntB,cAAY,IAAM4Q,EAAkB0X,IAAU,CAAC1X,EAAmB0X,IAC3E2wB,GAAW,IAAAj5C,cACb,IAAMgR,EAAoBsX,IAC1B,CAACtX,EAAqBsX,IAG1B,OAAO,IAAAtoB,cAAY,KACfmtB,IAAS+rB,MAAMxoC,GAER,KACHuoC,IAAWC,MAAMxoC,MAEtB,CAACyc,EAAQzc,EAAkBuoC,KD7BdE,CAAkBt4C,GAElC,OAAO,gBAAC+3C,GAAO,CAACC,QAASA,MEMhBO,GAAgDv4C,I,MACzD,MAAM,OAAE4O,EAAM,iBAAEiB,EAAmB,EAAA3N,MAASlC,EAEtCw4C,GAA4C,QAA7B,EAAA5pC,EAAO6pC,8BAAsB,eAAEt4C,OAAQ,GACtD0Z,EAAYo+B,GAA2BO,GAE7C,OAAK3+B,EAME,gBAACA,EAAS,iBAAK7Z,KALlB6P,EAAiB,IAAIvJ,MAAM,4CAEpB,OC8Ff,UAAe,EAAAmQ,EAAA,IAjBf,UACI,gBAAE1N,EAAe,cAAEzD,IACnB,OAAEsJ,IAEF,MACIrJ,UAAU,sBAAE+xB,IACZhyB,EAEJ,MAAO,CACHqd,qBAAsB5Z,EAAgB4Z,qBACtCxS,oBAAqBpH,EAAgBoH,oBACrCyU,mBAAoB7b,EAAgB6b,mBACpC7U,kBAAmBhH,EAAgBgH,kBACnC+S,eAAgBwU,EAAsB1oB,EAAO7O,IAErD,GAEA,EAAiE,IAAA5B,OAnE5D6B,IACD,MAAM,OAAE4O,GAAW5O,EAEnB,OAAI4O,EAAOzO,OAAS,GAA0Bu4C,MACnC,gBAACH,GAAkB,iBAAKv4C,IAG/B4O,EAAO7O,KAAO+O,GAAA,EAAgB0G,WACvB,gBAAC,GAAuB,iBAAKxV,IAGpC4O,EAAO7O,KAAO+O,GAAA,EAAgB6pC,UACvB,gBAAC,GAAgC,iBAAK34C,IAI7C4O,EAAOzO,OAAS,GAA0B03C,QAC1CjpC,EAAO7O,KAAO+O,GAAA,EAAgBwH,kBAEvB,gBAAC,GAA8B,iBAAKtW,IAK3C4O,EAAO7O,KAAO+O,GAAA,EAAgB4F,gBAC9B9F,EAAO7O,KAAO+O,GAAA,EAAgBuG,MAC9BzG,EAAO7O,KAAO+O,GAAA,EAAgByG,QAC9B3G,EAAO7O,KAAO+O,GAAA,EAAgB2G,SAC9B7G,EAAO7O,KAAO+O,GAAA,EAAgB4G,QAC9B9G,EAAO7O,KAAO+O,GAAA,EAAgB6G,KAC9B/G,EAAOA,SAAW,GAAkBU,QACpCV,EAAOA,SAAW,GAAkBW,cACpCX,EAAOzO,OAAS,GAA0B03C,OAEnC,gBAAC,GAAmB,iBAAK73C,IAOhC4O,EAAOA,SAAW,GAAkB2F,YACpC3F,EAAOzO,OAAS,GAA0By4C,IAEnC,gBAAC,GAA6B,iBAAK54C,IAGvC,SCCX,IAAe,EAAAyW,EAAA,IAAczW,GAAUA,GAAvC,EACI,EAAAkH,EAAA,GAAa,GAAY,IAAS,EAAAsP,GAAA,IA/DlC,EACAM,OAAQ+hC,EACR9vC,kBACAzD,gBACA2gB,gBACAD,0BACA8mB,aACAvkB,cACAY,uBACA9jB,WACAuJ,SACAiB,mBACA2lC,mBAAmBF,GACnB1yB,YACAjd,eACA2c,0BAEA,MAAMw2B,EAAc,CAChBvwB,cACA5iB,gBAGE4gC,EAAiB,CACnBtgB,gBACAD,0BACApD,YACAN,uBAGEy2B,EAAwBvD,EAAiB,CAC3Cz1C,GAAI6O,EAAO7O,GACXmW,QAAStH,EAAOsH,QAChB/V,KAAMyO,EAAOzO,OAGjB,IAAK44C,EACD,OACI,gBAACC,GAAe,CACZlM,WAAYA,EACZ3jB,qBAAsBA,EACtBva,OAAQA,EACRiB,iBAAkBA,IAK9B,MAAMkI,ECzEK,SACX8gC,EACAC,EACAvS,GAEA,MAAM,gBACF3Z,EAAe,cACf/O,EAAa,WACbzY,EAAU,aACVwmB,EAAY,OACZne,GACAorC,GAEE,YAAEtwB,EAAW,aAAE5iB,GAAiBmzC,GAEhC,cAAE7yB,EAAa,UAAErD,EAAS,oBAAEN,EAAmB,wBAAE0D,GACnDugB,EAIJ,MAAO,CACHtgB,gBACAxE,cAJsB1c,GAA6B0I,EAAO1I,GAK1Dq2B,cAAe,IAAM3tB,EACrBuY,0BACAuC,YAAa,IAAMA,EACnBqE,gBAAiBA,EACjB/O,cAAeA,EACf+E,YACAjd,eACA2c,sBACAld,aACAwmB,eAER,CDuCwBqtB,CAAyBJ,EAAeC,EAAavS,GAEzE,OACI,gBAACzuB,GAAmB,CAACC,YAAaA,GAC9B,gBAACghC,EAAqB,CAClBhwC,gBAAiBA,EACjBzD,cAAeA,EACfD,SAAUA,EACVuJ,OAAQA,EACRiB,iBAAkBA,EAClBkI,YAAaA,YEpE7B,SAASmhC,GAA8BC,EAA0B54C,GAC7D,MAAQ6M,UAAW8I,EAAS/I,SAAUpN,GAAOuN,EAA2B/M,GAClEqO,EAASsH,GAAU,IAAApD,MAAKqmC,EAAS,CAAEjjC,UAASnW,QAAQ,IAAA+S,MAAKqmC,EAAS,CAAEp5C,OAE1E,IAAK6O,EACD,MAAM,IAAItI,MAAM,0CAA0CvG,KAG9D,OAAO6O,CACX,CAEA,MAyFMwqC,GAAuE,EACzE94C,aACAwsC,aACA3jB,uBACAva,SACAiB,mBACAtP,Y,MAEA,MAAM84C,GAAsB,IAAA/tC,UAAQ,IAE5B,gBAACguC,GAAe,CACZxM,WAAYA,EACZ3jB,qBAAsBA,EACtBva,OAAQA,EACRiB,iBAAkBA,GAAoB,EAAA3N,QAG/C,CAAC4qC,EAAY3jB,EAAsBva,EAAQiB,IAExC0pC,GAA2B,IAAAp6C,cAC5BF,GAAwB,gBAAC,GAAkB,CAACA,WAAYA,EAAY2P,OAAQA,EAAQiB,iBAAkBA,KACvG,CAACjB,IAGL,OAA6B,QAAzB,EAAAA,EAAO8E,0BAAkB,eAAE8lC,uBAEvB,gBAAC,GAAmB,CAChBh5C,QAAS64C,EACT54C,OAAQ,SAASF,MAMzB,gBAACk5C,GAAA,EAAa,CACVj5C,QAAS64C,EACT54C,OAAQ,SAASF,IACjBD,WAAYA,EACZK,MAAO44C,EACPh5C,MAAOA,KAKnB,IAAe,EAAAiW,GAAA,IAAc,IAAArY,OAnIzB,EACA2Y,QAAUrJ,UACVq/B,aACAxV,wBACAnO,uBACAgwB,UACAO,WAAW,EAAAx3C,KACX2N,uBAEA,MAAM,SAAExK,IAAa,WAEjBC,eACI0D,MAAM,UAAEC,MAEZ,UAEES,EAAST,IAETwL,GAAY,IAAAnJ,UAAQ,KACtB,GAAI5B,GAAU+D,EAAOY,qBAAsB,CACvC,MAAMvE,EAAmBJ,EAAOI,iBAC1B+M,EAAcnN,EAAO6J,QACrBD,EAAmB5J,EAAOkN,aAAatD,iBACvC2F,EAAgBigC,GAA8BC,EAAS1rC,EAAOY,sBAC9DuF,EAAajF,GAAqBtJ,EAArBsJ,CAA+BsK,IAC5C,UAAExE,GAAcrB,GAAsB/N,EAAUwR,EAAa/M,EAAkBwJ,EAA/DF,CAAiF6F,GAEvG,OAAOxE,GAAab,CACxB,CAEA,MAAO,KACR,CAAClK,EAAQ+D,EAAOY,uBAEbsrC,GAAe,IAAAx6C,cAChBoB,IACGm5C,EAASR,GAA8BC,EAAS54C,MAEpD,CAAC44C,EAASO,IAGd,OACI,gCACI,mCAAe,YAAYp7C,UAAU,YAAYsK,KAAK,UAAU6L,GAChE,gBAAC3T,GAAA,EAAS,CACN84C,sBAAuBnsC,EAAOY,qBAC9B/N,WAAYg3B,EACZz2B,KAAK,uBACL64C,SAAUC,GAETR,EAAQr0C,KAAK8J,IACV,MAAMrO,EAAQ2M,EAAyB0B,EAAO7O,GAAI6O,EAAOsH,SAOzD,KANgC,IAAAtG,KAC5BhB,EACA,8CACA,IC3Fb,4BAA4BjC,KAAK4d,OAAOsvB,UAAUC,WDkGzC,OACI,gBAACV,GAAqB,CAClB94C,WAAYg3B,EACZwV,WAAYA,EACZ3jB,qBAAsBA,EACtBpkB,IAAKxE,EACLqO,OAAQA,EACRiB,iBAAkBA,EAClBtP,MAAOA,a,4BEnGnC,MAaA,IAAe,EAAAkW,EAAA,GAAa5N,GAAA,EAA5B,EAAkD,IAAA1K,OAbc47C,GAC5D,gBAACpuC,EAAA,EAAQ,CACLtI,oBAAoB,sBACpBC,OACI,gBAACsI,EAAA,EAAM,CAAC5F,QAAM,GACV,gBAACtC,EAAA,EAAgB,CAAC3D,GAAG,uCAI7B,gBAACi6C,GAAA,EAAU,iBAAKD,EAAe,CAAEnyC,wBAAwB,S,eCIjE,MAAMqyC,GAA6B,CAACnrC,GAAA,EAAgBI,MAE9CgrC,IAA2E,IAAA/7C,OAC7E,EACIgP,WACAyG,aACAumC,aACAC,gBACAC,6BACA9W,YACApW,aACAzK,4BAEA,IAAKA,EACD,OAAO,gBAAChf,EAAA,EAAgB,CAAC3D,GAAG,+BAGhC,GAAI6T,GAA6C,SAA/BymC,EACd,OAAO,gBAAC32C,EAAA,EAAgB,CAACsF,KAAM,CAAE4K,cAAc7T,GAAG,kCAGtD,GAAIoN,IAAa2B,GAAA,EAAgBG,UAC7B,OAAO,gBAACvL,EAAA,EAAgB,CAAC3D,GAAG,sCAGhC,GAAIoN,IAAa2B,GAAA,EAAgBI,KAC7B,OACI,gCACI,gBAACorC,GAAA,EAAQ,CAACj3C,oBAAoB,oCAC9B,gBAACK,EAAA,EAAgB,CAAC3D,GAAG,gCAKjC,GAAIq6C,IAAkBtrC,GAAA,EAAgB8G,YAClC,OAAO,gBAAClS,EAAA,EAAgB,CAAC3D,GAAG,wCAGhC,GAAIq6C,IAAkBtrC,GAAA,EAAgByrC,WAClC,OAAO,gBAAC72C,EAAA,EAAgB,CAAC3D,GAAG,wCAGhC,GAAIo6C,IAAe,GAAkB3qC,aACjC,OAAO,gBAAC9L,EAAA,EAAgB,CAAC3D,GAAG,0CAGhC,GACIo6C,IAAe,GAAkBK,aACjCrtC,IAAa2B,GAAA,EAAgB4F,eAE7B,OAAO,gBAAChR,EAAA,EAAgB,CAAC3D,GAAG,yCAGhC,GAAIo6C,IAAe,GAAkB7qC,OAAQ,CACzC,MAAMmrC,EAAmBttC,IAAa2B,GAAA,EAAgBkG,eAChD,6BACA,iCAEN,OAAO,gBAACtR,EAAA,EAAgB,CACpBsF,KAAM,CAAEmkB,cACRptB,GAAIotB,EAAa,iCAAmCstB,GAE5D,CAEA,GAAIN,IAAe,GAAkB5qC,aAAc,CAC/C,MAAMmrC,EAAwBnX,EACxB,8BACA,2CACAoX,EAAwBpX,EACxB,8BACA,2CAEN,OACI,gBAAC7/B,EAAA,EAAgB,CACbsF,KAAM,CAAEu6B,YAAWpW,aAAYutB,wBAAuBC,yBACtD56C,GACIotB,EACMwtB,EACAD,GAItB,CAEA,OAAIvtC,IAAa2B,GAAA,EAAgB2G,QACtB,gBAAC/R,EAAA,EAAgB,CAAC3D,GAAG,oCAG5BoN,IAAa2B,GAAA,EAAgB6G,IACtB,gBAACjS,EAAA,EAAgB,CAAC3D,GAAG,gCAG5BoN,IAAa2B,GAAA,EAAgBO,OACtB,gBAAC3L,EAAA,EAAgB,CAAC3D,GAAG,mCAGzB,gBAAC2D,EAAA,EAAgB,CAAC3D,GAAG,kCAgEpC,IAAe,EAAA0W,EAAA,IAAa,EAAGnR,oBAC3B,MACI0D,MAAM,sBAAE0Z,GACRnd,UAAU,uBAAEq1C,EAAsB,sBAAEtjB,EAAqB,kBAAE9xB,IAC3DF,EAEJ,MAAO,CACHwd,eAAgB83B,KAA4BtjB,IAC5C5U,sBAAuBA,IACvBm4B,aAAcr1C,OATtB,EAWG,IAAArH,OApDC,EACAmC,aACAwiB,iBACA+3B,eACAn4B,wBACA03B,gBACAjtC,WACAyG,aACAumC,aACAE,6BACA9W,YACApW,gBAEA,gBAACxmB,EAAA,GAAM,CACHrI,UACI27C,GAA2B9tC,SAASgB,GAC9B,yBAAyBA,SACzBI,EAAS,YAET,wBACVpM,SAAU2hB,GAAkB+3B,GAAgBv6C,EAC5CP,GAAG,4BACH+6C,aAAW,EACXl0C,UAAWi0C,EACXzwC,KAAMzD,EAAA,GAAWqpB,MACjB7vB,KAAK,SACL0G,QAASF,EAAA,GAAco0C,QAEvB,gBAACb,GAAuB,CACpB3W,UAAWA,EACX8W,2BAA4BA,EAC5BltB,WAAYA,EACZzK,sBAAuBA,EACvB03B,cAAeA,EACfjtC,SAAUA,EACVyG,WAAYA,EACZumC,WAAYA,QC7IxB,MAAMa,WAA4B,EAAAnhC,UAAlC,c,oBAII,KAAAC,MAAQ,CACJmhC,uBAAuB,GAgEnB,KAAAC,YAA4C74C,IAChDA,EAAMY,iBAENgX,KAAKkhC,SAEb,CAlEU,iBAAA9gC,G,sDACF,MAAM,mBAAE+gC,GAAuBnhC,KAAKja,MAEhCo7C,GAIJnhC,KAAKkhC,QACT,G,CAEA,MAAAz5C,GACI,MAAM,qBAAE25C,GAAyBphC,KAAKja,MAEtC,OACI,uBAAK1B,UAAU,4BACX,gBAAC8f,GAAA,EAAc,CAACxX,UAAWy0C,GACtBphC,KAAKlT,iBAItB,CAEQ,aAAAA,GACJ,MAAM,mBAAEq0C,GAAuBnhC,KAAKja,OAC9B,sBAAEi7C,GAA0BhhC,KAAKH,MAEvC,GAAKshC,GAAuBH,EAI5B,OACI,uBAAK38C,UAAU,kDACX,qBACIA,UAAU,gEAA+D,YAC/D,gCACV0E,QAASiX,KAAKihC,aAEd,gBAACx3C,EAAA,EAAgB,CAAC3D,GAAG,mCAIrC,CAEc,MAAAo7C,G,sDACV,MAAM,iBAAEG,EAAgB,iBAAEzrC,EAAmB,EAAA3N,MAAS+X,KAAKja,MAE3D,UACUs7C,GACV,CAAE,MAAO9zC,GACLyS,KAAKC,SAAS,CAAE+gC,uBAAuB,KAInC,EAAAM,EAAA,GAAgB/zC,IACD,4CAAfA,EAAMrH,MAEN0P,EAAiBrI,EAEzB,CACJ,G,EASJ,UAAe,EAAAiP,EAAA,IAtFf,UAAkC,gBAC9B1N,EAAe,cACfzD,IAEA,MAAO,CACH+1C,qBAAsB/1C,EAAcC,SAAS81C,uBAC7CC,iBAAkBvyC,EAAgBuyC,iBAE1C,GA8EA,CAAsDN,I,wCC7FtD,MAuDA,IAAe,EAAAQ,GAAA,IAvDwE,EACnFC,uBACAjqB,WACA3wB,OACAY,WAAW,EAAAS,KACXw5C,oBACAC,2BAEA,MACIr2C,eACIC,UAAU,kBAAEC,MAEhB,UAEEnE,GAAe,IAAAlC,cAAakD,GAAeZ,EAASY,EAAM9C,OAAOW,UAAU,CAACuB,IAC5EyJ,GAAe,IAAAI,UACjB,IACI,gCACI,gBAAC5H,EAAA,EAAgB,CAAC3D,GAAG,gDAAiD,IACtE,gBAAC,GAAc,CACX0b,UAAU,YACVyU,QACI,gBAAC0rB,GAAA,EAAO,CAACr4C,OAAO,gCACZ,gBAACG,EAAA,EAAgB,CACbsF,KAAM,CACF6yC,YAAarqB,EAASsqB,mBAAmBL,IAE7C17C,GAAG,6CAKf,qBAAGgD,KAAK,IAAIC,SAAS,EAAAC,EAAA,MAChBuuB,EAASsqB,mBAAmBJ,KAEnB,IAClB,gBAACh4C,EAAA,EAAgB,CAAC3D,GAAG,iDAG7B,CAAC07C,EAAsBjqB,EAAUkqB,IAGrC,OACI,gBAAC,KAAa,CACVx7C,QAASy7C,EACTx6C,SAAUqE,IACVzF,GAAIc,EACJF,MAAOuK,EACPrK,KAAMA,EACNY,SAAUJ,EACVd,MAAOM,OCxDnB,GAR8C,IAC1C,uBAAKvC,UAAU,qBAAoB,YAAW,gCAC1C,qBAAGA,UAAU,2BACT,gBAACoF,EAAA,EAAgB,CAAC3D,GAAG,wCCuK3Bg8C,GAAwD,IACnD,uBAAKz9C,UAAU,wBAAwByB,GAAG,8BAe/Ci8C,GAA+E,EACjFlP,aACAxV,wBACA5U,wBACAyG,uBACAgwB,UACA8C,iBAAiB,EAAA/5C,KACjB2N,mBACAqsC,YACAzuC,aAEA,MAAM,aAAE9H,IAAiB,IAAA7G,YAAWoZ,EAAA,IAE9BikC,GAA4B,IAAAh9C,cAC7ByP,IACG,MAAMwtC,EAAgB,OAAH,wBACZ3uC,GAAM,CACTyjB,eAAgB,GAChBF,MAAO,GACPiX,WAAY,GACZM,cAAe,GACfD,eAAgB,GAChBnX,SAAU,GACVC,OAAQ,GACR3Z,SAAU,GACVH,aAAc,GACdjJ,qBAAsBnB,EAAyB0B,EAAO7O,GAAI6O,EAAOsH,SACjEmmC,qBAAqB,EACrB1wB,sBAAsB,IAG1BuwB,EAAU,CAAEzuC,OAAQ2uC,IACpBz2C,GAAa,GACbs2C,EAAertC,KAEnB,CAACnB,EAAQwuC,EAAgBC,EAAWv2C,IAGxC,OACI,gBAACgG,EAAA,EAAQ,CACLrI,OACI,gBAACsI,EAAA,EAAM,CAAC5F,QAAM,GACV,gBAACtC,EAAA,EAAgB,CAAC3D,GAAG,oCAI3B2iB,KAA2B,gBAAC,GAAkB,MAEhD,gBAAC45B,EAAA,EAAS,CAACC,OAAM,qCAEjB,gBAAC,GAAiB,CACdzP,WAAYA,EACZxV,sBAAuBA,EACvBnO,qBAAsBA,EACtBgwB,QAASA,EACTO,SAAUyC,EACVtsC,iBAAkBA,MAM5B2sC,GACF,CACIr1C,iBAAkB,EAAGs1C,mBAAkBC,sBAAsB,CACzDxrB,eAAgB,GAChBF,MAAO,GACPiX,WAAY,GACZM,cAAe,GACfD,eAAgB,GAChBnX,SAAU,GACVC,OAAQ,GACR3Z,SAAU,GACVpJ,qBAAsBnB,EAAyBwvC,EAAiBD,GAChEnlC,aAAc,GACd+kC,qBAAqB,EACrB1wB,sBAAsB,EACtB9gB,OAAO,EACP2M,WAAY,CACR/E,SAAU,GACVrM,OAAQ,CACJkf,SAAU,GACVyO,qBAAsB,GACtBJ,WAAY,GACZC,SAAU,GACVC,WAAY,GACZG,uBAAwB,KAGhCtX,cAAe,GACfue,cAAe,KAGnBn1B,aAAc,CAAC2H,GAAUzN,OAAS28C,WAAW,EAAAz6C,UACzCy6C,GACI,IAAAC,QACInvC,GACA,CAAClN,EAAOwE,KAAQ,IAAA83C,OAAMt8C,IAAoB,KAAVA,GAAwB,eAARwE,MAK5D0C,iBAAkB,EACdpC,WACA8I,6BAA4B,EAC5B1G,sBAEAwG,EAA2B,CACvBC,qBAAsBzG,EACtB0G,4BACA9I,cAIhB,IAAe,EAAA6B,EAAA,IAAa,QAAWs1C,GAAX,EAA8B,IAAAr+C,OAzPtD,EACAs9C,uBAAuB,EACvBL,qBACAtO,aACAxV,wBACA5U,wBACAvU,4BACAwtC,uBACAxyB,uBACA9jB,WACA8zC,UACA8C,iBACAa,sBACAjtC,mBACAqsC,YACAa,iBACAC,sBACAC,gCACAC,yBACApvC,sBAAsB,GACtBD,qBACA6tC,oBAAoB,EACpBjuC,a,QAEA,MAAM0vC,GAAmB,IAAA7xC,UAAQ,KAC7B,GAAKyxC,EAAL,CAIA,GAAQA,EAAeh9C,KACd+O,GAAA,EAAgBG,UAArB,CACI,GAAI8tC,EAAerpC,mBAAmBwW,aAClC,OAGJ,OAAO6yB,EAAeh9C,EAAE,CAGxB,OAAOg9C,EAAeh9C,EAX9B,IAaD,CAACg9C,IAEExZ,GAAY,IAAAj4B,UAAQ,K,UACtB,GAAKyxC,EAIL,OACmE,QAA/D,EAAiC,QAAjC,EAAAA,EAAerpC,0BAAkB,eAAEO,oCAA4B,eAAEC,UAChC,QAAjC,EAAA6oC,EAAerpC,0BAAkB,eAAEO,gCAExC,CAAC8oC,IAEJ,OAAIG,EAEI,gBAAC,GAAmB,CAChB9B,mBAAoBA,EACpBvrC,iBAAkBA,IAM1B,gBAACutC,EAAA,EAAI,CAAC9+C,UAAU,gBAAgBiF,OAAO,gBAClCm4C,EAAoB,GACjB,gBAAC,GAAgB,CACbD,qBAAsBA,EACtBE,qBAAsBA,EACtB96C,KAAK,iBACLY,SAAUq7C,EACVpB,kBAAmBA,IAI3B,gBAACM,GAAyB,CACtBlP,WAAYA,EACZxV,sBAAuBA,EACvB5U,sBAAuBA,EACvByG,qBAAsBA,EACtBgwB,QAASA,EACT8C,eAAgBA,EAChBpsC,iBAAkBA,EAClBqsC,UAAWA,EACXzuC,OAAQA,IAGZ,gBAAC,GAAkB,MAElBU,GACG,gBAACP,EAAe,CACZE,oBAAqBA,EACrBD,mBAAoBA,IAI5B,uBAAKvP,UAAU,gBACV2+C,EACG,gBAAClB,GAAkC,MAEnC,gBAAC,GAAmB,CAChBxY,UAAWA,EACX8W,2BACI0C,IAAuD,QAArC,EAAAA,EAAetE,8BAAsB,eAAEt4C,MAE7DgtB,cAAgD,QAAlC,EAAA4vB,aAAc,EAAdA,EAAgBrpC,0BAAkB,eAAEyZ,YAClD7sB,WAAY08C,EACZ5C,cAAe2C,GAAkBA,EAAe7mC,QAChD/I,SAAUgwC,EACVvpC,WACImpC,GAAkBpuC,GAAqBtJ,EAArBsJ,CAA+BouC,GAErD5C,WAAY4C,GAAkBA,EAAenuC,gBC5ErE,MAAMyuC,WAAgB,EAAAxjC,UAAtB,c,oBAII,KAAAC,MAAsB,CAClBshC,oBAAoB,EACpBkC,SAAS,EACTN,oBAAqB,CAAC,EACtBC,8BAA+B,CAAC,EAChCM,kBAAmB,CAAC,EACpBC,gBAAiB,CAAC,GAKd,KAAAC,iBAAkB,IAAAx8C,aAAW,KAC1B,CACHglB,cAAehM,KAAKgM,cACpBrD,UAAW3I,KAAK2I,UAChBN,oBAAqBrI,KAAKqI,oBAC1B0D,wBAAyB/L,KAAK+L,4BAyK9B,KAAAC,cAAqE,CACzErX,EACAzN,GAAW,KAEX,MAAMu8C,EAAWxwC,EAAyB0B,EAAO7O,GAAI6O,EAAOsH,UACtD,oBAAE8mC,GAAwB/iC,KAAKH,MAEjCkjC,EAAoBU,KAAcv8C,GAItC8Y,KAAKC,SAAS,CACV8iC,oBAAqB,OAAF,wBACZA,GAAmB,CACtB,CAACU,GAAWv8C,OAKhB,KAAA6kB,wBAA+E,CACnFpX,EACAzN,GAAW,KAEX,MAAMu8C,EAAWxwC,EAAyB0B,EAAO7O,GAAI6O,EAAOsH,UACtD,8BAAE+mC,GAAkChjC,KAAKH,MAE3CmjC,EAA8BS,KAAcv8C,GAIhD8Y,KAAKC,SAAS,CACV+iC,8BAA+B,OAAF,wBACtBA,GAA6B,CAChC,CAACS,GAAWv8C,OAKhB,KAAAw8C,mBAAwEt7C,IAC5E,MAAM,cAAEu7C,EAAa,kBAAEp4C,EAAiB,SAAEH,GAAa4U,KAAKja,OACtD,eAAE+8C,EAAiBa,GAAkB3jC,KAAKH,MAEhD,IACKtU,IACAu3C,GACDA,EAAe58C,OAAS,GAA0B03C,QAClDkF,EAAe58C,OAAS,GAA0Bu4C,OAClDqE,EAAec,8BAEf,OAGJ,MAAMt3C,EAAUlB,EAASoB,UAAU,wBAInC,OAFApE,EAAMy7C,YAAcv3C,EAEbA,GAGH,KAAAw3C,iBACJ,QAAwB,4CAAjBxT,GAAG,MAAE/iC,I,MACR,IAAKA,EACD,OAGJ,MAAM,QAAEw2C,EAAO,WAAE74C,EAAU,aAAE84C,GAAiBhkC,KAAKja,OAC3CG,KAAM+9C,GAAc12C,EAiB5B,GAdkB,yBAAd02C,GACc,uCAAdA,GAEA3zB,OAAOC,SAASvd,QAAQ+wC,GAAW,KAGrB,6BAAdE,GACA3zB,OAAOC,SAASF,SAGF,qBAAd4zB,UACMD,MAGN,EAAA1C,EAAA,GAAgB/zC,IAAUA,EAAMyC,KAAM,CACtC,MAAM,KAAEA,EAAI,QAAEk0C,EAAO,OAAEt/B,GAAWrX,EAEhB,mBAAdyC,EAAK9J,MAA6Bg+C,EAAQ3zB,WAChC,QAAV,EAAAD,OAAO6zB,WAAG,SAAE5zB,SAAS6zB,OAAOF,EAAQ3zB,WASzB,MAAX3L,GACc,4BAAd5U,EAAK9J,MACS,2BAAd8J,EAAK9J,OAEL8Z,KAAKC,SAAS,CAAEkhC,oBAAoB,UAE9B6C,IAEd,CAEA94C,EAAWqC,EACf,IAEI,KAAA82C,wBAAoEC,IAAmB,+CAC3F,MAAM,iBAAEC,EAAgB,iBAAE3uC,EAAmB,EAAA3N,MAAS+X,KAAKja,MAE3D,UACUw+C,EAAiBD,EAC3B,CAAE,MAAOrlB,GACLrpB,EAAiBqpB,EACrB,CACJ,IAEQ,KAAAulB,YAAuCj3C,IAC3C,MAAM,iBAAEqI,EAAmB,EAAA3N,KAAI,YAAEw8C,GAAgBzkC,KAAKja,OAEhD,KAAEG,GAASqH,EAEjB,GAAa,0BAATrH,EAMJ,OAAO0P,EAAiBrI,GALpBk3C,EAAYC,IAAIn3C,IAQhB,KAAA1B,aAA2D2H,IAAW,+CAC1E,MAAM,cACFmwC,EAAa,mBACbgB,EAAkB,sBAClBl8B,EAAqB,mBACrBm8B,EAAqB,EAAA38C,KAAI,SACzBy6C,EAAW,EAAAz6C,KAAI,cACf48C,EAAgB,EAAA58C,KAAI,YACpB68C,EAAW,iBACXC,GACA/kC,KAAKja,OAEH,eAAE+8C,EAAiBa,EAAa,gBAAEJ,GAAoBvjC,KAAKH,MAEjEklC,EAAiBC,eAAe,CAAC5C,oBAAqB5uC,EAAO4uC,sBAE7D,MAAM6C,EACFnC,GACAS,EAAgBtwC,EAAyB6vC,EAAeh9C,GAAIg9C,EAAe7mC,UAE/E,GAAIgpC,EACA,OAAOA,EAAazxC,GAGxB,IACI,MAAMqM,QAAcilC,ECzajB,SACXtxC,EACAiV,GAEA,IAAKA,EACD,MAAO,CAAC,EAGZ,MAAM,qBAAErU,GAAkCZ,EAAT7M,GAAI,YAAK6M,EAApC,2BACA,SAAEN,EAAQ,UAAEC,GAAcE,EAA2Be,GACrD8wC,EAA4B,CAC9BC,QAAS,CAAEhyC,YAAWD,aAEpBkyC,GAAc,IAAAzC,QAAO,OAAD,wBAEfh8C,GAAI,CACPuwB,SAAUxjB,EAAoBF,GACxBlB,EAA6BkB,EAAO0jB,UACpC,KACN1Z,SAAUjK,EAAoBC,GACxBZ,EAAyBY,EAAOgK,UAChC,OAEV,EAAAolC,OAOJ,OAJIsC,EAAQC,WAAY,IAAAtP,SAAQuP,KAC5BF,EAAQC,QAAQC,YAAcA,GAG3BF,CACX,CD0Y4CG,CAAsB7xC,EAAQiV,MACxD68B,EAAQzlC,EAAM9Q,KAAKw2C,WAEzBR,EAAiBS,kBAEjB9C,EAAS4C,aAAK,EAALA,EAAOG,QACpB,CAAE,MAAOl4C,GAGL,GAFAw3C,EAAiBW,mBAEb,EAAApE,EAAA,GAAgB/zC,IAAyB,2BAAfA,EAAMrH,KAChC,OAAOy+C,IAGX,GEhcG,SAA4Bp3C,GAGvC,MAA6B,iBAFRA,EAEDrH,IACxB,CF4bgBy/C,CAAmBp4C,GACnB,OAAOq3C,EAAmBr3C,GAG9Bs3C,EAAct3C,EAClB,CACJ,IAEQ,KAAAq4C,kBAAuDjxC,IAC3D,MAAM,eAAEmuC,GAAmB9iC,KAAKH,MAE5BijC,IAAmBnuC,IAInBA,GACAqL,KAAK6lC,2BAA2BlxC,GAGpCqL,KAAKC,SAAS,CAAE6iC,eAAgBnuC,MAG5B,KAAAgU,UAGI,CAAChU,EAAQmxC,KACjB,MAAMrC,EAAWxwC,EAAyB0B,EAAO7O,GAAI6O,EAAOsH,UACtD,gBAAEsnC,GAAoBvjC,KAAKH,MAE7B0jC,EAAgBE,KAAcqC,GAIlC9lC,KAAKC,SAAS,CACVsjC,gBAAiB,OAAF,wBACRA,GAAe,CAClB,CAACE,GAAWqC,OAKhB,KAAAz9B,oBAGI,CAAC1T,EAAQmiB,KACjB,MAAM2sB,EAAWxwC,EAAyB0B,EAAO7O,GAAI6O,EAAOsH,UACtD,kBAAEqnC,GAAsBtjC,KAAKH,MAE/ByjC,EAAkBG,KAAc3sB,GAIpC9W,KAAKC,SAAS,CACVqjC,kBAAmB,OAAF,wBACVA,GAAiB,CACpB,CAACG,GAAW3sB,MA8C5B,CArbU,iBAAA1W,G,sDACF,MAAM,sBACF2lC,EAAqB,WACrBC,EAAa,EAAA/9C,KAAI,gBACjBg+C,EAAkB,EAAAh+C,KAAI,QACtBi+C,EAAU,EAAAj+C,KAAI,kBACdw5C,EAAiB,yBACjB0E,GACAnmC,KAAKja,MAEL07C,GACAzhC,KAAKqkC,yBAAwB,SAG3BrkC,KAAKomC,4BAEX,IACI,MACMd,SADcS,KACAh3C,KAAKw2C,WAEzBS,EAAWV,aAAK,EAALA,EAAOG,QACtB,CAAE,MAAOl4C,IACD,EAAA+zC,EAAA,GAAgB/zC,IAAyB,oCAAfA,EAAMrH,MAChC+/C,EAAgB14C,EAExB,CAEAyS,KAAKqmC,4BAA8BF,GAC/B,IAAMnmC,KAAKsmC,0BACX,EAAGv3C,WAAU,MAAC,OAAkB,QAAlB,EAAAA,EAAKyhB,qBAAa,eAAE+1B,cAClC,EAAGx3C,WAAU,MAAC,OAAkB,QAAlB,EAAAA,EAAKyhB,qBAAa,eAAE+W,sBAGtCjX,OAAOjrB,iBAAiB,eAAgB2a,KAAK0jC,oBAC7C1jC,KAAKC,SAAS,CAAEojC,SAAS,IACzB6C,GACJ,G,CAEA,kBAAA3iC,GACI,MAAM,qBAAEijC,EAAuB,EAAAv+C,KAAI,QAAEi3C,GAAYl/B,KAAKja,MAEtDygD,EAAqBtH,EAAQr0C,KAAI,EAAG/E,QAASA,IACjD,CAEA,oBAAAua,GACQL,KAAKqmC,8BACLrmC,KAAKqmC,8BACLrmC,KAAKqmC,iCAA8B/yC,GAGvCgd,OAAO/O,oBAAoB,eAAgBvB,KAAK0jC,mBACpD,CAEA,MAAAj8C,GACI,MAAM,EAQFuY,KAAKja,OARH,cACF49C,EAAa,mBACb8C,EAAkB,sBAClBppB,EAAqB,qBACrBnO,EAAoB,QACpBgwB,EAAO,iBACPqF,GAAgB,EACb59C,GAAI,cAPL,qHAUA,mBACFw6C,EAAkB,QAClBkC,EAAO,eACPP,EAAiBa,EAAa,oBAC9BZ,EAAmB,kBACnBO,EAAiB,8BACjBN,GACAhjC,KAAKH,MAEH6mC,EACF5D,GAAkB7vC,EAAyB6vC,EAAeh9C,GAAIg9C,EAAe7mC,SAEjF,OACI,gBAAC,EAAe8B,SAAQ,CAACzX,MAAO0Z,KAAKwjC,mBACjC,gBAAC/K,EAAA,EAAiB,CAAC9rC,WAAY02C,KACzB,IAAAxN,SAAQqJ,IAAYyE,GAClB,gBAAC,GAAW,iBACJh9C,EAAI,CACR67C,iBAAkBmB,EAAc1nC,QAChCwmC,gBAAiBkB,EAAc79C,GAC/Bq7C,mBAAoBA,EACpB9jB,sBAAuBA,EACvBnO,qBAAsBA,EACtBgwB,QAASA,EACT8C,eAAgBhiC,KAAK4lC,kBACrB/C,oBAAqB7iC,KAAKqkC,wBAC1B3B,SAAU1iC,KAAKnU,aACf+J,iBAAkBoK,KAAKwkC,YACvB1B,eAAgBA,EAChBC,oBACK2D,GACG3D,EAAoB2D,SACxBpzC,EAEJ0vC,8BACK0D,GACG//C,EAAK8hB,yBACLu6B,EAA8B0D,SAClCpzC,EAEJ9F,iBACKk5C,GACGpD,EAAkBoD,SACtBpzC,MAMf0M,KAAK2mC,wBACL3mC,KAAK4mC,kCAGlB,CAEQ,qBAAAD,GACJ,MAAM,mBAAEF,EAAkB,SAAEr7C,EAAQ,4BAAEy7C,EAA2B,iBAAEC,GAC/D9mC,KAAKja,MAGHwH,EAAau5C,GAAoBL,EAEvC,OACKl5C,GACc,oCAAfA,EAAMrH,MACS,sBAAfqH,EAAMrH,MACS,yBAAfqH,EAAMrH,MACS,kCAAfqH,EAAMrH,MACS,8BAAfqH,EAAMrH,KAMN,gBAAC6gD,EAAA,EAAU,CACPx5C,MAAOA,EACPjB,QAASyF,EACLxE,EACAnC,EAASoB,UAAUw6C,KAAK57C,GACxBy7C,GAEJI,QAASjnC,KAAK8jC,iBACdoD,MAAO70C,EAAyB9E,EAAOnC,EAASoB,UAAUw6C,KAAK57C,MAZ5D,IAef,CAEQ,+BAAAw7C,GACJ,MAAM,qBAAEJ,EAAuB,EAAAv+C,KAAI,QAAEi3C,GAAYl/B,KAAKja,MAEtD,IACIygD,EAAqBtH,EAAQr0C,KAAI,EAAG/E,QAASA,IACjD,CAAE,MAAOyH,GACL,GAAIA,aAAiBlB,MACjB,OAAO,gBAAC06C,EAAA,EAAU,CAACx5C,MAAOA,EAAO05C,QAASjnC,KAAK8jC,kBAEvD,CAEA,OAAO,IACX,CAyOQ,0BAAA+B,CAA2BlxC,GAC/B,MAAM,iBAAEowC,GAAqB/kC,KAAKja,MAE5B4T,EAAahF,EAAOlF,OAAOjG,aAAemL,EAAO7O,GACjDoN,EAAWyB,EAAO7O,GAExBi/C,EAAiBoC,sBAAsBxtC,EAAYzG,EACvD,CAEc,yBAAAkzC,G,sDACV,MAAM,mBACFzB,EAAkB,iBAClB/uC,EAAmB,EAAA3N,MACnB+X,KAAKja,MAET,UACU4+C,IAEN,MAAM7B,EAAiB9iC,KAAKH,MAAMijC,gBAAkB9iC,KAAKja,MAAM49C,cAE3Db,GACA9iC,KAAK6lC,2BAA2B/C,EAExC,CAAE,MAAOv1C,GACLqI,EAAiBrI,EACrB,CACJ,G,CAEc,qBAAA+4C,G,sDACV,MAAM,QAAEjD,GAAYrjC,KAAKH,MAEpBwjC,IAILrjC,KAAKC,SAAS,CAAEojC,SAAS,UAEnBrjC,KAAKomC,4BAEXpmC,KAAKC,SAAS,CAAEojC,SAAS,IAC7B,G,EAGG,SAAS+D,IAAkB,gBAC1Bt4C,EAAe,cACfzD,IAEJ,MACI0D,MAAM,YACFyhB,EAAW,UACXxhB,EAAS,YACTkd,EAAW,gBACXm7B,EAAe,SACf9B,EAAQ,iBACR+B,EAAgB,kBAChBC,EAAiB,sBACjB9+B,EAAqB,2BACrBsU,GAEJ5wB,QAAQ,sBAAEq7C,EAAqB,oBAAEC,GACjCn8C,UAAU,sBAAE+xB,EAAqB,kBAAE9xB,IACnCF,EAEEolB,EAAWD,IACX/gB,EAAST,IACTid,EAAWC,IACXw7B,EAAeL,IACfrqB,EAA0BD,KAE1B,WAAE7J,GAAa,GAAUqyB,KAAc,CAAC,EAC9C,IAAIrG,EAAUqI,KAAuB,IAGrC,GAAIvqB,aAAuB,EAAvBA,EAAyB4b,8BAA+B,CACxD,MAAM+O,EAAyBzI,EAAQ3mC,QAAO5D,GAC5B,SAAdA,EAAO7O,IAAiB6O,EAAOsH,UAAYpH,GAAA,EAAgBkH,YAG/DmjC,EAAUyI,EAAuB/8C,OAAS+8C,EAAyBzI,CACvE,CAEA,IAAKzuB,IAAahhB,IAAWwc,GAAYiH,EACrC,OAAO,KAGX,MACI00B,yBAA0BC,EAAwB,SAClDpZ,EACAqZ,4BAA6BC,EAC7BC,wBAAyBC,EACzBC,4BAA6BC,GAC7B14C,EAAOI,iBAELqE,EAA4B2zC,EAC5BO,GAAkB,IAAAvvC,MAAK4X,EAASE,SAAU,CAC5CgtB,aAAc,GAA0BC,UAGtC,qBAAE8D,GAAyBjxB,EAEjC,IAAI02B,EACAkB,EAcJ,GAZAA,EAAkBnJ,EAAQ3mC,QAAQ5D,GAC1BA,EAAO7O,KAAO+O,GAAA,EAAgBI,MAAQN,EAAO8E,qBACpC9E,EAAO8E,mBAAmB6uC,eAGnC3zC,EAAO7O,KAAO+O,GAAA,EAAgB+F,8BAOlC8sC,GAAgBA,EAAa98C,OAAS,EAAG,CACzC,MAAM29C,EAA+C,CACjD1zC,GAAA,EAAgBG,WAGpBqzC,EAAkBnJ,EAAQ3mC,QAAQ5D,IACtB4zC,EAAmCr2C,SAASyC,EAAO7O,KAEnE,CAkBA,OAhBIsiD,GACAjB,EAAwBG,EACpBc,EAAgBx3B,WAChBw3B,EAAgBj1C,WAEpBk1C,EAAkBlB,GACZ,IAAA/zC,SAAQ,CAAC+zC,IACTkB,GAENlB,GAAwB,IAAAtuC,MAAKwvC,EAAiB,CAC1C54C,OAAQ,CAAE+4C,4BAA4B,KAMvC,CACHjE,iBAAkBz1C,EAAgBy1C,iBAClC/C,qBAAsBv1B,EAAS21B,YAC/BmC,QAASt0C,EAAO8qC,MAAMkO,SACtBv9C,WAAY4D,EAAgB5D,WAC5By4C,cAAewD,GAAyBkB,EAAgB,GACxD5B,mBAAoBe,IACpBzB,sBAAuBj3C,EAAgBi3C,sBACvC/B,aAAcl1C,EAAgBk1C,aAC9B3mB,sBAAuBA,IACvB5U,wBACAi5B,uBACAn2C,kBAAmBA,IACnB2I,4BACAywC,mBAAoB71C,EAAgB61C,mBACpCzF,QAASmJ,EACTpF,uBAAwBxyB,EAASwyB,uBACjC4D,4BACIpY,EAAS,0DACbqW,YAAah2C,EAAgBg2C,YAC7BgC,iBAAkBW,IAClBtB,yBAA0Br3C,EAAgB45C,UAC1C70C,oBACIK,GAA6B6zC,IAAwBr3C,EAAoBkB,SACnEq2C,OACA30C,EACVM,mBACIM,GAA6B6zC,IAAwBr3C,EAAoBqD,KACnEo0C,OACA70C,EACVmuC,kBACIhxB,EAAS81B,WAAa,EAAIoC,KAAK5nB,IAAItQ,EAAS81B,WAAYt6B,EAAS21B,aAAe,GAAK,EAEjG,CAEA,UAAe,EAAAgH,EAAA,IAAc,EAAA37C,EAAA,IAAa,EAAAuP,EAAA,GAAa4qC,GAAb,CAAgChE,K,8FG/pB1E,MA0FA,EA1FwB,EACpB5hC,YAAY,eACZC,WACArd,eAEA,MAAO+c,EAAY0nC,IAAiB,IAAA1pC,WAAS,GAEvCmC,GAAiB,IAAApc,cAAY,IAE3B8c,SAASC,eAAe,MACxBD,SAASC,eAAe,MAE7B,IAEG9Z,GAAc,IAAAjD,cAAY,KACvBic,GAIL0nC,GAAc,KACf,CAAC1nC,IAEEpB,GAAa,IAAA7a,cAAY,KACvBic,GAIJ0nC,GAAc,KACf,CAAC1nC,IAEEC,GAA8C,IAAAlc,cAAY,KACxDic,EACAhZ,IAEA4X,MAEL,CAACoB,EAAYhZ,EAAa4X,IAgB7B,OAdA,IAAAlK,YAAU,KACN,MAAMizC,EAAcxnC,IAQpB,OANIH,EACA2nC,SAAAA,EAAazjD,iBAAiB,QAAS8C,GAEvC2gD,SAAAA,EAAavnC,oBAAoB,QAASpZ,GAGvC,KACH2gD,SAAAA,EAAavnC,oBAAoB,QAASpZ,MAE/C,CAACgZ,EAAYhZ,EAAamZ,IAGzB,gBAAC,KAAO,KACJ,gBAAC,IAAS,MACL,EAAGnY,SACA,uBAAK9E,UAAU,kBAAkB0E,QAASqY,EAAajY,IAAKA,GACvD/E,KAKb,gBAAC,IAAM,CACHyd,UAAW,CACP,CAAEjb,KAAM,OAAQkb,SAAS,GACzB,CAAElb,KAAM,OAAQkb,SAAS,GACzB,CAAElb,KAAM,kBAAmBkb,SAAS,IAExCN,UAAWA,IAEV,EAAGrY,MAAKqW,WACJ2B,EACG,uBACI9c,UAAU,eACV8E,IAAKA,EACLqW,MAAK,+BACEA,GAAK,CACRzb,MAAO,OACPge,OAAQ,KAGXN,GAVK,Q,qEC9ElC,MAYA,EAZyD,EAAGrd,WAAUgF,yBAClE,sBACI/E,UAAW,IACP,wDACA+E,GACH,YACS,iBAEThF,E,sGCFT,MAgCA,EAhCkB,EACdA,WACAC,YAAY,YACZs7C,wBACAt5C,aACAo5C,WAAW,EAAAx3C,SAEX,MAAOrD,EAAgBmkD,IAAqB,IAAA5pC,UAA6BwgC,GAEnEqJ,EAA0CljD,IACxCO,IAIJ0iD,EAAkBjjD,GAClB25C,EAAS35C,KAGP09C,GAAkB,IAAAx8C,aAAYiiD,IACzB,CACHtkD,SAAUqkD,EACVpkD,eAAgBqkD,MAIxB,OACI,gBAACnkD,EAAAC,EAAiBgZ,SAAQ,CAACzX,MAAOk9C,EAAgB5+C,IAC9C,sBAAIP,UAAWA,GAAYD,K,eCdhC,MAAM8kD,GAAmB,IAAAj7C,oBAAiDqF,GAgCjF,GAAe,EAAAiJ,EAAA,IAAc,IAAArY,OA5BxB,I,IAAE2Y,QAAQ,cAAE+G,GAAe,KAAEhd,EAAI,SAAE64C,EAAW,EAAAx3C,MAAI,EAAKlC,GAAK,cAA5D,+BACD,IAAA8P,YAAU,IACC,KACH+N,EAAchd,EAAM,MAEzB,IAEH,MAAM84C,GAAe,IAAAx6C,cAChBoB,IACGsd,EAAchd,EAAMN,GACpBm5C,EAASn5C,KAEb,CAACM,EAAM64C,EAAU77B,IAGfulC,GAAe,IAAA93C,UAAQ,KAAM,CAAGzK,UAAS,CAACA,IAEhD,OACI,gBAACsiD,EAAiBnrC,SAAQ,CAACzX,MAAO6iD,GAC9B,gBAAC,EAAS,iBACFpjD,EAAK,CACT1B,UAAU,kDACVo7C,SAAUC,S,4FC/CX,SAASnjC,EACpB2/B,GAEA,MAAMkN,GAA4C,IAAAllD,OAC7C6B,GAAU,gBAACm2C,EAAiB,iBAAKn2C,MAClC,CAAC,EAAsC,K,IAApC8W,OAAQwsC,GAAU,EAAK7lC,GAAS,cAAlC,YAAgD8lC,EAAU,SAAKC,GAAS,cAAlC,YACnC,WAAaF,EAAYC,IAAe,IAAa9lC,EAAW+lC,MAGlEC,GAAqB,QAAyBJ,GAQpD,OAJAI,EAAmBhgD,YAAc,iBAC7B0yC,EAAkB1yC,aAAe0yC,EAAkBt1C,QAGhD4iD,CACX,C,kDCHA,MAiDA,EAjDqB,EAAGplD,WAAUkM,YAC9B,MAAOtC,EAAQy7C,IAAa,IAAAtqC,WAAS,GAC/BuqC,GAAoB,IAAAj9B,SAAO,IAEjC,IAAA5W,YAAU,KACN6zC,EAAkBx8B,SAAU,EAErB,KACHw8B,EAAkBx8B,SAAU,KAEjC,IAEH,MAAMnN,EAAa,KACV2pC,EAAkBx8B,SAIvBu8B,GAAU,IAiBd,OACI,gCACKrlD,EAAS,CACN2E,QAASgX,EACTO,WAVWH,IACO,UAAtBA,EAAcrV,KACdiV,OAWCzP,EAAM,CACHtC,SACAhG,eAvBQ,KACX0hD,EAAkBx8B,SAIvBu8B,GAAU,O,2CC9CX,MAAME,EAAwB,eACxBC,EAAqC,uB,mFCclD,MAAqB5zB,UAAuB,EAAApW,UAA5C,c,oBAKI,KAAAC,MAAuC,CACnCsB,YAAY,GA2CR,KAAA06B,WAA6C,KACjD77B,KAAKC,SAAS,CAAEkB,YAAY,KAGxB,KAAA26B,WAA6C,KACjD97B,KAAKC,SAAS,CAAEkB,YAAY,IAEpC,CA/CI,MAAA1Z,GACI,MAAM,SAAErD,EAAQ,UAAEod,EAAS,QAAEyU,GAAYjW,KAAKja,OACxC,WAAEob,GAAenB,KAAKH,MAE5B,OACI,gBAAC,KAAO,KACJ,gBAAC,IAAS,MACL,EAAG1W,SACA,wBACI0yB,OAAQ7b,KAAK87B,WACb9f,QAAShc,KAAK67B,WACdE,aAAc/7B,KAAK67B,WACnBG,aAAch8B,KAAK87B,WACnB3yC,IAAKA,GAEJ/E,KAKb,gBAAC,IAAM,CACHyd,UAAW,CACP,CAAEjb,KAAM,OAAQkb,SAAS,GACzB,CAAElb,KAAM,OAAQkb,SAAS,GACzB,CAAElb,KAAM,kBAAmBkb,SAAS,IAExCN,UAAWA,IAEV,EAAGrY,MAAKqW,WACL2B,GACI,uBAAKhY,IAAKA,EAAKqW,MAAOA,GACjByW,KAO7B,EA9CO,EAAA/T,aAAe,CAClBV,UAAW,U","sources":["webpack://checkout/./packages/ui/src/icon/IconHelp.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/ui/src/icon/IconClose.tsx","webpack://checkout/./packages/ui/src/modal/Modal.tsx","webpack://checkout/./packages/ui/src/form/Fieldset/Fieldset.tsx","webpack://checkout/./packages/core/src/app/coupon/AppliedCoupon.tsx","webpack://checkout/./packages/core/src/app/giftCertificate/AppliedGiftCertificate.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconRemove.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemable.tsx","webpack://checkout/./packages/core/src/app/cart/AppliedRedeemables.tsx","webpack://checkout/./packages/core/src/app/cart/Redeemable.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/ui/src/icon/IconError.tsx","webpack://checkout/./packages/ui/src/icon/IconSuccess.tsx","webpack://checkout/./packages/ui/src/icon/IconInfo.tsx","webpack://checkout/./packages/ui/src/alert/Alert.tsx","webpack://checkout/./packages/core/src/app/cart/mapToRedeemableProps.ts","webpack://checkout/./packages/core/src/app/ui/form/TextArea.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalLink.tsx","webpack://checkout/./packages/core/src/app/ui/text/MultiLineText.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditionsField.tsx","webpack://checkout/./packages/core/src/app/payment/mapSubmitOrderErrorMessage.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/unformatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getUniquePaymentMethodId.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardFieldsetValues.ts","webpack://checkout/./packages/core/src/app/payment/PaymentContext.tsx","webpack://checkout/./packages/core/src/app/termsConditions/TermsConditions.tsx","webpack://checkout/./packages/core/src/app/payment/getPaymentValidationSchema.ts","webpack://checkout/./packages/core/src/app/termsConditions/getTermsConditionsValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodType.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodName.ts","webpack://checkout/./packages/core/src/app/ui/form/CustomChecklistItem.tsx","webpack://checkout/./packages/bigcommerce-payments-utils/src/BigCommercePaymentsPayLaterBanner.tsx","webpack://checkout/./packages/paypal-utils/src/BraintreePaypalCreditBanner.tsx","webpack://checkout/./packages/paypal-utils/src/PaypalCommerceCreditBanner.tsx","webpack://checkout/./packages/ui/src/icon/mapFromPaymentMethodCardType.ts","webpack://checkout/./packages/ui/src/icon/CreditCardIcon.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIconList.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodTitle.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/getPaymentMethodDisplayName.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardFieldsetValues.ts","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormContext.tsx","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormProvider.tsx","webpack://checkout/./packages/core/src/app/ui/form/withForm.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2CardValidation.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isBankInstrument/isBankInstrument.ts","webpack://checkout/./packages/ui/src/form/Legend/Legend.tsx","webpack://checkout/./packages/ui/src/modal/ModalTrigger.tsx","webpack://checkout/./packages/ui/src/icon/IconNewAccount.tsx","webpack://checkout/./packages/ui/src/icon/IconPaypal.tsx","webpack://checkout/./packages/ui/src/icon/IconAch.tsx","webpack://checkout/./packages/ui/src/icon/IconSepa.tsx","webpack://checkout/./packages/ui/src/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isAchInstrument/isAchInstrument.ts","webpack://checkout/./packages/instrument-utils/src/guards/isSepaInstrument/isSepaInstrument.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/AccountInstrumentSelect/AccountInstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isCardInstrument/isCardInstrument.ts","webpack://checkout/./packages/instrument-utils/src/guards/isAccountInstrument/isAccountInstrument.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageAccountInstrumentsTable/ManageAccountInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageAchInstrumentsTable/ManageAchInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageCardInstrumentsTable/ManageCardInstrumentsTable.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageInstrumentsAlert/ManageInstrumentsAlert.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/ManageInstrumentsModal/ManageInstrumentsModal.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/AccountInstrumentFieldset/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/ui/src/form/CheckboxFormField/CheckboxFormField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentStorageField/InstrumentStorageField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentStoreAsDefaultField/InstrumentStoreAsDefaultField.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/StoreInstrumentFieldset/StoreInstrumentFieldset.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2PaymentMethod.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3PaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts","webpack://checkout/./packages/hosted-payment-integration/src/HostedPaymentComponent.tsx","webpack://checkout/./packages/affirm-integration/src/AffirmPaymentMethod.tsx","webpack://checkout/./packages/afterpay-integration/src/AfterpayPaymentMethod.tsx","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2PaymentMethod.tsx","webpack://checkout/./packages/apple-pay-integration/src/ApplePayPaymentMethod.tsx","webpack://checkout/./packages/barclay-integration/src/BarclaycardPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/components/BigCommercePaymentsPaymentMethodComponent.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/hooks/useBigCommercePaymentsInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePayments/BigCommercePaymentsPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/getUniquePaymentMethodId.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsAPMs/BigCommercePaymentsAPMsPaymentMethod.tsx","webpack://checkout/./packages/ui/src/icon/IconLock.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/formatCreditCardNumber/formatCreditCardNumber.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/unformatCreditCardNumber/unformatCreditCardNumber.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardNumberField/CreditCardNumberField.tsx","webpack://checkout/./packages/ui/src/icon/IconCardCodeVisa.tsx","webpack://checkout/./packages/ui/src/icon/IconCardCodeAmex.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCodeTooltip.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCodeField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardValidation/CreditCardValidation.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardExpiryField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/formatCreditCardExpiryDate/formatCreditCardExpiryDate.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardNameField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCustomerCodeField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardFieldset/CreditCardFieldset.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/getInstrumentValidationSchema/getInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardValidationSchema/getCreditCardValidationSchema.ts","webpack://checkout/./packages/locale/src/createLocaleContext.ts","webpack://checkout/./packages/credit-card-integration/src/CreditCardPaymentMethodComponent.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/configureCardValidator.ts","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNameField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardFieldset/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedCreditCardValidationSchema/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentCreditCards/BigCommercePaymentsCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/hooks/useBigCommercePaymentsFastlaneInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneCreditCardForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/BigCommercePaymentsFastlanePaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/index.ts","webpack://checkout/./packages/utility/src/is-error-with-translation-key.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsPayLater/BigCommercePaymentsPayLaterPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsVenmo/BigCommercePaymentsVenmoPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/CountryData.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/validation-schemas/getBigCommercePaymentsRatePayValidationSchema.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsRatePay/BigCommercePaymentsRatePayPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/constants.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectNumberField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectSelectField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectTextField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectEcpFieldset.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useEcpInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getEcpValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectEcpPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectAlternativePaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectInitializationData.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useSepaInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getSepaValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectSepaPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getIdealValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectIdealPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapV2PaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getPayByBankValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectPayByBankPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltClientPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltCustomForm.tsx","webpack://checkout/./packages/bolt-integration/src/BoltEmbeddedPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/constants.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchValidation.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchFormFields.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchMandateText.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchPaymentForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/BraintreeAchPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneCreditCardForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/hooks/useBraintreeFastlaneInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/index.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/BraintreeFastlanePaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeLocalPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreePaypalPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx","webpack://checkout/./packages/braintree-integration/src/VisaCheckout/VisaCheckoutPaymentMethod.tsx","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/TextFieldForm.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomFormFields.tsx","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomPaymentMethod.tsx","webpack://checkout/./packages/clearpay-integration/src/ClearpayPaymentMethod.tsx","webpack://checkout/./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarna/KlarnaPaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarnav2/KlarnaV2PaymentMethod.tsx","webpack://checkout/./packages/mollie-integration/src/MollieAPMCustomForm.tsx","webpack://checkout/./packages/mollie-integration/src/MollieCustomCardForm.tsx","webpack://checkout/./packages/mollie-integration/src/MolliePaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx","webpack://checkout/./packages/moneris-integration/src/MonerisPaymentMethod.tsx","webpack://checkout/./packages/offline-payment-integration/src/OfflinePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/components/PayPalCommercePaymentMethodComponent.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceAPMs/PayPalCommerceAPMsPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCredit/PayPalCommerceCreditPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCreditCards/PayPalCommerceCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneCreditCardForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/hooks/usePayPalCommerceFastlaneInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/PayPalCommerceFastlanePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/index.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/is-error-with-translation-key.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/hooks/usePaypalCommerceInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/PayPalCommercePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceVenmo/PayPalCommerceVenmoPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/validation-schema/getPaypalCommerceRatePayValidationSchema.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/PaypalCommerceRatePayPaymentMethod.tsx","webpack://checkout/./packages/paypal-express-integration/src/PaypalExpressPaymentMethod.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2Form.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2PaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/getStripeOCSStyles.ts","webpack://checkout/./packages/stripe-integration/src/stripe-ocs/StripeOCSPaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripe-upe/StripeUPEPaymentMethod.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3CustomCardForm.tsx","webpack://checkout/./packages/stripe-integration/src/stripev3/StripeV3PaymentMethod.tsx","webpack://checkout/./packages/worldpay-access-integration/src/WorldpayCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/resolvePaymentMethod.ts","webpack://checkout/./packages/core/src/app/payment/withPayment.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/getCreditCardInputStyles.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCustomerCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentFeatureAvailable.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/mapFromInstrumentCardType.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/InstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isAccountInstrument.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isBankAccountInstrument.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isCardInstrument.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconPaypal.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageAccountInstrumentsTable.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageCardInstrumentsTable.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageInstrumentsAlert.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/ManageInstrumentsModal.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/CardInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/core/src/app/ui/form/TextInputIframeContainer.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconLock.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconHelp.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/TooltipTrigger.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconCardCodeVisa.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconCardCodeAmex.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCodeTooltip.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardNameField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardValidation.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/withHostedCreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardExpiryField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/formatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardNameField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardNumberField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/formatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/getCreditCardValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/CreditCardValidation.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/getInstrumentValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/InstrumentStorageField.tsx","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/InstrumentStoreAsDefaultField.tsx","webpack://checkout/./packages/core/src/app/payment/StoreInstrumentFieldset/StoreInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/configureCardValidator.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/BraintreeCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconNewAccount.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/SignOutLink.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/WalletButtonPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/MasterpassPaymentMethod.tsx","webpack://checkout/./packages/locale/src/masterpassFormatLocale.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodProviderType.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaypalPaymentsProPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/Wrapper.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/initializationComponentMap.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/NoUI.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/usePropsToOnMount.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PPSDKPaymentMethod/PPSDKPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodV2.tsx","webpack://checkout/./packages/core/src/app/payment/createPaymentFormService.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethodList.tsx","webpack://checkout/./packages/core/src/app/common/utility/isMobile.ts","webpack://checkout/./packages/core/src/app/payment/PaymentRedeemables.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentSubmitButton.tsx","webpack://checkout/./packages/core/src/app/payment/SpamProtectionField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditField.tsx","webpack://checkout/./packages/core/src/app/payment/storeCredit/StoreCreditOverlay.tsx","webpack://checkout/./packages/core/src/app/payment/PaymentForm.tsx","webpack://checkout/./packages/core/src/app/payment/Payment.tsx","webpack://checkout/./packages/core/src/app/payment/mapToOrderRequestBody.ts","webpack://checkout/./packages/core/src/app/common/error/isCartChangedError.ts","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/ui/src/modal/ModalHeader.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts","webpack://checkout/./packages/ui/src/tooltip/TooltipTrigger.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node: Node, done: () => void) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children ? (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div aria-live=\"polite\" className={bodyClassName}>\n                        {children}\n                    </div>\n                </CSSTransition>\n            ) : null}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconClose: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconClose);\n","import classNames from 'classnames';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent, KeyboardEvent, MouseEvent, ReactNode, useCallback } from 'react';\nimport ReactModal from 'react-modal';\nimport { Omit } from 'utility-types';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\n\nimport { IconClose } from '../icon';\n\nexport type ModalProps = Omit<\n    ReactModal.Props,\n    'bodyOpenClassName' | 'className' | 'closeTimeoutMS' | 'overlayClassName'\n> & {\n    children?: ReactNode;\n    closeButtonLabel?: string | ReactNode;\n    footer?: ReactNode;\n    header?: ReactNode;\n    additionalHeaderClassName?: string;\n    additionalBodyClassName?: string;\n    additionalModalClassName?: string;\n    shouldShowCloseButton?: boolean;\n};\n\nconst Modal: FunctionComponent<ModalProps> = ({\n    children,\n    closeButtonLabel = 'Close',\n    footer,\n    header,\n    additionalHeaderClassName,\n    additionalBodyClassName,\n    additionalModalClassName,\n    onRequestClose = noop,\n    shouldShowCloseButton = false,\n    ...rest\n}) => {\n    const handleClose = useCallback(\n        (event: MouseEvent | KeyboardEvent) => {\n            onRequestClose(event);\n        },\n        [onRequestClose],\n    );\n\n    return (\n        <ReactModal\n            {...rest}\n            ariaHideApp={process.env.NODE_ENV !== 'test'}\n            bodyOpenClassName=\"has-activeModal\"\n            className={{\n                base: classNames(\n                    'modal optimizedCheckout-contentPrimary',\n                    additionalModalClassName,\n                ),\n                afterOpen: 'modal--afterOpen',\n                beforeClose: 'modal--beforeClose',\n            }}\n            closeTimeoutMS={200}\n            onRequestClose={onRequestClose}\n            overlayClassName={{\n                base: 'modalOverlay',\n                afterOpen: 'modalOverlay--afterOpen',\n                beforeClose: 'modalOverlay--beforeClose',\n            }}\n            shouldCloseOnEsc={true}\n            shouldCloseOnOverlayClick={false}\n        >\n            <div className={classNames('modal-header', additionalHeaderClassName)}>\n                {header}\n\n                {shouldShowCloseButton && (\n                    <a\n                        className=\"modal-close\"\n                        data-test=\"modal-close-button\"\n                        href=\"#\"\n                        onClick={preventDefault(handleClose)}\n                    >\n                        {Boolean(closeButtonLabel) && (\n                            <span className=\"is-srOnly\">{closeButtonLabel}</span>\n                        )}\n\n                        <IconClose />\n                    </a>\n                )}\n            </div>\n\n            <div\n                className={classNames('modal-body', additionalBodyClassName)}\n                data-test=\"modal-body\"\n            >\n                {children}\n            </div>\n\n            {Boolean(footer) && (\n                <div className=\"modal-footer\" data-test=\"modal-footer\">\n                    {footer}\n                </div>\n            )}\n        </ReactModal>\n    );\n};\n\nexport default Modal;\n","import classNames from 'classnames';\nimport React, { FieldsetHTMLAttributes, forwardRef, ReactNode, Ref } from 'react';\n\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\n    additionalClassName?: string;\n    testId?: string;\n    legend?: ReactNode;\n}\n\nconst Fieldset = forwardRef(\n    (\n        { additionalClassName, children, className, legend, testId, ...rest }: FieldsetProps,\n        ref: Ref<HTMLFieldSetElement>,\n    ) => (\n        <fieldset\n            {...rest}\n            className={className || classNames('form-fieldset', additionalClassName)}\n            data-test={testId}\n            ref={ref}\n        >\n            {legend}\n\n            <div className=\"form-body\">{children}</div>\n        </fieldset>\n    ),\n);\n\nexport default Fieldset;\n","import { Coupon } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface AppliedCouponProps {\n    coupon: Coupon;\n}\n\nconst AppliedCoupon: FunctionComponent<AppliedCouponProps> = ({ coupon }) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--coupon\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"coupon-amount\">\n                {coupon.displayName}\n            </span>{' '}\n            <TranslatedString id=\"redeemable.coupon_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\" data-test=\"coupon-code\">\n            {coupon.code}\n        </span>\n    </div>\n);\n\nexport default memo(AppliedCoupon);\n","import { GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { ShopperCurrency } from '../currency';\n\nexport interface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n}\n\nconst AppliedGiftCertificate: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n}) => (\n    <div className=\"redeemable-column redeemable-info\" data-test=\"redeemable-item--giftCertificate\">\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"giftCertificate-amount\">\n                <ShopperCurrency amount={giftCertificate.used} />\n            </span>{' '}\n            <TranslatedString id=\"redeemable.gift_certificate_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\">\n            {giftCertificate.remaining > 0 && (\n                <span className=\"redeemable-info-subHeader--remaining\">\n                    <TranslatedString id=\"redeemable.gift_certificate_remaining_text\" />{' '}\n                    <span data-test=\"giftCertificate-remaining\">\n                        <ShopperCurrency amount={giftCertificate.remaining} />\n                    </span>\n                </span>\n            )}\n\n            <span data-test=\"giftCertificate-code\">{giftCertificate.code}</span>\n        </span>\n    </div>\n);\n\nexport default memo(AppliedGiftCertificate);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconRemove: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconRemove);\n","import classNames from 'classnames';\nimport React, {FunctionComponent, ReactNode} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconRemove } from '../ui/icon';\n\nimport './AppliedRedeemable.scss';\n\nexport interface AppliedRedeemableProps {\n    children: ReactNode;\n    isRemoving: boolean;\n    onRemove(): void;\n}\n\nconst AppliedRedeemable: FunctionComponent<AppliedRedeemableProps> = ({\n    children,\n    isRemoving,\n    onRemove,\n}) => (\n    <div className=\"form-checklist-header\">\n        <div className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\">\n            <span className=\"is-srOnly\">\n                <TranslatedString id=\"redeemable.applied_text\" />\n            </span>\n        </div>\n\n        <div className=\"form-label form-label-redeemable\">\n            <div className=\"redeemable\">\n                {children}\n                <div className=\"redeemable-column redeemable-actions\">\n                    <button\n                        className={classNames('redeemable-remove', { 'is-loading': isRemoving })}\n                        data-test=\"redeemable-remove\"\n                        disabled={isRemoving}\n                        onClick={onRemove}\n                        type=\"button\"\n                    >\n                        <IconRemove />\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default AppliedRedeemable;\n","import { Coupon, GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AppliedCoupon } from '../coupon';\nimport { AppliedGiftCertificate } from '../giftCertificate';\n\nimport AppliedRedeemable from './AppliedRedeemable';\n\ninterface AppliedCouponProps {\n    coupon: Coupon;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedCouponChecklistItem: FunctionComponent<AppliedCouponProps> = ({\n    coupon,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(coupon.code);\n    }, [coupon, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedCoupon coupon={coupon} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\ninterface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedGiftCertificateChecklistItem: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(giftCertificate.code);\n    }, [giftCertificate, onRemoved]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable isRemoving={isRemoving} onRemove={handleRemove}>\n                <AppliedGiftCertificate giftCertificate={giftCertificate} />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\nexport interface AppliedRedeemablesProps {\n    coupons?: Coupon[];\n    giftCertificates?: GiftCertificate[];\n    isRemovingGiftCertificate?: boolean;\n    isRemovingCoupon?: boolean;\n    onRemovedCoupon(code: string): void;\n    onRemovedGiftCertificate(code: string): void;\n}\n\nconst AppliedRedeemables: FunctionComponent<AppliedRedeemablesProps> = ({\n    coupons = [],\n    giftCertificates = [],\n    isRemovingCoupon = false,\n    isRemovingGiftCertificate = false,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n}) => {\n    if (!coupons.length && !giftCertificates.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"form-checklist optimizedCheckout-form-checklist\"\n            data-test=\"redeemables-list\"\n        >\n            {coupons.map((coupon) => (\n                <AppliedCouponChecklistItem\n                    coupon={coupon}\n                    isRemoving={isRemovingCoupon}\n                    key={coupon.code}\n                    onRemoved={onRemovedCoupon}\n                />\n            ))}\n\n            {giftCertificates.map((giftCertificate) => (\n                <AppliedGiftCertificateChecklistItem\n                    giftCertificate={giftCertificate}\n                    isRemoving={isRemovingGiftCertificate}\n                    key={giftCertificate.code}\n                    onRemoved={onRemovedGiftCertificate}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(AppliedRedeemables);\n","import { CheckoutSelectors, RequestError } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport classNames from 'classnames';\nimport { FieldProps, FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, {FunctionComponent, KeyboardEvent, memo, ReactNode, useCallback} from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContextType, FormProvider, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { FormField, Label, TextInput } from '../ui/form';\nimport { Toggle } from '../ui/toggle';\n\nimport AppliedRedeemables, { AppliedRedeemablesProps } from './AppliedRedeemables';\n\nexport interface RedeemableFormValues {\n    redeemableCode: string;\n}\n\nexport type ReedemableChildrenProps = Pick<\n    RedeemableProps,\n    | 'onRemovedCoupon'\n    | 'onRemovedGiftCertificate'\n    | 'isRemovingGiftCertificate'\n    | 'isRemovingCoupon'\n    | 'coupons'\n    | 'giftCertificates'\n>;\n\nexport type RedeemableProps = {\n    appliedRedeemableError?: RequestError;\n    isApplyingRedeemable?: boolean;\n    isRemovingRedeemable?: boolean;\n    removedRedeemableError?: RequestError;\n    showAppliedRedeemables?: boolean;\n    shouldCollapseCouponCode?: boolean;\n    applyCoupon(code: string): Promise<CheckoutSelectors>;\n    applyGiftCertificate(code: string): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n} & AppliedRedeemablesProps;\n\nconst Redeemable: FunctionComponent<\n    RedeemableProps & WithLanguageProps & FormikProps<RedeemableFormValues>\n    > = ({ shouldCollapseCouponCode, showAppliedRedeemables, ...formProps }) => {\n        const { themeV2 } = useThemeContext();\n\n        return (\n            <Toggle openByDefault={!shouldCollapseCouponCode}>\n                {({ toggle, isOpen }): ReactNode => (\n                    <>\n                        {shouldCollapseCouponCode && (\n                            <a\n                                aria-controls=\"redeemable-collapsable\"\n                                aria-expanded={isOpen}\n                                className={classNames('redeemable-label', { 'body-cta': themeV2 })}\n                                data-test=\"redeemable-label\"\n                                href=\"#\"\n                                onClick={preventDefault(toggle)}\n                            >\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </a>\n                        )}\n                        {!shouldCollapseCouponCode && (\n                            <div className={classNames('redeemable-label', { 'body-cta': themeV2 })}>\n                                <TranslatedString id=\"redeemable.toggle_action\" />\n                            </div>\n                        )}\n                        {(isOpen || !shouldCollapseCouponCode) && (\n                            <div data-test=\"redeemable-collapsable\" id=\"redeemable-collapsable\">\n                                <RedeemableForm {...formProps} />\n                                {showAppliedRedeemables && <AppliedRedeemables {...formProps} />}\n                            </div>\n                        )}\n                    </>\n                )}\n            </Toggle>\n        );\n    }\n\nconst RedeemableForm: FunctionComponent<\n    Partial<RedeemableProps> & FormikProps<RedeemableFormValues> & WithLanguageProps\n> = ({ appliedRedeemableError, isApplyingRedeemable, clearError = noop, submitForm, language }) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n    const { themeV2 } = useThemeContext();\n\n    const handleSubmitForm = (setSubmitted: FormContextType['setSubmitted']) => {\n        if (isSubmittingOrder()) {\n            return;\n        }\n\n        setSubmitted(true);\n        submitForm();\n    }\n\n    const handleKeyDown = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => (event: KeyboardEvent) => {\n            if (appliedRedeemableError) {\n                clearError(appliedRedeemableError);\n            }\n\n            // note: to prevent submitting main form, we manually intercept\n            // the enter key event and submit the \"subform\".\n            if (event.keyCode === 13 || event.key === 'Enter') {\n                handleSubmitForm(setSubmitted);\n                event.preventDefault();\n            }\n        }),\n        [appliedRedeemableError, clearError, submitForm],\n    );\n\n    const handleSubmit = useCallback(\n        memoizeOne((setSubmitted: FormContextType['setSubmitted']) => () => {\n            handleSubmitForm(setSubmitted);\n        }),\n        [],\n    );\n\n    const renderLabel = useCallback(\n        (name: string) => (\n            <Label hidden htmlFor={name}>\n                <TranslatedString id=\"redeemable.code_label\" />\n            </Label>\n        ),\n        [],\n    );\n\n    const renderErrorMessage = useCallback((errorCode: string, errorMessage?: string) => {\n        switch (errorCode) {\n            case 'min_purchase':\n                return <TranslatedString id=\"redeemable.coupon_min_order_total\" />;\n\n            case 'not_applicable':\n                return <TranslatedString id=\"redeemable.coupon_location_error\" />;\n\n            default:\n                return errorMessage || <TranslatedString id=\"redeemable.code_invalid_error\" />;\n        }\n    }, []);\n\n    const renderInput = useCallback(\n        (setSubmitted: FormContextType['setSubmitted']) =>\n            ({ field }: FieldProps) =>\n                (\n                    <>\n                        {appliedRedeemableError &&\n                            appliedRedeemableError.errors &&\n                            appliedRedeemableError.errors[0] && (\n                                <Alert type={AlertType.Error}>\n                                    {renderErrorMessage(appliedRedeemableError.errors[0].code, appliedRedeemableError.errors[0].message)}\n                                </Alert>\n                            )}\n\n                        <div className=\"form-prefixPostfix\">\n                            <TextInput\n                                {...field}\n                                aria-label={language.translate('redeemable.code_label')}\n                                className=\"form-input optimizedCheckout-form-input\"\n                                onKeyDown={handleKeyDown(setSubmitted)}\n                                testId=\"redeemableEntry-input\"\n                                themeV2={themeV2}\n                            />\n\n                            <Button\n                                className={classNames('form-prefixPostfix-button--postfix', {\n                                    'body-bold': themeV2,\n                                })}\n                                disabled={isSubmittingOrder()}\n                                id=\"applyRedeemableButton\"\n                                isLoading={isApplyingRedeemable}\n                                onClick={handleSubmit(setSubmitted)}\n                                testId=\"redeemableEntry-submit\"\n                                variant={ButtonVariant.Secondary}\n                            >\n                                <TranslatedString id=\"redeemable.apply_action\" />\n                            </Button>\n                        </div>\n                    </>\n                ),\n        [\n            appliedRedeemableError,\n            handleKeyDown,\n            handleSubmit,\n            isApplyingRedeemable,\n            language,\n            isSubmittingOrder,\n            renderErrorMessage,\n        ],\n    );\n\n    const renderContent = useCallback(\n        memoizeOne(({ setSubmitted }: FormContextType) => (\n            <FormField\n                input={renderInput(setSubmitted)}\n                label={renderLabel}\n                name=\"redeemableCode\"\n            />\n        )),\n        [renderLabel, renderInput],\n    );\n\n    return (\n        <fieldset className=\"form-fieldset redeemable-entry\">\n            <FormProvider>{renderContent}</FormProvider>\n        </fieldset>\n    );\n};\n\nexport default withLanguage(\n    withFormik<RedeemableProps & WithLanguageProps, RedeemableFormValues>({\n        mapPropsToValues() {\n            return {\n                redeemableCode: '',\n            };\n        },\n\n        async handleSubmit(\n            { redeemableCode },\n            { props: { applyCoupon, applyGiftCertificate, clearError } },\n        ) {\n            const code = redeemableCode.trim();\n\n            try {\n                await applyGiftCertificate(code);\n            } catch (error) {\n                if (error instanceof Error) {\n                    clearError(error);\n                }\n\n                applyCoupon(code);\n            }\n        },\n\n        validationSchema({ language }: RedeemableProps & WithLanguageProps) {\n            return object({\n                redeemableCode: string().required(\n                    language.translate('redeemable.code_required_error'),\n                ),\n            });\n        },\n    })(memo(Redeemable)),\n);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import React, { FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    children: React.ReactNode;\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\n        {children}\n    </span>\n);\n\nexport default Tooltip;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconError: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconError);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSuccess: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconSuccess);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconInfo: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconInfo);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode, useId } from 'react';\n\nimport { IconError, IconInfo, IconSuccess } from '../icon';\n\nexport interface AlertProps {\n    additionalClassName?: string;\n    icon?: ReactNode;\n    testId?: string;\n    type?: AlertType;\n    children?: ReactNode;\n}\n\nexport enum AlertType {\n    Error = 'error',\n    Info = 'info',\n    Success = 'success',\n    Warning = 'warning',\n}\n\nfunction renderDefaultIcon(type?: AlertType): ReactNode {\n    switch (type) {\n        case AlertType.Error:\n        case AlertType.Warning:\n            return <IconError />;\n\n        case AlertType.Success:\n            return <IconSuccess />;\n\n        case AlertType.Info:\n        default:\n            return <IconInfo />;\n    }\n}\n\nconst Alert: FunctionComponent<AlertProps> = ({\n    additionalClassName,\n    children,\n    icon,\n    testId,\n    type,\n}) => {\n    const describedBy = useId();\n\n    return (\n        <div\n            aria-describedby={describedBy}\n            className={classNames(\n                'alertBox',\n                additionalClassName,\n                { 'alertBox--info': type === AlertType.Info || !type },\n                { 'alertBox--error': type === AlertType.Error },\n                { 'alertBox--success': type === AlertType.Success },\n                { 'alertBox--warning': type === AlertType.Warning },\n            )}\n            data-test={testId}\n        >\n            <div className=\"alertBox-column alertBox-icon\">{icon || renderDefaultIcon(type)}</div>\n\n            <div\n                aria-live={type === AlertType.Error ? 'assertive' : 'polite'}\n                className=\"alertBox-column alertBox-message\"\n                id={describedBy}\n                role={type === AlertType.Error ? 'alert' : 'status'}\n            >\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default Alert;\n","import { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { EMPTY_ARRAY } from '../common/utility';\n\nimport { RedeemableProps } from './Redeemable';\n\nexport default function mapToRedeemableProps(\n    context: CheckoutContextProps,\n): RedeemableProps | null {\n    const {\n        checkoutService,\n        checkoutState: {\n            data: { getConfig, getCoupons, getGiftCertificates },\n            statuses: {\n                isApplyingCoupon,\n                isApplyingGiftCertificate,\n                isRemovingCoupon,\n                isRemovingGiftCertificate,\n            },\n            errors: {\n                getApplyCouponError,\n                getApplyGiftCertificateError,\n                getRemoveCouponError,\n                getRemoveGiftCertificateError,\n            },\n        },\n    } = context;\n\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        appliedRedeemableError: getApplyCouponError() || getApplyGiftCertificateError(),\n        applyCoupon: checkoutService.applyCoupon,\n        applyGiftCertificate: checkoutService.applyGiftCertificate,\n        clearError: checkoutService.clearError,\n        coupons: getCoupons() || EMPTY_ARRAY,\n        giftCertificates: getGiftCertificates() || EMPTY_ARRAY,\n        isApplyingRedeemable: isApplyingCoupon() || isApplyingGiftCertificate(),\n        isRemovingCoupon: isRemovingCoupon(),\n        isRemovingGiftCertificate: isRemovingGiftCertificate(),\n        onRemovedCoupon: checkoutService.removeCoupon,\n        onRemovedGiftCertificate: checkoutService.removeGiftCertificate,\n        removedRedeemableError: getRemoveCouponError() || getRemoveGiftCertificateError(),\n        shouldCollapseCouponCode: config.checkoutSettings.isCouponCodeCollapsed,\n    };\n}\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n    isFloatingLabelEnabled?: boolean;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, isFloatingLabelEnabled, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => {\n        return (\n            <textarea\n                {...rest}\n                className={\n                    className ||\n                    classNames(\n                        { 'floating-textarea': isFloatingLabelEnabled },\n                        'form-input',\n                        'optimizedCheckout-form-input',\n                        additionalClassName,\n                    )\n                }\n                data-test={testId}\n                ref={ref}\n            />\n        );\n    },\n);\n\nexport default TextArea;\n","import React, { FunctionComponent, ReactNode, useCallback } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonSize } from '../button';\n\nimport Modal from './Modal';\nimport './ModalLink.scss';\nimport ModalTrigger, { ModalTriggerModalProps } from './ModalTrigger';\n\nexport interface ModalLinkProps {\n    header: ReactNode;\n    body: ReactNode;\n    children?: ReactNode;\n}\n\nconst ModalLink: FunctionComponent<ModalLinkProps> = ({ children, body, header }) => {\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <Modal\n                {...props}\n                additionalBodyClassName=\"modal--withText\"\n                footer={\n                    <Button onClick={props.onRequestClose} size={ButtonSize.Small}>\n                        <TranslatedString id=\"common.ok_action\" />\n                    </Button>\n                }\n                header={header}\n                shouldShowCloseButton={true}\n            >\n                {body}\n            </Modal>\n        ),\n        [header, body],\n    );\n\n    return (\n        <ModalTrigger modal={renderModal}>\n            { }\n            {({ onClick }) => <a onClick={preventDefault(onClick)}>{children}</a>}\n        </ModalTrigger>\n    );\n};\n\nexport default ModalLink;\n","import React, { Fragment, FunctionComponent } from 'react';\n\nconst MultiLineText: FunctionComponent<{ children: string }> = ({ children }) => (\n    <>\n        {children.split('\\n').map((line, key) => (\n            <Fragment key={key}>\n                {line}\n                <br />\n            </Fragment>\n        ))}\n    </>\n);\n\nexport default MultiLineText;\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { parseAnchor } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedHtml, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField, Fieldset, FormField, Legend, TextArea } from '../ui/form';\nimport { ModalHeader, ModalLink } from '../ui/modal';\nimport { MultiLineText } from '../ui/text';\n\nexport enum TermsConditionsType {\n    Link = 'link',\n    TextArea = 'textarea',\n    Modal = 'modal',\n}\n\nexport type TermsConditionsFieldProps =\n    | TermsConditionsLinkFieldProps\n    | TermsConditionsTextAreaFieldProps;\n\ninterface TermsConditionsLinkFieldProps {\n    name: string;\n    type: TermsConditionsType.Link;\n    url: string;\n}\n\ninterface TermsConditionsTextAreaFieldProps {\n    name: string;\n    terms: string;\n    type: TermsConditionsType.TextArea | TermsConditionsType.Modal;\n}\n\ninterface TermsConditionsTextFieldProps {\n    name: string;\n    terms: string;\n}\n\nconst BaseTermsConditionsModalCheckboxField: FunctionComponent<\n    TermsConditionsTextFieldProps & WithLanguageProps\n> = ({ language, name, terms }) => {\n    const translatedLabel = language.translate('terms_and_conditions.agreement_with_link_text', {\n        url: '',\n    });\n    const parsedLabel = parseAnchor(translatedLabel);\n\n    const labelContent = parsedLabel ? (\n        <>\n            {parsedLabel[0]}\n            <ModalLink\n                body={<MultiLineText>{terms}</MultiLineText>}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"terms_and_conditions.heading\" />\n                    </ModalHeader>\n                }\n            >\n                {parsedLabel[1]}\n            </ModalLink>\n            {parsedLabel[2]}\n        </>\n    ) : (\n        translatedLabel\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsModalCheckboxField = withLanguage(BaseTermsConditionsModalCheckboxField);\n\ninterface TermsConditionsCheckboxFieldProps {\n    name: string;\n    type: TermsConditionsType;\n    url?: string;\n}\n\nconst TermsConditionsCheckboxField: FunctionComponent<TermsConditionsCheckboxFieldProps> = ({\n    name,\n    url,\n}) => {\n    const labelContent = useMemo(\n        () =>\n            url ? (\n                <TranslatedHtml data={{ url }} id=\"terms_and_conditions.agreement_with_link_text\" />\n            ) : (\n                <TranslatedString id=\"terms_and_conditions.agreement_text\" />\n            ),\n        [url],\n    );\n\n    return <CheckboxFormField labelContent={labelContent} name={name} />;\n};\n\nconst TermsConditionsTextField: FunctionComponent<TermsConditionsTextFieldProps> = ({\n    name,\n    terms,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextArea defaultValue={terms} name={field.name} readOnly />,\n        [terms],\n    );\n\n    return <FormField input={renderInput} name={`${name}Text`} />;\n};\n\nconst TermsConditionsFieldset: FunctionComponent<TermsConditionsFieldProps> = (props) => {\n    const { type } = props;\n\n    return (\n        <Fieldset\n            additionalClassName=\"checkout-terms\"\n            legend={\n                <Legend>\n                    <TranslatedString id=\"terms_and_conditions.terms_and_conditions_heading\" />\n                </Legend>\n            }\n        >\n            {isTermsConditionsTextArea(props) && <TermsConditionsTextField {...props} />}\n            {isTermsConditionModal(props) && type === TermsConditionsType.Modal ? (\n                <TermsConditionsModalCheckboxField {...props} />\n            ) : (\n                <TermsConditionsCheckboxField {...props} />\n            )}\n        </Fieldset>\n    );\n};\n\nfunction isTermsConditionsTextArea(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.TextArea;\n}\n\nfunction isTermsConditionModal(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.Modal;\n}\n\nexport default memo(TermsConditionsFieldset);\n","import { TranslationData } from '@bigcommerce/checkout-sdk';\nimport { includes } from 'lodash';\n\nexport default function mapSubmitOrderErrorMessage(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n    shouldLocalise: boolean,\n): string {\n    switch (error.type) {\n        case 'not_initialized':\n            return translate('payment.payment_error');\n\n        case 'custom_provider_execute_error':\n            return translate(error.subtype);\n\n        case 'payment_cancelled':\n            return translate('payment.payment_cancelled');\n\n        case 'payment_method_invalid':\n            return translate('payment.payment_method_disabled_error');\n\n        case 'tax_provider_unavailable':\n            return translate('payment.tax_provider_unavailable');\n\n        case 'cart_changed':\n            return translate('shipping.cart_change_error');\n\n        case 'cart_consistency':\n            return translate('cart.consistency_error');\n\n        default:\n            if (\n                includes(\n                    [\n                        'order_could_not_be_finalized_error',\n                        'provider_fatal_error',\n                        'payment_invalid',\n                        'provider_error',\n                        'provider_widget_error',\n                        'user_payment_error',\n                    ],\n                    error.body && error.body.type,\n                )\n            ) {\n                return translate('payment.payment_method_error', { message: error.message });\n            }\n\n            if (shouldLocalise && error.body && error.body.errors && error.body.errors.length) {\n                const messages = error.body.errors.map((err: { code: any }) =>\n                    translate(`payment.errors.${err.code}`),\n                );\n\n                return messages.join(' ');\n            }\n\n            if (error.message) {\n                return error.message;\n            }\n\n            return error.type === 'unrecoverable'\n                ? translate('common.unavailable_error')\n                : translate('payment.place_order_error');\n    }\n}\n\nexport function mapSubmitOrderErrorTitle(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string,\n): string {\n    if (error.type === 'unrecoverable') {\n        return translate('common.unavailable_heading');\n    }\n\n    if (error.type === 'missing_shipping_method') {\n        return translate('common.missing_shipping_method_heading');\n    }\n\n    if (error.type === 'invalid_shipping_address') {\n        return translate('common.invalid_shipping_address');\n    }\n\n    return translate('common.error_heading');\n}\n","export interface ExpiryDate {\n    month: string;\n    year: string;\n}\n\nexport default function unformatCreditCardExpiryDate(value: string): ExpiryDate {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n\n    if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n        return { month: '', year: '' };\n    }\n\n    return {\n        month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n        year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n    };\n}\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n\nexport function parseUniquePaymentMethodId(value: string): {\n    methodId: string;\n    gatewayId?: string;\n} {\n    const [gatewayId, methodId] = value.includes('-') ? value.split('-') : [undefined, value];\n\n    return { gatewayId, methodId };\n}\n","import { CardInstrumentFieldsetValues } from '../storedInstrument';\n\nexport default interface CreditCardFieldsetValues {\n    ccCustomerCode?: string;\n    ccCvv?: string;\n    ccExpiry: string;\n    ccName: string;\n    ccNumber: string;\n    shouldSaveInstrument?: boolean;\n}\n\nexport interface CreditCardValidationValues extends CardInstrumentFieldsetValues {\n    ccCvv?: string;\n    ccNumber?: string;\n}\n\nexport function hasCreditCardNumber(values: unknown): values is { ccNumber: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccNumber' in values;\n}\n\nexport function hasCreditCardExpiry(values: unknown): values is { ccExpiry: string } {\n    if (!(values instanceof Object)) {\n        return false;\n    }\n\n    return 'ccExpiry' in values;\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createContext } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nconst PaymentContext = createContext<PaymentContextProps | undefined>(undefined);\n\nexport default PaymentContext;\n","import React, { FunctionComponent } from 'react';\n\nimport TermsConditionsField, { TermsConditionsType } from './TermsConditionsField';\n\nexport interface TermsConditionsProps {\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n}\n\nexport const TermsConditions: FunctionComponent<TermsConditionsProps> = ({\n    termsConditionsUrl,\n    termsConditionsText = '',\n}) => (\n    <>\n        {termsConditionsUrl ? (\n            <TermsConditionsField\n                name=\"terms\"\n                type={TermsConditionsType.Link}\n                url={termsConditionsUrl}\n            />\n        ) : (\n            <TermsConditionsField\n                name=\"terms\"\n                terms={termsConditionsText}\n                type={TermsConditionsType.TextArea}\n            />\n        )}\n    </>\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { getTermsConditionsValidationSchema } from '../termsConditions';\n\nexport interface PaymentValidationSchemaOptions {\n    additionalValidation?: ObjectSchema<Partial<PaymentFormValues>>;\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPaymentValidationSchema({\n    additionalValidation,\n    isTermsConditionsRequired,\n    language,\n}: PaymentValidationSchemaOptions): ObjectSchema<PaymentFormValues> {\n    const schemaFields: {\n        paymentProviderRadio: StringSchema;\n    } = {\n        paymentProviderRadio: string().required(),\n    };\n\n    const schemaFieldsWithTerms = object(schemaFields).concat(\n        getTermsConditionsValidationSchema({ isTermsConditionsRequired, language }),\n    );\n\n    return additionalValidation\n        ? schemaFieldsWithTerms.concat(additionalValidation as any)\n        : schemaFieldsWithTerms;\n}\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, BooleanSchema, object, ObjectSchema } from 'yup';\n\nexport interface TermsConditionValidationSchemaOptions {\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getTermsConditionsValidationSchema({\n    isTermsConditionsRequired,\n    language,\n}: TermsConditionValidationSchemaOptions): ObjectSchema<{ terms?: boolean }> {\n    const schemaFields: {\n        terms?: BooleanSchema;\n    } = {};\n\n    if (isTermsConditionsRequired) {\n        schemaFields.terms = boolean().oneOf(\n            [true],\n            language.translate('terms_and_conditions.agreement_required_error'),\n        );\n    }\n\n    return object(schemaFields);\n}\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config && method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import React, { FunctionComponent, memo, ReactNode } from 'react';\n\nexport interface CustomChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n}\n\nconst CustomChecklistItem: FunctionComponent<CustomChecklistItemProps> = ({\n    content,\n    htmlId,\n}) => {\n    return (\n        <li\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item custom-checklist-item\"\n            id={htmlId}\n        >\n            {content}\n        </li>\n    );\n};\n\nexport default memo(CustomChecklistItem);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsPayLaterBanner: FunctionComponent<{\n    onUnhandledError?(error: Error): void\n}> = ({ onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n                bigcommerce_payments_paylater: {\n                    bannerContainerId: 'bigcommerce-payments-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BigCommercePaymentsPayLater,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n    }, []);\n\n    return (\n        <div\n            data-test='bigcommerce-payments-banner-container'\n            id='bigcommerce-payments-banner-container'\n        />\n    );\n};\n\nexport default BigCommercePaymentsPayLaterBanner;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PaymentMethodId, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalCreditBanner: FunctionComponent<{ onUnhandledError?(error: Error): void }> = ({\n    onUnhandledError,\n}) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId: PaymentMethodId.BraintreePaypalCredit,\n                braintree: {\n                    bannerContainerId: 'braintree-banner-container',\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId: PaymentMethodId.BraintreePaypalCredit,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n\n        return () => {\n            try {\n                void checkoutService.deinitializePayment({\n                    methodId: PaymentMethodId.BraintreePaypalCredit,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError?.(error);\n                }\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test=\"braintree-banner-container\" id=\"braintree-banner-container\" />;\n};\n\nexport default BraintreePaypalCreditBanner;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nconst PaypalCommerceCreditBanner: FunctionComponent<{\n    methodId: string;\n    containerId: string;\n    onUnhandledError?(error: Error): void;\n}> = ({ methodId, containerId, onUnhandledError }) => {\n    const { checkoutService } = useCheckout();\n\n    useEffect(() => {\n        try {\n            void checkoutService.initializePayment({\n                methodId,\n                [methodId]: {\n                    bannerContainerId: containerId,\n                },\n            });\n\n            void checkoutService.deinitializePayment({\n                methodId,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError?.(error);\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default PaypalCommerceCreditBanner;\n","import { ComponentType, lazy } from 'react';\n\nimport { IconProps } from './';\n\ninterface InstrumentComponent {\n    instrument: string;\n    component: ComponentType<IconProps>;\n}\n\nconst instrumentTypeMap: Record<string, InstrumentComponent> = {\n    AMEX: {\n        instrument: 'american-express',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-amex\" */ './IconCardAmex')),\n    },\n    BITCOIN: {\n        instrument: 'bitcoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-bitcoin\" */ './IconBitCoin')),\n    },\n    BITCOIN_CASH: {\n        instrument: 'bitcoin-cash',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-bitcoin-cash\" */ './IconBitCoinCash'),\n        ),\n    },\n    BANCONTACT: {\n        instrument: 'bancontact',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-bancontact\" */ './IconCardBancontact'),\n        ),\n    },\n    CARNET: {\n        instrument: 'carnet',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-carnet\" */ './IconCardCarnet'),\n        ),\n    },\n    CB: {\n        instrument: 'cb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-cb\" */ './IconCardCB')),\n    },\n    DINERS: {\n        instrument: 'diners-club',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-diners-club\" */ './IconCardDinersClub'),\n        ),\n    },\n    DANKORT: {\n        instrument: 'dankort',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-dankort\" */ './IconCardDankort'),\n        ),\n    },\n    DISCOVER: {\n        instrument: 'discover',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-discover\" */ './IconCardDiscover'),\n        ),\n    },\n    DOGECOIN: {\n        instrument: 'dogecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-dogecoin\" */ './IconDogeCoin')),\n    },\n    ELECTRON: {\n        instrument: 'electron',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-electron\" */ './IconCardElectron'),\n        ),\n    },\n    ELO: {\n        instrument: 'elo',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-elo\" */ './IconCardElo')),\n    },\n    ETHEREUM: {\n        instrument: 'ethereum',\n        component: lazy(() => import(/* webpackChunkName: \"icon-ethereum\" */ './IconEthereum')),\n    },\n    HIPER: {\n        instrument: 'hiper',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-hipercard\" */ './IconCardHipercard'),\n        ),\n    },\n    JCB: {\n        instrument: 'jcb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-jcb\" */ './IconCardJCB')),\n    },\n    LITECOIN: {\n        instrument: 'litecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-litecoin\" */ './IconLiteCoin')),\n    },\n    MADA: {\n        instrument: 'mada',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-mada\" */ './IconCardMada')),\n    },\n    MAESTRO: {\n        instrument: 'maestro',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-maestro\" */ './IconCardMaestro'),\n        ),\n    },\n    MC: {\n        instrument: 'mastercard',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-mastercard\" */ './IconCardMastercard'),\n        ),\n    },\n    SHIBA_INU: {\n        instrument: 'shiba-inu',\n        component: lazy(() => import(/* webpackChunkName: \"icon-shiba-inu\" */ './IconShibaInu')),\n    },\n    TROY: {\n        instrument: 'troy',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-troy\" */ './IconCardTroy')),\n    },\n    CUP: {\n        instrument: 'unionpay',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-unionpay\" */ './IconCardUnionPay'),\n        ),\n    },\n    USD_COIN: {\n        instrument: 'usd-coin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-usd-coin\" */ './IconUsdCoin')),\n    },\n    VISA: {\n        instrument: 'visa',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-visa\" */ './IconCardVisa')),\n    },\n};\n\nexport default function mapFromPaymentMethodCardType(type: string): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return instrumentTypeMap[type]?.instrument || undefined;\n}\n\nexport function getPaymentMethodIconComponent(type?: string): ComponentType<IconProps> | undefined {\n    if (!type) {\n        return undefined;\n    }\n\n    const instrumentType = Object.values(instrumentTypeMap).find(\n        (record) => record.instrument === type,\n    );\n\n    return instrumentType ? instrumentType.component : undefined;\n}\n\nfunction getSupportedInstrumentTypes() {\n    return Object.values(instrumentTypeMap).map((record) => record.instrument);\n}\n\nexport function filterInstrumentTypes(instrumentTypes: string[]) {\n    const supportedInstrumentTypes = getSupportedInstrumentTypes();\n\n    return instrumentTypes.filter((type) => supportedInstrumentTypes.includes(type));\n}\n","import React, { FunctionComponent, memo, Suspense } from 'react';\n\nimport { getPaymentMethodIconComponent } from './mapFromPaymentMethodCardType';\nimport { IconSize } from './withIconContainer';\n\nexport interface CreditCardIconProps {\n    cardType?: string;\n}\n\nconst CreditCardIcon: FunctionComponent<CreditCardIconProps> = ({ cardType }) => {\n    const iconProps = {\n        additionalClassName: 'cardIcon-icon',\n        size: IconSize.Medium,\n        testId: `credit-card-icon-${cardType || 'default'}`,\n    };\n\n    const IconComponent = getPaymentMethodIconComponent(cardType);\n\n    return IconComponent ? (\n        <Suspense>\n            <IconComponent {...iconProps} />\n        </Suspense>\n    ) : (\n        <div className=\"cardIcon-icon cardIcon-icon--default icon icon--medium\" />\n    );\n};\n\nexport default memo(CreditCardIcon);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { CreditCardIcon, filterInstrumentTypes } from './';\n\nexport interface CreditCardIconListProps {\n    selectedCardType?: string;\n    cardTypes: string[];\n}\n\nconst CreditCardIconList: FunctionComponent<CreditCardIconListProps> = ({\n    selectedCardType,\n    cardTypes,\n}) => {\n    const filteredCardTypes = filterInstrumentTypes(cardTypes);\n\n    if (!filteredCardTypes.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"creditCardTypes-list\">\n            {filteredCardTypes.map((type) => (\n                <li\n                    className={classNames(\n                        'creditCardTypes-list-item',\n                        { 'is-active': selectedCardType === type },\n                        { 'not-active': selectedCardType && selectedCardType !== type },\n                    )}\n                    data-test={`${type}-icon`}\n                    key={type}\n                >\n                    <span className=\"cardIcon\">\n                        <CreditCardIcon cardType={type} />\n                    </span>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(CreditCardIconList);\n","import { CardInstrument, CheckoutSettings, LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport classNames from 'classnames';\nimport { compact } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { BigCommercePaymentsPayLaterBanner } from '@bigcommerce/checkout/bigcommerce-payments-utils'\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps , PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { BraintreePaypalCreditBanner, PaypalCommerceCreditBanner } from '@bigcommerce/checkout/paypal-utils';\nimport { CreditCardIconList, mapFromPaymentMethodCardType, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { isExperimentEnabled } from '../../common/utility';\n\nimport { hasCreditCardNumber } from './CreditCardFieldsetValues';\nimport getPaymentMethodDisplayName from './getPaymentMethodDisplayName';\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { isHostedCreditCardFieldsetValues } from './HostedCreditCardFieldsetValues';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodTitleProps {\n    method: PaymentMethod;\n    isSelected?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithPaymentTitleProps {\n    instruments: CardInstrument[];\n    checkoutSettings: CheckoutSettings;\n    storeCountryCode: string;\n    cdnBasePath: string;\n}\n\ninterface PaymentMethodSubtitleProps {\n    onUnhandledError?(error: Error): void;\n    methodId: string;\n}\n\ntype SubtitleType = ReactNode | ((subtitleProps?: PaymentMethodSubtitleProps) => ReactNode);\n\nexport function getPaymentMethodTitle(\n    language: LanguageService,\n    basePath: string,\n    checkoutSettings: CheckoutSettings,\n    storeCountryCode: string,\n): (method: PaymentMethod) => {\n    logoUrl: string;\n    titleText: string,\n    subtitle?: SubtitleType\n} {\n    const cdnPath = (path: string) => `${basePath}${path}`;\n\n    return (method) => {\n        const paymentWithLogo = method.initializationData?.methodsWithLogo\n            ? method.initializationData.methodsWithLogo\n            : [];\n        const methodName = getPaymentMethodName(language)(method);\n        const methodDisplayName = getPaymentMethodDisplayName(language)(method);\n        // TODO: API could provide the data below so UI can read simply read it.\n        // However, I'm not sure how we deal with translation yet. TBC.\n        const customTitles: { [key: string]: { logoUrl: string; titleText: string, subtitle?: ReactNode | ((props: any) => ReactNode) } } = {\n            [PaymentMethodType.CreditCard]: {\n                logoUrl: '',\n                titleText: methodName,\n            },\n            [PaymentMethodId.BraintreeVenmo]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.BraintreePaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: { onUnhandledError?(error: Error): void }): ReactNode => <BraintreePaypalCreditBanner {...props} />\n            },\n            [PaymentMethodType.PaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeAch]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BraintreeLocalPaymentMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.BigCommercePaymentsPayPal]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsPayLater]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <BigCommercePaymentsPayLaterBanner {...props} />\n            },\n            [PaymentMethodId.BigCommercePaymentsAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodId.PaypalCommerce]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo.svg'),\n                titleText: '',\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal_commerce_logo_letter.svg'),\n                titleText: methodDisplayName,\n                subtitle: (props: PaymentMethodSubtitleProps) => <PaypalCommerceCreditBanner containerId='paypal-commerce-credit-banner-container' {...props} />\n            },\n            [PaymentMethodId.PaypalCommerceAlternativeMethod]: {\n                logoUrl: method.logoUrl || '',\n                titleText: method.logoUrl ? '' : methodDisplayName,\n            },\n            [PaymentMethodType.VisaCheckout]: {\n                logoUrl: cdnPath('/img/payment-providers/visa-checkout.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.Affirm]: {\n                logoUrl: cdnPath('/img/payment-providers/affirm-checkout-header.png'),\n                titleText: language.translate('payment.affirm_display_name_text'),\n            },\n            [PaymentMethodId.Afterpay]: {\n                logoUrl: isExperimentEnabled(checkoutSettings, 'PROJECT-6993.change_afterpay_logo_for_us_stores') && storeCountryCode === 'US' ? cdnPath('/img/payment-providers/afterpay-new-us.svg') : cdnPath('/img/payment-providers/afterpay-badge-blackonmint.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.AmazonPay]: {\n                logoUrl: cdnPath('/img/payment-providers/amazon-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.ApplePay]: {\n                logoUrl: cdnPath('/modules/checkout/applepay/images/applepay-header@2x.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Bolt]: {\n                logoUrl: '',\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Clearpay]: {\n                logoUrl: cdnPath('/img/payment-providers/clearpay-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.GooglePay]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.PayWithGoogle]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Humm]: {\n                logoUrl: cdnPath('/img/payment-providers/humm-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Klarna]: {\n                logoUrl: method.initializationData?.enableBillie\n                        ? cdnPath('/img/payment-providers/klarna-billie-header.png')\n                        : cdnPath('/img/payment-providers/klarna-header.png'),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Laybuy]: {\n                logoUrl: cdnPath('/img/payment-providers/laybuy-checkout-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Masterpass]: {\n                logoUrl: 'https://masterpass.com/dyn/img/acc/global/mp_mark_hor_blk.svg',\n                titleText: '',\n            },\n            [PaymentMethodType.Paypal]: {\n                // TODO: method.id === PaymentMethodId.BraintreeVenmo should be removed after the PAYPAL-1380.checkout_button_strategies_update experiment removal\n                logoUrl:\n                    method.id === PaymentMethodId.BraintreeVenmo && method.logoUrl\n                        ? method.logoUrl\n                        : cdnPath('/img/payment-providers/paypalpaymentsprouk.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Quadpay]: {\n                logoUrl: cdnPath('/img/payment-providers/quadpay.png'),\n                titleText: language.translate('payment.quadpay_display_name_text'),\n            },\n            [PaymentMethodId.Sezzle]: {\n                logoUrl: cdnPath('/img/payment-providers/sezzle-checkout-header.png'),\n                titleText: language.translate('payment.sezzle_display_name_text'),\n            },\n            [PaymentMethodId.Zip]: {\n                logoUrl: cdnPath('/img/payment-providers/zip.png'),\n                titleText: language.translate('payment.zip_display_name_text'),\n            },\n            [PaymentMethodType.Barclaycard]: {\n                logoUrl: cdnPath(\n                    `/img/payment-providers/barclaycard_${method.id.toLowerCase()}.png`,\n                ),\n                titleText: '',\n            },\n            [PaymentMethodId.AdyenV2]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.AdyenV3]: {\n                logoUrl: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${\n                    method.method === 'scheme' ? 'card' : method.method\n                }.svg`,\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Mollie]: {\n                logoUrl:\n                    method.method === 'credit_card'\n                        ? ''\n                        : cdnPath(`/img/payment-providers/mollie_${method.method}.svg`),\n                titleText: methodDisplayName,\n            },\n            [PaymentMethodId.Checkoutcom]: {\n                logoUrl: ['credit_card', 'card', 'checkoutcom'].includes(method.id)\n                    ? ''\n                    : cdnPath(`/img/payment-providers/checkoutcom_${method.id.toLowerCase()}.svg`),\n                titleText: methodName,\n            },\n            [PaymentMethodId.StripeV3]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.StripeUPE]: {\n                logoUrl: paymentWithLogo.includes(method.id)\n                    ? cdnPath(`/img/payment-providers/stripe-${method.id.toLowerCase()}.svg`)\n                    : '',\n                titleText:\n                    method.method === 'iban'\n                        ? language.translate('payment.stripe_sepa_display_name_text')\n                        : methodName,\n            },\n            [PaymentMethodId.WorldpayAccess]: {\n                logoUrl: '',\n                titleText: language.translate('payment.credit_debit_card_text'),\n            },\n        };\n\n        if (method.gateway === PaymentMethodId.BlueSnapDirect) {\n            if (method.id === 'credit_card') {\n                return { logoUrl: '', titleText: language.translate('payment.credit_card_text') };\n            }\n\n            if (method.id === 'ecp') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_electronic_check_label') };\n            }\n\n            if (method.id === 'banktransfer') {\n                return { logoUrl: '', titleText: language.translate('payment.bluesnap_direct_local_bank_transfer_label') };\n            }\n        }\n\n        if (method.id === PaymentMethodId.PaypalCommerceVenmo) {\n            return customTitles[PaymentMethodId.PaypalCommerceAlternativeMethod];\n        }\n\n        if (method.id === PaymentMethodId.BigCommercePaymentsVenmo) {\n            return customTitles[PaymentMethodId.BigCommercePaymentsAlternativeMethod];\n        }\n\n        // KLUDGE: 'paypal' is actually a credit card method. It is the only\n        // exception to the rule below. We should probably fix it on API level,\n        // but apparently it would break LCO if we are not careful.\n        if (\n            method.id === PaymentMethodId.PaypalPaymentsPro &&\n            method.method === PaymentMethodType.CreditCard\n        ) {\n            return customTitles[PaymentMethodType.CreditCard];\n        }\n\n        if (method.id === PaymentMethodId.Ratepay) {\n            return { logoUrl: method.logoUrl || '', titleText: language.translate('payment.ratepay.payment_method_title')};\n        }\n\n        return (\n            customTitles[method.gateway || ''] ||\n            customTitles[method.id] ||\n            customTitles[method.method] ||\n            customTitles[PaymentMethodType.CreditCard]\n        );\n    };\n}\n\nfunction getInstrumentForMethod(\n    instruments: CardInstrument[],\n    method: PaymentMethod,\n    values: PaymentFormValues\n): CardInstrument | undefined {\n    const instrumentsForMethod = instruments.filter(instrument => instrument.provider === method.id);\n    const selectedInstrument = instrumentsForMethod.find(instrument => instrument.bigpayToken === values.instrumentId);\n\n    return selectedInstrument;\n}\n\nconst PaymentMethodTitle: FunctionComponent<\n    PaymentMethodTitleProps &\n        WithLanguageProps &\n        WithPaymentTitleProps &\n        ConnectFormikProps<PaymentFormValues>\n> = ({ cdnBasePath, checkoutSettings, storeCountryCode, onUnhandledError, formik: { values }, instruments, isSelected, language, method }) => {\n    const methodName = getPaymentMethodName(language)(method);\n    const { logoUrl, titleText, subtitle } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(method);\n    const { themeV2 } = useThemeContext();\n\n    const getSelectedCardType = () => {\n        if (!isSelected) {\n            return;\n        }\n\n        const instrumentSelected = getInstrumentForMethod(instruments, method, values);\n\n        if (isHostedCreditCardFieldsetValues(values) && values.hostedForm.cardType) {\n            return values.hostedForm.cardType;\n        }\n\n        if (hasCreditCardNumber(values) && values.ccNumber) {\n            const { card } = number(values.ccNumber);\n\n            if (!card) {\n                return;\n            }\n\n            return card.type;\n        }\n\n        if (instrumentSelected) {\n            return instrumentSelected.brand;\n        }\n    };\n\n    const getSubtitle = () => {\n        const node = subtitle instanceof Function ? subtitle({ onUnhandledError, methodId: method.id }) : subtitle;\n\n        return node ? <div className=\"paymentProviderHeader-subtitleContainer\">\n            {node}\n        </div> : null\n    }\n\n    return (\n        <div className={\n            classNames(\n                'paymentProviderHeader-container',\n                {'paymentProviderHeader-container-googlePay': method.id.includes('googlepay')},\n            )\n        }>\n            <div\n                className=\"paymentProviderHeader-nameContainer\"\n                data-test={`payment-method-${method.id}`}\n            >\n                {logoUrl && (\n                    <img\n                        alt={`${methodName} icon`}\n                        className={classNames(\n                            'paymentProviderHeader-img',\n                            {'paymentProviderHeader-img-applePay': method.id === 'applepay'},\n                            {'paymentProviderHeader-img-googlePay': method.id.includes('googlepay')},\n                        )}\n                        data-test=\"payment-method-logo\"\n                        src={logoUrl}\n                    />\n                )}\n\n                {titleText && (\n                    <div className={classNames('paymentProviderHeader-name',\n                        { 'sub-header': themeV2 })}\n                        data-test=\"payment-method-name\">\n                        {titleText}\n                    </div>\n                )}\n                {getSubtitle()}\n            </div>\n            <div className=\"paymentProviderHeader-cc\">\n                <CreditCardIconList\n                    cardTypes={compact(method.supportedCards.map(mapFromPaymentMethodCardType))}\n                    selectedCardType={getSelectedCardType()}\n                />\n            </div>\n        </div>\n    );\n};\n\nfunction mapToCheckoutProps({ checkoutState }: CheckoutContextProps): WithPaymentTitleProps | null {\n    const {\n        data: { getConfig, getInstruments },\n    } = checkoutState;\n    const config = getConfig();\n\n    const instruments = getInstruments() || [];\n\n    if (!config) {\n        return null;\n    }\n\n    const storeCountryCode = config.storeProfile.storeCountryCode\n\n    return {\n        instruments,\n        checkoutSettings: config.checkoutSettings,\n        storeCountryCode,\n        cdnBasePath: config.cdnPath,\n    };\n}\n\nexport default connectFormik(\n    withLanguage(withCheckout(mapToCheckoutProps)(memo(PaymentMethodTitle))),\n);\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport PaymentMethodId from './PaymentMethodId';\n\nexport default function getPaymentMethodDisplayName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        const { displayName } = method.config;\n\n        const isCreditCard = displayName?.toLowerCase() === 'credit card';\n\n        if (\n            method.id === PaymentMethodId.PaypalCommerceCredit ||\n            method.id === PaymentMethodId.BigCommercePaymentsPayLater ||\n            method.id === PaymentMethodId.BraintreePaypalCredit\n        ) {\n            const { payPalCreditProductBrandName } = method.initializationData;\n\n            if (payPalCreditProductBrandName) {\n                return payPalCreditProductBrandName.credit || payPalCreditProductBrandName;\n            }\n\n            return 'Pay Later';\n        }\n\n        if (\n            (isCreditCard && method.id === PaymentMethodId.AdyenV2) ||\n            method.id === PaymentMethodId.AdyenV3\n        ) {\n            return language.translate('payment.credit_debit_card_text');\n        }\n\n        if (isCreditCard) {\n            return language.translate('payment.credit_card_text');\n        }\n\n        return displayName || '';\n    };\n}\n","interface HostedCreditCardFieldsetValues {\n    hostedForm: {\n        cardType?: string;\n        errors?: {\n            cardCode?: string;\n            cardExpiry?: string;\n            cardName?: string;\n            cardNumber?: string;\n        };\n    };\n}\n\nexport function isHostedCreditCardFieldsetValues(\n    value: unknown,\n): value is HostedCreditCardFieldsetValues {\n    if (!(value instanceof Object)) {\n        return false;\n    }\n\n    if (!('hostedForm' in value)) {\n        return false;\n    }\n\n    return true;\n}\n","import { createContext, useContext } from 'react';\n\nimport PaymentMethodProps from '../../PaymentMethodProps';\n\nexport type PaymentFormContextProps = Pick<PaymentMethodProps, 'paymentForm'>;\n\nexport const PaymentFormContext = createContext<PaymentFormContextProps | undefined>(undefined);\n\nexport function usePaymentFormContext() {\n    const context = useContext(PaymentFormContext);\n\n    if (!context) {\n        throw new Error('usePaymentFormContext must be used within a PaymentFormContextProvider');\n    }\n\n    return context;\n}\n","import React, { ReactNode } from 'react';\n\nimport PaymentFormService from '../../PaymentFormService';\n\nimport { PaymentFormContext } from './PaymentFormContext';\n\ninterface PaymentFormProviderProps {\n    children?: ReactNode;\n    paymentForm: PaymentFormService;\n}\n\nexport const PaymentFormProvider = ({ children, paymentForm }: PaymentFormProviderProps) => {\n    return (\n        <PaymentFormContext.Provider value={{ paymentForm }}>\n            {children}\n        </PaymentFormContext.Provider>\n    );\n};\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\nimport { FormContext, FormContextType } from '@bigcommerce/checkout/ui';\n\nexport type WithFormProps = FormContextType;\n\nconst withForm = createInjectHoc(FormContext, { displayNamePrefix: 'WithForm' });\n\nexport default withForm;\n","import {\n    AdyenValidationState,\n    CardInstrument,\n    LanguageService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV2CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n    language?: LanguageService;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV2CardValidation: FunctionComponent<AdyenV2CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n    language,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        {language?.translate(\n                            'payment.instrument_trusted_shipping_address_title_text',\n                        )}\n                    </strong>\n\n                    <br />\n\n                    {language?.translate('payment.instrument_trusted_shipping_address_text')}\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            {language?.translate('payment.credit_card_number_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            {language?.translate('payment.credit_card_cvv_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            {language?.translate('payment.credit_card_expiration_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV2CardValidation;\n","import { BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isBankAccountInstrument(\n    instrument?: PaymentInstrument,\n): instrument is BankInstrument {\n    return (\n        instrument?.type === 'bank' && instrument?.method !== 'ach' && instrument?.method !== 'ecp'\n    );\n}\n\nexport default function assertIsBankInstrument(\n    instrument?: PaymentInstrument,\n): asserts instrument is BankInstrument {\n    if (!instrument || !isBankAccountInstrument(instrument)) {\n        throw new Error('Is not a bank account instrument.');\n    }\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface LegendProps extends HTMLAttributes<HTMLLegendElement> {\n    hidden?: boolean;\n    testId?: string;\n}\n\nconst Legend: FunctionComponent<LegendProps> = ({\n    children,\n    className,\n    hidden,\n    testId,\n    ...rest\n}) => (\n    <legend\n        {...rest}\n        className={classNames(\n            className || 'form-legend',\n            { 'is-srOnly': hidden },\n            { 'optimizedCheckout-headingSecondary': !hidden },\n        )}\n        data-test={testId}\n    >\n        {children}\n    </legend>\n);\n\nexport default Legend;\n","import React, {\n    Component,\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactNode,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nexport interface ModalTriggerState {\n    isOpen: boolean;\n}\n\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\n    state = {\n        isOpen: false,\n    };\n\n    private canHandleEvent = false;\n\n    componentDidMount(): void {\n        this.canHandleEvent = true;\n    }\n\n    componentWillUnmount(): void {\n        this.canHandleEvent = false;\n    }\n\n    render() {\n        const { children, modal } = this.props;\n        const { isOpen } = this.state;\n\n        return (\n            <>\n                {children({\n                    onClick: this.handleOpen,\n                    onKeyPress: this.handleKeyOpen,\n                })}\n\n                {modal({\n                    isOpen,\n                    onRequestClose: this.handleClose,\n                })}\n            </>\n        );\n    }\n\n    private handleOpen: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    private handleClose: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: false,\n        });\n    };\n\n    private handleKeyOpen: (keyboardEvent: KeyboardEvent<HTMLElement>) => void = (\n        keyboardEvent,\n    ) => {\n        if (keyboardEvent.key === 'Enter') {\n            this.handleOpen();\n        }\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconPaypal: FunctionComponent = () => (\n    <svg height=\"300\" viewBox=\"0 0 255 300\" width=\"255\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M228.03 77.2c3.6-23.02-.03-38.7-12.48-52.89C201.83 8.7 177.07 2 145.4 2H53.4c-6.47 0-11.99 4.7-12.99 11.11L2.1 256.03a7.9 7.9 0 0 0 7.8 9.14h56.78c79.33-53.38 148.45-81.4 161.35-187.97z\"\n            fill=\"#253B80\"\n        />\n        <path\n            d=\"M228.02 77.2C124 73 95 98 80.5 177.52l-13.82 87.65-3.91 24.85a6.9 6.9 0 0 0 6.82 7.98h47.86c5.67 0 10.48-4.12 11.37-9.71l.48-2.43 9-57.2.59-3.15c.88-5.6 5.7-9.73 11.37-9.73h7.16c46.38 0 82.68-18.83 93.29-73.33 4.43-22.76 2.14-41.77-9.6-55.14a45.77 45.77 0 0 0-13.1-10.1z\"\n            fill=\"#179BD7\"\n        />\n        <path\n            d=\"M215.33 72.14c-3.88-1.12-7.82-2-11.8-2.62a149.83 149.83 0 0 0-23.79-1.73h-72.1a11.49 11.49 0 0 0-11.36 9.73l-15.34 97.16-.44 2.84a13.1 13.1 0 0 1 12.95-11.1h27c53 0 94.5-21.53 106.62-83.82.37-1.85.67-3.64.95-5.4a64.66 64.66 0 0 0-9.98-4.2c-.9-.3-1.8-.59-2.71-.86z\"\n            fill=\"#222D65\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconPaypal);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconAch: FunctionComponent = () => (\n    <svg viewBox=\"25 0 50 48\" xmlSpace=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title id=\"iconAchTitle\">ACH</title>\n        <path\n            d=\"M30 9.5h40c1.9 0 3.5 1.6 3.5 3.5v22c0 1.9-1.6 3.5-3.5 3.5H30c-1.9 0-3.5-1.6-3.5-3.5V13c0-1.9 1.6-3.5 3.5-3.5z\"\n            fill=\"#1524d9\"\n        />\n        <path\n            d=\"m45.2 27.5-.6-1.4h-2.7l-.5 1.4h-1.8l3-7.1h1.7l2.8 7.1h-1.9zm-1.9-5.1-.9 2.4h1.8l-.9-2.4zm9.1 5c-.5.2-1 .3-1.6.3-.5 0-1-.1-1.5-.3-.9-.3-1.6-1-2-1.9-.4-1-.4-2 0-3 .2-.4.5-.8.8-1.2.4-.3.8-.6 1.2-.7 1-.4 2-.4 3 0 .4.2.9.4 1.2.8l-1.2 1.2c-.2-.2-.4-.4-.6-.5-.3-.1-.5-.2-.8-.2-.3 0-.6 0-.8.2-.2.1-.5.3-.6.5-.2.2-.3.4-.4.7-.1.3-.2.6-.1.9 0 .3 0 .6.1.9.1.3.2.5.4.7.2.2.4.3.6.4.3.1.5.2.8.2.3 0 .6-.1.9-.2.2-.1.5-.3.6-.5l1.2 1.1c-.3.1-.7.4-1.2.6zm6.4.1v-2.9H56v2.9h-1.7v-7.1H56v2.7h2.8v-2.7h1.7v7l-1.7.1z\"\n            fill=\"#fff\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconAch);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSepa: FunctionComponent = () => (\n    <svg fill=\"none\" height=\"24\" viewBox=\"0 0 35 24\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect fill=\"#9A1B27\" height=\"23\" rx=\"3.5\" stroke=\"#D9D9D9\" width=\"34\" x=\"0.5\" y=\"0.5\" />\n        <path\n            d=\"M10.758 11.652a5.095 5.095 0 00-1.29-.28 2.764 2.764 0 01-.747-.15.272.272 0 01-.165-.258.316.316 0 01.13-.252.703.703 0 01.43-.107.875.875 0 01.502.143.574.574 0 01.215.316l1.65-.165a2.03 2.03 0 00-.43-.71 1.564 1.564 0 00-.646-.388c-.394-.098-.8-.139-1.205-.122a3.809 3.809 0 00-1.227.158c-.28.092-.529.26-.717.488a1.205 1.205 0 00-.266.782c0 .265.089.523.252.732.15.207.357.366.595.459.412.133.834.231 1.262.294.255.035.505.098.746.186a.323.323 0 01.163.45.336.336 0 01-.112.124.861.861 0 01-.546.144.89.89 0 01-.516-.13.86.86 0 01-.294-.444l-1.736.165c.085.413.33.777.681 1.011a3.3 3.3 0 001.78.359c.473.02.946-.052 1.391-.215.307-.12.57-.33.753-.603.152-.227.234-.494.237-.767 0-.258-.08-.508-.23-.718a1.435 1.435 0 00-.645-.502h-.014zm10.638 1.241a.632.632 0 01-.509.258.724.724 0 01-.574-.265 1.205 1.205 0 01-.23-.803c-.03-.304.047-.608.216-.861a.703.703 0 01.856-.186c.09.046.167.112.227.193.161.238.237.524.215.81.03.302-.04.605-.2.861m.035-3.228c-.295 0-.586.074-.846.215-.241.15-.45.345-.617.574v-.688h-1.636v6.549h1.765v-2.417c.166.175.366.314.588.408.235.095.486.14.74.137a1.778 1.778 0 001.376-.603 2.51 2.51 0 00.538-1.736 2.912 2.912 0 00-.502-1.736 1.628 1.628 0 00-1.406-.703zm5.854 2.79c.006.184-.03.366-.108.531a.86.86 0 01-.359.352c-.163.094-.349.144-.538.143a.603.603 0 01-.43-.136.453.453 0 01.007-.66 1.73 1.73 0 01.674-.28c.259-.067.51-.143.754-.23v.28zm1.743 1.421a2.45 2.45 0 01-.043-.502v-2.016a1.995 1.995 0 00-.13-.681 1.292 1.292 0 00-.35-.545 1.614 1.614 0 00-.79-.373 7.187 7.187 0 00-1.262-.087 5.308 5.308 0 00-.904.072 2.13 2.13 0 00-.66.208c-.203.103-.38.25-.517.43-.136.212-.229.449-.272.696l1.671.18a.753.753 0 01.266-.41c.198-.104.421-.15.645-.135a.667.667 0 01.466.129c.104.126.153.289.137.452a5.901 5.901 0 01-.617.215c-.196.048-.622.139-1.277.272-.415.05-.806.225-1.12.502-.207.235-.318.54-.307.854a1.205 1.205 0 00.423.933c.35.275.79.41 1.233.38.368.008.733-.055 1.077-.187a2.26 2.26 0 00.681-.473 2 2 0 00.064.287c.035.094.078.186.13.272h1.635a2.275 2.275 0 01-.18-.473zM11.892 7.979v8.178l5.99 1.062V6.925l-5.99 1.054zm9.024 7.948a.316.316 0 00.064.216.18.18 0 00.137.071.172.172 0 00.143-.071c.04-.06.057-.13.05-.201a.345.345 0 00-.057-.216.18.18 0 00-.22-.055.172.172 0 00-.06.048.337.337 0 00-.057.216v-.008zm.394.366V16.2a.23.23 0 01-.208.115.314.314 0 01-.273-.186.465.465 0 01-.035-.202c0-.066.012-.132.036-.193a.286.286 0 01.385-.161.244.244 0 01.088.075v-.359h.122v1.004h-.115z\"\n            fill=\"#FEFEFE\"\n        />\n        <mask\n            height=\"33\"\n            id=\"mask0_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask0_1854_5393)\">\n            <path\n                d=\"M21.755 16.3h.15v-.739h-.143l-.007.74zm0-.875h.15v-.143h-.143l-.007.143z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask1_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask1_1854_5393)\">\n            <path\n                d=\"M22.207 16.3v-.739h.115v.115a.3.3 0 01.072-.107.136.136 0 01.086-.022.245.245 0 01.122.043l-.044.115a.179.179 0 00-.086-.029.114.114 0 00-.071.022.136.136 0 00-.05.072.488.488 0 00-.022.143v.38l-.122.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask2_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask2_1854_5393)\">\n            <path\n                d=\"M22.91 15.863h.409a.25.25 0 00-.05-.144.187.187 0 00-.144-.071.195.195 0 00-.143.057.23.23 0 00-.072.158zm.409.193l.122.022a.308.308 0 01-.108.172.38.38 0 01-.466-.036.387.387 0 01-.093-.28.402.402 0 01.1-.286.323.323 0 01.244-.1.31.31 0 01.237.1c.068.08.101.182.093.287v.028h-.545c.002.066.028.13.072.18a.2.2 0 00.143.071.186.186 0 00.122-.043c.035-.03.06-.07.072-.115\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask3_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask3_1854_5393)\">\n            <path\n                d=\"M24.216 16.028l.122.014a.316.316 0 01-.1.201.294.294 0 01-.202.072.315.315 0 01-.244-.1.401.401 0 01-.093-.288.51.51 0 01.043-.2.272.272 0 01.115-.137.36.36 0 01.18-.043.301.301 0 01.193.058.28.28 0 01.093.172l-.122.021a.2.2 0 00-.057-.114.158.158 0 00-.108-.036.195.195 0 00-.143.071.323.323 0 00-.065.216.33.33 0 00.058.215.178.178 0 00.143.057.172.172 0 00.122-.043.223.223 0 00.065-.143\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask4_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask4_1854_5393)\">\n            <path\n                d=\"M24.854 16.186l.014.107a.468.468 0 01-.093.015.215.215 0 01-.1-.022.122.122 0 01-.058-.057.454.454 0 01-.014-.144v-.43h-.086v-.093h.086v-.18l.122-.072v.252h.129v.1h-.13v.43c0 .022.002.044.008.065a.05.05 0 00.021.021.086.086 0 00.043.015.41.41 0 00.058-.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask5_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask5_1854_5393)\">\n            <path\n                d=\"M25.657 15.927a.316.316 0 00.058.216.18.18 0 00.143.071.172.172 0 00.137-.071c.04-.06.057-.13.05-.201a.345.345 0 00-.058-.216.18.18 0 00-.219-.055.173.173 0 00-.06.048.338.338 0 00-.05.216v-.008zm.388.366V16.2a.23.23 0 01-.201.115.286.286 0 01-.273-.187.524.524 0 01-.007-.394.287.287 0 01.386-.161.244.244 0 01.088.075v-.36h.122v1.005h-.115z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask6_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask6_1854_5393)\">\n            <path\n                d=\"M26.59 15.863h.402a.251.251 0 00-.043-.144.186.186 0 00-.15-.071.195.195 0 00-.144.057.23.23 0 00-.072.158m.409.194l.129.021a.308.308 0 01-.115.172.38.38 0 01-.459-.036.388.388 0 01-.093-.28.401.401 0 01.093-.286.323.323 0 01.244-.1.307.307 0 01.244.1c.068.08.101.182.093.287v.028h-.545c.003.066.028.13.072.18a.2.2 0 00.143.071.186.186 0 00.122-.043c.035-.03.06-.07.072-.114z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask7_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask7_1854_5393)\">\n            <path\n                d=\"M27.53 15.927a.38.38 0 00.035.187.18.18 0 00.295.029.323.323 0 00.064-.216.33.33 0 00-.057-.215.173.173 0 00-.144-.064.18.18 0 00-.136.071.31.31 0 00-.057.208zm0 .366h-.115V15.29h.122v.359a.244.244 0 01.2-.1c.045 0 .09.009.13.028.038.015.073.04.1.072a.494.494 0 01.079.265.415.415 0 01-.093.294.287.287 0 01-.215.108.229.229 0 01-.208-.108v.086z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask8_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask8_1854_5393)\">\n            <path\n                d=\"M28.333 16.3h.15v-.739h-.143l-.007.74zm0-.875h.15v-.143h-.143l-.007.143z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask9_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask9_1854_5393)\">\n            <path\n                d=\"M29.058 16.186l.021.107a.467.467 0 01-.093.015.215.215 0 01-.108-.022.122.122 0 01-.05-.057.45.45 0 01-.014-.144v-.43h-.094v-.093h.094v-.18l.122-.072v.252h.122v.1h-.122v.43a.219.219 0 000 .065.05.05 0 00.028.021.086.086 0 00.043.015.406.406 0 00.05-.007z\"\n                fill=\"#FEFEFE\"\n            />\n        </g>\n        <mask\n            height=\"33\"\n            id=\"mask10_1854_5393\"\n            maskUnits=\"userSpaceOnUse\"\n            style={{ maskType: 'luminance' }}\n            width=\"32\"\n            x=\"2\"\n            y=\"-4\"\n        >\n            <path d=\"M2 28.136h32V-4H2.007v32.136H2z\" fill=\"#fff\" />\n        </mask>\n        <g mask=\"url(#mask10_1854_5393)\">\n            <path\n                d=\"M15.751 11.666a1.177 1.177 0 00-.272-.731.855.855 0 00-1.248.114 1.22 1.22 0 00-.201.617h1.721zm1.772.84H14.03c.01.225.087.442.222.624a.826.826 0 00.66.301.989.989 0 00.488-.13c.12-.075.224-.172.308-.286l1.722.158c-.22.41-.55.752-.954.982-.502.227-1.05.33-1.6.302a3.265 3.265 0 01-1.427-.258 2.095 2.095 0 01-.861-.811 2.461 2.461 0 01-.337-1.313 2.31 2.31 0 01.681-1.736 2.597 2.597 0 011.894-.66 3.35 3.35 0 011.542.295 2 2 0 01.86.86c.216.46.317.964.295 1.47v.202z\"\n                fill=\"#9A1B27\"\n            />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconSepa);\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Placement } from '@popperjs/core';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n    children?: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        this.getRootElement()?.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\n                            {children}\n                        </div>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={[\n                        { name: 'hide', enabled: false },\n                        { name: 'flip', enabled: false },\n                        { name: 'preventOverflow', enabled: false },\n                    ]}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        !shouldShow ? null : (\n                            <div\n                                className=\"dropdownMenu\"\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    width: '100%',\n                                    zIndex: 1,\n                                }}\n                            >\n                                {dropdown}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            this.getRootElement()?.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\n        });\n    };\n\n    private getRootElement() {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }\n}\n","import { AchInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAchInstrument(\n    instrument: PaymentInstrument,\n): instrument is AchInstrument {\n    return (\n        instrument.type === 'bank' && (instrument.method === 'ecp' || instrument.method === 'ach')\n    );\n}\n","import { BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isSepaInstrument(instrument?: PaymentInstrument): instrument is BankInstrument {\n    return (\n        instrument?.type === 'bank' &&\n        (instrument?.method === 'sepa' || instrument?.method === 'sepa_direct_debit')\n    );\n}\n","import {\n    AccountInstrument,\n    AchInstrument,\n    BankInstrument,\n    PayPalInstrument,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    DropdownTrigger,\n    IconAch,\n    IconNewAccount,\n    IconPaypal,\n    IconSepa,\n    IconSize,\n} from '@bigcommerce/checkout/ui';\n\nimport { isAchInstrument, isBankAccountInstrument, isSepaInstrument } from '../../guards';\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId || ''}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AchInstrumentMenuItemProps {\n    className?: string;\n    instrument: AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AchInstrumentMenuItem: FunctionComponent<AchInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                <IconAch size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-bank\">\n                    <div>\n                        <TranslatedString\n                            data={{ accountNumber: instrument.accountNumber }}\n                            id=\"payment.instrument_account_number_ending\"\n                        />\n                    </div>\n                    <div>\n                        <TranslatedString id=\"payment.instrument_manage_table_header_routing_number_text\" />\n                        : {instrument.issuer}\n                    </div>\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst SepaInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                <IconSepa size={IconSize.Medium} />\n                <div className=\"instrumentSelect-bank\">\n                    <div className=\"instrumentSelect-card\">\n                        <TranslatedString id=\"payment.sepa_account_number\" />:{' '}\n                        {instrument.accountNumber}\n                    </div>\n                </div>\n            </div>\n        </button>\n    );\n};\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    if (isAchInstrument(instrument)) {\n        return (\n            <AchInstrumentMenuItem\n                instrument={instrument}\n                onClick={handleClick}\n                testId=\"instrument-select-option\"\n            />\n        );\n    }\n\n    if (isSepaInstrument(instrument)) {\n        return (\n            <SepaInstrumentMenuItem\n                instrument={instrument}\n                onClick={handleClick}\n                testId=\"instrument-select-option\"\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    if (isSepaInstrument(instrument)) {\n        return (\n            <SepaInstrumentMenuItem\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                instrument={instrument}\n                onClick={onClick}\n                testId={testId}\n            />\n        );\n    }\n\n    if (isAchInstrument(instrument)) {\n        return (\n            <AchInstrumentMenuItem\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                instrument={instrument}\n                onClick={onClick}\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\" data-test=\"account-instrument-select\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        void form.setFieldValue(field.name, instrumentId);\n    }\n}\n\nexport default AccountInstrumentSelect;\n","import { CardInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport function isCardInstrument(instrument?: PaymentInstrument): instrument is CardInstrument {\n    return instrument !== undefined && instrument.type === 'card';\n}\n\nexport default function assertIsCardInstrument(\n    instrument?: PaymentInstrument,\n): asserts instrument is CardInstrument {\n    if (!isCardInstrument(instrument)) {\n        throw new Error('Is not a card instrument.');\n    }\n}\n","import { AccountInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is AccountInstrument {\n    return instrument.type === 'account';\n}\n","import { AccountInstrument, BankInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconPaypal, IconSize, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isAchInstrument, isBankAccountInstrument, isSepaInstrument } from '../../guards';\n\ninterface ManageInstrumentsRowProps {\n    instrument: AccountInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-accountExternalId\">\n                {isBankAccountInstrument(instrument) || isAchInstrument(instrument) ? (\n                    <span className=\"instrumentModal-instrumentAccountNumber\">\n                        {isSepaInstrument(instrument) ? (\n                            <TranslatedString id=\"payment.sepa_account_number\" />\n                        ) : (\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        )}\n                        {` ${instrument.accountNumber}`}\n                    </span>\n                ) : (\n                    <>\n                        <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n                        <span className=\"instrumentModal-instrumentAccountExternalId\">\n                            {instrument.externalId}\n                        </span>\n                    </>\n                )}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageAccountInstrumentsTableProps {\n    instruments: Array<AccountInstrument | BankInstrument>;\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsTable: FunctionComponent<ManageAccountInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ManageInstrumentsTable);\n","import { AchInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconAch, IconSize, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\ninterface ManageInstrumentsRowProps {\n    instrument: AchInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-bankType\">\n                <IconAch size={IconSize.Medium} />\n            </td>\n            <td data-test=\"manage-instrument-accountNumber\">{instrument.accountNumber}</td>\n            <td data-test=\"manage-instrument-issuer\">{instrument.issuer}</td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageAchInstrumentsTableProps {\n    instruments: AchInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageAchInstrumentsTable: FunctionComponent<ManageAchInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-ach-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_routing_number_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default ManageAchInstrumentsTable;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n\ninterface ManageInstrumentsRowProps {\n    instrument: CardInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-cardType\">\n                <CreditCardIcon cardType={cardType} />\n\n                {cardInfo && (\n                    <span className=\"instrumentModal-instrumentCardType\">{cardInfo.niceType}</span>\n                )}\n            </td>\n            <td data-test=\"manage-instrument-last4\">{instrument.last4}</td>\n            <td\n                className={classNames({ 'instrumentModal-instrumentExpiry--expired': isExpired })}\n                data-test=\"manage-instrument-expiry\"\n            >\n                {`${instrument.expiryMonth}/${instrument.expiryYear}`}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport interface ManageCardInstrumentsTableProps {\n    instruments: CardInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageCardInstrumentsTable: FunctionComponent<ManageCardInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\" data-test=\"manage-card-instruments-table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_expiry_date_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ManageCardInstrumentsTable);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Alert, AlertType } from '@bigcommerce/checkout/ui';\n\nexport interface ManageInstrumentsAlertProps {\n    error: any; // TODO: Fix typing\n}\n\nconst ManageInstrumentsAlert: FunctionComponent<ManageInstrumentsAlertProps> = ({ error }) => {\n    const { status } = error;\n\n    if (status === 401) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_auth_error\" />\n            </Alert>\n        );\n    }\n\n    if (status >= 400 && status < 500) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_client_error\" />\n            </Alert>\n        );\n    }\n\n    return (\n        <Alert type={AlertType.Error}>\n            <TranslatedString id=\"payment.instrument_manage_delete_server_error\" />\n        </Alert>\n    );\n};\n\nexport default memo(ManageInstrumentsAlert);\n","import { PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { Button, ButtonSize, ButtonVariant, Modal, ModalHeader } from '@bigcommerce/checkout/ui';\n\nimport {\n    isAccountInstrument,\n    isAchInstrument,\n    isBankAccountInstrument,\n    isCardInstrument,\n} from '../../guards';\nimport { ManageAccountInstrumentsTable } from '../ManageAccountInstrumentsTable';\nimport { ManageAchInstrumentsTable } from '../ManageAchInstrumentsTable';\nimport { ManageCardInstrumentsTable } from '../ManageCardInstrumentsTable';\nimport { ManageInstrumentsAlert } from '../ManageInstrumentsAlert';\n\nexport interface ManageInstrumentsModalProps {\n    isOpen: boolean;\n    instruments: PaymentInstrument[];\n    onAfterOpen?(): void;\n    onDeleteInstrument?(instrumentId: string): void;\n    onDeleteInstrumentError?(error: Error): void;\n    onRequestClose?(): void;\n}\n\nexport interface ManageInstrumentsModalState {\n    isConfirmingDelete: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass ManageInstrumentsModal extends Component<\n    ManageInstrumentsModalProps,\n    ManageInstrumentsModalState\n> {\n    static contextType = CheckoutContext;\n    declare context: React.ContextType<typeof CheckoutContext>;\n\n    state: ManageInstrumentsModalState = {\n        isConfirmingDelete: false,\n    };\n\n    render(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                errors: { getDeleteInstrumentError },\n            },\n        } = this.context;\n\n        const deleteInstrumentError = getDeleteInstrumentError();\n\n        const { isOpen, onRequestClose } = this.props;\n\n        return (\n            <Modal\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                footer={this.renderFooter()}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"payment.instrument_manage_modal_title_text\" />\n                    </ModalHeader>\n                }\n                isOpen={isOpen}\n                onAfterOpen={this.handleAfterOpen}\n                onRequestClose={onRequestClose}\n            >\n                {deleteInstrumentError && <ManageInstrumentsAlert error={deleteInstrumentError} />}\n\n                {this.renderContent()}\n            </Modal>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                statuses: { isDeletingInstrument },\n            },\n        } = this.context;\n        const { instruments } = this.props;\n\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <p>\n                    <TranslatedString id=\"payment.instrument_manage_modal_confirmation_label\" />\n                </p>\n            );\n        }\n\n        const cardInstruments = instruments.filter(isCardInstrument);\n        const bankInstruments = instruments.filter(isBankAccountInstrument);\n        const accountInstruments = instruments.filter(isAccountInstrument);\n        const achInstrument = instruments.filter(isAchInstrument);\n\n        if (achInstrument.length) {\n            return (\n                <ManageAchInstrumentsTable\n                    instruments={achInstrument}\n                    isDeletingInstrument={isDeletingInstrument()}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        const bankAndAccountInstruments = [...bankInstruments, ...accountInstruments];\n\n        if (bankAndAccountInstruments.length) {\n            return (\n                <ManageAccountInstrumentsTable\n                    instruments={bankAndAccountInstruments}\n                    isDeletingInstrument={isDeletingInstrument()}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        return (\n            <ManageCardInstrumentsTable\n                instruments={cardInstruments}\n                isDeletingInstrument={isDeletingInstrument()}\n                onDeleteInstrument={this.handleDeleteInstrument}\n            />\n        );\n    }\n\n    private renderFooter(): ReactNode {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                statuses: { isDeletingInstrument, isLoadingInstruments },\n            },\n        } = this.context;\n\n        const { onRequestClose } = this.props;\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <>\n                    <Button\n                        onClick={this.handleCancel}\n                        size={ButtonSize.Small}\n                        testId=\"manage-instrument-cancel-button\"\n                    >\n                        <TranslatedString id=\"common.cancel_action\" />\n                    </Button>\n\n                    <Button\n                        disabled={isDeletingInstrument() || isLoadingInstruments()}\n                        onClick={this.handleConfirmDelete}\n                        size={ButtonSize.Small}\n                        testId=\"manage-instrument-confirm-button\"\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"payment.instrument_manage_modal_confirmation_action\" />\n                    </Button>\n                </>\n            );\n        }\n\n        return (\n            <Button\n                onClick={onRequestClose}\n                size={ButtonSize.Small}\n                testId=\"manage-instrument-close-button\"\n            >\n                <TranslatedString id=\"common.close_action\" />\n            </Button>\n        );\n    }\n\n    private handleAfterOpen: () => void = () => {\n        const { onAfterOpen } = this.props;\n\n        this.setState(\n            {\n                isConfirmingDelete: false,\n            },\n            onAfterOpen,\n        );\n    };\n\n    private handleCancel: () => void = () => {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutState: {\n                errors: { getDeleteInstrumentError },\n            },\n            checkoutService: { clearError },\n        } = this.context;\n\n        const deleteInstrumentError = getDeleteInstrumentError();\n\n        if (deleteInstrumentError) {\n            void clearError(deleteInstrumentError);\n        }\n\n        this.setState({\n            isConfirmingDelete: false,\n        });\n    };\n\n    private handleConfirmDelete: () => void = async () => {\n        if (!this.context) {\n            throw Error('Need to wrap in checkout context');\n        }\n\n        const {\n            checkoutService: { deleteInstrument },\n        } = this.context;\n\n        const {\n            onDeleteInstrument = noop,\n            onDeleteInstrumentError = noop,\n            onRequestClose = noop,\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (!selectedInstrumentId) {\n            return;\n        }\n\n        try {\n            await deleteInstrument(selectedInstrumentId);\n            onDeleteInstrument(selectedInstrumentId);\n            onRequestClose();\n        } catch (error) {\n            onDeleteInstrumentError(error);\n        }\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isConfirmingDelete: true,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default ManageInstrumentsModal;\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { AccountInstrumentSelect } from '../AccountInstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n            testId=\"account-instrument-fieldset\"\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\" data-test=\"instrument-select-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nclass InstrumentSelect extends PureComponent<InstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<InstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            field,\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate = false,\n        } = this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <InstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideExpiryDate}\n                        />\n                    }\n                >\n                    <InstrumentSelectButton\n                        instrument={selectedInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" {...field} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        void form.setFieldValue(field.name, instrumentId);\n    }\n}\n\nexport default InstrumentSelect;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { BasicFormField } from '../BasicFormField';\nimport { CheckboxInput } from '../CheckboxInput';\nimport { FormFieldError } from '../FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <CheckboxInput\n                    {...field}\n                    checked={!!field.value}\n                    disabled={disabled}\n                    id={id || field.name}\n                    label={labelContent}\n                />\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n            </>\n        ),\n        [disabled, id, labelContent, name],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(CheckboxFormField);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\ninterface InstrumentStorageFieldProps {\n    isAccountInstrument: boolean;\n}\n\nconst InstrumentStorageField: FunctionComponent<InstrumentStorageFieldProps> = ({\n    isAccountInstrument,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_payment_method_label'\n        : 'payment.instrument_save_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--saveInstrument\"\n            labelContent={labelContent}\n            name=\"shouldSaveInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStorageField);\n","import React, { FunctionComponent, memo, useEffect, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\ninterface InstrumentStoreAsDefaultFieldProps {\n    isAccountInstrument: boolean;\n    disabled?: boolean;\n}\n\nconst InstrumentStoreAsDefaultField: FunctionComponent<InstrumentStoreAsDefaultFieldProps> = ({\n    isAccountInstrument,\n    disabled = false,\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_as_default_payment_method_label'\n        : 'payment.instrument_save_as_default_payment_method_label';\n\n    useEffect(() => {\n        if (disabled) {\n            paymentForm.setFieldValue('shouldSetAsDefaultInstrument', false);\n        }\n        // Ignoring paymentForm dependency as it causes sequential re-renders when included in array\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disabled]);\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--setAsDefaultInstrument\"\n            disabled={disabled}\n            labelContent={labelContent}\n            name=\"shouldSetAsDefaultInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStoreAsDefaultField);\n","import { PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentFormService,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset } from '@bigcommerce/checkout/ui';\n\nimport { InstrumentStorageField } from '../InstrumentStorageField';\nimport { InstrumentStoreAsDefaultField } from '../InstrumentStoreAsDefaultField';\n\ninterface StoreInstrumentFieldsetProps {\n    isAccountInstrument?: boolean;\n    instrumentId?: string;\n    instruments: PaymentInstrument[];\n}\n\ninterface WithStorageSettings {\n    showSave: boolean;\n    showSetAsDefault: boolean;\n    setAsDefaultEnabled: boolean;\n}\n\nconst useProps = (\n    props: StoreInstrumentFieldsetProps,\n    paymentForm: PaymentFormService,\n): WithStorageSettings => {\n    const saveIsChecked = Boolean(paymentForm.getFieldValue<boolean>('shouldSaveInstrument'));\n\n    const { instrumentId, instruments } = props;\n\n    const addingNewInstrument = !instrumentId;\n    const hasAnyOtherInstruments = !!instruments && instruments.length > 0;\n    const instrument =\n        instruments && instruments.find(({ bigpayToken }) => bigpayToken === instrumentId);\n\n    return {\n        ...props,\n        showSave: addingNewInstrument,\n        showSetAsDefault:\n            (addingNewInstrument && hasAnyOtherInstruments) ||\n            Boolean(instrument && !instrument.defaultInstrument),\n        setAsDefaultEnabled: !addingNewInstrument || saveIsChecked,\n    };\n};\n\nconst StoreInstrumentFieldset: FunctionComponent<StoreInstrumentFieldsetProps> = ({\n    isAccountInstrument = false,\n    ...props\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n\n    const { showSave, showSetAsDefault, setAsDefaultEnabled } = useProps(props, paymentForm);\n\n    return (\n        <Fieldset>\n            {showSave && <InstrumentStorageField isAccountInstrument={isAccountInstrument} />}\n\n            {showSetAsDefault && (\n                <InstrumentStoreAsDefaultField\n                    disabled={!setAsDefaultEnabled}\n                    isAccountInstrument={isAccountInstrument}\n                />\n            )}\n        </Fieldset>\n    );\n};\n\nexport default StoreInstrumentFieldset;\n","import {\n    AccountInstrument,\n    CardInstrument,\n    CheckoutSelectors,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    Instrument,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n","import { LineItemMap, PaymentInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { Instrument, LineItemMap, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentMethodProps, useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport type AdyenV2FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    showAdditionalActionContent: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV2Form: FunctionComponent<AdyenV2FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    showAdditionalActionContent,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    onUnhandledError,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    ...rest\n}) => {\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired },\n        },\n    } = useCheckout();\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={showAdditionalActionContent}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!showAdditionalActionContent && (\n                <div id={additionalActionContainerId} style={{ display: 'none' }} />\n            )}\n        </>\n    );\n};\n\nexport default AdyenV2Form;\n","import {\n    AdyenCreditCardComponentOptions,\n    AdyenIdealComponentOptions,\n    AdyenValidationState,\n    CardInstrument,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV2CardValidation from './AdyenV2CardValidation';\nimport AdyenV2Form from './AdyenV2Form';\n\nexport interface AdyenOptions {\n    scheme: AdyenCreditCardComponentOptions;\n    bcmc: AdyenCreditCardComponentOptions;\n    ideal: AdyenIdealComponentOptions;\n}\n\nexport enum AdyenV2PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    ideal = 'ideal',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n    const [showAdditionalActionContent, setShowAdditionalActionContent] = useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const threeDS2ContainerId = `adyen-${method.id}-additional-action-component-field`;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const component = method.id as AdyenV2PaymentMethodType;\n    const shouldHideInstrumentExpiryDate = component === AdyenV2PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShowAdditionalActionContent(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setShowAdditionalActionContent(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setShowAdditionalActionContent(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n            const adyenOptions: AdyenOptions = {\n                [AdyenV2PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n                [AdyenV2PaymentMethodType.bcmc]: {\n                    hasHolderName: false,\n                },\n                [AdyenV2PaymentMethodType.ideal]: {\n                    showImage: true,\n                },\n            };\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv2: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    threeDS2ContainerId,\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            threeDS2ContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV2CardValidation\n                cardValidationState={cardValidationState}\n                language={language}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV2Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                language={language}\n                                method={method}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                showAdditionalActionContent={showAdditionalActionContent}\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV2PaymentMethod,\n    [{ gateway: 'adyenv2' }],\n);\n","import { AdyenValidationState, CardInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV3CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV3CardValidation: FunctionComponent<AdyenV3CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            <TranslatedString id=\"payment.credit_card_number_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV3CardValidation;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode } from 'react';\nimport { Omit } from 'utility-types';\n\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport type AdyenV3FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    shouldRenderAdditionalActionContentModal: boolean;\n    isModalVisible: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV3Form: FunctionComponent<AdyenV3FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    shouldRenderAdditionalActionContentModal,\n    isModalVisible,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    checkoutState,\n    checkoutService,\n    onUnhandledError,\n    ...rest\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={shouldRenderAdditionalActionContentModal}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n                style={\n                    !isModalVisible && method.id === 'scheme'\n                        ? {\n                              overlay: {\n                                  display: 'none',\n                              },\n                          }\n                        : {}\n                }\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!shouldRenderAdditionalActionContentModal && <div id={additionalActionContainerId} />}\n        </>\n    );\n};\n\nexport default AdyenV3Form;\n","import {\n    AdyenCreditCardComponentOptions,\n    AdyenValidationState,\n    CardInstrument,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV3CardValidation from './AdyenV3CardValidation';\nimport AdyenV3Form from './AdyenV3Form';\n\nexport interface AdyenOptions {\n    [key: string]: AdyenCreditCardComponentOptions;\n}\n\nexport enum AdyenV3PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    onUnhandledError,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n\n    const [shouldRenderAdditionalActionContentModal, setShouldRenderAdditionalActionContentModal] =\n        useState<boolean>(false);\n    const [isAdditionalActionContentModalVisible, setIsAdditionalActionContentModalVisible] =\n        useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const component = method.id;\n    const shouldHideInstrumentExpiryDate = component === AdyenV3PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShouldRenderAdditionalActionContentModal(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onActionHandled = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(true);\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            const adyenOptions: AdyenOptions = {\n                [AdyenV3PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n\n            return checkoutService.initializePayment({\n                ...options,\n                adyenv3: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                        onActionHandled,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            onActionHandled,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV3CardValidation\n                cardValidationState={cardValidationState}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV3Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                hideContentWhenSignedOut\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                isModalVisible={isAdditionalActionContentModalVisible}\n                                language={language}\n                                method={method}\n                                onUnhandledError={onUnhandledError}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                shouldRenderAdditionalActionContentModal={\n                                    shouldRenderAdditionalActionContentModal\n                                }\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV3PaymentMethod,\n    [{ gateway: 'adyenv3' }],\n);\n","import { Customer, PaymentMethod, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import {\n    AccountInstrument,\n    CheckoutSelectors,\n    CheckoutService,\n    LanguageService,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentMethodProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface HostedPaymentMethodDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentMethodProps,\n): HostedPaymentMethodDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nclass HostedPaymentMethodComponent extends Component<\n    HostedPaymentMethodProps,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        const { isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp, loadInstruments } =\n            getHostedPaymentMethodDerivedProps(this.props);\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { description, isInitializing = false } = this.props;\n\n        const {\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = getHostedPaymentMethodDerivedProps(this.props);\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            instruments={instruments}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n\n        const { instruments } = getHostedPaymentMethodDerivedProps(this.props);\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = getHostedPaymentMethodDerivedProps(this.props);\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nexport default HostedPaymentMethodComponent;\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AffirmPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const description = useMemo(() => <TranslatedString id=\"payment.affirm_body_text\" />, []);\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            description={description}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AffirmPaymentMethod,\n    [{ id: 'affirm' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AfterpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AfterpayPaymentMethod,\n    [{ gateway: 'afterpay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AmazonPayV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    method: {\n        initializationData: { paymentDescriptor, paymentToken },\n    },\n    ...rest\n}) => {\n    const initializeAmazonPayV2Payment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                amazonpay: {\n                    editButtonId: 'editButtonId',\n                },\n            }),\n        [checkoutService],\n    );\n\n    const reload = useCallback(() => window.location.reload(), []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...rest}\n            buttonId=\"editButtonId\"\n            containerId=\"paymentWidget\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            hideWidget\n            initializePayment={initializeAmazonPayV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignInRequired={false}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            onSignOut={reload}\n            paymentDescriptor={paymentDescriptor}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldShow={!!paymentToken}\n            shouldShowDescriptor={!!paymentToken}\n            shouldShowEditButton={!!paymentToken}\n            signOut={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AmazonPayV2PaymentMethod,\n    [{ id: 'amazonpay' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ApplePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    language,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    applepay: {\n                        shippingLabel: language.translate('cart.shipping_text'),\n                        subtotalLabel: language.translate('cart.subtotal_text'),\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, language, method, onUnhandledError]);\n\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ApplePaymentMethod,\n    [{ id: 'applepay' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BarclaycardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BarclaycardPaymentMethod,\n    [{ gateway: 'barclaycard' }],\n);\n","import {\n    AccountInstrument,\n    HostedInstrument,\n    BigCommercePaymentsPaymentInitializeOptions,\n    BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    BigCommercePaymentsCreditCardsPaymentInitializeOptions,\n    BigCommercePaymentsVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype BigCommercePaymentsProvidersPaymentInitializeOptions =\n    BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions &\n        BigCommercePaymentsCreditCardsPaymentInitializeOptions &\n        BigCommercePaymentsPaymentInitializeOptions &\n        BigCommercePaymentsVenmoPaymentInitializeOptions;\n\ninterface BigCommercePaymentsPaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<BigCommercePaymentsProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst BigCommercePaymentsPaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & BigCommercePaymentsPaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default BigCommercePaymentsPaymentMethodComponent;\n","import { AccountInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBigCommercePaymentsInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBigCommercePaymentsInstrument;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\nimport useBigCommercePaymentsInstrument from '../hooks/useBigCommercePaymentsInstruments';\n\nconst BigCommercePaymentsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { ...isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = useBigCommercePaymentsInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    });\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <BigCommercePaymentsPaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"bigcommerce_payments\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </BigCommercePaymentsPaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPaymentMethod,\n    [{ id: 'bigcommerce_payments' }],\n);\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(method.id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"bigcommerce_payments_apms\"\n            {...props}\n        >\n            <div className={`widget widget--${method.id} payment-widget`} id={widgetContainerId} />\n        </BigCommercePaymentsPaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsAPMsPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconLock: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconLock);\n","import { number } from 'card-validator';\n\nimport unformatCreditCardNumber from '../unformatCreditCardNumber/unformatCreditCardNumber';\n\nexport default function formatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    const unformattedValue = unformatCreditCardNumber(value, separator);\n\n    return card.gaps\n        .filter((gapIndex) => unformattedValue.length > gapIndex)\n        .reduce(\n            (output, gapIndex, index) =>\n                [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(separator),\n            unformattedValue,\n        );\n}\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","import creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { max } from 'lodash';\nimport React, {\n    ChangeEventHandler,\n    createRef,\n    FunctionComponent,\n    memo,\n    PureComponent,\n    ReactNode,\n    RefObject,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInput } from '@bigcommerce/checkout/ui';\n\nimport formatCreditCardNumber from '../formatCreditCardNumber/formatCreditCardNumber';\n\nexport interface CreditCardNumberFieldProps {\n    name: string;\n}\n\nclass CreditCardNumberInput extends PureComponent<FieldProps<string>> {\n    private inputRef: RefObject<HTMLInputElement> = createRef();\n    private nextSelectionEnd = 0;\n\n    componentDidUpdate(): void {\n        if (this.inputRef.current && this.inputRef.current.selectionEnd !== this.nextSelectionEnd) {\n            this.inputRef.current.setSelectionRange(this.nextSelectionEnd, this.nextSelectionEnd);\n        }\n    }\n\n    render(): ReactNode {\n        const { field } = this.props;\n\n        return (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-number\"\n                    id={field.name}\n                    onChange={this.handleChange}\n                    ref={this.inputRef}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        );\n    }\n\n    private handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n        const separator = ' ';\n        const { value = '' } = event.target;\n        const { field, form } = this.props;\n        const { name, value: previousValue = '' } = field;\n        const selectionEnd = this.inputRef.current && this.inputRef.current.selectionEnd;\n\n        // Only allow digits and spaces\n        if (new RegExp(`[^\\\\d${separator}]`).test(value)) {\n            return form.setFieldValue(name, previousValue);\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n\n        const formattedValue = formatCreditCardNumber(\n            value.replace(new RegExp(separator, 'g'), '').slice(0, maxLength),\n            separator,\n        );\n\n        if (selectionEnd === value.length && value.length < formattedValue.length) {\n            this.nextSelectionEnd = formattedValue.length;\n        } else {\n            this.nextSelectionEnd = selectionEnd || 0;\n        }\n\n        return form.setFieldValue(name, formattedValue);\n    };\n}\n\nconst CreditCardNumberField: FunctionComponent<CreditCardNumberFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field, form, meta }: FieldProps<string>) => (\n            <CreditCardNumberInput field={field} form={form} meta={meta} />\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_number_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNumberField);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeVisa: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV visa, mc, disc</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <path d=\"M0 5h88v12H0z\" fill=\"#838383\" />\n            <path d=\"M3 23h82v10H3z\" fill=\"#FFF\" />\n            <path\n                d=\"M69.81 29.053c.015.297.13.502.343.616.11.058.233.088.37.088.258 0 .477-.107.66-.32.18-.215.31-.65.384-1.306-.12.19-.267.322-.444.4-.176.076-.366.114-.57.114-.412 0-.74-.13-.98-.386-.24-.257-.36-.588-.36-.993 0-.388.12-.73.357-1.025.237-.295.587-.443 1.05-.443.623 0 1.054.28 1.29.842.133.31.2.696.2 1.16 0 .525-.08.99-.238 1.394-.26.674-.703 1.01-1.327 1.01-.42 0-.737-.11-.954-.328-.217-.22-.325-.494-.325-.825h.544zm1.4-1.09c.176-.14.265-.387.265-.737 0-.315-.08-.55-.238-.705-.16-.153-.36-.23-.606-.23-.262 0-.47.088-.625.264-.155.177-.232.412-.232.707 0 .28.068.502.203.667.136.164.352.246.65.246.213 0 .408-.07.584-.21zm3.414-.563c.133-.132.2-.29.2-.474 0-.16-.064-.306-.19-.44-.13-.133-.323-.2-.585-.2-.26 0-.447.067-.563.2-.115.134-.173.29-.173.47 0 .202.075.36.224.473.15.112.326.17.53.17.237 0 .422-.067.556-.2zm.097 2.118c.165-.135.247-.336.247-.603 0-.277-.084-.487-.254-.63-.17-.144-.386-.216-.652-.216-.256 0-.466.072-.628.22-.163.145-.244.348-.244.607 0 .223.074.416.223.58.15.16.38.243.69.243.25 0 .456-.068.62-.202zm-1.735-1.937c-.158-.158-.236-.365-.236-.62 0-.32.114-.594.345-.823.232-.23.56-.344.984-.344.41 0 .732.108.965.325.233.216.35.47.35.758 0 .267-.068.483-.203.65-.076.092-.194.184-.353.274.176.08.316.175.418.28.19.2.284.46.284.778 0 .377-.127.697-.38.96-.253.26-.61.392-1.074.392-.416 0-.77-.113-1.057-.34-.287-.226-.43-.554-.43-.985 0-.253.06-.472.184-.656.124-.186.307-.327.55-.424-.15-.064-.265-.14-.35-.225zm5.614-1.42c.188.248.282.503.282.766h-.532c-.032-.17-.083-.302-.153-.397-.13-.18-.326-.27-.59-.27-.3 0-.54.14-.717.417-.177.278-.276.676-.296 1.194.124-.18.28-.316.467-.405.172-.08.364-.12.575-.12.36 0 .672.115.94.344.266.228.4.57.4 1.025 0 .388-.127.733-.38 1.033-.253.3-.614.45-1.083.45-.4 0-.746-.152-1.037-.456-.29-.304-.437-.816-.437-1.536 0-.532.065-.983.194-1.354.25-.71.705-1.065 1.367-1.065.478 0 .81.124 1 .372zm-.404 3.274c.14-.19.21-.415.21-.674 0-.22-.062-.43-.188-.627-.126-.198-.354-.297-.685-.297-.23 0-.434.076-.608.23-.175.153-.262.385-.262.694 0 .27.08.498.238.683.16.184.38.277.66.277.283 0 .495-.096.636-.286z\"\n                fill=\"#636363\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"19\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeVisa);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeAmex: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV amex</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <text\n                fill=\"#979BA1\"\n                fontFamily=\"Avenir Next\"\n                fontSize=\"6\"\n                fontWeight=\"420\"\n                letterSpacing=\".2\"\n            >\n                <tspan x=\"11\" y=\"35\">\n                    3712 567890 374\n                </tspan>\n                <tspan x=\"70.21\" y=\"35\">\n                    5\n                </tspan>\n            </text>\n            <path\n                d=\"M69.182 26.767h-.55v-3.35l-.762.635-.324-.38 1.142-.926h.494v4.02zm4.19 0H70.75v-.528l1.6-1.59c.122-.126.226-.257.313-.393s.13-.29.13-.46c0-.106-.018-.202-.056-.287-.038-.085-.09-.158-.153-.22-.065-.06-.14-.106-.228-.138-.087-.032-.18-.048-.278-.048-.204 0-.373.065-.505.196-.133.13-.216.298-.25.503l-.54-.09c.023-.153.07-.294.145-.424.074-.132.168-.246.28-.342.115-.097.246-.17.396-.224.15-.053.31-.08.48-.08.166 0 .326.025.48.074.153.05.288.12.406.216.117.094.21.214.28.357.07.145.106.31.106.496 0 .128-.017.248-.05.357-.035.11-.082.214-.14.313-.06.098-.128.192-.208.28-.08.09-.162.178-.25.265l-1.306 1.273h1.97v.494zm1.625-2.328h.176c.114 0 .225-.012.333-.033.107-.02.203-.056.286-.107.084-.052.15-.12.202-.208.05-.087.077-.195.077-.323 0-.104-.018-.196-.056-.277-.038-.08-.09-.15-.156-.207-.067-.057-.142-.102-.227-.134-.085-.032-.175-.048-.27-.048-.17 0-.314.044-.434.13-.12.088-.21.21-.27.364l-.5-.176c.1-.242.257-.433.475-.57.22-.14.47-.208.753-.208.167 0 .325.024.475.07.15.048.28.117.394.208.114.09.204.205.27.34.066.137.1.294.1.472 0 .114-.018.22-.054.318-.036.1-.086.188-.148.267-.063.08-.137.147-.224.204-.087.057-.182.098-.284.125v.01c.117.023.226.063.326.12.1.056.187.127.26.212.07.086.127.183.17.293.04.11.06.23.06.358 0 .2-.036.377-.112.53-.076.154-.176.282-.3.384-.126.102-.27.18-.433.233-.163.053-.33.08-.5.08-.318 0-.598-.073-.84-.216-.242-.144-.418-.368-.528-.67l.51-.17c.06.173.165.315.31.425.146.11.325.164.537.164.102 0 .202-.016.298-.05.097-.03.183-.08.26-.143.074-.064.135-.143.18-.238.046-.095.07-.206.07-.335 0-.14-.032-.257-.092-.352-.06-.095-.14-.17-.236-.23-.097-.06-.205-.1-.327-.125-.12-.025-.24-.037-.357-.037h-.17v-.454zm4.73.953h.58v.47h-.58v.904h-.533v-.903h-1.85v-.5l1.708-2.618h.676v2.647zm-.533-2.016h-.01l-1.273 2.016h1.284v-2.016z\"\n                fill=\"#636363\"\n                opacity=\".9\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"16\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeAmex);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconCardCodeAmex, IconCardCodeVisa, IconSize } from '@bigcommerce/checkout/ui';\n\nimport './CreditCardCodeTooltip.scss';\n\nconst CreditCardCodeTooltip: FunctionComponent = () => (\n    <div className=\"dropdown-menu dropdown-menu--content dropdown-menu--card-code\">\n        <div className=\"form-ccFields-cvvExample\">\n            <div className=\"form-ccFields-cvvExampleDescription\">\n                <p>\n                    <TranslatedString id=\"payment.credit_card_cvv_help_text\" />\n                </p>\n            </div>\n\n            <div className=\"form-ccFields-cvvExampleFigures\">\n                <figure>\n                    <IconCardCodeVisa size={IconSize.Large} />\n                </figure>\n\n                <figure>\n                    <IconCardCodeAmex size={IconSize.Large} />\n                </figure>\n            </div>\n        </div>\n    </div>\n);\n\nexport default CreditCardCodeTooltip;\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconHelp, IconLock, TextInput, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport CreditCardCodeTooltip from './CreditCardCodeTooltip';\n\nexport interface CreditCardCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCodeField: FunctionComponent<CreditCardCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-csc\"\n                    id={field.name}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardCodeField);\n","import React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CreditCardCodeField, CreditCardNumberField } from '../index';\n\ninterface CreditCardValidationProps {\n    shouldShowCardCodeField: boolean;\n    shouldShowNumberField: boolean;\n}\n\nconst CreditCardValidation: React.FunctionComponent<CreditCardValidationProps> = ({\n    shouldShowNumberField,\n    shouldShowCardCodeField,\n}) => (\n    <>\n        {shouldShowNumberField && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {shouldShowNumberField && <CreditCardNumberField name=\"ccNumber\" />}\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n        </div>\n    </>\n);\n\nexport default CreditCardValidation;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport React, { ChangeEvent, FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nimport { formatCreditCardExpiryDate } from '.';\n\ninterface CreditCardExpiryFieldProps {\n    name: string;\n}\n\nconst CreditCardExpiryField: FunctionComponent<CreditCardExpiryFieldProps> = ({ name }) => {\n    const { language } = useLocale();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const handleChange = useCallback(\n        memoizeOne((field: FieldProps['field'], form: FieldProps['form']) => {\n            return (event: ChangeEvent<any>) => {\n                void form.setFieldValue(field.name, formatCreditCardExpiryDate(event.target.value));\n            };\n        }),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps) => (\n            <TextInput\n                {...field}\n                autoComplete=\"cc-exp\"\n                id={field.name}\n                onChange={handleChange(field, form)}\n                placeholder={language.translate('payment.credit_card_expiration_placeholder_text')}\n                type=\"tel\"\n            />\n        ),\n        [handleChange, language],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_expiration_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardExpiryField);\n","export default function formatCreditCardExpiryDate(value: string): string {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n    const trimmedMonth = month.slice(0, 2);\n    const trimmedYear =\n        year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n    // i.e.: '1'\n    if (value.length < 2) {\n        return month;\n    }\n\n    // ie.: '10 /' (without trailing space)\n    if (value.length > 3 && !trimmedYear) {\n        return trimmedMonth;\n    }\n\n    return `${trimmedMonth} / ${trimmedYear}`;\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardNameFieldProps {\n    name: string;\n}\n\nconst CreditCardNameField: FunctionComponent<CreditCardNameFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"cc-name\" id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_name_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNameField);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardCustomerCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCustomerCodeField: FunctionComponent<CreditCardCustomerCodeFieldProps> = ({\n    name,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_customer_code_label\" />{' '}\n                <small className=\"optimizedCheckout-contentSecondary\">\n                    <TranslatedString id=\"common.optional_text\" />\n                </small>\n            </>\n        ),\n        [],\n    );\n\n    return <FormField input={renderInput} labelContent={labelContent} name={name} />;\n};\n\nexport default memo(CreditCardCustomerCodeField);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    CreditCardCodeField,\n    CreditCardCustomerCodeField,\n    CreditCardExpiryField,\n    CreditCardNameField,\n    CreditCardNumberField,\n} from '../';\n\nexport interface CreditCardFieldsetProps {\n    shouldShowCardCodeField?: boolean;\n    shouldShowCustomerCodeField?: boolean;\n    shouldShowSaveCardField?: boolean;\n}\n\nconst CreditCardFieldset: FunctionComponent<CreditCardFieldsetProps> = ({\n    shouldShowCardCodeField,\n    shouldShowCustomerCodeField,\n}) => (\n    <Fieldset\n        additionalClassName=\"creditCardFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <CreditCardNumberField name=\"ccNumber\" />\n\n            <CreditCardExpiryField name=\"ccExpiry\" />\n\n            <CreditCardNameField name=\"ccName\" />\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n\n            {shouldShowCustomerCodeField && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />}\n        </div>\n    </Fieldset>\n);\n\nexport default memo(CreditCardFieldset);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, number } from 'card-validator';\nimport creditCardType from 'credit-card-type';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport { CardInstrumentFieldsetValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { mapFromInstrumentCardType } from '../';\n\nexport interface InstrumentValidationSchemaOptions {\n    instrumentBrand: string;\n    instrumentLast4: string;\n    isCardCodeRequired: boolean;\n    isCardNumberRequired: boolean;\n    language: LanguageService;\n}\n\ninterface InstrumentValidationSchema {\n    ccCvv?: StringSchema;\n    ccNumber?: StringSchema;\n    instrumentId: StringSchema;\n}\n\nexport default memoize(function getInstrumentValidationSchema({\n    instrumentBrand,\n    instrumentLast4,\n    isCardCodeRequired,\n    isCardNumberRequired,\n    language,\n}: InstrumentValidationSchemaOptions): ObjectSchema<CardInstrumentFieldsetValues> {\n    const schema: InstrumentValidationSchema = {\n        instrumentId: string().required(),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value = '') {\n                    const cardType = mapFromInstrumentCardType(instrumentBrand);\n                    const cardInfo = creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined)\n                        .isValid;\n                },\n            });\n    }\n\n    if (isCardNumberRequired) {\n        schema.ccNumber = string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: language.translate('payment.credit_card_number_mismatch_error'),\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                test: (value = '') => value.slice(-instrumentLast4.length) === instrumentLast4,\n            });\n    }\n\n    return object(schema);\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, expirationDate, number } from 'card-validator';\nimport { object, ObjectSchema, string } from 'yup';\n\nimport { CreditCardFieldsetValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface CreditCardValidationSchemaOptions {\n    isCardCodeRequired: boolean;\n    language: LanguageService;\n}\n\nexport default memoize(function getCreditCardValidationSchema({\n    isCardCodeRequired,\n    language,\n}: CreditCardValidationSchemaOptions): ObjectSchema<CreditCardFieldsetValues> {\n    const schema = {\n        ccCustomerCode: string(),\n        ccCvv: string(),\n        ccExpiry: string()\n            .required(language.translate('payment.credit_card_expiration_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_expiration_invalid_error'),\n\n                test: (value) => expirationDate(value).isValid,\n            }),\n        ccName: string()\n            .max(200)\n            .required(language.translate('payment.credit_card_name_required_error')),\n        ccNumber: string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n\n                test: (value) => number(value).isValid,\n            }),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value) {\n                    const { card } = number(this.parent.ccNumber);\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    return object(schema);\n});\n","import { createCurrencyService, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport getLanguageService from './getLanguageService';\nimport { LocaleContextType } from './LocaleContext';\n\nexport default function createLocaleContext(config: StoreConfig): Required<LocaleContextType> {\n    if (!config) {\n        throw new Error('Missing configuration data');\n    }\n\n    const { inputDateFormat } = config;\n\n    return {\n        currency: createCurrencyService(config),\n        date: {\n            inputFormat: inputDateFormat,\n        },\n        language: getLanguageService(),\n    };\n}\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    HostedFieldType,\n    Instrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport {\n    CardInstrumentFieldset,\n    configureCardValidator,\n    CreditCardFieldset,\n    CreditCardFieldsetValues,\n    CreditCardValidation,\n    getCreditCardValidationSchema,\n    getInstrumentValidationSchema,\n    isCardInstrument,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { createLocaleContext, LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    CardInstrumentFieldsetValues,\n    PaymentMethodProps,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardPaymentMethodProps {\n    cardFieldset?: ReactNode;\n    cardValidationSchema?: ObjectSchema;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    getHostedFormOptions?(selectedInstrument?: CardInstrument): Promise<LegacyHostedFormOptions>;\n    getStoredCardValidationFieldset?(selectedInstrument?: CardInstrument): ReactNode;\n}\n\ninterface CreditCardPaymentMethodDerivedProps {\n    instruments: CardInstrument[];\n    isCardCodeRequired: boolean;\n    isCustomerCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    shouldShowInstrumentFieldset: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\ninterface CreditCardPaymentMethodState {\n    focusedHostedFieldType?: HostedFieldType;\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport type CreditCardPaymentMethodValues = CreditCardFieldsetValues | CardInstrumentFieldsetValues;\n\nclass CreditCardPaymentMethodComponent extends Component<\n    CreditCardPaymentMethodProps & PaymentMethodProps\n> {\n    state: CreditCardPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    private filterInstruments = memoizeOne(\n        (instruments: PaymentInstrument[] = []): CardInstrument[] =>\n            instruments.filter(isCardInstrument),\n    );\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n        const { isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp, loadInstruments } =\n            this.getCreditCardPaymentMethodDerivedProps();\n\n        setValidationSchema(method, this.getValidationSchema());\n        configureCardValidator();\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await initializePayment(\n                {\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                },\n                this.getSelectedInstrument(),\n            );\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n\n        setValidationSchema(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentDidUpdate(\n        _prevProps: Readonly<CreditCardPaymentMethodProps>,\n        prevState: Readonly<CreditCardPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            initializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            isAddingNewCard !== prevState.isAddingNewCard\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                await initializePayment(\n                    {\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    },\n                    this.getSelectedInstrument(),\n                );\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            checkoutState,\n            cardFieldset,\n            getStoredCardValidationFieldset,\n            isInitializing,\n            method,\n        } = this.props;\n        const {\n            instruments,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldShowInstrumentFieldset,\n        } = this.getCreditCardPaymentMethodDerivedProps();\n        const {\n            data: { getConfig },\n        } = checkoutState;\n\n        const { isAddingNewCard } = this.state;\n\n        const selectedInstrument = this.getSelectedInstrument();\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowNumberField = selectedInstrument\n            ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n            : false;\n        const shouldShowCardCodeField = selectedInstrument\n            ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n            : false;\n\n        const storeConfig = getConfig();\n\n        if (!storeConfig) {\n            throw Error('Unable to get config or customer');\n        }\n\n        return (\n            <LocaleContext.Provider value={createLocaleContext(storeConfig)}>\n                <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                    <div className=\"paymentMethod paymentMethod--creditCard\">\n                        {shouldShowInstrumentFieldset && (\n                            <CardInstrumentFieldset\n                                instruments={instruments}\n                                onDeleteInstrument={this.handleDeleteInstrument}\n                                onSelectInstrument={this.handleSelectInstrument}\n                                onUseNewInstrument={this.handleUseNewCard}\n                                selectedInstrumentId={\n                                    selectedInstrument && selectedInstrument.bigpayToken\n                                }\n                                validateInstrument={\n                                    getStoredCardValidationFieldset ? (\n                                        getStoredCardValidationFieldset(selectedInstrument)\n                                    ) : (\n                                        <CreditCardValidation\n                                            shouldShowCardCodeField={shouldShowCardCodeField}\n                                            shouldShowNumberField={shouldShowNumberField}\n                                        />\n                                    )\n                                }\n                            />\n                        )}\n\n                        {shouldShowCreditCardFieldset && !cardFieldset && (\n                            <CreditCardFieldset\n                                shouldShowCardCodeField={\n                                    method.config.cardCode || method.config.cardCode === null\n                                }\n                                shouldShowCustomerCodeField={method.config.requireCustomerCode}\n                            />\n                        )}\n\n                        {shouldShowCreditCardFieldset && cardFieldset}\n\n                        {isInstrumentFeatureAvailableProp && (\n                            <StoreInstrumentFieldset\n                                instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                                instruments={instruments}\n                            />\n                        )}\n                    </div>\n                </LoadingOverlay>\n            </LocaleContext.Provider>\n        );\n    }\n\n    private getSelectedInstrument(): CardInstrument | undefined {\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const { cardValidationSchema, language, method, storedCardValidationSchema } = this.props;\n        const {\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n        } = this.getCreditCardPaymentMethodDerivedProps();\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return (\n                storedCardValidationSchema ||\n                getInstrumentValidationSchema({\n                    instrumentBrand: selectedInstrument.brand,\n                    instrumentLast4: selectedInstrument.last4,\n                    isCardCodeRequired: isInstrumentCardCodeRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    isCardNumberRequired: isInstrumentCardNumberRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    language,\n                })\n            );\n        }\n\n        return (\n            cardValidationSchema ||\n            getCreditCardValidationSchema({\n                isCardCodeRequired: method.config.cardCode === true,\n                language,\n            })\n        );\n    }\n\n    private handleUseNewCard: () => void = () => {\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const {\n            paymentForm: { setFieldValue },\n        } = this.props;\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getCreditCardPaymentMethodDerivedProps(): CreditCardPaymentMethodDerivedProps {\n        const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = this.props;\n\n        const {\n            data: { getConfig, getCustomer, getInstruments, isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer || !method) {\n            throw new Error('Unable to get checkout');\n        }\n\n        const instruments = this.filterInstruments(getInstruments(method));\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            isUsingMultiShipping,\n            paymentMethod: method,\n        });\n\n        return {\n            instruments,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isCustomerCodeRequired: !!method.config.requireCustomerCode,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n            shouldShowInstrumentFieldset:\n                isInstrumentFeatureAvailableProp && instruments.length > 0,\n        };\n    }\n}\n\nexport default CreditCardPaymentMethodComponent;\n","import { creditCardType } from 'card-validator';\n\nexport default function configureCardValidator(): void {\n    const discoverInfo = creditCardType.getTypeInfo('discover');\n    const visaInfo = creditCardType.getTypeInfo('visa');\n\n    // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n    creditCardType.updateCard('visa', {\n        lengths: [13, ...(visaInfo.lengths || [])],\n    });\n\n    // Add support for 8-BIN Discover Cards.\n    creditCardType.updateCard('discover', {\n        patterns: [...(discoverInfo.patterns || []), [810, 817]],\n    });\n\n    // Add support for Mada-BIN Cards.\n    creditCardType.addCard({\n        niceType: 'Mada',\n        type: 'mada',\n        patterns: [\n            400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817, 422818,\n            422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954, 440533, 440647,\n            440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865, 458456, 462220, 468540,\n            468541, 468542, 468543, 483010, 483011, 483012, 484783, 486094, 486095, 486096, 489317,\n            489318, 489319, 493428, 504300, 506968, 508160, 513213, 520058, 521076, 524130, 524514,\n            529415, 529741, 530060, 530906, 531095, 531196, 532013, 535825, 535989, 536023, 537767,\n            539931, 543085, 543357, 549760, 554180, 557606, 558848, 585265, 588845, 588846, 588847,\n            588848, 588849, 588850, 588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120,\n            968201, 968202, 968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n        ],\n        gaps: [4, 8, 12],\n        lengths: [16, 18, 19],\n        code: {\n            name: 'CVV',\n            size: 3,\n        },\n    });\n}\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNameField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div\n            className={classNames('form-ccFields', {\n                'form-ccFields--without-card-name': !cardNameId,\n                'form-ccFields--without-card-code': !cardCodeId,\n            })}\n        >\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {Boolean(cardNameId) && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {Boolean(cardCodeId) && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object()\n            .required()\n            .shape<HostedCreditCardValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedCreditCardValidationSchemaShape['hostedForm']['errors']>({\n                        cardCode: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardExpiry: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_expiry',\n                            }),\n\n                        cardName: string().test({\n                            message: language.translate('payment.credit_card_name_required_error'),\n                            test: (value) => value !== 'required',\n                        }),\n\n                        cardNumber: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            }),\n                    }),\n            }),\n    });\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = (\n    props,\n) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeBigCommercePaymentsCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    bigcommerce_payments_creditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching BigCommercePayments Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsCreditCardPaymentMethod,\n    [{ id: 'bigcommerce_payments_creditcards' }],\n);\n","import { CardInstrument, PaymentProviderCustomer } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBigCommercePaymentsFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n\n    const paymentProviderCustomer: PaymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneCreditCardForm.scss';\n\ninterface BigCommercePaymentsFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst BigCommercePaymentsFastlaneCreditCardForm: FunctionComponent<\n    BigCommercePaymentsFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#big-commerce-payments-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-cc-form-container\"\n            data-test=\"big-commerce-payments-fastlane-cc-form-container\"\n            id=\"big-commerce-payments-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BigCommercePaymentsFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BigCommercePaymentsFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BigCommercePaymentsFastlaneInstrumentsForm: FunctionComponent<\n    BigCommercePaymentsFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-instrument\"\n            data-test=\"big-commerce-payments-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"big-commerce-payments-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"big-commerce-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"big-commerce-payments-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"big-commerce-payments-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"big-commerce-payments-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\nimport { useBigCommercePaymentsFastlaneInstruments } from '../hooks/useBigCommercePaymentsFastlaneInstruments';\n\nimport BigCommercePaymentsFastlaneCreditCardForm from './BigCommercePaymentsFastlaneCreditCardForm';\nimport BigCommercePaymentsFastlaneInstrumentsForm from './BigCommercePaymentsFastlaneInstrumentsForm';\n\ninterface BigCommercePaymentsFastlaneFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst BigCommercePaymentsFastlaneForm: FunctionComponent<BigCommercePaymentsFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBigCommercePaymentsFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument, handleSelectInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsFastlaneForm from './components/BigCommercePaymentsFastlaneForm';\n\nimport './BigCommercePaymentsFastlanePaymentMethod.scss';\nimport { isErrorWithTranslationKey } from '@bigcommerce/checkout/utility';\n\nexport interface BigCommercePaymentsFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BigCommercePaymentsFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<BigCommercePaymentsFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n\n                bigcommerce_payments_fastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BigCommercePaymentsFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsFastlanePaymentMethod,\n    [{ id: 'bigcommerce_payments_fastlane' }],\n);\n","import BigCommercePaymentsFastlanePaymentMethod from './BigCommercePaymentsFastlanePaymentMethod';\n\nexport default BigCommercePaymentsFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsPayLaterPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_paylater\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPayLaterPaymentMethod,\n    [{ id: 'bigcommerce_payments_paylater' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const isPaymentDataRequired = props.checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_venmo\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsVenmoPaymentMethod,\n    [{ id: 'bigcommerce_payments_venmo' }],\n);\n","export interface CountryData {\n    name: string;\n    dialCode: string;\n    code: string;\n}\n\nconst COUNTRY_DATA = [\n    {\n        name: 'Afghanistan',\n        dialCode: '+93',\n        code: 'AF',\n    },\n    {\n        name: 'Aland Islands',\n        dialCode: '+358',\n        code: 'AX',\n    },\n    {\n        name: 'Albania',\n        dialCode: '+355',\n        code: 'AL',\n    },\n    {\n        name: 'Algeria',\n        dialCode: '+213',\n        code: 'DZ',\n    },\n    {\n        name: 'American Samoa',\n        dialCode: '+1684',\n        code: 'AS',\n    },\n    {\n        name: 'Andorra',\n        dialCode: '+376',\n        code: 'AD',\n    },\n    {\n        name: 'Angola',\n        dialCode: '+244',\n        code: 'AO',\n    },\n    {\n        name: 'Anguilla',\n        dialCode: '+1264',\n        code: 'AI',\n    },\n    {\n        name: 'Antarctica',\n        dialCode: '+672',\n        code: 'AQ',\n    },\n    {\n        name: 'Antigua and Barbuda',\n        dialCode: '+1268',\n        code: 'AG',\n    },\n    {\n        name: 'Argentina',\n        dialCode: '+54',\n        code: 'AR',\n    },\n    {\n        name: 'Armenia',\n        dialCode: '+374',\n        code: 'AM',\n    },\n    {\n        name: 'Aruba',\n        dialCode: '+297',\n        code: 'AW',\n    },\n    {\n        name: 'Australia',\n        dialCode: '+61',\n        code: 'AU',\n    },\n    {\n        name: 'Austria',\n        dialCode: '+43',\n        code: 'AT',\n    },\n    {\n        name: 'Azerbaijan',\n        dialCode: '+994',\n        code: 'AZ',\n    },\n    {\n        name: 'Bahamas',\n        dialCode: '+1242',\n        code: 'BS',\n    },\n    {\n        name: 'Bahrain',\n        dialCode: '+973',\n        code: 'BH',\n    },\n    {\n        name: 'Bangladesh',\n        dialCode: '+880',\n        code: 'BD',\n    },\n    {\n        name: 'Barbados',\n        dialCode: '+1246',\n        code: 'BB',\n    },\n    {\n        name: 'Belarus',\n        dialCode: '+375',\n        code: 'BY',\n    },\n    {\n        name: 'Belgium',\n        dialCode: '+32',\n        code: 'BE',\n    },\n    {\n        name: 'Belize',\n        dialCode: '+501',\n        code: 'BZ',\n    },\n    {\n        name: 'Benin',\n        dialCode: '+229',\n        code: 'BJ',\n    },\n    {\n        name: 'Bermuda',\n        dialCode: '+1441',\n        code: 'BM',\n    },\n    {\n        name: 'Bhutan',\n        dialCode: '+975',\n        code: 'BT',\n    },\n    {\n        name: 'Bolivia, Plurinational State of',\n        dialCode: '+591',\n        code: 'BO',\n    },\n    {\n        name: 'Bosnia and Herzegovina',\n        dialCode: '+387',\n        code: 'BA',\n    },\n    {\n        name: 'Botswana',\n        dialCode: '+267',\n        code: 'BW',\n    },\n    {\n        name: 'Brazil',\n        dialCode: '+55',\n        code: 'BR',\n    },\n    {\n        name: 'British Indian Ocean Territory',\n        dialCode: '+246',\n        code: 'IO',\n    },\n    {\n        name: 'Brunei Darussalam',\n        dialCode: '+673',\n        code: 'BN',\n    },\n    {\n        name: 'Bulgaria',\n        dialCode: '+359',\n        code: 'BG',\n    },\n    {\n        name: 'Burkina Faso',\n        dialCode: '+226',\n        code: 'BF',\n    },\n    {\n        name: 'Burundi',\n        dialCode: '+257',\n        code: 'BI',\n    },\n    {\n        name: 'Cambodia',\n        dialCode: '+855',\n        code: 'KH',\n    },\n    {\n        name: 'Cameroon',\n        dialCode: '+237',\n        code: 'CM',\n    },\n    {\n        name: 'Canada',\n        dialCode: '+1',\n        code: 'CA',\n    },\n    {\n        name: 'Cape Verde',\n        dialCode: '+238',\n        code: 'CV',\n    },\n    {\n        name: 'Cayman Islands',\n        dialCode: '+ 345',\n        code: 'KY',\n    },\n    {\n        name: 'Central African Republic',\n        dialCode: '+236',\n        code: 'CF',\n    },\n    {\n        name: 'Chad',\n        dialCode: '+235',\n        code: 'TD',\n    },\n    {\n        name: 'Chile',\n        dialCode: '+56',\n        code: 'CL',\n    },\n    {\n        name: 'China',\n        dialCode: '+86',\n        code: 'CN',\n    },\n    {\n        name: 'Christmas Island',\n        dialCode: '+61',\n        code: 'CX',\n    },\n    {\n        name: 'Cocos (Keeling) Islands',\n        dialCode: '+61',\n        code: 'CC',\n    },\n    {\n        name: 'Colombia',\n        dialCode: '+57',\n        code: 'CO',\n    },\n    {\n        name: 'Comoros',\n        dialCode: '+269',\n        code: 'KM',\n    },\n    {\n        name: 'Congo',\n        dialCode: '+242',\n        code: 'CG',\n    },\n    {\n        name: 'Congo, The Democratic Republic of the Congo',\n        dialCode: '+243',\n        code: 'CD',\n    },\n    {\n        name: 'Cook Islands',\n        dialCode: '+682',\n        code: 'CK',\n    },\n    {\n        name: 'Costa Rica',\n        dialCode: '+506',\n        code: 'CR',\n    },\n    {\n        name: \"Cote d'Ivoire\",\n        dialCode: '+225',\n        code: 'CI',\n    },\n    {\n        name: 'Croatia',\n        dialCode: '+385',\n        code: 'HR',\n    },\n    {\n        name: 'Cuba',\n        dialCode: '+53',\n        code: 'CU',\n    },\n    {\n        name: 'Cyprus',\n        dialCode: '+357',\n        code: 'CY',\n    },\n    {\n        name: 'Czech Republic',\n        dialCode: '+420',\n        code: 'CZ',\n    },\n    {\n        name: 'Denmark',\n        dialCode: '+45',\n        code: 'DK',\n    },\n    {\n        name: 'Djibouti',\n        dialCode: '+253',\n        code: 'DJ',\n    },\n    {\n        name: 'Dominica',\n        dialCode: '+1767',\n        code: 'DM',\n    },\n    {\n        name: 'Dominican Republic',\n        dialCode: '+1849',\n        code: 'DO',\n    },\n    {\n        name: 'Ecuador',\n        dialCode: '+593',\n        code: 'EC',\n    },\n    {\n        name: 'Egypt',\n        dialCode: '+20',\n        code: 'EG',\n    },\n    {\n        name: 'El Salvador',\n        dialCode: '+503',\n        code: 'SV',\n    },\n    {\n        name: 'Equatorial Guinea',\n        dialCode: '+240',\n        code: 'GQ',\n    },\n    {\n        name: 'Eritrea',\n        dialCode: '+291',\n        code: 'ER',\n    },\n    {\n        name: 'Estonia',\n        dialCode: '+372',\n        code: 'EE',\n    },\n    {\n        name: 'Ethiopia',\n        dialCode: '+251',\n        code: 'ET',\n    },\n    {\n        name: 'Falkland Islands (Malvinas)',\n        dialCode: '+500',\n        code: 'FK',\n    },\n    {\n        name: 'Faroe Islands',\n        dialCode: '+298',\n        code: 'FO',\n    },\n    {\n        name: 'Fiji',\n        dialCode: '+679',\n        code: 'FJ',\n    },\n    {\n        name: 'Finland',\n        dialCode: '+358',\n        code: 'FI',\n    },\n    {\n        name: 'France',\n        dialCode: '+33',\n        code: 'FR',\n    },\n    {\n        name: 'French Guiana',\n        dialCode: '+594',\n        code: 'GF',\n    },\n    {\n        name: 'French Polynesia',\n        dialCode: '+689',\n        code: 'PF',\n    },\n    {\n        name: 'Gabon',\n        dialCode: '+241',\n        code: 'GA',\n    },\n    {\n        name: 'Gambia',\n        dialCode: '+220',\n        code: 'GM',\n    },\n    {\n        name: 'Georgia',\n        dialCode: '+995',\n        code: 'GE',\n    },\n    {\n        name: 'Germany',\n        dialCode: '+49',\n        code: 'DE',\n    },\n    {\n        name: 'Ghana',\n        dialCode: '+233',\n        code: 'GH',\n    },\n    {\n        name: 'Gibraltar',\n        dialCode: '+350',\n        code: 'GI',\n    },\n    {\n        name: 'Greece',\n        dialCode: '+30',\n        code: 'GR',\n    },\n    {\n        name: 'Greenland',\n        dialCode: '+299',\n        code: 'GL',\n    },\n    {\n        name: 'Grenada',\n        dialCode: '+1473',\n        code: 'GD',\n    },\n    {\n        name: 'Guadeloupe',\n        dialCode: '+590',\n        code: 'GP',\n    },\n    {\n        name: 'Guam',\n        dialCode: '+1671',\n        code: 'GU',\n    },\n    {\n        name: 'Guatemala',\n        dialCode: '+502',\n        code: 'GT',\n    },\n    {\n        name: 'Guernsey',\n        dialCode: '+44',\n        code: 'GG',\n    },\n    {\n        name: 'Guinea',\n        dialCode: '+224',\n        code: 'GN',\n    },\n    {\n        name: 'Guinea-Bissau',\n        dialCode: '+245',\n        code: 'GW',\n    },\n    {\n        name: 'Guyana',\n        dialCode: '+595',\n        code: 'GY',\n    },\n    {\n        name: 'Haiti',\n        dialCode: '+509',\n        code: 'HT',\n    },\n    {\n        name: 'Holy See (Vatican City State)',\n        dialCode: '+379',\n        code: 'VA',\n    },\n    {\n        name: 'Honduras',\n        dialCode: '+504',\n        code: 'HN',\n    },\n    {\n        name: 'Hong Kong',\n        dialCode: '+852',\n        code: 'HK',\n    },\n    {\n        name: 'Hungary',\n        dialCode: '+36',\n        code: 'HU',\n    },\n    {\n        name: 'Iceland',\n        dialCode: '+354',\n        code: 'IS',\n    },\n    {\n        name: 'India',\n        dialCode: '+91',\n        code: 'IN',\n    },\n    {\n        name: 'Indonesia',\n        dialCode: '+62',\n        code: 'ID',\n    },\n    {\n        name: 'Iran, Islamic Republic of',\n        dialCode: '+98',\n        code: 'IR',\n    },\n    {\n        name: 'Iraq',\n        dialCode: '+964',\n        code: 'IQ',\n    },\n    {\n        name: 'Ireland',\n        dialCode: '+353',\n        code: 'IE',\n    },\n    {\n        name: 'Isle of Man',\n        dialCode: '+44',\n        code: 'IM',\n    },\n    {\n        name: 'Israel',\n        dialCode: '+972',\n        code: 'IL',\n    },\n    {\n        name: 'Italy',\n        dialCode: '+39',\n        code: 'IT',\n    },\n    {\n        name: 'Jamaica',\n        dialCode: '+1876',\n        code: 'JM',\n    },\n    {\n        name: 'Japan',\n        dialCode: '+81',\n        code: 'JP',\n    },\n    {\n        name: 'Jersey',\n        dialCode: '+44',\n        code: 'JE',\n    },\n    {\n        name: 'Jordan',\n        dialCode: '+962',\n        code: 'JO',\n    },\n    {\n        name: 'Kazakhstan',\n        dialCode: '+7',\n        code: 'KZ',\n    },\n    {\n        name: 'Kenya',\n        dialCode: '+254',\n        code: 'KE',\n    },\n    {\n        name: 'Kiribati',\n        dialCode: '+686',\n        code: 'KI',\n    },\n    {\n        name: \"Korea, Democratic People's Republic of Korea\",\n        dialCode: '+850',\n        code: 'KP',\n    },\n    {\n        name: 'Korea, Republic of South Korea',\n        dialCode: '+82',\n        code: 'KR',\n    },\n    {\n        name: 'Kuwait',\n        dialCode: '+965',\n        code: 'KW',\n    },\n    {\n        name: 'Kyrgyzstan',\n        dialCode: '+996',\n        code: 'KG',\n    },\n    {\n        name: 'Laos',\n        dialCode: '+856',\n        code: 'LA',\n    },\n    {\n        name: 'Latvia',\n        dialCode: '+371',\n        code: 'LV',\n    },\n    {\n        name: 'Lebanon',\n        dialCode: '+961',\n        code: 'LB',\n    },\n    {\n        name: 'Lesotho',\n        dialCode: '+266',\n        code: 'LS',\n    },\n    {\n        name: 'Liberia',\n        dialCode: '+231',\n        code: 'LR',\n    },\n    {\n        name: 'Libyan Arab Jamahiriya',\n        dialCode: '+218',\n        code: 'LY',\n    },\n    {\n        name: 'Liechtenstein',\n        dialCode: '+423',\n        code: 'LI',\n    },\n    {\n        name: 'Lithuania',\n        dialCode: '+370',\n        code: 'LT',\n    },\n    {\n        name: 'Luxembourg',\n        dialCode: '+352',\n        code: 'LU',\n    },\n    {\n        name: 'Macao',\n        dialCode: '+853',\n        code: 'MO',\n    },\n    {\n        name: 'Macedonia',\n        dialCode: '+389',\n        code: 'MK',\n    },\n    {\n        name: 'Madagascar',\n        dialCode: '+261',\n        code: 'MG',\n    },\n    {\n        name: 'Malawi',\n        dialCode: '+265',\n        code: 'MW',\n    },\n    {\n        name: 'Malaysia',\n        dialCode: '+60',\n        code: 'MY',\n    },\n    {\n        name: 'Maldives',\n        dialCode: '+960',\n        code: 'MV',\n    },\n    {\n        name: 'Mali',\n        dialCode: '+223',\n        code: 'ML',\n    },\n    {\n        name: 'Malta',\n        dialCode: '+356',\n        code: 'MT',\n    },\n    {\n        name: 'Marshall Islands',\n        dialCode: '+692',\n        code: 'MH',\n    },\n    {\n        name: 'Martinique',\n        dialCode: '+596',\n        code: 'MQ',\n    },\n    {\n        name: 'Mauritania',\n        dialCode: '+222',\n        code: 'MR',\n    },\n    {\n        name: 'Mauritius',\n        dialCode: '+230',\n        code: 'MU',\n    },\n    {\n        name: 'Mayotte',\n        dialCode: '+262',\n        code: 'YT',\n    },\n    {\n        name: 'Mexico',\n        dialCode: '+52',\n        code: 'MX',\n    },\n    {\n        name: 'Micronesia, Federated States of Micronesia',\n        dialCode: '+691',\n        code: 'FM',\n    },\n    {\n        name: 'Moldova',\n        dialCode: '+373',\n        code: 'MD',\n    },\n    {\n        name: 'Monaco',\n        dialCode: '+377',\n        code: 'MC',\n    },\n    {\n        name: 'Mongolia',\n        dialCode: '+976',\n        code: 'MN',\n    },\n    {\n        name: 'Montenegro',\n        dialCode: '+382',\n        code: 'ME',\n    },\n    {\n        name: 'Montserrat',\n        dialCode: '+1664',\n        code: 'MS',\n    },\n    {\n        name: 'Morocco',\n        dialCode: '+212',\n        code: 'MA',\n    },\n    {\n        name: 'Mozambique',\n        dialCode: '+258',\n        code: 'MZ',\n    },\n    {\n        name: 'Myanmar',\n        dialCode: '+95',\n        code: 'MM',\n    },\n    {\n        name: 'Namibia',\n        dialCode: '+264',\n        code: 'NA',\n    },\n    {\n        name: 'Nauru',\n        dialCode: '+674',\n        code: 'NR',\n    },\n    {\n        name: 'Nepal',\n        dialCode: '+977',\n        code: 'NP',\n    },\n    {\n        name: 'Netherlands',\n        dialCode: '+31',\n        code: 'NL',\n    },\n    {\n        name: 'Netherlands Antilles',\n        dialCode: '+599',\n        code: 'AN',\n    },\n    {\n        name: 'New Caledonia',\n        dialCode: '+687',\n        code: 'NC',\n    },\n    {\n        name: 'New Zealand',\n        dialCode: '+64',\n        code: 'NZ',\n    },\n    {\n        name: 'Nicaragua',\n        dialCode: '+505',\n        code: 'NI',\n    },\n    {\n        name: 'Niger',\n        dialCode: '+227',\n        code: 'NE',\n    },\n    {\n        name: 'Nigeria',\n        dialCode: '+234',\n        code: 'NG',\n    },\n    {\n        name: 'Niue',\n        dialCode: '+683',\n        code: 'NU',\n    },\n    {\n        name: 'Norfolk Island',\n        dialCode: '+672',\n        code: 'NF',\n    },\n    {\n        name: 'Northern Mariana Islands',\n        dialCode: '+1670',\n        code: 'MP',\n    },\n    {\n        name: 'Norway',\n        dialCode: '+47',\n        code: 'NO',\n    },\n    {\n        name: 'Oman',\n        dialCode: '+968',\n        code: 'OM',\n    },\n    {\n        name: 'Pakistan',\n        dialCode: '+92',\n        code: 'PK',\n    },\n    {\n        name: 'Palau',\n        dialCode: '+680',\n        code: 'PW',\n    },\n    {\n        name: 'Palestinian Territory, Occupied',\n        dialCode: '+970',\n        code: 'PS',\n    },\n    {\n        name: 'Panama',\n        dialCode: '+507',\n        code: 'PA',\n    },\n    {\n        name: 'Papua New Guinea',\n        dialCode: '+675',\n        code: 'PG',\n    },\n    {\n        name: 'Paraguay',\n        dialCode: '+595',\n        code: 'PY',\n    },\n    {\n        name: 'Peru',\n        dialCode: '+51',\n        code: 'PE',\n    },\n    {\n        name: 'Philippines',\n        dialCode: '+63',\n        code: 'PH',\n    },\n    {\n        name: 'Pitcairn',\n        dialCode: '+872',\n        code: 'PN',\n    },\n    {\n        name: 'Poland',\n        dialCode: '+48',\n        code: 'PL',\n    },\n    {\n        name: 'Portugal',\n        dialCode: '+351',\n        code: 'PT',\n    },\n    {\n        name: 'Puerto Rico',\n        dialCode: '+1939',\n        code: 'PR',\n    },\n    {\n        name: 'Qatar',\n        dialCode: '+974',\n        code: 'QA',\n    },\n    {\n        name: 'Romania',\n        dialCode: '+40',\n        code: 'RO',\n    },\n    {\n        name: 'Russia',\n        dialCode: '+7',\n        code: 'RU',\n    },\n    {\n        name: 'Rwanda',\n        dialCode: '+250',\n        code: 'RW',\n    },\n    {\n        name: 'Reunion',\n        dialCode: '+262',\n        code: 'RE',\n    },\n    {\n        name: 'Saint Barthelemy',\n        dialCode: '+590',\n        code: 'BL',\n    },\n    {\n        name: 'Saint Helena, Ascension and Tristan Da Cunha',\n        dialCode: '+290',\n        code: 'SH',\n    },\n    {\n        name: 'Saint Kitts and Nevis',\n        dialCode: '+1869',\n        code: 'KN',\n    },\n    {\n        name: 'Saint Lucia',\n        dialCode: '+1758',\n        code: 'LC',\n    },\n    {\n        name: 'Saint Martin',\n        dialCode: '+590',\n        code: 'MF',\n    },\n    {\n        name: 'Saint Pierre and Miquelon',\n        dialCode: '+508',\n        code: 'PM',\n    },\n    {\n        name: 'Saint Vincent and the Grenadines',\n        dialCode: '+1784',\n        code: 'VC',\n    },\n    {\n        name: 'Samoa',\n        dialCode: '+685',\n        code: 'WS',\n    },\n    {\n        name: 'San Marino',\n        dialCode: '+378',\n        code: 'SM',\n    },\n    {\n        name: 'Sao Tome and Principe',\n        dialCode: '+239',\n        code: 'ST',\n    },\n    {\n        name: 'Saudi Arabia',\n        dialCode: '+966',\n        code: 'SA',\n    },\n    {\n        name: 'Senegal',\n        dialCode: '+221',\n        code: 'SN',\n    },\n    {\n        name: 'Serbia',\n        dialCode: '+381',\n        code: 'RS',\n    },\n    {\n        name: 'Seychelles',\n        dialCode: '+248',\n        code: 'SC',\n    },\n    {\n        name: 'Sierra Leone',\n        dialCode: '+232',\n        code: 'SL',\n    },\n    {\n        name: 'Singapore',\n        dialCode: '+65',\n        code: 'SG',\n    },\n    {\n        name: 'Slovakia',\n        dialCode: '+421',\n        code: 'SK',\n    },\n    {\n        name: 'Slovenia',\n        dialCode: '+386',\n        code: 'SI',\n    },\n    {\n        name: 'Solomon Islands',\n        dialCode: '+677',\n        code: 'SB',\n    },\n    {\n        name: 'Somalia',\n        dialCode: '+252',\n        code: 'SO',\n    },\n    {\n        name: 'South Africa',\n        dialCode: '+27',\n        code: 'ZA',\n    },\n    {\n        name: 'South Sudan',\n        dialCode: '+211',\n        code: 'SS',\n    },\n    {\n        name: 'South Georgia and the South Sandwich Islands',\n        dialCode: '+500',\n        code: 'GS',\n    },\n    {\n        name: 'Spain',\n        dialCode: '+34',\n        code: 'ES',\n    },\n    {\n        name: 'Sri Lanka',\n        dialCode: '+94',\n        code: 'LK',\n    },\n    {\n        name: 'Sudan',\n        dialCode: '+249',\n        code: 'SD',\n    },\n    {\n        name: 'Suriname',\n        dialCode: '+597',\n        code: 'SR',\n    },\n    {\n        name: 'Svalbard and Jan Mayen',\n        dialCode: '+47',\n        code: 'SJ',\n    },\n    {\n        name: 'Swaziland',\n        dialCode: '+268',\n        code: 'SZ',\n    },\n    {\n        name: 'Sweden',\n        dialCode: '+46',\n        code: 'SE',\n    },\n    {\n        name: 'Switzerland',\n        dialCode: '+41',\n        code: 'CH',\n    },\n    {\n        name: 'Syrian Arab Republic',\n        dialCode: '+963',\n        code: 'SY',\n    },\n    {\n        name: 'Taiwan',\n        dialCode: '+886',\n        code: 'TW',\n    },\n    {\n        name: 'Tajikistan',\n        dialCode: '+992',\n        code: 'TJ',\n    },\n    {\n        name: 'Tanzania, United Republic of Tanzania',\n        dialCode: '+255',\n        code: 'TZ',\n    },\n    {\n        name: 'Thailand',\n        dialCode: '+66',\n        code: 'TH',\n    },\n    {\n        name: 'Timor-Leste',\n        dialCode: '+670',\n        code: 'TL',\n    },\n    {\n        name: 'Togo',\n        dialCode: '+228',\n        code: 'TG',\n    },\n    {\n        name: 'Tokelau',\n        dialCode: '+690',\n        code: 'TK',\n    },\n    {\n        name: 'Tonga',\n        dialCode: '+676',\n        code: 'TO',\n    },\n    {\n        name: 'Trinidad and Tobago',\n        dialCode: '+1868',\n        code: 'TT',\n    },\n    {\n        name: 'Tunisia',\n        dialCode: '+216',\n        code: 'TN',\n    },\n    {\n        name: 'Turkey',\n        dialCode: '+90',\n        code: 'TR',\n    },\n    {\n        name: 'Turkmenistan',\n        dialCode: '+993',\n        code: 'TM',\n    },\n    {\n        name: 'Turks and Caicos Islands',\n        dialCode: '+1649',\n        code: 'TC',\n    },\n    {\n        name: 'Tuvalu',\n        dialCode: '+688',\n        code: 'TV',\n    },\n    {\n        name: 'Uganda',\n        dialCode: '+256',\n        code: 'UG',\n    },\n    {\n        name: 'Ukraine',\n        dialCode: '+380',\n        code: 'UA',\n    },\n    {\n        name: 'United Arab Emirates',\n        dialCode: '+971',\n        code: 'AE',\n    },\n    {\n        name: 'United Kingdom',\n        dialCode: '+44',\n        code: 'GB',\n    },\n    {\n        name: 'United States',\n        dialCode: '+1',\n        code: 'US',\n    },\n    {\n        name: 'Uruguay',\n        dialCode: '+598',\n        code: 'UY',\n    },\n    {\n        name: 'Uzbekistan',\n        dialCode: '+998',\n        code: 'UZ',\n    },\n    {\n        name: 'Vanuatu',\n        dialCode: '+678',\n        code: 'VU',\n    },\n    {\n        name: 'Venezuela, Bolivarian Republic of Venezuela',\n        dialCode: '+58',\n        code: 'VE',\n    },\n    {\n        name: 'Vietnam',\n        dialCode: '+84',\n        code: 'VN',\n    },\n    {\n        name: 'Virgin Islands, British',\n        dialCode: '+1284',\n        code: 'VG',\n    },\n    {\n        name: 'Virgin Islands, U.S.',\n        dialCode: '+1340',\n        code: 'VI',\n    },\n    {\n        name: 'Wallis and Futuna',\n        dialCode: '+681',\n        code: 'WF',\n    },\n    {\n        name: 'Yemen',\n        dialCode: '+967',\n        code: 'YE',\n    },\n    {\n        name: 'Zambia',\n        dialCode: '+260',\n        code: 'ZM',\n    },\n    {\n        name: 'Zimbabwe',\n        dialCode: '+263',\n        code: 'ZW',\n    },\n];\n\nexport const getCountryData = (countryName: string) => {\n    return COUNTRY_DATA.filter((country: CountryData) => country.name === countryName);\n};\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, StringSchema } from 'yup';\n\nexport default memoize(function getBigCommercePaymentsRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n    CustomError,\n    SpecificError,\n    CountryData,\n    getCountryData,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getBigCommercePaymentsRatePayValidationSchema from '../validation-schemas/getBigCommercePaymentsRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst BigCommercePaymentsRatePayPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n    const getCountryInfo = (): CountryData => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        return getCountryData(billing.country)[0] || '';\n    };\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                bigcommerce_payments_ratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => fieldsValues.current,\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }) => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const validationSchema = useMemo(\n        () =>\n            getBigCommercePaymentsRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setFieldValue('ratepayPhoneCountryCode', getCountryInfo().dialCode);\n    }, []);\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={{ isSubmitted, setSubmitted }}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsRatePayPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms', id: 'ratepay' }],\n);\n","export enum BluesnapECPAccountType {\n    ConsumerChecking = 'CONSUMER_CHECKING',\n    ConsumerSavings = 'CONSUMER_SAVINGS',\n    CorporateChecking = 'CORPORATE_CHECKING',\n    CorporateSavings = 'CORPORATE_SAVINGS',\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectNumberFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectNumberField: FunctionComponent<BlueSnapDirectNumberFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete=\"cc-number\"\n                fieldType={DynamicFormFieldType.TELEPHONE}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectNumberField);\n","import { FormFieldOptions } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectSelectFieldProps {\n    labelContent: string;\n    name: string;\n    options: FormFieldOptions;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectSelectField: FunctionComponent<BlueSnapDirectSelectFieldProps> = ({\n    options: { helperLabel, items, rows },\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderSelect = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                fieldType={DynamicFormFieldType.DROPDOWM}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                options={items}\n                placeholder={helperLabel}\n                rows={rows}\n            />\n        ),\n        [helperLabel, items, rows, useFloatingLabel],\n    );\n\n    return <FormField {...rest} input={renderSelect} />;\n};\n\nexport default memo(BlueSnapDirectSelectField);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectTextFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    autoComplete?: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectTextField: FunctionComponent<BlueSnapDirectTextFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    autoComplete,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete={autoComplete}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel, autoComplete],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectTextField);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { BluesnapECPAccountType } from '../constants';\n\nimport BlueSnapDirectNumberField from './BlueSnapDirectNumberField';\nimport BlueSnapDirectSelectField from './BlueSnapDirectSelectField';\nimport BlueSnapDirectTextField from './BlueSnapDirectTextField';\n\nexport interface BlueSnapDirectEcpFieldsetProps {\n    language: LanguageService;\n    useFloatingLabel?: boolean;\n    shouldRenderCompanyName: boolean;\n}\n\nconst BlueSnapDirectEcpFieldset: FunctionComponent<BlueSnapDirectEcpFieldsetProps> = ({\n    language,\n    useFloatingLabel,\n    shouldRenderCompanyName,\n}) => {\n    const options = {\n        helperLabel: language.translate('payment.bluesnap_direct_account_type_select.label'),\n        items: [\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_checking',\n                ),\n                value: BluesnapECPAccountType.ConsumerChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_savings',\n                ),\n                value: BluesnapECPAccountType.ConsumerSavings,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_checking',\n                ),\n                value: BluesnapECPAccountType.CorporateChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_savings',\n                ),\n                value: BluesnapECPAccountType.CorporateSavings,\n            },\n        ],\n    };\n\n    return (\n        <>\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_account_number.label')}\n                maxLength={17}\n                name=\"accountNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_routing_number.label')}\n                maxLength={9}\n                name=\"routingNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.bluesnap_direct_account_type.label')}\n                name=\"accountType\"\n                options={options}\n                useFloatingLabel={useFloatingLabel}\n            />\n            {shouldRenderCompanyName && (\n                <BlueSnapDirectTextField\n                    labelContent={language.translate('address.company_name_label')}\n                    name=\"companyName\"\n                    useFloatingLabel={useFloatingLabel}\n                />\n            )}\n        </>\n    );\n};\n\nexport default memo(BlueSnapDirectEcpFieldset);\n","import { AchInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useEcpInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isAchInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useEcpInstruments;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getEcpValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n    shouldRenderCompanyName: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  accountNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_account_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_account_number.only_numbers'),\n                      )\n                      .min(4, language.translate('payment.bluesnap_direct_account_number.length'))\n                      .max(\n                          17,\n                          language.translate('payment.bluesnap_direct_account_number.length_max'),\n                      ),\n                  routingNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_routing_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_routing_number.only_numbers'),\n                      )\n                      .length(\n                          9,\n                          language.translate('payment.bluesnap_direct_routing_number.length'),\n                      ),\n                  ...(shouldRenderCompanyName\n                      ? {\n                            companyName: string()\n                                .required(language.translate('address.company_name_required_error'))\n                                .max(\n                                    50,\n                                    language.translate(\n                                        'payment.bluesnap_direct_company_name.length_max',\n                                    ),\n                                ),\n                        }\n                      : {}),\n                  accountType: string().required(\n                      language.translate('payment.bluesnap_direct_account_type.is_required'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { BluesnapECPAccountType } from './constants';\nimport BlueSnapDirectEcpFieldset from './fields/BlueSnapDirectEcpFieldset';\nimport useEcpInstruments from './hooks/useEcpInstruments';\nimport getEcpValidationSchema from './validation-schemas/getEcpValidationSchema';\n\nconst BlueSnapDirectEcpPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n    checkoutState: {\n        data: { isPaymentDataRequired, getCustomer, getBillingAddress },\n        statuses: { isLoadingInstruments },\n    },\n    paymentForm: { disableSubmit, setValidationSchema, setFieldValue, getFormValues },\n    language,\n    onUnhandledError,\n}) => {\n    const [disabled, setDisabled] = useState(true);\n    const onChange = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeEcp = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeEcp = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeEcp();\n\n        return () => {\n            void deinitializeEcp();\n        };\n    }, [deinitializeEcp, initializeEcp]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useEcpInstruments(method);\n\n    const isLoading = isLoadingInstruments();\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n    const accountType = getFormValues().accountType;\n    const shouldRenderCompanyName =\n        accountType === BluesnapECPAccountType.CorporateChecking ||\n        accountType === BluesnapECPAccountType.CorporateSavings;\n\n    useEffect(() => {\n        if (shouldRenderCompanyName) {\n            setFieldValue('companyName', getBillingAddress()?.company);\n        } else {\n            setFieldValue('companyName', undefined);\n        }\n    }, [shouldRenderCompanyName, setFieldValue, getBillingAddress]);\n\n    useEffect(() => {\n        setValidationSchema(\n            method,\n            getEcpValidationSchema(language, shouldShowForm, shouldRenderCompanyName),\n        );\n    }, [language, shouldShowForm, shouldRenderCompanyName, setValidationSchema, method]);\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_electronic_check_label')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <BlueSnapDirectEcpFieldset\n                        language={language}\n                        shouldRenderCompanyName={shouldRenderCompanyName}\n                    />\n                )}\n                <CheckboxFormField\n                    labelContent={language.translate('payment.bluesnap_direct_permission')}\n                    name=\"shopperPermission\"\n                    onChange={onChange}\n                />\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectEcpPaymentMethod,\n    [{ id: 'ecp', gateway: 'bluesnapdirect' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BlueSnapDirectAlternativePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectAlternativePaymentMethod,\n    [{ gateway: 'bluesnapdirect' }],\n);\n","export interface BlueSnapDirectInitializationData {\n    sepaCreditorCompanyName: string;\n    idealIssuers: IdealIssuer[];\n}\n\ninterface IdealIssuer {\n    issuerId: string;\n    issuerName: string;\n}\n\nexport const isBlueSnapDirectIdealIssuerList = (array: unknown): array is IdealIssuer[] => {\n    if (\n        !(\n            Array.isArray(array) &&\n            array.length &&\n            'issuerId' in array[0] &&\n            'issuerName' in array[0]\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const isBlueSnapDirectInitializationData = (\n    object: unknown,\n): object is BlueSnapDirectInitializationData => {\n    if (\n        !(\n            typeof object === 'object' &&\n            object !== null &&\n            (('sepaCreditorCompanyName' in object &&\n                typeof object.sepaCreditorCompanyName === 'string') ||\n                ('idealIssuers' in object && isBlueSnapDirectIdealIssuerList(object.idealIssuers)))\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n","import { BankInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isSepaInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useSepaInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<BankInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isSepaInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): BankInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useSepaInstruments;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getSepaValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  iban: string()\n                      .matches(\n                          /^[a-zA-Z0-9]+$/i,\n                          language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n                      )\n                      .required(language.translate('payment.sepa_account_number_required')),\n                  firstName: string().required(\n                      language.translate('address.first_name_required_error'),\n                  ),\n                  lastName: string().required(\n                      language.translate('address.last_name_required_error'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport useSepaInstruments from './hooks/useSepaInstruments';\nimport getSepaValidationSchema from './validation-schemas/getSepaValidationSchema';\n\nconst BlueSnapDirectSepaPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        method,\n        checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n        checkoutState: {\n            data: { isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        },\n        paymentForm: { disableSubmit, setValidationSchema },\n        language,\n        onUnhandledError,\n    } = props;\n\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const [disabled, setDisabled] = useState(true);\n    const toggleSubmitButton = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeSepa = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeSepa = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeSepa();\n\n        return () => {\n            void deinitializeSepa();\n        };\n    }, [deinitializeSepa, initializeSepa]);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useSepaInstruments(method);\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n\n    useEffect(() => {\n        setValidationSchema(method, getSepaValidationSchema(language, shouldShowForm));\n    }, [language, shouldShowForm, setValidationSchema, method]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (isInstrumentFeatureAvailable) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const isLoading = isLoadingInstruments();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_sepa_direct_debit')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <>\n                        <BlueSnapDirectTextField\n                            autoComplete=\"iban\"\n                            labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                            name=\"iban\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.first_name_label')}\n                            name=\"firstName\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.last_name_label')}\n                            name=\"lastName\"\n                            useFloatingLabel={true}\n                        />\n                    </>\n                )}\n\n                <CheckboxFormField\n                    labelContent={language.translate(\n                        'payment.bluesnap_direct_sepa_mandate_disclaimer',\n                        {\n                            creditorName: method.initializationData.sepaCreditorCompanyName,\n                        },\n                    )}\n                    name=\"shopperPermission\"\n                    onChange={toggleSubmitButton}\n                />\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectSepaPaymentMethod,\n    [{ id: 'sepa_direct_debit', gateway: 'bluesnapdirect' }],\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getIdealValidationSchema(language: LanguageService): ObjectSchema {\n    return object({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    });\n});\n","import React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectSelectField from './fields/BlueSnapDirectSelectField';\nimport getIdealValidationSchema from './validation-schemas/getIdealValidationSchema';\n\nconst BlueSnapDirectIdealPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment },\n    paymentForm: { setValidationSchema },\n    language,\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const { idealIssuers } = method.initializationData;\n\n    const idealIssuersSelectOptions = idealIssuers.map((issuer) => ({\n        value: issuer.issuerId,\n        label: issuer.issuerName,\n    }));\n\n    const initializeIdeal = useCallback(async () => {\n        setValidationSchema(method, getIdealValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method, setValidationSchema, language]);\n\n    const deinitializeIdeal = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeIdeal();\n\n        return () => {\n            void deinitializeIdeal();\n        };\n    }, [deinitializeIdeal, initializeIdeal]);\n\n    return (\n        <Fieldset\n            legend={<Legend hidden>{language.translate('payment.ideal.label')}</Legend>}\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.ideal.label')}\n                name=\"bic\"\n                options={{\n                    helperLabel: language.translate('payment.select_your_bank'),\n                    items: idealIssuersSelectOptions,\n                }}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectIdealPaymentMethod,\n    [{ id: 'ideal', gateway: 'bluesnapdirect' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport {\n    HostedPaymentComponent,\n    HostedPaymentMethodProps,\n} from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay, Modal } from '@bigcommerce/checkout/ui';\n\nexport type BlueSnapV2PaymentMethodProps = HostedPaymentMethodProps;\n\ninterface BlueSnapV2PaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelBlueSnapV2Payment?(): void;\n}\n\nconst BlueSnapV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [isLoadingIframe, setisLoadingIframe] = useState<boolean>(false);\n    const [paymentPageContent, setPaymentPageContent] = useState<HTMLElement>();\n    const ref = useRef<BlueSnapV2PaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n\n    const cancelBlueSnapV2ModalFlow = useCallback(() => {\n        setPaymentPageContent(undefined);\n\n        if (ref.current.cancelBlueSnapV2Payment) {\n            ref.current.cancelBlueSnapV2Payment();\n            ref.current.cancelBlueSnapV2Payment = undefined;\n        }\n    }, []);\n\n    const initializeBlueSnapV2Payment = useCallback(\n        (options: PaymentInitializeOptions) => {\n            return checkoutService.initializePayment({\n                ...options,\n                bluesnapv2: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setPaymentPageContent(content);\n                        setisLoadingIframe(true);\n                        ref.current.cancelBlueSnapV2Payment = cancel;\n                    },\n                    style: {\n                        border: '1px solid lightgray',\n                        height: '60vh',\n                        width: '100%',\n                    },\n                },\n            });\n        },\n        [checkoutService],\n    );\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (ref.current.paymentPageContentRef.current && paymentPageContent) {\n            paymentPageContent.addEventListener('load', () => {\n                setisLoadingIframe(false);\n            });\n            ref.current.paymentPageContentRef.current.appendChild(paymentPageContent);\n        }\n    }, [paymentPageContent]);\n\n    return (\n        <>\n            <HostedPaymentComponent\n                {...rest}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                initializePayment={initializeBlueSnapV2Payment}\n                method={method}\n                paymentForm={paymentForm}\n            />\n            <Modal\n                additionalModalClassName=\"modal--bluesnap\"\n                isOpen={!!paymentPageContent}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelBlueSnapV2ModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <LoadingOverlay isLoading={isLoadingIframe}>\n                    <div ref={ref.current.paymentPageContentRef} />\n                </LoadingOverlay>\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapV2PaymentMethod,\n    [{ gateway: 'bluesnapv2' }],\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport default memoize(function getPayByBankValidationSchema(\n    language: LanguageService,\n): ObjectSchema {\n    return object({\n        iban: string()\n            .matches(\n                /^[a-zA-Z0-9]+$/i,\n                language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n            )\n            .required(language.translate('payment.pay_by_bank_iban_required')),\n    });\n});\n","import React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport getPayByBankValidationSchema from './validation-schemas/getPayByBankValidationSchema';\n\nconst BlueSnapDirectPayByBankPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    language,\n    paymentForm: { setValidationSchema },\n    checkoutService: { initializePayment, deinitializePayment },\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const initializePayByBank = useCallback(async () => {\n        setValidationSchema(method, getPayByBankValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, language, method, setValidationSchema]);\n\n    const deinitializePayByBank = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayByBank();\n\n        return () => {\n            void deinitializePayByBank();\n        };\n    }, [deinitializePayByBank, initializePayByBank]);\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>{language.translate('payment.bluesnap_direct_iban.label')}</Legend>\n            }\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectTextField\n                autoComplete=\"iban\"\n                labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                name=\"iban\"\n                useFloatingLabel={true}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectPayByBankPaymentMethod,\n    [{ id: 'pay_by_bank', gateway: 'bluesnapdirect' }],\n);\n","import { CheckoutService, PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BoltClientPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    ...rest\n}) => {\n    const initializeBoltPayment: CheckoutService['initializePayment'] = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    useBigCommerceCheckout: true,\n                },\n            }),\n        [checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBoltPayment}\n            method={method}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltClientPaymentMethod;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nexport interface BoltCustomFormProps {\n    containerId: string;\n    showCreateAccountCheckbox: boolean;\n}\n\nconst agreementTranslationOptions = {\n    privacyPolicyUrl: 'https://www.bolt.com/privacy/',\n    termsUrl: 'https://www.bolt.com/end-user-terms/',\n};\n\nconst benefitsList = [\n    { id: 'payment.bolt_benefit_1' },\n    { id: 'payment.bolt_benefit_2' },\n    { id: 'payment.bolt_benefit_3' },\n];\n\nconst BoltCreateAccountCheckbox: FunctionComponent = () => {\n    const labelContent = (\n        <>\n            <TranslatedHtml\n                data={agreementTranslationOptions}\n                id=\"payment.bolt_checkbox_agreement\"\n            />\n            <ul>\n                {benefitsList.map(({ id }, key) => (\n                    <li key={key}>\n                        <TranslatedString id={id} />\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-checkbox form-field--createAccount\"\n            labelContent={labelContent}\n            name=\"shouldCreateAccount\"\n        />\n    );\n};\n\nconst BoltCustomForm: FunctionComponent<BoltCustomFormProps> = ({\n    containerId,\n    showCreateAccountCheckbox,\n}) => {\n    return (\n        <div className=\"form-ccFields\">\n            <div className=\"form-field form-field--bolt-embed\" id={containerId} />\n            {showCreateAccountCheckbox ? <BoltCreateAccountCheckbox /> : null}\n        </div>\n    );\n};\n\nexport default BoltCustomForm;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltCustomForm from './BoltCustomForm';\n\nconst BoltEmbeddedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [showCreateAccountCheckbox, setShowCreateAccountCheckbox] = useState(false);\n\n    const boltEmbeddedContainerId = 'bolt-embedded';\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const initializeBoltPayment = useCallback(\n        (options: any) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    containerId: boltEmbeddedContainerId,\n                    useBigCommerceCheckout: true,\n                    onPaymentSelect: (hasBoltAccount: boolean) => {\n                        setShowCreateAccountCheckbox(!hasBoltAccount);\n\n                        if (hasBoltAccount) {\n                            setFieldValue('shouldCreateAccount', false);\n                        }\n                    },\n                },\n            }),\n        [checkoutService, boltEmbeddedContainerId, setFieldValue],\n    );\n\n    const renderCustomPaymentForm = useCallback(\n        () => (\n            <BoltCustomForm\n                containerId={boltEmbeddedContainerId}\n                showCreateAccountCheckbox={showCreateAccountCheckbox}\n            />\n        ),\n        [boltEmbeddedContainerId, showCreateAccountCheckbox],\n    );\n\n    const { getInstruments, isPaymentDataRequired } = checkoutState.data;\n    const { isInitializingPayment, isLoadingInstruments } = checkoutState.statuses;\n    const instruments = getInstruments(method) || [];\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId=\"boltEmbeddedOneClick\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeBoltPayment}\n            instruments={instruments}\n            isInitializing={isInitializingPayment()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={!isGuestCustomer}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltEmbeddedPaymentMethod;\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltClientPaymentMethod from './BoltClientPaymentMethod';\nimport BoltEmbeddedPaymentMethod from './BoltEmbeddedPaymentMethod';\n\nconst BoltPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const useBoltEmbedded = method.initializationData?.embeddedOneClickEnabled;\n\n    if (useBoltEmbedded) {\n        return (\n            <BoltEmbeddedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                method={method}\n                paymentForm={paymentForm}\n                {...rest}\n            />\n        );\n    }\n\n    return (\n        <BoltClientPaymentMethod\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            method={method}\n            paymentForm={paymentForm}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BoltPaymentMethod,\n    [{ id: 'bolt' }],\n);\n","import { FormField } from '@bigcommerce/checkout-sdk';\n\nimport { DynamicFormFieldType } from '@bigcommerce/checkout/ui';\n\nexport enum BraintreeAchFieldType {\n    BusinessName = 'businessName',\n    AccountType = 'accountType',\n    AccountNumber = 'accountNumber',\n    RoutingNumber = 'routingNumber',\n    OwnershipType = 'ownershipType',\n    FirstName = 'firstName',\n    LastName = 'lastName',\n}\n\nexport enum OwnershipTypes {\n    Personal = 'Personal',\n    Business = 'Business',\n}\n\nexport enum AccountTypes {\n    Savings = 'Savings',\n    Checking = 'Checking',\n}\n\nconst accountTypeOptions = [\n    {\n        value: AccountTypes.Savings,\n        label: AccountTypes.Savings,\n    },\n    {\n        value: AccountTypes.Checking,\n        label: AccountTypes.Checking,\n    },\n];\n\nexport const ownershipTypeOptions = [\n    {\n        value: OwnershipTypes.Personal,\n        label: OwnershipTypes.Personal,\n    },\n    {\n        value: OwnershipTypes.Business,\n        label: OwnershipTypes.Business,\n    },\n];\n\nexport const defaultBraintreeAchFormFields: FormField[] = [\n    {\n        name: BraintreeAchFieldType.AccountType,\n        custom: false,\n        id: BraintreeAchFieldType.AccountType,\n        label: 'Account Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: accountTypeOptions,\n        },\n    },\n    {\n        name: BraintreeAchFieldType.AccountNumber,\n        custom: false,\n        id: BraintreeAchFieldType.AccountNumber,\n        label: 'Account Number',\n        required: true,\n        max: 9,\n        min: 8,\n    },\n    {\n        name: BraintreeAchFieldType.RoutingNumber,\n        custom: false,\n        id: BraintreeAchFieldType.RoutingNumber,\n        label: 'Routing Number',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.OwnershipType,\n        custom: false,\n        id: BraintreeAchFieldType.OwnershipType,\n        label: 'Ownership Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: ownershipTypeOptions,\n        },\n    },\n];\n\nexport const personalBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.FirstName,\n        custom: false,\n        id: BraintreeAchFieldType.FirstName,\n        label: 'First Name',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.LastName,\n        custom: false,\n        id: BraintreeAchFieldType.LastName,\n        label: 'Last Name',\n        required: true,\n    },\n];\n\nexport const businessBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.BusinessName,\n        custom: false,\n        id: BraintreeAchFieldType.BusinessName,\n        label: 'Business Name',\n        required: true,\n    },\n];\n","import { AchInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBraintreeAchInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => instruments.filter(isAchInstrument), [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset &&\n        !!currentInstrument &&\n        !currentInstrument.trustedShippingAddress;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBraintreeAchInstruments;\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { useCallback } from 'react';\nimport { object, string, StringSchema } from 'yup';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormValues,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst useBraintreeAchValidation = (method: PaymentMethod) => {\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const getValidationSchema = () => {\n        const ownershipType = paymentForm.getFieldValue('ownershipType');\n        const formFields =\n            ownershipType === OwnershipTypes.Business\n                ? businessBraintreeAchFormFields\n                : personalBraintreeAchFormFields;\n\n        const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n            [BraintreeAchFieldType.FirstName]: 'address.first_name',\n            [BraintreeAchFieldType.LastName]: 'address.last_name',\n            [BraintreeAchFieldType.AccountNumber]: 'payment.errors.account_number',\n            [BraintreeAchFieldType.RoutingNumber]: 'payment.errors.routing_number',\n            [BraintreeAchFieldType.BusinessName]: 'payment.errors.business_name',\n        };\n\n        return object(\n            formFields.reduce(\n                (schema, { id, required }) => {\n                    if (required) {\n                        if (requiredFieldErrorTranslationIds[id]) {\n                            schema[id] = string().required(\n                                language.translate(\n                                    `${requiredFieldErrorTranslationIds[id]}_required_error`,\n                                ),\n                            );\n\n                            if (id === BraintreeAchFieldType.AccountNumber) {\n                                schema[id] = schema[id].matches(\n                                    /^\\d+$/,\n                                    language.translate('payment.errors.only_numbers_error', {\n                                        label: language.translate('payment.account_number_label'),\n                                    }),\n                                );\n                            }\n\n                            if (id === BraintreeAchFieldType.RoutingNumber) {\n                                schema[id] = schema[id]\n                                    .matches(\n                                        /^\\d+$/,\n                                        language.translate('payment.errors.only_numbers_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                        }),\n                                    )\n                                    .min(\n                                        8,\n                                        language.translate('customer.min_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            min: 8,\n                                        }),\n                                    )\n                                    .max(\n                                        9,\n                                        language.translate('customer.max_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            max: 9,\n                                        }),\n                                    );\n                            }\n                        }\n                    }\n\n                    return schema;\n                },\n                // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n                {} as { [key: string]: StringSchema },\n            ),\n        );\n    };\n\n    const validateBraintreeAchForm = useCallback(\n        async (braintreeAchFormValues: PaymentFormValues): Promise<boolean> => {\n            const {\n                accountNumber,\n                businessName,\n                routingNumber,\n                ownershipType,\n                firstName,\n                lastName,\n            } = braintreeAchFormValues;\n\n            const validationSchema = getValidationSchema();\n\n            paymentForm.setValidationSchema(method, validationSchema);\n\n            const [\n                isValidAccountNumber,\n                isValidRoutingNumber,\n                isValidFirstName,\n                isValidLastName,\n                isValidBusinessName,\n            ] = await Promise.all([\n                await validationSchema.fields.accountNumber?.isValid(accountNumber),\n                await validationSchema.fields.routingNumber?.isValid(routingNumber),\n                await validationSchema.fields.firstName?.isValid(firstName),\n                await validationSchema.fields.lastName?.isValid(lastName),\n                await validationSchema.fields.businessName?.isValid(businessName),\n            ]);\n\n            const isValidDepositoryName =\n                ownershipType === OwnershipTypes.Business\n                    ? isValidBusinessName\n                    : isValidFirstName && isValidLastName;\n\n            return isValidRoutingNumber && isValidAccountNumber && isValidDepositoryName;\n        },\n        [getValidationSchema],\n    );\n\n    const resetFormValidation = useCallback(() => {\n        paymentForm.setValidationSchema(method, null);\n    }, [paymentForm, method]);\n\n    return {\n        validateBraintreeAchForm,\n        resetFormValidation,\n    };\n};\n\nexport default useBraintreeAchValidation;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField } from '@bigcommerce/checkout/ui';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst isBraintreeAchFormFieldName = (fieldName: string): fieldName is BraintreeAchFieldType => {\n    return Object.values(BraintreeAchFieldType).includes(fieldName as BraintreeAchFieldType);\n};\n\nconst getTranslatedLabelByFieldName = (fieldName: string, language: LanguageService) => {\n    const braintreeAchFormLabelsMap = {\n        firstName: language.translate('address.first_name_label'),\n        lastName: language.translate('address.last_name_label'),\n        accountNumber: language.translate('payment.account_number_label'),\n        routingNumber: language.translate('payment.account_routing_label'),\n        businessName: language.translate('payment.business_name_label'),\n        ownershipType: language.translate('payment.ownership_type_label'),\n        accountType: language.translate('payment.account_type_label'),\n    };\n\n    return isBraintreeAchFormFieldName(fieldName)\n        ? braintreeAchFormLabelsMap[fieldName]\n        : fieldName;\n};\n\nconst BraintreeAchFormFields: FunctionComponent = () => {\n    const { language } = useLocale();\n    const { paymentForm } = usePaymentFormContext();\n    const { getFieldValue, setFieldValue } = paymentForm;\n\n    const ownershipTypeValue = getFieldValue(BraintreeAchFieldType.OwnershipType);\n    const fieldValues =\n        ownershipTypeValue === OwnershipTypes.Business\n            ? businessBraintreeAchFormFields\n            : personalBraintreeAchFormFields;\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n        },\n        [setFieldValue],\n    );\n\n    return (\n        <>\n            {fieldValues.map((field) => (\n                <DynamicFormField\n                    extraClass={`dynamic-form-field--${field.id}`}\n                    field={field}\n                    key={field.id}\n                    label={getTranslatedLabelByFieldName(field.name, language)}\n                    onChange={handleChange(field.id)}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default BraintreeAchFormFields;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nimport { OwnershipTypes } from '../constants';\n\nexport interface BraintreeAchMandateTextProps {\n    isInstrumentFeatureAvailable?: boolean;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchMandateText: FunctionComponent<BraintreeAchMandateTextProps> = ({\n    isInstrumentFeatureAvailable,\n    updateMandateText,\n}) => {\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const {\n        businessName,\n        accountType,\n        accountNumber,\n        routingNumber,\n        ownershipType,\n        firstName,\n        lastName,\n    } = paymentForm.getFormValues();\n\n    const fullName = `${String(firstName)} ${String(lastName)}`;\n\n    const depositoryName = ownershipType === OwnershipTypes.Business ? businessName : fullName;\n    const outstandingBalance = checkoutState.data.getCheckout()?.outstandingBalance;\n    const storeName = checkoutState.data.getConfig()?.storeProfile.storeName;\n    const symbol = checkoutState.data.getCart()?.currency.symbol;\n\n    const mandateTextTranslationKey = isInstrumentFeatureAvailable\n        ? 'payment.braintreeach_vaulting_mandate_text'\n        : 'payment.braintreeach_mandate_text';\n\n    const currentDate = new Date(Date.now()).toJSON().slice(0, 10); // yyyy-mm-dd\n    const formattedDate = currentDate.split('-').reverse().join('.'); // dd.mm.yyyy\n\n    const mandateTextTranslationProps = {\n        accountType: String(accountType).toLowerCase(),\n        accountNumber: String(accountNumber),\n        currentDate: formattedDate,\n        depositoryName: String(depositoryName),\n        routingNumber: String(routingNumber),\n        outstandingBalance: `${symbol || ''}${outstandingBalance || ''}`,\n        storeName: String(storeName),\n    };\n\n    const mandateText = language.translate(mandateTextTranslationKey, mandateTextTranslationProps);\n\n    useEffect(() => {\n        updateMandateText(mandateText);\n    }, [mandateText, updateMandateText]);\n\n    const handleChange = (value: boolean) => {\n        paymentForm.setFieldValue('orderConsent', value);\n    };\n\n    return (\n        <div className=\"mandate-text\" data-test=\"mandate-text\">\n            <CheckboxFormField\n                labelContent={mandateText}\n                name=\"orderConsent\"\n                onChange={handleChange}\n            />\n        </div>\n    );\n};\n\nexport default BraintreeAchMandateText;\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { AccountTypes, OwnershipTypes } from '../constants';\nimport useBraintreeAchInstruments from '../hooks/useBraintreeAchInstruments';\nimport useBraintreeAchValidation from '../hooks/useBraintreeAchValidation';\n\nimport BraintreeAchFormFields from './BraintreeAchFormFields';\nimport BraintreeAchMandateText from './BraintreeAchMandateText';\n\nexport interface BraintreeAchPaymentFormProps {\n    method: PaymentMethod;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchPaymentForm: FunctionComponent<BraintreeAchPaymentFormProps> = ({\n    method,\n    updateMandateText,\n}) => {\n    const [isValidForm, setIsValidForm] = useState(false);\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { disableSubmit, getFieldValue, getFormValues, setFieldValue } = paymentForm;\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    } = useBraintreeAchInstruments(method);\n    const { validateBraintreeAchForm, resetFormValidation } = useBraintreeAchValidation(method);\n\n    const resetFormValues = () => {\n        const { firstName, lastName } = checkoutState.data.getBillingAddress() || {};\n\n        const defaultFormValues = {\n            ownershipType: OwnershipTypes.Personal,\n            accountType: AccountTypes.Savings,\n            accountNumber: '',\n            routingNumber: '',\n            businessName: '',\n            firstName: firstName || '',\n            lastName: lastName || '',\n            shouldSaveInstrument: false,\n            shouldSetAsDefaultInstrument: false,\n            instrumentId: currentInstrument?.bigpayToken || '',\n            orderConsent: false,\n        };\n\n        for (const [key, value] of Object.entries(defaultFormValues)) {\n            setFieldValue(key, value);\n        }\n    };\n\n    useEffect(() => {\n        resetFormValues();\n    }, [currentInstrument?.bigpayToken]);\n\n    const shouldShowForm =\n        !shouldShowInstrumentFieldset || shouldCreateNewInstrument || shouldConfirmInstrument;\n    const shouldShowMandateTextCheckbox = shouldShowForm && isValidForm && !shouldConfirmInstrument;\n\n    useEffect(() => {\n        if (shouldShowForm) {\n            const validate = async () => {\n                const braintreeAchFormValues = getFormValues();\n                const isValid = await validateBraintreeAchForm(braintreeAchFormValues);\n\n                if (!isValid && getFieldValue('orderConsent')) {\n                    setFieldValue('orderConsent', false);\n                }\n\n                setIsValidForm(isValid);\n            };\n\n            void validate();\n        } else {\n            resetFormValidation();\n        }\n    }, [\n        getFormValues,\n        setFieldValue,\n        setIsValidForm,\n        shouldShowForm,\n        validateBraintreeAchForm,\n        resetFormValidation,\n    ]);\n\n    useEffect(() => {\n        const mandateTextConfirmationCheckboxValue = getFieldValue('orderConsent');\n\n        const inValidForInstrumentConfirmation = shouldConfirmInstrument && !isValidForm;\n        const inValidForDefaultTransactions =\n            shouldShowMandateTextCheckbox && !mandateTextConfirmationCheckboxValue;\n\n        const shouldDisableSubmit = shouldShowForm\n            ? inValidForInstrumentConfirmation || inValidForDefaultTransactions\n            : false;\n\n        disableSubmit(method, shouldDisableSubmit);\n    }, [disableSubmit, getFieldValue, isValidForm, method, shouldShowMandateTextCheckbox]);\n\n    return (\n        <div className=\"checkout-ach-form\" data-test=\"checkout-ach-form\">\n            {shouldShowInstrumentFieldset && (\n                <div className=\"checkout-ach-form__instrument\">\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                </div>\n            )}\n\n            {shouldConfirmInstrument && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            {shouldShowForm && <BraintreeAchFormFields />}\n\n            {isInstrumentFeatureAvailable && (\n                <StoreInstrumentFieldset\n                    instrumentId={currentInstrument?.bigpayToken}\n                    instruments={accountInstruments}\n                    isAccountInstrument\n                />\n            )}\n\n            {shouldShowMandateTextCheckbox && (\n                <BraintreeAchMandateText\n                    isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                    updateMandateText={updateMandateText}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeAchPaymentForm;\n","import React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeAchPaymentForm from './components/BraintreeAchPaymentForm';\n\nconst BraintreeAchPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const currentMandateTextRef = useRef('');\n    const updateMandateText = (currentMandateText: string) => {\n        currentMandateTextRef.current = currentMandateText;\n    };\n\n    useEffect(() => {\n        const initializePaymentOrThrow = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    braintreeach: {\n                        getMandateText: () => currentMandateTextRef.current,\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePaymentOrThrow();\n\n        return () => {\n            const deinitializePaymentOrThrow = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePaymentOrThrow();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = checkoutState.data.getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeAchPaymentForm\n                                method={method}\n                                updateMandateText={updateMandateText}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeAchPaymentMethod,\n    [{ id: 'braintreeach' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneCreditCardForm.scss';\n\ninterface BraintreeFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n}\n\nconst BraintreeFastlaneCreditCardForm: FunctionComponent<BraintreeFastlaneCreditCardFormProps> = ({\n    renderPayPalCardComponent,\n}) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#braintree-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"braintree-fastlane-cc-form-container\"\n            data-test=\"braintree-fastlane-cc-form-container\"\n            id=\"braintree-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BraintreeFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BraintreeFastlaneInstrumentsFormProps {\n    onChange: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n    selectedInstrument: CardInstrument;\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BraintreeFastlaneInstrumentsForm: FunctionComponent<\n    BraintreeFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"braintree-fastlane-instrument\"\n            data-test=\"braintree-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"braintree-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"braintree-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"braintree-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"braintree-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"braintree-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\nimport { useBraintreeFastlaneInstruments } from '../hooks/useBraintreeFastlaneInstruments';\n\nimport BraintreFastlaneCreditCardForm from './BraintreeFastlaneCreditCardForm';\nimport BraintreeFastlaneInstrumentsForm from './BraintreeFastlaneInstrumentsForm';\n\ninterface BraintreeFastlaneFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n}\n\nconst BraintreeFastlaneForm: FunctionComponent<BraintreeFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBraintreeFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\" id=\"braintree-fastlane\">\n            {shouldShowInstrumentsForm && (\n                <BraintreeFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BraintreFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBraintreeFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import BraintreeFastlanePaymentMethod from './BraintreeFastlanePaymentMethod';\n\nexport default BraintreeFastlanePaymentMethod;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeFastlaneForm from './components/BraintreeFastlaneForm';\n\nimport './BraintreeFastlanePaymentMethod.scss';\n\nexport interface BraintreeFastlaneComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BraintreeFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const paypalFastlaneComponentRef = useRef<BraintreeFastlaneComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                braintreefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalFastlaneComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalFastlaneComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: Error) => {\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalFastlaneComponentRef?.current?.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalFastlaneComponentRef.current?.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeFastlanePaymentMethod,\n    [{ id: 'braintreeacceleratedcheckout' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreeLocalPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const methodId = method.id;\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                braintreelocalmethods: {\n                    container: '#checkout-payment-continue',\n                    buttonText: language.translate('payment.continue_with_brand', {\n                        brandName: methodId,\n                    }),\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeLocalPaymentMethod,\n    [{ gateway: 'braintreelocalmethods' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const initializeBraintreePaypalPaymentMethod = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const { onUnhandledError, language, method, paymentForm } = rest;\n\n            return checkoutService.initializePayment({\n                ...defaultOptions,\n                braintree: {\n                    containerId: '#checkout-payment-continue',\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError?.(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError?.(error);\n                        }\n                    },\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                },\n            });\n        },\n        [rest, checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBraintreePaypalPaymentMethod}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreePaypalPaymentMethod,\n    [{ id: 'braintreepaypal' }],\n);\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { number } from 'card-validator';\n\nimport { WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","import {\n    CheckoutSelectors,\n    CustomerRequestOptions,\n    LanguageService,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    getPaymentMethodName,\n    PaymentFormService,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\n\nexport interface WalletButtonPaymentMethodProps {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WalletButtonPaymentMethodDerivedProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentDataRequired: boolean;\n    isPaymentSelected: boolean;\n}\n\nclass WalletButtonPaymentMethodComponent extends Component<WalletButtonPaymentMethodProps> {\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            paymentForm: { disableSubmit },\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<WalletButtonPaymentMethodProps & WalletButtonPaymentMethodDerivedProps>,\n    ): void {\n        const { method } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n        const { method: prevMethod, isPaymentDataRequired: prevIsPaymentDataRequired } = prevProps;\n\n        if (\n            method.initializationData !== prevMethod.initializationData ||\n            isPaymentDataRequired !== prevIsPaymentDataRequired\n        ) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const { isInitializing = false } = this.props;\n        const { isPaymentSelected } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    {isPaymentSelected ? this.renderPaymentView() : this.renderSignInView()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const { buttonId, signInButtonClassName, signInButtonLabel, method, language } = this.props;\n\n        return (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n                {signInButtonLabel || (\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_in_action\"\n                    />\n                )}\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const { buttonId, editButtonClassName, editButtonLabel, shouldShowEditButton, method } =\n            this.props;\n        const { accountMask, cardName, cardType, expiryMonth, expiryYear } =\n            this.getWalletButtonPaymentMethodDerivedProps();\n\n        return (\n            <>\n                {!!cardName && (\n                    <p data-test=\"payment-method-wallet-card-name\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_name_label\" />:\n                        </strong>{' '}\n                        {cardName}\n                    </p>\n                )}\n\n                {!!accountMask && !!cardType && (\n                    <p data-test=\"payment-method-wallet-card-type\">\n                        <strong>{`${cardType}:`}</strong> {accountMask}\n                    </p>\n                )}\n\n                {!!expiryMonth && !!expiryYear && (\n                    <p data-test=\"payment-method-wallet-card-expiry\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                        </strong>{' '}\n                        {`${expiryMonth}/${expiryYear}`}\n                    </p>\n                )}\n\n                {!!shouldShowEditButton && (\n                    <p>\n                        {\n                            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                            <a\n                                className={editButtonClassName}\n                                href=\"#\"\n                                id={buttonId}\n                                onClick={preventDefault()}\n                            >\n                                {editButtonLabel || (\n                                    <TranslatedString id=\"remote.select_different_card_action\" />\n                                )}\n                            </a>\n                        }\n                    </p>\n                )}\n\n                <SignOutLink method={method} onSignOut={this.handleSignOut} />\n            </>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const {\n            paymentForm: { disableSubmit },\n            method,\n        } = this.props;\n        const { isPaymentDataRequired } = this.getWalletButtonPaymentMethodDerivedProps();\n\n        if (normalizeWalletPaymentData(method.initializationData) || !isPaymentDataRequired) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const { signOutCustomer, method, onSignOut = noop, onSignOutError = noop } = this.props;\n\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n\n    private getWalletButtonPaymentMethodDerivedProps(): WalletButtonPaymentMethodDerivedProps {\n        const { checkoutState, method } = this.props;\n        const {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        } = checkoutState;\n        const billingAddress = getBillingAddress();\n        const checkout = getCheckout();\n\n        if (!billingAddress || !checkout) {\n            throw new Error('Unable to get checkout');\n        }\n\n        const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n        return {\n            ...walletPaymentData,\n            // FIXME: I'm not sure how this would work for non-English names.\n            cardName:\n                walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        };\n    }\n}\n\nexport default WalletButtonPaymentMethodComponent;\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    CheckoutButtonResolveId,\n    PaymentMethodId,\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst VisaCheckoutPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeVisaCheckoutPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const mergedOptions = {\n                ...defaultOptions,\n                braintreevisacheckout: {\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"visaCheckoutWalletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            editButtonClassName=\"v-button\"\n            initializePayment={initializeVisaCheckoutPayment}\n            method={method}\n            shouldShowEditButton\n            signInButtonClassName=\"v-button\"\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    VisaCheckoutPaymentMethod,\n    [{ id: PaymentMethodId.BraintreeVisaCheckout }],\n);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface TextFieldProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nexport interface TextFieldFormProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nconst TextField: FunctionComponent<TextFieldProps> = (props) => {\n    const { additionalClassName, autoComplete, labelId, name } = props;\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <TextInput {...field} autoComplete={autoComplete} id={field.name} />\n        ),\n        [autoComplete],\n    );\n\n    const labelContent = useMemo(() => <TranslatedString id={labelId} />, [labelId]);\n\n    return (\n        <FormField\n            additionalClassName={additionalClassName}\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nconst TextFieldForm: FunctionComponent<TextFieldFormProps> = ({\n    additionalClassName,\n    autoComplete,\n    labelId,\n    name,\n}) => (\n    <Fieldset>\n        <div className=\"form-ccFields\">\n            <TextField\n                additionalClassName={additionalClassName}\n                autoComplete={autoComplete}\n                labelId={labelId}\n                name={name}\n            />\n        </div>\n    </Fieldset>\n);\n\nexport default memo(TextFieldForm);\n","import { BillingAddress, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, {\n    FunctionComponent,\n    SyntheticEvent,\n    useCallback,\n    useContext,\n    useEffect,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nimport TextFieldForm from './checkoutcomFieldsets/TextFieldForm';\n\ninterface CheckoutcomAPMFormProps {\n    method: PaymentMethod;\n    debtor: BillingAddress;\n}\n\ninterface Issuer {\n    bic: string;\n    name: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: string;\n}\n\ninterface DropdownButtonProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface OptionButtonProps {\n    className?: string;\n    issuer: Issuer;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\ninterface SepaCreditor {\n    sepaCreditorAddress: string;\n    sepaCreditorCity: string;\n    sepaCreditorCompanyName: string;\n    sepaCreditorCountry: string;\n    sepaCreditorIdentifier: string;\n    sepaCreditorPostalCode: string;\n}\n\nconst Sepa: FunctionComponent<CheckoutcomAPMFormProps> = ({ method, debtor }) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const creditor: SepaCreditor = method.initializationData.sepaCreditor;\n\n    useEffect(() => {\n        paymentContext?.paymentForm.disableSubmit(method, true);\n\n        return () => paymentContext?.paymentForm.disableSubmit(method, false);\n    }, [paymentContext, method]);\n\n    function toggleSubmitButton(isChecked: boolean) {\n        paymentContext?.paymentForm.disableSubmit(method, !isChecked);\n    }\n\n    return (\n        <>\n            <div className=\"checkoutcom-sepa-column-container\">\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_creditor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{creditor.sepaCreditorCompanyName}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorAddress}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${creditor.sepaCreditorPostalCode} ${creditor.sepaCreditorCity}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorCountry}</p>\n                    <br />\n                    <p className=\"checkoutcom-sepa-line\">\n                        <TranslatedString\n                            data={{ creditorId: creditor.sepaCreditorIdentifier }}\n                            id=\"payment.checkoutcom_sepa_creditor_id\"\n                        />\n                    </p>\n                </div>\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_debtor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{`${debtor.firstName} ${debtor.lastName}`}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.address1}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${debtor.postalCode} ${debtor.city}, ${debtor.stateOrProvinceCode}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.countryCode}</p>\n                </div>\n            </div>\n            <p className=\"checkoutcom-sepa-line\">\n                <TranslatedString id=\"payment.checkoutcom_sepa_payment_type\" />\n            </p>\n            <br />\n\n            <TextFieldForm\n                additionalClassName=\"form-field--iban\"\n                autoComplete=\"iban\"\n                labelId=\"payment.sepa_account_number\"\n                name=\"iban\"\n            />\n            <CheckboxFormField\n                labelContent={\n                    <TranslatedString\n                        data={{ creditorName: creditor.sepaCreditorCompanyName }}\n                        id=\"payment.checkoutcom_sepa_mandate_disclaimer\"\n                    />\n                }\n                name=\"sepaMandate\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onChange={toggleSubmitButton}\n            />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    form,\n    selectedIssuer,\n}) => {\n    const Input = useCallback(() => <input {...restField} type=\"hidden\" />, [restField]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void form.setFieldValue(restField.name, selectedIssuer);\n    }, [value, form, selectedIssuer, restField.name]);\n\n    return <Input />;\n};\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...restProps }) => {\n    const { bic, name } = issuer;\n\n    return (\n        <button data-bic={bic} type=\"button\" {...restProps}>\n            <div className=\"instrumentSelect-details\">{`${bic} / ${name}`}</div>\n        </button>\n    );\n};\n\nconst DropdownButton: FunctionComponent<DropdownButtonProps> = ({ selectedIssuer }) => {\n    if (!selectedIssuer) {\n        return (\n            <button\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                type=\"button\"\n            >\n                <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n                    <div className=\"instrumentSelect-card\">Your bank</div>\n                </div>\n            </button>\n        );\n    }\n\n    return (\n        <OptionButton\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            issuer={selectedIssuer}\n        />\n    );\n};\n\nconst Fawry: FunctionComponent<CheckoutcomAPMFormProps> = () => {\n    return (\n        <>\n            <TextFieldForm\n                additionalClassName=\"form-field--customerMobile\"\n                autoComplete=\"tel\"\n                labelId=\"payment.checkoutcom_fawry_customer_mobile_label\"\n                name=\"customerMobile\"\n            />\n            <TextFieldForm\n                additionalClassName=\"form-field--customerEmail\"\n                autoComplete=\"email\"\n                labelId=\"payment.checkoutcom_fawry_customer_email_label\"\n                name=\"customerEmail\"\n            />\n        </>\n    );\n};\n\nconst Ideal: FunctionComponent<CheckoutcomAPMFormProps> = ({ method }) => {\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer | undefined>();\n    const [bicValue, setBicValue] = useState<string>('');\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={bicValue} />,\n        [bicValue],\n    );\n\n    const issuers: Issuer[] = method.initializationData.idealIssuers;\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        // eslint-disable-next-line no-underscore-dangle\n        const _selectedIssuer = issuers.find(({ bic }) => bic === currentTarget.dataset.bic);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n        setBicValue(_selectedIssuer.bic);\n    };\n\n    const issuersList = (\n        <ul className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\">\n            {issuers.map((issuer) => (\n                <li className=\"instrumentSelect-option dropdown-menu-item\" key={issuer.bic}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <DropdownButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"bic\" />\n        </>\n    );\n};\n\nconst checkoutcomCustomFormFields: CheckoutcomCustomFormFields = {\n    fawry: Fawry,\n    sepa: Sepa,\n    ideal: Ideal,\n};\n\ninterface CheckoutcomCustomFormFields {\n    [key: string]: React.FunctionComponent<CheckoutcomAPMFormProps>;\n}\n\nexport const ccDocumentField = ({ method }: CheckoutcomAPMFormProps) => (\n    <TextFieldForm\n        additionalClassName=\"form-field--ccDocument\"\n        autoComplete=\"cc-document\"\n        labelId={`payment.checkoutcom_document_label_${method.id}`}\n        name=\"ccDocument\"\n    />\n);\n\nexport default checkoutcomCustomFormFields;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { boolean, object, ObjectSchema, string } from 'yup';\n\nimport {\n    DocumentOnlyCustomFormFieldsetValues,\n    FawryCustomFormFieldsetValues,\n    IdealCustomFormFieldsetValues,\n    SepaCustomFormFieldsetValues,\n} from './CheckoutcomFormValues';\n\nexport type checkoutcomCustomPaymentMethods = 'fawry' | 'sepa';\nexport type documentPaymentMethods = 'oxxo' | 'qpay' | 'boleto' | 'ideal';\nexport type checkoutcomPaymentMethods = documentPaymentMethods | checkoutcomCustomPaymentMethods;\nexport const checkoutcomPaymentMethodsArray = ['fawry', 'sepa', 'oxxo', 'qpay', 'boleto', 'ideal'];\nexport interface CustomValidationSchemaOptions {\n    paymentMethod: checkoutcomPaymentMethods;\n    language: LanguageService;\n}\n\nconst checkoutComShemas: {\n    [key in checkoutcomPaymentMethods]: (language: LanguageService) => any;\n} = {\n    oxxo: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_oxxo'))\n            .length(18, language.translate('payment.checkoutcom_document_invalid_error_oxxo')),\n    }),\n    qpay: (language: LanguageService) => ({\n        ccDocument: string()\n            .notRequired()\n            .max(32, language.translate('payment.checkoutcom_document_invalid_error_qpay')),\n    }),\n    boleto: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .min(11, language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .max(14, language.translate('payment.checkoutcom_document_invalid_error_boleto')),\n    }),\n    sepa: (language: LanguageService) => ({\n        iban: string().required(language.translate('payment.sepa_account_number_required')),\n        sepaMandate: boolean().required(language.translate('payment.sepa_mandate_required')),\n    }),\n    ideal: (language: LanguageService) => ({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    }),\n    fawry: (language: LanguageService) => ({\n        customerMobile: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'))\n            .matches(\n                new RegExp(`^\\\\d{11}$`),\n                language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'),\n            ),\n        customerEmail: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error'))\n            .email(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error')),\n    }),\n};\n\nexport default memoize(function getCheckoutcomValidationSchemas({\n    paymentMethod,\n    language,\n}: CustomValidationSchemaOptions): ObjectSchema<\n    | DocumentOnlyCustomFormFieldsetValues\n    | FawryCustomFormFieldsetValues\n    | IdealCustomFormFieldsetValues\n    | SepaCustomFormFieldsetValues\n> {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return object(checkoutComShemas[paymentMethod](language));\n});\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport checkoutcomCustomFormFields, { ccDocumentField } from './CheckoutcomCustomFormFields';\nimport { checkoutcomPaymentMethods, getCheckoutcomValidationSchemas } from './checkoutcomFieldsets';\nimport { checkoutcomPaymentMethodsArray } from './checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas';\n\nexport interface CheckoutcomCustomPaymentMethodProps\n    extends Omit<CreditCardPaymentMethodProps, 'cardFieldset' | 'cardValidationSchema'> {\n    checkoutCustomMethod: string;\n}\n\nconst isCheckoutcomPaymentMethod = (methodId: string): methodId is checkoutcomPaymentMethods => {\n    return Object.values(checkoutcomPaymentMethodsArray).includes(methodId);\n};\nconst CheckoutcomCustomPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    method,\n    checkoutService,\n    checkoutState,\n    ...rest\n}) => {\n    const { getConfig } = checkoutState.data;\n    const isIdealHostedPageExperimentOn =\n        getConfig()?.checkoutSettings.features['PI-2979.checkoutcom_enable_ideal_hosted_page'];\n\n    const checkoutCustomMethod = method.id;\n    const CheckoutcomCustomFieldset =\n        checkoutCustomMethod in checkoutcomCustomFormFields\n            ? checkoutcomCustomFormFields[checkoutCustomMethod]\n            : ccDocumentField;\n\n    const billingAddress = checkoutState.data.getBillingAddress();\n\n    if (\n        !isCheckoutcomPaymentMethod(checkoutCustomMethod) ||\n        (checkoutCustomMethod === 'ideal' && isIdealHostedPageExperimentOn)\n    ) {\n        return null;\n    }\n\n    return (\n        <CreditCardPaymentMethodComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            {...rest}\n            cardFieldset={<CheckoutcomCustomFieldset debtor={billingAddress!} method={method} />}\n            cardValidationSchema={getCheckoutcomValidationSchemas({\n                paymentMethod: checkoutCustomMethod,\n                language,\n            })}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    CheckoutcomCustomPaymentMethod,\n    [\n        { gateway: 'checkoutcom', id: 'ideal' },\n        { gateway: 'checkoutcom', id: 'fawry' },\n        { gateway: 'checkoutcom', id: 'oxxo' },\n        { gateway: 'checkoutcom', id: 'boleto' },\n        { gateway: 'checkoutcom', id: 'sepa' },\n        { gateway: 'checkoutcom', id: 'qpay' },\n        { gateway: 'checkoutcom', id: 'p24' },\n    ],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ClearpayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ClearpayPaymentMethod,\n    [{ gateway: 'clearpay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    CheckoutButtonResolveId,\n    PaymentMethodId,\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst GooglePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeGooglePayPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const loadingContainerId = 'checkout-app';\n            const mergedOptions = {\n                ...defaultOptions,\n                [PaymentMethodId.AdyenV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AdyenV3GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AuthorizeNetGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BNZGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BigCommercePaymentsGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BraintreeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.PayPalCommerceGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeUPEGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CybersourceV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.OrbitalGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CheckoutcomGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.WorldpayAccessGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.TdOnlineMartGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeOCSGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"walletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeGooglePayPayment}\n            method={method}\n            shouldShowEditButton\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    GooglePayPaymentMethod,\n    [\n        { id: PaymentMethodId.AdyenV2GooglePay },\n        { id: PaymentMethodId.AdyenV3GooglePay },\n        { id: PaymentMethodId.AuthorizeNetGooglePay },\n        { id: PaymentMethodId.BNZGooglePay },\n        { id: PaymentMethodId.BraintreeGooglePay },\n        { id: PaymentMethodId.PayPalCommerceGooglePay },\n        { id: PaymentMethodId.BigCommercePaymentsGooglePay },\n        { id: PaymentMethodId.CheckoutcomGooglePay },\n        { id: PaymentMethodId.CybersourceV2GooglePay },\n        { id: PaymentMethodId.OrbitalGooglePay },\n        { id: PaymentMethodId.StripeGooglePay },\n        { id: PaymentMethodId.StripeUPEGooglePay },\n        { id: PaymentMethodId.WorldpayAccessGooglePay },\n        { id: PaymentMethodId.TdOnlineMartGooglePay },\n        { id: PaymentMethodId.StripeOCSGooglePay },\n    ],\n);\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from './components';\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n    const {\n        config: { cardCode, showCardHolderName },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId = '';\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: isCardHolderNameRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_name_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccName'),\n                                }\n                              : undefined,\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const hostedFieldset = (\n        <HostedCreditCardFieldset\n            additionalFields={\n                method.config.requireCustomerCode && (\n                    <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                )\n            }\n            cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n            cardExpiryId={getHostedFieldId('ccExpiry')}\n            cardNameId={isCardHolderNameRequired ? getHostedFieldId('ccName') : undefined}\n            cardNumberId={getHostedFieldId('ccNumber')}\n            focusedFieldType={focusedFieldType}\n        />\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: {\n                        form: await getHostedFormOptions(selectedInstrument),\n                        bigpayToken: selectedInstrument?.bigpayToken,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const props = {\n        checkoutService,\n        checkoutState,\n        paymentForm,\n        language,\n        method,\n        onUnhandledError,\n    };\n\n    return (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedCreditCardPaymentMethod,\n    [\n        {\n            id: 'hosted-credit-card',\n        },\n        { id: 'credit_card', gateway: 'bluesnapdirect' },\n        { id: 'tdonlinemart' },\n    ],\n);\n","import { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaPayment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarna: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaPaymentMethod,\n    [{ id: 'klarna' }],\n);\n","import { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaV2Payment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarnav2: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaV2PaymentMethod,\n    [{ gateway: 'klarna' }],\n);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FieldProps, useField } from 'formik';\nimport React, { FunctionComponent, SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface MollieCustomCardFormProps {\n    method: PaymentMethod;\n}\n\nexport interface Issuer {\n    name: string;\n    image: {\n        size1x: string;\n    };\n    id: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface SelecteIssuerProp {\n    selectedIssuer: Issuer;\n}\n\ninterface OptionButtonProps {\n    issuer: Issuer;\n    className?: string;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\nconst MollieAPMCustomForm: FunctionComponent<MollieCustomCardFormProps & WithLanguageProps> = ({\n    method,\n    language,\n}) => {\n    const issuers: Issuer[] = method.initializationData?.paymentMethodsResponse;\n\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer>({\n        name: language.translate('payment.select_your_bank'),\n        id: '',\n        image: { size1x: '' },\n    });\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={selectedIssuer} />,\n        [selectedIssuer],\n    );\n\n    if (!issuers || issuers.length === 0) {\n        return <></>;\n    }\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        const _selectedIssuer = issuers.find(({ id }) => id === currentTarget.dataset.id);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n    };\n\n    const issuersList = (\n        <ul\n            className=\"dropdown-menu instrumentSelect-dropdownMenu mollie-instrument-card\"\n            id=\"issuersDropdown\"\n        >\n            {issuers.map((issuer) => (\n                <li className=\"dropdown-menu-item dropdown-menu-item--select\" key={issuer.id}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <IssuerSelectButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"issuer\" />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    selectedIssuer,\n}) => {\n    const [field, _, helpers] = useField(restField.name);\n    const Input = useCallback(() => <input {...field} type=\"hidden\" />, [field]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void helpers.setValue(selectedIssuer?.id);\n    }, [value, selectedIssuer, helpers]);\n\n    return <Input />;\n};\n\nexport const IssuerSelectButton: FunctionComponent<SelecteIssuerProp> = ({ selectedIssuer }) => (\n    <a\n        className=\"instrumentSelect instrumentSelect-card button dropdown-button dropdown-toogle--select\"\n        href=\"#\"\n        id=\"issuerToggle\"\n        onClick={preventDefault()}\n    >\n        {selectedIssuer.name}\n    </a>\n);\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...props }) => {\n    const { name, image, id } = issuer;\n\n    return (\n        <a className=\"instrumentSelect-details mollie-instrument-list\" {...props} data-id={id}>\n            <label className=\"mollie-instrument-left\">{name}</label>\n            <img alt={name} data-test=\"cart-item-image\" src={image.size1x} />\n        </a>\n    );\n};\n\nexport default withLanguage(MollieAPMCustomForm);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport MollieAPMCustomForm from './MollieAPMCustomForm';\n\nexport interface MollieCustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n        cardHolderElementOptions: {\n            containerId: string;\n        };\n    };\n    isCreditCard: boolean;\n    method: PaymentMethod;\n}\n\nconst MollieCustomCardForm: React.FunctionComponent<MollieCustomCardFormProps> = ({\n    options,\n    isCreditCard,\n    method,\n}) =>\n    !isCreditCard ? (\n        <MollieAPMCustomForm method={method} />\n    ) : (\n        <div className=\"form-ccFields\">\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardNumberElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_number_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input', 'has-icon')}\n                    data-cse=\"CardNumber\"\n                    id={options.cardNumberElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardHolderElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_name_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"CardHolder\"\n                    id={options.cardHolderElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside', 'mollie-paddingRight')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardCvcElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                    <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                        <span className=\"has-tip\">\n                            <IconHelp />\n                        </span>\n                    </TooltipTrigger>\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"SecurityCode\"\n                    id={options.cardCvcElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardExpiryElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"ExpiryDate\"\n                    id={options.cardExpiryElementOptions.containerId}\n                />\n            </div>\n        </div>\n    );\n\nexport default MollieCustomCardForm;\n","import {\n    CardInstrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn, some } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useContext, useState } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport MollieCustomCardForm from './MollieCustomCardForm';\n\nexport enum MolliePaymentMethodType {\n    creditcard = 'credit_card',\n}\n\nconst MolliePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutState,\n    checkoutService,\n    language,\n    paymentForm,\n    ...props\n}) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const localeContext = useContext(LocaleContext);\n    const containerId = `mollie-${method.method}`;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const {\n        setFieldTouched,\n        setFieldValue,\n        setSubmitted,\n        submitForm,\n        setSubmit,\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n    const initializeMolliePayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const mollieElements = getMolliesElementOptions();\n\n            return checkoutService.initializePayment({\n                ...options,\n                mollie: {\n                    containerId,\n                    cardNumberId: mollieElements.cardNumberElementOptions.containerId,\n                    cardCvcId: mollieElements.cardCvcElementOptions.containerId,\n                    cardHolderId: mollieElements.cardHolderElementOptions.containerId,\n                    cardExpiryId: mollieElements.cardExpiryElementOptions.containerId,\n                    styles: {\n                        base: {\n                            color: '#333333',\n                            '::placeholder': {\n                                color: '#999999',\n                            },\n                        },\n                        valid: {\n                            color: '#090',\n                        },\n                        invalid: {\n                            color: '#D14343',\n                        },\n                    },\n                    unsupportedMethodMessage: localeContext?.language.translate(\n                        'payment.mollie_unsupported_method_error',\n                    ),\n                    disableButton: (disabled: boolean) => {\n                        if (paymentContext) {\n                            disableSubmit(method, disabled);\n                        }\n                    },\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            disableSubmit,\n            localeContext?.language,\n            getHostedFormOptions,\n            paymentContext,\n            method,\n        ],\n    );\n\n    const getMolliesElementOptions = () => {\n        return {\n            cardNumberElementOptions: {\n                containerId: 'mollie-card-number-component-field',\n            },\n            cardExpiryElementOptions: {\n                containerId: 'mollie-card-expiry-component-field',\n            },\n            cardCvcElementOptions: {\n                containerId: 'mollie-card-cvc-component-field',\n            },\n            cardHolderElementOptions: {\n                containerId: 'mollie-card-holder-component-field',\n            },\n        };\n    };\n\n    function renderCustomPaymentForm() {\n        const options = getMolliesElementOptions();\n\n        return (\n            <MollieCustomCardForm isCreditCard={isCreditCard()} method={method} options={options} />\n        );\n    }\n\n    function isCreditCard(): boolean {\n        return method.method === MolliePaymentMethodType.creditcard;\n    }\n\n    function validateInstrument(_shouldShowNumber: boolean, selectedInstrument: CardInstrument) {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    }\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...props}\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hideContentWhenSignedOut\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMolliePayment}\n            instruments={instruments}\n            isAccountInstrument={!isCreditCard()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument={true}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n            validateInstrument={validateInstrument}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MolliePaymentMethod,\n    [{ gateway: 'mollie' }, { gateway: 'mollie', id: 'applepay' }],\n);\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    LanguageService,\n    LegacyHostedFormOptions,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n","import { CardInstrument, PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst MonerisPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const containerId = `moneris-iframe-container`;\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const initializeMonerisPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const paymentConfig = {\n                ...options,\n                moneris: {\n                    containerId,\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            };\n\n            return checkoutService.initializePayment(paymentConfig);\n        },\n        [containerId, getHostedFormOptions, checkoutService],\n    );\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMonerisPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n            validateInstrument={validateInstrument}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MonerisPaymentMethod,\n    [{ id: 'moneris' }],\n);\n","import { FunctionComponent, useEffect } from 'react';\n\nimport {\n    PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst OfflinePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    return null;\n};\n\nexport default toResolvableComponent(OfflinePaymentMethod, [\n    {\n        type: 'PAYMENT_TYPE_OFFLINE',\n    },\n]);\n","import {\n    AccountInstrument,\n    HostedInstrument,\n    PayPalCommerceAlternativeMethodsPaymentOptions,\n    PayPalCommerceCreditPaymentInitializeOptions,\n    PayPalCommercePaymentInitializeOptions,\n    PayPalCommerceVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype PayPalCommerceProvidersPaymentInitializeOptions =\n    PayPalCommerceAlternativeMethodsPaymentOptions &\n        PayPalCommerceCreditPaymentInitializeOptions &\n        PayPalCommercePaymentInitializeOptions &\n        PayPalCommerceVenmoPaymentInitializeOptions;\n\ninterface PayPalCommercePaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<PayPalCommerceProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst PayPalCommercePaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & PayPalCommercePaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default PayPalCommercePaymentMethodComponent;\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const { id } = method;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"paypalcommercealternativemethods\"\n            {...props}\n        >\n            <div className={`widget widget--${id} payment-widget`} id={widgetContainerId} />\n        </PayPalCommercePaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceAPMsPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceCreditPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsKey=\"paypalcommercecredit\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditPaymentMethod,\n    [{ id: 'paypalcommercecredit' }],\n);\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst PayPalCommerceCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializePayPalCommerceCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    paypalcommercecreditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching PayPal Commerce Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditCardPaymentMethod,\n    [{ id: 'paypalcommercecreditcards' }],\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneCreditCardForm.scss';\n\ninterface PayPalCommerceFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst PayPalCommerceFastlaneCreditCardForm: FunctionComponent<\n    PayPalCommerceFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#paypal-commerce-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-cc-form-container\"\n            data-test=\"paypal-commerce-fastlane-cc-form-container\"\n            id=\"paypal-commerce-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default PayPalCommerceFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface PayPalCommerceFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst PayPalCommerceFastlaneInstrumentsForm: FunctionComponent<\n    PayPalCommerceFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-instrument\"\n            data-test=\"paypal-commerce-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"paypal-commerce-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"paypal-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"paypal-commerce-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"paypal-commerce-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"paypal-commerce-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { usePayPalCommerceFastlaneInstruments } from '../hooks/usePayPalCommerceFastlaneInstruments';\nimport { PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport PayPalCommerceFastlaneCreditCardForm from './PayPalCommerceFastlaneCreditCardForm';\nimport PayPalCommerceFastlaneInstrumentsForm from './PayPalCommerceFastlaneInstrumentsForm';\n\ninterface PayPalCommerceFastlaneFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst PayPalCommerceFastlaneForm: FunctionComponent<PayPalCommerceFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        usePayPalCommerceFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const usePayPalCommerceFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommerceFastlaneForm from './components/PayPalCommerceFastlaneForm';\n\nimport './PayPalCommerceFastlanePaymentMethod.scss';\nimport isErrorWithTranslationKey from './is-error-with-translation-key';\n\nexport interface PayPalFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst PayPalCommerceFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<PayPalFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                paypalcommercefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <PayPalCommerceFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceFastlanePaymentMethod,\n    [{ id: 'paypalcommerceacceleratedcheckout' }],\n);\n","import PayPalCommerceFastlanePaymentMethod from './PayPalCommerceFastlanePaymentMethod';\n\nexport default PayPalCommerceFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import { AccountInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst usePaypalCommerceInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default usePaypalCommerceInstrument;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nimport usePaypalCommerceInstrument from './hooks/usePaypalCommerceInstruments';\n\nconst PayPalCommercePaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = usePaypalCommerceInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <PayPalCommercePaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"paypalcommerce\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </PayPalCommercePaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommercePaymentMethod,\n    [{ id: 'paypalcommerce' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent providerOptionsKey=\"paypalcommercevenmo\" {...props} />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceVenmoPaymentMethod,\n    [{ id: 'paypalcommercevenmo' }],\n);\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, StringSchema } from 'yup';\n\nexport default memoize(function getPaypalCommerceRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    CountryData,\n    CustomError,\n    getCountryData,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    SpecificError,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getPaypalCommerceRatePayValidationSchema from './validation-schema/getPaypalCommerceRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst PaypalCommerceRatePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    const getCountryInfo = (): CountryData | undefined => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        if (billing && !billing.country) {\n            return getCountryData(billing.country)[0];\n        }\n    };\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                paypalcommerceratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => {\n                        // TODO: update PPCP Ratepay initialization data with getFieldsValues optional return data in checkout-sdk\n                        const defaultFieldValues = {\n                            ratepayBirthDate: {\n                                getDate: () => 0,\n                                getMonth: () => 0,\n                                getFullYear: () => 0,\n                            },\n                            ratepayPhoneCountryCode: '',\n                            ratepayPhoneNumber: '',\n                        };\n\n                        return {\n                            ...defaultFieldValues,\n                            ...fieldsValues.current,\n                        };\n                    },\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }): void => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    const validationSchema = useMemo(\n        () =>\n            getPaypalCommerceRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    useEffect(() => {\n        const countryInfo = getCountryInfo();\n\n        if (countryInfo) {\n            setFieldValue('ratepayPhoneCountryCode', countryInfo.dialCode);\n        }\n    }, []);\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const formContextProps = {\n        isSubmitted: isSubmitted(),\n        setSubmitted,\n    };\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={formContextProps}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalCommerceRatePayPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods', id: 'ratepay' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaypalExpressPaymentMethodProps {\n    isEmbedded?: boolean;\n}\n\nconst PaypalExpressPaymentMethod: FunctionComponent<\n    PaymentMethodProps & PaypalExpressPaymentMethodProps\n> = ({ checkoutService, isEmbedded = false, ...rest }) => {\n    const initializePaypalExpressPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                paypalexpress: {\n                    useRedirectFlow: isEmbedded,\n                },\n            }),\n        [checkoutService, isEmbedded],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePaypalExpressPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalExpressPaymentMethod,\n    [{ id: 'paypalexpress' }],\n);\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    CheckoutService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport {\n    CardInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface SquareV2FormProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    containerId: string;\n    deinitializePayment: () => Promise<void>;\n    initializePayment: () => Promise<void>;\n    method: PaymentMethod;\n}\n\nconst SquareV2Form: FunctionComponent<SquareV2FormProps> = ({\n    checkoutService,\n    checkoutState,\n    containerId,\n    deinitializePayment,\n    initializePayment,\n    method,\n}) => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n\n    const { getCustomer, getInstruments } = checkoutState.data;\n    const isSignedIn = getCustomer()?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n\n    useEffect(() => {\n        if (isInstrumentFeatureAvailable) {\n            void checkoutService.loadInstruments();\n        }\n    }, [checkoutService, isInstrumentFeatureAvailable]);\n\n    const instruments = useMemo(() => getInstruments(method) || [], [getInstruments, method]);\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n\n    const getDefaultInstrumentId = useCallback(() => {\n        if (isAddingNewCard) {\n            return;\n        }\n\n        if (instruments.length > 0) {\n            const defaultInstrument =\n                instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n            return defaultInstrument.bigpayToken;\n        }\n    }, [instruments, isAddingNewCard]);\n\n    useEffect(() => {\n        const defaultInstrumentId = getDefaultInstrumentId() || undefined;\n\n        setSelectedInstrumentId(defaultInstrumentId);\n    }, [getDefaultInstrumentId, instruments]);\n\n    const { setFieldValue } = usePaymentFormContext().paymentForm;\n\n    const handleSelectInstrument: (id: string) => void = (id) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    };\n\n    const handleDeleteInstrument: (id: string) => void = (id) => {\n        if (instruments.length === 0) {\n            setIsAddingNewCard(true);\n            setSelectedInstrumentId(undefined);\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            setSelectedInstrumentId(getDefaultInstrumentId());\n\n            setFieldValue('instrumentId', getDefaultInstrumentId());\n        }\n    };\n\n    const handleUseNewCard: () => void = () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        void deinitializePayment();\n\n        void initializePayment();\n    };\n\n    const renderPlaceholderFields = () => {\n        return (\n            <div data-test=\"squarev2_placeholder_form\" style={{ display: 'none' }}>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-label optimizedCheckout-form-label\"\n                        id=\"messageIsDefault\"\n                    />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsDefault\" />\n                </div>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-input optimizedCheckout-form-input form-input--focus optimizedCheckout-form-input--focus\"\n                        id=\"inputIsFocus\"\n                    />\n                </div>\n                <div className=\"form-field form-field--error\">\n                    <div className=\"form-inlineMessage\" id=\"messageIsError\" />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsError\" />\n                </div>\n            </div>\n        );\n    };\n\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    return (\n        <LoadingOverlay\n            data-test=\"squarev2_loading_overlay\"\n            hideContentWhenLoading\n            isLoading={isLoadingInstruments()}\n        >\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                        instruments={instruments as CardInstrument[]}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={selectedInstrumentId || getDefaultInstrumentId()}\n                    />\n                )}\n                <div\n                    className={classNames('widget', `widget--${method.id}`, 'payment-widget')}\n                    data-test={containerId}\n                    style={{\n                        display: !shouldShowCreditCardFieldset ? 'none' : undefined,\n                    }}\n                    tabIndex={-1}\n                >\n                    {renderPlaceholderFields()}\n                    <div id={containerId} />\n                </div>\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={selectedInstrumentId}\n                        instruments={instruments}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default SquareV2Form;\n","import { difference } from 'lodash';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport SquareV2Form from './SquareV2Form';\n\nconst SquareV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n}) => {\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const container = document.querySelector<HTMLDivElement>(`#${id}`);\n\n        if (!container) {\n            throw new Error(\n                `Unable to retrieve input styles as the provided container ID \"${id}\" is not valid.`,\n            );\n        }\n\n        return getAppliedStyles(container, properties);\n    };\n\n    const copyStylesFromDummyFormFields = useCallback(() => {\n        const styleProps = [\n            'backgroundColor',\n            'borderColor',\n            'borderRadius',\n            'borderWidth',\n            'color',\n            'fontSize',\n            'fontWeight',\n        ];\n\n        return {\n            default: {\n                message: getStylesFromElement('messageIsDefault', ['color']),\n                input: getStylesFromElement('inputIsDefault', styleProps),\n            },\n            focus: {\n                input: getStylesFromElement(\n                    'inputIsFocus',\n                    difference(styleProps, ['borderRadius']),\n                ),\n            },\n            error: {\n                message: getStylesFromElement('messageIsError', ['color']),\n                input: getStylesFromElement('inputIsError', [\n                    'borderColor',\n                    'borderWidth',\n                    'color',\n                ]),\n            },\n        };\n    }, []);\n\n    const mapToSquareStyles = useCallback(\n        (styles: ReturnType<typeof copyStylesFromDummyFormFields>) => {\n            const { borderColor, borderRadius, borderWidth, ...input } = styles.default.input;\n            const {\n                borderColor: borderColorIsFocus,\n                borderWidth: borderWidthIsFocus,\n                ...inputIsFocus\n            } = styles.focus.input;\n            const {\n                borderColor: borderColorIsError,\n                borderWidth: borderWidthIsError,\n                color: colorIsError,\n            } = styles.error.input;\n\n            return {\n                input,\n                'input.is-focus': {\n                    ...inputIsFocus,\n                },\n                'input.is-error': {\n                    color: colorIsError,\n                },\n                '.input-container': {\n                    borderColor,\n                    borderRadius,\n                    borderWidth,\n                },\n                '.input-container.is-focus': {\n                    borderColor: borderColorIsFocus,\n                    borderWidth: borderWidthIsFocus,\n                },\n                '.input-container.is-error': {\n                    borderColor: borderColorIsError,\n                    borderWidth: borderWidthIsError,\n                },\n                '.message-text': {\n                    color: styles.default.message.color,\n                },\n                '.message-icon': {\n                    color: styles.default.message.color,\n                },\n                '.message-text.is-error': {\n                    color: styles.error.message.color,\n                },\n                '.message-icon.is-error': {\n                    color: styles.error.message.color,\n                },\n            };\n        },\n        [],\n    );\n\n    const containerId = 'squarev2_payment_element_container';\n\n    const initializePayment = useCallback(async () => {\n        let style;\n\n        try {\n            style = mapToSquareStyles(copyStylesFromDummyFormFields());\n        } catch {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        await checkoutService.initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n            squarev2: {\n                containerId,\n                style,\n            },\n        });\n    }, [\n        checkoutService,\n        copyStylesFromDummyFormFields,\n        mapToSquareStyles,\n        method.gateway,\n        method.id,\n    ]);\n\n    const deinitializePayment = useCallback(async () => {\n        await checkoutService.deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [checkoutService, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, [deinitializePayment, initializePayment]);\n\n    return (\n        <SquareV2Form\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            containerId={containerId}\n            deinitializePayment={deinitializePayment}\n            initializePayment={initializePayment}\n            method={method}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    SquareV2PaymentMethod,\n    [{ id: 'squarev2' }],\n);\n","import { StripeAppearanceOptions, StripeCustomFont } from '@bigcommerce/checkout-sdk';\nimport { isEmpty } from 'lodash';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\n\nconst getStylesFromElement = (\n    selector: string,\n    properties: string[],\n    pseudoElementSelector?: string,\n) => {\n    const element = document.querySelector<HTMLElement>(selector);\n\n    return element ? getAppliedStyles(element, properties, pseudoElementSelector) : {};\n};\n\nconst parseRadioIconSize = (size: string | number = 0): number =>\n    typeof size !== 'number' ? parseInt(size, 10) : size;\n\nconst getRadioIconSizes = (sizes?: Record<string, string | number | undefined>) => {\n    const {\n        radioIconOuterWidth = 26,\n        radioIconOuterStrokeWidth = 1,\n        radioIconInnerWidth = 17,\n    } = sizes || {};\n    const stripeSVGSizeCoefficient = 0.88; // Provided by Stripe team for scaling SVGs.\n\n    const percentageCoefficient = stripeSVGSizeCoefficient * 100;\n    const outerWidth = parseRadioIconSize(radioIconOuterWidth);\n    const outerStrokeWidth = parseRadioIconSize(radioIconOuterStrokeWidth);\n    const innerWidth = parseRadioIconSize(radioIconInnerWidth);\n\n    const stripeEqualOuterWidth = (outerWidth / stripeSVGSizeCoefficient).toFixed(2);\n    const stripeEqualOuterStrokeWidth = (\n        (outerStrokeWidth / outerWidth) *\n        percentageCoefficient\n    ).toFixed(2);\n    const stripeEqualInnerRadius = (\n        ((innerWidth / outerWidth) * percentageCoefficient) /\n        2\n    ).toFixed(2);\n\n    return {\n        outerWidth: `${stripeEqualOuterWidth}px`,\n        outerStrokeWidth: `${stripeEqualOuterStrokeWidth}px`,\n        innerRadius: stripeEqualInnerRadius,\n    };\n};\n\nexport const getFonts = (selector = 'link[href*=\"font\"]'): StripeCustomFont[] => {\n    const elementsList: NodeListOf<Element> = document.querySelectorAll(selector);\n    const fonts: StripeCustomFont[] = [];\n\n    elementsList.forEach((element: Element | null) => {\n        const fontSrc = element?.getAttribute('href');\n\n        if (fontSrc) {\n            fonts.push({ cssSrc: fontSrc });\n        }\n    });\n\n    return fonts;\n};\n\nexport const getAppearanceForOCSElement = (containerId: string): StripeAppearanceOptions => {\n    const defaultAccordionPaddingHorizontal = '18px';\n    const defaultAccordionPaddingVertical = '13px';\n    const defaultRadioIconInnerScale = 0.66;\n\n    const formInputStyles = getStylesFromElement(`#${containerId}--input`, [\n        'color',\n        'background-color',\n        'border-color',\n        'box-shadow',\n        'font-family',\n    ]);\n    const formLabelStyles = getStylesFromElement(`#${containerId}--label`, ['color']);\n    const formErrorStyles = getStylesFromElement(`#${containerId}--error`, ['color']);\n    const accordionHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        [\n            'color',\n            'font-size',\n            'font-family',\n            'font-weight',\n            'padding-top',\n            'padding-right',\n            'padding-bottom',\n        ],\n    );\n    const accordionSelectedHeaderStyles = getStylesFromElement(\n        `#${containerId}--accordion-header-selected`,\n        ['background-color'],\n    );\n    const formChecklistStyles = getStylesFromElement(\n        `#${containerId}--accordion-header.optimizedCheckout-form-checklist-item`,\n        ['border-bottom', 'border-color'],\n    );\n    const {\n        color: accordionHeaderColor,\n        'font-size': accordionItemTitleFontSize,\n        'font-family': accordionHeaderFontFamily,\n        'font-weight': accordionItemTitleFontWeight,\n        'padding-top': accordionPaddingTop = defaultAccordionPaddingVertical,\n        'padding-right': accordionPaddingRight = defaultAccordionPaddingHorizontal,\n        'padding-bottom': accordionPaddingBottom = defaultAccordionPaddingVertical,\n    } = accordionHeaderStyles;\n    const accordionHeaderPadding = !isEmpty(accordionHeaderStyles)\n        ? `${accordionPaddingTop} ${accordionPaddingRight} ${accordionPaddingBottom} ${defaultAccordionPaddingHorizontal}`\n        : undefined;\n    const radioOuter = getStylesFromElement(\n        `#${containerId}--accordion-header .form-label`,\n        ['border-color', 'border-width', 'width'],\n        '::before',\n    );\n    const radioOuterChecked = getStylesFromElement(\n        `#${containerId}--accordion-header-selected .form-label`,\n        ['border-color'],\n        '::before',\n    );\n    const radioIconSize = getRadioIconSizes({\n        radioIconOuterWidth: radioOuter.width,\n        radioIconOuterStrokeWidth: radioOuter['border-width'],\n        radioIconInnerWidth:\n            radioOuter.width && parseRadioIconSize(radioOuter.width) * defaultRadioIconInnerScale,\n    });\n    const radioIconColor = radioOuter['border-color'];\n    const radioIconFocusColor = radioOuterChecked['border-color'];\n\n    return {\n        variables: {\n            colorPrimary: formInputStyles['box-shadow'],\n            colorBackground: formInputStyles['background-color'],\n            colorText: formLabelStyles.color,\n            colorDanger: formErrorStyles.color,\n            colorTextSecondary: formLabelStyles.color,\n            colorTextPlaceholder: formInputStyles.color,\n            colorIcon: formInputStyles.color,\n            fontFamily: accordionHeaderFontFamily || formInputStyles['font-family'],\n        },\n        rules: {\n            '.Input': {\n                borderColor: formInputStyles['border-color'],\n                color: formInputStyles.color,\n                boxShadow: formInputStyles['box-shadow'],\n            },\n            '.AccordionItem': {\n                borderRadius: 0,\n                borderWidth: 0,\n                borderBottom: formChecklistStyles['border-bottom'],\n                borderColor: formChecklistStyles['border-color'],\n                boxShadow: 'none',\n                fontSize: accordionItemTitleFontSize,\n                fontWeight: accordionItemTitleFontWeight,\n                color: accordionHeaderColor,\n                padding: accordionHeaderPadding,\n            },\n            '.AccordionItem:hover': {\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n                color: accordionHeaderColor,\n            },\n            '.AccordionItem--selected': {\n                fontWeight: 'bold',\n                color: accordionHeaderColor,\n                backgroundColor: accordionSelectedHeaderStyles['background-color'],\n            },\n            '.TabLabel': {\n                color: accordionHeaderColor,\n            },\n            '.RadioIcon': {\n                width: radioIconSize.outerWidth,\n            },\n            '.RadioIconInner': {\n                r: radioIconSize.innerRadius,\n                fill: radioIconFocusColor,\n            },\n            '.RadioIconOuter': {\n                strokeWidth: radioIconSize.outerStrokeWidth,\n                stroke: radioIconColor,\n            },\n            '.RadioIconOuter--checked': {\n                stroke: radioIconFocusColor,\n            },\n        },\n    };\n};\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, {\n    FunctionComponent,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { AccordionContext, ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { getAppearanceForOCSElement, getFonts } from './getStripeOCSStyles';\n\nconst StripeOCSPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const collapseStripeElement = useRef<() => void>();\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const [isOCSLoading, setIsOCSLoading] = useState(false);\n    const methodSelector = `${method.gateway}-${method.id}`;\n    const containerId = `${methodSelector}-component-field`;\n    const paymentContext = paymentForm;\n\n    useEffect(() => {\n        if (selectedItemId?.includes(`${method.gateway}-`)) {\n            return;\n        }\n\n        collapseStripeElement.current?.();\n    }, [selectedItemId, method.gateway]);\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            setIsOCSLoading(true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeocs: {\n                    containerId,\n                    layout: {\n                        type: 'accordion',\n                        defaultCollapsed: selectedItemId !== methodSelector,\n                        radios: true,\n                        linkInAccordion: true,\n                        spacedAccordionItems: false,\n                        visibleAccordionItemsCount: 0,\n                    },\n                    appearance: getAppearanceForOCSElement(containerId),\n                    fonts: getFonts(),\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                    paymentMethodSelect: onToggle,\n                    handleClosePaymentMethod: (collapseElement: () => void) => {\n                        collapseStripeElement.current = collapseElement;\n                    },\n                    togglePreloader: setIsOCSLoading,\n                },\n            });\n        },\n        [\n            containerId,\n            selectedItemId,\n            methodSelector,\n            checkoutService,\n            onUnhandledError,\n            renderSubmitButton,\n            onToggle,\n            setIsOCSLoading,\n        ],\n    );\n\n    const renderCustomOCSSectionStyles = () => (\n        <style>\n            {`\n                .custom-checklist-item#radio-${methodSelector} {\n                    border-bottom: none;\n                }\n                .custom-checklist-item#radio-${methodSelector}:last-of-type {\n                    margin-bottom: -1px;\n                }\n            `}\n        </style>\n    );\n\n    const renderCheckoutElementsForStripeOCSStyling = () => (\n        <div style={{ display: 'none' }}>\n            <div\n                className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n                id={`${containerId}--accordion-header`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    id={`${containerId}-radio-input`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div\n                className=\"form-checklist-header--selected\"\n                id={`${containerId}--accordion-header-selected`}\n            >\n                <input\n                    className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n                    defaultChecked\n                    id={`${containerId}-radio-input-selected`}\n                    type=\"radio\"\n                />\n                <div className=\"form-label optimizedCheckout-form-label\" />\n            </div>\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        </div>\n    );\n\n    const renderPreloader = () => (\n        <div data-test=\"stripe-accordion-skeleton\" style={{ padding: '10px 18px' }}>\n            <ChecklistSkeleton />\n        </div>\n    );\n\n    return (\n        <>\n            {isOCSLoading ? renderPreloader() : renderCustomOCSSectionStyles()}\n\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={false}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutElementsForStripeOCSStyling()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeOCSPaymentMethod,\n    [{ gateway: 'stripeocs', id: 'optimized_checkout' }],\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst StripeUPEPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const containerId = `stripe-${method.id}-component-field`;\n    const paymentContext = paymentForm;\n\n    const renderSubmitButton = useCallback(() => {\n        paymentContext.hidePaymentSubmitButton(method, false);\n    }, [paymentContext, method]);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getPaymentProviderCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const isStripeLinkAuthenticated = paymentProviderCustomer?.stripeLinkAuthenticationState;\n    const isGuestCustomer = customer?.isGuest;\n    const shouldSavingCardsBeEnabled = useMemo((): boolean => {\n        if (!isGuestCustomer && isStripeLinkAuthenticated) {\n            return false;\n        }\n\n        return true;\n    }, [isGuestCustomer, isStripeLinkAuthenticated]);\n    const isInstrumentFeatureAvailable =\n        shouldSavingCardsBeEnabled && !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (!parentContainer) {\n            throw new Error(\n                'Unable to retrieve input styles as the provided container ID is not valid.',\n            );\n        }\n\n        return getAppliedStyles(parentContainer, properties);\n    };\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions) => {\n            const formInput = getStylesFromElement(`${containerId}--input`, [\n                'color',\n                'background-color',\n                'border-color',\n                'box-shadow',\n            ]);\n            const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n            const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n            paymentContext.hidePaymentSubmitButton(method, true);\n\n            return checkoutService.initializePayment({\n                ...options,\n                stripeupe: {\n                    containerId,\n                    style: {\n                        labelText: formLabel.color,\n                        fieldText: formInput.color,\n                        fieldPlaceholderText: formInput.color,\n                        fieldErrorText: formError.color,\n                        fieldBackground: formInput['background-color'],\n                        fieldInnerShadow: formInput['box-shadow'],\n                        fieldBorder: formInput['border-color'],\n                    },\n                    onError: onUnhandledError,\n                    render: renderSubmitButton,\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            onUnhandledError,\n            method,\n            paymentContext,\n            renderSubmitButton,\n        ],\n    );\n\n    const renderCheckoutThemeStylesForStripeUPE = () => {\n        return (\n            <div className=\"optimizedCheckout-form-input\" id={`${containerId}--input`}>\n                <div className=\"form-field--error\">\n                    <div className=\"optimizedCheckout-form-label\" id={`${containerId}--error`} />\n                </div>\n                <div className=\"optimizedCheckout-form-label\" id={`${containerId}--label`} />\n            </div>\n        );\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                signOut={checkoutService.signOutCustomer}\n            />\n            {renderCheckoutThemeStylesForStripeUPE()}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeUPEPaymentMethod,\n    [{ gateway: 'stripeupe' }, { gateway: 'stripeupe', id: 'klarna' }],\n);\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, IconLock, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nexport interface StripeV3CustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n    };\n}\n\nconst StripeV3CustomCardForm: React.FunctionComponent<StripeV3CustomCardFormProps> = ({\n    options,\n}) => (\n    <div className=\"form-ccFields\">\n        <div className={classNames('form-field', 'form-field--stripe-ccNumber')}>\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardNumberElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_number_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"CardNumber\"\n                id={options.cardNumberElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n        <div className=\"form-field form-field--ccExpiry\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardExpiryElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_expiration_label\" />\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"ExpiryDate\"\n                id={options.cardExpiryElementOptions.containerId}\n            />\n        </div>\n        <div className=\"form-field form-ccFields-field--ccCvv\">\n            <label\n                className=\"form-label optimizedCheckout-form-label\"\n                htmlFor={options.cardCvcElementOptions.containerId}\n            >\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </label>\n            <div\n                className={classNames(\n                    'form-input',\n                    'optimizedCheckout-form-input',\n                    'has-icon',\n                    'widget-input--stripev3',\n                )}\n                data-cse=\"SecurityCode\"\n                id={options.cardCvcElementOptions.containerId}\n            />\n            <IconLock />\n        </div>\n    </div>\n);\n\nexport default StripeV3CustomCardForm;\n","import {\n    CardInstrument,\n    CustomError,\n    PaymentInitializeOptions,\n    StripeElementOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { useHostedCreditCard } from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport StripeV3CustomCardForm from './StripeV3CustomCardForm';\n\nexport interface StripeOptions {\n    alipay?: StripeElementOptions;\n    card: StripeElementOptions;\n    cardCvc: StripeElementOptions;\n    cardExpiry: StripeElementOptions;\n    cardNumber: StripeElementOptions;\n    iban: StripeElementOptions;\n    idealBank: StripeElementOptions;\n}\n\nexport enum StripeElementType {\n    Alipay = 'alipay',\n    Card = 'card',\n    CardCvc = 'cardCvc',\n    CardExpiry = 'cardExpiry',\n    CardNumber = 'cardNumber',\n    Iban = 'iban',\n    IdealBank = 'idealBank',\n}\n\nconst StripeV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const { useIndividualCardFields } = method.initializationData;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const paymentMethodType = method.id as StripeElementType;\n    const additionalStripeV3Classes =\n        paymentMethodType !== StripeElementType.Alipay\n            ? 'optimizedCheckout-form-input widget--stripev3'\n            : '';\n    const containerId = `stripe-${paymentMethodType}-component-field`;\n    const stripeOptions: StripeOptions = useMemo(() => {\n        const classes = {\n            base: 'form-input optimizedCheckout-form-input',\n        };\n\n        return {\n            [StripeElementType.Card]: {\n                classes,\n            },\n            [StripeElementType.CardCvc]: {\n                classes,\n                placeholder: '',\n            },\n            [StripeElementType.CardExpiry]: {\n                classes,\n            },\n            [StripeElementType.CardNumber]: {\n                classes,\n                showIcon: true,\n                placeholder: '',\n            },\n            [StripeElementType.Iban]: {\n                classes,\n                supportedCountries: ['SEPA'],\n            },\n            [StripeElementType.IdealBank]: {\n                classes,\n            },\n        };\n    }, []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer, getConfig },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const storeUrl = useMemo(() => {\n        if (!config) {\n            return null;\n        }\n\n        return config.links.siteLink;\n    }, [config]);\n\n    const onUnhandledStripeV3Error = useCallback(\n        (error: CustomError) => {\n            if (error.type === 'stripev3_error' && error.subtype === 'auth_failure') {\n                error.message = language.translate('payment.stripev3_auth_3ds_fail');\n            }\n\n            onUnhandledError(error);\n        },\n        [language, onUnhandledError],\n    );\n\n    const getIndividualCardElementOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            return {\n                cardNumberElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardNumber],\n                    containerId: 'stripe-card-number-component-field',\n                },\n                cardExpiryElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardExpiry],\n                    containerId: 'stripe-expiry-component-field',\n                },\n                cardCvcElementOptions: {\n                    ...stripeInitializeOptions[StripeElementType.CardCvc],\n                    containerId: 'stripe-cvc-component-field',\n                },\n            };\n        },\n        [],\n    );\n\n    const getStripeOptions = useCallback(\n        (stripeInitializeOptions: StripeOptions) => {\n            if (useIndividualCardFields) {\n                return getIndividualCardElementOptions(stripeInitializeOptions);\n            }\n\n            return stripeInitializeOptions[paymentMethodType];\n        },\n        [paymentMethodType, getIndividualCardElementOptions, useIndividualCardFields],\n    );\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const initializeStripePayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                stripev3: {\n                    containerId,\n                    options: getStripeOptions(stripeOptions),\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [containerId, getStripeOptions, stripeOptions, checkoutService, getHostedFormOptions],\n    );\n\n    const renderCustomPaymentForm = () => {\n        const optionsCustomForm = getIndividualCardElementOptions(stripeOptions);\n\n        return <StripeV3CustomCardForm options={optionsCustomForm} />;\n    };\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                additionalContainerClassName={additionalStripeV3Classes}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializeStripePayment}\n                instruments={instruments}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(\n                    checkoutState,\n                )}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={some(checkout?.payments, { providerId: method.id })}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledStripeV3Error}\n                renderCustomPaymentForm={renderCustomPaymentForm}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldRenderCustomInstrument={useIndividualCardFields}\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            {method.id === 'iban' && (\n                <p className=\"stripe-sepa-mandate-disclaimer\">\n                    <TranslatedString\n                        data={{ storeUrl }}\n                        id=\"payment.stripe_sepa_mandate_disclaimer\"\n                    />\n                </p>\n            )}\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    StripeV3PaymentMethod,\n    [{ gateway: 'stripev3' }],\n);\n","import {\n    CardInstrument,\n    LegacyHostedFormOptions,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { CreditCardPaymentMethodComponent } from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\ninterface WorldpayPaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst WorldpayCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const [threeDSecureVerification, setThreeDSecureVerification] = useState<HTMLElement>();\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const { getHostedStoredCardValidationFieldset } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const ref = useRef<WorldpayPaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const cancelWorldpayModalFlow = useCallback(() => {\n        setThreeDSecureVerification(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n    const initializeWorldpayPayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                creditCard: {\n                    form: getHostedFormOptions && (await getHostedFormOptions(selectedInstrument)),\n                },\n                worldpay: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setThreeDSecureVerification(content);\n                        ref.current.cancelThreeDSecureVerification = cancel;\n                    },\n                },\n            });\n        },\n        [checkoutService, getHostedFormOptions],\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (threeDSecureVerification) {\n            ref.current.paymentPageContentRef.current?.appendChild(threeDSecureVerification);\n        }\n    }, [threeDSecureVerification]);\n\n    return (\n        <>\n            <CreditCardPaymentMethodComponent\n                {...rest}\n                cardFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                cardValidationSchema={hostedValidationSchema}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeWorldpayPayment}\n                language={language}\n                method={method}\n                paymentForm={paymentForm}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n            <Modal\n                isOpen={!!threeDSecureVerification}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelWorldpayModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div ref={ref.current.paymentPageContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    WorldpayCreditCardPaymentMethod,\n    [{ id: 'worldpayaccess' }],\n);\n","import { ComponentType } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { resolveComponent } from '../common/resolver';\nimport * as paymentMethods from '../generated/paymentIntegrations';\n\nexport default function resolvePaymentMethod(\n    query: PaymentMethodResolveId,\n): ComponentType<PaymentMethodProps> | undefined {\n    return resolveComponent<PaymentMethodResolveId, PaymentMethodProps>(query, paymentMethods);\n}\n","import { createInjectHoc } from '@bigcommerce/checkout/legacy-hoc';\n\nimport PaymentContext, { PaymentContextProps } from './PaymentContext';\n\nexport type WithPaymentProps = PaymentContextProps;\n\nconst withPayment = createInjectHoc(PaymentContext, { displayNamePrefix: 'WithPayment' });\n\nexport default withPayment;\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { FormFieldContainer, TextInput } from '../../ui/form';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardCustomerCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCustomerCodeField: FunctionComponent<CreditCardCustomerCodeFieldProps> = ({\n    name,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_customer_code_label\" />{' '}\n                <small className=\"optimizedCheckout-contentSecondary\">\n                    <TranslatedString id=\"common.optional_text\" />\n                </small>\n            </>\n        ),\n        [],\n    );\n\n    return <FormField input={renderInput} labelContent={labelContent} name={name} />;\n};\n\nexport default memo(CreditCardCustomerCodeField);\n","import { CheckoutSettings, Customer, PaymentMethod, PaymentMethodConfig, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    paymentMethod: PaymentMethod;\n    shouldSavingCardsBeEnabled?: boolean;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    paymentMethod,\n    shouldSavingCardsBeEnabled = true,\n}: IsInstrumentFeatureAvailableState): boolean {\n    const { checkoutSettings } = config;\n\n    if (\n        isVaultingNotEnabled(checkoutSettings, paymentMethod.config) ||\n        customer.isGuest ||\n        !shouldSavingCardsBeEnabled\n    ) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction isVaultingNotEnabled(checkoutSettings: CheckoutSettings, paymentMethodConfig: PaymentMethodConfig): boolean {\n    return !checkoutSettings.isCardVaultingEnabled || !paymentMethodConfig.isVaultingEnabled;\n}\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass InstrumentSelect extends PureComponent<InstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<InstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            field,\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate = false,\n        } = this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <InstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideExpiryDate}\n                        />\n                    }\n                >\n                    <InstrumentSelectButton\n                        instrument={selectedInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" {...field} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{ cardTitle: cardInfo.niceType, endingIn: instrument.last4 }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default InstrumentSelect;\n","import { AccountInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is AccountInstrument {\n    return instrument.type === 'account';\n}\n","import { AchInstrument, BankInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isBankAccountInstrument(\n    instrument: PaymentInstrument,\n): instrument is BankInstrument | AchInstrument {\n    return instrument.type === 'bank';\n}\n","import { CardInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isCardInstrument(\n    instrument: PaymentInstrument,\n): instrument is CardInstrument {\n    return instrument.type === 'card';\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconPaypal: FunctionComponent = () => (\n    <svg height=\"300\" viewBox=\"0 0 255 300\" width=\"255\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M228.03 77.2c3.6-23.02-.03-38.7-12.48-52.89C201.83 8.7 177.07 2 145.4 2H53.4c-6.47 0-11.99 4.7-12.99 11.11L2.1 256.03a7.9 7.9 0 0 0 7.8 9.14h56.78c79.33-53.38 148.45-81.4 161.35-187.97z\"\n            fill=\"#253B80\"\n        />\n        <path\n            d=\"M228.02 77.2C124 73 95 98 80.5 177.52l-13.82 87.65-3.91 24.85a6.9 6.9 0 0 0 6.82 7.98h47.86c5.67 0 10.48-4.12 11.37-9.71l.48-2.43 9-57.2.59-3.15c.88-5.6 5.7-9.73 11.37-9.73h7.16c46.38 0 82.68-18.83 93.29-73.33 4.43-22.76 2.14-41.77-9.6-55.14a45.77 45.77 0 0 0-13.1-10.1z\"\n            fill=\"#179BD7\"\n        />\n        <path\n            d=\"M215.33 72.14c-3.88-1.12-7.82-2-11.8-2.62a149.83 149.83 0 0 0-23.79-1.73h-72.1a11.49 11.49 0 0 0-11.36 9.73l-15.34 97.16-.44 2.84a13.1 13.1 0 0 1 12.95-11.1h27c53 0 94.5-21.53 106.62-83.82.37-1.85.67-3.64.95-5.4a64.66 64.66 0 0 0-9.98-4.2c-.9-.3-1.8-.59-2.71-.86z\"\n            fill=\"#222D65\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconPaypal);\n","import { AccountInstrument, BankInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface ManageAccountInstrumentsTableProps {\n    instruments: Array<AccountInstrument | BankInstrument>;\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsTable: FunctionComponent<ManageAccountInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: AccountInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-accountExternalId\">\n                {isBankAccountInstrument(instrument) ? (\n                    <span className=\"instrumentModal-instrumentAccountNumber\">\n                        <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        <span>{` ${instrument.accountNumber}`}</span>\n                    </span>\n                ) : (\n                    <>\n                        <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n                        <span className=\"instrumentModal-instrumentAccountExternalId\">\n                            {instrument.externalId}\n                        </span>\n                    </>\n                )}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageInstrumentsTable);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface ManageCardInstrumentsTableProps {\n    instruments: CardInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageCardInstrumentsTable: FunctionComponent<ManageCardInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p>\n                <TranslatedString id=\"payment.instrument_manage_modal_empty_text\" />\n            </p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={isDeletingInstrument}>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" />\n                        </th>\n                        <th>\n                            <TranslatedString id=\"payment.instrument_manage_table_header_expiry_date_text\" />\n                        </th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    {instruments.map((instrument) => (\n                        <ManageInstrumentsRow\n                            instrument={instrument}\n                            key={instrument.bigpayToken}\n                            onDeleteInstrument={onDeleteInstrument}\n                        />\n                    ))}\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: CardInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired =\n        !expirationDate({\n            month: instrument.expiryMonth,\n            year: instrument.expiryYear,\n        }).isValid;\n\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [instrument, onDeleteInstrument]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-cardType\">\n                <CreditCardIcon cardType={cardType} />\n\n                {cardInfo && (\n                    <span className=\"instrumentModal-instrumentCardType\">{cardInfo.niceType}</span>\n                )}\n            </td>\n            <td data-test=\"manage-instrument-last4\">{instrument.last4}</td>\n            <td\n                className={classNames({ 'instrumentModal-instrumentExpiry--expired': isExpired })}\n                data-test=\"manage-instrument-expiry\"\n            >\n                {`${instrument.expiryMonth}/${instrument.expiryYear}`}\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={handleDelete}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageCardInstrumentsTable);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Alert, AlertType } from '../../ui/alert';\n\nexport interface ManageInstrumentsAlertProps {\n    error: any; // TODO: Fix typing\n}\n\nconst ManageInstrumentsAlert: FunctionComponent<ManageInstrumentsAlertProps> = ({ error }) => {\n    const { status } = error;\n\n    if (status === 401) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_auth_error\" />\n            </Alert>\n        );\n    }\n\n    if (status >= 400 && status < 500) {\n        return (\n            <Alert type={AlertType.Error}>\n                <TranslatedString id=\"payment.instrument_manage_delete_client_error\" />\n            </Alert>\n        );\n    }\n\n    return (\n        <Alert type={AlertType.Error}>\n            <TranslatedString id=\"payment.instrument_manage_delete_server_error\" />\n        </Alert>\n    );\n};\n\nexport default memo(ManageInstrumentsAlert);\n","import { CheckoutSelectors, PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../../ui/button';\nimport { Modal, ModalHeader } from '../../ui/modal';\n\nimport isAccountInstrument from './isAccountInstrument';\nimport isBankAccountInstrument from './isBankAccountInstrument';\nimport isCardInstrument from './isCardInstrument';\nimport ManageAccountInstrumentsTable from './ManageAccountInstrumentsTable';\nimport ManageCardInstrumentsTable from './ManageCardInstrumentsTable';\nimport ManageInstrumentsAlert from './ManageInstrumentsAlert';\n\nexport interface ManageInstrumentsModalProps {\n    isOpen: boolean;\n    instruments: PaymentInstrument[];\n    onAfterOpen?(): void;\n    onDeleteInstrument?(instrumentId: string): void;\n    onDeleteInstrumentError?(error: Error): void;\n    onRequestClose?(): void;\n}\n\nexport interface ManageInstrumentsModalState {\n    isConfirmingDelete: boolean;\n    selectedInstrumentId?: string;\n}\n\ninterface WithCheckoutProps {\n    deleteInstrumentError?: Error;\n    isDeletingInstrument: boolean;\n    isLoadingInstruments: boolean;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    deleteInstrument(id: string): Promise<CheckoutSelectors>;\n}\n\nclass ManageInstrumentsModal extends Component<\n    ManageInstrumentsModalProps & WithCheckoutProps,\n    ManageInstrumentsModalState\n> {\n    state: ManageInstrumentsModalState = {\n        isConfirmingDelete: false,\n    };\n\n    render(): ReactNode {\n        const { deleteInstrumentError, isOpen, onRequestClose } = this.props;\n\n        return (\n            <Modal\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                footer={this.renderFooter()}\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"payment.instrument_manage_modal_title_text\" />\n                    </ModalHeader>\n                }\n                isOpen={isOpen}\n                onAfterOpen={this.handleAfterOpen}\n                onRequestClose={onRequestClose}\n            >\n                {deleteInstrumentError && <ManageInstrumentsAlert error={deleteInstrumentError} />}\n\n                {this.renderContent()}\n            </Modal>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { instruments, isDeletingInstrument } = this.props;\n\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <p>\n                    <TranslatedString id=\"payment.instrument_manage_modal_confirmation_label\" />\n                </p>\n            );\n        }\n\n        const cardInstruments = instruments.filter(isCardInstrument);\n        const bankInstruments = instruments.filter(isBankAccountInstrument);\n        const accountInstruments = instruments.filter(isAccountInstrument);\n\n        const bankAndAccountInstruments = [...bankInstruments, ...accountInstruments];\n\n        if (bankAndAccountInstruments.length) {\n            return (\n                <ManageAccountInstrumentsTable\n                    instruments={bankAndAccountInstruments}\n                    isDeletingInstrument={isDeletingInstrument}\n                    onDeleteInstrument={this.handleDeleteInstrument}\n                />\n            );\n        }\n\n        return (\n            <ManageCardInstrumentsTable\n                instruments={cardInstruments}\n                isDeletingInstrument={isDeletingInstrument}\n                onDeleteInstrument={this.handleDeleteInstrument}\n            />\n        );\n    }\n\n    private renderFooter(): ReactNode {\n        const { isDeletingInstrument, isLoadingInstruments, onRequestClose } = this.props;\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <>\n                    <Button\n                        data-test=\"manage-instrument-cancel-button\"\n                        onClick={this.handleCancel}\n                        size={ButtonSize.Small}\n                    >\n                        <TranslatedString id=\"common.cancel_action\" />\n                    </Button>\n\n                    <Button\n                        data-test=\"manage-instrument-confirm-button\"\n                        disabled={isDeletingInstrument || isLoadingInstruments}\n                        onClick={this.handleConfirmDelete}\n                        size={ButtonSize.Small}\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"payment.instrument_manage_modal_confirmation_action\" />\n                    </Button>\n                </>\n            );\n        }\n\n        return (\n            <Button\n                data-test=\"manage-instrument-close-button\"\n                onClick={onRequestClose}\n                size={ButtonSize.Small}\n            >\n                <TranslatedString id=\"common.close_action\" />\n            </Button>\n        );\n    }\n\n    private handleAfterOpen: () => void = () => {\n        const { onAfterOpen } = this.props;\n\n        this.setState(\n            {\n                isConfirmingDelete: false,\n            },\n            onAfterOpen,\n        );\n    };\n\n    private handleCancel: () => void = () => {\n        const { clearError, deleteInstrumentError } = this.props;\n\n        if (deleteInstrumentError) {\n            clearError(deleteInstrumentError);\n        }\n\n        this.setState({\n            isConfirmingDelete: false,\n        });\n    };\n\n    private handleConfirmDelete: () => void = async () => {\n        const {\n            deleteInstrument,\n            onDeleteInstrument = noop,\n            onDeleteInstrumentError = noop,\n            onRequestClose = noop,\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (!selectedInstrumentId) {\n            return;\n        }\n\n        try {\n            await deleteInstrument(selectedInstrumentId);\n            onDeleteInstrument(selectedInstrumentId);\n            onRequestClose();\n        } catch (error) {\n            onDeleteInstrumentError(error);\n        }\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isConfirmingDelete: true,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport function mapFromCheckoutProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutProps | null {\n    const {\n        errors: { getDeleteInstrumentError },\n        statuses: { isDeletingInstrument, isLoadingInstruments },\n    } = checkoutState;\n\n    return {\n        clearError: checkoutService.clearError,\n        deleteInstrument: checkoutService.deleteInstrument,\n        deleteInstrumentError: getDeleteInstrumentError(),\n        isDeletingInstrument: isDeletingInstrument(),\n        isLoadingInstruments: isLoadingInstruments(),\n    };\n}\n\nexport default withCheckout(mapFromCheckoutProps)(ManageInstrumentsModal);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, ModalTriggerModalProps } from '../../ui/modal';\n\nimport InstrumentSelect from './InstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan'\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import { LineItemMap, PaymentInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport { UntrustedShippingCardVerificationType } from './CardInstrumentFieldset';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    if (PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider)) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!paymentMethod.config.isVaultingCvvEnabled;\n    }\n\n    // If the shipping address is untrusted, card verficiation mode has set with cvv, card code is required\n    if ('untrustedShippingCardVerificationMode' in instrument && instrument.untrustedShippingCardVerificationMode === UntrustedShippingCardVerificationType.CVV) {\n        return true;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(paymentMethod.config.isVaultingCvvEnabled || paymentMethod.config.cardCode);\n}\n","import { CheckoutSelectors, Instrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { CheckoutSelectors, Instrument } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { Instrument, LineItemMap } from '@bigcommerce/checkout-sdk';\n\nimport { UntrustedShippingCardVerificationType } from './CardInstrumentFieldset';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    if (lineItems.physicalItems.length === 0) {\n        return false;\n    }\n\n    if (instrument.trustedShippingAddress) {\n        return false;\n    }  \n    \n    return !(instrument.untrustedShippingCardVerificationMode === UntrustedShippingCardVerificationType.CVV);\n}\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object().required().shape<HostedCreditCardValidationSchemaShape[\"hostedForm\"]>({\n            errors: object().required().shape<HostedCreditCardValidationSchemaShape[\"hostedForm\"][\"errors\"]>({\n                cardCode: string()\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_invalid_error'),\n                        test: (value) => value !== 'invalid_card_code',\n                    }),\n\n                cardExpiry: string()\n                    .test({\n                        message: language.translate(\n                            'payment.credit_card_expiration_required_error',\n                        ),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_expiration_invalid_error'),\n                        test: (value) => value !== 'invalid_card_expiry',\n                    }),\n\n                cardName: string()\n                    .test({\n                        message: language.translate('payment.credit_card_name_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_name_invalid_error'),\n                        test: (value) => value !== 'invalid_card_name',\n                    }),\n\n                cardNumber: string()\n                    .test({\n                        message: language.translate('payment.credit_card_number_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_invalid_error'),\n                        test: (value) => value !== 'invalid_card_number',\n                    }),\n            }),\n        }),\n    });\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object().required().shape<HostedInstrumentValidationSchemaShape[\"hostedForm\"]>({\n            errors: object().required().shape<HostedInstrumentValidationSchemaShape[\"hostedForm\"][\"errors\"]>({\n                cardCodeVerification: string()\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_invalid_error'),\n                        test: (value) => value !== 'invalid_card_code',\n                    }),\n\n                cardNumberVerification: string()\n                    .test({\n                        message: language.translate('payment.credit_card_number_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_invalid_error'),\n                        test: (value) => value !== 'invalid_card_number',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_mismatch_error'),\n                        test: (value) => value !== 'mismatched_card_number',\n                    }),\n\n            ...(isCardExpiryRequired ? {\n                cardExpiryVerification: string()\n                    .test({\n                        message: language.translate(\n                            'payment.credit_card_expiration_required_error',\n                        ),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_expiration_invalid_error'),\n                        test: (value) => value !== 'invalid_card_expiry',\n                    }),\n            } : {})\n            }),\n        }),\n    });\n});\n","import classNames from 'classnames';\nimport React, { FunctionComponent, HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconLock: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconLock);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","\nimport { Placement } from '@popperjs/core';\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children: ReactNode;\n}\n\nexport interface TooltipTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\n    static defaultProps = {\n        placement: 'bottom',\n    };\n\n    state: Readonly<TooltipTriggerState> = {\n        shouldShow: false,\n    };\n\n    render() {\n        const { children, placement, tooltip } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <span\n                            onBlur={this.handleHide}\n                            onFocus={this.handleShow}\n                            onMouseEnter={this.handleShow}\n                            onMouseLeave={this.handleHide}\n                            ref={ref}\n                        >\n                            {children}\n                        </span>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={[\n                        { name: 'hide', enabled: false },\n                        { name: 'flip', enabled: false },\n                        { name: 'preventOverflow', enabled: false },\n                    ]}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        shouldShow && (\n                            <div ref={ref} style={style}>\n                                {tooltip}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: true });\n    };\n\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: false });\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeVisa: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV visa, mc, disc</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <path d=\"M0 5h88v12H0z\" fill=\"#838383\" />\n            <path d=\"M3 23h82v10H3z\" fill=\"#FFF\" />\n            <path\n                d=\"M69.81 29.053c.015.297.13.502.343.616.11.058.233.088.37.088.258 0 .477-.107.66-.32.18-.215.31-.65.384-1.306-.12.19-.267.322-.444.4-.176.076-.366.114-.57.114-.412 0-.74-.13-.98-.386-.24-.257-.36-.588-.36-.993 0-.388.12-.73.357-1.025.237-.295.587-.443 1.05-.443.623 0 1.054.28 1.29.842.133.31.2.696.2 1.16 0 .525-.08.99-.238 1.394-.26.674-.703 1.01-1.327 1.01-.42 0-.737-.11-.954-.328-.217-.22-.325-.494-.325-.825h.544zm1.4-1.09c.176-.14.265-.387.265-.737 0-.315-.08-.55-.238-.705-.16-.153-.36-.23-.606-.23-.262 0-.47.088-.625.264-.155.177-.232.412-.232.707 0 .28.068.502.203.667.136.164.352.246.65.246.213 0 .408-.07.584-.21zm3.414-.563c.133-.132.2-.29.2-.474 0-.16-.064-.306-.19-.44-.13-.133-.323-.2-.585-.2-.26 0-.447.067-.563.2-.115.134-.173.29-.173.47 0 .202.075.36.224.473.15.112.326.17.53.17.237 0 .422-.067.556-.2zm.097 2.118c.165-.135.247-.336.247-.603 0-.277-.084-.487-.254-.63-.17-.144-.386-.216-.652-.216-.256 0-.466.072-.628.22-.163.145-.244.348-.244.607 0 .223.074.416.223.58.15.16.38.243.69.243.25 0 .456-.068.62-.202zm-1.735-1.937c-.158-.158-.236-.365-.236-.62 0-.32.114-.594.345-.823.232-.23.56-.344.984-.344.41 0 .732.108.965.325.233.216.35.47.35.758 0 .267-.068.483-.203.65-.076.092-.194.184-.353.274.176.08.316.175.418.28.19.2.284.46.284.778 0 .377-.127.697-.38.96-.253.26-.61.392-1.074.392-.416 0-.77-.113-1.057-.34-.287-.226-.43-.554-.43-.985 0-.253.06-.472.184-.656.124-.186.307-.327.55-.424-.15-.064-.265-.14-.35-.225zm5.614-1.42c.188.248.282.503.282.766h-.532c-.032-.17-.083-.302-.153-.397-.13-.18-.326-.27-.59-.27-.3 0-.54.14-.717.417-.177.278-.276.676-.296 1.194.124-.18.28-.316.467-.405.172-.08.364-.12.575-.12.36 0 .672.115.94.344.266.228.4.57.4 1.025 0 .388-.127.733-.38 1.033-.253.3-.614.45-1.083.45-.4 0-.746-.152-1.037-.456-.29-.304-.437-.816-.437-1.536 0-.532.065-.983.194-1.354.25-.71.705-1.065 1.367-1.065.478 0 .81.124 1 .372zm-.404 3.274c.14-.19.21-.415.21-.674 0-.22-.062-.43-.188-.627-.126-.198-.354-.297-.685-.297-.23 0-.434.076-.608.23-.175.153-.262.385-.262.694 0 .27.08.498.238.683.16.184.38.277.66.277.283 0 .495-.096.636-.286z\"\n                fill=\"#636363\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"19\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeVisa);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeAmex: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV amex</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <text\n                fill=\"#979BA1\"\n                fontFamily=\"Avenir Next\"\n                fontSize=\"6\"\n                fontWeight=\"420\"\n                letterSpacing=\".2\"\n            >\n                <tspan x=\"11\" y=\"35\">\n                    3712 567890 374\n                </tspan>\n                <tspan x=\"70.21\" y=\"35\">\n                    5\n                </tspan>\n            </text>\n            <path\n                d=\"M69.182 26.767h-.55v-3.35l-.762.635-.324-.38 1.142-.926h.494v4.02zm4.19 0H70.75v-.528l1.6-1.59c.122-.126.226-.257.313-.393s.13-.29.13-.46c0-.106-.018-.202-.056-.287-.038-.085-.09-.158-.153-.22-.065-.06-.14-.106-.228-.138-.087-.032-.18-.048-.278-.048-.204 0-.373.065-.505.196-.133.13-.216.298-.25.503l-.54-.09c.023-.153.07-.294.145-.424.074-.132.168-.246.28-.342.115-.097.246-.17.396-.224.15-.053.31-.08.48-.08.166 0 .326.025.48.074.153.05.288.12.406.216.117.094.21.214.28.357.07.145.106.31.106.496 0 .128-.017.248-.05.357-.035.11-.082.214-.14.313-.06.098-.128.192-.208.28-.08.09-.162.178-.25.265l-1.306 1.273h1.97v.494zm1.625-2.328h.176c.114 0 .225-.012.333-.033.107-.02.203-.056.286-.107.084-.052.15-.12.202-.208.05-.087.077-.195.077-.323 0-.104-.018-.196-.056-.277-.038-.08-.09-.15-.156-.207-.067-.057-.142-.102-.227-.134-.085-.032-.175-.048-.27-.048-.17 0-.314.044-.434.13-.12.088-.21.21-.27.364l-.5-.176c.1-.242.257-.433.475-.57.22-.14.47-.208.753-.208.167 0 .325.024.475.07.15.048.28.117.394.208.114.09.204.205.27.34.066.137.1.294.1.472 0 .114-.018.22-.054.318-.036.1-.086.188-.148.267-.063.08-.137.147-.224.204-.087.057-.182.098-.284.125v.01c.117.023.226.063.326.12.1.056.187.127.26.212.07.086.127.183.17.293.04.11.06.23.06.358 0 .2-.036.377-.112.53-.076.154-.176.282-.3.384-.126.102-.27.18-.433.233-.163.053-.33.08-.5.08-.318 0-.598-.073-.84-.216-.242-.144-.418-.368-.528-.67l.51-.17c.06.173.165.315.31.425.146.11.325.164.537.164.102 0 .202-.016.298-.05.097-.03.183-.08.26-.143.074-.064.135-.143.18-.238.046-.095.07-.206.07-.335 0-.14-.032-.257-.092-.352-.06-.095-.14-.17-.236-.23-.097-.06-.205-.1-.327-.125-.12-.025-.24-.037-.357-.037h-.17v-.454zm4.73.953h.58v.47h-.58v.904h-.533v-.903h-1.85v-.5l1.708-2.618h.676v2.647zm-.533-2.016h-.01l-1.273 2.016h1.284v-2.016z\"\n                fill=\"#636363\"\n                opacity=\".9\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"16\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeAmex);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconCardCodeAmex, IconCardCodeVisa, IconSize } from '../../ui/icon';\n\nimport './CreditCardCodeTooltip.scss';\n\nconst CreditCardCodeTooltip: FunctionComponent = () => (\n    <div className=\"dropdown-menu dropdown-menu--content dropdown-menu--card-code\">\n        <div className=\"form-ccFields-cvvExample\">\n            <div className=\"form-ccFields-cvvExampleDescription\">\n                <p>\n                    <TranslatedString id=\"payment.credit_card_cvv_help_text\" />\n                </p>\n            </div>\n\n            <div className=\"form-ccFields-cvvExampleFigures\">\n                <figure>\n                    <IconCardCodeVisa size={IconSize.Large} />\n                </figure>\n\n                <figure>\n                    <IconCardCodeAmex size={IconSize.Large} />\n                </figure>\n            </div>\n        </div>\n    </div>\n);\n\nexport default CreditCardCodeTooltip;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\nimport { IconHelp, IconLock } from '../../ui/icon';\nimport { TooltipTrigger } from '../../ui/tooltip';\nimport { CreditCardCodeTooltip } from '../creditCard';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\nimport { IconLock } from '../../ui/icon';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport HostedCreditCardCodeField from './HostedCreditCardCodeField';\nimport HostedCreditCardExpiryField from './HostedCreditCardExpiryField';\nimport HostedCreditCardNameField from './HostedCreditCardNameField';\nimport HostedCreditCardNumberField from './HostedCreditCardNumberField';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {cardNameId && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport HostedCreditCardCodeField from './HostedCreditCardCodeField';\nimport HostedCreditCardExpiryField from \"./HostedCreditCardExpiryField\";\nimport HostedCreditCardNumberField from './HostedCreditCardNumberField';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n","import {\n    CardInstrument,\n    Instrument,\n    LegacyHostedFormOptions,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { ComponentType, FunctionComponent, ReactNode, useCallback, useState } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n} from '../creditCard';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\n\nimport getHostedCreditCardValidationSchema, {\n    HostedCreditCardValidationSchemaShape,\n} from './getHostedCreditCardValidationSchema';\nimport getHostedInstrumentValidationSchema, {\n    HostedInstrumentValidationSchemaShape,\n} from './getHostedInstrumentValidationSchema';\nimport HostedCreditCardFieldset from './HostedCreditCardFieldset';\nimport HostedCreditCardValidation from './HostedCreditCardValidation';\n\nexport interface WithHostedCreditCardFieldsetProps {\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n}\n\nexport interface WithInjectedHostedCreditCardFieldsetProps {\n    hostedFieldset: ReactNode;\n    hostedStoredCardValidationSchema: ObjectSchema<HostedInstrumentValidationSchemaShape>;\n    hostedValidationSchema: ObjectSchema<HostedCreditCardValidationSchemaShape>;\n    getHostedFormOptions(selectedInstrument?: CardInstrument): Promise<LegacyHostedFormOptions>;\n    getHostedStoredCardValidationFieldset(selectedInstrument?: CardInstrument): ReactNode;\n}\n\ninterface WithCheckoutContextProps {\n    isCardCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n}\n\nexport default function withHostedCreditCardFieldset<\n    TProps extends WithHostedCreditCardFieldsetProps,\n>(\n    OriginalComponent: ComponentType<TProps & Partial<WithInjectedHostedCreditCardFieldsetProps>>,\n): ComponentType<Omit<TProps, keyof WithInjectedHostedCreditCardFieldsetProps>> {\n    const Component: FunctionComponent<\n        WithHostedCreditCardFieldsetProps &\n            WithCheckoutContextProps &\n            WithLanguageProps &\n            WithFormProps &\n            ConnectFormikProps<PaymentFormValues>\n    > = ({\n        formik: { setFieldValue, setFieldTouched, submitForm },\n        isCardCodeRequired,\n        isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n        isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        isSubmitted,\n        language,\n        method,\n        setSubmitted,\n        ...rest\n    }) => {\n        const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n        const getHostedFieldId: (name: string) => string = useCallback(\n            (name) => {\n                return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n            },\n            [method],\n        );\n\n        const getHostedFormOptions: (\n            selectedInstrument?: CardInstrument,\n        ) => Promise<LegacyHostedFormOptions> = useCallback(\n            async (selectedInstrument) => {\n                const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n                const styleContainerId = selectedInstrument\n                    ? isInstrumentCardCodeRequired\n                        ? getHostedFieldId('ccCvv')\n                        : undefined\n                    : getHostedFieldId('ccNumber');\n\n                return {\n                    fields: selectedInstrument\n                        ? {\n                              cardCodeVerification:\n                                  isInstrumentCardCodeRequired && selectedInstrument\n                                      ? {\n                                            accessibilityLabel: language.translate(\n                                                'payment.credit_card_cvv_label',\n                                            ),\n                                            containerId: getHostedFieldId('ccCvv'),\n                                            instrumentId: selectedInstrument.bigpayToken,\n                                        }\n                                      : undefined,\n                              cardNumberVerification:\n                                  isInstrumentCardNumberRequired && selectedInstrument\n                                      ? {\n                                            accessibilityLabel: language.translate(\n                                                'payment.credit_card_number_label',\n                                            ),\n                                            containerId: getHostedFieldId('ccNumber'),\n                                            instrumentId: selectedInstrument.bigpayToken,\n                                        }\n                                      : undefined,\n                          }\n                        : {\n                              cardCode: isCardCodeRequired\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                    }\n                                  : undefined,\n                              cardExpiry: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_expiration_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccExpiry'),\n                                  placeholder: language.translate(\n                                      'payment.credit_card_expiration_placeholder_text',\n                                  ),\n                              },\n                              cardName: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_name_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccName'),\n                              },\n                              cardNumber: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_number_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccNumber'),\n                              },\n                          },\n                    styles: styleContainerId\n                        ? {\n                              default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                              error: await getCreditCardInputStyles(\n                                  styleContainerId,\n                                  styleProps,\n                                  CreditCardInputStylesType.Error,\n                              ),\n                              focus: await getCreditCardInputStyles(\n                                  styleContainerId,\n                                  styleProps,\n                                  CreditCardInputStylesType.Focus,\n                              ),\n                          }\n                        : {},\n                    onBlur: ({ fieldType }) => {\n                        if (focusedFieldType === fieldType) {\n                            setFocusedFieldType(undefined);\n                        }\n                    },\n                    onCardTypeChange: ({ cardType }) => {\n                        setFieldValue('hostedForm.cardType', cardType);\n                    },\n                    onEnter: () => {\n                        setSubmitted(true);\n                        submitForm();\n                    },\n                    onFocus: ({ fieldType }) => {\n                        setFocusedFieldType(fieldType);\n                    },\n                    onValidate: ({ errors = {} }) => {\n                        forIn(errors, (fieldErrors = [], fieldType) => {\n                            const errorKey = `hostedForm.errors.${fieldType}`;\n\n                            setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                            if (fieldErrors[0]) {\n                                setFieldTouched(errorKey);\n                            }\n                        });\n                    },\n                };\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isCardCodeRequired,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                language,\n                method,\n                setFieldValue,\n                setFieldTouched,\n                setFocusedFieldType,\n                setSubmitted,\n                submitForm,\n            ],\n        );\n\n        const getHostedStoredCardValidationFieldset: (\n            selectedInstrument: CardInstrument,\n        ) => ReactNode = useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n        if (!method.config.isHostedFormEnabled) {\n            return <OriginalComponent {...(rest as TProps)} method={method} />;\n        }\n\n        return (\n            <OriginalComponent\n                {...(rest as TProps)}\n                getHostedFormOptions={getHostedFormOptions}\n                getHostedStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                hostedFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                hostedStoredCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n                hostedValidationSchema={getHostedCreditCardValidationSchema({ language })}\n                method={method}\n            />\n        );\n    };\n\n    return connectFormik(\n        withForm(withLanguage(withCheckout(mapFromCheckoutProps)(Component))),\n    ) as ComponentType<Omit<TProps, keyof WithInjectedHostedCreditCardFieldsetProps>>;\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutContextProps,\n    WithHostedCreditCardFieldsetProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    return ({ checkoutState }, { method }) => {\n        const {\n            data: { getConfig, getCustomer },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer) {\n            return null;\n        }\n\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            paymentMethod: method,\n        });\n\n        return {\n            method,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        };\n    };\n};\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconHelp, IconLock } from '../../ui/icon';\nimport { TooltipTrigger } from '../../ui/tooltip';\n\nimport CreditCardCodeTooltip from './CreditCardCodeTooltip';\n\nexport interface CreditCardCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCodeField: FunctionComponent<CreditCardCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-csc\"\n                    id={field.name}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardCodeField);\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport React, { ChangeEvent, FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nimport formatCreditCardExpiryDate from './formatCreditCardExpiryDate';\n\nexport interface CreditCardExpiryFieldProps {\n    name: string;\n}\n\nconst CreditCardExpiryField: FunctionComponent<CreditCardExpiryFieldProps & WithLanguageProps> = ({\n    language,\n    name,\n}) => {\n    const handleChange = useCallback(\n        memoizeOne((field: FieldProps['field'], form: FieldProps['form']) => {\n            return (event: ChangeEvent<any>) => {\n                form.setFieldValue(field.name, formatCreditCardExpiryDate(event.target.value));\n            };\n        }),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps) => (\n            <TextInput\n                {...field}\n                autoComplete=\"cc-exp\"\n                id={field.name}\n                onChange={handleChange(field, form)}\n                placeholder={language.translate('payment.credit_card_expiration_placeholder_text')}\n                type=\"tel\"\n            />\n        ),\n        [handleChange, language],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_expiration_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(withLanguage(CreditCardExpiryField));\n","export default function formatCreditCardExpiryDate(value: string): string {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n    const trimmedMonth = month.slice(0, 2);\n    const trimmedYear =\n        year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n    // i.e.: '1'\n    if (value.length < 2) {\n        return month;\n    }\n\n    // ie.: '10 /' (without trailing space)\n    if (value.length > 3 && !trimmedYear) {\n        return trimmedMonth;\n    }\n\n    return `${trimmedMonth} / ${trimmedYear}`;\n}\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardNameFieldProps {\n    name: string;\n}\n\nconst CreditCardNameField: FunctionComponent<CreditCardNameFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"cc-name\" id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_name_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNameField);\n","import creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { max } from 'lodash';\nimport React, {\n    ChangeEventHandler,\n    FunctionComponent,\n    memo,\n    ReactElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconLock } from '../../ui/icon';\n\nimport formatCreditCardNumber from './formatCreditCardNumber';\n\nexport interface CreditCardNumberFieldProps {\n    name: string;\n}\n\nconst CreditCardNumberField: FunctionComponent<CreditCardNumberFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps<string>) => (\n            <CreditCardNumberInput field={field} form={form} />\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_number_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\ninterface CreditCardNumberInputProps {\n    field: FieldProps<string>['field'];\n    form: FieldProps<string>['form'];\n}\n\nconst CreditCardNumberInput: FunctionComponent<CreditCardNumberInputProps> = ({ field, form }): ReactElement => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const nextSelectionEndRef = useRef(0);\n\n    useEffect(() => {\n        if (inputRef.current && inputRef.current.selectionEnd !== nextSelectionEndRef.current) {\n            inputRef.current.setSelectionRange(nextSelectionEndRef.current, nextSelectionEndRef.current);\n        }\n    });\n\n    const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n        (event) => {\n            const separator = ' ';\n            const { value = '' } = event.target;\n            const { name, value: previousValue = '' } = field;\n            const selectionEnd = inputRef.current && inputRef.current.selectionEnd;\n\n            // Only allow digits and spaces\n            if (new RegExp(`[^\\\\d${separator}]`).test(value)) {\n                return form.setFieldValue(name, previousValue);\n            }\n\n            const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n\n            const formattedValue = formatCreditCardNumber(\n                value.replace(new RegExp(separator, 'g'), '').slice(0, maxLength),\n                separator,\n            );\n\n            if (selectionEnd === value.length && value.length < formattedValue.length) {\n                nextSelectionEndRef.current = formattedValue.length;\n            } else {\n                nextSelectionEndRef.current = selectionEnd || 0;\n            }\n\n            void form.setFieldValue(name, formattedValue);\n        },\n        [field, form],\n    );\n\n    return (\n        <>\n            <TextInput\n                {...field}\n                additionalClassName=\"has-icon\"\n                autoComplete=\"cc-number\"\n                id={field.name}\n                onChange={handleChange}\n                ref={inputRef}\n                type=\"tel\"\n            />\n\n            <IconLock />\n        </>\n    );\n};\n\nexport default memo(CreditCardNumberField);\n","import { number } from 'card-validator';\n\nimport unformatCreditCardNumber from './unformatCreditCardNumber';\n\nexport default function formatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    const unformattedValue = unformatCreditCardNumber(value, separator);\n\n    return card.gaps\n        .filter((gapIndex) => unformattedValue.length > gapIndex)\n        .reduce(\n            (output, gapIndex, index) =>\n                [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(separator),\n            unformattedValue,\n        );\n}\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport CreditCardCodeField from './CreditCardCodeField';\nimport CreditCardCustomerCodeField from './CreditCardCustomerCodeField';\nimport CreditCardExpiryField from './CreditCardExpiryField';\nimport CreditCardNameField from './CreditCardNameField';\nimport CreditCardNumberField from './CreditCardNumberField';\n\nexport interface CreditCardFieldsetProps {\n    shouldShowCardCodeField?: boolean;\n    shouldShowCustomerCodeField?: boolean;\n    shouldShowSaveCardField?: boolean;\n}\n\nconst CreditCardFieldset: FunctionComponent<CreditCardFieldsetProps> = ({\n    shouldShowCardCodeField,\n    shouldShowCustomerCodeField,\n}) => (\n    <Fieldset\n        additionalClassName=\"creditCardFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <CreditCardNumberField name=\"ccNumber\" />\n\n            <CreditCardExpiryField name=\"ccExpiry\" />\n\n            <CreditCardNameField name=\"ccName\" />\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n\n            {shouldShowCustomerCodeField && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />}\n        </div>\n    </Fieldset>\n);\n\nexport default memo(CreditCardFieldset);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, expirationDate, number } from 'card-validator';\nimport { object, ObjectSchema, string } from 'yup';\n\nimport { CreditCardFieldsetValues } from '../paymentMethod';\n\nexport interface CreditCardValidationSchemaOptions {\n    isCardCodeRequired: boolean;\n    language: LanguageService;\n}\n\nexport default memoize(function getCreditCardValidationSchema({\n    isCardCodeRequired,\n    language,\n}: CreditCardValidationSchemaOptions): ObjectSchema<CreditCardFieldsetValues> {\n    const schema = {\n        ccCustomerCode: string(),\n        ccCvv: string(),\n        ccExpiry: string()\n            .required(language.translate('payment.credit_card_expiration_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_expiration_invalid_error'),\n                test: (value) => expirationDate(value).isValid,\n            }),\n        ccName: string()\n            .max(200)\n            .required(language.translate('payment.credit_card_name_required_error')),\n        ccNumber: string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value) => number(value).isValid,\n            }),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value) {\n                    const { card } = number(this.parent.ccNumber);\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    return object(schema);\n});\n","import React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CreditCardCodeField, CreditCardNumberField } from '../creditCard';\n\ninterface CreditCardValidationProps {\n    shouldShowCardCodeField: boolean;\n    shouldShowNumberField: boolean;\n}\n\nconst CreditCardValidation: React.FunctionComponent<CreditCardValidationProps> = ({\n    shouldShowNumberField,\n    shouldShowCardCodeField,\n}) => (\n    <>\n        {shouldShowNumberField && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {shouldShowNumberField && <CreditCardNumberField name=\"ccNumber\" />}\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n        </div>\n    </>\n);\n\nexport default CreditCardValidation;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, number } from 'card-validator';\nimport creditCardType from 'credit-card-type';\nimport { object, ObjectSchema, string, StringSchema } from 'yup';\n\nimport CardInstrumentFieldsetValues from './CardInstrumentFieldsetValues';\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface InstrumentValidationSchemaOptions {\n    instrumentBrand: string;\n    instrumentLast4: string;\n    isCardCodeRequired: boolean;\n    isCardNumberRequired: boolean;\n    language: LanguageService;\n}\n\ninterface InstrumentValidationSchema {\n    ccCvv?: StringSchema;\n    ccNumber?: StringSchema;\n    instrumentId: StringSchema;\n}\n\nexport default memoize(function getInstrumentValidationSchema({\n    instrumentBrand,\n    instrumentLast4,\n    isCardCodeRequired,\n    isCardNumberRequired,\n    language,\n}: InstrumentValidationSchemaOptions): ObjectSchema<CardInstrumentFieldsetValues> {\n    const schema: InstrumentValidationSchema = {\n        instrumentId: string().required(),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value = '') {\n                    const cardType = mapFromInstrumentCardType(instrumentBrand);\n                    const cardInfo = creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined)\n                        .isValid;\n                },\n            });\n    }\n\n    if (isCardNumberRequired) {\n        schema.ccNumber = string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: language.translate('payment.credit_card_number_mismatch_error'),\n                test: (value = '') => value.slice(-instrumentLast4.length) === instrumentLast4,\n            });\n    }\n\n    return object(schema);\n});\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../../ui/form';\n\ninterface InstrumentStorageFieldProps {\n    isAccountInstrument: boolean;\n}\n\nconst InstrumentStorageField: FunctionComponent<InstrumentStorageFieldProps> = ({\n    isAccountInstrument,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_payment_method_label'\n        : 'payment.instrument_save_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--saveInstrument\"\n            labelContent={labelContent}\n            name=\"shouldSaveInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStorageField);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../../ui/form';\n\ninterface InstrumentStoreAsDefaultFieldProps {\n    isAccountInstrument: boolean;\n    disabled?: boolean;\n}\n\nconst InstrumentStoreAsDefaultField: FunctionComponent<InstrumentStoreAsDefaultFieldProps> = ({\n    isAccountInstrument,\n    disabled = false,\n}) => {\n    const translationId = isAccountInstrument\n        ? 'payment.account_instrument_save_as_default_payment_method_label'\n        : 'payment.instrument_save_as_default_payment_method_label';\n\n    const labelContent = useMemo(() => <TranslatedString id={translationId} />, [translationId]);\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-field--setAsDefaultInstrument\"\n            disabled={disabled}\n            labelContent={labelContent}\n            name=\"shouldSetAsDefaultInstrument\"\n        />\n    );\n};\n\nexport default memo(InstrumentStoreAsDefaultField);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport InstrumentStorageField from './InstrumentStorageField';\nimport InstrumentStoreAsDefaultField from './InstrumentStoreAsDefaultField';\n\ninterface StoreInstrumentFieldsetProps {\n    isAccountInstrument?: boolean;\n    instrumentId?: string;\n}\n\ninterface WithStorageSettings {\n    showSave: boolean;\n    showSetAsDefault: boolean;\n    setAsDefaultEnabled: boolean;\n}\n\ntype WithFormValues = ConnectFormikProps<{ shouldSaveInstrument: boolean }>;\n\nconst StoreInstrumentFieldset: FunctionComponent<\n    StoreInstrumentFieldsetProps & WithStorageSettings\n> = ({ showSave, showSetAsDefault, isAccountInstrument = false, setAsDefaultEnabled }) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.instrument_storage_options_text\" />\n            </Legend>\n        }\n    >\n        {showSave && <InstrumentStorageField isAccountInstrument={isAccountInstrument} />}\n\n        {showSetAsDefault && (\n            <InstrumentStoreAsDefaultField\n                disabled={!setAsDefaultEnabled}\n                isAccountInstrument={isAccountInstrument}\n            />\n        )}\n    </Fieldset>\n);\n\nconst mapToProps = (\n    context: CheckoutContextProps,\n    props: StoreInstrumentFieldsetProps & WithFormValues,\n): WithStorageSettings | null => {\n    const {\n        checkoutState: {\n            data: { getInstruments },\n        },\n    } = context;\n\n    const allInstruments = getInstruments();\n\n    const {\n        formik: {\n            values: { shouldSaveInstrument: saveIsChecked },\n        },\n        instrumentId,\n    } = props;\n\n    const addingNewInstrument = !instrumentId;\n    const hasAnyOtherInstruments = !!allInstruments && allInstruments.length > 0;\n    const instrument =\n        allInstruments && allInstruments.find(({ bigpayToken }) => bigpayToken === instrumentId);\n\n    return {\n        ...props,\n        showSave: addingNewInstrument,\n        showSetAsDefault:\n            (addingNewInstrument && hasAnyOtherInstruments) ||\n            Boolean(instrument && !instrument.defaultInstrument),\n        setAsDefaultEnabled: !addingNewInstrument || saveIsChecked,\n    };\n};\n\nexport default connectFormik(withCheckout(mapToProps)(StoreInstrumentFieldset));\n","import {\n    CardInstrument,\n    CheckoutSelectors,\n    HostedFieldType,\n    Instrument,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport {\n    configureCardValidator,\n    CreditCardFieldset,\n    getCreditCardValidationSchema,\n} from '../creditCard';\nimport {\n    CardInstrumentFieldset,\n    CardInstrumentFieldsetValues,\n    CreditCardValidation,\n    getInstrumentValidationSchema,\n    isCardInstrument,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport CreditCardFieldsetValues from './CreditCardFieldsetValues';\n\nexport interface CreditCardPaymentMethodProps {\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    cardFieldset?: ReactNode;\n    cardValidationSchema?: ObjectSchema;\n    storedCardValidationSchema?: ObjectSchema;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    getStoredCardValidationFieldset?(selectedInstrument?: CardInstrument): ReactNode;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nexport type CreditCardPaymentMethodValues = CreditCardFieldsetValues | CardInstrumentFieldsetValues;\n\ninterface WithCheckoutCreditCardPaymentMethodProps {\n    instruments: CardInstrument[];\n    isCardCodeRequired: boolean;\n    isCustomerCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    shouldShowInstrumentFieldset: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\ninterface CreditCardPaymentMethodState {\n    focusedHostedFieldType?: HostedFieldType;\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n    isPreloaderOn: boolean;\n}\n\nclass CreditCardPaymentMethod extends Component<\n    CreditCardPaymentMethodProps &\n        WithCheckoutCreditCardPaymentMethodProps &\n        WithFormProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    CreditCardPaymentMethodState\n> {\n    state: CreditCardPaymentMethodState = {\n        isAddingNewCard: false,\n        isPreloaderOn: true,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n        configureCardValidator();\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await initializePayment(\n                {\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                },\n                this.getSelectedInstrument(),\n            ).then(() => this.setState({ isPreloaderOn: false }));\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        _prevProps: Readonly<CreditCardPaymentMethodProps>,\n        prevState: Readonly<CreditCardPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            initializePayment,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            isAddingNewCard !== prevState.isAddingNewCard\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                await initializePayment(\n                    {\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    },\n                    this.getSelectedInstrument(),\n                );\n\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            cardFieldset,\n            getStoredCardValidationFieldset,\n            instruments,\n            isInitializing,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldShowInstrumentFieldset,\n            method,\n        } = this.props;\n\n        const { isAddingNewCard, isPreloaderOn } = this.state;\n\n        const selectedInstrument = this.getSelectedInstrument();\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments || isPreloaderOn;\n        const shouldShowNumberField = selectedInstrument\n            ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n            : false;\n        const shouldShowCardCodeField = selectedInstrument\n            ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n            : false;\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--creditCard\" data-test='credit-cart-payment-method'>\n                    {shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            instruments={instruments}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={\n                                selectedInstrument && selectedInstrument.bigpayToken\n                            }\n                            validateInstrument={\n                                getStoredCardValidationFieldset ? (\n                                    getStoredCardValidationFieldset(selectedInstrument)\n                                ) : (\n                                    <CreditCardValidation\n                                        shouldShowCardCodeField={shouldShowCardCodeField}\n                                        shouldShowNumberField={shouldShowNumberField}\n                                    />\n                                )\n                            }\n                        />\n                    )}\n\n                    {shouldShowCreditCardFieldset && !cardFieldset && (\n                        <CreditCardFieldset\n                            shouldShowCardCodeField={\n                                method.config.cardCode || method.config.cardCode === null\n                            }\n                            shouldShowCustomerCodeField={method.config.requireCustomerCode}\n                        />\n                    )}\n\n                    {shouldShowCreditCardFieldset && cardFieldset}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getSelectedInstrument(): CardInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            cardValidationSchema,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            language,\n            method,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return (\n                storedCardValidationSchema ||\n                getInstrumentValidationSchema({\n                    instrumentBrand: selectedInstrument.brand,\n                    instrumentLast4: selectedInstrument.last4,\n                    isCardCodeRequired: isInstrumentCardCodeRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    isCardNumberRequired: isInstrumentCardNumberRequiredProp(selectedInstrument),\n                    language,\n                })\n            );\n        }\n\n        return (\n            cardValidationSchema ||\n            getCreditCardValidationSchema({\n                isCardCodeRequired: method.config.cardCode === true,\n                language,\n            })\n        );\n    }\n\n    private handleUseNewCard: () => void = () => {\n        const {\n            formik: { setFieldValue },\n        } = this.props;\n\n        setFieldValue('hostedForm.cardType', '');\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const {\n            formik: { setFieldValue },\n        } = this.props;\n\n        setFieldValue('hostedForm.cardType', '');\n\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const {\n            instruments,\n            formik: { setFieldValue },\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutCreditCardPaymentMethodProps,\n    CreditCardPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isCardInstrument),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: { getConfig, getCustomer, getInstruments, isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer || !method) {\n            return null;\n        }\n\n        const instruments = filterInstruments(getInstruments(method));\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            paymentMethod: method,\n        });\n\n        return {\n            instruments,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isCustomerCodeRequired: !!method.config.requireCustomerCode,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n            shouldShowInstrumentFieldset:\n                isInstrumentFeatureAvailableProp && instruments.length > 0,\n        };\n    };\n};\n\nexport default connectFormik(\n    withForm(\n        withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(CreditCardPaymentMethod))),\n    ),\n);\n","import { creditCardType } from 'card-validator';\n\nexport default function configureCardValidator(): void {\n    const discoverInfo = creditCardType.getTypeInfo('discover');\n    const visaInfo = creditCardType.getTypeInfo('visa');\n\n    // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n    creditCardType.updateCard('visa', {\n        lengths: [13, ...(visaInfo.lengths || [])],\n    });\n\n    // Add support for 8-BIN Discover Cards.\n    creditCardType.updateCard('discover', {\n        patterns: [...(discoverInfo.patterns || []), [810, 817]],\n    });\n\n    // Add support for Mada-BIN Cards.\n    creditCardType.addCard({\n        niceType: 'Mada',\n        type: 'mada',\n        patterns: [\n            400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817, 422818,\n            422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954, 440533, 440647,\n            440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865, 458456, 462220, 468540,\n            468541, 468542, 468543, 483010, 483011, 483012, 484783, 486094, 486095, 486096, 489317,\n            489318, 489319, 493428, 504300, 506968, 508160, 513213, 520058, 521076, 524130, 524514,\n            529415, 529741, 530060, 530906, 531095, 531196, 532013, 535825, 535989, 536023, 537767,\n            539931, 543085, 543357, 549760, 554180, 557606, 558848, 585265, 588845, 588846, 588847,\n            588848, 588849, 588850, 588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120,\n            968201, 968202, 968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n        ],\n        gaps: [4, 8, 12],\n        lengths: [16, 18, 19],\n        code: {\n            name: 'CVV',\n            size: 3,\n        },\n    });\n}\n","import { noop } from 'lodash';\nimport React, {\n    createRef,\n    FunctionComponent,\n    RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Modal } from '../../ui/modal';\nimport {\n    withHostedCreditCardFieldset,\n    WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type BraintreeCreditCardPaymentMethodProps = CreditCardPaymentMethodProps;\n\ninterface BraintreeCreditCardPaymentMethodRef {\n    threeDSecureContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst BraintreeCreditCardPaymentMethod: FunctionComponent<\n    BraintreeCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const [threeDSecureContent, setThreeDSecureContent] = useState<HTMLElement>();\n    const ref = useRef<BraintreeCreditCardPaymentMethodRef>({\n        threeDSecureContentRef: createRef(),\n    });\n\n    const initializeBraintreePayment: BraintreeCreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    braintree: {\n                        threeDSecure: {\n                            addFrame(error, content, cancel) {\n                                if (error) {\n                                    return onUnhandledError(error);\n                                }\n\n                                setThreeDSecureContent(content);\n                                ref.current.cancelThreeDSecureVerification = cancel;\n                            },\n                            removeFrame() {\n                                setThreeDSecureContent(undefined);\n                                ref.current.cancelThreeDSecureVerification = undefined;\n                            },\n                        },\n                        form:\n                            getHostedFormOptions &&\n                            (await getHostedFormOptions(selectedInstrument)),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment, onUnhandledError],\n        );\n\n    const appendThreeDSecureContent = useCallback(() => {\n        if (ref.current.threeDSecureContentRef.current && threeDSecureContent) {\n            ref.current.threeDSecureContentRef.current.appendChild(threeDSecureContent);\n        }\n    }, [threeDSecureContent]);\n\n    const cancelThreeDSecureModalFlow = useCallback(() => {\n        setThreeDSecureContent(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n\n    return (\n        <>\n            <CreditCardPaymentMethod\n                {...rest}\n                cardFieldset={hostedFieldset}\n                cardValidationSchema={hostedValidationSchema}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeBraintreePayment}\n                onUnhandledError={onUnhandledError}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                isOpen={!!threeDSecureContent}\n                onAfterOpen={appendThreeDSecureContent}\n                onRequestClose={cancelThreeDSecureModalFlow}\n            >\n                <div ref={ref.current.threeDSecureContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default withHostedCreditCardFieldset(BraintreeCreditCardPaymentMethod);\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport {\n    withHostedCreditCardFieldset,\n    WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type HostedCreditCardPaymentMethodProps = Omit<\n    CreditCardPaymentMethodProps,\n    | 'cardFieldset'\n    | 'cardValidationSchema'\n    | 'storedCardValidationSchema'\n    | 'getStoredCardValidationFieldset'\n>;\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<\n    HostedCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    ...rest\n}) => {\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: getHostedFormOptions && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    return (\n        <CreditCardPaymentMethod\n            {...rest}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default withHostedCreditCardFieldset(HostedCreditCardPaymentMethod);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import { AccountInstrument, AchInstrument, BankInstrument, PayPalInstrument } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { FunctionComponent, PureComponent, ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { IconNewAccount, IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument | AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default AccountInstrumentSelect;\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, ModalTriggerModalProps } from '../../ui/modal';\n\nimport AccountInstrumentSelect from './AccountInstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","import {\n    AccountInstrument,\n    CheckoutSelectors,\n    PaymentInitializeOptions,\n    PaymentInstrument,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nexport interface HostedPaymentMethodProps {\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface WithCheckoutHostedPaymentMethodProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nclass HostedPaymentMethod extends Component<\n    HostedPaymentMethodProps &\n        WithCheckoutHostedPaymentMethodProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            description,\n            isInitializing = false,\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = this.props;\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n        const { instruments } = this.props;\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = this.props;\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutHostedPaymentMethodProps,\n    HostedPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n                isPaymentDataSubmitted,\n            },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const cart = getCart();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !cart || !customer || !method) {\n            return null;\n        }\n\n        const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n        const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n        return {\n            instruments: trustedInstruments,\n            isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n            isInstrumentFeatureAvailable:\n                !isPaymentDataSubmitted(method.id, method.gateway) &&\n                isInstrumentFeatureAvailable({\n                    config,\n                    customer,\n                    paymentMethod: method,\n                }),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n        };\n    };\n};\n\nexport default connectFormik(\n    withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(HostedPaymentMethod))),\n);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport getPaymentMethodName from './getPaymentMethodName';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps & WithLanguageProps> = ({\n    language,\n    method,\n    onSignOut,\n}) => (\n    <div className=\"signout-link\">\n        <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n        <a href=\"#\" onClick={preventDefault(onSignOut)}>\n            <TranslatedString\n                data={{ providerName: getPaymentMethodName(language)(method) }}\n                id=\"remote.sign_out_action\"\n            />\n        </a>{' '}\n        <TranslatedString id=\"remote.sign_out_after_action\" />\n    </div>\n);\n\nexport default withLanguage(SignOutLink);\n","import {\n    CheckoutSelectors,\n    CustomerRequestOptions,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport { noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport SignOutLink from './SignOutLink';\n\nexport interface WalletButtonPaymentMethodProps {\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutWalletButtonPaymentMethodProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentDataRequired: boolean;\n    isPaymentSelected: boolean;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nclass WalletButtonPaymentMethod extends Component<\n    WalletButtonPaymentMethodProps &\n        WithCheckoutWalletButtonPaymentMethodProps &\n        WithLanguageProps &\n        WithPaymentProps\n> {\n    async componentDidMount(): Promise<void> {\n        const { initializePayment, method, onUnhandledError = noop } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, disableSubmit, method, onUnhandledError = noop } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(\n        prevProps: Readonly<\n            PaymentMethodProps &\n                WalletButtonPaymentMethodProps &\n                WithCheckoutWalletButtonPaymentMethodProps &\n                WithLanguageProps\n        >,\n    ): void {\n        const { method, isPaymentDataRequired } = this.props;\n        const { method: prevMethod, isPaymentDataRequired: prevIsPaymentDataRequired } = prevProps;\n\n        if (\n            method.initializationData !== prevMethod.initializationData ||\n            isPaymentDataRequired !== prevIsPaymentDataRequired\n        ) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const { isInitializing = false, isPaymentSelected } = this.props;\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    {isPaymentSelected ? this.renderPaymentView() : this.renderSignInView()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const { buttonId, language, signInButtonClassName, signInButtonLabel, method } = this.props;\n\n        return (\n            <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n                {signInButtonLabel || (\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_in_action\"\n                    />\n                )}\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const {\n            accountMask,\n            buttonId,\n            cardName,\n            cardType,\n            editButtonClassName,\n            editButtonLabel,\n            expiryMonth,\n            expiryYear,\n            shouldShowEditButton,\n            method,\n        } = this.props;\n\n        return (\n            <>\n                {cardName && (\n                    <p data-test=\"payment-method-wallet-card-name\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_name_label\" />:\n                        </strong>{' '}\n                        {cardName}\n                    </p>\n                )}\n\n                {accountMask && (\n                    <p data-test=\"payment-method-wallet-card-type\">\n                        <strong>{`${cardType}:`}</strong> {accountMask}\n                    </p>\n                )}\n\n                {expiryMonth && expiryYear && (\n                    <p data-test=\"payment-method-wallet-card-expiry\">\n                        <strong>\n                            <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                        </strong>{' '}\n                        {`${expiryMonth}/${expiryYear}`}\n                    </p>\n                )}\n\n                {shouldShowEditButton && (\n                    <p>\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    </p>\n                )}\n\n                <SignOutLink method={method} onSignOut={this.handleSignOut} />\n            </>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const { disableSubmit, method, isPaymentDataRequired } = this.props;\n\n        if (normalizeWalletPaymentData(method.initializationData) || !isPaymentDataRequired) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const { method, signOut, onSignOut = noop, onSignOutError = noop } = this.props;\n\n        try {\n            await signOut({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n}\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nfunction normalizeWalletPaymentData(data: any): WalletPaymentData | undefined {\n    if (!data) {\n        return;\n    }\n\n    if (data.card_information) {\n        return {\n            accountMask: formatAccountMask(data.card_information.number),\n            cardType: data.card_information.type,\n        };\n    }\n\n    if (data.cardData) {\n        return {\n            accountMask: formatAccountMask(data.cardData.accountMask),\n            cardType: data.cardData.cardType,\n            expiryMonth: data.cardData.expMonth,\n            expiryYear: data.cardData.expYear,\n        };\n    }\n\n    if (data.accountNum) {\n        const { card } = number(data.accountNum);\n\n        return {\n            accountMask: formatAccountMask(data.accountMask),\n            expiryMonth: data.expDate && `${data.expDate}`.substr(0, 2),\n            expiryYear: data.expDate && `${data.expDate}`.substr(2, 2),\n            cardType: card ? card.niceType : '',\n        };\n    }\n}\n\nfunction formatAccountMask(accountMask = '', padding = '****'): string {\n    return accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n}\n\nfunction mapFromCheckoutProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: WalletButtonPaymentMethodProps,\n): WithCheckoutWalletButtonPaymentMethodProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n    } = checkoutState;\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        return null;\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n    return {\n        ...walletPaymentData,\n        // FIXME: I'm not sure how this would work for non-English names.\n        cardName:\n            walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        signOut: checkoutService.signOutCustomer,\n    };\n}\n\nexport default withLanguage(\n    withPayment(withCheckout(mapFromCheckoutProps)(WalletButtonPaymentMethod)),\n);\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { Omit } from 'utility-types';\n\nimport { masterpassFormatLocale, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nimport WalletButtonPaymentMethod, {\n    WalletButtonPaymentMethodProps,\n} from './WalletButtonPaymentMethod';\n\nexport type MasterpassPaymentMethodProps = Omit<WalletButtonPaymentMethodProps, 'buttonId'>;\n\ninterface WithCheckoutMasterpassProps {\n    storeLanguage: string;\n}\n\nconst MasterpassPaymentMethod: FunctionComponent<\n    MasterpassPaymentMethodProps & WithLanguageProps & WithCheckoutMasterpassProps\n> = ({ initializePayment, language, storeLanguage, ...rest }) => {\n    const initializeMasterpassPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            initializePayment({\n                ...options,\n                masterpass: {\n                    walletButton: 'walletButton',\n                },\n            }),\n        [initializePayment],\n    );\n\n    const {\n        config: { testMode },\n        initializationData: { checkoutId, isMasterpassSrcEnabled },\n    } = rest.method;\n\n    const locale = masterpassFormatLocale(storeLanguage);\n\n    const signInButtonLabel = useMemo(\n        () => (\n            <img\n                alt={language.translate('payment.masterpass_name_text')}\n                id=\"mpbutton\"\n                src={\n                    isMasterpassSrcEnabled\n                        ? `https://${\n                              testMode ? 'sandbox.' : ''\n                          }src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg?locale=${locale}&paymentmethod=master,visa,amex,discover&checkoutid=${checkoutId}`\n                        : `https://masterpass.com/dyn/img/btn/global/mp_chk_btn_126x030px.svg`\n                }\n            />\n        ),\n        [checkoutId, language, locale, testMode, isMasterpassSrcEnabled],\n    );\n\n    return (\n        <WalletButtonPaymentMethod\n            {...rest}\n            buttonId=\"walletButton\"\n            initializePayment={initializeMasterpassPayment}\n            signInButtonLabel={signInButtonLabel}\n        />\n    );\n};\n\nfunction mapFromCheckoutProps({ checkoutState }: CheckoutContextProps) {\n    const {\n        data: { getConfig },\n    } = checkoutState;\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        storeLanguage: config.storeProfile.storeLanguage,\n    };\n}\n\nexport default withCheckout(mapFromCheckoutProps)(withLanguage(MasterpassPaymentMethod));\n","export default function masterpassFormatLocale(localeLanguage: string): string {\n    return localeLanguage.replace('-', '_').toLowerCase();\n}\n","enum PaymentMethodProviderType {\n    Api = 'PAYMENT_TYPE_API',\n    Hosted = 'PAYMENT_TYPE_HOSTED',\n    Offline = 'PAYMENT_TYPE_OFFLINE',\n    PPSDK = 'PAYMENT_TYPE_SDK',\n}\n\nexport default PaymentMethodProviderType;\n","import React, { FunctionComponent } from 'react';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { EMPTY_ARRAY } from '../../common/utility';\n\nimport HostedCreditCardPaymentMethod, {\n    HostedCreditCardPaymentMethodProps,\n} from './HostedCreditCardPaymentMethod';\nimport HostedPaymentMethod, { HostedPaymentMethodProps } from './HostedPaymentMethod';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\n\nexport type PaypalPaymentsProPaymentMethodProps =\n    | HostedPaymentMethodProps\n    | HostedCreditCardPaymentMethodProps;\n\ninterface WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    isHostedPayment: boolean;\n}\n\n/**\n * Paypal Payments Pro is a snowflake payment method - it can be a hosted\n * payment method or a credit card payment method depending on where the\n * checkout process is initiated. If it is started from the cart page via the\n * PayPal button, it behaves as a hosted payment method. But if it is started\n * from the checkout page, it behaves as a credit card payment method.\n */\nconst PaypalPaymentsProPaymentMethod: FunctionComponent<\n    PaypalPaymentsProPaymentMethodProps & WithCheckoutPaypalPaymentsProPaymentMethodProps\n> = ({ isHostedPayment, ...props }) => {\n    if (isHostedPayment) {\n        return <HostedPaymentMethod {...props} />;\n    }\n\n    return <HostedCreditCardPaymentMethod {...props} />;\n};\n\nfunction mapToPaypalPaymentsProPaymentMethodProps(\n    { checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    const {\n        data: { getCheckout },\n    } = checkoutState;\n    const { payments = EMPTY_ARRAY } = getCheckout() || {};\n    const selectedHostedMethod = payments.find(\n        ({ providerType }) => providerType === PaymentMethodProviderType.Hosted,\n    );\n\n    return {\n        isHostedPayment: selectedHostedMethod\n            ? selectedHostedMethod.providerId === method.id &&\n              selectedHostedMethod.gatewayId === method.gateway\n            : false,\n    };\n}\n\nexport default withCheckout(mapToPaypalPaymentsProPaymentMethodProps)(\n    PaypalPaymentsProPaymentMethod,\n);\n","import React, { FunctionComponent, useEffect } from 'react';\n\ninterface Props {\n    onMount(): () => void;\n    children?: React.ReactNode;\n}\n\nexport const Wrapper: FunctionComponent<Props> = (props) => {\n    const { children, onMount } = props;\n\n    useEffect(onMount, [onMount]);\n\n    return <>{children}</>;\n};\n","import { ComponentType } from 'react';\n\nimport HostedCreditCardPaymentMethod from '../HostedCreditCardPaymentMethod';\n\nimport { NoUI } from './NoUI';\n\ntype ComponentMap = Record<string, ComponentType<any>>;\n\nexport const initializationComponentMap: ComponentMap = {\n    card_ui: HostedCreditCardPaymentMethod,\n    none: NoUI,\n};\n","import React from 'react';\n\nimport { Props } from './PPSDKPaymentMethod';\nimport { usePropsToOnMount } from './usePropsToOnMount';\nimport { Wrapper } from './Wrapper';\n\nexport const NoUI = (props: Props) => {\n    const onMount = usePropsToOnMount(props);\n\n    return <Wrapper onMount={onMount} />;\n};\n","import { CheckoutService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport { useCallback, useMemo } from 'react';\n\ntype CheckoutServiceInstance = InstanceType<typeof CheckoutService>;\n\ninterface Props {\n    method: PaymentMethod;\n    deinitializePayment: CheckoutServiceInstance['deinitializePayment'];\n    initializePayment: CheckoutServiceInstance['initializePayment'];\n    onUnhandledError?(error: Error): void;\n}\n\nexport const usePropsToOnMount = (props: Props): (() => () => void) => {\n    const { initializePayment, deinitializePayment, method, onUnhandledError = noop } = props;\n\n    const options = useMemo(\n        () => ({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        }),\n        [method.gateway, method.id],\n    );\n\n    const onInit = useCallback(() => initializePayment(options), [initializePayment, options]);\n    const onDeinit = useCallback(\n        () => deinitializePayment(options),\n        [deinitializePayment, options],\n    );\n\n    return useCallback(() => {\n        onInit().catch(onUnhandledError);\n\n        return () => {\n            onDeinit().catch(onUnhandledError);\n        };\n    }, [onInit, onUnhandledError, onDeinit]);\n};\n","import { CheckoutService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent } from 'react';\n\nimport { initializationComponentMap } from './initializationComponentMap';\n\ntype CheckoutServiceInstance = InstanceType<typeof CheckoutService>;\n\nexport interface Props {\n    method: PaymentMethod;\n    deinitializePayment: CheckoutServiceInstance['deinitializePayment'];\n    initializePayment: CheckoutServiceInstance['initializePayment'];\n    onUnhandledError?(error: Error): void;\n}\n\nexport const PPSDKPaymentMethod: FunctionComponent<Props> = (props) => {\n    const { method, onUnhandledError = noop } = props;\n\n    const componentKey = method.initializationStrategy?.type || '';\n    const Component = initializationComponentMap[componentKey];\n\n    if (!Component) {\n        onUnhandledError(new Error('PPSDK initialization strategy not found'));\n\n        return null;\n    }\n\n    return <Component {...props} />;\n};\n","import {\n    CheckoutSelectors,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nimport BraintreeCreditCardPaymentMethod from './BraintreeCreditCardPaymentMethod';\nimport HostedCreditCardPaymentMethod from './HostedCreditCardPaymentMethod';\nimport HostedPaymentMethod from './HostedPaymentMethod';\nimport MasterpassPaymentMethod from './MasterpassPaymentMethod';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\nimport PaymentMethodType from './PaymentMethodType';\nimport PaypalPaymentsProPaymentMethod from './PaypalPaymentsProPaymentMethod';\nimport PPSDKPaymentMethod from './PPSDKPaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError?(error: Error): void;\n    submitForm?(): void;\n}\n\nexport interface WithCheckoutPaymentMethodProps {\n    isInitializing: boolean;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n}\n\n/**\n * If possible, try to avoid having components that are specific to a specific\n * payment provider or method. Instead, try to generalise the requirements and\n * use components that can are reusable for multiple payment methods. i.e.:\n * CreditCardPaymentMethod, HostedPaymentMethod etc... If it is really necessary\n * for a particular payment method, you may write a method-specific component for\n * the purpose of configuring a general-purpose component in order to fulfill\n * its specific product or technical requirements.\n */\nconst PaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & WithCheckoutPaymentMethodProps\n> = (props) => {\n    const { method } = props;\n\n    if (method.type === PaymentMethodProviderType.PPSDK) {\n        return <PPSDKPaymentMethod {...props} />;\n    }\n\n    if (method.id === PaymentMethodId.Masterpass) {\n        return <MasterpassPaymentMethod {...props} />;\n    }\n\n    if (method.id === PaymentMethodId.Braintree) {\n        return <BraintreeCreditCardPaymentMethod {...props} />;\n    }\n\n    if (\n        method.type !== PaymentMethodProviderType.Hosted &&\n        method.id === PaymentMethodId.PaypalPaymentsPro\n    ) {\n        return <PaypalPaymentsProPaymentMethod {...props} />;\n    }\n\n\n    if (\n        method.id === PaymentMethodId.BraintreeVenmo ||\n        method.id === PaymentMethodId.Humm ||\n        method.id === PaymentMethodId.Laybuy ||\n        method.id === PaymentMethodId.Quadpay ||\n        method.id === PaymentMethodId.Sezzle ||\n        method.id === PaymentMethodId.Zip ||\n        method.method === PaymentMethodType.Paypal ||\n        method.method === PaymentMethodType.PaypalCredit ||\n        method.type === PaymentMethodProviderType.Hosted\n    ) {\n        return <HostedPaymentMethod {...props} />;\n    }\n\n    // NOTE: Some payment methods have `method` as `credit-card` but they are\n    // actually not. Therefore, as a workaround, we are doing the following\n    // check last.\n    if (\n        method.method === PaymentMethodType.CreditCard ||\n        method.type === PaymentMethodProviderType.Api\n    ) {\n        return <HostedCreditCardPaymentMethod {...props} />;\n    }\n\n    return null;\n};\n\nfunction mapToWithCheckoutPaymentMethodProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaymentMethodProps {\n    const {\n        statuses: { isInitializingPayment },\n    } = checkoutState;\n\n    return {\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        deinitializePayment: checkoutService.deinitializePayment,\n        initializeCustomer: checkoutService.initializeCustomer,\n        initializePayment: checkoutService.initializePayment,\n        isInitializing: isInitializingPayment(method.id),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutPaymentMethodProps)(memo(PaymentMethodComponent));\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { ComponentType } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormProvider,\n    PaymentFormValues,\n    PaymentMethodResolveId,\n    PaymentMethodProps as ResolvedPaymentMethodProps,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout, WithCheckoutProps } from '../../checkout';\nimport { connectFormik, WithFormikProps } from '../../common/form';\nimport { withForm, WithFormProps } from '../../ui/form';\nimport createPaymentFormService from '../createPaymentFormService';\nimport resolvePaymentMethod from '../resolvePaymentMethod';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport { default as PaymentMethodV1 } from './PaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    resolveComponent?(\n        query: PaymentMethodResolveId,\n    ): ComponentType<ResolvedPaymentMethodProps> | undefined;\n    onUnhandledError(error: Error): void;\n}\n\nconst PaymentMethodContainer: ComponentType<\n    PaymentMethodProps &\n        WithCheckoutProps &\n        WithLanguageProps &\n        WithPaymentProps &\n        WithFormProps &\n        WithFormikProps<PaymentFormValues>\n> = ({\n    formik: formikContext,\n    checkoutService,\n    checkoutState,\n    disableSubmit,\n    hidePaymentSubmitButton,\n    isEmbedded,\n    isSubmitted,\n    isUsingMultiShipping,\n    language,\n    method,\n    onUnhandledError,\n    resolveComponent = resolvePaymentMethod,\n    setSubmit,\n    setSubmitted,\n    setValidationSchema,\n}) => {\n    const formContext = {\n        isSubmitted,\n        setSubmitted,\n    };\n\n    const paymentContext = {\n        disableSubmit,\n        hidePaymentSubmitButton,\n        setSubmit,\n        setValidationSchema,\n    };\n\n    const ResolvedPaymentMethod = resolveComponent({\n        id: method.id,\n        gateway: method.gateway,\n        type: method.type,\n    });\n\n    if (!ResolvedPaymentMethod) {\n        return (\n            <PaymentMethodV1\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    const paymentForm = createPaymentFormService(formikContext, formContext, paymentContext);\n\n    return (\n        <PaymentFormProvider paymentForm={paymentForm}>\n            <ResolvedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                language={language}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                paymentForm={paymentForm}\n            />\n        </PaymentFormProvider>\n    );\n};\n\nexport default withCheckout((props) => props)(\n    withLanguage(withPayment(withForm(connectFormik(PaymentMethodContainer)))),\n) as ComponentType<PaymentMethodProps>;\n","import { FormikContextType } from 'formik';\n\nimport {\n    PaymentFormService,\n    PaymentFormValues,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContextType } from '@bigcommerce/checkout/ui';\n\nimport { PaymentContextProps } from './PaymentContext';\n\nexport default function createPaymentFormService(\n    formikContext: FormikContextType<PaymentFormValues>,\n    formContext: FormContextType,\n    paymentContext: PaymentContextProps,\n): PaymentFormService {\n    const {\n        setFieldTouched,\n        setFieldValue,\n        submitForm,\n        validateForm,\n        values,\n    } = formikContext;\n\n    const { isSubmitted, setSubmitted } = formContext;\n\n    const { disableSubmit, setSubmit, setValidationSchema, hidePaymentSubmitButton } =\n        paymentContext;\n\n    const getFieldValue = <T>(key: string): T | unknown => values[key];\n\n    return {\n        disableSubmit,\n        getFieldValue,\n        getFormValues: () => values,\n        hidePaymentSubmitButton,\n        isSubmitted: () => isSubmitted,\n        setFieldTouched: setFieldTouched as PaymentFormService['setFieldTouched'],\n        setFieldValue: setFieldValue as PaymentFormService['setFieldValue'],\n        setSubmit,\n        setSubmitted,\n        setValidationSchema,\n        submitForm,\n        validateForm,\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find, get, noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { isMobile } from '../../common/utility';\nimport { Checklist, ChecklistItem, CustomChecklistItem } from '../../ui/form';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport getUniquePaymentMethodId, { parseUniquePaymentMethodId } from './getUniquePaymentMethodId';\nimport PaymentMethodTitle, { getPaymentMethodTitle } from './PaymentMethodTitle';\nimport PaymentMethodV2 from './PaymentMethodV2';\n\nexport interface PaymentMethodListProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    onSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n}\n\nfunction getPaymentMethodFromListValue(methods: PaymentMethod[], value: string): PaymentMethod {\n    const { gatewayId: gateway, methodId: id } = parseUniquePaymentMethodId(value);\n    const method = gateway ? find(methods, { gateway, id }) : find(methods, { id });\n\n    if (!method) {\n        throw new Error(`Unable to find payment method with id: ${id}`);\n    }\n\n    return method;\n}\n\nconst PaymentMethodList: FunctionComponent<\n    PaymentMethodListProps & ConnectFormikProps<{ paymentProviderRadio?: string }>\n> = ({\n    formik: { values },\n    isEmbedded,\n    isInitializingPayment,\n    isUsingMultiShipping,\n    methods,\n    onSelect = noop,\n    onUnhandledError,\n}) => {\n    const { language } = useLocale();\n    const {\n        checkoutState: {\n            data: { getConfig }\n        }\n    } = useCheckout();\n\n    const config = getConfig();\n\n    const titleText = useMemo(() => {\n        if (config && values.paymentProviderRadio) {\n            const checkoutSettings = config.checkoutSettings;\n            const cdnBasePath = config.cdnPath;\n            const storeCountryCode = config.storeProfile.storeCountryCode;\n            const paymentMethod = getPaymentMethodFromListValue(methods, values.paymentProviderRadio);\n            const methodName = getPaymentMethodName(language)(paymentMethod);\n            const { titleText } = getPaymentMethodTitle(language, cdnBasePath, checkoutSettings, storeCountryCode)(paymentMethod);\n\n            return titleText || methodName;\n        }\n\n        return '';\n    }, [config, values.paymentProviderRadio])\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelect(getPaymentMethodFromListValue(methods, value));\n        },\n        [methods, onSelect],\n    );\n\n    return (\n        <>\n            <div aria-live=\"assertive\" className='is-srOnly' role=\"status\">{titleText}</div>\n            <Checklist\n                defaultSelectedItemId={values.paymentProviderRadio}\n                isDisabled={isInitializingPayment}\n                name=\"paymentProviderRadio\"\n                onSelect={handleSelect}\n            >\n                {methods.map((method) => {\n                    const value = getUniquePaymentMethodId(method.id, method.gateway);\n                    const showOnlyOnMobileDevices = get(\n                        method,\n                        'initializationData.showOnlyOnMobileDevices',\n                        false,\n                    );\n\n                    if (showOnlyOnMobileDevices && !isMobile()) {\n                        return;\n                    }\n\n                    return (\n                        <PaymentMethodListItem\n                            isDisabled={isInitializingPayment}\n                            isEmbedded={isEmbedded}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            key={value}\n                            method={method}\n                            onUnhandledError={onUnhandledError}\n                            value={value}\n                        />\n                    );\n                })}\n            </Checklist>\n        </>\n    );\n};\n\ninterface PaymentMethodListItemProps {\n    isDisabled?: boolean;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    value: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentMethodListItem: FunctionComponent<PaymentMethodListItemProps> = ({\n    isDisabled,\n    isEmbedded,\n    isUsingMultiShipping,\n    method,\n    onUnhandledError,\n    value,\n}) => {\n    const renderPaymentMethod = useMemo(() => {\n        return (\n            <PaymentMethodV2\n                isEmbedded={isEmbedded}\n                isUsingMultiShipping={isUsingMultiShipping}\n                method={method}\n                onUnhandledError={onUnhandledError || noop}\n            />\n        );\n    }, [isEmbedded, isUsingMultiShipping, method, onUnhandledError]);\n\n    const renderPaymentMethodTitle = useCallback(\n        (isSelected: boolean) => <PaymentMethodTitle isSelected={isSelected} method={method} onUnhandledError={onUnhandledError} />,\n        [method],\n    );\n\n    if (method.initializationData?.isCustomChecklistItem) {\n        return (\n            <CustomChecklistItem\n                content={renderPaymentMethod}\n                htmlId={`radio-${value}`}\n            />\n        );\n    }\n\n    return (\n        <ChecklistItem\n            content={renderPaymentMethod}\n            htmlId={`radio-${value}`}\n            isDisabled={isDisabled}\n            label={renderPaymentMethodTitle}\n            value={value}\n        />\n    );\n};\n\nexport default connectFormik(memo(PaymentMethodList));\n","export default function isMobile(): boolean {\n    return /Android|iPhone|iPad|iPod/i.test(window.navigator.userAgent);\n}\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { mapToRedeemableProps, Redeemable, RedeemableProps } from '../cart';\nimport { withCheckout } from '../checkout';\nimport { Fieldset, Legend } from '../ui/form';\n\nconst PaymentRedeemables: FunctionComponent<RedeemableProps> = (redeemableProps) => (\n    <Fieldset \n        additionalClassName=\"redeemable-payments\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.redeemable_payments_text\" />\n            </Legend>\n        }\n    >\n        <Redeemable {...redeemableProps} showAppliedRedeemables={true} />\n    </Fieldset>\n);\n\nexport default withCheckout(mapToRedeemableProps)(memo(PaymentRedeemables));\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { withCheckout } from '../checkout';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { IconBolt } from '../ui/icon';\n\nimport { PaymentMethodId, PaymentMethodType } from './paymentMethod';\n\ninterface PaymentSubmitButtonTextProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodType?: string;\n    methodName?: string;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\nconst providersWithCustomClasses = [PaymentMethodId.Bolt];\n\nconst PaymentSubmitButtonText: FunctionComponent<PaymentSubmitButtonTextProps> = memo(\n    ({\n        methodId,\n        methodName,\n        methodType,\n        methodGateway,\n        initialisationStrategyType,\n        brandName,\n        isComplete,\n        isPaymentDataRequired,\n    }) => {\n        if (!isPaymentDataRequired) {\n            return <TranslatedString id=\"payment.place_order_action\" />;\n        }\n\n        if (methodName && initialisationStrategyType === 'none') {\n            return <TranslatedString data={{ methodName }} id=\"payment.ppsdk_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.AmazonPay) {\n            return <TranslatedString id=\"payment.amazonpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Bolt) {\n            return (\n                <>\n                    <IconBolt additionalClassName=\"payment-submit-button-bolt-icon\" />\n                    <TranslatedString id=\"payment.place_order_action\" />\n                </>\n            );\n        }\n\n        if (methodGateway === PaymentMethodId.Barclaycard) {\n            return <TranslatedString id=\"payment.barclaycard_continue_action\" />;\n        }\n\n        if (methodGateway === PaymentMethodId.BlueSnapV2) {\n            return <TranslatedString id=\"payment.bluesnap_v2_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.VisaCheckout) {\n            return <TranslatedString id=\"payment.visa_checkout_continue_action\" />;\n        }\n\n        if (\n            methodType === PaymentMethodType.PaypalVenmo ||\n            methodId === PaymentMethodId.BraintreeVenmo\n        ) {\n            return <TranslatedString id=\"payment.paypal_venmo_continue_action\" />;\n        }\n\n        if (methodType === PaymentMethodType.Paypal) {\n            const continueActionId = methodId === PaymentMethodId.PaypalCommerce\n                ? 'payment.place_order_action'\n                : 'payment.paypal_continue_action';\n\n            return <TranslatedString\n                data={{ isComplete }}\n                id={isComplete ? 'payment.paypal_complete_action' : continueActionId}\n            />;\n        }\n\n        if (methodType === PaymentMethodType.PaypalCredit) {\n            const continueTranslationId = brandName\n                ? 'payment.continue_with_brand'\n                : 'payment.paypal_pay_later_continue_action'\n            const completeTranslationId = brandName\n                ? 'payment.complete_with_brand'\n                : 'payment.paypal_pay_later_complete_action'\n\n            return (\n                <TranslatedString\n                    data={{ brandName, isComplete, continueTranslationId, completeTranslationId }}\n                    id={\n                        isComplete\n                            ? completeTranslationId\n                            : continueTranslationId\n                    }\n                />\n            );\n        }\n\n        if (methodId === PaymentMethodId.Quadpay) {\n            return <TranslatedString id=\"payment.quadpay_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Zip) {\n            return <TranslatedString id=\"payment.zip_continue_action\" />;\n        }\n\n        if (methodId === PaymentMethodId.Klarna) {\n            return <TranslatedString id=\"payment.klarna_continue_action\" />;\n        }\n\n        return <TranslatedString id=\"payment.place_order_action\" />;\n    },\n);\n\nexport interface PaymentSubmitButtonProps {\n    methodGateway?: string;\n    methodId?: string;\n    methodName?: string;\n    methodType?: string;\n    isDisabled?: boolean;\n    initialisationStrategyType?: string;\n    brandName?: string;\n    isComplete?: boolean;\n    isPaymentDataRequired?: boolean;\n}\n\ninterface WithCheckoutPaymentSubmitButtonProps {\n    isInitializing?: boolean;\n    isSubmitting?: boolean;\n}\n\nconst PaymentSubmitButton: FunctionComponent<\n    PaymentSubmitButtonProps & WithCheckoutPaymentSubmitButtonProps\n> = ({\n    isDisabled,\n    isInitializing,\n    isSubmitting,\n    isPaymentDataRequired,\n    methodGateway,\n    methodId,\n    methodName,\n    methodType,\n    initialisationStrategyType,\n    brandName,\n    isComplete,\n}) => (\n    <Button\n        className={\n            providersWithCustomClasses.includes(methodId as PaymentMethodId)\n                ? `payment-submit-button-${methodId}`\n                : undefined\n        }\n        data-test=\"payment-submit-button\"\n        disabled={isInitializing || isSubmitting || isDisabled}\n        id=\"checkout-payment-continue\"\n        isFullWidth\n        isLoading={isSubmitting}\n        size={ButtonSize.Large}\n        type=\"submit\"\n        variant={ButtonVariant.Action}\n    >\n        <PaymentSubmitButtonText\n            brandName={brandName}\n            initialisationStrategyType={initialisationStrategyType}\n            isComplete={isComplete}\n            isPaymentDataRequired={isPaymentDataRequired}\n            methodGateway={methodGateway}\n            methodId={methodId}\n            methodName={methodName}\n            methodType={methodType}\n        />\n    </Button>\n);\n\nexport default withCheckout(({ checkoutState }) => {\n    const {\n        data: { isPaymentDataRequired },\n        statuses: { isInitializingCustomer, isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    return {\n        isInitializing: isInitializingCustomer() || isInitializingPayment(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        isSubmitting: isSubmittingOrder(),\n    };\n})(memo(PaymentSubmitButton));\n","import { CheckoutSelectors } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, MouseEvent, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../checkout';\nimport { isErrorWithType } from '../common/error';\n\nexport interface SpamProtectionProps {\n    didExceedSpamLimit?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface SpamProtectionState {\n    shouldShowRetryButton: boolean;\n}\n\ninterface WithCheckoutSpamProtectionProps {\n    isExecutingSpamCheck: boolean;\n    executeSpamCheck(): Promise<CheckoutSelectors>;\n}\n\nfunction mapToSpamProtectionProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutSpamProtectionProps {\n    return {\n        isExecutingSpamCheck: checkoutState.statuses.isExecutingSpamCheck(),\n        executeSpamCheck: checkoutService.executeSpamCheck,\n    };\n}\n\nclass SpamProtectionField extends Component<\n    SpamProtectionProps & WithCheckoutSpamProtectionProps,\n    SpamProtectionState\n> {\n    state = {\n        shouldShowRetryButton: false,\n    };\n\n    async componentDidMount() {\n        const { didExceedSpamLimit } = this.props;\n\n        if (didExceedSpamLimit) {\n            return;\n        }\n\n        this.verify();\n    }\n\n    render() {\n        const { isExecutingSpamCheck } = this.props;\n\n        return (\n            <div className=\"spamProtection-container\">\n                <LoadingOverlay isLoading={isExecutingSpamCheck}>\n                    {this.renderContent()}\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const { didExceedSpamLimit } = this.props;\n        const { shouldShowRetryButton } = this.state;\n\n        if (!didExceedSpamLimit && !shouldShowRetryButton) {\n            return;\n        }\n\n        return (\n            <div className=\"spamProtection-panel optimizedCheckout-overlay\">\n                <a\n                    className=\"spamProtection-panel-message optimizedCheckout-primaryContent\"\n                    data-test=\"spam-protection-verify-button\"\n                    onClick={this.handleRetry}\n                >\n                    <TranslatedString id=\"spam_protection.verify_action\" />\n                </a>\n            </div>\n        );\n    }\n\n    private async verify(): Promise<void> {\n        const { executeSpamCheck, onUnhandledError = noop } = this.props;\n\n        try {\n            await executeSpamCheck();\n        } catch (error) {\n            this.setState({ shouldShowRetryButton: true });\n\n            // Notify the parent component if the user experiences a problem other than cancelling the reCaptcha challenge.\n            if (\n                isErrorWithType(error) &&\n                error.type !== 'spam_protection_challenge_not_completed'\n            ) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    private handleRetry: (event: MouseEvent) => void = (event) => {\n        event.preventDefault();\n\n        this.verify();\n    };\n}\n\nexport default withCheckout(mapToSpamProtectionProps)(SpamProtectionField);\n","import { noop } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withCurrency, WithCurrencyProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { CheckboxInput } from '../../ui/form';\nimport { Tooltip, TooltipTrigger } from '../../ui/tooltip';\n\nexport interface StoreCreditFieldProps {\n    availableStoreCredit: number;\n    name: string;\n    usableStoreCredit: number;\n    isStoreCreditApplied: boolean;\n    onChange?(value: boolean): void;\n}\n\nconst StoreCreditField: FunctionComponent<StoreCreditFieldProps & WithCurrencyProps> = ({\n    availableStoreCredit,\n    currency,\n    name,\n    onChange = noop,\n    usableStoreCredit,\n    isStoreCreditApplied,\n}) => {\n    const {\n        checkoutState: {\n            statuses: { isSubmittingOrder }\n        }\n    } = useCheckout();\n\n    const handleChange = useCallback((event: any) => onChange(event.target.checked), [onChange]);\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"redeemable.apply_store_credit_before_action\" />{' '}\n                <TooltipTrigger\n                    placement=\"top-start\"\n                    tooltip={\n                        <Tooltip testId=\"payment-store-credit-tooltip\">\n                            <TranslatedString\n                                data={{\n                                    storeCredit: currency.toCustomerCurrency(availableStoreCredit),\n                                }}\n                                id=\"redeemable.store_credit_available_text\"\n                            />\n                        </Tooltip>\n                    }\n                >\n                    <a href=\"#\" onClick={preventDefault()}>\n                        {currency.toCustomerCurrency(usableStoreCredit)}\n                    </a>\n                </TooltipTrigger>{' '}\n                <TranslatedString id=\"redeemable.apply_store_credit_after_action\" />\n            </>\n        ),\n        [availableStoreCredit, currency, usableStoreCredit],\n    );\n\n    return (\n        <CheckboxInput\n            checked={isStoreCreditApplied}\n            disabled={isSubmittingOrder()}\n            id={name}\n            label={labelContent}\n            name={name}\n            onChange={handleChange}\n            value={name}\n        />\n    );\n};\n\nexport default withCurrency(StoreCreditField);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst StoreCreditOverlay: FunctionComponent = () => (\n    <div className=\"storeCreditOverlay\" data-test=\"payment-store-credit-overlay\">\n        <p className=\"storeCreditOverlay-text\">\n            <TranslatedString id=\"payment.payment_not_required_text\" />\n        </p>\n    </div>\n);\n\nexport default StoreCreditOverlay;\n","import { ExtensionRegion, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, FormikState, withFormik, WithFormikConfig } from 'formik';\nimport { isNil, noop, omitBy } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useContext, useMemo } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { TermsConditions } from '../termsConditions';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport getPaymentValidationSchema from './getPaymentValidationSchema';\nimport {\n    getPaymentMethodName,\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodList,\n} from './paymentMethod';\nimport PaymentRedeemables from './PaymentRedeemables';\nimport PaymentSubmitButton from './PaymentSubmitButton';\nimport SpamProtectionField from './SpamProtectionField';\nimport { StoreCreditField, StoreCreditOverlay } from './storeCredit';\n\nexport interface PaymentFormProps {\n    availableStoreCredit?: number;\n    defaultGatewayId?: string;\n    defaultMethodId: string;\n    didExceedSpamLimit?: boolean;\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isTermsConditionsRequired?: boolean;\n    isUsingMultiShipping?: boolean;\n    isStoreCreditApplied: boolean;\n    methods: PaymentMethod[];\n    selectedMethod?: PaymentMethod;\n    shouldShowStoreCredit?: boolean;\n    shouldDisableSubmit?: boolean;\n    shouldHidePaymentSubmitButton?: boolean;\n    shouldExecuteSpamCheck?: boolean;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit?: number;\n    validationSchema?: ObjectSchema<Partial<PaymentFormValues>>;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onStoreCreditChange?(useStoreCredit?: boolean): void;\n    onSubmit?(values: PaymentFormValues): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentForm: FunctionComponent<\n    PaymentFormProps & FormikProps<PaymentFormValues> & WithLanguageProps\n> = ({\n    availableStoreCredit = 0,\n    didExceedSpamLimit,\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isTermsConditionsRequired,\n    isStoreCreditApplied,\n    isUsingMultiShipping,\n    language,\n    methods,\n    onMethodSelect,\n    onStoreCreditChange,\n    onUnhandledError,\n    resetForm,\n    selectedMethod,\n    shouldDisableSubmit,\n    shouldHidePaymentSubmitButton,\n    shouldExecuteSpamCheck,\n    termsConditionsText = '',\n    termsConditionsUrl,\n    usableStoreCredit = 0,\n    values,\n}) => {\n    const selectedMethodId = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        switch (selectedMethod.id) {\n            case PaymentMethodId.AmazonPay:\n                if (selectedMethod.initializationData.paymentToken) {\n                    return;\n                }\n\n                return selectedMethod.id;\n\n            default:\n                return selectedMethod.id;\n        }\n    }, [selectedMethod]);\n\n    const brandName = useMemo(() => {\n        if (!selectedMethod) {\n            return;\n        }\n\n        return (\n            selectedMethod.initializationData?.payPalCreditProductBrandName?.credit ||\n            selectedMethod.initializationData?.payPalCreditProductBrandName\n        );\n    }, [selectedMethod]);\n\n    if (shouldExecuteSpamCheck) {\n        return (\n            <SpamProtectionField\n                didExceedSpamLimit={didExceedSpamLimit}\n                onUnhandledError={onUnhandledError}\n            />\n        );\n    }\n\n    return (\n        <Form className=\"checkout-form\" testId=\"payment-form\">\n            {usableStoreCredit > 0 && (\n                <StoreCreditField\n                    availableStoreCredit={availableStoreCredit}\n                    isStoreCreditApplied={isStoreCreditApplied}\n                    name=\"useStoreCredit\"\n                    onChange={onStoreCreditChange}\n                    usableStoreCredit={usableStoreCredit}\n                />\n            )}\n\n            <PaymentMethodListFieldset\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isPaymentDataRequired={isPaymentDataRequired}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onMethodSelect={onMethodSelect}\n                onUnhandledError={onUnhandledError}\n                resetForm={resetForm}\n                values={values}\n            />\n\n            <PaymentRedeemables />\n\n            {isTermsConditionsRequired && (\n                <TermsConditions\n                    termsConditionsText={termsConditionsText}\n                    termsConditionsUrl={termsConditionsUrl}\n                />\n            )}\n\n            <div className=\"form-actions\">\n                {shouldHidePaymentSubmitButton ? (\n                    <PaymentMethodSubmitButtonContainer />\n                ) : (\n                    <PaymentSubmitButton\n                        brandName={brandName}\n                        initialisationStrategyType={\n                            selectedMethod && selectedMethod.initializationStrategy?.type\n                        }\n                        isComplete={!!selectedMethod?.initializationData?.isComplete}\n                        isDisabled={shouldDisableSubmit}\n                        methodGateway={selectedMethod && selectedMethod.gateway}\n                        methodId={selectedMethodId}\n                        methodName={\n                            selectedMethod && getPaymentMethodName(language)(selectedMethod)\n                        }\n                        methodType={selectedMethod && selectedMethod.method}\n                    />\n                )}\n            </div>\n        </Form>\n    );\n};\n\nconst PaymentMethodSubmitButtonContainer: FunctionComponent = () => {\n    return <div className=\"submitButtonContainer\" id=\"checkout-payment-continue\" />;\n};\n\ninterface PaymentMethodListFieldsetProps {\n    isEmbedded?: boolean;\n    isInitializingPayment?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    values: PaymentFormValues;\n    isPaymentDataRequired(): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n    resetForm(nextValues?: Partial<FormikState<PaymentFormValues>>): void;\n}\n\nconst PaymentMethodListFieldset: FunctionComponent<PaymentMethodListFieldsetProps> = ({\n    isEmbedded,\n    isInitializingPayment,\n    isPaymentDataRequired,\n    isUsingMultiShipping,\n    methods,\n    onMethodSelect = noop,\n    onUnhandledError,\n    resetForm,\n    values,\n}) => {\n    const { setSubmitted } = useContext(FormContext);\n\n    const handlePaymentMethodSelect = useCallback(\n        (method: PaymentMethod) => {\n            const updatedValues = {\n                ...values,\n                ccCustomerCode: '',\n                ccCvv: '',\n                ccDocument: '',\n                customerEmail: '',\n                customerMobile: '',\n                ccExpiry: '',\n                ccName: '',\n                ccNumber: '',\n                instrumentId: '',\n                paymentProviderRadio: getUniquePaymentMethodId(method.id, method.gateway),\n                shouldCreateAccount: true,\n                shouldSaveInstrument: false,\n            };\n\n            resetForm({ values: updatedValues });\n            setSubmitted(false);\n            onMethodSelect(method);\n        },\n        [values, onMethodSelect, resetForm, setSubmitted],\n    );\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.payment_methods_text\" />\n                </Legend>\n            }\n        >\n            {!isPaymentDataRequired() && <StoreCreditOverlay />}\n\n            <Extension region={ExtensionRegion.PaymentPaymentMethodListBefore}/>\n\n            <PaymentMethodList\n                isEmbedded={isEmbedded}\n                isInitializingPayment={isInitializingPayment}\n                isUsingMultiShipping={isUsingMultiShipping}\n                methods={methods}\n                onSelect={handlePaymentMethodSelect}\n                onUnhandledError={onUnhandledError}\n            />\n        </Fieldset>\n    );\n};\n\nconst paymentFormConfig: WithFormikConfig<PaymentFormProps & WithLanguageProps, PaymentFormValues> =\n    {\n        mapPropsToValues: ({ defaultGatewayId, defaultMethodId }) => ({\n            ccCustomerCode: '',\n            ccCvv: '',\n            ccDocument: '',\n            customerEmail: '',\n            customerMobile: '',\n            ccExpiry: '',\n            ccName: '',\n            ccNumber: '',\n            paymentProviderRadio: getUniquePaymentMethodId(defaultMethodId, defaultGatewayId),\n            instrumentId: '',\n            shouldCreateAccount: true,\n            shouldSaveInstrument: false,\n            terms: false,\n            hostedForm: {\n                cardType: '',\n                errors: {\n                    cardCode: '',\n                    cardCodeVerification: '',\n                    cardExpiry: '',\n                    cardName: '',\n                    cardNumber: '',\n                    cardNumberVerification: '',\n                },\n            },\n            accountNumber: '',\n            routingNumber: '',\n        }),\n\n        handleSubmit: (values, { props: { onSubmit = noop } }) => {\n            onSubmit(\n                omitBy(\n                    values,\n                    (value, key) => isNil(value) || value === '' || key === 'hostedForm',\n                ),\n            );\n        },\n\n        validationSchema: ({\n            language,\n            isTermsConditionsRequired = false,\n            validationSchema,\n        }: PaymentFormProps & WithLanguageProps) =>\n            getPaymentValidationSchema({\n                additionalValidation: validationSchema,\n                isTermsConditionsRequired,\n                language,\n            }),\n    };\n\nexport default withLanguage(withFormik(paymentFormConfig)(memo(PaymentForm)));\n","import {\n    CartChangedError,\n    CheckoutSelectors,\n    CheckoutService,\n    CheckoutSettings,\n    OrderRequestBody,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { compact, find, isEmpty, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { ErrorLogger } from '@bigcommerce/checkout/error-handling-utils';\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps, PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { withAnalytics } from '../analytics';\nimport { withCheckout } from '../checkout';\nimport {\n    ErrorModal,\n    ErrorModalOnCloseProps,\n    isCartChangedError,\n    isErrorWithType,\n} from '../common/error';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TermsConditionsType } from '../termsConditions';\n\nimport mapSubmitOrderErrorMessage, { mapSubmitOrderErrorTitle } from './mapSubmitOrderErrorMessage';\nimport mapToOrderRequestBody from './mapToOrderRequestBody';\nimport PaymentContext from './PaymentContext';\nimport PaymentForm from './PaymentForm';\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodId,\n    PaymentMethodProviderType,\n} from './paymentMethod';\n\nexport interface PaymentProps {\n    errorLogger: ErrorLogger;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void; // TODO: We're currently doing this check in multiple places, perhaps we should move it up so this check get be done in a single place instead.\n    onCartChangedError?(error: CartChangedError): void;\n    onFinalize?(): void;\n    onFinalizeError?(error: Error): void;\n    onReady?(): void;\n    onSubmit?(): void;\n    onSubmitError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutPaymentProps {\n    availableStoreCredit: number;\n    cartUrl: string;\n    defaultMethod?: PaymentMethod;\n    finalizeOrderError?: Error;\n    isInitializingPayment: boolean;\n    isSubmittingOrder: boolean;\n    isStoreCreditApplied: boolean;\n    isTermsConditionsRequired: boolean;\n    methods: PaymentMethod[];\n    shouldExecuteSpamCheck: boolean;\n    shouldLocaliseErrorMessages: boolean;\n    submitOrderError?: Error;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit: number;\n    applyStoreCredit(useStoreCredit: boolean): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n    finalizeOrderIfNeeded(): Promise<CheckoutSelectors>;\n    isPaymentDataRequired(): boolean;\n    loadCheckout(): Promise<CheckoutSelectors>;\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\n    submitOrder(values: OrderRequestBody): Promise<CheckoutSelectors>;\n    checkoutServiceSubscribe: CheckoutService['subscribe'];\n}\n\ninterface PaymentState {\n    didExceedSpamLimit: boolean;\n    isReady: boolean;\n    selectedMethod?: PaymentMethod;\n    shouldDisableSubmit: { [key: string]: boolean };\n    shouldHidePaymentSubmitButton: { [key: string]: boolean };\n    submitFunctions: { [key: string]: ((values: PaymentFormValues) => void) | null };\n    validationSchemas: { [key: string]: ObjectSchema<Partial<PaymentFormValues>> | null };\n}\n\nclass Payment extends Component<\n    PaymentProps & WithCheckoutPaymentProps & WithLanguageProps & AnalyticsContextProps,\n    PaymentState\n> {\n    state: PaymentState = {\n        didExceedSpamLimit: false,\n        isReady: false,\n        shouldDisableSubmit: {},\n        shouldHidePaymentSubmitButton: {},\n        validationSchemas: {},\n        submitFunctions: {},\n    };\n\n    private grandTotalChangeUnsubscribe?: () => void;\n\n    private getContextValue = memoizeOne(() => {\n        return {\n            disableSubmit: this.disableSubmit,\n            setSubmit: this.setSubmit,\n            setValidationSchema: this.setValidationSchema,\n            hidePaymentSubmitButton: this.hidePaymentSubmitButton,\n        };\n    });\n\n    async componentDidMount(): Promise<void> {\n        const {\n            finalizeOrderIfNeeded,\n            onFinalize = noop,\n            onFinalizeError = noop,\n            onReady = noop,\n            usableStoreCredit,\n            checkoutServiceSubscribe,\n        } = this.props;\n\n        if (usableStoreCredit) {\n            this.handleStoreCreditChange(true);\n        }\n\n        await this.loadPaymentMethodsOrThrow();\n\n        try {\n            const state = await finalizeOrderIfNeeded();\n            const order = state.data.getOrder();\n\n            onFinalize(order?.orderId);\n        } catch (error) {\n            if (isErrorWithType(error) && error.type !== 'order_finalization_not_required') {\n                onFinalizeError(error);\n            }\n        }\n\n        this.grandTotalChangeUnsubscribe = checkoutServiceSubscribe(\n            () => this.handleCartTotalChange(),\n            ({ data }) => data.getCheckout()?.grandTotal,\n            ({ data }) => data.getCheckout()?.outstandingBalance,\n        );\n\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        this.setState({ isReady: true });\n        onReady();\n    }\n\n    componentDidUpdate(): void {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        checkEmbeddedSupport(methods.map(({ id }) => id));\n    }\n\n    componentWillUnmount(): void {\n        if (this.grandTotalChangeUnsubscribe) {\n            this.grandTotalChangeUnsubscribe();\n            this.grandTotalChangeUnsubscribe = undefined;\n        }\n\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n    }\n\n    render(): ReactNode {\n        const {\n            defaultMethod,\n            finalizeOrderError,\n            isInitializingPayment,\n            isUsingMultiShipping,\n            methods,\n            applyStoreCredit,\n            ...rest\n        } = this.props;\n\n        const {\n            didExceedSpamLimit,\n            isReady,\n            selectedMethod = defaultMethod,\n            shouldDisableSubmit,\n            validationSchemas,\n            shouldHidePaymentSubmitButton,\n        } = this.state;\n\n        const uniqueSelectedMethodId =\n            selectedMethod && getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway);\n\n        return (\n            <PaymentContext.Provider value={this.getContextValue()}>\n                <ChecklistSkeleton isLoading={!isReady}>\n                    {!isEmpty(methods) && defaultMethod && (\n                        <PaymentForm\n                            {...rest}\n                            defaultGatewayId={defaultMethod.gateway}\n                            defaultMethodId={defaultMethod.id}\n                            didExceedSpamLimit={didExceedSpamLimit}\n                            isInitializingPayment={isInitializingPayment}\n                            isUsingMultiShipping={isUsingMultiShipping}\n                            methods={methods}\n                            onMethodSelect={this.setSelectedMethod}\n                            onStoreCreditChange={this.handleStoreCreditChange}\n                            onSubmit={this.handleSubmit}\n                            onUnhandledError={this.handleError}\n                            selectedMethod={selectedMethod}\n                            shouldDisableSubmit={\n                                (uniqueSelectedMethodId &&\n                                    shouldDisableSubmit[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            shouldHidePaymentSubmitButton={\n                                (uniqueSelectedMethodId &&\n                                    rest.isPaymentDataRequired() &&\n                                    shouldHidePaymentSubmitButton[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                            validationSchema={\n                                (uniqueSelectedMethodId &&\n                                    validationSchemas[uniqueSelectedMethodId]) ||\n                                undefined\n                            }\n                        />\n                    )}\n                </ChecklistSkeleton>\n\n                {this.renderOrderErrorModal()}\n                {this.renderEmbeddedSupportErrorModal()}\n            </PaymentContext.Provider>\n        );\n    }\n\n    private renderOrderErrorModal(): ReactNode {\n        const { finalizeOrderError, language, shouldLocaliseErrorMessages, submitOrderError } =\n            this.props;\n\n        // FIXME: Export correct TS interface\n        const error: any = submitOrderError || finalizeOrderError;\n\n        if (\n            !error ||\n            error.type === 'order_finalization_not_required' ||\n            error.type === 'payment_cancelled' ||\n            error.type === 'payment_invalid_form' ||\n            error.type === 'spam_protection_not_completed' ||\n            error.type === 'invalid_hosted_form_value'\n        ) {\n            return null;\n        }\n\n        return (\n            <ErrorModal\n                error={error}\n                message={mapSubmitOrderErrorMessage(\n                    error,\n                    language.translate.bind(language),\n                    shouldLocaliseErrorMessages,\n                )}\n                onClose={this.handleCloseModal}\n                title={mapSubmitOrderErrorTitle(error, language.translate.bind(language))}\n            />\n        );\n    }\n\n    private renderEmbeddedSupportErrorModal(): ReactNode {\n        const { checkEmbeddedSupport = noop, methods } = this.props;\n\n        try {\n            checkEmbeddedSupport(methods.map(({ id }) => id));\n        } catch (error) {\n            if (error instanceof Error) {\n                return <ErrorModal error={error} onClose={this.handleCloseModal} />;\n            }\n        }\n\n        return null;\n    }\n\n    private disableSubmit: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldDisableSubmit } = this.state;\n\n        if (shouldDisableSubmit[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldDisableSubmit: {\n                ...shouldDisableSubmit,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private hidePaymentSubmitButton: (method: PaymentMethod, disabled?: boolean) => void = (\n        method,\n        disabled = true,\n    ) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldHidePaymentSubmitButton } = this.state;\n\n        if (shouldHidePaymentSubmitButton[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldHidePaymentSubmitButton: {\n                ...shouldHidePaymentSubmitButton,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private handleBeforeUnload: (event: BeforeUnloadEvent) => string | undefined = (event) => {\n        const { defaultMethod, isSubmittingOrder, language } = this.props;\n        const { selectedMethod = defaultMethod } = this.state;\n\n        if (\n            !isSubmittingOrder ||\n            !selectedMethod ||\n            selectedMethod.type === PaymentMethodProviderType.Hosted ||\n            selectedMethod.type === PaymentMethodProviderType.PPSDK ||\n            selectedMethod.skipRedirectConfirmationAlert\n        ) {\n            return;\n        }\n\n        const message = language.translate('common.leave_warning');\n\n        event.returnValue = message;\n\n        return message;\n    };\n\n    private handleCloseModal: (event: Event, props: ErrorModalOnCloseProps) => Promise<void> =\n        async (_, { error }) => {\n            if (!error) {\n                return;\n            }\n\n            const { cartUrl, clearError, loadCheckout } = this.props;\n            const { type: errorType } = error as any; // FIXME: Export correct TS interface\n\n            if (\n                errorType === 'provider_fatal_error' ||\n                errorType === 'order_could_not_be_finalized_error'\n            ) {\n                window.location.replace(cartUrl || '/');\n            }\n\n            if (errorType === 'tax_provider_unavailable') {\n                window.location.reload();\n            }\n\n            if (errorType === 'cart_consistency') {\n                await loadCheckout();\n            }\n\n            if (isErrorWithType(error) && error.body) {\n                const { body, headers, status } = error;\n\n                if (body.type === 'provider_error' && headers.location) {\n                    window.top?.location.assign(headers.location);\n                }\n\n                // Reload the checkout object to get the latest `shouldExecuteSpamCheck` value,\n                // which will in turn make `SpamProtectionField` visible again.\n                // NOTE: As a temporary fix, we're checking the status code instead of the error\n                // type because of an issue with Nginx config, which causes the server to return\n                // HTML page instead of JSON response when there is a 429 error.\n                if (\n                    status === 429 ||\n                    body.type === 'spam_protection_expired' ||\n                    body.type === 'spam_protection_failed'\n                ) {\n                    this.setState({ didExceedSpamLimit: true });\n\n                    await loadCheckout();\n                }\n            }\n\n            clearError(error);\n        };\n\n    private handleStoreCreditChange: (useStoreCredit: boolean) => void = async (useStoreCredit) => {\n        const { applyStoreCredit, onUnhandledError = noop } = this.props;\n\n        try {\n            await applyStoreCredit(useStoreCredit);\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    };\n\n    private handleError: (error: Error) => void = (error: Error) => {\n        const { onUnhandledError = noop, errorLogger } = this.props;\n\n        const { type } = error as any;\n\n        if (type === 'unexpected_detachment') {\n            errorLogger.log(error);\n\n            return;\n        }\n\n        return onUnhandledError(error);\n    };\n\n    private handleSubmit: (values: PaymentFormValues) => void = async (values) => {\n        const {\n            defaultMethod,\n            loadPaymentMethods,\n            isPaymentDataRequired,\n            onCartChangedError = noop,\n            onSubmit = noop,\n            onSubmitError = noop,\n            submitOrder,\n            analyticsTracker\n        } = this.props;\n\n        const { selectedMethod = defaultMethod, submitFunctions } = this.state;\n\n        analyticsTracker.clickPayButton({shouldCreateAccount: values.shouldCreateAccount});\n\n        const customSubmit =\n            selectedMethod &&\n            submitFunctions[getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway)];\n\n        if (customSubmit) {\n            return customSubmit(values);\n        }\n\n        try {\n            const state = await submitOrder(mapToOrderRequestBody(values, isPaymentDataRequired()));\n            const order = state.data.getOrder();\n\n            analyticsTracker.paymentComplete();\n\n            onSubmit(order?.orderId);\n        } catch (error) {\n            analyticsTracker.paymentRejected();\n\n            if (isErrorWithType(error) && error.type === 'payment_method_invalid') {\n                return loadPaymentMethods();\n            }\n\n            if (isCartChangedError(error)) {\n                return onCartChangedError(error);\n            }\n\n            onSubmitError(error);\n        }\n    };\n\n    private setSelectedMethod: (method?: PaymentMethod) => void = (method) => {\n        const { selectedMethod } = this.state;\n\n        if (selectedMethod === method) {\n            return;\n        }\n\n        if (method) {\n            this.trackSelectedPaymentMethod(method);\n        }\n\n        this.setState({ selectedMethod: method });\n    };\n\n    private setSubmit: (\n        method: PaymentMethod,\n        fn: (values: PaymentFormValues) => void | null,\n    ) => void = (method, fn) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { submitFunctions } = this.state;\n\n        if (submitFunctions[uniqueId] === fn) {\n            return;\n        }\n\n        this.setState({\n            submitFunctions: {\n                ...submitFunctions,\n                [uniqueId]: fn,\n            },\n        });\n    };\n\n    private setValidationSchema: (\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ) => void = (method, schema) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { validationSchemas } = this.state;\n\n        if (validationSchemas[uniqueId] === schema) {\n            return;\n        }\n\n        this.setState({\n            validationSchemas: {\n                ...validationSchemas,\n                [uniqueId]: schema,\n            },\n        });\n    };\n\n    private trackSelectedPaymentMethod(method: PaymentMethod) {\n        const { analyticsTracker } = this.props;\n\n        const methodName = method.config.displayName || method.id;\n        const methodId = method.id;\n\n        analyticsTracker.selectedPaymentMethod(methodName, methodId);\n    }\n\n    private async loadPaymentMethodsOrThrow(): Promise<void> {\n        const {\n            loadPaymentMethods,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await loadPaymentMethods();\n\n            const selectedMethod = this.state.selectedMethod || this.props.defaultMethod;\n\n            if (selectedMethod) {\n                this.trackSelectedPaymentMethod(selectedMethod);\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    private async handleCartTotalChange(): Promise<void> {\n        const { isReady } = this.state;\n\n        if (!isReady) {\n            return;\n        }\n\n        this.setState({ isReady: false });\n\n        await this.loadPaymentMethodsOrThrow();\n\n        this.setState({ isReady: true });\n    }\n}\n\nexport function mapToPaymentProps({\n        checkoutService,\n        checkoutState,\n}: CheckoutContextProps): WithCheckoutPaymentProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getOrder,\n            getPaymentMethod,\n            getPaymentMethods,\n            isPaymentDataRequired,\n            getPaymentProviderCustomer,\n        },\n        errors: { getFinalizeOrderError, getSubmitOrderError },\n        statuses: { isInitializingPayment, isSubmittingOrder },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const customer = getCustomer();\n    const consignments = getConsignments();\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n\n    const { isComplete = false } = getOrder() || {};\n    let methods = getPaymentMethods() || EMPTY_ARRAY;\n\n    // TODO: In accordance with the checkout team, this functionality is temporary and will be implemented in the backend instead.\n    if (paymentProviderCustomer?.stripeLinkAuthenticationState) {\n        const stripeUpePaymentMethod = methods.filter(method =>\n            method.id === 'card' && method.gateway === PaymentMethodId.StripeUPE\n        );\n\n        methods = stripeUpePaymentMethod.length ? stripeUpePaymentMethod : methods;\n    }\n\n    if (!checkout || !config || !customer || isComplete) {\n        return null;\n    }\n\n    const {\n        enableTermsAndConditions: isTermsConditionsEnabled,\n        features,\n        orderTermsAndConditionsType: termsConditionsType,\n        orderTermsAndConditions: termsCondtitionsText,\n        orderTermsAndConditionsLink: termsCondtitionsUrl,\n    } = config.checkoutSettings as CheckoutSettings & { orderTermsAndConditionsLocation: string };\n\n    const isTermsConditionsRequired = isTermsConditionsEnabled;\n    const selectedPayment = find(checkout.payments, {\n        providerType: PaymentMethodProviderType.Hosted,\n    });\n\n    const { isStoreCreditApplied } = checkout;\n\n    let selectedPaymentMethod;\n    let filteredMethods;\n\n    filteredMethods = methods.filter((method: PaymentMethod) => {\n        if (method.id === PaymentMethodId.Bolt && method.initializationData) {\n            return !!method.initializationData.showInCheckout;\n        }\n\n        if (method.id === PaymentMethodId.BraintreeLocalPaymentMethod) {\n            return false;\n        }\n\n        return true;\n    });\n\n    if (consignments && consignments.length > 1) {\n        const multiShippingIncompatibleMethodIds: string[] = [\n            PaymentMethodId.AmazonPay,\n        ];\n\n        filteredMethods = methods.filter((method: PaymentMethod) => {\n            return !multiShippingIncompatibleMethodIds.includes(method.id);\n        });\n    }\n\n    if (selectedPayment) {\n        selectedPaymentMethod = getPaymentMethod(\n            selectedPayment.providerId,\n            selectedPayment.gatewayId,\n        );\n        filteredMethods = selectedPaymentMethod\n            ? compact([selectedPaymentMethod])\n            : filteredMethods;\n    } else {\n        selectedPaymentMethod = find(filteredMethods, {\n            config: { hasDefaultStoredInstrument: true },\n        });\n        // eslint-disable-next-line no-self-assign\n        filteredMethods = filteredMethods;\n    }\n\n    return {\n        applyStoreCredit: checkoutService.applyStoreCredit,\n        availableStoreCredit: customer.storeCredit,\n        cartUrl: config.links.cartLink,\n        clearError: checkoutService.clearError,\n        defaultMethod: selectedPaymentMethod || filteredMethods[0],\n        finalizeOrderError: getFinalizeOrderError(),\n        finalizeOrderIfNeeded: checkoutService.finalizeOrderIfNeeded,\n        loadCheckout: checkoutService.loadCheckout,\n        isInitializingPayment: isInitializingPayment(),\n        isPaymentDataRequired,\n        isStoreCreditApplied,\n        isSubmittingOrder: isSubmittingOrder(),\n        isTermsConditionsRequired,\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\n        methods: filteredMethods,\n        shouldExecuteSpamCheck: checkout.shouldExecuteSpamCheck,\n        shouldLocaliseErrorMessages:\n            features['PAYMENTS-6799.localise_checkout_payment_error_messages'],\n        submitOrder: checkoutService.submitOrder,\n        submitOrderError: getSubmitOrderError(),\n        checkoutServiceSubscribe: checkoutService.subscribe,\n        termsConditionsText:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.TextArea\n                ? termsCondtitionsText\n                : undefined,\n        termsConditionsUrl:\n            isTermsConditionsRequired && termsConditionsType === TermsConditionsType.Link\n                ? termsCondtitionsUrl\n                : undefined,\n        usableStoreCredit:\n            checkout.grandTotal > 0 ? Math.min(checkout.grandTotal, customer.storeCredit || 0) : 0,\n    };\n}\n\nexport default withAnalytics(withLanguage(withCheckout(mapToPaymentProps)(Payment)));\n","import { OrderPaymentRequestBody, OrderRequestBody } from '@bigcommerce/checkout-sdk';\nimport { isEmpty, isNil, omitBy } from 'lodash';\n\nimport { PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { unformatCreditCardExpiryDate, unformatCreditCardNumber } from './creditCard';\nimport {\n    hasCreditCardExpiry,\n    hasCreditCardNumber,\n    parseUniquePaymentMethodId,\n} from './paymentMethod';\n\nexport default function mapToOrderRequestBody(\n    values: PaymentFormValues,\n    isPaymentDataRequired: boolean,\n): OrderRequestBody {\n    if (!isPaymentDataRequired) {\n        return {};\n    }\n\n    const { paymentProviderRadio, ...rest } = values;\n    const { methodId, gatewayId } = parseUniquePaymentMethodId(paymentProviderRadio);\n    const payload: OrderRequestBody = {\n        payment: { gatewayId, methodId },\n    };\n    const paymentData = omitBy(\n        {\n            ...rest,\n            ccExpiry: hasCreditCardExpiry(values)\n                ? unformatCreditCardExpiryDate(values.ccExpiry)\n                : null,\n            ccNumber: hasCreditCardNumber(values)\n                ? unformatCreditCardNumber(values.ccNumber)\n                : null,\n        },\n        isNil,\n    ) as OrderPaymentRequestBody['paymentData'];\n\n    if (payload.payment && !isEmpty(paymentData)) {\n        payload.payment.paymentData = paymentData;\n    }\n\n    return payload;\n}\n","import { CartChangedError } from '@bigcommerce/checkout-sdk';\n\nexport default function isCartChangedError(error: unknown): error is CartChangedError {\n    const requestError = error as CartChangedError;\n\n    return requestError.type === 'cart_changed';\n}\n","import { Placement } from '@popperjs/core';\nimport React, { MouseEventHandler, ReactElement, ReactNode, useCallback, useEffect, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n    children?: ReactNode;\n}\n\nconst DropdownTrigger = ({\n    placement = 'bottom-start',\n    dropdown,\n    children\n}: DropdownTriggerProps): ReactElement => {\n    const [shouldShow, setShouldShow] = useState(false);\n\n    const getRootElement = useCallback(() => {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }, []);\n\n    const handleClose = useCallback(() => {\n        if (!shouldShow) {\n            return;\n        }\n\n        setShouldShow(false);\n    }, [shouldShow]);\n\n    const handleOpen = useCallback(() => {\n        if (shouldShow) {\n            return;\n        }\n\n        setShouldShow(true);\n    }, [shouldShow]);\n\n    const handleClick: MouseEventHandler<HTMLElement> = useCallback(() => {\n        if (shouldShow) {\n            handleClose();\n        } else {\n            handleOpen();\n        }\n    }, [shouldShow, handleClose, handleOpen]);\n\n    useEffect(() => {\n        const rootElement = getRootElement();\n\n        if (shouldShow) {\n            rootElement?.addEventListener('click', handleClose);\n        } else {\n            rootElement?.removeEventListener('click', handleClose);\n        }\n\n        return () => {\n            rootElement?.removeEventListener('click', handleClose);\n        };\n    }, [shouldShow, handleClose, getRootElement]);\n\n    return (\n        <Manager>\n            <Reference>\n                {({ ref }) => (\n                    <div className=\"dropdownTrigger\" onClick={handleClick} ref={ref}>\n                        {children}\n                    </div>\n                )}\n            </Reference>\n\n            <Popper\n                modifiers={[\n                    { name: 'hide', enabled: false },\n                    { name: 'flip', enabled: false },\n                    { name: 'preventOverflow', enabled: false },\n                ]}\n                placement={placement}\n            >\n                {({ ref, style }) =>\n                    !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ref}\n                            style={{\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            }}\n                        >\n                            {dropdown}\n                        </div>\n                    )\n                }\n            </Popper>\n        </Manager>\n    );\n};\n\nexport default DropdownTrigger;\n","import classNames from 'classnames';\nimport React, { FunctionComponent } from 'react';\n\ninterface ModalHeaderProps {\n    children: React.ReactNode;\n    additionalClassName?: string;\n}\n\nconst ModalHeader: FunctionComponent<ModalHeaderProps> = ({ children, additionalClassName }) => (\n    <h2\n        className={classNames(\n            'modal-header-title optimizedCheckout-headingSecondary',\n            additionalClassName,\n        )}\n        data-test=\"modal-heading\"\n    >\n        {children}\n    </h2>\n);\n\nexport default ModalHeader;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { ReactNode, useState } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children?: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nconst Accordion = ({\n    children,\n    className = 'accordion',\n    defaultSelectedItemId,\n    isDisabled,\n    onSelect = noop,\n}: AccordionProps) => {\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\n\n    const handleToggleItem: (id: string) => void = (id) => {\n        if (isDisabled) {\n            return;\n        }\n\n        setSelectedItemId(id);\n        onSelect(id);\n    };\n\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\n        return {\n            onToggle: handleToggleItem,\n            selectedItemId: newSelectedItemId,\n        };\n    });\n\n    return (\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\n            <ul className={className}>{children}</ul>\n        </AccordionContext.Provider>\n    );\n};\n\nexport default Accordion;\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useEffect,\n    useMemo,\n} from 'react';\n\nimport { Accordion } from '@bigcommerce/checkout/ui';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\n\nexport interface ChecklistProps {\n    children?: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    useEffect(() => {\n        return () => {\n            setFieldValue(name, '');\n        };\n    }, []);\n\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import React, {\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactElement,\n    ReactNode,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler<HTMLDivElement> }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nconst ModalTrigger = ({ children, modal }: ModalTriggerProps): ReactElement => {\n    const [isOpen, setIsOpen] = useState(false);\n    const canHandleEventRef = useRef(false);\n\n    useEffect(() => {\n        canHandleEventRef.current = true;\n\n        return () => {\n            canHandleEventRef.current = false;\n        };\n    }, []);\n\n    const handleOpen = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(true);\n    };\n\n    const handleClose = (): void => {\n        if (!canHandleEventRef.current) {\n            return;\n        }\n\n        setIsOpen(false);\n    };\n\n    const handleKeyOpen = (keyboardEvent: KeyboardEvent<HTMLElement>): void => {\n        if (keyboardEvent.key === 'Enter') {\n            handleOpen();\n        }\n    };\n\n    return (\n        <>\n            {children({\n                onClick: handleOpen,\n                onKeyPress: handleKeyOpen,\n            })}\n\n            {modal({\n                isOpen,\n                onRequestClose: handleClose,\n            })}\n        </>\n    );\n};\n\nexport default ModalTrigger;\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Placement } from '@popperjs/core';\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n    children?: ReactNode;\n}\n\nexport interface TooltipTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\n    static defaultProps = {\n        placement: 'bottom',\n    };\n\n    state: Readonly<TooltipTriggerState> = {\n        shouldShow: false,\n    };\n\n    render() {\n        const { children, placement, tooltip } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <span\n                            onBlur={this.handleHide}\n                            onFocus={this.handleShow}\n                            onMouseEnter={this.handleShow}\n                            onMouseLeave={this.handleHide}\n                            ref={ref}\n                        >\n                            {children}\n                        </span>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={[\n                        { name: 'hide', enabled: false },\n                        { name: 'flip', enabled: false },\n                        { name: 'preventOverflow', enabled: false },\n                    ]}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        shouldShow && (\n                            <div ref={ref} style={style}>\n                                {tooltip}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: true });\n    };\n\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: false });\n    };\n}\n"],"names":["height","viewBox","width","xmlns","d","memo","bodyClassName","children","className","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","onToggle","selectedItemId","useContext","AccordionContext","A","isSelected","transitionEndListener","useCallback","node","done","addEventListener","target","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","id","props","Input","checked","type","Label","htmlFor","isDisabled","value","content","htmlId","kebabCase","label","rest","name","Checklist","C","renderInput","memoizeOne","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","render","closeButtonLabel","footer","header","additionalHeaderClassName","additionalBodyClassName","additionalModalClassName","onRequestClose","noop","shouldShowCloseButton","handleClose","event","ariaHideApp","bodyOpenClassName","base","afterOpen","beforeClose","closeTimeoutMS","overlayClassName","shouldCloseOnEsc","shouldCloseOnOverlayClick","href","onClick","preventDefault","Boolean","forwardRef","ref","additionalClassName","legend","testId","coupon","displayName","TranslatedString","code","giftCertificate","ShopperCurrency","amount","used","remaining","isRemoving","onRemove","AppliedCouponChecklistItem","onRemoved","handleRemove","AppliedGiftCertificateChecklistItem","coupons","giftCertificates","isRemovingCoupon","isRemovingGiftCertificate","onRemovedCoupon","onRemovedGiftCertificate","length","map","key","RedeemableForm","appliedRedeemableError","isApplyingRedeemable","clearError","submitForm","language","checkoutState","statuses","isSubmittingOrder","themeV2","handleSubmitForm","setSubmitted","handleKeyDown","keyCode","handleSubmit","renderLabel","hidden","renderErrorMessage","errorCode","errorMessage","errors","Alert","Error","message","TextInput","translate","onKeyDown","Button","isLoading","variant","Secondary","renderContent","FormField","input","withLanguage","mapPropsToValues","redeemableCode","applyCoupon","applyGiftCertificate","trim","error","validationSchema","required","shouldCollapseCouponCode","showAppliedRedeemables","formProps","Toggle","openByDefault","toggle","isOpen","createContext","withIconContainer","AlertType","icon","describedBy","useId","Info","Success","Warning","renderDefaultIcon","role","mapToRedeemableProps","context","checkoutService","data","getConfig","getCoupons","getGiftCertificates","isApplyingCoupon","isApplyingGiftCertificate","getApplyCouponError","getApplyGiftCertificateError","getRemoveCouponError","getRemoveGiftCertificateError","config","removeCoupon","removeGiftCertificate","removedRedeemableError","checkoutSettings","isCouponCodeCollapsed","isFloatingLabelEnabled","body","renderModal","Modal","size","Small","ModalTrigger","modal","split","line","Fragment","TermsConditionsType","TermsConditionsModalCheckboxField","terms","translatedLabel","url","parsedLabel","parseAnchor","labelContent","ModalHeader","CheckboxFormField","TermsConditionsCheckboxField","useMemo","TranslatedHtml","TermsConditionsTextField","defaultValue","readOnly","Fieldset","Legend","TextArea","isTermsConditionsTextArea","isTermsConditionModal","mapSubmitOrderErrorMessage","shouldLocalise","subtype","includes","err","join","mapSubmitOrderErrorTitle","unformatCreditCardExpiryDate","month","year","RegExp","test","slice","unformatCreditCardNumber","separator","card","number","replace","getUniquePaymentMethodId","methodId","gatewayId","compact","parseUniquePaymentMethodId","undefined","hasCreditCardNumber","values","Object","hasCreditCardExpiry","TermsConditions","termsConditionsUrl","termsConditionsText","TermsConditionsField","Link","getPaymentValidationSchema","additionalValidation","isTermsConditionsRequired","schemaFields","paymentProviderRadio","schemaFieldsWithTerms","concat","oneOf","getTermsConditionsValidationSchema","PaymentMethodType","getPaymentMethodName","method","translations","PaymentMethodId","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","capitalize","get","onUnhandledError","useEffect","initializePayment","BigCommercePaymentsPayLater","bigcommerce_payments_paylater","bannerContainerId","deinitializePayment","BraintreePaypalCredit","braintree","containerId","instrumentTypeMap","AMEX","instrument","component","lazy","BITCOIN","BITCOIN_CASH","BANCONTACT","CARNET","CB","DINERS","DANKORT","DISCOVER","DOGECOIN","ELECTRON","ELO","ETHEREUM","HIPER","JCB","LITECOIN","MADA","MAESTRO","MC","SHIBA_INU","TROY","CUP","USD_COIN","VISA","mapFromPaymentMethodCardType","filterInstrumentTypes","instrumentTypes","supportedInstrumentTypes","record","filter","cardType","iconProps","Medium","IconComponent","instrumentType","find","getPaymentMethodIconComponent","Suspense","selectedCardType","cardTypes","filteredCardTypes","getPaymentMethodTitle","basePath","storeCountryCode","cdnPath","path","paymentWithLogo","initializationData","methodsWithLogo","methodName","methodDisplayName","isCreditCard","toLowerCase","PaypalCommerceCredit","payPalCreditProductBrandName","credit","AdyenV2","AdyenV3","getPaymentMethodDisplayName","customTitles","CreditCard","logoUrl","titleText","BraintreeVenmo","subtitle","BraintreeAch","BraintreeLocalPaymentMethod","BigCommercePaymentsPayPal","BigCommercePaymentsAlternativeMethod","PaypalCommerce","PaypalCommerceAlternativeMethod","isExperimentEnabled","ApplePay","PayWithGoogle","Humm","enableBillie","Laybuy","Masterpass","Quadpay","Sezzle","Zip","Barclaycard","Mollie","Checkoutcom","StripeV3","StripeUPE","WorldpayAccess","gateway","BlueSnapDirect","PaypalCommerceVenmo","BigCommercePaymentsVenmo","PaypalPaymentsPro","Ratepay","connectFormik","withCheckout","getInstruments","instruments","storeProfile","cdnBasePath","formik","alt","src","getSubtitle","supportedCards","instrumentSelected","provider","bigpayToken","instrumentId","getInstrumentForMethod","hostedForm","ccNumber","brand","getSelectedCardType","PaymentFormContext","usePaymentFormContext","PaymentFormProvider","paymentForm","Provider","createInjectHoc","FormContext","displayNamePrefix","AdyenCardFields","getInitialValidationState","shouldShowNumberField","validationState","CardNumber","valid","SecurityCode","ExpiryDate","isFieldInvalid","fieldKey","fieldsValidation","verificationFieldsContainerId","selectedInstrument","paymentMethod","cardValidationState","setFieldsValidation","useState","fieldType","endDigits","last4","showValidationIcon","style","transform","right","isBankAccountInstrument","Component","state","canHandleEvent","handleOpen","this","setState","handleKeyOpen","keyboardEvent","componentDidMount","componentWillUnmount","onKeyPress","clipRule","fill","fillRule","xmlSpace","rx","stroke","x","y","maskUnits","maskType","mask","DropdownTrigger","shouldShow","handleClick","nativeEvent","getRootElement","removeEventListener","placement","dropdown","Manager","Reference","Popper","modifiers","enabled","zIndex","document","getElementById","defaultProps","isAchInstrument","isSepaInstrument","AccountInstrumentUseNewButton","AccountInstrumentMenuItem","externalId","AchInstrumentMenuItem","accountNumber","issuer","SepaInstrumentMenuItem","BankInstrumentMenuItem","AccountInstrumentOption","AccountInstrumentMenu","selectedInstrumentId","onSelectInstrument","onUseNewInstrument","AccountInstrumentSelectButton","AccountInstrumentSelect","PureComponent","setTimeout","updateFieldValue","componentDidUpdate","prevProps","prevSelectedInstrumentId","otherFieldProps","form","setFieldValue","isCardInstrument","isAccountInstrument","ManageInstrumentsRow","onDeleteInstrument","handleDelete","isDeletingInstrument","LoadingOverlay","mapFromInstrumentCardType","cardInfo","isExpired","expirationDate","expiryMonth","expiryYear","isValid","niceType","status","ManageInstrumentsModal","isConfirmingDelete","handleAfterOpen","onAfterOpen","handleCancel","getDeleteInstrumentError","deleteInstrumentError","handleConfirmDelete","deleteInstrument","onDeleteInstrumentError","handleDeleteInstrument","renderFooter","cardInstruments","bankInstruments","accountInstruments","achInstrument","bankAndAccountInstruments","ManageAccountInstrumentsTable","isLoadingInstruments","Primary","contextType","CheckoutContext","InstrumentMenuItem","shouldHideExpiryDate","cardTitle","endingIn","expiryDate","InstrumentOption","InstrumentUseNewButton","InstrumentMenu","InstrumentSelectButton","InstrumentSelect","validateInstrument","display","renderField","CheckboxInput","FormFieldError","errorId","translationId","showSave","showSetAsDefault","setAsDefaultEnabled","saveIsChecked","getFieldValue","addingNewInstrument","hasAnyOtherInstruments","defaultInstrument","useProps","HostedWidgetPaymentComponent","isAddingNewCard","getDefaultInstrumentId","handleUseNewCard","handleSelectInstrument","isInstrumentFeatureAvailable","isInstrumentFeatureAvailableProp","loadInstruments","setValidationSchema","getValidationSchema","initializeMethod","prevState","isPaymentDataRequired","deinitializeCustomer","setSubmit","hideWidget","isInitializing","shouldHideInstrumentExpiryDate","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","hideContentWhenLoading","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","renderEditButtonIfAvailable","hideVerificationFields","isInstrumentCardNumberRequired","isInstrumentCardNumberRequiredProp","assertIsCardInstrument","hideContentWhenSignedOut","isSignInRequired","isSignedIn","additionalContainerClassName","shouldRenderCustomInstrument","renderCustomPaymentForm","tabIndex","storedCardValidationSchema","getSelectedInstrument","shouldShowEditButton","buttonId","translatedString","shouldShowDescriptor","paymentDescriptor","initializeCustomer","signInCustomer","Promise","resolve","PROVIDERS_WITHOUT_CARD_CODE","createSelector","cart","getCart","lineItems","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","digitalItems","trustedShippingAddress","isInstrumentCardCodeRequired","isVaultingCardNumberValidationAvailable","physicalItems","showAdditionalActionContent","cancelAdditionalActionModalFlow","additionalActionContainerId","hidePaymentSubmitButton","disableSubmit","customer","getCustomer","isGuest","isVaultingEnabled","signOut","signOutCustomer","AdyenV2PaymentMethodType","toResolvableComponent","useRef","shouldShowModal","setShowAdditionalActionContent","setCardValidationState","cardVerificationContainerId","threeDS2ContainerId","bcmc","onBeforeLoad","shopperInteraction","current","onComplete","cancelAdditionalAction","onLoad","cancel","initializeAdyenPayment","options","adyenOptions","scheme","hasHolderName","holderNameRequired","ideal","showImage","adyenv2","hasVaultedInstruments","additionalActionOptions","widgetSize","validateCardFields","isLoadingPaymentMethod","formContextProps","isSubmitted","LocaleProvider","UntrustedShippingCardVerificationType","shouldRenderAdditionalActionContentModal","isModalVisible","overlay","AdyenV3PaymentMethodType","setShouldRenderAdditionalActionContentModal","isAdditionalActionContentModalVisible","setIsAdditionalActionContentModalVisible","onActionHandled","adyenv3","isUsingMultiShipping","isCardVaultingEnabled","getHostedPaymentMethodDerivedProps","filterAccountInstruments","filterTrustedInstruments","isPaymentDataSubmitted","currentMethodInstruments","trustedInstruments","isNewAddress","HostedPaymentMethodComponent","isAddingNewInstrument","handleUseNewInstrument","description","getDefaultInstrument","HostedPaymentComponent","paymentToken","initializeAmazonPayV2Payment","amazonpay","editButtonId","reload","window","location","getCheckout","checkout","some","payments","providerId","onSignOut","applepay","shippingLabel","subtotalLabel","providerOptionsKey","providerOptionsData","currentInstrument","shouldConfirmInstrument","buttonActionsRef","fieldsValuesRef","renderButtonRef","hasPayPalButton","termsValue","shouldSaveInstrument","validateForm","validationErrors","keys","validateButton","disable","enable","togglePaypalButton","container","shouldRenderPayPalButtonOnInitialization","onRenderButton","onInit","onError","onValidate","reject","keysValidation","forEach","setFieldTouched","onInitButton","actions","getFieldsValues","setCurrentInstrument","trustedAccountInstruments","hasAccountInstruments","isComplete","shouldCreateNewInstrument","allInstruments","widgetContainerId","extraOptions","apmFieldsContainer","apmFieldsStyles","variables","fontFamily","colorBackground","textColor","fontSizeBase","spacingUnit","borderColor","borderRadius","borderWidth","rules","backgroundColor","color","fontSize","formatCreditCardNumber","unformattedValue","gaps","gapIndex","reduce","output","index","CreditCardNumberInput","inputRef","createRef","nextSelectionEnd","previousValue","selectionEnd","maxLength","max","info","lengths","formattedValue","setSelectionRange","autoComplete","meta","strokeWidth","fontWeight","letterSpacing","opacity","Large","TooltipTrigger","tooltip","IconHelp","shouldShowCardCodeField","trimmedMonth","trimmedYear","formatCreditCardExpiryDate","placeholder","shouldShowCustomerCodeField","memoize","instrumentBrand","instrumentLast4","isCardCodeRequired","isCardNumberRequired","schema","ccCvv","cvv","ccCustomerCode","ccExpiry","ccName","parent","createLocaleContext","inputDateFormat","currency","createCurrencyService","date","inputFormat","getLanguageService","CreditCardPaymentMethodComponent","filterInstruments","getCreditCardPaymentMethodDerivedProps","discoverInfo","creditCardType","getTypeInfo","visaInfo","updateCard","patterns","addCard","configureCardValidator","_prevProps","cardFieldset","getStoredCardValidationFieldset","isInstrumentCardCodeRequiredProp","storeConfig","LocaleContext","requireCustomerCode","cardValidationSchema","getInstrumentValidationSchema","getCreditCardValidationSchema","isCustomerCodeRequired","appearFocused","cardCodeId","cardNumberId","cardExpiryId","focusedFieldType","additionalFields","cardNameId","shape","cardExpiry","cardName","cardNumber","isCardExpiryRequired","cardCodeVerification","cardNumberVerification","cardExpiryVerification","CreditCardInputStylesType","getCreditCardInputStyles","properties","Default","createElement","parentContainer","appendChild","FormFieldContainer","hasError","Focus","element","getAppliedStyles","parentElement","removeChild","showCardHolderName","isHostedFormEnabled","setFocusedFieldType","isCardHolderNameRequired","getHostedFieldId","getHostedFormOptions","styleProps","shouldRenderHostedFields","styleContainerId","fields","accessibilityLabel","styles","default","focus","onBlur","onCardTypeChange","onEnter","onFocus","forIn","fieldErrors","errorKey","getHostedStoredCardValidationFieldset","initializeBigCommercePaymentsCreditCardPayment","bigcommerce_payments_creditcards","getHostedCreditCardValidationSchema","getHostedInstrumentValidationSchema","renderPayPalCardComponent","PoweredByPayPalFastlaneLabel","result","Tiny","showPayPalCardSelector","setSelectedInstrument","getPaymentProviderCustomer","paymentProviderCustomer","paypalFastlaneCustomer","useBigCommercePaymentsFastlaneInstruments","shouldShowInstrumentsForm","paypalCardComponentRef","isInitializingPayment","bigcommerce_payments_fastlane","finalError","isErrorWithTranslationKey","translationKey","COUNTRY_DATA","dialCode","getCountryData","countryName","country","formFieldData","requiredFieldErrorTranslationIds","ratepayPhoneCountryCode","ratepayPhoneNumber","ratepayBirthDate","nullable","fieldName","matches","ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE","custom","DynamicFormFieldType","DATE","TEXT","fieldsValues","bigcommerce_payments_ratepay","legalTextContainer","loadingContainerId","ratepaySpecificError","e","provider_error","translationCode","ratepayError","ratepaySpecificErrorCode","CustomError","shouldBeTranslatedAsHtml","fieldId","getBigCommercePaymentsRatePayValidationSchema","billing","getBillingAddress","getCountryInfo","marginBottom","DynamicFormField","extraClass","BluesnapECPAccountType","useFloatingLabel","DynamicInput","TELEPHONE","helperLabel","items","rows","renderSelect","DROPDOWM","shouldRenderCompanyName","ConsumerChecking","ConsumerSavings","CorporateChecking","CorporateSavings","shouldRenderFields","min","routingNumber","companyName","accountType","getFormValues","setDisabled","shopperPermission","initializeEcp","deinitializeEcp","shouldShowForm","company","getEcpValidationSchema","paddingBottom","isBlueSnapDirectInitializationData","object","sepaCreditorCompanyName","array","idealIssuers","Array","isArray","iban","firstName","lastName","toggleSubmitButton","initializeSepa","deinitializeSepa","getSepaValidationSchema","creditorName","bic","idealIssuersSelectOptions","issuerId","issuerName","initializeIdeal","getIdealValidationSchema","deinitializeIdeal","isLoadingIframe","setisLoadingIframe","paymentPageContent","setPaymentPageContent","paymentPageContentRef","cancelBlueSnapV2ModalFlow","cancelBlueSnapV2Payment","initializeBlueSnapV2Payment","bluesnapv2","border","appendPaymentPageContent","initializePayByBank","getPayByBankValidationSchema","deinitializePayByBank","initializeBoltPayment","bolt","useBigCommerceCheckout","agreementTranslationOptions","privacyPolicyUrl","termsUrl","benefitsList","BoltCreateAccountCheckbox","showCreateAccountCheckbox","setShowCreateAccountCheckbox","boltEmbeddedContainerId","onPaymentSelect","hasBoltAccount","isGuestCustomer","embeddedOneClickEnabled","BraintreeAchFieldType","OwnershipTypes","AccountTypes","accountTypeOptions","Savings","Checking","ownershipTypeOptions","Personal","Business","defaultBraintreeAchFormFields","AccountType","AccountNumber","RoutingNumber","OwnershipType","personalBraintreeAchFormFields","FirstName","LastName","businessBraintreeAchFormFields","BusinessName","formFields","validateBraintreeAchForm","braintreeAchFormValues","businessName","ownershipType","isValidAccountNumber","isValidRoutingNumber","isValidFirstName","isValidLastName","isValidBusinessName","all","isValidDepositoryName","resetFormValidation","getTranslatedLabelByFieldName","braintreeAchFormLabelsMap","isBraintreeAchFormFieldName","fieldValues","updateMandateText","fullName","String","depositoryName","outstandingBalance","storeName","symbol","mandateTextTranslationKey","formattedDate","Date","now","toJSON","reverse","mandateTextTranslationProps","currentDate","mandateText","isValidForm","setIsValidForm","defaultFormValues","shouldSetAsDefaultInstrument","orderConsent","entries","resetFormValues","shouldShowMandateTextCheckbox","validate","mandateTextConfirmationCheckboxValue","currentMandateTextRef","braintreeach","getMandateText","currentMandateText","useBraintreeFastlaneInstruments","paypalFastlaneComponentRef","braintreefastlane","braintreelocalmethods","buttonText","brandName","initializeBraintreePaypalPaymentMethod","defaultOptions","providerName","formatAccountMask","accountMask","padding","card_information","cardData","isWalletButtonInitializationData","expMonth","expYear","accountNum","expDate","substr","WalletButtonPaymentMethodComponent","handleSignOut","onSignOutError","toggleSubmit","getWalletButtonPaymentMethodDerivedProps","prevMethod","prevIsPaymentDataRequired","isPaymentSelected","renderPaymentView","renderSignInView","signInButtonClassName","signInButtonLabel","editButtonClassName","editButtonLabel","billingAddress","walletPaymentData","initializeVisaCheckoutPayment","mergedOptions","braintreevisacheckout","reinitializePayment","BraintreeVisaCheckout","TextField","labelId","HiddenInput","restField","selectedIssuer","OptionButton","restProps","DropdownButton","ccDocumentField","fawry","sepa","debtor","paymentContext","creditor","sepaCreditor","sepaCreditorAddress","sepaCreditorPostalCode","sepaCreditorCity","sepaCreditorCountry","creditorId","sepaCreditorIdentifier","address1","postalCode","city","stateOrProvinceCode","countryCode","isChecked","setSelectedIssuer","bicValue","setBicValue","issuers","currentTarget","_selectedIssuer","dataset","issuersList","checkoutcomPaymentMethodsArray","checkoutComShemas","oxxo","ccDocument","qpay","notRequired","boleto","sepaMandate","customerMobile","customerEmail","email","isIdealHostedPageExperimentOn","features","checkoutCustomMethod","CheckoutcomCustomFieldset","initializeGooglePayPayment","AdyenV2GooglePay","walletButton","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BigCommercePaymentsGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","StripeGooglePay","StripeUPEGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","CheckoutcomGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay","hostedFieldset","hostedValidationSchema","initializeHostedCreditCardPayment","creditCard","hostedStoredCardValidationSchema","initializeKlarnaPayment","klarna","initializeKlarnaV2Payment","klarnav2","_","helpers","setValue","IssuerSelectButton","image","size1x","paymentMethodsResponse","cardNumberElementOptions","cardHolderElementOptions","cardCvcElementOptions","cardExpiryElementOptions","MolliePaymentMethodType","localeContext","initializeMolliePayment","mollieElements","getMolliesElementOptions","mollie","cardCvcId","cardHolderId","invalid","unsupportedMethodMessage","disableButton","creditcard","_shouldShowNumber","useHostedCreditCard","requireCardCode","initializeMonerisPayment","paymentConfig","moneris","initializePayPalCommerceCreditCardPayment","paypalcommercecreditcards","usePayPalCommerceFastlaneInstruments","paypalcommercefastlane","paypalcommerceratepay","getDate","getMonth","getFullYear","getPaypalCommerceRatePayValidationSchema","countryInfo","isEmbedded","initializePaypalExpressPayment","paypalexpress","useRedirectFlow","setIsAddingNewCard","setSelectedInstrumentId","defaultInstrumentId","getStylesFromElement","querySelector","copyStylesFromDummyFormFields","difference","mapToSquareStyles","borderColorIsFocus","borderWidthIsFocus","inputIsFocus","borderColorIsError","borderWidthIsError","colorIsError","squarev2","selector","pseudoElementSelector","parseRadioIconSize","parseInt","getFonts","elementsList","querySelectorAll","fonts","fontSrc","getAttribute","push","cssSrc","getAppearanceForOCSElement","defaultAccordionPaddingHorizontal","defaultAccordionPaddingVertical","formInputStyles","formLabelStyles","formErrorStyles","accordionHeaderStyles","accordionSelectedHeaderStyles","formChecklistStyles","accordionHeaderColor","accordionItemTitleFontSize","accordionHeaderFontFamily","accordionItemTitleFontWeight","accordionPaddingTop","accordionPaddingRight","accordionPaddingBottom","accordionHeaderPadding","isEmpty","radioOuter","radioOuterChecked","radioIconSize","sizes","radioIconOuterWidth","radioIconOuterStrokeWidth","radioIconInnerWidth","outerWidth","outerStrokeWidth","innerWidth","toFixed","stripeSVGSizeCoefficient","innerRadius","getRadioIconSizes","radioIconColor","radioIconFocusColor","colorPrimary","colorText","colorDanger","colorTextSecondary","colorTextPlaceholder","colorIcon","boxShadow","borderBottom","r","collapseStripeElement","isOCSLoading","setIsOCSLoading","methodSelector","renderSubmitButton","initializeStripePayment","stripeocs","layout","defaultCollapsed","radios","linkInAccordion","spacedAccordionItems","visibleAccordionItemsCount","appearance","paymentMethodSelect","handleClosePaymentMethod","collapseElement","togglePreloader","ChecklistSkeleton","defaultChecked","isStripeLinkAuthenticated","stripeLinkAuthenticationState","formInput","formLabel","formError","stripeupe","labelText","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","StripeElementType","useIndividualCardFields","paymentMethodType","additionalStripeV3Classes","Alipay","stripeOptions","classes","Card","CardCvc","CardExpiry","showIcon","Iban","supportedCountries","IdealBank","storeUrl","links","siteLink","onUnhandledStripeV3Error","getIndividualCardElementOptions","stripeInitializeOptions","getStripeOptions","stripev3","optionsCustomForm","threeDSecureVerification","setThreeDSecureVerification","cancelWorldpayModalFlow","cancelThreeDSecureVerification","initializeWorldpayPayment","worldpay","resolvePaymentMethod","query","resolveComponent","shouldSavingCardsBeEnabled","paymentMethodConfig","isVaultingNotEnabled","untrustedShippingCardVerificationMode","CVV","handleShow","handleHide","onMouseEnter","onMouseLeave","withHostedCreditCardFieldset","OriginalComponent","nextSelectionEndRef","CreditCardPaymentMethod","isPreloaderOn","then","threeDSecureContent","setThreeDSecureContent","threeDSecureContentRef","initializeBraintreePayment","threeDSecure","addFrame","removeFrame","appendThreeDSecureContent","cancelThreeDSecureModalFlow","HostedPaymentMethod","WalletButtonPaymentMethod","storeLanguage","initializeMasterpassPayment","masterpass","testMode","checkoutId","isMasterpassSrcEnabled","locale","PaymentMethodProviderType","selectedHostedMethod","providerType","Hosted","isHostedPayment","Wrapper","onMount","initializationComponentMap","card_ui","none","onDeinit","catch","usePropsToOnMount","PPSDKPaymentMethod","componentKey","initializationStrategy","PPSDK","Braintree","Api","formikContext","formContext","ResolvedPaymentMethod","PaymentMethod","createPaymentFormService","getPaymentMethodFromListValue","methods","PaymentMethodListItem","renderPaymentMethod","PaymentMethodV2","renderPaymentMethodTitle","isCustomChecklistItem","ChecklistItem","onSelect","handleSelect","defaultSelectedItemId","navigator","userAgent","redeemableProps","Redeemable","providersWithCustomClasses","PaymentSubmitButtonText","methodType","methodGateway","initialisationStrategyType","IconBolt","BlueSnapV2","PaypalVenmo","continueActionId","continueTranslationId","completeTranslationId","isInitializingCustomer","isSubmitting","isFullWidth","Action","SpamProtectionField","shouldShowRetryButton","handleRetry","verify","didExceedSpamLimit","isExecutingSpamCheck","executeSpamCheck","isErrorWithType","withCurrency","availableStoreCredit","usableStoreCredit","isStoreCreditApplied","Tooltip","storeCredit","toCustomerCurrency","PaymentMethodSubmitButtonContainer","PaymentMethodListFieldset","onMethodSelect","resetForm","handlePaymentMethodSelect","updatedValues","shouldCreateAccount","Extension","region","paymentFormConfig","defaultGatewayId","defaultMethodId","onSubmit","omitBy","isNil","onStoreCreditChange","selectedMethod","shouldDisableSubmit","shouldHidePaymentSubmitButton","shouldExecuteSpamCheck","selectedMethodId","Form","Payment","isReady","validationSchemas","submitFunctions","getContextValue","uniqueId","handleBeforeUnload","defaultMethod","skipRedirectConfirmationAlert","returnValue","handleCloseModal","cartUrl","loadCheckout","errorType","headers","top","assign","handleStoreCreditChange","useStoreCredit","applyStoreCredit","handleError","errorLogger","log","loadPaymentMethods","onCartChangedError","onSubmitError","submitOrder","analyticsTracker","clickPayButton","customSubmit","payload","payment","paymentData","mapToOrderRequestBody","order","getOrder","paymentComplete","orderId","paymentRejected","isCartChangedError","setSelectedMethod","trackSelectedPaymentMethod","fn","finalizeOrderIfNeeded","onFinalize","onFinalizeError","onReady","checkoutServiceSubscribe","loadPaymentMethodsOrThrow","grandTotalChangeUnsubscribe","handleCartTotalChange","grandTotal","checkEmbeddedSupport","finalizeOrderError","uniqueSelectedMethodId","renderOrderErrorModal","renderEmbeddedSupportErrorModal","shouldLocaliseErrorMessages","submitOrderError","ErrorModal","bind","onClose","title","selectedPaymentMethod","mapToPaymentProps","getConsignments","getPaymentMethod","getPaymentMethods","getFinalizeOrderError","getSubmitOrderError","consignments","stripeUpePaymentMethod","enableTermsAndConditions","isTermsConditionsEnabled","orderTermsAndConditionsType","termsConditionsType","orderTermsAndConditions","termsCondtitionsText","orderTermsAndConditionsLink","termsCondtitionsUrl","selectedPayment","filteredMethods","showInCheckout","multiShippingIncompatibleMethodIds","hasDefaultStoredInstrument","cartLink","subscribe","Math","withAnalytics","setShouldShow","rootElement","setSelectedItemId","handleToggleItem","newSelectedItemId","ChecklistContext","contextValue","InnerComponent","prevFormik","nextFormik","nextProps","DecoratedComponent","setIsOpen","canHandleEventRef","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID"],"sourceRoot":""}